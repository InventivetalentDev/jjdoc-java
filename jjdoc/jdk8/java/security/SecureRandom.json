{"name":"SecureRandom","comment":"This class provides a cryptographically strong random number\n generator (RNG).\n\n \u003cp\u003eA cryptographically strong random number\n minimally complies with the statistical random number generator tests\n specified in \u003ca href\u003d\"http://csrc.nist.gov/cryptval/140-2.htm\"\u003e\n \u003ci\u003eFIPS 140-2, Security Requirements for Cryptographic Modules\u003c/i\u003e\u003c/a\u003e,\n section 4.9.1.\n Additionally, SecureRandom must produce non-deterministic output.\n Therefore any seed material passed to a SecureRandom object must be\n unpredictable, and all SecureRandom output sequences must be\n cryptographically strong, as described in\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc1750.txt\"\u003e\n \u003ci\u003eRFC 1750: Randomness Recommendations for Security\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eA caller obtains a SecureRandom instance via the\n no-argument constructor or one of the {@code getInstance} methods:\n\n \u003cpre\u003e\n      SecureRandom random \u003d new SecureRandom();\n \u003c/pre\u003e\n\n \u003cp\u003e Many SecureRandom implementations are in the form of a pseudo-random\n number generator (PRNG), which means they use a deterministic algorithm\n to produce a pseudo-random sequence from a true random seed.\n Other implementations may produce true random numbers,\n and yet others may use a combination of both techniques.\n\n \u003cp\u003e Typical callers of SecureRandom invoke the following methods\n to retrieve random bytes:\n\n \u003cpre\u003e\n      SecureRandom random \u003d new SecureRandom();\n      byte bytes[] \u003d new byte[20];\n      random.nextBytes(bytes);\n \u003c/pre\u003e\n\n \u003cp\u003e Callers may also invoke the {@code generateSeed} method\n to generate a given number of seed bytes (to seed other random number\n generators, for example):\n \u003cpre\u003e\n      byte seed[] \u003d random.generateSeed(20);\n \u003c/pre\u003e\n\n Note: Depending on the implementation, the {@code generateSeed} and\n {@code nextBytes} methods may block as entropy is being gathered,\n for example, if they need to read from /dev/random on various Unix-like\n operating systems.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{},"package":"java.security","superclass":"java.util.Random","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SecureRandom","comment":"Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n\n \u003cp\u003e This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n \u003cp\u003e See the SecureRandom section in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard RNG algorithm names.\n\n \u003cp\u003e The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the {@code setSeed} method.\n If {@code setSeed} is not called, the first call to\n {@code nextBytes} will force the SecureRandom object to seed itself.\n This self-seeding will not occur if {@code setSeed} was\n previously called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"SecureRandom","comment":"Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n The SecureRandom instance is seeded with the specified seed bytes.\n\n \u003cp\u003e This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n \u003cp\u003e See the SecureRandom section in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard RNG algorithm names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","parameters":[{"name":"seed","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getInstance","comment":"Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n \u003cp\u003e The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the {@code setSeed} method.\n If {@code setSeed} is not called, the first call to\n {@code nextBytes} will force the SecureRandom object to seed itself.\n This self-seeding will not occur if {@code setSeed} was\n previously called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n \u003cp\u003e A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n \u003cp\u003e The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the {@code setSeed} method.\n If {@code setSeed} is not called, the first call to\n {@code nextBytes} will force the SecureRandom object to seed itself.\n This self-seeding will not occur if {@code setSeed} was\n previously called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n \u003cp\u003e A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n \u003cp\u003e The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the {@code setSeed} method.\n If {@code setSeed} is not called, the first call to\n {@code nextBytes} will force the SecureRandom object to seed itself.\n This self-seeding will not occur if {@code setSeed} was\n previously called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Provider)","flatSignature":"(String, Provider)","returnType":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider of this SecureRandom object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAlgorithm","comment":"Returns the name of the algorithm implemented by this SecureRandom\n object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSeed","comment":"Reseeds this random object. The given seed supplements, rather than\n replaces, the existing seed. Thus, repeated calls are guaranteed\n never to reduce randomness.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seed","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setSeed","comment":"Reseeds this random object, using the eight bytes contained\n in the given {@code long seed}. The given seed supplements,\n rather than replaces, the existing seed. Thus, repeated calls\n are guaranteed never to reduce randomness.\n\n \u003cp\u003eThis method is defined for compatibility with\n {@code java.util.Random}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seed","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextBytes","comment":"Generates a user-specified number of random bytes.\n\n \u003cp\u003e If a call to {@code setSeed} had not occurred previously,\n the first call to this method forces this SecureRandom object\n to seed itself.  This self-seeding will not occur if\n {@code setSeed} was previously called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getSeed","comment":"Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators.\n\n \u003cp\u003eThis method is only included for backwards compatibility.\n The caller is encouraged to use one of the alternative\n {@code getInstance} methods to obtain a SecureRandom object, and\n then call the {@code generateSeed} method to obtain seed bytes\n from that object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"numBytes","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generateSeed","comment":"Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"numBytes","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstanceStrong","comment":"Returns a {@code SecureRandom} object that was selected by using\n the algorithms/providers specified in the {@code\n securerandom.strongAlgorithms} {@link Security} property.\n \u003cp\u003e\n Some situations require strong random values, such as when\n creating high-value/long-lived secrets like RSA public/private\n keys.  To help guide applications in selecting a suitable strong\n {@code SecureRandom} implementation, Java distributions\n include a list of known strong {@code SecureRandom}\n implementations in the {@code securerandom.strongAlgorithms}\n Security property.\n \u003cp\u003e\n Every implementation of the Java platform is required to\n support at least one strong {@code SecureRandom} implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}