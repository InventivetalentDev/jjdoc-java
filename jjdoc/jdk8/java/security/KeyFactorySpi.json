{"name":"KeyFactorySpi","comment":"This class defines the \u003ci\u003eService Provider Interface\u003c/i\u003e (\u003cb\u003eSPI\u003c/b\u003e)\n for the {@code KeyFactory} class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a key factory for a particular algorithm.\n\n \u003cP\u003e Key factories are used to convert \u003cI\u003ekeys\u003c/I\u003e (opaque\n cryptographic keys of type {@code Key}) into \u003cI\u003ekey specifications\u003c/I\u003e\n (transparent representations of the underlying key material), and vice\n versa.\n\n \u003cP\u003e Key factories are bi-directional. That is, they allow you to build an\n opaque key object from a given key specification (key material), or to\n retrieve the underlying key material of a key object in a suitable format.\n\n \u003cP\u003e Multiple compatible key specifications may exist for the same key.\n For example, a DSA public key may be specified using\n {@code DSAPublicKeySpec} or\n {@code X509EncodedKeySpec}. A key factory can be used to translate\n between compatible key specifications.\n\n \u003cP\u003e A provider should document all the key specifications supported by its\n key factory.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"KeyFactorySpi","qualifiedName":"java.security.KeyFactorySpi","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"KeyFactorySpi","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[],"typeParameters":[],"enumConstants":[]}