{"name":"PermissionCollection","comment":"Abstract class representing a collection of Permission objects.\n\n \u003cp\u003eWith a PermissionCollection, you can:\n \u003cUL\u003e\n \u003cLI\u003e add a permission to the collection using the {@code add} method.\n \u003cLI\u003e check to see if a particular permission is implied in the\n      collection, using the {@code implies} method.\n \u003cLI\u003e enumerate all the permissions, using the {@code elements} method.\n \u003c/UL\u003e\n\n \u003cp\u003eWhen it is desirable to group together a number of Permission objects\n of the same type, the {@code newPermissionCollection} method on that\n particular type of Permission object should first be called. The default\n behavior (from the Permission class) is to simply return null.\n Subclasses of class Permission override the method if they need to store\n their permissions in a particular PermissionCollection object in order\n to provide the correct semantics when the\n {@code PermissionCollection.implies} method is called.\n If a non-null value is returned, that PermissionCollection must be used.\n If null is returned, then the caller of {@code newPermissionCollection}\n is free to store permissions of the\n given type in any PermissionCollection they choose\n (one that uses a Hashtable, one that uses a Vector, etc).\n\n \u003cp\u003eThe PermissionCollection returned by the\n {@code Permission.newPermissionCollection}\n method is a homogeneous collection, which stores only Permission objects\n for a given Permission type.  A PermissionCollection may also be\n heterogeneous.  For example, Permissions is a PermissionCollection\n subclass that represents a collection of PermissionCollections.\n That is, its members are each a homogeneous PermissionCollection.\n For example, a Permissions object might have a FilePermissionCollection\n for all the FilePermission objects, a SocketPermissionCollection for all the\n SocketPermission objects, and so on. Its {@code add} method adds a\n permission to the appropriate collection.\n\n \u003cp\u003eWhenever a permission is added to a heterogeneous PermissionCollection\n such as Permissions, and the PermissionCollection doesn\u0027t yet contain a\n PermissionCollection of the specified permission\u0027s type, the\n PermissionCollection should call\n the {@code newPermissionCollection} method on the permission\u0027s class\n to see if it requires a special PermissionCollection. If\n {@code newPermissionCollection}\n returns null, the PermissionCollection\n is free to store the permission in any type of PermissionCollection it\n desires (one using a Hashtable, one using a Vector, etc.). For example,\n the Permissions object uses a default PermissionCollection implementation\n that stores the permission objects in a Hashtable.\n\n \u003cp\u003e Subclass implementations of PermissionCollection should assume\n that they may be called simultaneously from multiple threads,\n and therefore should be synchronized properly.  Furthermore,\n Enumerations returned via the {@code elements} method are\n not \u003cem\u003efail-fast\u003c/em\u003e.  Modifications to a collection should not be\n performed while enumerating over that collection.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PermissionCollection","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"add","comment":"Adds a permission object to the current collection of permission objects.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"implies","comment":"Checks to see if the specified permission is implied by\n the collection of Permission objects held in this PermissionCollection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"elements","comment":"Returns an enumeration of all the Permission objects in the collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setReadOnly","comment":"Marks this PermissionCollection object as \"readonly\". After\n a PermissionCollection object\n is marked as readonly, no new Permission objects can be added to it\n using {@code add}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isReadOnly","comment":"Returns true if this PermissionCollection object is marked as readonly.\n If it is readonly, no new Permission objects can be added to it\n using {@code add}.\n\n \u003cp\u003eBy default, the object is \u003ci\u003enot\u003c/i\u003e readonly. It can be set to\n readonly by a call to {@code setReadOnly}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this PermissionCollection object,\n providing information about all the permissions it contains.\n The format is:\n \u003cpre\u003e\n super.toString() (\n   // enumerate all the Permission\n   // objects and call toString() on them,\n   // one per line..\n )\u003c/pre\u003e\n\n {@code super.toString} is a call to the {@code toString}\n method of this\n object\u0027s superclass, which is Object. The result is\n this PermissionCollection\u0027s type name followed by this object\u0027s\n hashcode, thus enabling clients to differentiate different\n PermissionCollections object, even if they contain the same permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.Permissions"],"enumConstants":[]}