{"name":"AccessController","comment":"\u003cp\u003e The AccessController class is used for access control operations\n and decisions.\n\n \u003cp\u003e More specifically, the AccessController class is used for\n three purposes:\n\n \u003cul\u003e\n \u003cli\u003e to decide whether an access to a critical system\n resource is to be allowed or denied, based on the security policy\n currently in effect,\n \u003cli\u003eto mark code as being \"privileged\", thus affecting subsequent\n access determinations, and\n \u003cli\u003eto obtain a \"snapshot\" of the current calling context so\n access-control decisions from a different context can be made with\n respect to the saved context. \u003c/ul\u003e\n\n \u003cp\u003e The {@link #checkPermission(Permission) checkPermission} method\n determines whether the access request indicated by a specified\n permission should be granted or denied. A sample call appears\n below. In this example, {@code checkPermission} will determine\n whether or not to grant \"read\" access to the file named \"testFile\" in\n the \"/temp\" directory.\n\n \u003cpre\u003e\n\n FilePermission perm \u003d new FilePermission(\"/temp/testFile\", \"read\");\n AccessController.checkPermission(perm);\n\n \u003c/pre\u003e\n\n \u003cp\u003e If a requested access is allowed,\n {@code checkPermission} returns quietly. If denied, an\n AccessControlException is\n thrown. AccessControlException can also be thrown if the requested\n permission is of an incorrect type or contains an invalid value.\n Such information is given whenever possible.\n\n Suppose the current thread traversed m callers, in the order of caller 1\n to caller 2 to caller m. Then caller m invoked the\n {@code checkPermission} method.\n The {@code checkPermission} method determines whether access\n is granted or denied based on the following algorithm:\n\n  \u003cpre\u003e {@code\n for (int i \u003d m; i \u003e 0; i--) {\n\n     if (caller i\u0027s domain does not have the permission)\n         throw AccessControlException\n\n     else if (caller i is marked as privileged) {\n         if (a context was specified in the call to doPrivileged)\n             context.checkPermission(permission)\n         if (limited permissions were specified in the call to doPrivileged) {\n             for (each limited permission) {\n                 if (the limited permission implies the requested permission)\n                     return;\n             }\n         } else\n             return;\n     }\n }\n\n // Next, check the context inherited when the thread was created.\n // Whenever a new thread is created, the AccessControlContext at\n // that time is stored and associated with the new thread, as the\n // \"inherited\" context.\n\n inheritedContext.checkPermission(permission);\n }\u003c/pre\u003e\n\n \u003cp\u003e A caller can be marked as being \"privileged\"\n (see {@link #doPrivileged(PrivilegedAction) doPrivileged} and below).\n When making access control decisions, the {@code checkPermission}\n method stops checking if it reaches a caller that\n was marked as \"privileged\" via a {@code doPrivileged}\n call without a context argument (see below for information about a\n context argument). If that caller\u0027s domain has the\n specified permission and at least one limiting permission argument (if any)\n implies the requested permission, no further checking is done and\n {@code checkPermission}\n returns quietly, indicating that the requested access is allowed.\n If that domain does not have the specified permission, an exception\n is thrown, as usual. If the caller\u0027s domain had the specified permission\n but it was not implied by any limiting permission arguments given in the call\n to {@code doPrivileged} then the permission checking continues\n until there are no more callers or another {@code doPrivileged}\n call matches the requested permission and returns normally.\n\n \u003cp\u003e The normal use of the \"privileged\" feature is as follows. If you\n don\u0027t need to return a value from within the \"privileged\" block, do\n the following:\n\n  \u003cpre\u003e {@code\n somemethod() {\n     ...normal code here...\n     AccessController.doPrivileged(new PrivilegedAction\u003cVoid\u003e() {\n         public Void run() {\n             // privileged code goes here, for example:\n             System.loadLibrary(\"awt\");\n             return null; // nothing to return\n         }\n     });\n     ...normal code here...\n }}\u003c/pre\u003e\n\n \u003cp\u003e\n PrivilegedAction is an interface with a single method, named\n {@code run}.\n The above example shows creation of an implementation\n of that interface; a concrete implementation of the\n {@code run} method is supplied.\n When the call to {@code doPrivileged} is made, an\n instance of the PrivilegedAction implementation is passed\n to it. The {@code doPrivileged} method calls the\n {@code run} method from the PrivilegedAction\n implementation after enabling privileges, and returns the\n {@code run} method\u0027s return value as the\n {@code doPrivileged} return value (which is\n ignored in this example).\n\n \u003cp\u003e If you need to return a value, you can do something like the following:\n\n  \u003cpre\u003e {@code\n somemethod() {\n     ...normal code here...\n     String user \u003d AccessController.doPrivileged(\n         new PrivilegedAction\u003cString\u003e() {\n         public String run() {\n             return System.getProperty(\"user.name\");\n             }\n         });\n     ...normal code here...\n }}\u003c/pre\u003e\n\n \u003cp\u003eIf the action performed in your {@code run} method could\n throw a \"checked\" exception (those listed in the {@code throws} clause\n of a method), then you need to use the\n {@code PrivilegedExceptionAction} interface instead of the\n {@code PrivilegedAction} interface:\n\n  \u003cpre\u003e {@code\n somemethod() throws FileNotFoundException {\n     ...normal code here...\n     try {\n         FileInputStream fis \u003d AccessController.doPrivileged(\n         new PrivilegedExceptionAction\u003cFileInputStream\u003e() {\n             public FileInputStream run() throws FileNotFoundException {\n                 return new FileInputStream(\"someFile\");\n             }\n         });\n     } catch (PrivilegedActionException e) {\n         // e.getException() should be an instance of FileNotFoundException,\n         // as only \"checked\" exceptions will be \"wrapped\" in a\n         // PrivilegedActionException.\n         throw (FileNotFoundException) e.getException();\n     }\n     ...normal code here...\n  }}\u003c/pre\u003e\n\n \u003cp\u003e Be *very* careful in your use of the \"privileged\" construct, and\n always remember to make the privileged code section as small as possible.\n You can pass {@code Permission} arguments to further limit the\n scope of the \"privilege\" (see below).\n\n\n \u003cp\u003e Note that {@code checkPermission} always performs security checks\n within the context of the currently executing thread.\n Sometimes a security check that should be made within a given context\n will actually need to be done from within a\n \u003ci\u003edifferent\u003c/i\u003e context (for example, from within a worker thread).\n The {@link #getContext() getContext} method and\n AccessControlContext class are provided\n for this situation. The {@code getContext} method takes a \"snapshot\"\n of the current calling context, and places\n it in an AccessControlContext object, which it returns. A sample call is\n the following:\n\n \u003cpre\u003e\n\n AccessControlContext acc \u003d AccessController.getContext()\n\n \u003c/pre\u003e\n\n \u003cp\u003e\n AccessControlContext itself has a {@code checkPermission} method\n that makes access decisions based on the context \u003ci\u003eit\u003c/i\u003e encapsulates,\n rather than that of the current execution thread.\n Code within a different context can thus call that method on the\n previously-saved AccessControlContext object. A sample call is the\n following:\n\n \u003cpre\u003e\n\n acc.checkPermission(permission)\n\n \u003c/pre\u003e\n\n \u003cp\u003e There are also times where you don\u0027t know a priori which permissions\n to check the context against. In these cases you can use the\n doPrivileged method that takes a context. You can also limit the scope\n of the privileged code by passing additional {@code Permission}\n parameters.\n\n  \u003cpre\u003e {@code\n somemethod() {\n     AccessController.doPrivileged(new PrivilegedAction\u003cObject\u003e() {\n         public Object run() {\n             // Code goes here. Any permission checks within this\n             // run method will require that the intersection of the\n             // caller\u0027s protection domain and the snapshot\u0027s\n             // context have the desired permission. If a requested\n             // permission is not implied by the limiting FilePermission\n             // argument then checking of the thread continues beyond the\n             // caller of doPrivileged.\n         }\n     }, acc, new FilePermission(\"/temp/*\", read));\n     ...normal code here...\n }}\u003c/pre\u003e\n \u003cp\u003e Passing a limiting {@code Permission} argument of an instance of\n {@code AllPermission} is equivalent to calling the equivalent\n {@code doPrivileged} method without limiting {@code Permission}\n arguments. Passing a zero length array of {@code Permission} disables\n the code privileges so that checking always continues beyond the caller of\n that {@code doPrivileged} method.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AccessController","qualifiedName":"java.security.AccessController","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"doPrivileged","comment":"Performs the specified {@code PrivilegedAction} with privileges\n enabled. The action is performed with \u003ci\u003eall\u003c/i\u003e of the permissions\n possessed by the caller\u0027s protection domain.\n\n \u003cp\u003e If the action\u0027s {@code run} method throws an (unchecked)\n exception, it will propagate through this method.\n\n \u003cp\u003e Note that any DomainCombiner associated with the current\n AccessControlContext will be ignored while the action is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedAction\u003cT\u003e)","flatSignature":"(PrivilegedAction\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedAction","qualifiedName":"java.security.PrivilegedAction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivilegedWithCombiner","comment":"Performs the specified {@code PrivilegedAction} with privileges\n enabled. The action is performed with \u003ci\u003eall\u003c/i\u003e of the permissions\n possessed by the caller\u0027s protection domain.\n\n \u003cp\u003e If the action\u0027s {@code run} method throws an (unchecked)\n exception, it will propagate through this method.\n\n \u003cp\u003e This method preserves the current AccessControlContext\u0027s\n DomainCombiner (which may be null) while the action is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedAction\u003cT\u003e)","flatSignature":"(PrivilegedAction\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedAction","qualifiedName":"java.security.PrivilegedAction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivileged","comment":"Performs the specified {@code PrivilegedAction} with privileges\n enabled and restricted by the specified {@code AccessControlContext}.\n The action is performed with the intersection of the permissions\n possessed by the caller\u0027s protection domain, and those possessed\n by the domains represented by the specified {@code AccessControlContext}.\n \u003cp\u003e\n If the action\u0027s {@code run} method throws an (unchecked) exception,\n it will propagate through this method.\n \u003cp\u003e\n If a security manager is installed and the specified\n {@code AccessControlContext} was not created by system code and the\n caller\u0027s {@code ProtectionDomain} has not been granted the\n {@literal \"createAccessControlContext\"}\n {@link java.security.SecurityPermission}, then the action is performed\n with no permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedAction\u003cT\u003e, java.security.AccessControlContext)","flatSignature":"(PrivilegedAction\u003cT\u003e, AccessControlContext)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedAction","qualifiedName":"java.security.PrivilegedAction","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivileged","comment":"Performs the specified {@code PrivilegedAction} with privileges\n enabled and restricted by the specified\n {@code AccessControlContext} and with a privilege scope limited\n by specified {@code Permission} arguments.\n\n The action is performed with the intersection of the permissions\n possessed by the caller\u0027s protection domain, and those possessed\n by the domains represented by the specified\n {@code AccessControlContext}.\n \u003cp\u003e\n If the action\u0027s {@code run} method throws an (unchecked) exception,\n it will propagate through this method.\n \u003cp\u003e\n If a security manager is installed and the specified\n {@code AccessControlContext} was not created by system code and the\n caller\u0027s {@code ProtectionDomain} has not been granted the\n {@literal \"createAccessControlContext\"}\n {@link java.security.SecurityPermission}, then the action is performed\n with no permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedAction\u003cT\u003e, java.security.AccessControlContext, java.security.Permission...)","flatSignature":"(PrivilegedAction\u003cT\u003e, AccessControlContext, Permission...)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedAction","qualifiedName":"java.security.PrivilegedAction","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}},{"name":"perms","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivilegedWithCombiner","comment":"Performs the specified {@code PrivilegedAction} with privileges\n enabled and restricted by the specified\n {@code AccessControlContext} and with a privilege scope limited\n by specified {@code Permission} arguments.\n\n The action is performed with the intersection of the permissions\n possessed by the caller\u0027s protection domain, and those possessed\n by the domains represented by the specified\n {@code AccessControlContext}.\n \u003cp\u003e\n If the action\u0027s {@code run} method throws an (unchecked) exception,\n it will propagate through this method.\n\n \u003cp\u003e This method preserves the current AccessControlContext\u0027s\n DomainCombiner (which may be null) while the action is performed.\n \u003cp\u003e\n If a security manager is installed and the specified\n {@code AccessControlContext} was not created by system code and the\n caller\u0027s {@code ProtectionDomain} has not been granted the\n {@literal \"createAccessControlContext\"}\n {@link java.security.SecurityPermission}, then the action is performed\n with no permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedAction\u003cT\u003e, java.security.AccessControlContext, java.security.Permission...)","flatSignature":"(PrivilegedAction\u003cT\u003e, AccessControlContext, Permission...)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedAction","qualifiedName":"java.security.PrivilegedAction","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}},{"name":"perms","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivileged","comment":"Performs the specified {@code PrivilegedExceptionAction} with\n privileges enabled.  The action is performed with \u003ci\u003eall\u003c/i\u003e of the\n permissions possessed by the caller\u0027s protection domain.\n\n \u003cp\u003e If the action\u0027s {@code run} method throws an \u003ci\u003eunchecked\u003c/i\u003e\n exception, it will propagate through this method.\n\n \u003cp\u003e Note that any DomainCombiner associated with the current\n AccessControlContext will be ignored while the action is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedExceptionAction\u003cT\u003e)","flatSignature":"(PrivilegedExceptionAction\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedExceptionAction","qualifiedName":"java.security.PrivilegedExceptionAction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivilegedWithCombiner","comment":"Performs the specified {@code PrivilegedExceptionAction} with\n privileges enabled.  The action is performed with \u003ci\u003eall\u003c/i\u003e of the\n permissions possessed by the caller\u0027s protection domain.\n\n \u003cp\u003e If the action\u0027s {@code run} method throws an \u003ci\u003eunchecked\u003c/i\u003e\n exception, it will propagate through this method.\n\n \u003cp\u003e This method preserves the current AccessControlContext\u0027s\n DomainCombiner (which may be null) while the action is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedExceptionAction\u003cT\u003e)","flatSignature":"(PrivilegedExceptionAction\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedExceptionAction","qualifiedName":"java.security.PrivilegedExceptionAction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivileged","comment":"Performs the specified {@code PrivilegedExceptionAction} with\n privileges enabled and restricted by the specified\n {@code AccessControlContext}.  The action is performed with the\n intersection of the permissions possessed by the caller\u0027s\n protection domain, and those possessed by the domains represented by the\n specified {@code AccessControlContext}.\n \u003cp\u003e\n If the action\u0027s {@code run} method throws an \u003ci\u003eunchecked\u003c/i\u003e\n exception, it will propagate through this method.\n \u003cp\u003e\n If a security manager is installed and the specified\n {@code AccessControlContext} was not created by system code and the\n caller\u0027s {@code ProtectionDomain} has not been granted the\n {@literal \"createAccessControlContext\"}\n {@link java.security.SecurityPermission}, then the action is performed\n with no permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedExceptionAction\u003cT\u003e, java.security.AccessControlContext)","flatSignature":"(PrivilegedExceptionAction\u003cT\u003e, AccessControlContext)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedExceptionAction","qualifiedName":"java.security.PrivilegedExceptionAction","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivileged","comment":"Performs the specified {@code PrivilegedExceptionAction} with\n privileges enabled and restricted by the specified\n {@code AccessControlContext} and with a privilege scope limited by\n specified {@code Permission} arguments.\n\n The action is performed with the intersection of the permissions\n possessed by the caller\u0027s protection domain, and those possessed\n by the domains represented by the specified\n {@code AccessControlContext}.\n \u003cp\u003e\n If the action\u0027s {@code run} method throws an (unchecked) exception,\n it will propagate through this method.\n \u003cp\u003e\n If a security manager is installed and the specified\n {@code AccessControlContext} was not created by system code and the\n caller\u0027s {@code ProtectionDomain} has not been granted the\n {@literal \"createAccessControlContext\"}\n {@link java.security.SecurityPermission}, then the action is performed\n with no permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedExceptionAction\u003cT\u003e, java.security.AccessControlContext, java.security.Permission...)","flatSignature":"(PrivilegedExceptionAction\u003cT\u003e, AccessControlContext, Permission...)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedExceptionAction","qualifiedName":"java.security.PrivilegedExceptionAction","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}},{"name":"perms","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"doPrivilegedWithCombiner","comment":"Performs the specified {@code PrivilegedExceptionAction} with\n privileges enabled and restricted by the specified\n {@code AccessControlContext} and with a privilege scope limited by\n specified {@code Permission} arguments.\n\n The action is performed with the intersection of the permissions\n possessed by the caller\u0027s protection domain, and those possessed\n by the domains represented by the specified\n {@code AccessControlContext}.\n \u003cp\u003e\n If the action\u0027s {@code run} method throws an (unchecked) exception,\n it will propagate through this method.\n\n \u003cp\u003e This method preserves the current AccessControlContext\u0027s\n DomainCombiner (which may be null) while the action is performed.\n \u003cp\u003e\n If a security manager is installed and the specified\n {@code AccessControlContext} was not created by system code and the\n caller\u0027s {@code ProtectionDomain} has not been granted the\n {@literal \"createAccessControlContext\"}\n {@link java.security.SecurityPermission}, then the action is performed\n with no permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedExceptionAction\u003cT\u003e, java.security.AccessControlContext, java.security.Permission...)","flatSignature":"(PrivilegedExceptionAction\u003cT\u003e, AccessControlContext, Permission...)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedExceptionAction","qualifiedName":"java.security.PrivilegedExceptionAction","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}},{"name":"perms","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"getContext","comment":"This method takes a \"snapshot\" of the current calling context, which\n includes the current Thread\u0027s inherited AccessControlContext and any\n limited privilege scope, and places it in an AccessControlContext object.\n This context may then be checked at a later point, possibly in another thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"checkPermission","comment":"Determines whether the access request indicated by the\n specified permission should be allowed or denied, based on\n the current AccessControlContext and security policy.\n This method quietly returns if the access request\n is permitted, or throws an AccessControlException otherwise. The\n getPermission method of the AccessControlException returns the\n {@code perm} Permission object instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"perm","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}