{"name":"KeyStore","comment":"This class represents a storage facility for cryptographic\n keys and certificates.\n\n \u003cp\u003e A {@code KeyStore} manages different types of entries.\n Each type of entry implements the {@code KeyStore.Entry} interface.\n Three basic {@code KeyStore.Entry} implementations are provided:\n\n \u003cul\u003e\n \u003cli\u003e\u003cb\u003eKeyStore.PrivateKeyEntry\u003c/b\u003e\n \u003cp\u003e This type of entry holds a cryptographic {@code PrivateKey},\n which is optionally stored in a protected format to prevent\n unauthorized access.  It is also accompanied by a certificate chain\n for the corresponding public key.\n\n \u003cp\u003e Private keys and certificate chains are used by a given entity for\n self-authentication. Applications for this authentication include software\n distribution organizations which sign JAR files as part of releasing\n and/or licensing software.\n\n \u003cli\u003e\u003cb\u003eKeyStore.SecretKeyEntry\u003c/b\u003e\n \u003cp\u003e This type of entry holds a cryptographic {@code SecretKey},\n which is optionally stored in a protected format to prevent\n unauthorized access.\n\n \u003cli\u003e\u003cb\u003eKeyStore.TrustedCertificateEntry\u003c/b\u003e\n \u003cp\u003e This type of entry contains a single public key {@code Certificate}\n belonging to another party. It is called a \u003ci\u003etrusted certificate\u003c/i\u003e\n because the keystore owner trusts that the public key in the certificate\n indeed belongs to the identity identified by the \u003ci\u003esubject\u003c/i\u003e (owner)\n of the certificate.\n\n \u003cp\u003eThis type of entry can be used to authenticate other parties.\n \u003c/ul\u003e\n\n \u003cp\u003e Each entry in a keystore is identified by an \"alias\" string. In the\n case of private keys and their associated certificate chains, these strings\n distinguish among the different ways in which the entity may authenticate\n itself. For example, the entity may authenticate itself using different\n certificate authorities, or using different public key algorithms.\n\n \u003cp\u003e Whether aliases are case sensitive is implementation dependent. In order\n to avoid problems, it is recommended not to use aliases in a KeyStore that\n only differ in case.\n\n \u003cp\u003e Whether keystores are persistent, and the mechanisms used by the\n keystore if it is persistent, are not specified here. This allows\n use of a variety of techniques for protecting sensitive (e.g., private or\n secret) keys. Smart cards or other integrated cryptographic engines\n (SafeKeyper) are one option, and simpler mechanisms such as files may also\n be used (in a variety of formats).\n\n \u003cp\u003e Typical ways to request a KeyStore object include\n relying on the default type and providing a specific keystore type.\n\n \u003cul\u003e\n \u003cli\u003eTo rely on the default type:\n \u003cpre\u003e\n    KeyStore ks \u003d KeyStore.getInstance(KeyStore.getDefaultType());\n \u003c/pre\u003e\n The system will return a keystore implementation for the default type.\n\n \u003cli\u003eTo provide a specific keystore type:\n \u003cpre\u003e\n      KeyStore ks \u003d KeyStore.getInstance(\"JKS\");\n \u003c/pre\u003e\n The system will return the most preferred implementation of the\n specified keystore type available in the environment. \u003cp\u003e\n \u003c/ul\u003e\n\n \u003cp\u003e Before a keystore can be accessed, it must be\n {@link #load(java.io.InputStream, char[]) loaded}.\n \u003cpre\u003e\n    KeyStore ks \u003d KeyStore.getInstance(KeyStore.getDefaultType());\n\n    // get user password and file input stream\n    char[] password \u003d getPassword();\n\n    try (FileInputStream fis \u003d new FileInputStream(\"keyStoreName\")) {\n        ks.load(fis, password);\n    }\n \u003c/pre\u003e\n\n To create an empty keystore using the above {@code load} method,\n pass {@code null} as the {@code InputStream} argument.\n\n \u003cp\u003e Once the keystore has been loaded, it is possible\n to read existing entries from the keystore, or to write new entries\n into the keystore:\n \u003cpre\u003e\n    KeyStore.ProtectionParameter protParam \u003d\n        new KeyStore.PasswordProtection(password);\n\n    // get my private key\n    KeyStore.PrivateKeyEntry pkEntry \u003d (KeyStore.PrivateKeyEntry)\n        ks.getEntry(\"privateKeyAlias\", protParam);\n    PrivateKey myPrivateKey \u003d pkEntry.getPrivateKey();\n\n    // save my secret key\n    javax.crypto.SecretKey mySecretKey;\n    KeyStore.SecretKeyEntry skEntry \u003d\n        new KeyStore.SecretKeyEntry(mySecretKey);\n    ks.setEntry(\"secretKeyAlias\", skEntry, protParam);\n\n    // store away the keystore\n    try (FileOutputStream fos \u003d new FileOutputStream(\"newKeyStoreName\")) {\n        ks.store(fos, password);\n    }\n \u003c/pre\u003e\n\n Note that although the same password may be used to\n load the keystore, to protect the private key entry,\n to protect the secret key entry, and to store the keystore\n (as is shown in the sample code above),\n different passwords or other protection parameters\n may also be used.\n\n \u003cp\u003e Every implementation of the Java platform is required to support\n the following standard {@code KeyStore} type:\n \u003cul\u003e\n \u003cli\u003e{@code PKCS12}\u003c/li\u003e\n \u003c/ul\u003e\n This type is described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore\"\u003e\n KeyStore section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other types are supported.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"KeyStore","qualifiedName":"java.security.KeyStore","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":["java.security.KeyStore.LoadStoreParameter","java.security.KeyStore.ProtectionParameter","java.security.KeyStore.PasswordProtection","java.security.KeyStore.CallbackHandlerProtection","java.security.KeyStore.Entry","java.security.KeyStore.PrivateKeyEntry","java.security.KeyStore.SecretKeyEntry","java.security.KeyStore.TrustedCertificateEntry","java.security.KeyStore.Builder"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getInstance","comment":"Returns a keystore object of the specified type.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the first\n Provider that supports the specified type is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"KeyStore","qualifiedName":"java.security.KeyStore","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a keystore object of the specified type.\n\n \u003cp\u003e A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"KeyStore","qualifiedName":"java.security.KeyStore","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a keystore object of the specified type.\n\n \u003cp\u003e A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Provider)","flatSignature":"(String, Provider)","returnType":{"isPrimitive":false,"simpleName":"KeyStore","qualifiedName":"java.security.KeyStore","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDefaultType","comment":"Returns the default keystore type as specified by the\n {@code keystore.type} security property, or the string\n {@literal \"jks\"} (acronym for {@literal \"Java keystore\"})\n if no such property exists.\n\n \u003cp\u003eThe default keystore type can be used by applications that do not\n want to use a hard-coded keystore type when calling one of the\n {@code getInstance} methods, and want to provide a default keystore\n type in case a user does not specify its own.\n\n \u003cp\u003eThe default keystore type can be changed by setting the value of the\n {@code keystore.type} security property to the desired keystore type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider of this keystore.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getType","comment":"Returns the type of this keystore.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getKey","comment":"Returns the key associated with the given alias, using the given\n password to recover it.  The key must have been associated with\n the alias by a call to {@code setKeyEntry},\n or by a call to {@code setEntry} with a\n {@code PrivateKeyEntry} or {@code SecretKeyEntry}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, char[])","flatSignature":"(String, char[])","returnType":{"isPrimitive":false,"simpleName":"Key","qualifiedName":"java.security.Key","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"password","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getCertificateChain","comment":"Returns the certificate chain associated with the given alias.\n The certificate chain must have been associated with the alias\n by a call to {@code setKeyEntry},\n or by a call to {@code setEntry} with a\n {@code PrivateKeyEntry}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCertificate","comment":"Returns the certificate associated with the given alias.\n\n \u003cp\u003e If the given alias name identifies an entry\n created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry},\n then the trusted certificate contained in that entry is returned.\n\n \u003cp\u003e If the given alias name identifies an entry\n created by a call to {@code setKeyEntry},\n or created by a call to {@code setEntry} with a\n {@code PrivateKeyEntry},\n then the first element of the certificate chain in that entry\n is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCreationDate","comment":"Returns the creation date of the entry identified by the given alias.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setKeyEntry","comment":"Assigns the given key to the given alias, protecting it with the given\n password.\n\n \u003cp\u003eIf the given key is of type {@code java.security.PrivateKey},\n it must be accompanied by a certificate chain certifying the\n corresponding public key.\n\n \u003cp\u003eIf the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[])","flatSignature":"(String, Key, char[], Certificate[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"key","type":{"isPrimitive":false,"simpleName":"Key","qualifiedName":"java.security.Key","dimension":"","elementType":{}}},{"name":"password","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"chain","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setKeyEntry","comment":"Assigns the given key (that has already been protected) to the given\n alias.\n\n \u003cp\u003eIf the protected key is of type\n {@code java.security.PrivateKey}, it must be accompanied by a\n certificate chain certifying the corresponding public key. If the\n underlying keystore implementation is of type {@code jks},\n {@code key} must be encoded as an\n {@code EncryptedPrivateKeyInfo} as defined in the PKCS #8 standard.\n\n \u003cp\u003eIf the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[], java.security.cert.Certificate[])","flatSignature":"(String, byte[], Certificate[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"key","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"chain","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setCertificateEntry","comment":"Assigns the given trusted certificate to the given alias.\n\n \u003cp\u003e If the given alias identifies an existing entry\n created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry},\n the trusted certificate in the existing entry\n is overridden by the given certificate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.cert.Certificate)","flatSignature":"(String, Certificate)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"cert","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"deleteEntry","comment":"Deletes the entry identified by the given alias from this keystore.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"aliases","comment":"Lists all the alias names of this keystore.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"containsAlias","comment":"Checks if the given alias exists in this keystore.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"size","comment":"Retrieves the number of entries in this keystore.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isKeyEntry","comment":"Returns true if the entry identified by the given alias\n was created by a call to {@code setKeyEntry},\n or created by a call to {@code setEntry} with a\n {@code PrivateKeyEntry} or a {@code SecretKeyEntry}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isCertificateEntry","comment":"Returns true if the entry identified by the given alias\n was created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCertificateAlias","comment":"Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate.\n\n \u003cp\u003e This method attempts to match the given certificate with each\n keystore entry. If the entry being considered was\n created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry},\n then the given certificate is compared to that entry\u0027s certificate.\n\n \u003cp\u003e If the entry being considered was\n created by a call to {@code setKeyEntry},\n or created by a call to {@code setEntry} with a\n {@code PrivateKeyEntry},\n then the given certificate is compared to the first\n element of that entry\u0027s certificate chain.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.Certificate)","flatSignature":"(Certificate)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cert","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"store","comment":"Stores this keystore to the given output stream, and protects its\n integrity with the given password.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream, char[])","flatSignature":"(OutputStream, char[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"stream","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}},{"name":"password","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"store","comment":"Stores this keystore using the given {@code LoadStoreParameter}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.KeyStore.LoadStoreParameter)","flatSignature":"(KeyStore.LoadStoreParameter)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"param","type":{"isPrimitive":false,"simpleName":"LoadStoreParameter","qualifiedName":"java.security.KeyStore.LoadStoreParameter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"load","comment":"Loads this KeyStore from the given input stream.\n\n \u003cp\u003eA password may be given to unlock the keystore\n (e.g. the keystore resides on a hardware token device),\n or to check the integrity of the keystore data.\n If a password is not given for integrity checking,\n then integrity checking is not performed.\n\n \u003cp\u003eIn order to create an empty keystore, or if the keystore cannot\n be initialized from a stream, pass {@code null}\n as the {@code stream} argument.\n\n \u003cp\u003e Note that if this keystore has already been loaded, it is\n reinitialized and loaded again from the given input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream, char[])","flatSignature":"(InputStream, char[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"stream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}},{"name":"password","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"load","comment":"Loads this keystore using the given {@code LoadStoreParameter}.\n\n \u003cp\u003e Note that if this KeyStore has already been loaded, it is\n reinitialized and loaded again from the given parameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.KeyStore.LoadStoreParameter)","flatSignature":"(KeyStore.LoadStoreParameter)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"param","type":{"isPrimitive":false,"simpleName":"LoadStoreParameter","qualifiedName":"java.security.KeyStore.LoadStoreParameter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getEntry","comment":"Gets a keystore {@code Entry} for the specified alias\n with the specified protection parameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.KeyStore.ProtectionParameter)","flatSignature":"(String, KeyStore.ProtectionParameter)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.security.KeyStore.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"protParam","type":{"isPrimitive":false,"simpleName":"ProtectionParameter","qualifiedName":"java.security.KeyStore.ProtectionParameter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setEntry","comment":"Saves a keystore {@code Entry} under the specified alias.\n The protection parameter is used to protect the\n {@code Entry}.\n\n \u003cp\u003e If an entry already exists for the specified alias,\n it is overridden.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.KeyStore.Entry, java.security.KeyStore.ProtectionParameter)","flatSignature":"(String, KeyStore.Entry, KeyStore.ProtectionParameter)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"entry","type":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.security.KeyStore.Entry","dimension":"","elementType":{}}},{"name":"protParam","type":{"isPrimitive":false,"simpleName":"ProtectionParameter","qualifiedName":"java.security.KeyStore.ProtectionParameter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"entryInstanceOf","comment":"Determines if the keystore {@code Entry} for the specified\n {@code alias} is an instance or subclass of the specified\n {@code entryClass}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Class\u003c? extends java.security.KeyStore.Entry\u003e)","flatSignature":"(String, Class\u003c? extends KeyStore.Entry\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"alias","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"entryClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}