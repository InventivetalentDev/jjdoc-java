{"name":"KeyPairGenerator","comment":"The KeyPairGenerator class is used to generate pairs of\n public and private keys. Key pair generators are constructed using the\n {@code getInstance} factory methods (static methods that\n return instances of a given class).\n\n \u003cp\u003eA Key pair generator for a particular algorithm creates a public/private\n key pair that can be used with this algorithm. It also associates\n algorithm-specific parameters with each of the generated keys.\n\n \u003cp\u003eThere are two ways to generate a key pair: in an algorithm-independent\n manner, and in an algorithm-specific manner.\n The only difference between the two is the initialization of the object:\n\n \u003cul\u003e\n \u003cli\u003e\u003cb\u003eAlgorithm-Independent Initialization\u003c/b\u003e\n \u003cp\u003eAll key pair generators share the concepts of a keysize and a\n source of randomness. The keysize is interpreted differently for different\n algorithms (e.g., in the case of the \u003ci\u003eDSA\u003c/i\u003e algorithm, the keysize\n corresponds to the length of the modulus).\n There is an\n {@link #initialize(int, java.security.SecureRandom) initialize}\n method in this KeyPairGenerator class that takes these two universally\n shared types of arguments. There is also one that takes just a\n {@code keysize} argument, and uses the {@code SecureRandom}\n implementation of the highest-priority installed provider as the source\n of randomness. (If none of the installed providers supply an implementation\n of {@code SecureRandom}, a system-provided source of randomness is\n used.)\n\n \u003cp\u003eSince no other parameters are specified when you call the above\n algorithm-independent {@code initialize} methods, it is up to the\n provider what to do about the algorithm-specific parameters (if any) to be\n associated with each of the keys.\n\n \u003cp\u003eIf the algorithm is the \u003ci\u003eDSA\u003c/i\u003e algorithm, and the keysize (modulus\n size) is 512, 768, or 1024, then the \u003ci\u003eSun\u003c/i\u003e provider uses a set of\n precomputed values for the {@code p}, {@code q}, and\n {@code g} parameters. If the modulus size is not one of the above\n values, the \u003ci\u003eSun\u003c/i\u003e provider creates a new set of parameters. Other\n providers might have precomputed parameter sets for more than just the\n three modulus sizes mentioned above. Still others might not have a list of\n precomputed parameters at all and instead always create new parameter sets.\n\n \u003cli\u003e\u003cb\u003eAlgorithm-Specific Initialization\u003c/b\u003e\n \u003cp\u003eFor situations where a set of algorithm-specific parameters already\n exists (e.g., so-called \u003ci\u003ecommunity parameters\u003c/i\u003e in DSA), there are two\n {@link #initialize(java.security.spec.AlgorithmParameterSpec)\n initialize} methods that have an {@code AlgorithmParameterSpec}\n argument. One also has a {@code SecureRandom} argument, while the\n the other uses the {@code SecureRandom}\n implementation of the highest-priority installed provider as the source\n of randomness. (If none of the installed providers supply an implementation\n of {@code SecureRandom}, a system-provided source of randomness is\n used.)\n \u003c/ul\u003e\n\n \u003cp\u003eIn case the client does not explicitly initialize the KeyPairGenerator\n (via a call to an {@code initialize} method), each provider must\n supply (and document) a default initialization.\n For example, the \u003ci\u003eSun\u003c/i\u003e provider uses a default modulus size (keysize)\n of 1024 bits.\n\n \u003cp\u003eNote that this class is abstract and extends from\n {@code KeyPairGeneratorSpi} for historical reasons.\n Application developers should only take notice of the methods defined in\n this {@code KeyPairGenerator} class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of key pair generators.\n\n \u003cp\u003e Every implementation of the Java platform is required to support the\n following standard {@code KeyPairGenerator} algorithms and keysizes in\n parentheses:\n \u003cul\u003e\n \u003cli\u003e{@code DiffieHellman} (1024)\u003c/li\u003e\n \u003cli\u003e{@code DSA} (1024)\u003c/li\u003e\n \u003cli\u003e{@code RSA} (1024, 2048)\u003c/li\u003e\n \u003c/ul\u003e\n These algorithms are described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\"\u003e\n KeyPairGenerator section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"KeyPairGenerator","qualifiedName":"java.security.KeyPairGenerator","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.KeyPairGeneratorSpi","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getAlgorithm","comment":"Returns the standard name of the algorithm for this key pair generator.\n See the KeyPairGenerator section in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard algorithm names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"KeyPairGenerator","qualifiedName":"java.security.KeyPairGenerator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n \u003cp\u003e A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"KeyPairGenerator","qualifiedName":"java.security.KeyPairGenerator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n \u003cp\u003e A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Provider)","flatSignature":"(String, Provider)","returnType":{"isPrimitive":false,"simpleName":"KeyPairGenerator","qualifiedName":"java.security.KeyPairGenerator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider of this key pair generator object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"initialize","comment":"Initializes the key pair generator for a certain keysize using\n a default parameter set and the {@code SecureRandom}\n implementation of the highest-priority installed provider as the source\n of randomness.\n (If none of the installed providers supply an implementation of\n {@code SecureRandom}, a system-provided source of randomness is\n used.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"keysize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"initialize","comment":"Initializes the key pair generator for a certain keysize with\n the given source of randomness (and a default parameter set).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.security.SecureRandom)","flatSignature":"(int, SecureRandom)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"keysize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"random","type":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"initialize","comment":"Initializes the key pair generator using the specified parameter\n set and the {@code SecureRandom}\n implementation of the highest-priority installed provider as the source\n of randomness.\n (If none of the installed providers supply an implementation of\n {@code SecureRandom}, a system-provided source of randomness is\n used.).\n\n \u003cp\u003eThis concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi\n {@link KeyPairGeneratorSpi#initialize(\n java.security.spec.AlgorithmParameterSpec,\n java.security.SecureRandom) initialize} method,\n passing it {@code params} and a source of randomness (obtained\n from the highest-priority installed provider or system-provided if none\n of the installed providers supply one).\n That {@code initialize} method always throws an\n UnsupportedOperationException if it is not overridden by the provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.spec.AlgorithmParameterSpec)","flatSignature":"(AlgorithmParameterSpec)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"params","type":{"isPrimitive":false,"simpleName":"AlgorithmParameterSpec","qualifiedName":"java.security.spec.AlgorithmParameterSpec","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"initialize","comment":"Initializes the key pair generator with the given parameter\n set and source of randomness.\n\n \u003cp\u003eThis concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi {@link\n KeyPairGeneratorSpi#initialize(\n java.security.spec.AlgorithmParameterSpec,\n java.security.SecureRandom) initialize} method,\n passing it {@code params} and {@code random}.\n That {@code initialize}\n method always throws an\n UnsupportedOperationException if it is not overridden by the provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)","flatSignature":"(AlgorithmParameterSpec, SecureRandom)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"params","type":{"isPrimitive":false,"simpleName":"AlgorithmParameterSpec","qualifiedName":"java.security.spec.AlgorithmParameterSpec","dimension":"","elementType":{}}},{"name":"random","type":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"genKeyPair","comment":"Generates a key pair.\n\n \u003cp\u003eIf this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.\n\n \u003cp\u003eThis will generate a new key pair every time it is called.\n\n \u003cp\u003eThis method is functionally equivalent to\n {@link #generateKeyPair() generateKeyPair}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"KeyPair","qualifiedName":"java.security.KeyPair","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"generateKeyPair","comment":"Generates a key pair.\n\n \u003cp\u003eIf this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.\n\n \u003cp\u003eThis will generate a new key pair every time it is called.\n\n \u003cp\u003eThis method is functionally equivalent to\n {@link #genKeyPair() genKeyPair}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"KeyPair","qualifiedName":"java.security.KeyPair","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}