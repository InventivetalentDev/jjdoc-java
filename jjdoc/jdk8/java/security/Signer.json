{"name":"Signer","comment":"This class is used to represent an Identity that can also digitally\n sign data.\n\n \u003cp\u003eThe management of a signer\u0027s private keys is an important and\n sensitive issue that should be handled by subclasses as appropriate\n to their intended use.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Signer","qualifiedName":"java.security.Signer","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.Identity","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Signer","comment":"Creates a signer with the specified identity name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Signer","comment":"Creates a signer with the specified identity name and scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.IdentityScope)","flatSignature":"(String, IdentityScope)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"scope","type":{"isPrimitive":false,"simpleName":"IdentityScope","qualifiedName":"java.security.IdentityScope","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getPrivateKey","comment":"Returns this signer\u0027s private key.\n\n \u003cp\u003eFirst, if there is a security manager, its {@code checkSecurityAccess}\n method is called with {@code \"getSignerPrivateKey\"}\n as its argument to see if it\u0027s ok to return the private key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PrivateKey","qualifiedName":"java.security.PrivateKey","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setKeyPair","comment":"Sets the key pair (public key and private key) for this signer.\n\n \u003cp\u003eFirst, if there is a security manager, its {@code checkSecurityAccess}\n method is called with {@code \"setSignerKeyPair\"}\n as its argument to see if it\u0027s ok to set the key pair.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.KeyPair)","flatSignature":"(KeyPair)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"pair","type":{"isPrimitive":false,"simpleName":"KeyPair","qualifiedName":"java.security.KeyPair","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string of information about the signer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}