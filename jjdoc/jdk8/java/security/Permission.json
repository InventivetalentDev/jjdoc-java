{"name":"Permission","comment":"Abstract class for representing access to a system resource.\n All permissions have a name (whose interpretation depends on the subclass),\n as well as abstract functions for defining the semantics of the\n particular Permission subclass.\n\n \u003cp\u003eMost Permission objects also include an \"actions\" list that tells the actions\n that are permitted for the object.  For example,\n for a {@code java.io.FilePermission} object, the permission name is\n the pathname of a file (or directory), and the actions list\n (such as \"read, write\") specifies which actions are granted for the\n specified file (or for files in the specified directory).\n The actions list is optional for Permission objects, such as\n {@code java.lang.RuntimePermission},\n that don\u0027t need such a list; you either have the named permission (such\n as \"system.exit\") or you don\u0027t.\n\n \u003cp\u003eAn important method that must be implemented by each subclass is\n the {@code implies} method to compare Permissions. Basically,\n \"permission p1 implies permission p2\" means that\n if one is granted permission p1, one is naturally granted permission p2.\n Thus, this is not an equality test, but rather more of a\n subset test.\n\n \u003cP\u003e Permission objects are similar to String objects in that they\n are immutable once they have been created. Subclasses should not\n provide methods that can change the state of a permission\n once it has been created.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":["java.security.Guard","java.io.Serializable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Permission","comment":"Constructs a permission with the specified name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"checkGuard","comment":"Implements the guard interface for a permission. The\n {@code SecurityManager.checkPermission} method is called,\n passing this permission object as the permission to check.\n Returns silently if access is granted. Otherwise, throws\n a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"object","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"implies","comment":"Checks if the specified permission\u0027s actions are \"implied by\"\n this object\u0027s actions.\n \u003cP\u003e\n This must be implemented by subclasses of Permission, as they are the\n only ones that can impose semantics on a Permission object.\n\n \u003cp\u003eThe {@code implies} method is used by the AccessController to determine\n whether or not a requested permission is implied by another permission that\n is known to be valid in the current execution context.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks two Permission objects for equality.\n \u003cP\u003e\n Do not use the {@code equals} method for making access control\n decisions; use the {@code implies} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this Permission object.\n \u003cP\u003e\n The required {@code hashCode} behavior for Permission Objects is\n the following:\n \u003cul\u003e\n \u003cli\u003eWhenever it is invoked on the same Permission object more than\n     once during an execution of a Java application, the\n     {@code hashCode} method\n     must consistently return the same integer. This integer need not\n     remain consistent from one execution of an application to another\n     execution of the same application.\n \u003cli\u003eIf two Permission objects are equal according to the\n     {@code equals}\n     method, then calling the {@code hashCode} method on each of the\n     two Permission objects must produce the same integer result.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the name of this Permission.\n For example, in the case of a {@code java.io.FilePermission},\n the name will be a pathname.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getActions","comment":"Returns the actions as a String. This is abstract\n so subclasses can defer creating a String representation until\n one is needed. Subclasses should always return actions in what they\n consider to be their\n canonical form. For example, two FilePermission objects created via\n the following:\n\n \u003cpre\u003e\n   perm1 \u003d new FilePermission(p1,\"read,write\");\n   perm2 \u003d new FilePermission(p2,\"write,read\");\n \u003c/pre\u003e\n\n both return\n \"read,write\" when the {@code getActions} method is invoked.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newPermissionCollection","comment":"Returns an empty PermissionCollection for a given Permission object, or null if\n one is not defined. Subclasses of class Permission should\n override this if they need to store their permissions in a particular\n PermissionCollection object in order to provide the correct semantics\n when the {@code PermissionCollection.implies} method is called.\n If null is returned,\n then the caller of this method is free to store permissions of this\n type in any PermissionCollection they choose (one that uses a Hashtable,\n one that uses a Vector, etc).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this Permission.  The convention is to\n specify the class name, the permission name, and the actions in\n the following format: \u0027(\"ClassName\" \"name\" \"actions\")\u0027, or\n \u0027(\"ClassName\" \"name\")\u0027 if actions list is null or empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.UnresolvedPermission","java.security.BasicPermission","java.security.AllPermission","java.net.URLPermission","java.net.SocketPermission","java.io.FilePermission"],"enumConstants":[]}