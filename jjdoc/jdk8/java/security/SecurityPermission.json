{"name":"SecurityPermission","comment":"This class is for security permissions.\n A SecurityPermission contains a name (also referred to as a \"target name\")\n but no actions list; you either have the named permission\n or you don\u0027t.\n \u003cP\u003e\n The target name is the name of a security configuration parameter (see below).\n Currently the SecurityPermission object is used to guard access\n to the Policy, Security, Provider, Signer, and Identity\n objects.\n \u003cP\u003e\n The following table lists all the possible SecurityPermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"target name,what the permission allows, and associated risks\"\u003e\n \u003ctr\u003e\n \u003cth\u003ePermission Target Name\u003c/th\u003e\n \u003cth\u003eWhat the Permission Allows\u003c/th\u003e\n \u003cth\u003eRisks of Allowing this Permission\u003c/th\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003ecreateAccessControlContext\u003c/td\u003e\n   \u003ctd\u003eCreation of an AccessControlContext\u003c/td\u003e\n   \u003ctd\u003eThis allows someone to instantiate an AccessControlContext\n with a {@code DomainCombiner}.  Extreme care must be taken when\n granting this permission. Malicious code could create a DomainCombiner\n that augments the set of permissions granted to code, and even grant the\n code {@link java.security.AllPermission}.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetDomainCombiner\u003c/td\u003e\n   \u003ctd\u003eRetrieval of an AccessControlContext\u0027s DomainCombiner\u003c/td\u003e\n   \u003ctd\u003eThis allows someone to retrieve an AccessControlContext\u0027s\n {@code DomainCombiner}.  Since DomainCombiners may contain\n sensitive information, this could potentially lead to a privacy leak.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetPolicy\u003c/td\u003e\n   \u003ctd\u003eRetrieval of the system-wide security policy (specifically, of the\n currently-installed Policy object)\u003c/td\u003e\n   \u003ctd\u003eThis allows someone to query the policy via the\n {@code getPermissions} call,\n which discloses which permissions would be granted to a given CodeSource.\n While revealing the policy does not compromise the security of\n the system, it does provide malicious code with additional information\n which it may use to better aim an attack. It is wise\n not to divulge more information than necessary.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetPolicy\u003c/td\u003e\n   \u003ctd\u003eSetting of the system-wide security policy (specifically,\n the Policy object)\u003c/td\u003e\n   \u003ctd\u003eGranting this permission is extremely dangerous, as malicious\n code may grant itself all the necessary permissions it needs\n to successfully mount an attack on the system.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003ecreatePolicy.{policy type}\u003c/td\u003e\n   \u003ctd\u003eGetting an instance of a Policy implementation from a provider\u003c/td\u003e\n   \u003ctd\u003eGranting this permission enables code to obtain a Policy object.\n Malicious code may query the Policy object to determine what permissions\n have been granted to code other than itself. \u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetProperty.{key}\u003c/td\u003e\n   \u003ctd\u003eRetrieval of the security property with the specified key\u003c/td\u003e\n   \u003ctd\u003eDepending on the particular key for which access has\n been granted, the code may have access to the list of security\n providers, as well as the location of the system-wide and user\n security policies.  while revealing this information does not\n compromise the security of the system, it does provide malicious\n code with additional information which it may use to better aim\n an attack.\n\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetProperty.{key}\u003c/td\u003e\n   \u003ctd\u003eSetting of the security property with the specified key\u003c/td\u003e\n   \u003ctd\u003eThis could include setting a security provider or defining\n the location of the system-wide security policy.  Malicious\n code that has permission to set a new security provider may\n set a rogue provider that steals confidential information such\n as cryptographic private keys. In addition, malicious code with\n permission to set the location of the system-wide security policy\n may point it to a security policy that grants the attacker\n all the necessary permissions it requires to successfully mount\n an attack on the system.\n\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003einsertProvider\u003c/td\u003e\n   \u003ctd\u003eAddition of a new provider\u003c/td\u003e\n   \u003ctd\u003eThis would allow somebody to introduce a possibly\n malicious provider (e.g., one that discloses the private keys passed\n to it) as the highest-priority provider. This would be possible\n because the Security object (which manages the installed providers)\n currently does not check the integrity or authenticity of a provider\n before attaching it. The \"insertProvider\" permission subsumes the\n \"insertProvider.{provider name}\" permission (see the section below for\n more information).\n \u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003eremoveProvider.{provider name}\u003c/td\u003e\n   \u003ctd\u003eRemoval of the specified provider\u003c/td\u003e\n   \u003ctd\u003eThis may change the behavior or disable execution of other\n parts of the program. If a provider subsequently requested by the\n program has been removed, execution may fail. Also, if the removed\n provider is not explicitly requested by the rest of the program, but\n it would normally be the provider chosen when a cryptography service\n is requested (due to its previous order in the list of providers),\n a different provider will be chosen instead, or no suitable provider\n will be found, thereby resulting in program failure.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003eclearProviderProperties.{provider name}\u003c/td\u003e\n   \u003ctd\u003e\"Clearing\" of a Provider so that it no longer contains the properties\n used to look up services implemented by the provider\u003c/td\u003e\n   \u003ctd\u003eThis disables the lookup of services implemented by the provider.\n This may thus change the behavior or disable execution of other\n parts of the program that would normally utilize the Provider, as\n described under the \"removeProvider.{provider name}\" permission.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003eputProviderProperty.{provider name}\u003c/td\u003e\n   \u003ctd\u003eSetting of properties for the specified Provider\u003c/td\u003e\n   \u003ctd\u003eThe provider properties each specify the name and location\n of a particular service implemented by the provider. By granting\n this permission, you let code replace the service specification\n with another one, thereby specifying a different implementation.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003eremoveProviderProperty.{provider name}\u003c/td\u003e\n   \u003ctd\u003eRemoval of properties from the specified Provider\u003c/td\u003e\n   \u003ctd\u003eThis disables the lookup of services implemented by the\n provider. They are no longer accessible due to removal of the properties\n specifying their names and locations. This\n may change the behavior or disable execution of other\n parts of the program that would normally utilize the Provider, as\n described under the \"removeProvider.{provider name}\" permission.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003c/table\u003e\n\n \u003cP\u003e\n The following permissions have been superseded by newer permissions or are\n associated with classes that have been deprecated: {@link Identity},\n {@link IdentityScope}, {@link Signer}. Use of them is discouraged. See the\n applicable classes for more information.\n\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"target name,what the permission allows, and associated risks\"\u003e\n \u003ctr\u003e\n \u003cth\u003ePermission Target Name\u003c/th\u003e\n \u003cth\u003eWhat the Permission Allows\u003c/th\u003e\n \u003cth\u003eRisks of Allowing this Permission\u003c/th\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003einsertProvider.{provider name}\u003c/td\u003e\n   \u003ctd\u003eAddition of a new provider, with the specified name\u003c/td\u003e\n   \u003ctd\u003eUse of this permission is discouraged from further use because it is\n possible to circumvent the name restrictions by overriding the\n {@link java.security.Provider#getName} method. Also, there is an equivalent\n level of risk associated with granting code permission to insert a provider\n with a specific name, or any name it chooses. Users should use the\n \"insertProvider\" permission instead.\n \u003cp\u003eThis would allow somebody to introduce a possibly\n malicious provider (e.g., one that discloses the private keys passed\n to it) as the highest-priority provider. This would be possible\n because the Security object (which manages the installed providers)\n currently does not check the integrity or authenticity of a provider\n before attaching it.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetSystemScope\u003c/td\u003e\n   \u003ctd\u003eSetting of the system identity scope\u003c/td\u003e\n   \u003ctd\u003eThis would allow an attacker to configure the system identity scope with\n certificates that should not be trusted, thereby granting applet or\n application code signed with those certificates privileges that\n would have been denied by the system\u0027s original identity scope.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetIdentityPublicKey\u003c/td\u003e\n   \u003ctd\u003eSetting of the public key for an Identity\u003c/td\u003e\n   \u003ctd\u003eIf the identity is marked as \"trusted\", this allows an attacker to\n introduce a different public key (e.g., its own) that is not trusted\n by the system\u0027s identity scope, thereby granting applet or\n application code signed with that public key privileges that\n would have been denied otherwise.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetIdentityInfo\u003c/td\u003e\n   \u003ctd\u003eSetting of a general information string for an Identity\u003c/td\u003e\n   \u003ctd\u003eThis allows attackers to set the general description for\n an identity.  This may trick applications into using a different\n identity than intended or may prevent applications from finding a\n particular identity.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003eaddIdentityCertificate\u003c/td\u003e\n   \u003ctd\u003eAddition of a certificate for an Identity\u003c/td\u003e\n   \u003ctd\u003eThis allows attackers to set a certificate for\n an identity\u0027s public key.  This is dangerous because it affects\n the trust relationship across the system. This public key suddenly\n becomes trusted to a wider audience than it otherwise would be.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003eremoveIdentityCertificate\u003c/td\u003e\n   \u003ctd\u003eRemoval of a certificate for an Identity\u003c/td\u003e\n   \u003ctd\u003eThis allows attackers to remove a certificate for\n an identity\u0027s public key. This is dangerous because it affects\n the trust relationship across the system. This public key suddenly\n becomes considered less trustworthy than it otherwise would be.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n  \u003ctd\u003eprintIdentity\u003c/td\u003e\n  \u003ctd\u003eViewing the name of a principal\n and optionally the scope in which it is used, and whether\n or not it is considered \"trusted\" in that scope\u003c/td\u003e\n  \u003ctd\u003eThe scope that is printed out may be a filename, in which case\n it may convey local system information. For example, here\u0027s a sample\n printout of an identity named \"carol\", who is\n marked not trusted in the user\u0027s identity database:\u003cbr\u003e\n   carol[/home/luehe/identitydb.obj][not trusted]\u003c/td\u003e\n\u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetSignerPrivateKey\u003c/td\u003e\n   \u003ctd\u003eRetrieval of a Signer\u0027s private key\u003c/td\u003e\n   \u003ctd\u003eIt is very dangerous to allow access to a private key; private\n keys are supposed to be kept secret. Otherwise, code can use the\n private key to sign various files and claim the signature came from\n the Signer.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetSignerKeyPair\u003c/td\u003e\n   \u003ctd\u003eSetting of the key pair (public key and private key) for a Signer\u003c/td\u003e\n   \u003ctd\u003eThis would allow an attacker to replace somebody else\u0027s (the \"target\u0027s\")\n keypair with a possibly weaker keypair (e.g., a keypair of a smaller\n keysize).  This also would allow the attacker to listen in on encrypted\n communication between the target and its peers. The target\u0027s peers\n might wrap an encryption session key under the target\u0027s \"new\" public\n key, which would allow the attacker (who possesses the corresponding\n private key) to unwrap the session key and decipher the communication\n data encrypted under that session key.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003c/table\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SecurityPermission","qualifiedName":"java.security.SecurityPermission","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.BasicPermission","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SecurityPermission","comment":"Creates a new SecurityPermission with the specified name.\n The name is the symbolic name of the SecurityPermission. An asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"SecurityPermission","comment":"Creates a new SecurityPermission object with the specified name.\n The name is the symbolic name of the SecurityPermission, and the\n actions String is currently unused and should be null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"actions","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[],"typeParameters":[],"enumConstants":[]}