{"name":"Signature","comment":"The Signature class is used to provide applications the functionality\n of a digital signature algorithm. Digital signatures are used for\n authentication and integrity assurance of digital data.\n\n \u003cp\u003e The signature algorithm can be, among others, the NIST standard\n DSA, using DSA and SHA-256. The DSA algorithm using the\n SHA-256 message digest algorithm can be specified as {@code SHA256withDSA}.\n In the case of RSA the signing algorithm could be specified as, for example,\n {@code SHA256withRSA}.\n The algorithm name must be specified, as there is no default.\n\n \u003cp\u003e A Signature object can be used to generate and verify digital\n signatures.\n\n \u003cp\u003e There are three phases to the use of a Signature object for\n either signing data or verifying a signature:\u003col\u003e\n\n \u003cli\u003eInitialization, with either\n\n     \u003cul\u003e\n\n     \u003cli\u003ea public key, which initializes the signature for\n     verification (see {@link #initVerify(PublicKey) initVerify}), or\n\n     \u003cli\u003ea private key (and optionally a Secure Random Number Generator),\n     which initializes the signature for signing\n     (see {@link #initSign(PrivateKey)}\n     and {@link #initSign(PrivateKey, SecureRandom)}).\n\n     \u003c/ul\u003e\n\n \u003cli\u003eUpdating\n\n \u003cp\u003eDepending on the type of initialization, this will update the\n bytes to be signed or verified. See the\n {@link #update(byte) update} methods.\n\n \u003cli\u003eSigning or Verifying a signature on all updated bytes. See the\n {@link #sign() sign} methods and the {@link #verify(byte[]) verify}\n method.\n\n \u003c/ol\u003e\n\n \u003cp\u003eNote that this class is abstract and extends from\n {@code SignatureSpi} for historical reasons.\n Application developers should only take notice of the methods defined in\n this {@code Signature} class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of digital signature algorithms.\n\n \u003cp\u003e Every implementation of the Java platform is required to support the\n following standard {@code Signature} algorithms:\n \u003cul\u003e\n \u003cli\u003e{@code SHA1withDSA}\u003c/li\u003e\n \u003cli\u003e{@code SHA1withRSA}\u003c/li\u003e\n \u003cli\u003e{@code SHA256withRSA}\u003c/li\u003e\n \u003c/ul\u003e\n These algorithms are described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\"\u003e\n Signature section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Signature","qualifiedName":"java.security.Signature","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.SignatureSpi","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getInstance","comment":"Returns a Signature object that implements the specified signature\n algorithm.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new Signature object encapsulating the\n SignatureSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Signature","qualifiedName":"java.security.Signature","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a Signature object that implements the specified signature\n algorithm.\n\n \u003cp\u003e A new Signature object encapsulating the\n SignatureSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"Signature","qualifiedName":"java.security.Signature","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a Signature object that implements the specified\n signature algorithm.\n\n \u003cp\u003e A new Signature object encapsulating the\n SignatureSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Provider)","flatSignature":"(String, Provider)","returnType":{"isPrimitive":false,"simpleName":"Signature","qualifiedName":"java.security.Signature","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider of this signature object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"initVerify","comment":"Initializes this object for verification. If this method is called\n again with a different argument, it negates the effect\n of this call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PublicKey)","flatSignature":"(PublicKey)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"publicKey","type":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"initVerify","comment":"Initializes this object for verification, using the public key from\n the given certificate.\n \u003cp\u003eIf the certificate is of type X.509 and has a \u003ci\u003ekey usage\u003c/i\u003e\n extension field marked as critical, and the value of the \u003ci\u003ekey usage\u003c/i\u003e\n extension field implies that the public key in\n the certificate and its corresponding private key are not\n supposed to be used for digital signatures, an\n {@code InvalidKeyException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.Certificate)","flatSignature":"(Certificate)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certificate","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"initSign","comment":"Initialize this object for signing. If this method is called\n again with a different argument, it negates the effect\n of this call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivateKey)","flatSignature":"(PrivateKey)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"privateKey","type":{"isPrimitive":false,"simpleName":"PrivateKey","qualifiedName":"java.security.PrivateKey","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"initSign","comment":"Initialize this object for signing. If this method is called\n again with a different argument, it negates the effect\n of this call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivateKey, java.security.SecureRandom)","flatSignature":"(PrivateKey, SecureRandom)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"privateKey","type":{"isPrimitive":false,"simpleName":"PrivateKey","qualifiedName":"java.security.PrivateKey","dimension":"","elementType":{}}},{"name":"random","type":{"isPrimitive":false,"simpleName":"SecureRandom","qualifiedName":"java.security.SecureRandom","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sign","comment":"Returns the signature bytes of all the data updated.\n The format of the signature depends on the underlying\n signature scheme.\n\n \u003cp\u003eA call to this method resets this signature object to the state\n it was in when previously initialized for signing via a\n call to {@code initSign(PrivateKey)}. That is, the object is\n reset and available to generate another signature from the same\n signer, if desired, via new calls to {@code update} and\n {@code sign}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sign","comment":"Finishes the signature operation and stores the resulting signature\n bytes in the provided buffer {@code outbuf}, starting at\n {@code offset}.\n The format of the signature depends on the underlying\n signature scheme.\n\n \u003cp\u003eThis signature object is reset to its initial state (the state it\n was in after a call to one of the {@code initSign} methods) and\n can be reused to generate further signatures with the same private key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"outbuf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"verify","comment":"Verifies the passed-in signature.\n\n \u003cp\u003eA call to this method resets this signature object to the state\n it was in when previously initialized for verification via a\n call to {@code initVerify(PublicKey)}. That is, the object is\n reset and available to verify another signature from the identity\n whose public key was specified in the call to {@code initVerify}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"signature","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"verify","comment":"Verifies the passed-in signature in the specified array\n of bytes, starting at the specified offset.\n\n \u003cp\u003eA call to this method resets this signature object to the state\n it was in when previously initialized for verification via a\n call to {@code initVerify(PublicKey)}. That is, the object is\n reset and available to verify another signature from the identity\n whose public key was specified in the call to {@code initVerify}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"signature","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"update","comment":"Updates the data to be signed or verified by a byte.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte)","flatSignature":"(byte)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"update","comment":"Updates the data to be signed or verified, using the specified\n array of bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"update","comment":"Updates the data to be signed or verified, using the specified\n array of bytes, starting at the specified offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"update","comment":"Updates the data to be signed or verified using the specified\n ByteBuffer. Processes the {@code data.remaining()} bytes\n starting at at {@code data.position()}.\n Upon return, the buffer\u0027s position will be equal to its limit;\n its limit will not have changed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"data","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAlgorithm","comment":"Returns the name of the algorithm for this signature object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this signature object,\n providing information that includes the state of the object\n and the name of the algorithm used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setParameter","comment":"Sets the specified algorithm parameter to the specified value.\n This method supplies a general-purpose mechanism through\n which it is possible to set the various parameters of this object.\n A parameter may be any settable parameter for the algorithm, such as\n a parameter size, or a source of random bits for signature generation\n (if appropriate), or an indication of whether or not to perform\n a specific but optional computation. A uniform algorithm-specific\n naming scheme for each parameter is desirable but left unspecified\n at this time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object)","flatSignature":"(String, Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"param","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setParameter","comment":"Initializes this signature engine with the specified parameter set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.spec.AlgorithmParameterSpec)","flatSignature":"(AlgorithmParameterSpec)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"params","type":{"isPrimitive":false,"simpleName":"AlgorithmParameterSpec","qualifiedName":"java.security.spec.AlgorithmParameterSpec","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getParameters","comment":"Returns the parameters used with this signature object.\n\n \u003cp\u003eThe returned parameters may be the same that were used to initialize\n this signature, or may contain a combination of default and randomly\n generated parameter values used by the underlying signature\n implementation if this signature requires algorithm parameters but\n was not initialized with any.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AlgorithmParameters","qualifiedName":"java.security.AlgorithmParameters","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameter","comment":"Gets the value of the specified algorithm parameter. This method\n supplies a general-purpose mechanism through which it is possible to\n get the various parameters of this object. A parameter may be any\n settable parameter for the algorithm, such as a parameter size, or\n a source of random bits for signature generation (if appropriate),\n or an indication of whether or not to perform a specific but optional\n computation. A uniform algorithm-specific naming scheme for each\n parameter is desirable but left unspecified at this time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"param","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Returns a clone if the implementation is cloneable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}