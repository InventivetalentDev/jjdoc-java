{"name":"DomainLoadStoreParameter","comment":"Configuration data that specifies the keystores in a keystore domain.\n A keystore domain is a collection of keystores that are presented as a\n single logical keystore. The configuration data is used during\n {@code KeyStore}\n {@link KeyStore#load(KeyStore.LoadStoreParameter) load} and\n {@link KeyStore#store(KeyStore.LoadStoreParameter) store} operations.\n \u003cp\u003e\n The following syntax is supported for configuration data:\n \u003cpre\u003e{@code\n     domain \u003cdomainName\u003e [\u003cproperty\u003e ...] {\n         keystore \u003ckeystoreName\u003e [\u003cproperty\u003e ...] ;\n         ...\n     };\n     ...\n }\u003c/pre\u003e\n where {@code domainName} and {@code keystoreName} are identifiers\n and {@code property} is a key/value pairing. The key and value are\n separated by an \u0027equals\u0027 symbol and the value is enclosed in double\n quotes. A property value may be either a printable string or a binary\n string of colon-separated pairs of hexadecimal digits. Multi-valued\n properties are represented as a comma-separated list of values,\n enclosed in square brackets.\n See {@link Arrays#toString(java.lang.Object[])}.\n \u003cp\u003e\n To ensure that keystore entries are uniquely identified, each\n entry\u0027s alias is prefixed by its {@code keystoreName} followed\n by the entry name separator and each {@code keystoreName} must be\n unique within its domain. Entry name prefixes are omitted when\n storing a keystore.\n \u003cp\u003e\n Properties are context-sensitive: properties that apply to\n all the keystores in a domain are located in the domain clause,\n and properties that apply only to a specific keystore are located\n in that keystore\u0027s clause.\n Unless otherwise specified, a property in a keystore clause overrides\n a property of the same name in the domain clause. All property names\n are case-insensitive. The following properties are supported:\n \u003cdl\u003e\n \u003cdt\u003e {@code keystoreType\u003d\"\u003ctype\u003e\"} \u003c/dt\u003e\n     \u003cdd\u003e The keystore type. \u003c/dd\u003e\n \u003cdt\u003e {@code keystoreURI\u003d\"\u003curl\u003e\"} \u003c/dt\u003e\n     \u003cdd\u003e The keystore location. \u003c/dd\u003e\n \u003cdt\u003e {@code keystoreProviderName\u003d\"\u003cname\u003e\"} \u003c/dt\u003e\n     \u003cdd\u003e The name of the keystore\u0027s JCE provider. \u003c/dd\u003e\n \u003cdt\u003e {@code keystorePasswordEnv\u003d\"\u003cenvironment-variable\u003e\"} \u003c/dt\u003e\n     \u003cdd\u003e The environment variable that stores a keystore password.\n          Alternatively, passwords may be supplied to the constructor\n          method in a {@code Map\u003cString, ProtectionParameter\u003e}. \u003c/dd\u003e\n \u003cdt\u003e {@code entryNameSeparator\u003d\"\u003cseparator\u003e\"} \u003c/dt\u003e\n     \u003cdd\u003e The separator between a keystore name prefix and an entry name.\n          When specified, it applies to all the entries in a domain.\n          Its default value is a space. \u003c/dd\u003e\n \u003c/dl\u003e\n \u003cp\u003e\n For example, configuration data for a simple keystore domain\n comprising three keystores is shown below:\n \u003cpre\u003e\n\n domain app1 {\n     keystore app1-truststore\n         keystoreURI\u003d\"file:///app1/etc/truststore.jks\";\n\n     keystore system-truststore\n         keystoreURI\u003d\"${java.home}/lib/security/cacerts\";\n\n     keystore app1-keystore\n         keystoreType\u003d\"PKCS12\"\n         keystoreURI\u003d\"file:///app1/etc/keystore.p12\";\n };\n\n \u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DomainLoadStoreParameter","qualifiedName":"java.security.DomainLoadStoreParameter","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":["java.security.KeyStore.LoadStoreParameter"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DomainLoadStoreParameter","comment":"Constructs a DomainLoadStoreParameter for a keystore domain with\n the parameters used to protect keystore data.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.URI, java.util.Map\u003cjava.lang.String, java.security.KeyStore.ProtectionParameter\u003e)","flatSignature":"(URI, Map\u003cString, KeyStore.ProtectionParameter\u003e)","parameters":[{"name":"configuration","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}},{"name":"protectionParams","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getConfiguration","comment":"Gets the identifier for the domain configuration data.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getProtectionParams","comment":"Gets the keystore protection parameters for keystores in this\n domain.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getProtectionParameter","comment":"Gets the keystore protection parameters for this domain.\n Keystore domains do not support a protection parameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ProtectionParameter","qualifiedName":"java.security.KeyStore.ProtectionParameter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}