{"name":"Key","comment":"The Key interface is the top-level interface for all keys. It\n defines the functionality shared by all key objects. All keys\n have three characteristics:\n\n \u003cUL\u003e\n\n \u003cLI\u003eAn Algorithm\n\n \u003cP\u003eThis is the key algorithm for that key. The key algorithm is usually\n an encryption or asymmetric operation algorithm (such as DSA or\n RSA), which will work with those algorithms and with related\n algorithms (such as MD5 with RSA, SHA-1 with RSA, Raw DSA, etc.)\n The name of the algorithm of a key is obtained using the\n {@link #getAlgorithm() getAlgorithm} method.\n\n \u003cLI\u003eAn Encoded Form\n\n \u003cP\u003eThis is an external encoded form for the key used when a standard\n representation of the key is needed outside the Java Virtual Machine,\n as when transmitting the key to some other party. The key\n is encoded according to a standard format (such as\n X.509 {@code SubjectPublicKeyInfo} or PKCS#8), and\n is returned using the {@link #getEncoded() getEncoded} method.\n Note: The syntax of the ASN.1 type {@code SubjectPublicKeyInfo}\n is defined as follows:\n\n \u003cpre\u003e\n SubjectPublicKeyInfo ::\u003d SEQUENCE {\n   algorithm AlgorithmIdentifier,\n   subjectPublicKey BIT STRING }\n\n AlgorithmIdentifier ::\u003d SEQUENCE {\n   algorithm OBJECT IDENTIFIER,\n   parameters ANY DEFINED BY algorithm OPTIONAL }\n \u003c/pre\u003e\n\n For more information, see\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3280.txt\"\u003eRFC 3280:\n Internet X.509 Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e.\n\n \u003cLI\u003eA Format\n\n \u003cP\u003eThis is the name of the format of the encoded key. It is returned\n by the {@link #getFormat() getFormat} method.\n\n \u003c/UL\u003e\n\n Keys are generally obtained through key generators, certificates,\n or various Identity classes used to manage keys.\n Keys may also be obtained from key specifications (transparent\n representations of the underlying key material) through the use of a key\n factory (see {@link KeyFactory}).\n\n \u003cp\u003e A Key should use KeyRep as its serialized representation.\n Note that a serialized Key may contain sensitive information\n which should not be exposed in untrusted environments.  See the\n \u003ca href\u003d\"../../../platform/serialization/spec/security.html\"\u003e\n Security Appendix\u003c/a\u003e\n of the Serialization Specification for more information.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Key","qualifiedName":"java.security.Key","dimension":"","elementType":{},"package":"java.security","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"serialVersionUID","comment":"The class fingerprint that is set to indicate\n serialization compatibility with a previous\n version of the class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6603384152749567654L"}],"methods":[{"name":"getAlgorithm","comment":"Returns the standard algorithm name for this key. For\n example, \"DSA\" would indicate that this key is a DSA key.\n See Appendix A in the \u003ca href\u003d\n \"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\"\u003e\n Java Cryptography Architecture API Specification \u0026amp; Reference \u003c/a\u003e\n for information about standard algorithm names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFormat","comment":"Returns the name of the primary encoding format of this key,\n or null if this key does not support encoding.\n The primary encoding format is\n named in terms of the appropriate ASN.1 data format, if an\n ASN.1 specification for this key exists.\n For example, the name of the ASN.1 data format for public\n keys is \u003cI\u003eSubjectPublicKeyInfo\u003c/I\u003e, as\n defined by the X.509 standard; in this case, the returned format is\n {@code \"X.509\"}. Similarly,\n the name of the ASN.1 data format for private keys is\n \u003cI\u003ePrivateKeyInfo\u003c/I\u003e,\n as defined by the PKCS #8 standard; in this case, the returned format is\n {@code \"PKCS#8\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEncoded","comment":"Returns the key in its primary encoding format, or null\n if this key does not support encoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.security.PublicKey","java.security.PrivateKey"],"enumConstants":[]}