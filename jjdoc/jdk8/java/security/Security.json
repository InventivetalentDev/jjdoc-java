{"name":"Security","comment":"\u003cp\u003eThis class centralizes all security properties and common security\n methods. One of its primary uses is to manage providers.\n\n \u003cp\u003eThe default values of security properties are read from an\n implementation-specific location, which is typically the properties file\n {@code lib/security/java.security} in the Java installation directory.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Security","qualifiedName":"java.security.Security","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getAlgorithmProperty","comment":"Gets a specified property for an algorithm. The algorithm name\n should be a standard name. See the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard algorithm names.\n\n One possible use is by specialized algorithm parsers, which may map\n classes to algorithms which they understand (much like Key parsers\n do).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"propName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"insertProviderAt","comment":"Adds a new provider, at a specified position. The position is\n the preference order in which providers are searched for\n requested algorithms.  The position is 1-based, that is,\n 1 is most preferred, followed by 2, and so on.\n\n \u003cp\u003eIf the given provider is installed at the requested position,\n the provider that used to be at that position, and all providers\n with a position greater than {@code position}, are shifted up\n one position (towards the end of the list of installed providers).\n\n \u003cp\u003eA provider cannot be added if it is already installed.\n\n \u003cp\u003eIf there is a security manager, the\n {@link java.lang.SecurityManager#checkSecurityAccess} method is called\n with the {@code \"insertProvider\"} permission target name to see if\n it\u0027s ok to add a new provider. If this permission check is denied,\n {@code checkSecurityAccess} is called again with the\n {@code \"insertProvider.\"+provider.getName()} permission target name. If\n both checks are denied, a {@code SecurityException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Provider, int)","flatSignature":"(Provider, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addProvider","comment":"Adds a provider to the next position available.\n\n \u003cp\u003eIf there is a security manager, the\n {@link java.lang.SecurityManager#checkSecurityAccess} method is called\n with the {@code \"insertProvider\"} permission target name to see if\n it\u0027s ok to add a new provider. If this permission check is denied,\n {@code checkSecurityAccess} is called again with the\n {@code \"insertProvider.\"+provider.getName()} permission target name. If\n both checks are denied, a {@code SecurityException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Provider)","flatSignature":"(Provider)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeProvider","comment":"Removes the provider with the specified name.\n\n \u003cp\u003eWhen the specified provider is removed, all providers located\n at a position greater than where the specified provider was are shifted\n down one position (towards the head of the list of installed\n providers).\n\n \u003cp\u003eThis method returns silently if the provider is not installed or\n if name is null.\n\n \u003cp\u003eFirst, if there is a security manager, its\n {@code checkSecurityAccess}\n method is called with the string {@code \"removeProvider.\"+name}\n to see if it\u0027s ok to remove the provider.\n If the default implementation of {@code checkSecurityAccess}\n is used (i.e., that method is not overriden), then this will result in\n a call to the security manager\u0027s {@code checkPermission} method\n with a {@code SecurityPermission(\"removeProvider.\"+name)}\n permission.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProviders","comment":"Returns an array containing all the installed providers. The order of\n the providers in the array is their preference order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider installed with the specified name, if\n any. Returns null if no provider with the specified name is\n installed or if name is null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProviders","comment":"Returns an array containing all installed providers that satisfy the\n specified selection criterion, or null if no such providers have been\n installed. The returned providers are ordered\n according to their\n {@linkplain #insertProviderAt(java.security.Provider, int) preference order}.\n\n \u003cp\u003e A cryptographic service is always associated with a particular\n algorithm or type. For example, a digital signature service is\n always associated with a particular algorithm (e.g., DSA),\n and a CertificateFactory service is always associated with\n a particular certificate type (e.g., X.509).\n\n \u003cp\u003eThe selection criterion must be specified in one of the following two\n formats:\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003e{@literal \u003ccrypto_service\u003e.\u003calgorithm_or_type\u003e}\u003c/i\u003e\n \u003cp\u003e The cryptographic service name must not contain any dots.\n \u003cp\u003e A\n provider satisfies the specified selection criterion iff the provider\n implements the\n specified algorithm or type for the specified cryptographic service.\n \u003cp\u003e For example, \"CertificateFactory.X.509\"\n would be satisfied by any provider that supplied\n a CertificateFactory implementation for X.509 certificates.\n \u003cli\u003e \u003ci\u003e{@literal \u003ccrypto_service\u003e.\u003calgorithm_or_type\u003e\n \u003cattribute_name\u003e:\u003cattribute_value\u003e}\u003c/i\u003e\n \u003cp\u003e The cryptographic service name must not contain any dots. There\n must be one or more space characters between the\n \u003ci\u003e{@literal \u003calgorithm_or_type\u003e}\u003c/i\u003e and the\n \u003ci\u003e{@literal \u003cattribute_name\u003e}\u003c/i\u003e.\n  \u003cp\u003e A provider satisfies this selection criterion iff the\n provider implements the specified algorithm or type for the specified\n cryptographic service and its implementation meets the\n constraint expressed by the specified attribute name/value pair.\n \u003cp\u003e For example, \"Signature.SHA1withDSA KeySize:1024\" would be\n satisfied by any provider that implemented\n the SHA1withDSA signature algorithm with a keysize of 1024 (or larger).\n\n \u003c/ul\u003e\n\n \u003cp\u003e See the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard cryptographic service names, standard\n algorithm names and standard attribute names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"filter","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProviders","comment":"Returns an array containing all installed providers that satisfy the\n specified* selection criteria, or null if no such providers have been\n installed. The returned providers are ordered\n according to their\n {@linkplain #insertProviderAt(java.security.Provider, int)\n preference order}.\n\n \u003cp\u003eThe selection criteria are represented by a map.\n Each map entry represents a selection criterion.\n A provider is selected iff it satisfies all selection\n criteria. The key for any entry in such a map must be in one of the\n following two formats:\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003e{@literal \u003ccrypto_service\u003e.\u003calgorithm_or_type\u003e}\u003c/i\u003e\n \u003cp\u003e The cryptographic service name must not contain any dots.\n \u003cp\u003e The value associated with the key must be an empty string.\n \u003cp\u003e A provider\n satisfies this selection criterion iff the provider implements the\n specified algorithm or type for the specified cryptographic service.\n \u003cli\u003e  \u003ci\u003e{@literal \u003ccrypto_service\u003e}.\n {@literal \u003calgorithm_or_type\u003e \u003cattribute_name\u003e}\u003c/i\u003e\n \u003cp\u003e The cryptographic service name must not contain any dots. There\n must be one or more space characters between the\n \u003ci\u003e{@literal \u003calgorithm_or_type\u003e}\u003c/i\u003e\n and the \u003ci\u003e{@literal \u003cattribute_name\u003e}\u003c/i\u003e.\n \u003cp\u003e The value associated with the key must be a non-empty string.\n A provider satisfies this selection criterion iff the\n provider implements the specified algorithm or type for the specified\n cryptographic service and its implementation meets the\n constraint expressed by the specified attribute name/value pair.\n \u003c/ul\u003e\n\n \u003cp\u003e See the \u003ca href\u003d\n \"../../../technotes/guides/security/StandardNames.html\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard cryptographic service names, standard\n algorithm names and standard attribute names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003cjava.lang.String, java.lang.String\u003e)","flatSignature":"(Map\u003cString, String\u003e)","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"filter","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProperty","comment":"Gets a security property value.\n\n \u003cp\u003eFirst, if there is a security manager, its\n {@code checkPermission}  method is called with a\n {@code java.security.SecurityPermission(\"getProperty.\"+key)}\n permission to see if it\u0027s ok to retrieve the specified\n security property value..","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setProperty","comment":"Sets a security property value.\n\n \u003cp\u003eFirst, if there is a security manager, its\n {@code checkPermission} method is called with a\n {@code java.security.SecurityPermission(\"setProperty.\"+key)}\n permission to see if it\u0027s ok to set the specified\n security property value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"datum","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAlgorithms","comment":"Returns a Set of Strings containing the names of all available\n algorithms or types for the specified Java cryptographic service\n (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns\n an empty Set if there is no provider that supports the\n specified service or if serviceName is null. For a complete list\n of Java cryptographic services, please see the\n \u003ca href\u003d\"../../../technotes/guides/security/crypto/CryptoSpec.html\"\u003eJava\n Cryptography Architecture API Specification \u0026amp; Reference\u003c/a\u003e.\n Note: the returned set is immutable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"serviceName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}