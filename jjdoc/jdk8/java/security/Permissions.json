{"name":"Permissions","comment":"This class represents a heterogeneous collection of Permissions. That is,\n it contains different types of Permission objects, organized into\n PermissionCollections. For example, if any\n {@code java.io.FilePermission} objects are added to an instance of\n this class, they are all stored in a single\n PermissionCollection. It is the PermissionCollection returned by a call to\n the {@code newPermissionCollection} method in the FilePermission class.\n Similarly, any {@code java.lang.RuntimePermission} objects are\n stored in the PermissionCollection returned by a call to the\n {@code newPermissionCollection} method in the\n RuntimePermission class. Thus, this class represents a collection of\n PermissionCollections.\n\n \u003cp\u003eWhen the {@code add} method is called to add a Permission, the\n Permission is stored in the appropriate PermissionCollection. If no such\n collection exists yet, the Permission object\u0027s class is determined and the\n {@code newPermissionCollection} method is called on that class to create\n the PermissionCollection and add it to the Permissions object. If\n {@code newPermissionCollection} returns null, then a default\n PermissionCollection that uses a hashtable will be created and used. Each\n hashtable entry stores a Permission object as both the key and the value.\n\n \u003cp\u003e Enumerations returned via the {@code elements} method are\n not \u003cem\u003efail-fast\u003c/em\u003e.  Modifications to a collection should not be\n performed while enumerating over that collection.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Permissions","qualifiedName":"java.security.Permissions","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.PermissionCollection","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Permissions","comment":"Creates a new Permissions object containing no PermissionCollections.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"add","comment":"Adds a permission object to the PermissionCollection for the class the\n permission belongs to. For example, if \u003ci\u003epermission\u003c/i\u003e is a\n FilePermission, it is added to the FilePermissionCollection stored\n in this Permissions object.\n\n This method creates\n a new PermissionCollection object (and adds the permission to it)\n if an appropriate collection does not yet exist. \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"implies","comment":"Checks to see if this object\u0027s PermissionCollection for permissions of\n the specified permission\u0027s class implies the permissions\n expressed in the \u003ci\u003epermission\u003c/i\u003e object. Returns true if the\n combination of permissions in the appropriate PermissionCollection\n (e.g., a FilePermissionCollection for a FilePermission) together\n imply the specified permission.\n\n \u003cp\u003eFor example, suppose there is a FilePermissionCollection in this\n Permissions object, and it contains one FilePermission that specifies\n \"read\" access for  all files in all subdirectories of the \"/tmp\"\n directory, and another FilePermission that specifies \"write\" access\n for all files in the \"/tmp/scratch/foo\" directory.\n Then if the {@code implies} method\n is called with a permission specifying both \"read\" and \"write\" access\n to files in the \"/tmp/scratch/foo\" directory, {@code true} is\n returned.\n\n \u003cp\u003eAdditionally, if this PermissionCollection contains the\n AllPermission, this method will always return true.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"elements","comment":"Returns an enumeration of all the Permission objects in all the\n PermissionCollections in this Permissions object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}