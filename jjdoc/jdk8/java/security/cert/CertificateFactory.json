{"name":"CertificateFactory","comment":"This class defines the functionality of a certificate factory, which is\n used to generate certificate, certification path ({@code CertPath})\n and certificate revocation list (CRL) objects from their encodings.\n\n \u003cp\u003eFor encodings consisting of multiple certificates, use\n {@code generateCertificates} when you want to\n parse a collection of possibly unrelated certificates. Otherwise,\n use {@code generateCertPath} when you want to generate\n a {@code CertPath} (a certificate chain) and subsequently\n validate it with a {@code CertPathValidator}.\n\n \u003cp\u003eA certificate factory for X.509 must return certificates that are an\n instance of {@code java.security.cert.X509Certificate}, and CRLs\n that are an instance of {@code java.security.cert.X509CRL}.\n\n \u003cp\u003eThe following example reads a file with Base64 encoded certificates,\n which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and\n bounded at the end by -----END CERTIFICATE-----. We convert the\n {@code FileInputStream} (which does not support {@code mark}\n and {@code reset}) to a {@code BufferedInputStream} (which\n supports those methods), so that each call to\n {@code generateCertificate} consumes only one certificate, and the\n read position of the input stream is positioned to the next certificate in\n the file:\n\n \u003cpre\u003e{@code\n FileInputStream fis \u003d new FileInputStream(filename);\n BufferedInputStream bis \u003d new BufferedInputStream(fis);\n\n CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n\n while (bis.available() \u003e 0) {\n    Certificate cert \u003d cf.generateCertificate(bis);\n    System.out.println(cert.toString());\n }\n }\u003c/pre\u003e\n\n \u003cp\u003eThe following example parses a PKCS#7-formatted certificate reply stored\n in a file and extracts all the certificates from it:\n\n \u003cpre\u003e\n FileInputStream fis \u003d new FileInputStream(filename);\n CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n Collection c \u003d cf.generateCertificates(fis);\n Iterator i \u003d c.iterator();\n while (i.hasNext()) {\n    Certificate cert \u003d (Certificate)i.next();\n    System.out.println(cert);\n }\n \u003c/pre\u003e\n\n \u003cp\u003e Every implementation of the Java platform is required to support the\n following standard {@code CertificateFactory} type:\n \u003cul\u003e\n \u003cli\u003e{@code X.509}\u003c/li\u003e\n \u003c/ul\u003e\n and the following standard {@code CertPath} encodings:\n \u003cul\u003e\n \u003cli\u003e{@code PKCS7}\u003c/li\u003e\n \u003cli\u003e{@code PkiPath}\u003c/li\u003e\n \u003c/ul\u003e\n The type and encodings are described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\"\u003e\n CertificateFactory section\u003c/a\u003e and the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\"\u003e\n CertPath Encodings section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other types or encodings are supported.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertificateFactory","qualifiedName":"java.security.cert.CertificateFactory","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getInstance","comment":"Returns a certificate factory object that implements the\n specified certificate type.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertificateFactory object encapsulating the\n CertificateFactorySpi implementation from the first\n Provider that supports the specified type is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"CertificateFactory","qualifiedName":"java.security.cert.CertificateFactory","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a certificate factory object for the specified\n certificate type.\n\n \u003cp\u003e A new CertificateFactory object encapsulating the\n CertificateFactorySpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"CertificateFactory","qualifiedName":"java.security.cert.CertificateFactory","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a certificate factory object for the specified\n certificate type.\n\n \u003cp\u003e A new CertificateFactory object encapsulating the\n CertificateFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Provider)","flatSignature":"(String, Provider)","returnType":{"isPrimitive":false,"simpleName":"CertificateFactory","qualifiedName":"java.security.cert.CertificateFactory","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider of this certificate factory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getType","comment":"Returns the name of the certificate type associated with this\n certificate factory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"generateCertificate","comment":"Generates a certificate object and initializes it with\n the data read from the input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized certificate format\n supported by this certificate factory,\n the returned certificate object can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the returned certificate object\n can be typecast to the {@code X509Certificate} class.\n\n \u003cp\u003eIn the case of a certificate factory for X.509 certificates, the\n certificate provided in {@code inStream} must be DER-encoded and\n may be supplied in binary or printable (Base64) encoding. If the\n certificate is provided in Base64 encoding, it must be bounded at\n the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at\n the end by -----END CERTIFICATE-----.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one certificate and the read position of the\n input stream is positioned to the next available byte after\n the inherent end-of-certificate marker. If the data in the input stream\n does not contain an inherent end-of-certificate marker (other\n than EOF) and there is trailing data after the certificate is parsed, a\n {@code CertificateException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCertPathEncodings","comment":"Returns an iteration of the {@code CertPath} encodings supported\n by this certificate factory, with the default encoding first. See\n the CertPath Encodings section in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard encoding names and their formats.\n \u003cp\u003e\n Attempts to modify the returned {@code Iterator} via its\n {@code remove} method result in an\n {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"generateCertPath","comment":"Generates a {@code CertPath} object and initializes it with\n the data read from the {@code InputStream} inStream. The data\n is assumed to be in the default encoding. The name of the default\n encoding is the first element of the {@code Iterator} returned by\n the {@link #getCertPathEncodings getCertPathEncodings} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generateCertPath","comment":"Generates a {@code CertPath} object and initializes it with\n the data read from the {@code InputStream} inStream. The data\n is assumed to be in the specified encoding. See\n the CertPath Encodings section in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard encoding names and their formats.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream, java.lang.String)","flatSignature":"(InputStream, String)","returnType":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}},{"name":"encoding","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generateCertPath","comment":"Generates a {@code CertPath} object and initializes it with\n a {@code List} of {@code Certificate}s.\n \u003cp\u003e\n The certificates supplied must be of a type supported by the\n {@code CertificateFactory}. They will be copied out of the supplied\n {@code List} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003c? extends java.security.cert.Certificate\u003e)","flatSignature":"(List\u003c? extends Certificate\u003e)","returnType":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certificates","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generateCertificates","comment":"Returns a (possibly empty) collection view of the certificates read\n from the given input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized certificate format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the elements in the returned\n collection can be typecast to the {@code X509Certificate} class.\n\n \u003cp\u003eIn the case of a certificate factory for X.509 certificates,\n {@code inStream} may contain a sequence of DER-encoded certificates\n in the formats described for\n {@link #generateCertificate(java.io.InputStream) generateCertificate}.\n In addition, {@code inStream} may contain a PKCS#7 certificate\n chain. This is a PKCS#7 \u003ci\u003eSignedData\u003c/i\u003e object, with the only\n significant field being \u003ci\u003ecertificates\u003c/i\u003e. In particular, the\n signature and the contents are ignored. This format allows multiple\n certificates to be downloaded at once. If no certificates are present,\n an empty collection is returned.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generateCRL","comment":"Generates a certificate revocation list (CRL) object and initializes it\n with the data read from the input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized CRL format\n supported by this certificate factory,\n the returned CRL object can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the returned CRL object\n can be typecast to the {@code X509CRL} class.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one CRL and the read position of the input stream\n is positioned to the next available byte after the inherent\n end-of-CRL marker. If the data in the\n input stream does not contain an inherent end-of-CRL marker (other\n than EOF) and there is trailing data after the CRL is parsed, a\n {@code CRLException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"CRL","qualifiedName":"java.security.cert.CRL","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generateCRLs","comment":"Returns a (possibly empty) collection view of the CRLs read\n from the given input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized CRL format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the elements in the returned\n collection can be typecast to the {@code X509CRL} class.\n\n \u003cp\u003eIn the case of a certificate factory for X.509 CRLs,\n {@code inStream} may contain a sequence of DER-encoded CRLs.\n In addition, {@code inStream} may contain a PKCS#7 CRL\n set. This is a PKCS#7 \u003ci\u003eSignedData\u003c/i\u003e object, with the only\n significant field being \u003ci\u003ecrls\u003c/i\u003e. In particular, the\n signature and the contents are ignored. This format allows multiple\n CRLs to be downloaded at once. If no CRLs are present,\n an empty collection is returned.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}