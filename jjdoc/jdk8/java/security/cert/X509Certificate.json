{"name":"X509Certificate","comment":"\u003cp\u003e\n Abstract class for X.509 certificates. This provides a standard\n way to access all the attributes of an X.509 certificate.\n \u003cp\u003e\n In June of 1996, the basic X.509 v3 format was completed by\n ISO/IEC and ANSI X9, which is described below in ASN.1:\n \u003cpre\u003e\n Certificate  ::\u003d  SEQUENCE  {\n     tbsCertificate       TBSCertificate,\n     signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING  }\n \u003c/pre\u003e\n \u003cp\u003e\n These certificates are widely used to support authentication and\n other functionality in Internet security systems. Common applications\n include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),\n code signing for trusted software distribution, and Secure Electronic\n Transactions (SET).\n \u003cp\u003e\n These certificates are managed and vouched for by \u003cem\u003eCertificate\n Authorities\u003c/em\u003e (CAs). CAs are services which create certificates by\n placing data in the X.509 standard format and then digitally signing\n that data. CAs act as trusted third parties, making introductions\n between principals who have no direct knowledge of each other.\n CA certificates are either signed by themselves, or by some other\n CA such as a \"root\" CA.\n \u003cp\u003e\n More information can be found in\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3280.txt\"\u003eRFC 3280: Internet X.509\n Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e.\n \u003cp\u003e\n The ASN.1 definition of {@code tbsCertificate} is:\n \u003cpre\u003e\n TBSCertificate  ::\u003d  SEQUENCE  {\n     version         [0]  EXPLICIT Version DEFAULT v1,\n     serialNumber         CertificateSerialNumber,\n     signature            AlgorithmIdentifier,\n     issuer               Name,\n     validity             Validity,\n     subject              Name,\n     subjectPublicKeyInfo SubjectPublicKeyInfo,\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present, version must be v2 or v3\n     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present, version must be v2 or v3\n     extensions      [3]  EXPLICIT Extensions OPTIONAL\n                          -- If present, version must be v3\n     }\n \u003c/pre\u003e\n \u003cp\u003e\n Certificates are instantiated using a certificate factory. The following is\n an example of how to instantiate an X.509 certificate:\n \u003cpre\u003e\n try (InputStream inStream \u003d new FileInputStream(\"fileName-of-cert\")) {\n     CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n     X509Certificate cert \u003d (X509Certificate)cf.generateCertificate(inStream);\n }\n \u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"X509Certificate","qualifiedName":"java.security.cert.X509Certificate","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.security.cert.Certificate","interfaces":["java.security.cert.X509Extension"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"checkValidity","comment":"Checks that the certificate is currently valid. It is if\n the current date and time are within the validity period given in the\n certificate.\n \u003cp\u003e\n The validity period consists of two date/time values:\n the first and last dates (and times) on which the certificate\n is valid. It is defined in\n ASN.1 as:\n \u003cpre\u003e\n validity             Validity\n\n Validity ::\u003d SEQUENCE {\n     notBefore      CertificateValidityDate,\n     notAfter       CertificateValidityDate }\n\n CertificateValidityDate ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkValidity","comment":"Checks that the given date is within the certificate\u0027s\n validity period. In other words, this determines whether the\n certificate would be valid at the given date/time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getVersion","comment":"Gets the {@code version} (version number) value from the\n certificate.\n The ASN.1 definition for this is:\n \u003cpre\u003e\n version  [0] EXPLICIT Version DEFAULT v1\n\n Version ::\u003d  INTEGER  {  v1(0), v2(1), v3(2)  }\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSerialNumber","comment":"Gets the {@code serialNumber} value from the certificate.\n The serial number is an integer assigned by the certification\n authority to each certificate. It must be unique for each\n certificate issued by a given CA (i.e., the issuer name and\n serial number identify a unique certificate).\n The ASN.1 definition for this is:\n \u003cpre\u003e\n serialNumber     CertificateSerialNumber\n\n CertificateSerialNumber  ::\u003d  INTEGER\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerDN","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, replaced by {@linkplain\n #getIssuerX500Principal()}. This method returns the {@code issuer}\n as an implementation specific Principal object, which should not be\n relied upon by portable code.\n\n \u003cp\u003e\n Gets the {@code issuer} (issuer distinguished name) value from\n the certificate. The issuer name identifies the entity that signed (and\n issued) the certificate.\n\n \u003cp\u003eThe issuer name field contains an\n X.500 distinguished name (DN).\n The ASN.1 definition for this is:\n \u003cpre\u003e\n issuer    Name\n\n Name ::\u003d CHOICE { RDNSequence }\n RDNSequence ::\u003d SEQUENCE OF RelativeDistinguishedName\n RelativeDistinguishedName ::\u003d\n     SET OF AttributeValueAssertion\n\n AttributeValueAssertion ::\u003d SEQUENCE {\n                               AttributeType,\n                               AttributeValue }\n AttributeType ::\u003d OBJECT IDENTIFIER\n AttributeValue ::\u003d ANY\n \u003c/pre\u003e\n The {@code Name} describes a hierarchical name composed of\n attributes,\n such as country name, and corresponding values, such as US.\n The type of the {@code AttributeValue} component is determined by\n the {@code AttributeType}; in general it will be a\n {@code directoryString}. A {@code directoryString} is usually\n one of {@code PrintableString},\n {@code TeletexString} or {@code UniversalString}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerX500Principal","comment":"Returns the issuer (issuer distinguished name) value from the\n certificate as an {@code X500Principal}.\n \u003cp\u003e\n It is recommended that subclasses override this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectDN","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, replaced by {@linkplain\n #getSubjectX500Principal()}. This method returns the {@code subject}\n as an implementation specific Principal object, which should not be\n relied upon by portable code.\n\n \u003cp\u003e\n Gets the {@code subject} (subject distinguished name) value\n from the certificate.  If the {@code subject} value is empty,\n then the {@code getName()} method of the returned\n {@code Principal} object returns an empty string (\"\").\n\n \u003cp\u003e The ASN.1 definition for this is:\n \u003cpre\u003e\n subject    Name\n \u003c/pre\u003e\n\n \u003cp\u003eSee {@link #getIssuerDN() getIssuerDN} for {@code Name}\n and other relevant definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectX500Principal","comment":"Returns the subject (subject distinguished name) value from the\n certificate as an {@code X500Principal}.  If the subject value\n is empty, then the {@code getName()} method of the returned\n {@code X500Principal} object returns an empty string (\"\").\n \u003cp\u003e\n It is recommended that subclasses override this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNotBefore","comment":"Gets the {@code notBefore} date from the validity period of\n the certificate.\n The relevant ASN.1 definitions are:\n \u003cpre\u003e\n validity             Validity\n\n Validity ::\u003d SEQUENCE {\n     notBefore      CertificateValidityDate,\n     notAfter       CertificateValidityDate }\n\n CertificateValidityDate ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNotAfter","comment":"Gets the {@code notAfter} date from the validity period of\n the certificate. See {@link #getNotBefore() getNotBefore}\n for relevant ASN.1 definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTBSCertificate","comment":"Gets the DER-encoded certificate information, the\n {@code tbsCertificate} from this certificate.\n This can be used to verify the signature independently.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSignature","comment":"Gets the {@code signature} value (the raw signature bits) from\n the certificate.\n The ASN.1 definition for this is:\n \u003cpre\u003e\n signature     BIT STRING\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigAlgName","comment":"Gets the signature algorithm name for the certificate\n signature algorithm. An example is the string \"SHA256withRSA\".\n The ASN.1 definition for this is:\n \u003cpre\u003e\n signatureAlgorithm   AlgorithmIdentifier\n\n AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                             -- contains a value of the type\n                             -- registered for use with the\n                             -- algorithm object identifier value\n \u003c/pre\u003e\n\n \u003cp\u003eThe algorithm name is determined from the {@code algorithm}\n OID string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigAlgOID","comment":"Gets the signature algorithm OID string from the certificate.\n An OID is represented by a set of nonnegative whole numbers separated\n by periods.\n For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1\n with DSA signature algorithm defined in\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3279.txt\"\u003eRFC 3279: Algorithms and\n Identifiers for the Internet X.509 Public Key Infrastructure Certificate\n and CRL Profile\u003c/a\u003e.\n\n \u003cp\u003eSee {@link #getSigAlgName() getSigAlgName} for\n relevant ASN.1 definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigAlgParams","comment":"Gets the DER-encoded signature algorithm parameters from this\n certificate\u0027s signature algorithm. In most cases, the signature\n algorithm parameters are null; the parameters are usually\n supplied with the certificate\u0027s public key.\n If access to individual parameter values is needed then use\n {@link java.security.AlgorithmParameters AlgorithmParameters}\n and instantiate with the name returned by\n {@link #getSigAlgName() getSigAlgName}.\n\n \u003cp\u003eSee {@link #getSigAlgName() getSigAlgName} for\n relevant ASN.1 definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerUniqueID","comment":"Gets the {@code issuerUniqueID} value from the certificate.\n The issuer unique identifier is present in the certificate\n to handle the possibility of reuse of issuer names over time.\n RFC 3280 recommends that names not be reused and that\n conforming certificates not make use of unique identifiers.\n Applications conforming to that profile should be capable of\n parsing unique identifiers and making comparisons.\n\n \u003cp\u003eThe ASN.1 definition for this is:\n \u003cpre\u003e\n issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL\n\n UniqueIdentifier  ::\u003d  BIT STRING\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectUniqueID","comment":"Gets the {@code subjectUniqueID} value from the certificate.\n\n \u003cp\u003eThe ASN.1 definition for this is:\n \u003cpre\u003e\n subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL\n\n UniqueIdentifier  ::\u003d  BIT STRING\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getKeyUsage","comment":"Gets a boolean array representing bits of\n the {@code KeyUsage} extension, (OID \u003d 2.5.29.15).\n The key usage extension defines the purpose (e.g., encipherment,\n signature, certificate signing) of the key contained in the\n certificate.\n The ASN.1 definition for this is:\n \u003cpre\u003e\n KeyUsage ::\u003d BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n \u003c/pre\u003e\n RFC 3280 recommends that when used, this be marked\n as a critical extension.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExtendedKeyUsage","comment":"Gets an unmodifiable list of Strings representing the OBJECT\n IDENTIFIERs of the {@code ExtKeyUsageSyntax} field of the\n extended key usage extension, (OID \u003d 2.5.29.37).  It indicates\n one or more purposes for which the certified public key may be\n used, in addition to or in place of the basic purposes\n indicated in the key usage extension field.  The ASN.1\n definition for this is:\n \u003cpre\u003e\n ExtKeyUsageSyntax ::\u003d SEQUENCE SIZE (1..MAX) OF KeyPurposeId\n\n KeyPurposeId ::\u003d OBJECT IDENTIFIER\n \u003c/pre\u003e\n\n Key purposes may be defined by any organization with a\n need. Object identifiers used to identify key purposes shall be\n assigned in accordance with IANA or ITU-T Rec. X.660 |\n ISO/IEC/ITU 9834-1.\n \u003cp\u003e\n This method was added to version 1.4 of the Java 2 Platform Standard\n Edition. In order to maintain backwards compatibility with existing\n service providers, this method is not {@code abstract}\n and it provides a default implementation. Subclasses\n should override this method with a correct implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBasicConstraints","comment":"Gets the certificate constraints path length from the\n critical {@code BasicConstraints} extension, (OID \u003d 2.5.29.19).\n \u003cp\u003e\n The basic constraints extension identifies whether the subject\n of the certificate is a Certificate Authority (CA) and\n how deep a certification path may exist through that CA. The\n {@code pathLenConstraint} field (see below) is meaningful\n only if {@code cA} is set to TRUE. In this case, it gives the\n maximum number of CA certificates that may follow this certificate in a\n certification path. A value of zero indicates that only an end-entity\n certificate may follow in the path.\n \u003cp\u003e\n The ASN.1 definition for this is:\n \u003cpre\u003e\n BasicConstraints ::\u003d SEQUENCE {\n     cA                  BOOLEAN DEFAULT FALSE,\n     pathLenConstraint   INTEGER (0..MAX) OPTIONAL }\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectAlternativeNames","comment":"Gets an immutable collection of subject alternative names from the\n {@code SubjectAltName} extension, (OID \u003d 2.5.29.17).\n \u003cp\u003e\n The ASN.1 definition of the {@code SubjectAltName} extension is:\n \u003cpre\u003e\n SubjectAltName ::\u003d GeneralNames\n\n GeneralNames :: \u003d SEQUENCE SIZE (1..MAX) OF GeneralName\n\n GeneralName ::\u003d CHOICE {\n      otherName                       [0]     OtherName,\n      rfc822Name                      [1]     IA5String,\n      dNSName                         [2]     IA5String,\n      x400Address                     [3]     ORAddress,\n      directoryName                   [4]     Name,\n      ediPartyName                    [5]     EDIPartyName,\n      uniformResourceIdentifier       [6]     IA5String,\n      iPAddress                       [7]     OCTET STRING,\n      registeredID                    [8]     OBJECT IDENTIFIER}\n \u003c/pre\u003e\n \u003cp\u003e\n If this certificate does not contain a {@code SubjectAltName}\n extension, {@code null} is returned. Otherwise, a\n {@code Collection} is returned with an entry representing each\n {@code GeneralName} included in the extension. Each entry is a\n {@code List} whose first entry is an {@code Integer}\n (the name type, 0-8) and whose second entry is a {@code String}\n or a byte array (the name, in string or ASN.1 DER encoded form,\n respectively).\n \u003cp\u003e\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc822.txt\"\u003eRFC 822\u003c/a\u003e, DNS, and URI\n names are returned as {@code String}s,\n using the well-established string formats for those types (subject to\n the restrictions included in RFC 3280). IPv4 address names are\n returned using dotted quad notation. IPv6 address names are returned\n in the form \"a1:a2:...:a8\", where a1-a8 are hexadecimal values\n representing the eight 16-bit pieces of the address. OID names are\n returned as {@code String}s represented as a series of nonnegative\n integers separated by periods. And directory names (distinguished names)\n are returned in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2253.txt\"\u003e\n RFC 2253\u003c/a\u003e string format. No standard string format is\n defined for otherNames, X.400 names, EDI party names, or any\n other type of names. They are returned as byte arrays\n containing the ASN.1 DER encoded form of the name.\n \u003cp\u003e\n Note that the {@code Collection} returned may contain more\n than one name of the same type. Also, note that the returned\n {@code Collection} is immutable and any entries containing byte\n arrays are cloned to protect against subsequent modifications.\n \u003cp\u003e\n This method was added to version 1.4 of the Java 2 Platform Standard\n Edition. In order to maintain backwards compatibility with existing\n service providers, this method is not {@code abstract}\n and it provides a default implementation. Subclasses\n should override this method with a correct implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerAlternativeNames","comment":"Gets an immutable collection of issuer alternative names from the\n {@code IssuerAltName} extension, (OID \u003d 2.5.29.18).\n \u003cp\u003e\n The ASN.1 definition of the {@code IssuerAltName} extension is:\n \u003cpre\u003e\n IssuerAltName ::\u003d GeneralNames\n \u003c/pre\u003e\n The ASN.1 definition of {@code GeneralNames} is defined\n in {@link #getSubjectAlternativeNames getSubjectAlternativeNames}.\n \u003cp\u003e\n If this certificate does not contain an {@code IssuerAltName}\n extension, {@code null} is returned. Otherwise, a\n {@code Collection} is returned with an entry representing each\n {@code GeneralName} included in the extension. Each entry is a\n {@code List} whose first entry is an {@code Integer}\n (the name type, 0-8) and whose second entry is a {@code String}\n or a byte array (the name, in string or ASN.1 DER encoded form,\n respectively). For more details about the formats used for each\n name type, see the {@code getSubjectAlternativeNames} method.\n \u003cp\u003e\n Note that the {@code Collection} returned may contain more\n than one name of the same type. Also, note that the returned\n {@code Collection} is immutable and any entries containing byte\n arrays are cloned to protect against subsequent modifications.\n \u003cp\u003e\n This method was added to version 1.4 of the Java 2 Platform Standard\n Edition. In order to maintain backwards compatibility with existing\n service providers, this method is not {@code abstract}\n and it provides a default implementation. Subclasses\n should override this method with a correct implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"verify","comment":"Verifies that this certificate was signed using the\n private key that corresponds to the specified public key.\n This method uses the signature verification engine\n supplied by the specified provider. Note that the specified\n Provider object does not have to be registered in the provider list.\n\n This method was added to version 1.8 of the Java Platform Standard\n Edition. In order to maintain backwards compatibility with existing\n service providers, this method is not {@code abstract}\n and it provides a default implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PublicKey, java.security.Provider)","flatSignature":"(PublicKey, Provider)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}}},{"name":"sigProvider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}