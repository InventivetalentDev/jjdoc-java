{"name":"PKIXCertPathChecker","comment":"An abstract class that performs one or more checks on an\n {@code X509Certificate}.\n\n \u003cp\u003eA concrete implementation of the {@code PKIXCertPathChecker} class\n can be created to extend the PKIX certification path validation algorithm.\n For example, an implementation may check for and process a critical private\n extension of each certificate in a certification path.\n\n \u003cp\u003eInstances of {@code PKIXCertPathChecker} are passed as parameters\n using the {@link PKIXParameters#setCertPathCheckers setCertPathCheckers}\n or {@link PKIXParameters#addCertPathChecker addCertPathChecker} methods\n of the {@code PKIXParameters} and {@code PKIXBuilderParameters}\n class. Each of the {@code PKIXCertPathChecker}s {@link #check check}\n methods will be called, in turn, for each certificate processed by a PKIX\n {@code CertPathValidator} or {@code CertPathBuilder}\n implementation.\n\n \u003cp\u003eA {@code PKIXCertPathChecker} may be called multiple times on\n successive certificates in a certification path. Concrete subclasses\n are expected to maintain any internal state that may be necessary to\n check successive certificates. The {@link #init init} method is used\n to initialize the internal state of the checker so that the certificates\n of a new certification path may be checked. A stateful implementation\n \u003cb\u003emust\u003c/b\u003e override the {@link #clone clone} method if necessary in\n order to allow a PKIX {@code CertPathBuilder} to efficiently\n backtrack and try other paths. In these situations, the\n {@code CertPathBuilder} is able to restore prior path validation\n states by restoring the cloned {@code PKIXCertPathChecker}s.\n\n \u003cp\u003eThe order in which the certificates are presented to the\n {@code PKIXCertPathChecker} may be either in the forward direction\n (from target to most-trusted CA) or in the reverse direction (from\n most-trusted CA to target). A {@code PKIXCertPathChecker} implementation\n \u003cb\u003emust\u003c/b\u003e support reverse checking (the ability to perform its checks when\n it is presented with certificates in the reverse direction) and \u003cb\u003emay\u003c/b\u003e\n support forward checking (the ability to perform its checks when it is\n presented with certificates in the forward direction). The\n {@link #isForwardCheckingSupported isForwardCheckingSupported} method\n indicates whether forward checking is supported.\n \u003cp\u003e\n Additional input parameters required for executing the check may be\n specified through constructors of concrete implementations of this class.\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n Unless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single\n object concurrently should synchronize amongst themselves and\n provide the necessary locking. Multiple threads each manipulating\n separate objects need not synchronize.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PKIXCertPathChecker","qualifiedName":"java.security.cert.PKIXCertPathChecker","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":["java.security.cert.CertPathChecker","java.lang.Cloneable"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"init","comment":"Initializes the internal state of this {@code PKIXCertPathChecker}.\n \u003cp\u003e\n The {@code forward} flag specifies the order that\n certificates will be passed to the {@link #check check} method\n (forward or reverse). A {@code PKIXCertPathChecker} \u003cb\u003emust\u003c/b\u003e\n support reverse checking and \u003cb\u003emay\u003c/b\u003e support forward checking.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"forward","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isForwardCheckingSupported","comment":"Indicates if forward checking is supported. Forward checking refers\n to the ability of the {@code PKIXCertPathChecker} to perform\n its checks when certificates are presented to the {@code check}\n method in the forward direction (from target to most-trusted CA).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSupportedExtensions","comment":"Returns an immutable {@code Set} of X.509 certificate extensions\n that this {@code PKIXCertPathChecker} supports (i.e. recognizes, is\n able to process), or {@code null} if no extensions are supported.\n \u003cp\u003e\n Each element of the set is a {@code String} representing the\n Object Identifier (OID) of the X.509 extension that is supported.\n The OID is represented by a set of nonnegative integers separated by\n periods.\n \u003cp\u003e\n All X.509 certificate extensions that a {@code PKIXCertPathChecker}\n might possibly be able to process should be included in the set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"check","comment":"Performs the check(s) on the specified certificate using its internal\n state and removes any critical extensions that it processes from the\n specified collection of OID strings that represent the unresolved\n critical extensions. The certificates are presented in the order\n specified by the {@code init} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.Certificate, java.util.Collection\u003cjava.lang.String\u003e)","flatSignature":"(Certificate, Collection\u003cString\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"cert","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}},{"name":"unresolvedCritExts","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"check","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation calls\n {@code check(cert, java.util.Collections.\u003cString\u003eemptySet())}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.Certificate)","flatSignature":"(Certificate)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cert","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Returns a clone of this object. Calls the {@code Object.clone()}\n method.\n All subclasses which maintain state must support and\n override this method, if necessary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.cert.PKIXRevocationChecker"],"enumConstants":[]}