{"name":"CertStoreSpi","comment":"The \u003ci\u003eService Provider Interface\u003c/i\u003e (\u003cb\u003eSPI\u003c/b\u003e)\n for the {@link CertStore CertStore} class. All {@code CertStore}\n implementations must include a class (the SPI class) that extends\n this class ({@code CertStoreSpi}), provides a constructor with\n a single argument of type {@code CertStoreParameters}, and implements\n all of its methods. In general, instances of this class should only be\n accessed through the {@code CertStore} class.\n For details, see the Java Cryptography Architecture.\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n The public methods of all {@code CertStoreSpi} objects must be\n thread-safe. That is, multiple threads may concurrently invoke these\n methods on a single {@code CertStoreSpi} object (or more than one)\n with no ill effects. This allows a {@code CertPathBuilder} to search\n for a CRL while simultaneously searching for further certificates, for\n instance.\n \u003cp\u003e\n Simple {@code CertStoreSpi} implementations will probably ensure\n thread safety by adding a {@code synchronized} keyword to their\n {@code engineGetCertificates} and {@code engineGetCRLs} methods.\n More sophisticated ones may allow truly concurrent access.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertStoreSpi","qualifiedName":"java.security.cert.CertStoreSpi","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"CertStoreSpi","comment":"The sole constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.security.cert.CertStoreParameters)","flatSignature":"(CertStoreParameters)","parameters":[{"name":"params","type":{"isPrimitive":false,"simpleName":"CertStoreParameters","qualifiedName":"java.security.cert.CertStoreParameters","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"engineGetCertificates","comment":"Returns a {@code Collection} of {@code Certificate}s that\n match the specified selector. If no {@code Certificate}s\n match the selector, an empty {@code Collection} will be returned.\n \u003cp\u003e\n For some {@code CertStore} types, the resulting\n {@code Collection} may not contain \u003cb\u003eall\u003c/b\u003e of the\n {@code Certificate}s that match the selector. For instance,\n an LDAP {@code CertStore} may not search all entries in the\n directory. Instead, it may just search entries that are likely to\n contain the {@code Certificate}s it is looking for.\n \u003cp\u003e\n Some {@code CertStore} implementations (especially LDAP\n {@code CertStore}s) may throw a {@code CertStoreException}\n unless a non-null {@code CertSelector} is provided that includes\n specific criteria that can be used to find the certificates. Issuer\n and/or subject names are especially useful criteria.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.CertSelector)","flatSignature":"(CertSelector)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"selector","type":{"isPrimitive":false,"simpleName":"CertSelector","qualifiedName":"java.security.cert.CertSelector","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGetCRLs","comment":"Returns a {@code Collection} of {@code CRL}s that\n match the specified selector. If no {@code CRL}s\n match the selector, an empty {@code Collection} will be returned.\n \u003cp\u003e\n For some {@code CertStore} types, the resulting\n {@code Collection} may not contain \u003cb\u003eall\u003c/b\u003e of the\n {@code CRL}s that match the selector. For instance,\n an LDAP {@code CertStore} may not search all entries in the\n directory. Instead, it may just search entries that are likely to\n contain the {@code CRL}s it is looking for.\n \u003cp\u003e\n Some {@code CertStore} implementations (especially LDAP\n {@code CertStore}s) may throw a {@code CertStoreException}\n unless a non-null {@code CRLSelector} is provided that includes\n specific criteria that can be used to find the CRLs. Issuer names\n and/or the certificate to be checked are especially useful.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.CRLSelector)","flatSignature":"(CRLSelector)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"selector","type":{"isPrimitive":false,"simpleName":"CRLSelector","qualifiedName":"java.security.cert.CRLSelector","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}