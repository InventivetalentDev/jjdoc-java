{"name":"CertificateFactorySpi","comment":"This class defines the \u003ci\u003eService Provider Interface\u003c/i\u003e (\u003cb\u003eSPI\u003c/b\u003e)\n for the {@code CertificateFactory} class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a certificate factory for a particular certificate type, e.g., X.509.\n\n \u003cp\u003eCertificate factories are used to generate certificate, certification path\n ({@code CertPath}) and certificate revocation list (CRL) objects from\n their encodings.\n\n \u003cp\u003eA certificate factory for X.509 must return certificates that are an\n instance of {@code java.security.cert.X509Certificate}, and CRLs\n that are an instance of {@code java.security.cert.X509CRL}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertificateFactorySpi","qualifiedName":"java.security.cert.CertificateFactorySpi","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"CertificateFactorySpi","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"engineGenerateCertificate","comment":"Generates a certificate object and initializes it with\n the data read from the input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized certificate format\n supported by this certificate factory,\n the returned certificate object can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the returned certificate object\n can be typecast to the {@code X509Certificate} class.\n\n \u003cp\u003eIn the case of a certificate factory for X.509 certificates, the\n certificate provided in {@code inStream} must be DER-encoded and\n may be supplied in binary or printable (Base64) encoding. If the\n certificate is provided in Base64 encoding, it must be bounded at\n the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at\n the end by -----END CERTIFICATE-----.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one certificate and the read position of the input stream\n is positioned to the next available byte after the inherent\n end-of-certificate marker. If the data in the\n input stream does not contain an inherent end-of-certificate marker (other\n than EOF) and there is trailing data after the certificate is parsed, a\n {@code CertificateException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGenerateCertPath","comment":"Generates a {@code CertPath} object and initializes it with\n the data read from the {@code InputStream} inStream. The data\n is assumed to be in the default encoding.\n\n \u003cp\u003e This method was added to version 1.4 of the Java 2 Platform\n Standard Edition. In order to maintain backwards compatibility with\n existing service providers, this method cannot be {@code abstract}\n and by default throws an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGenerateCertPath","comment":"Generates a {@code CertPath} object and initializes it with\n the data read from the {@code InputStream} inStream. The data\n is assumed to be in the specified encoding.\n\n \u003cp\u003e This method was added to version 1.4 of the Java 2 Platform\n Standard Edition. In order to maintain backwards compatibility with\n existing service providers, this method cannot be {@code abstract}\n and by default throws an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream, java.lang.String)","flatSignature":"(InputStream, String)","returnType":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}},{"name":"encoding","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGenerateCertPath","comment":"Generates a {@code CertPath} object and initializes it with\n a {@code List} of {@code Certificate}s.\n \u003cp\u003e\n The certificates supplied must be of a type supported by the\n {@code CertificateFactory}. They will be copied out of the supplied\n {@code List} object.\n\n \u003cp\u003e This method was added to version 1.4 of the Java 2 Platform\n Standard Edition. In order to maintain backwards compatibility with\n existing service providers, this method cannot be {@code abstract}\n and by default throws an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003c? extends java.security.cert.Certificate\u003e)","flatSignature":"(List\u003c? extends Certificate\u003e)","returnType":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certificates","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGetCertPathEncodings","comment":"Returns an iteration of the {@code CertPath} encodings supported\n by this certificate factory, with the default encoding first. See\n the CertPath Encodings section in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\"\u003e\n Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e\n for information about standard encoding names.\n \u003cp\u003e\n Attempts to modify the returned {@code Iterator} via its\n {@code remove} method result in an\n {@code UnsupportedOperationException}.\n\n \u003cp\u003e This method was added to version 1.4 of the Java 2 Platform\n Standard Edition. In order to maintain backwards compatibility with\n existing service providers, this method cannot be {@code abstract}\n and by default throws an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"engineGenerateCertificates","comment":"Returns a (possibly empty) collection view of the certificates read\n from the given input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized certificate format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the elements in the returned\n collection can be typecast to the {@code X509Certificate} class.\n\n \u003cp\u003eIn the case of a certificate factory for X.509 certificates,\n {@code inStream} may contain a single DER-encoded certificate\n in the formats described for\n {@link CertificateFactory#generateCertificate(java.io.InputStream)\n generateCertificate}.\n In addition, {@code inStream} may contain a PKCS#7 certificate\n chain. This is a PKCS#7 \u003ci\u003eSignedData\u003c/i\u003e object, with the only\n significant field being \u003ci\u003ecertificates\u003c/i\u003e. In particular, the\n signature and the contents are ignored. This format allows multiple\n certificates to be downloaded at once. If no certificates are present,\n an empty collection is returned.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGenerateCRL","comment":"Generates a certificate revocation list (CRL) object and initializes it\n with the data read from the input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized CRL format\n supported by this certificate factory,\n the returned CRL object can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the returned CRL object\n can be typecast to the {@code X509CRL} class.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one CRL and the read position of the input stream\n is positioned to the next available byte after the inherent\n end-of-CRL marker. If the data in the\n input stream does not contain an inherent end-of-CRL marker (other\n than EOF) and there is trailing data after the CRL is parsed, a\n {@code CRLException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"CRL","qualifiedName":"java.security.cert.CRL","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGenerateCRLs","comment":"Returns a (possibly empty) collection view of the CRLs read\n from the given input stream {@code inStream}.\n\n \u003cp\u003eIn order to take advantage of the specialized CRL format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the elements in the returned\n collection can be typecast to the {@code X509CRL} class.\n\n \u003cp\u003eIn the case of a certificate factory for X.509 CRLs,\n {@code inStream} may contain a single DER-encoded CRL.\n In addition, {@code inStream} may contain a PKCS#7 CRL\n set. This is a PKCS#7 \u003ci\u003eSignedData\u003c/i\u003e object, with the only\n significant field being \u003ci\u003ecrls\u003c/i\u003e. In particular, the\n signature and the contents are ignored. This format allows multiple\n CRLs to be downloaded at once. If no CRLs are present,\n an empty collection is returned.\n\n \u003cp\u003eNote that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"inStream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}