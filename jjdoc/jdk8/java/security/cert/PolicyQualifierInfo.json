{"name":"PolicyQualifierInfo","comment":"An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo\n structure.\n\n \u003cp\u003eThe ASN.1 definition is as follows:\n \u003cpre\u003e\n   PolicyQualifierInfo ::\u003d SEQUENCE {\n        policyQualifierId       PolicyQualifierId,\n        qualifier               ANY DEFINED BY policyQualifierId }\n \u003c/pre\u003e\n \u003cp\u003e\n A certificate policies extension, if present in an X.509 version 3\n certificate, contains a sequence of one or more policy information terms,\n each of which consists of an object identifier (OID) and optional\n qualifiers. In an end-entity certificate, these policy information terms\n indicate the policy under which the certificate has been issued and the\n purposes for which the certificate may be used. In a CA certificate, these\n policy information terms limit the set of policies for certification paths\n which include this certificate.\n \u003cp\u003e\n A {@code Set} of {@code PolicyQualifierInfo} objects are returned\n by the {@link PolicyNode#getPolicyQualifiers PolicyNode.getPolicyQualifiers}\n method. This allows applications with specific policy requirements to\n process and validate each policy qualifier. Applications that need to\n process policy qualifiers should explicitly set the\n {@code policyQualifiersRejected} flag to false (by calling the\n {@link PKIXParameters#setPolicyQualifiersRejected\n PKIXParameters.setPolicyQualifiersRejected} method) before validating\n a certification path.\n\n \u003cp\u003eNote that the PKIX certification path validation algorithm specifies\n that any policy qualifier in a certificate policies extension that is\n marked critical must be processed and validated. Otherwise the\n certification path must be rejected. If the\n {@code policyQualifiersRejected} flag is set to false, it is up to\n the application to validate all policy qualifiers in this manner in order\n to be PKIX compliant.\n\n \u003cp\u003e\u003cb\u003eConcurrent Access\u003c/b\u003e\n\n \u003cp\u003eAll {@code PolicyQualifierInfo} objects must be immutable and\n thread-safe. That is, multiple threads may concurrently invoke the\n methods defined in this class on a single {@code PolicyQualifierInfo}\n object (or more than one) with no ill effects. Requiring\n {@code PolicyQualifierInfo} objects to be immutable and thread-safe\n allows them to be passed around to various pieces of code without\n worrying about coordinating access.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PolicyQualifierInfo","qualifiedName":"java.security.cert.PolicyQualifierInfo","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PolicyQualifierInfo","comment":"Creates an instance of {@code PolicyQualifierInfo} from the\n encoded bytes. The encoded byte array is copied on construction.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","parameters":[{"name":"encoded","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getPolicyQualifierId","comment":"Returns the {@code policyQualifierId} field of this\n {@code PolicyQualifierInfo}. The {@code policyQualifierId}\n is an Object Identifier (OID) represented by a set of nonnegative\n integers separated by periods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEncoded","comment":"Returns the ASN.1 DER encoded form of this\n {@code PolicyQualifierInfo}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPolicyQualifier","comment":"Returns the ASN.1 DER encoded form of the {@code qualifier}\n field of this {@code PolicyQualifierInfo}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Return a printable representation of this\n {@code PolicyQualifierInfo}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}