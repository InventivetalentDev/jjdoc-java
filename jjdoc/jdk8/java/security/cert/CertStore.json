{"name":"CertStore","comment":"A class for retrieving {@code Certificate}s and {@code CRL}s\n from a repository.\n \u003cp\u003e\n This class uses a provider-based architecture.\n To create a {@code CertStore}, call one of the static\n {@code getInstance} methods, passing in the type of\n {@code CertStore} desired, any applicable initialization parameters\n and optionally the name of the provider desired.\n \u003cp\u003e\n Once the {@code CertStore} has been created, it can be used to\n retrieve {@code Certificate}s and {@code CRL}s by calling its\n {@link #getCertificates(CertSelector selector) getCertificates} and\n {@link #getCRLs(CRLSelector selector) getCRLs} methods.\n \u003cp\u003e\n Unlike a {@link java.security.KeyStore KeyStore}, which provides access\n to a cache of private keys and trusted certificates, a\n {@code CertStore} is designed to provide access to a potentially\n vast repository of untrusted certificates and CRLs. For example, an LDAP\n implementation of {@code CertStore} provides access to certificates\n and CRLs stored in one or more directories using the LDAP protocol and the\n schema as defined in the RFC service attribute.\n\n \u003cp\u003e Every implementation of the Java platform is required to support the\n following standard {@code CertStore} type:\n \u003cul\u003e\n \u003cli\u003e{@code Collection}\u003c/li\u003e\n \u003c/ul\u003e\n This type is described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertStore\"\u003e\n CertStore section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other types are supported.\n\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n All public methods of {@code CertStore} objects must be thread-safe.\n That is, multiple threads may concurrently invoke these methods on a\n single {@code CertStore} object (or more than one) with no\n ill effects. This allows a {@code CertPathBuilder} to search for a\n CRL while simultaneously searching for further certificates, for instance.\n \u003cp\u003e\n The static methods of this class are also guaranteed to be thread-safe.\n Multiple threads may concurrently invoke the static methods defined in\n this class with no ill effects.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertStore","qualifiedName":"java.security.cert.CertStore","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getCertificates","comment":"Returns a {@code Collection} of {@code Certificate}s that\n match the specified selector. If no {@code Certificate}s\n match the selector, an empty {@code Collection} will be returned.\n \u003cp\u003e\n For some {@code CertStore} types, the resulting\n {@code Collection} may not contain \u003cb\u003eall\u003c/b\u003e of the\n {@code Certificate}s that match the selector. For instance,\n an LDAP {@code CertStore} may not search all entries in the\n directory. Instead, it may just search entries that are likely to\n contain the {@code Certificate}s it is looking for.\n \u003cp\u003e\n Some {@code CertStore} implementations (especially LDAP\n {@code CertStore}s) may throw a {@code CertStoreException}\n unless a non-null {@code CertSelector} is provided that\n includes specific criteria that can be used to find the certificates.\n Issuer and/or subject names are especially useful criteria.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.CertSelector)","flatSignature":"(CertSelector)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"selector","type":{"isPrimitive":false,"simpleName":"CertSelector","qualifiedName":"java.security.cert.CertSelector","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCRLs","comment":"Returns a {@code Collection} of {@code CRL}s that\n match the specified selector. If no {@code CRL}s\n match the selector, an empty {@code Collection} will be returned.\n \u003cp\u003e\n For some {@code CertStore} types, the resulting\n {@code Collection} may not contain \u003cb\u003eall\u003c/b\u003e of the\n {@code CRL}s that match the selector. For instance,\n an LDAP {@code CertStore} may not search all entries in the\n directory. Instead, it may just search entries that are likely to\n contain the {@code CRL}s it is looking for.\n \u003cp\u003e\n Some {@code CertStore} implementations (especially LDAP\n {@code CertStore}s) may throw a {@code CertStoreException}\n unless a non-null {@code CRLSelector} is provided that\n includes specific criteria that can be used to find the CRLs.\n Issuer names and/or the certificate to be checked are especially useful.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.CRLSelector)","flatSignature":"(CRLSelector)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"selector","type":{"isPrimitive":false,"simpleName":"CRLSelector","qualifiedName":"java.security.cert.CRLSelector","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a {@code CertStore} object that implements the specified\n {@code CertStore} type and is initialized with the specified\n parameters.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertStore object encapsulating the\n CertStoreSpi implementation from the first\n Provider that supports the specified type is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n \u003cp\u003eThe {@code CertStore} that is returned is initialized with the\n specified {@code CertStoreParameters}. The type of parameters\n needed may vary between different types of {@code CertStore}s.\n Note that the specified {@code CertStoreParameters} object is\n cloned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.cert.CertStoreParameters)","flatSignature":"(String, CertStoreParameters)","returnType":{"isPrimitive":false,"simpleName":"CertStore","qualifiedName":"java.security.cert.CertStore","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"CertStoreParameters","qualifiedName":"java.security.cert.CertStoreParameters","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a {@code CertStore} object that implements the specified\n {@code CertStore} type.\n\n \u003cp\u003e A new CertStore object encapsulating the\n CertStoreSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n \u003cp\u003eThe {@code CertStore} that is returned is initialized with the\n specified {@code CertStoreParameters}. The type of parameters\n needed may vary between different types of {@code CertStore}s.\n Note that the specified {@code CertStoreParameters} object is\n cloned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.cert.CertStoreParameters, java.lang.String)","flatSignature":"(String, CertStoreParameters, String)","returnType":{"isPrimitive":false,"simpleName":"CertStore","qualifiedName":"java.security.cert.CertStore","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"CertStoreParameters","qualifiedName":"java.security.cert.CertStoreParameters","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a {@code CertStore} object that implements the specified\n {@code CertStore} type.\n\n \u003cp\u003e A new CertStore object encapsulating the\n CertStoreSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n \u003cp\u003eThe {@code CertStore} that is returned is initialized with the\n specified {@code CertStoreParameters}. The type of parameters\n needed may vary between different types of {@code CertStore}s.\n Note that the specified {@code CertStoreParameters} object is\n cloned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.cert.CertStoreParameters, java.security.Provider)","flatSignature":"(String, CertStoreParameters, Provider)","returnType":{"isPrimitive":false,"simpleName":"CertStore","qualifiedName":"java.security.cert.CertStore","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"CertStoreParameters","qualifiedName":"java.security.cert.CertStoreParameters","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCertStoreParameters","comment":"Returns the parameters used to initialize this {@code CertStore}.\n Note that the {@code CertStoreParameters} object is cloned before\n it is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CertStoreParameters","qualifiedName":"java.security.cert.CertStoreParameters","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getType","comment":"Returns the type of this {@code CertStore}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getProvider","comment":"Returns the provider of this {@code CertStore}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDefaultType","comment":"Returns the default {@code CertStore} type as specified by the\n {@code certstore.type} security property, or the string\n {@literal \"LDAP\"} if no such property exists.\n\n \u003cp\u003eThe default {@code CertStore} type can be used by applications\n that do not want to use a hard-coded type when calling one of the\n {@code getInstance} methods, and want to provide a default\n {@code CertStore} type in case a user does not specify its own.\n\n \u003cp\u003eThe default {@code CertStore} type can be changed by setting\n the value of the {@code certstore.type} security property to the\n desired type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}