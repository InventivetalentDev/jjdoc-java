{"name":"CertPathValidator","comment":"A class for validating certification paths (also known as certificate\n chains).\n \u003cp\u003e\n This class uses a provider-based architecture.\n To create a {@code CertPathValidator},\n call one of the static {@code getInstance} methods, passing in the\n algorithm name of the {@code CertPathValidator} desired and\n optionally the name of the provider desired.\n\n \u003cp\u003eOnce a {@code CertPathValidator} object has been created, it can\n be used to validate certification paths by calling the {@link #validate\n validate} method and passing it the {@code CertPath} to be validated\n and an algorithm-specific set of parameters. If successful, the result is\n returned in an object that implements the\n {@code CertPathValidatorResult} interface.\n\n \u003cp\u003eThe {@link #getRevocationChecker} method allows an application to specify\n additional algorithm-specific parameters and options used by the\n {@code CertPathValidator} when checking the revocation status of\n certificates. Here is an example demonstrating how it is used with the PKIX\n algorithm:\n\n \u003cpre\u003e\n CertPathValidator cpv \u003d CertPathValidator.getInstance(\"PKIX\");\n PKIXRevocationChecker rc \u003d (PKIXRevocationChecker)cpv.getRevocationChecker();\n rc.setOptions(EnumSet.of(Option.SOFT_FAIL));\n params.addCertPathChecker(rc);\n CertPathValidatorResult cpvr \u003d cpv.validate(path, params);\n \u003c/pre\u003e\n\n \u003cp\u003eEvery implementation of the Java platform is required to support the\n following standard {@code CertPathValidator} algorithm:\n \u003cul\u003e\n \u003cli\u003e{@code PKIX}\u003c/li\u003e\n \u003c/ul\u003e\n This algorithm is described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathValidator\"\u003e\n CertPathValidator section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.\n\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n The static methods of this class are guaranteed to be thread-safe.\n Multiple threads may concurrently invoke the static methods defined in\n this class with no ill effects.\n \u003cp\u003e\n However, this is not true for the non-static methods defined by this class.\n Unless otherwise documented by a specific provider, threads that need to\n access a single {@code CertPathValidator} instance concurrently should\n synchronize amongst themselves and provide the necessary locking. Multiple\n threads each manipulating a different {@code CertPathValidator}\n instance need not synchronize.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertPathValidator","qualifiedName":"java.security.cert.CertPathValidator","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getInstance","comment":"Returns a {@code CertPathValidator} object that implements the\n specified algorithm.\n\n \u003cp\u003e This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"CertPathValidator","qualifiedName":"java.security.cert.CertPathValidator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a {@code CertPathValidator} object that implements the\n specified algorithm.\n\n \u003cp\u003e A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"CertPathValidator","qualifiedName":"java.security.cert.CertPathValidator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a {@code CertPathValidator} object that implements the\n specified algorithm.\n\n \u003cp\u003e A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Provider)","flatSignature":"(String, Provider)","returnType":{"isPrimitive":false,"simpleName":"CertPathValidator","qualifiedName":"java.security.cert.CertPathValidator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"algorithm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProvider","comment":"Returns the {@code Provider} of this\n {@code CertPathValidator}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAlgorithm","comment":"Returns the algorithm name of this {@code CertPathValidator}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"validate","comment":"Validates the specified certification path using the specified\n algorithm parameter set.\n \u003cp\u003e\n The {@code CertPath} specified must be of a type that is\n supported by the validation algorithm, otherwise an\n {@code InvalidAlgorithmParameterException} will be thrown. For\n example, a {@code CertPathValidator} that implements the PKIX\n algorithm validates {@code CertPath} objects of type X.509.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.CertPath, java.security.cert.CertPathParameters)","flatSignature":"(CertPath, CertPathParameters)","returnType":{"isPrimitive":false,"simpleName":"CertPathValidatorResult","qualifiedName":"java.security.cert.CertPathValidatorResult","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certPath","type":{"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"CertPathParameters","qualifiedName":"java.security.cert.CertPathParameters","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDefaultType","comment":"Returns the default {@code CertPathValidator} type as specified by\n the {@code certpathvalidator.type} security property, or the string\n {@literal \"PKIX\"} if no such property exists.\n\n \u003cp\u003eThe default {@code CertPathValidator} type can be used by\n applications that do not want to use a hard-coded type when calling one\n of the {@code getInstance} methods, and want to provide a default\n type in case a user does not specify its own.\n\n \u003cp\u003eThe default {@code CertPathValidator} type can be changed by\n setting the value of the {@code certpathvalidator.type} security\n property to the desired type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getRevocationChecker","comment":"Returns a {@code CertPathChecker} that the encapsulated\n {@code CertPathValidatorSpi} implementation uses to check the revocation\n status of certificates. A PKIX implementation returns objects of\n type {@code PKIXRevocationChecker}. Each invocation of this method\n returns a new instance of {@code CertPathChecker}.\n\n \u003cp\u003eThe primary purpose of this method is to allow callers to specify\n additional input parameters and options specific to revocation checking.\n See the class description for an example.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CertPathChecker","qualifiedName":"java.security.cert.CertPathChecker","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}