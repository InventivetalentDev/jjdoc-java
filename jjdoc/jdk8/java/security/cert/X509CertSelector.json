{"name":"X509CertSelector","comment":"A {@code CertSelector} that selects {@code X509Certificates} that\n match all specified criteria. This class is particularly useful when\n selecting certificates from a {@code CertStore} to build a\n PKIX-compliant certification path.\n \u003cp\u003e\n When first constructed, an {@code X509CertSelector} has no criteria\n enabled and each of the {@code get} methods return a default value\n ({@code null}, or {@code -1} for the {@link #getBasicConstraints\n getBasicConstraints} method). Therefore, the {@link #match match}\n method would return {@code true} for any {@code X509Certificate}.\n Typically, several criteria are enabled (by calling\n {@link #setIssuer setIssuer} or\n {@link #setKeyUsage setKeyUsage}, for instance) and then the\n {@code X509CertSelector} is passed to\n {@link CertStore#getCertificates CertStore.getCertificates} or some similar\n method.\n \u003cp\u003e\n Several criteria can be enabled (by calling {@link #setIssuer setIssuer}\n and {@link #setSerialNumber setSerialNumber},\n for example) such that the {@code match} method\n usually uniquely matches a single {@code X509Certificate}. We say\n usually, since it is possible for two issuing CAs to have the same\n distinguished name and each issue a certificate with the same serial\n number. Other unique combinations include the issuer, subject,\n subjectKeyIdentifier and/or the subjectPublicKey criteria.\n \u003cp\u003e\n Please refer to \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3280.txt\"\u003eRFC 3280:\n Internet X.509 Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e for\n definitions of the X.509 certificate extensions mentioned below.\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n Unless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single\n object concurrently should synchronize amongst themselves and\n provide the necessary locking. Multiple threads each manipulating\n separate objects need not synchronize.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"X509CertSelector","qualifiedName":"java.security.cert.X509CertSelector","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":["java.security.cert.CertSelector"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"X509CertSelector","comment":"Creates an {@code X509CertSelector}. Initially, no criteria are set\n so any {@code X509Certificate} will match.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"setCertificate","comment":"Sets the certificateEquals criterion. The specified\n {@code X509Certificate} must be equal to the\n {@code X509Certificate} passed to the {@code match} method.\n If {@code null}, then this check is not applied.\n\n \u003cp\u003eThis method is particularly useful when it is necessary to\n match a single certificate. Although other criteria can be specified\n in conjunction with the certificateEquals criterion, it is usually not\n practical or necessary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.X509Certificate)","flatSignature":"(X509Certificate)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cert","type":{"isPrimitive":false,"simpleName":"X509Certificate","qualifiedName":"java.security.cert.X509Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSerialNumber","comment":"Sets the serialNumber criterion. The specified serial number\n must match the certificate serial number in the\n {@code X509Certificate}. If {@code null}, any certificate\n serial number will do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"serial","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setIssuer","comment":"Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n {@code X509Certificate}. If {@code null}, any issuer\n distinguished name will do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(javax.security.auth.x500.X500Principal)","flatSignature":"(X500Principal)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"issuer","type":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setIssuer","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, use {@linkplain #setIssuer(X500Principal)}\n or {@linkplain #setIssuer(byte[])} instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2253.txt\"\u003eRFC 2253\u003c/a\u003e String form\n of some distinguished names.\n \u003cp\u003e\n Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n {@code X509Certificate}. If {@code null}, any issuer\n distinguished name will do.\n \u003cp\u003e\n If {@code issuerDN} is not {@code null}, it should contain a\n distinguished name, in RFC 2253 format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"issuerDN","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setIssuer","comment":"Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n {@code X509Certificate}. If {@code null} is specified,\n the issuer criterion is disabled and any issuer distinguished name will\n do.\n \u003cp\u003e\n If {@code issuerDN} is not {@code null}, it should contain a\n single DER encoded distinguished name, as defined in X.501. The ASN.1\n notation for this structure is as follows.\n \u003cpre\u003e{@code\n Name ::\u003d CHOICE {\n   RDNSequence }\n\n RDNSequence ::\u003d SEQUENCE OF RelativeDistinguishedName\n\n RelativeDistinguishedName ::\u003d\n   SET SIZE (1 .. MAX) OF AttributeTypeAndValue\n\n AttributeTypeAndValue ::\u003d SEQUENCE {\n   type     AttributeType,\n   value    AttributeValue }\n\n AttributeType ::\u003d OBJECT IDENTIFIER\n\n AttributeValue ::\u003d ANY DEFINED BY AttributeType\n ....\n DirectoryString ::\u003d CHOICE {\n       teletexString           TeletexString (SIZE (1..MAX)),\n       printableString         PrintableString (SIZE (1..MAX)),\n       universalString         UniversalString (SIZE (1..MAX)),\n       utf8String              UTF8String (SIZE (1.. MAX)),\n       bmpString               BMPString (SIZE (1..MAX)) }\n }\u003c/pre\u003e\n \u003cp\u003e\n Note that the byte array specified here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"issuerDN","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setSubject","comment":"Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n {@code X509Certificate}. If {@code null}, any subject\n distinguished name will do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(javax.security.auth.x500.X500Principal)","flatSignature":"(X500Principal)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subject","type":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSubject","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, use {@linkplain #setSubject(X500Principal)}\n or {@linkplain #setSubject(byte[])} instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \u003cp\u003e\n Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n {@code X509Certificate}. If {@code null}, any subject\n distinguished name will do.\n \u003cp\u003e\n If {@code subjectDN} is not {@code null}, it should contain a\n distinguished name, in RFC 2253 format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subjectDN","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSubject","comment":"Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n {@code X509Certificate}. If {@code null}, any subject\n distinguished name will do.\n \u003cp\u003e\n If {@code subjectDN} is not {@code null}, it should contain a\n single DER encoded distinguished name, as defined in X.501. For the ASN.1\n notation for this structure, see\n {@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subjectDN","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setSubjectKeyIdentifier","comment":"Sets the subjectKeyIdentifier criterion. The\n {@code X509Certificate} must contain a SubjectKeyIdentifier\n extension for which the contents of the extension\n matches the specified criterion value.\n If the criterion value is {@code null}, no\n subjectKeyIdentifier check will be done.\n \u003cp\u003e\n If {@code subjectKeyID} is not {@code null}, it\n should contain a single DER encoded value corresponding to the contents\n of the extension value (not including the object identifier,\n criticality setting, and encapsulating OCTET STRING)\n for a SubjectKeyIdentifier extension.\n The ASN.1 notation for this structure follows.\n\n \u003cpre\u003e{@code\n SubjectKeyIdentifier ::\u003d KeyIdentifier\n\n KeyIdentifier ::\u003d OCTET STRING\n }\u003c/pre\u003e\n \u003cp\u003e\n Since the format of subject key identifiers is not mandated by\n any standard, subject key identifiers are not parsed by the\n {@code X509CertSelector}. Instead, the values are compared using\n a byte-by-byte comparison.\n \u003cp\u003e\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subjectKeyID","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setAuthorityKeyIdentifier","comment":"Sets the authorityKeyIdentifier criterion. The\n {@code X509Certificate} must contain an\n AuthorityKeyIdentifier extension for which the contents of the\n extension value matches the specified criterion value.\n If the criterion value is {@code null}, no\n authorityKeyIdentifier check will be done.\n \u003cp\u003e\n If {@code authorityKeyID} is not {@code null}, it\n should contain a single DER encoded value corresponding to the contents\n of the extension value (not including the object identifier,\n criticality setting, and encapsulating OCTET STRING)\n for an AuthorityKeyIdentifier extension.\n The ASN.1 notation for this structure follows.\n\n \u003cpre\u003e{@code\n AuthorityKeyIdentifier ::\u003d SEQUENCE {\n    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\n    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\n\n KeyIdentifier ::\u003d OCTET STRING\n }\u003c/pre\u003e\n \u003cp\u003e\n Authority key identifiers are not parsed by the\n {@code X509CertSelector}.  Instead, the values are\n compared using a byte-by-byte comparison.\n \u003cp\u003e\n When the {@code keyIdentifier} field of\n {@code AuthorityKeyIdentifier} is populated, the value is\n usually taken from the {@code SubjectKeyIdentifier} extension\n in the issuer\u0027s certificate.  Note, however, that the result of\n {@code X509Certificate.getExtensionValue(\u003cSubjectKeyIdentifier Object\n Identifier\u003e)} on the issuer\u0027s certificate may NOT be used\n directly as the input to {@code setAuthorityKeyIdentifier}.\n This is because the SubjectKeyIdentifier contains\n only a KeyIdentifier OCTET STRING, and not a SEQUENCE of\n KeyIdentifier, GeneralNames, and CertificateSerialNumber.\n In order to use the extension value of the issuer certificate\u0027s\n {@code SubjectKeyIdentifier}\n extension, it will be necessary to extract the value of the embedded\n {@code KeyIdentifier} OCTET STRING, then DER encode this OCTET\n STRING inside a SEQUENCE.\n For more details on SubjectKeyIdentifier, see\n {@link #setSubjectKeyIdentifier(byte[] subjectKeyID)}.\n \u003cp\u003e\n Note also that the byte array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"authorityKeyID","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setCertificateValid","comment":"Sets the certificateValid criterion. The specified date must fall\n within the certificate validity period for the\n {@code X509Certificate}. If {@code null}, no certificateValid\n check will be done.\n \u003cp\u003e\n Note that the {@code Date} supplied here is cloned to protect\n against subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certValid","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setPrivateKeyValid","comment":"Sets the privateKeyValid criterion. The specified date must fall\n within the private key validity period for the\n {@code X509Certificate}. If {@code null}, no privateKeyValid\n check will be done.\n \u003cp\u003e\n Note that the {@code Date} supplied here is cloned to protect\n against subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"privateKeyValid","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSubjectPublicKeyAlgID","comment":"Sets the subjectPublicKeyAlgID criterion. The\n {@code X509Certificate} must contain a subject public key\n with the specified algorithm. If {@code null}, no\n subjectPublicKeyAlgID check will be done.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"oid","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSubjectPublicKey","comment":"Sets the subjectPublicKey criterion. The\n {@code X509Certificate} must contain the specified subject public\n key. If {@code null}, no subjectPublicKey check will be done.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PublicKey)","flatSignature":"(PublicKey)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSubjectPublicKey","comment":"Sets the subjectPublicKey criterion. The {@code X509Certificate}\n must contain the specified subject public key. If {@code null},\n no subjectPublicKey check will be done.\n \u003cp\u003e\n Because this method allows the public key to be specified as a byte\n array, it may be used for unknown key types.\n \u003cp\u003e\n If {@code key} is not {@code null}, it should contain a\n single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.\n The ASN.1 notation for this structure is as follows.\n \u003cpre\u003e{@code\n SubjectPublicKeyInfo  ::\u003d  SEQUENCE  {\n   algorithm            AlgorithmIdentifier,\n   subjectPublicKey     BIT STRING  }\n\n AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n   algorithm               OBJECT IDENTIFIER,\n   parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                              -- contains a value of the type\n                              -- registered for use with the\n                              -- algorithm object identifier value\n }\u003c/pre\u003e\n \u003cp\u003e\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setKeyUsage","comment":"Sets the keyUsage criterion. The {@code X509Certificate}\n must allow the specified keyUsage values. If {@code null}, no\n keyUsage check will be done. Note that an {@code X509Certificate}\n that has no keyUsage extension implicitly allows all keyUsage values.\n \u003cp\u003e\n Note that the boolean array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean[])","flatSignature":"(boolean[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"keyUsage","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setExtendedKeyUsage","comment":"Sets the extendedKeyUsage criterion. The {@code X509Certificate}\n must allow the specified key purposes in its extended key usage\n extension. If {@code keyPurposeSet} is empty or {@code null},\n no extendedKeyUsage check will be done. Note that an\n {@code X509Certificate} that has no extendedKeyUsage extension\n implicitly allows all key purposes.\n \u003cp\u003e\n Note that the {@code Set} is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Set\u003cjava.lang.String\u003e)","flatSignature":"(Set\u003cString\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"keyPurposeSet","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setMatchAllSubjectAltNames","comment":"Enables/disables matching all of the subjectAlternativeNames\n specified in the {@link #setSubjectAlternativeNames\n setSubjectAlternativeNames} or {@link #addSubjectAlternativeName\n addSubjectAlternativeName} methods. If enabled,\n the {@code X509Certificate} must contain all of the\n specified subject alternative names. If disabled, the\n {@code X509Certificate} must contain at least one of the\n specified subject alternative names.\n\n \u003cp\u003eThe matchAllNames flag is {@code true} by default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"matchAllNames","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSubjectAlternativeNames","comment":"Sets the subjectAlternativeNames criterion. The\n {@code X509Certificate} must contain all or at least one of the\n specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see {@link #setMatchAllSubjectAltNames\n setMatchAllSubjectAltNames}).\n \u003cp\u003e\n This method allows the caller to specify, with a single method call,\n the complete set of subject alternative names for the\n subjectAlternativeNames criterion. The specified value replaces\n the previous value for the subjectAlternativeNames criterion.\n \u003cp\u003e\n The {@code names} parameter (if not {@code null}) is a\n {@code Collection} with one\n entry for each name to be included in the subject alternative name\n criterion. Each entry is a {@code List} whose first entry is an\n {@code Integer} (the name type, 0-8) and whose second\n entry is a {@code String} or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. If {@code null}\n is supplied as the value for this argument, no\n subjectAlternativeNames check will be performed.\n \u003cp\u003e\n Each subject alternative name in the {@code Collection}\n may be specified either as a {@code String} or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addSubjectAlternativeName(int type, String name)\n addSubjectAlternativeName(int type, String name)} and\n {@link #addSubjectAlternativeName(int type, byte [] name)\n addSubjectAlternativeName(int type, byte [] name)}.\n \u003cp\u003e\n \u003cstrong\u003eNote:\u003c/strong\u003e for distinguished names, specify the byte\n array form instead of the String form. See the note in\n {@link #addSubjectAlternativeName(int, String)} for more information.\n \u003cp\u003e\n Note that the {@code names} parameter can contain duplicate\n names (same name and name type), but they may be removed from the\n {@code Collection} of names returned by the\n {@link #getSubjectAlternativeNames getSubjectAlternativeNames} method.\n \u003cp\u003e\n Note that a deep copy is performed on the {@code Collection} to\n protect against subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003cjava.util.List\u003c?\u003e\u003e)","flatSignature":"(Collection\u003cList\u003c?\u003e\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"names","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addSubjectAlternativeName","comment":"Adds a name to the subjectAlternativeNames criterion. The\n {@code X509Certificate} must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see {@link #setMatchAllSubjectAltNames\n setMatchAllSubjectAltNames}).\n \u003cp\u003e\n This method allows the caller to add a name to the set of subject\n alternative names.\n The specified name is added to any previous value for the\n subjectAlternativeNames criterion. If the specified name is a\n duplicate, it may be ignored.\n \u003cp\u003e\n The name is provided in string format.\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc822.txt\"\u003eRFC 822\u003c/a\u003e, DNS, and URI\n names use the well-established string formats for those types (subject to\n the restrictions included in RFC 3280). IPv4 address names are\n supplied using dotted quad notation. OID address names are represented\n as a series of nonnegative integers separated by periods. And\n directory names (distinguished names) are supplied in RFC 2253 format.\n No standard string format is defined for otherNames, X.400 names,\n EDI party names, IPv6 address names, or any other type of names. They\n should be specified using the\n {@link #addSubjectAlternativeName(int type, byte [] name)\n addSubjectAlternativeName(int type, byte [] name)}\n method.\n \u003cp\u003e\n \u003cstrong\u003eNote:\u003c/strong\u003e for distinguished names, use\n {@linkplain #addSubjectAlternativeName(int, byte[])} instead.\n This method should not be relied on as it can fail to match some\n certificates because of a loss of encoding information in the RFC 2253\n String form of some distinguished names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.String)","flatSignature":"(int, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addSubjectAlternativeName","comment":"Adds a name to the subjectAlternativeNames criterion. The\n {@code X509Certificate} must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see {@link #setMatchAllSubjectAltNames\n setMatchAllSubjectAltNames}).\n \u003cp\u003e\n This method allows the caller to add a name to the set of subject\n alternative names.\n The specified name is added to any previous value for the\n subjectAlternativeNames criterion. If the specified name is a\n duplicate, it may be ignored.\n \u003cp\u003e\n The name is provided as a byte array. This byte array should contain\n the DER encoded name, as it would appear in the GeneralName structure\n defined in RFC 3280 and X.509. The encoded byte array should only contain\n the encoded value of the name, and should not include the tag associated\n with the name in the GeneralName structure. The ASN.1 definition of this\n structure appears below.\n \u003cpre\u003e{@code\n  GeneralName ::\u003d CHOICE {\n       otherName                       [0]     OtherName,\n       rfc822Name                      [1]     IA5String,\n       dNSName                         [2]     IA5String,\n       x400Address                     [3]     ORAddress,\n       directoryName                   [4]     Name,\n       ediPartyName                    [5]     EDIPartyName,\n       uniformResourceIdentifier       [6]     IA5String,\n       iPAddress                       [7]     OCTET STRING,\n       registeredID                    [8]     OBJECT IDENTIFIER}\n }\u003c/pre\u003e\n \u003cp\u003e\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, byte[])","flatSignature":"(int, byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setNameConstraints","comment":"Sets the name constraints criterion. The {@code X509Certificate}\n must have subject and subject alternative names that\n meet the specified name constraints.\n \u003cp\u003e\n The name constraints are specified as a byte array. This byte array\n should contain the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 3280\n and X.509. The ASN.1 definition of this structure appears below.\n\n \u003cpre\u003e{@code\n  NameConstraints ::\u003d SEQUENCE {\n       permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n       excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n\n  GeneralSubtrees ::\u003d SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n\n  GeneralSubtree ::\u003d SEQUENCE {\n       base                    GeneralName,\n       minimum         [0]     BaseDistance DEFAULT 0,\n       maximum         [1]     BaseDistance OPTIONAL }\n\n  BaseDistance ::\u003d INTEGER (0..MAX)\n\n  GeneralName ::\u003d CHOICE {\n       otherName                       [0]     OtherName,\n       rfc822Name                      [1]     IA5String,\n       dNSName                         [2]     IA5String,\n       x400Address                     [3]     ORAddress,\n       directoryName                   [4]     Name,\n       ediPartyName                    [5]     EDIPartyName,\n       uniformResourceIdentifier       [6]     IA5String,\n       iPAddress                       [7]     OCTET STRING,\n       registeredID                    [8]     OBJECT IDENTIFIER}\n }\u003c/pre\u003e\n \u003cp\u003e\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setBasicConstraints","comment":"Sets the basic constraints constraint. If the value is greater than or\n equal to zero, {@code X509Certificates} must include a\n basicConstraints extension with\n a pathLen of at least this value. If the value is -2, only end-entity\n certificates are accepted. If the value is -1, no check is done.\n \u003cp\u003e\n This constraint is useful when building a certification path forward\n (from the target toward the trust anchor. If a partial path has been\n built, any candidate certificate must have a maxPathLen value greater\n than or equal to the number of certificates in the partial path.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minMaxPathLen","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setPolicy","comment":"Sets the policy constraint. The {@code X509Certificate} must\n include at least one of the specified policies in its certificate\n policies extension. If {@code certPolicySet} is empty, then the\n {@code X509Certificate} must include at least some specified policy\n in its certificate policies extension. If {@code certPolicySet} is\n {@code null}, no policy check will be performed.\n \u003cp\u003e\n Note that the {@code Set} is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Set\u003cjava.lang.String\u003e)","flatSignature":"(Set\u003cString\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certPolicySet","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setPathToNames","comment":"Sets the pathToNames criterion. The {@code X509Certificate} must\n not include name constraints that would prohibit building a\n path to the specified names.\n \u003cp\u003e\n This method allows the caller to specify, with a single method call,\n the complete set of names which the {@code X509Certificates}\u0027s\n name constraints must permit. The specified value replaces\n the previous value for the pathToNames criterion.\n \u003cp\u003e\n This constraint is useful when building a certification path forward\n (from the target toward the trust anchor. If a partial path has been\n built, any candidate certificate must not include name constraints that\n would prohibit building a path to any of the names in the partial path.\n \u003cp\u003e\n The {@code names} parameter (if not {@code null}) is a\n {@code Collection} with one\n entry for each name to be included in the pathToNames\n criterion. Each entry is a {@code List} whose first entry is an\n {@code Integer} (the name type, 0-8) and whose second\n entry is a {@code String} or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. If {@code null}\n is supplied as the value for this argument, no\n pathToNames check will be performed.\n \u003cp\u003e\n Each name in the {@code Collection}\n may be specified either as a {@code String} or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addPathToName(int type, String name)\n addPathToName(int type, String name)} and\n {@link #addPathToName(int type, byte [] name)\n addPathToName(int type, byte [] name)}.\n \u003cp\u003e\n \u003cstrong\u003eNote:\u003c/strong\u003e for distinguished names, specify the byte\n array form instead of the String form. See the note in\n {@link #addPathToName(int, String)} for more information.\n \u003cp\u003e\n Note that the {@code names} parameter can contain duplicate\n names (same name and name type), but they may be removed from the\n {@code Collection} of names returned by the\n {@link #getPathToNames getPathToNames} method.\n \u003cp\u003e\n Note that a deep copy is performed on the {@code Collection} to\n protect against subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003cjava.util.List\u003c?\u003e\u003e)","flatSignature":"(Collection\u003cList\u003c?\u003e\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"names","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addPathToName","comment":"Adds a name to the pathToNames criterion. The {@code X509Certificate}\n must not include name constraints that would prohibit building a\n path to the specified name.\n \u003cp\u003e\n This method allows the caller to add a name to the set of names which\n the {@code X509Certificates}\u0027s name constraints must permit.\n The specified name is added to any previous value for the\n pathToNames criterion.  If the name is a duplicate, it may be ignored.\n \u003cp\u003e\n The name is provided in string format. RFC 822, DNS, and URI names\n use the well-established string formats for those types (subject to\n the restrictions included in RFC 3280). IPv4 address names are\n supplied using dotted quad notation. OID address names are represented\n as a series of nonnegative integers separated by periods. And\n directory names (distinguished names) are supplied in RFC 2253 format.\n No standard string format is defined for otherNames, X.400 names,\n EDI party names, IPv6 address names, or any other type of names. They\n should be specified using the\n {@link #addPathToName(int type, byte [] name)\n addPathToName(int type, byte [] name)} method.\n \u003cp\u003e\n \u003cstrong\u003eNote:\u003c/strong\u003e for distinguished names, use\n {@linkplain #addPathToName(int, byte[])} instead.\n This method should not be relied on as it can fail to match some\n certificates because of a loss of encoding information in the RFC 2253\n String form of some distinguished names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.String)","flatSignature":"(int, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addPathToName","comment":"Adds a name to the pathToNames criterion. The {@code X509Certificate}\n must not include name constraints that would prohibit building a\n path to the specified name.\n \u003cp\u003e\n This method allows the caller to add a name to the set of names which\n the {@code X509Certificates}\u0027s name constraints must permit.\n The specified name is added to any previous value for the\n pathToNames criterion. If the name is a duplicate, it may be ignored.\n \u003cp\u003e\n The name is provided as a byte array. This byte array should contain\n the DER encoded name, as it would appear in the GeneralName structure\n defined in RFC 3280 and X.509. The ASN.1 definition of this structure\n appears in the documentation for\n {@link #addSubjectAlternativeName(int type, byte [] name)\n addSubjectAlternativeName(int type, byte [] name)}.\n \u003cp\u003e\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, byte[])","flatSignature":"(int, byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getCertificate","comment":"Returns the certificateEquals criterion. The specified\n {@code X509Certificate} must be equal to the\n {@code X509Certificate} passed to the {@code match} method.\n If {@code null}, this check is not applied.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"X509Certificate","qualifiedName":"java.security.cert.X509Certificate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSerialNumber","comment":"Returns the serialNumber criterion. The specified serial number\n must match the certificate serial number in the\n {@code X509Certificate}. If {@code null}, any certificate\n serial number will do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuer","comment":"Returns the issuer criterion as an {@code X500Principal}. This\n distinguished name must match the issuer distinguished name in the\n {@code X509Certificate}. If {@code null}, the issuer criterion\n is disabled and any issuer distinguished name will do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerAsString","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, use {@linkplain #getIssuer()} or\n {@linkplain #getIssuerAsBytes()} instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \u003cp\u003e\n Returns the issuer criterion as a {@code String}. This\n distinguished name must match the issuer distinguished name in the\n {@code X509Certificate}. If {@code null}, the issuer criterion\n is disabled and any issuer distinguished name will do.\n \u003cp\u003e\n If the value returned is not {@code null}, it is a\n distinguished name, in RFC 2253 format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerAsBytes","comment":"Returns the issuer criterion as a byte array. This distinguished name\n must match the issuer distinguished name in the\n {@code X509Certificate}. If {@code null}, the issuer criterion\n is disabled and any issuer distinguished name will do.\n \u003cp\u003e\n If the value returned is not {@code null}, it is a byte\n array containing a single DER encoded distinguished name, as defined in\n X.501. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.\n \u003cp\u003e\n Note that the byte array returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubject","comment":"Returns the subject criterion as an {@code X500Principal}. This\n distinguished name must match the subject distinguished name in the\n {@code X509Certificate}. If {@code null}, the subject criterion\n is disabled and any subject distinguished name will do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectAsString","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, use {@linkplain #getSubject()} or\n {@linkplain #getSubjectAsBytes()} instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \u003cp\u003e\n Returns the subject criterion as a {@code String}. This\n distinguished name must match the subject distinguished name in the\n {@code X509Certificate}. If {@code null}, the subject criterion\n is disabled and any subject distinguished name will do.\n \u003cp\u003e\n If the value returned is not {@code null}, it is a\n distinguished name, in RFC 2253 format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectAsBytes","comment":"Returns the subject criterion as a byte array. This distinguished name\n must match the subject distinguished name in the\n {@code X509Certificate}. If {@code null}, the subject criterion\n is disabled and any subject distinguished name will do.\n \u003cp\u003e\n If the value returned is not {@code null}, it is a byte\n array containing a single DER encoded distinguished name, as defined in\n X.501. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #setSubject(byte [] subjectDN) setSubject(byte [] subjectDN)}.\n \u003cp\u003e\n Note that the byte array returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectKeyIdentifier","comment":"Returns the subjectKeyIdentifier criterion. The\n {@code X509Certificate} must contain a SubjectKeyIdentifier\n extension with the specified value. If {@code null}, no\n subjectKeyIdentifier check will be done.\n \u003cp\u003e\n Note that the byte array returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAuthorityKeyIdentifier","comment":"Returns the authorityKeyIdentifier criterion. The\n {@code X509Certificate} must contain a AuthorityKeyIdentifier\n extension with the specified value. If {@code null}, no\n authorityKeyIdentifier check will be done.\n \u003cp\u003e\n Note that the byte array returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCertificateValid","comment":"Returns the certificateValid criterion. The specified date must fall\n within the certificate validity period for the\n {@code X509Certificate}. If {@code null}, no certificateValid\n check will be done.\n \u003cp\u003e\n Note that the {@code Date} returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPrivateKeyValid","comment":"Returns the privateKeyValid criterion. The specified date must fall\n within the private key validity period for the\n {@code X509Certificate}. If {@code null}, no privateKeyValid\n check will be done.\n \u003cp\u003e\n Note that the {@code Date} returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectPublicKeyAlgID","comment":"Returns the subjectPublicKeyAlgID criterion. The\n {@code X509Certificate} must contain a subject public key\n with the specified algorithm. If {@code null}, no\n subjectPublicKeyAlgID check will be done.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectPublicKey","comment":"Returns the subjectPublicKey criterion. The\n {@code X509Certificate} must contain the specified subject\n public key. If {@code null}, no subjectPublicKey check will be done.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getKeyUsage","comment":"Returns the keyUsage criterion. The {@code X509Certificate}\n must allow the specified keyUsage values. If null, no keyUsage\n check will be done.\n \u003cp\u003e\n Note that the boolean array returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExtendedKeyUsage","comment":"Returns the extendedKeyUsage criterion. The {@code X509Certificate}\n must allow the specified key purposes in its extended key usage\n extension. If the {@code keyPurposeSet} returned is empty or\n {@code null}, no extendedKeyUsage check will be done. Note that an\n {@code X509Certificate} that has no extendedKeyUsage extension\n implicitly allows all key purposes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMatchAllSubjectAltNames","comment":"Indicates if the {@code X509Certificate} must contain all\n or at least one of the subjectAlternativeNames\n specified in the {@link #setSubjectAlternativeNames\n setSubjectAlternativeNames} or {@link #addSubjectAlternativeName\n addSubjectAlternativeName} methods. If {@code true},\n the {@code X509Certificate} must contain all of the\n specified subject alternative names. If {@code false}, the\n {@code X509Certificate} must contain at least one of the\n specified subject alternative names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSubjectAlternativeNames","comment":"Returns a copy of the subjectAlternativeNames criterion.\n The {@code X509Certificate} must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value\n of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames\n getMatchAllSubjectAltNames}). If the value returned is\n {@code null}, no subjectAlternativeNames check will be performed.\n \u003cp\u003e\n If the value returned is not {@code null}, it is a\n {@code Collection} with\n one entry for each name to be included in the subject alternative name\n criterion. Each entry is a {@code List} whose first entry is an\n {@code Integer} (the name type, 0-8) and whose second\n entry is a {@code String} or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type.  Note that the\n {@code Collection} returned may contain duplicate names (same name\n and name type).\n \u003cp\u003e\n Each subject alternative name in the {@code Collection}\n may be specified either as a {@code String} or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addSubjectAlternativeName(int type, String name)\n addSubjectAlternativeName(int type, String name)} and\n {@link #addSubjectAlternativeName(int type, byte [] name)\n addSubjectAlternativeName(int type, byte [] name)}.\n \u003cp\u003e\n Note that a deep copy is performed on the {@code Collection} to\n protect against subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNameConstraints","comment":"Returns the name constraints criterion. The {@code X509Certificate}\n must have subject and subject alternative names that\n meet the specified name constraints.\n \u003cp\u003e\n The name constraints are returned as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 3280\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n {@link #setNameConstraints(byte [] bytes) setNameConstraints(byte [] bytes)}.\n \u003cp\u003e\n Note that the byte array returned is cloned to protect against\n subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBasicConstraints","comment":"Returns the basic constraints constraint. If the value is greater than\n or equal to zero, the {@code X509Certificates} must include a\n basicConstraints extension with a pathLen of at least this value.\n If the value is -2, only end-entity certificates are accepted. If\n the value is -1, no basicConstraints check is done.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPolicy","comment":"Returns the policy criterion. The {@code X509Certificate} must\n include at least one of the specified policies in its certificate policies\n extension. If the {@code Set} returned is empty, then the\n {@code X509Certificate} must include at least some specified policy\n in its certificate policies extension. If the {@code Set} returned is\n {@code null}, no policy check will be performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPathToNames","comment":"Returns a copy of the pathToNames criterion. The\n {@code X509Certificate} must not include name constraints that would\n prohibit building a path to the specified names. If the value\n returned is {@code null}, no pathToNames check will be performed.\n \u003cp\u003e\n If the value returned is not {@code null}, it is a\n {@code Collection} with one\n entry for each name to be included in the pathToNames\n criterion. Each entry is a {@code List} whose first entry is an\n {@code Integer} (the name type, 0-8) and whose second\n entry is a {@code String} or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. Note that the\n {@code Collection} returned may contain duplicate names (same\n name and name type).\n \u003cp\u003e\n Each name in the {@code Collection}\n may be specified either as a {@code String} or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n {@link #addPathToName(int type, String name)\n addPathToName(int type, String name)} and\n {@link #addPathToName(int type, byte [] name)\n addPathToName(int type, byte [] name)}.\n \u003cp\u003e\n Note that a deep copy is performed on the {@code Collection} to\n protect against subsequent modifications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Return a printable representation of the {@code CertSelector}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"match","comment":"Decides whether a {@code Certificate} should be selected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.Certificate)","flatSignature":"(Certificate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cert","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Returns a copy of this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}