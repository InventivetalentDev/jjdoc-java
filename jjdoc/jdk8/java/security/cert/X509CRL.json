{"name":"X509CRL","comment":"\u003cp\u003e\n Abstract class for an X.509 Certificate Revocation List (CRL).\n A CRL is a time-stamped list identifying revoked certificates.\n It is signed by a Certificate Authority (CA) and made freely\n available in a public repository.\n\n \u003cp\u003eEach revoked certificate is\n identified in a CRL by its certificate serial number. When a\n certificate-using system uses a certificate (e.g., for verifying a\n remote user\u0027s digital signature), that system not only checks the\n certificate signature and validity but also acquires a suitably-\n recent CRL and checks that the certificate serial number is not on\n that CRL.  The meaning of \"suitably-recent\" may vary with local\n policy, but it usually means the most recently-issued CRL.  A CA\n issues a new CRL on a regular periodic basis (e.g., hourly, daily, or\n weekly).  Entries are added to CRLs as revocations occur, and an\n entry may be removed when the certificate expiration date is reached.\n \u003cp\u003e\n The X.509 v2 CRL format is described below in ASN.1:\n \u003cpre\u003e\n CertificateList  ::\u003d  SEQUENCE  {\n     tbsCertList          TBSCertList,\n     signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING  }\n \u003c/pre\u003e\n \u003cp\u003e\n More information can be found in\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3280.txt\"\u003eRFC 3280: Internet X.509\n Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e.\n \u003cp\u003e\n The ASN.1 definition of {@code tbsCertList} is:\n \u003cpre\u003e\n TBSCertList  ::\u003d  SEQUENCE  {\n     version                 Version OPTIONAL,\n                             -- if present, must be v2\n     signature               AlgorithmIdentifier,\n     issuer                  Name,\n     thisUpdate              ChoiceOfTime,\n     nextUpdate              ChoiceOfTime OPTIONAL,\n     revokedCertificates     SEQUENCE OF SEQUENCE  {\n         userCertificate         CertificateSerialNumber,\n         revocationDate          ChoiceOfTime,\n         crlEntryExtensions      Extensions OPTIONAL\n                                 -- if present, must be v2\n         }  OPTIONAL,\n     crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\n                                  -- if present, must be v2\n     }\n \u003c/pre\u003e\n \u003cp\u003e\n CRLs are instantiated using a certificate factory. The following is an\n example of how to instantiate an X.509 CRL:\n \u003cpre\u003e{@code\n try (InputStream inStream \u003d new FileInputStream(\"fileName-of-crl\")) {\n     CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n     X509CRL crl \u003d (X509CRL)cf.generateCRL(inStream);\n }\n }\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"X509CRL","qualifiedName":"java.security.cert.X509CRL","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.security.cert.CRL","interfaces":["java.security.cert.X509Extension"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"equals","comment":"Compares this CRL for equality with the given\n object. If the {@code other} object is an\n {@code instanceof} {@code X509CRL}, then\n its encoded form is retrieved and compared with the\n encoded form of this CRL.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode value for this CRL from its\n encoded form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEncoded","comment":"Returns the ASN.1 DER-encoded form of this CRL.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"verify","comment":"Verifies that this CRL was signed using the\n private key that corresponds to the given public key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PublicKey)","flatSignature":"(PublicKey)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"verify","comment":"Verifies that this CRL was signed using the\n private key that corresponds to the given public key.\n This method uses the signature verification engine\n supplied by the given provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PublicKey, java.lang.String)","flatSignature":"(PublicKey, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}}},{"name":"sigProvider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"verify","comment":"Verifies that this CRL was signed using the\n private key that corresponds to the given public key.\n This method uses the signature verification engine\n supplied by the given provider. Note that the specified Provider object\n does not have to be registered in the provider list.\n\n This method was added to version 1.8 of the Java Platform Standard\n Edition. In order to maintain backwards compatibility with existing\n service providers, this method is not {@code abstract}\n and it provides a default implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PublicKey, java.security.Provider)","flatSignature":"(PublicKey, Provider)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"PublicKey","qualifiedName":"java.security.PublicKey","dimension":"","elementType":{}}},{"name":"sigProvider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getVersion","comment":"Gets the {@code version} (version number) value from the CRL.\n The ASN.1 definition for this is:\n \u003cpre\u003e\n version    Version OPTIONAL,\n             -- if present, must be v2\n\n Version  ::\u003d  INTEGER  {  v1(0), v2(1), v3(2)  }\n             -- v3 does not apply to CRLs but appears for consistency\n             -- with definition of Version for certs\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerDN","comment":"\u003cstrong\u003eDenigrated\u003c/strong\u003e, replaced by {@linkplain\n #getIssuerX500Principal()}. This method returns the {@code issuer}\n as an implementation specific Principal object, which should not be\n relied upon by portable code.\n\n \u003cp\u003e\n Gets the {@code issuer} (issuer distinguished name) value from\n the CRL. The issuer name identifies the entity that signed (and\n issued) the CRL.\n\n \u003cp\u003eThe issuer name field contains an\n X.500 distinguished name (DN).\n The ASN.1 definition for this is:\n \u003cpre\u003e\n issuer    Name\n\n Name ::\u003d CHOICE { RDNSequence }\n RDNSequence ::\u003d SEQUENCE OF RelativeDistinguishedName\n RelativeDistinguishedName ::\u003d\n     SET OF AttributeValueAssertion\n\n AttributeValueAssertion ::\u003d SEQUENCE {\n                               AttributeType,\n                               AttributeValue }\n AttributeType ::\u003d OBJECT IDENTIFIER\n AttributeValue ::\u003d ANY\n \u003c/pre\u003e\n The {@code Name} describes a hierarchical name composed of\n attributes,\n such as country name, and corresponding values, such as US.\n The type of the {@code AttributeValue} component is determined by\n the {@code AttributeType}; in general it will be a\n {@code directoryString}. A {@code directoryString} is usually\n one of {@code PrintableString},\n {@code TeletexString} or {@code UniversalString}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getIssuerX500Principal","comment":"Returns the issuer (issuer distinguished name) value from the\n CRL as an {@code X500Principal}.\n \u003cp\u003e\n It is recommended that subclasses override this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"X500Principal","qualifiedName":"javax.security.auth.x500.X500Principal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThisUpdate","comment":"Gets the {@code thisUpdate} date from the CRL.\n The ASN.1 definition for this is:\n \u003cpre\u003e\n thisUpdate   ChoiceOfTime\n ChoiceOfTime ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNextUpdate","comment":"Gets the {@code nextUpdate} date from the CRL.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRevokedCertificate","comment":"Gets the CRL entry, if any, with the given certificate serialNumber.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"X509CRLEntry","qualifiedName":"java.security.cert.X509CRLEntry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"serialNumber","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRevokedCertificate","comment":"Get the CRL entry, if any, for the given certificate.\n\n \u003cp\u003eThis method can be used to lookup CRL entries in indirect CRLs,\n that means CRLs that contain entries from issuers other than the CRL\n issuer. The default implementation will only return entries for\n certificates issued by the CRL issuer. Subclasses that wish to\n support indirect CRLs should override this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.X509Certificate)","flatSignature":"(X509Certificate)","returnType":{"isPrimitive":false,"simpleName":"X509CRLEntry","qualifiedName":"java.security.cert.X509CRLEntry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certificate","type":{"isPrimitive":false,"simpleName":"X509Certificate","qualifiedName":"java.security.cert.X509Certificate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRevokedCertificates","comment":"Gets all the entries from this CRL.\n This returns a Set of X509CRLEntry objects.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTBSCertList","comment":"Gets the DER-encoded CRL information, the\n {@code tbsCertList} from this CRL.\n This can be used to verify the signature independently.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSignature","comment":"Gets the {@code signature} value (the raw signature bits) from\n the CRL.\n The ASN.1 definition for this is:\n \u003cpre\u003e\n signature     BIT STRING\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigAlgName","comment":"Gets the signature algorithm name for the CRL\n signature algorithm. An example is the string \"SHA256withRSA\".\n The ASN.1 definition for this is:\n \u003cpre\u003e\n signatureAlgorithm   AlgorithmIdentifier\n\n AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                             -- contains a value of the type\n                             -- registered for use with the\n                             -- algorithm object identifier value\n \u003c/pre\u003e\n\n \u003cp\u003eThe algorithm name is determined from the {@code algorithm}\n OID string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigAlgOID","comment":"Gets the signature algorithm OID string from the CRL.\n An OID is represented by a set of nonnegative whole numbers separated\n by periods.\n For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1\n with DSA signature algorithm defined in\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3279.txt\"\u003eRFC 3279: Algorithms and\n Identifiers for the Internet X.509 Public Key Infrastructure Certificate\n and CRL Profile\u003c/a\u003e.\n\n \u003cp\u003eSee {@link #getSigAlgName() getSigAlgName} for\n relevant ASN.1 definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigAlgParams","comment":"Gets the DER-encoded signature algorithm parameters from this\n CRL\u0027s signature algorithm. In most cases, the signature\n algorithm parameters are null; the parameters are usually\n supplied with the public key.\n If access to individual parameter values is needed then use\n {@link java.security.AlgorithmParameters AlgorithmParameters}\n and instantiate with the name returned by\n {@link #getSigAlgName() getSigAlgName}.\n\n \u003cp\u003eSee {@link #getSigAlgName() getSigAlgName} for\n relevant ASN.1 definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}