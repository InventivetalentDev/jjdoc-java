{"name":"CertPathBuilderSpi","comment":"The \u003ci\u003eService Provider Interface\u003c/i\u003e (\u003cb\u003eSPI\u003c/b\u003e)\n for the {@link CertPathBuilder CertPathBuilder} class. All\n {@code CertPathBuilder} implementations must include a class (the\n SPI class) that extends this class ({@code CertPathBuilderSpi}) and\n implements all of its methods. In general, instances of this class should\n only be accessed through the {@code CertPathBuilder} class. For\n details, see the Java Cryptography Architecture.\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n Instances of this class need not be protected against concurrent\n access from multiple threads. Threads that need to access a single\n {@code CertPathBuilderSpi} instance concurrently should synchronize\n amongst themselves and provide the necessary locking before calling the\n wrapping {@code CertPathBuilder} object.\n \u003cp\u003e\n However, implementations of {@code CertPathBuilderSpi} may still\n encounter concurrency issues, since multiple threads each\n manipulating a different {@code CertPathBuilderSpi} instance need not\n synchronize.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertPathBuilderSpi","qualifiedName":"java.security.cert.CertPathBuilderSpi","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"CertPathBuilderSpi","comment":"The default constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"engineBuild","comment":"Attempts to build a certification path using the specified\n algorithm parameter set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.cert.CertPathParameters)","flatSignature":"(CertPathParameters)","returnType":{"isPrimitive":false,"simpleName":"CertPathBuilderResult","qualifiedName":"java.security.cert.CertPathBuilderResult","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"params","type":{"isPrimitive":false,"simpleName":"CertPathParameters","qualifiedName":"java.security.cert.CertPathParameters","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"engineGetRevocationChecker","comment":"Returns a {@code CertPathChecker} that this implementation uses to\n check the revocation status of certificates. A PKIX implementation\n returns objects of type {@code PKIXRevocationChecker}.\n\n \u003cp\u003eThe primary purpose of this method is to allow callers to specify\n additional input parameters and options specific to revocation checking.\n See the class description of {@code CertPathBuilder} for an example.\n\n \u003cp\u003eThis method was added to version 1.8 of the Java Platform Standard\n Edition. In order to maintain backwards compatibility with existing\n service providers, this method cannot be abstract and by default throws\n an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CertPathChecker","qualifiedName":"java.security.cert.CertPathChecker","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}