{"name":"CertStoreParameters","comment":"A specification of {@code CertStore} parameters.\n \u003cp\u003e\n The purpose of this interface is to group (and provide type safety for)\n all {@code CertStore} parameter specifications. All\n {@code CertStore} parameter specifications must implement this\n interface.\n \u003cp\u003e\n Typically, a {@code CertStoreParameters} object is passed as a parameter\n to one of the {@link CertStore#getInstance CertStore.getInstance} methods.\n The {@code getInstance} method returns a {@code CertStore} that\n is used for retrieving {@code Certificate}s and {@code CRL}s. The\n {@code CertStore} that is returned is initialized with the specified\n parameters. The type of parameters needed may vary between different types\n of {@code CertStore}s.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"CertStoreParameters","qualifiedName":"java.security.cert.CertStoreParameters","dimension":"","elementType":{},"package":"java.security.cert","interfaces":["java.lang.Cloneable"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"clone","comment":"Makes a copy of this {@code CertStoreParameters}.\n \u003cp\u003e\n The precise meaning of \"copy\" may depend on the class of\n the {@code CertStoreParameters} object. A typical implementation\n performs a \"deep copy\" of this object, but this is not an absolute\n requirement. Some implementations may perform a \"shallow copy\" of some\n or all of the fields of this object.\n \u003cp\u003e\n Note that the {@code CertStore.getInstance} methods make a copy\n of the specified {@code CertStoreParameters}. A deep copy\n implementation of {@code clone} is safer and more robust, as it\n prevents the caller from corrupting a shared {@code CertStore} by\n subsequently modifying the contents of its initialization parameters.\n However, a shallow copy implementation of {@code clone} is more\n appropriate for applications that need to hold a reference to a\n parameter contained in the {@code CertStoreParameters}. For example,\n a shallow copy clone allows an application to release the resources of\n a particular {@code CertStore} initialization parameter immediately,\n rather than waiting for the garbage collection mechanism. This should\n be done with the utmost care, since the {@code CertStore} may still\n be in use by other threads.\n \u003cp\u003e\n Each subclass should state the precise behavior of this method so\n that users and developers know what to expect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.security.cert.LDAPCertStoreParameters","java.security.cert.CollectionCertStoreParameters"],"enumConstants":[]}