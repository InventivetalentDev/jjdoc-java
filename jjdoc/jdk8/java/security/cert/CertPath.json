{"name":"CertPath","comment":"An immutable sequence of certificates (a certification path).\n \u003cp\u003e\n This is an abstract class that defines the methods common to all\n {@code CertPath}s. Subclasses can handle different kinds of\n certificates (X.509, PGP, etc.).\n \u003cp\u003e\n All {@code CertPath} objects have a type, a list of\n {@code Certificate}s, and one or more supported encodings. Because the\n {@code CertPath} class is immutable, a {@code CertPath} cannot\n change in any externally visible way after being constructed. This\n stipulation applies to all public fields and methods of this class and any\n added or overridden by subclasses.\n \u003cp\u003e\n The type is a {@code String} that identifies the type of\n {@code Certificate}s in the certification path. For each\n certificate {@code cert} in a certification path {@code certPath},\n {@code cert.getType().equals(certPath.getType())} must be\n {@code true}.\n \u003cp\u003e\n The list of {@code Certificate}s is an ordered {@code List} of\n zero or more {@code Certificate}s. This {@code List} and all\n of the {@code Certificate}s contained in it must be immutable.\n \u003cp\u003e\n Each {@code CertPath} object must support one or more encodings\n so that the object can be translated into a byte array for storage or\n transmission to other parties. Preferably, these encodings should be\n well-documented standards (such as PKCS#7). One of the encodings supported\n by a {@code CertPath} is considered the default encoding. This\n encoding is used if no encoding is explicitly requested (for the\n {@link #getEncoded() getEncoded()} method, for instance).\n \u003cp\u003e\n All {@code CertPath} objects are also {@code Serializable}.\n {@code CertPath} objects are resolved into an alternate\n {@link CertPathRep CertPathRep} object during serialization. This allows\n a {@code CertPath} object to be serialized into an equivalent\n representation regardless of its underlying implementation.\n \u003cp\u003e\n {@code CertPath} objects can be created with a\n {@code CertificateFactory} or they can be returned by other classes,\n such as a {@code CertPathBuilder}.\n \u003cp\u003e\n By convention, X.509 {@code CertPath}s (consisting of\n {@code X509Certificate}s), are ordered starting with the target\n certificate and ending with a certificate issued by the trust anchor. That\n is, the issuer of one certificate is the subject of the following one. The\n certificate representing the {@link TrustAnchor TrustAnchor} should not be\n included in the certification path. Unvalidated X.509 {@code CertPath}s\n may not follow these conventions. PKIX {@code CertPathValidator}s will\n detect any departure from these conventions that cause the certification\n path to be invalid and throw a {@code CertPathValidatorException}.\n\n \u003cp\u003e Every implementation of the Java platform is required to support the\n following standard {@code CertPath} encodings:\n \u003cul\u003e\n \u003cli\u003e{@code PKCS7}\u003c/li\u003e\n \u003cli\u003e{@code PkiPath}\u003c/li\u003e\n \u003c/ul\u003e\n These encodings are described in the \u003ca href\u003d\n \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\"\u003e\n CertPath Encodings section\u003c/a\u003e of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.\n Consult the release documentation for your implementation to see if any\n other encodings are supported.\n \u003cp\u003e\n \u003cb\u003eConcurrent Access\u003c/b\u003e\n \u003cp\u003e\n All {@code CertPath} objects must be thread-safe. That is, multiple\n threads may concurrently invoke the methods defined in this class on a\n single {@code CertPath} object (or more than one) with no\n ill effects. This is also true for the {@code List} returned by\n {@code CertPath.getCertificates}.\n \u003cp\u003e\n Requiring {@code CertPath} objects to be immutable and thread-safe\n allows them to be passed around to various pieces of code without worrying\n about coordinating access.  Providing this thread-safety is\n generally not difficult, since the {@code CertPath} and\n {@code List} objects in question are immutable.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CertPath","qualifiedName":"java.security.cert.CertPath","dimension":"","elementType":{},"package":"java.security.cert","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getType","comment":"Returns the type of {@code Certificate}s in this certification\n path. This is the same string that would be returned by\n {@link java.security.cert.Certificate#getType() cert.getType()}\n for all {@code Certificate}s in the certification path.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEncodings","comment":"Returns an iteration of the encodings supported by this certification\n path, with the default encoding first. Attempts to modify the returned\n {@code Iterator} via its {@code remove} method result in an\n {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this certification path for equality with the specified\n object. Two {@code CertPath}s are equal if and only if their\n types are equal and their certificate {@code List}s (and by\n implication the {@code Certificate}s in those {@code List}s)\n are equal. A {@code CertPath} is never equal to an object that is\n not a {@code CertPath}.\n \u003cp\u003e\n This algorithm is implemented by this method. If it is overridden,\n the behavior specified here must be maintained.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hashcode for this certification path. The hash code of\n a certification path is defined to be the result of the following\n calculation:\n \u003cpre\u003e{@code\n  hashCode \u003d path.getType().hashCode();\n  hashCode \u003d 31*hashCode + path.getCertificates().hashCode();\n }\u003c/pre\u003e\n This ensures that {@code path1.equals(path2)} implies that\n {@code path1.hashCode()\u003d\u003dpath2.hashCode()} for any two certification\n paths, {@code path1} and {@code path2}, as required by the\n general contract of {@code Object.hashCode}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this certification path.\n This calls the {@code toString} method on each of the\n {@code Certificate}s in the path.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEncoded","comment":"Returns the encoded form of this certification path, using the default\n encoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEncoded","comment":"Returns the encoded form of this certification path, using the\n specified encoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"encoding","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCertificates","comment":"Returns the list of certificates in this certification path.\n The {@code List} returned must be immutable and thread-safe.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}