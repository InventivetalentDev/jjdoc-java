{"name":"X509Extension","comment":"Interface for an X.509 extension.\n\n \u003cp\u003eThe extensions defined for X.509 v3\n {@link X509Certificate Certificates} and v2\n {@link X509CRL CRLs} (Certificate Revocation\n Lists) provide methods\n for associating additional attributes with users or public keys,\n for managing the certification hierarchy, and for managing CRL\n distribution. The X.509 extensions format also allows communities\n to define private extensions to carry information unique to those\n communities.\n\n \u003cp\u003eEach extension in a certificate/CRL may be designated as\n critical or non-critical.  A certificate/CRL-using system (an application\n validating a certificate/CRL) must reject the certificate/CRL if it\n encounters a critical extension it does not recognize.  A non-critical\n extension may be ignored if it is not recognized.\n \u003cp\u003e\n The ASN.1 definition for this is:\n \u003cpre\u003e\n Extensions  ::\u003d  SEQUENCE SIZE (1..MAX) OF Extension\n\n Extension  ::\u003d  SEQUENCE  {\n     extnId        OBJECT IDENTIFIER,\n     critical      BOOLEAN DEFAULT FALSE,\n     extnValue     OCTET STRING\n                   -- contains a DER encoding of a value\n                   -- of the type registered for use with\n                   -- the extnId object identifier value\n }\n \u003c/pre\u003e\n Since not all extensions are known, the {@code getExtensionValue}\n method returns the DER-encoded OCTET STRING of the\n extension value (i.e., the {@code extnValue}). This can then\n be handled by a \u003cem\u003eClass\u003c/em\u003e that understands the extension.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"X509Extension","qualifiedName":"java.security.cert.X509Extension","dimension":"","elementType":{},"package":"java.security.cert","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"hasUnsupportedCriticalExtension","comment":"Check if there is a critical extension that is not supported.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCriticalExtensionOIDs","comment":"Gets a Set of the OID strings for the extension(s) marked\n CRITICAL in the certificate/CRL managed by the object\n implementing this interface.\n\n Here is sample code to get a Set of critical extensions from an\n X509Certificate and print the OIDs:\n \u003cpre\u003e{@code\n X509Certificate cert \u003d null;\n try (InputStream inStrm \u003d new FileInputStream(\"DER-encoded-Cert\")) {\n     CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n     cert \u003d (X509Certificate)cf.generateCertificate(inStrm);\n }\n\n Set\u003cString\u003e critSet \u003d cert.getCriticalExtensionOIDs();\n if (critSet !\u003d null \u0026\u0026 !critSet.isEmpty()) {\n     System.out.println(\"Set of critical extensions:\");\n     for (String oid : critSet) {\n         System.out.println(oid);\n     }\n }\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNonCriticalExtensionOIDs","comment":"Gets a Set of the OID strings for the extension(s) marked\n NON-CRITICAL in the certificate/CRL managed by the object\n implementing this interface.\n\n Here is sample code to get a Set of non-critical extensions from an\n X509CRL revoked certificate entry and print the OIDs:\n \u003cpre\u003e{@code\n CertificateFactory cf \u003d null;\n X509CRL crl \u003d null;\n try (InputStream inStrm \u003d new FileInputStream(\"DER-encoded-CRL\")) {\n     cf \u003d CertificateFactory.getInstance(\"X.509\");\n     crl \u003d (X509CRL)cf.generateCRL(inStrm);\n }\n\n byte[] certData \u003d \u003cDER-encoded certificate data\u003e\n ByteArrayInputStream bais \u003d new ByteArrayInputStream(certData);\n X509Certificate cert \u003d (X509Certificate)cf.generateCertificate(bais);\n X509CRLEntry badCert \u003d\n              crl.getRevokedCertificate(cert.getSerialNumber());\n\n if (badCert !\u003d null) {\n     Set\u003cString\u003e nonCritSet \u003d badCert.getNonCriticalExtensionOIDs();\n     if (nonCritSet !\u003d null)\n         for (String oid : nonCritSet) {\n             System.out.println(oid);\n         }\n }\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExtensionValue","comment":"Gets the DER-encoded OCTET string for the extension value\n (\u003cem\u003eextnValue\u003c/em\u003e) identified by the passed-in {@code oid}\n String.\n The {@code oid} string is\n represented by a set of nonnegative whole numbers separated\n by periods.\n\n \u003cp\u003eFor example:\u003cbr\u003e\n \u003ctable border\u003dgroove summary\u003d\"Examples of OIDs and extension names\"\u003e\n \u003ctr\u003e\n \u003cth\u003eOID \u003cem\u003e(Object Identifier)\u003c/em\u003e\u003c/th\u003e\n \u003cth\u003eExtension Name\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.14\u003c/td\u003e\n \u003ctd\u003eSubjectKeyIdentifier\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.15\u003c/td\u003e\n \u003ctd\u003eKeyUsage\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.16\u003c/td\u003e\n \u003ctd\u003ePrivateKeyUsage\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.17\u003c/td\u003e\n \u003ctd\u003eSubjectAlternativeName\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.18\u003c/td\u003e\n \u003ctd\u003eIssuerAlternativeName\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.19\u003c/td\u003e\n \u003ctd\u003eBasicConstraints\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.30\u003c/td\u003e\n \u003ctd\u003eNameConstraints\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.33\u003c/td\u003e\n \u003ctd\u003ePolicyMappings\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.35\u003c/td\u003e\n \u003ctd\u003eAuthorityKeyIdentifier\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e2.5.29.36\u003c/td\u003e\n \u003ctd\u003ePolicyConstraints\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"oid","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.security.cert.X509Certificate","java.security.cert.X509CRLEntry","java.security.cert.X509CRL"],"enumConstants":[]}