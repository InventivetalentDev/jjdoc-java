{"name":"Policy","comment":"A Policy object is responsible for determining whether code executing\n in the Java runtime environment has permission to perform a\n security-sensitive operation.\n\n \u003cp\u003e There is only one Policy object installed in the runtime at any\n given time.  A Policy object can be installed by calling the\n {@code setPolicy} method.  The installed Policy object can be\n obtained by calling the {@code getPolicy} method.\n\n \u003cp\u003e If no Policy object has been installed in the runtime, a call to\n {@code getPolicy} installs an instance of the default Policy\n implementation (a default subclass implementation of this abstract class).\n The default Policy implementation can be changed by setting the value\n of the {@code policy.provider} security property to the fully qualified\n name of the desired Policy subclass implementation.\n\n \u003cp\u003e Application code can directly subclass Policy to provide a custom\n implementation.  In addition, an instance of a Policy object can be\n constructed by invoking one of the {@code getInstance} factory methods\n with a standard type.  The default policy type is \"JavaPolicy\".\n\n \u003cp\u003e Once a Policy instance has been installed (either by default, or by\n calling {@code setPolicy}), the Java runtime invokes its\n {@code implies} method when it needs to\n determine whether executing code (encapsulated in a ProtectionDomain)\n can perform SecurityManager-protected operations.  How a Policy object\n retrieves its policy data is up to the Policy implementation itself.\n The policy data may be stored, for example, in a flat ASCII file,\n in a serialized binary file of the Policy class, or in a database.\n\n \u003cp\u003e The {@code refresh} method causes the policy object to\n refresh/reload its data.  This operation is implementation-dependent.\n For example, if the policy object stores its data in configuration files,\n calling {@code refresh} will cause it to re-read the configuration\n policy files.  If a refresh operation is not supported, this method does\n nothing.  Note that refreshed policy may not have an effect on classes\n in a particular ProtectionDomain. This is dependent on the Policy\n provider\u0027s implementation of the {@code implies}\n method and its PermissionCollection caching strategy.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Policy","qualifiedName":"java.security.Policy","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":["java.security.Policy.Parameters"],"isInnerClass":false,"constructors":[{"name":"Policy","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[{"name":"UNSUPPORTED_EMPTY_COLLECTION","comment":"A read-only empty PermissionCollection instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"getPolicy","comment":"Returns the installed Policy object. This value should not be cached,\n as it may be changed by a call to {@code setPolicy}.\n This method first calls\n {@code SecurityManager.checkPermission} with a\n {@code SecurityPermission(\"getPolicy\")} permission\n to ensure it\u0027s ok to get the Policy object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Policy","qualifiedName":"java.security.Policy","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setPolicy","comment":"Sets the system-wide Policy object. This method first calls\n {@code SecurityManager.checkPermission} with a\n {@code SecurityPermission(\"setPolicy\")}\n permission to ensure it\u0027s ok to set the Policy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Policy)","flatSignature":"(Policy)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Policy","qualifiedName":"java.security.Policy","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a Policy object of the specified type.\n\n \u003cp\u003e This method traverses the list of registered security providers,\n starting with the most preferred Provider.\n A new Policy object encapsulating the\n PolicySpi implementation from the first\n Provider that supports the specified type is returned.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Policy.Parameters)","flatSignature":"(String, Policy.Parameters)","returnType":{"isPrimitive":false,"simpleName":"Policy","qualifiedName":"java.security.Policy","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"Parameters","qualifiedName":"java.security.Policy.Parameters","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a Policy object of the specified type.\n\n \u003cp\u003e A new Policy object encapsulating the\n PolicySpi implementation from the specified provider\n is returned.   The specified provider must be registered\n in the provider list.\n\n \u003cp\u003e Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Policy.Parameters, java.lang.String)","flatSignature":"(String, Policy.Parameters, String)","returnType":{"isPrimitive":false,"simpleName":"Policy","qualifiedName":"java.security.Policy","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"Parameters","qualifiedName":"java.security.Policy.Parameters","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a Policy object of the specified type.\n\n \u003cp\u003e A new Policy object encapsulating the\n PolicySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.security.Policy.Parameters, java.security.Provider)","flatSignature":"(String, Policy.Parameters, Provider)","returnType":{"isPrimitive":false,"simpleName":"Policy","qualifiedName":"java.security.Policy","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"params","type":{"isPrimitive":false,"simpleName":"Parameters","qualifiedName":"java.security.Policy.Parameters","dimension":"","elementType":{}}},{"name":"provider","type":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProvider","comment":"Return the Provider of this Policy.\n\n \u003cp\u003e This Policy instance will only have a Provider if it\n was obtained via a call to {@code Policy.getInstance}.\n Otherwise this method returns null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Provider","qualifiedName":"java.security.Provider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getType","comment":"Return the type of this Policy.\n\n \u003cp\u003e This Policy instance will only have a type if it\n was obtained via a call to {@code Policy.getInstance}.\n Otherwise this method returns null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameters","comment":"Return Policy parameters.\n\n \u003cp\u003e This Policy instance will only have parameters if it\n was obtained via a call to {@code Policy.getInstance}.\n Otherwise this method returns null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Parameters","qualifiedName":"java.security.Policy.Parameters","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPermissions","comment":"Return a PermissionCollection object containing the set of\n permissions granted to the specified CodeSource.\n\n \u003cp\u003e Applications are discouraged from calling this method\n since this operation may not be supported by all policy implementations.\n Applications should solely rely on the {@code implies} method\n to perform policy checks.  If an application absolutely must call\n a getPermissions method, it should call\n {@code getPermissions(ProtectionDomain)}.\n\n \u003cp\u003e The default implementation of this method returns\n Policy.UNSUPPORTED_EMPTY_COLLECTION.  This method can be\n overridden if the policy implementation can return a set of\n permissions granted to a CodeSource.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.CodeSource)","flatSignature":"(CodeSource)","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"codesource","type":{"isPrimitive":false,"simpleName":"CodeSource","qualifiedName":"java.security.CodeSource","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPermissions","comment":"Return a PermissionCollection object containing the set of\n permissions granted to the specified ProtectionDomain.\n\n \u003cp\u003e Applications are discouraged from calling this method\n since this operation may not be supported by all policy implementations.\n Applications should rely on the {@code implies} method\n to perform policy checks.\n\n \u003cp\u003e The default implementation of this method first retrieves\n the permissions returned via {@code getPermissions(CodeSource)}\n (the CodeSource is taken from the specified ProtectionDomain),\n as well as the permissions located inside the specified ProtectionDomain.\n All of these permissions are then combined and returned in a new\n PermissionCollection object.  If {@code getPermissions(CodeSource)}\n returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method\n returns the permissions contained inside the specified ProtectionDomain\n in a new PermissionCollection object.\n\n \u003cp\u003e This method can be overridden if the policy implementation\n supports returning a set of permissions granted to a ProtectionDomain.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.ProtectionDomain)","flatSignature":"(ProtectionDomain)","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"domain","type":{"isPrimitive":false,"simpleName":"ProtectionDomain","qualifiedName":"java.security.ProtectionDomain","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"implies","comment":"Evaluates the global policy for the permissions granted to\n the ProtectionDomain and tests whether the permission is\n granted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.ProtectionDomain, java.security.Permission)","flatSignature":"(ProtectionDomain, Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"domain","type":{"isPrimitive":false,"simpleName":"ProtectionDomain","qualifiedName":"java.security.ProtectionDomain","dimension":"","elementType":{}}},{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"refresh","comment":"Refreshes/reloads the policy configuration. The behavior of this method\n depends on the implementation. For example, calling {@code refresh}\n on a file-based policy will cause the file to be re-read.\n\n \u003cp\u003e The default implementation of this method does nothing.\n This method should be overridden if a refresh operation is supported\n by the policy implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}