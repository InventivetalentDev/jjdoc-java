{"name":"BasicPermission","comment":"The BasicPermission class extends the Permission class, and\n can be used as the base class for permissions that want to\n follow the same naming convention as BasicPermission.\n \u003cP\u003e\n The name for a BasicPermission is the name of the given permission\n (for example, \"exit\",\n \"setFactory\", \"print.queueJob\", etc). The naming\n convention follows the  hierarchical property naming convention.\n An asterisk may appear by itself, or if immediately preceded by a \".\"\n may appear at the end of the name, to signify a wildcard match.\n For example, \"*\" and \"java.*\" signify a wildcard match, while \"*java\", \"a*b\",\n and \"java*\" do not.\n \u003cP\u003e\n The action string (inherited from Permission) is unused.\n Thus, BasicPermission is commonly used as the base class for\n \"named\" permissions\n (ones that contain a name but no actions list; you either have the\n named permission or you don\u0027t.)\n Subclasses may implement actions on top of BasicPermission,\n if desired.\n \u003cp\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"BasicPermission","qualifiedName":"java.security.BasicPermission","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.Permission","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"BasicPermission","comment":"Creates a new BasicPermission with the specified name.\n Name is the symbolic name of the permission, such as\n \"setFactory\",\n \"print.queueJob\", or \"topLevelWindow\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BasicPermission","comment":"Creates a new BasicPermission object with the specified name.\n The name is the symbolic name of the BasicPermission, and the\n actions String is currently unused.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"actions","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"implies","comment":"Checks if the specified permission is \"implied\" by\n this object.\n \u003cP\u003e\n More specifically, this method returns true if:\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s class is the same as this object\u0027s class, and\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s name equals or (in the case of wildcards)\n      is implied by this object\u0027s\n      name. For example, \"a.b.*\" implies \"a.b.c\".\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks two BasicPermission objects for equality.\n Checks that \u003ci\u003eobj\u003c/i\u003e\u0027s class is the same as this object\u0027s class\n and has the same name as this object.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this object.\n The hash code used is the hash code of the name, that is,\n {@code getName().hashCode()}, where {@code getName} is\n from the Permission superclass.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getActions","comment":"Returns the canonical string representation of the actions,\n which currently is the empty string \"\", since there are no actions for\n a BasicPermission.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newPermissionCollection","comment":"Returns a new PermissionCollection object for storing BasicPermission\n objects.\n\n \u003cp\u003eBasicPermission objects must be stored in a manner that allows them\n to be inserted in any order, but that also enables the\n PermissionCollection {@code implies} method\n to be implemented in an efficient (and consistent) manner.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.SecurityPermission","java.net.NetPermission","java.nio.file.LinkPermission","java.lang.RuntimePermission","java.lang.management.ManagementPermission","java.lang.reflect.ReflectPermission","java.io.SerializablePermission","java.util.PropertyPermission","java.util.logging.LoggingPermission"],"enumConstants":[]}