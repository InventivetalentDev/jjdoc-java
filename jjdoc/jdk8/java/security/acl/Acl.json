{"name":"Acl","comment":"Interface representing an Access Control List (ACL).  An Access\n Control List is a data structure used to guard access to\n resources.\u003cp\u003e\n\n An ACL can be thought of as a data structure with multiple ACL\n entries.  Each ACL entry, of interface type AclEntry, contains a\n set of permissions associated with a particular principal. (A\n principal represents an entity such as an individual user or a\n group). Additionally, each ACL entry is specified as being either\n positive or negative. If positive, the permissions are to be\n granted to the associated principal. If negative, the permissions\n are to be denied.\u003cp\u003e\n\n The ACL Entries in each ACL observe the following rules:\n\n \u003cul\u003e \u003cli\u003eEach principal can have at most one positive ACL entry and\n one negative entry; that is, multiple positive or negative ACL\n entries are not allowed for any principal.  Each entry specifies\n the set of permissions that are to be granted (if positive) or\n denied (if negative).\n\n \u003cli\u003eIf there is no entry for a particular principal, then the\n principal is considered to have a null (empty) permission set.\n\n \u003cli\u003eIf there is a positive entry that grants a principal a\n particular permission, and a negative entry that denies the\n principal the same permission, the result is as though the\n permission was never granted or denied.\n\n \u003cli\u003eIndividual permissions always override permissions of the\n group(s) to which the individual belongs. That is, individual\n negative permissions (specific denial of permissions) override the\n groups\u0027 positive permissions. And individual positive permissions\n override the groups\u0027 negative permissions.\n\n \u003c/ul\u003e\n\n The {@code  java.security.acl } package provides the\n interfaces to the ACL and related data structures (ACL entries,\n groups, permissions, etc.), and the {@code  sun.security.acl }\n classes provide a default implementation of the interfaces. For\n example, {@code  java.security.acl.Acl } provides the\n interface to an ACL and the {@code  sun.security.acl.AclImpl }\n class provides the default implementation of the interface.\u003cp\u003e\n\n The {@code  java.security.acl.Acl } interface extends the\n {@code  java.security.acl.Owner } interface. The Owner\n interface is used to maintain a list of owners for each ACL.  Only\n owners are allowed to modify an ACL. For example, only an owner can\n call the ACL\u0027s {@code addEntry} method to add a new ACL entry\n to the ACL.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Acl","qualifiedName":"java.security.acl.Acl","dimension":"","elementType":{},"package":"java.security.acl","interfaces":["java.security.acl.Owner"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"setName","comment":"Sets the name of this ACL.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Principal, java.lang.String)","flatSignature":"(Principal, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"caller","type":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getName","comment":"Returns the name of this ACL.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addEntry","comment":"Adds an ACL entry to this ACL. An entry associates a principal\n (e.g., an individual or a group) with a set of\n permissions. Each principal can have at most one positive ACL\n entry (specifying permissions to be granted to the principal)\n and one negative ACL entry (specifying permissions to be\n denied). If there is already an ACL entry of the same type\n (negative or positive) already in the ACL, false is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Principal, java.security.acl.AclEntry)","flatSignature":"(Principal, AclEntry)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"caller","type":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}}},{"name":"entry","type":{"isPrimitive":false,"simpleName":"AclEntry","qualifiedName":"java.security.acl.AclEntry","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeEntry","comment":"Removes an ACL entry from this ACL.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Principal, java.security.acl.AclEntry)","flatSignature":"(Principal, AclEntry)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"caller","type":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}}},{"name":"entry","type":{"isPrimitive":false,"simpleName":"AclEntry","qualifiedName":"java.security.acl.AclEntry","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPermissions","comment":"Returns an enumeration for the set of allowed permissions for the\n specified principal (representing an entity such as an individual or\n a group). This set of allowed permissions is calculated as\n follows:\n\n \u003cul\u003e\n\n \u003cli\u003eIf there is no entry in this Access Control List for the\n specified principal, an empty permission set is returned.\n\n \u003cli\u003eOtherwise, the principal\u0027s group permission sets are determined.\n (A principal can belong to one or more groups, where a group is a\n group of principals, represented by the Group interface.)\n The group positive permission set is the union of all\n the positive permissions of each group that the principal belongs to.\n The group negative permission set is the union of all\n the negative permissions of each group that the principal belongs to.\n If there is a specific permission that occurs in both\n the positive permission set and the negative permission set,\n it is removed from both.\u003cp\u003e\n\n The individual positive and negative permission sets are also\n determined. The positive permission set contains the permissions\n specified in the positive ACL entry (if any) for the principal.\n Similarly, the negative permission set contains the permissions\n specified in the negative ACL entry (if any) for the principal.\n The individual positive (or negative) permission set is considered\n to be null if there is not a positive (negative) ACL entry for the\n principal in this ACL.\u003cp\u003e\n\n The set of permissions granted to the principal is then calculated\n using the simple rule that individual permissions always override\n the group permissions. That is, the principal\u0027s individual negative\n permission set (specific denial of permissions) overrides the group\n positive permission set, and the principal\u0027s individual positive\n permission set overrides the group negative permission set.\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Principal)","flatSignature":"(Principal)","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"user","type":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"entries","comment":"Returns an enumeration of the entries in this ACL. Each element in\n the enumeration is of type AclEntry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkPermission","comment":"Checks whether or not the specified principal has the specified\n permission. If it does, true is returned, otherwise false is returned.\n\n More specifically, this method checks whether the passed permission\n is a member of the allowed permission set of the specified principal.\n The allowed permission set is determined by the same algorithm as is\n used by the {@code getPermissions} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Principal, java.security.acl.Permission)","flatSignature":"(Principal, Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"principal","type":{"isPrimitive":false,"simpleName":"Principal","qualifiedName":"java.security.Principal","dimension":"","elementType":{}}},{"name":"permission","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.acl.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of the\n ACL contents.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}