{"name":"PrivateKey","comment":"A private key.\n The purpose of this interface is to group (and provide type safety\n for) all private key interfaces.\n \u003cp\u003e\n Note: The specialized private key interfaces extend this interface.\n See, for example, the {@code DSAPrivateKey} interface in\n {@link java.security.interfaces}.\n \u003cp\u003e\n Implementations should override the default {@code destroy} and\n {@code isDestroyed} methods from the\n {@link javax.security.auth.Destroyable} interface to enable\n sensitive key information to be destroyed, cleared, or in the case\n where such information is immutable, unreferenced.\n Finally, since {@code PrivateKey} is {@code Serializable}, implementations\n should also override\n {@link java.io.ObjectOutputStream#writeObject(java.lang.Object)}\n to prevent keys that have been destroyed from being serialized.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"PrivateKey","qualifiedName":"java.security.PrivateKey","dimension":"","elementType":{},"package":"java.security","interfaces":["java.security.Key","javax.security.auth.Destroyable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"serialVersionUID","comment":"The class fingerprint that is set to indicate serialization\n compatibility with a previous version of the class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6034044314589513430L"}],"methods":[],"typeParameters":[],"subInterfaces":["java.security.interfaces.RSAPrivateKey","java.security.interfaces.ECPrivateKey","java.security.interfaces.DSAPrivateKey"],"enumConstants":[]}