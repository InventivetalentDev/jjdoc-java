{"name":"AuthProvider","comment":"This class defines login and logout methods for a provider.\n\n \u003cp\u003e While callers may invoke {@code login} directly,\n the provider may also invoke {@code login} on behalf of callers\n if it determines that a login must be performed\n prior to certain operations.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AuthProvider","qualifiedName":"java.security.AuthProvider","dimension":"","elementType":{},"package":"java.security","superclass":"java.security.Provider","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"login","comment":"Log in to this provider.\n\n \u003cp\u003e The provider relies on a {@code CallbackHandler}\n to obtain authentication information from the caller\n (a PIN, for example).  If the caller passes a {@code null}\n handler to this method, the provider uses the handler set in the\n {@code setCallbackHandler} method.\n If no handler was set in that method, the provider queries the\n \u003ci\u003eauth.login.defaultCallbackHandler\u003c/i\u003e security property\n for the fully qualified class name of a default handler implementation.\n If the security property is not set,\n the provider is assumed to have alternative means\n for obtaining authentication information.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler)","flatSignature":"(Subject, CallbackHandler)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"subject","type":{"isPrimitive":false,"simpleName":"Subject","qualifiedName":"javax.security.auth.Subject","dimension":"","elementType":{}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CallbackHandler","qualifiedName":"javax.security.auth.callback.CallbackHandler","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"logout","comment":"Log out from this provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setCallbackHandler","comment":"Set a {@code CallbackHandler}.\n\n \u003cp\u003e The provider uses this handler if one is not passed to the\n {@code login} method.  The provider also uses this handler\n if it invokes {@code login} on behalf of callers.\n In either case if a handler is not set via this method,\n the provider queries the\n \u003ci\u003eauth.login.defaultCallbackHandler\u003c/i\u003e security property\n for the fully qualified class name of a default handler implementation.\n If the security property is not set,\n the provider is assumed to have alternative means\n for obtaining authentication information.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(javax.security.auth.callback.CallbackHandler)","flatSignature":"(CallbackHandler)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"handler","type":{"isPrimitive":false,"simpleName":"CallbackHandler","qualifiedName":"javax.security.auth.callback.CallbackHandler","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}