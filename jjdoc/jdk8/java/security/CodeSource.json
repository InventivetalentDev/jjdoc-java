{"name":"CodeSource","comment":"\u003cp\u003eThis class extends the concept of a codebase to\n encapsulate not only the location (URL) but also the certificate chains\n that were used to verify signed code originating from that location.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CodeSource","qualifiedName":"java.security.CodeSource","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"CodeSource","comment":"Constructs a CodeSource and associates it with the specified\n location and set of certificates.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.URL, java.security.cert.Certificate[])","flatSignature":"(URL, Certificate[])","parameters":[{"name":"url","type":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}}},{"name":"certs","type":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"CodeSource","comment":"Constructs a CodeSource and associates it with the specified\n location and set of code signers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.URL, java.security.CodeSigner[])","flatSignature":"(URL, CodeSigner[])","parameters":[{"name":"url","type":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}}},{"name":"signers","type":{"isPrimitive":false,"simpleName":"CodeSigner","qualifiedName":"java.security.CodeSigner","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"CodeSigner","qualifiedName":"java.security.CodeSigner","dimension":"","elementType":{}}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"hashCode","comment":"Returns the hash code value for this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Tests for equality between the specified object and this\n object. Two CodeSource objects are considered equal if their\n locations are of identical value and if their signer certificate\n chains are of identical value. It is not required that\n the certificate chains be in the same order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLocation","comment":"Returns the location associated with this CodeSource.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCertificates","comment":"Returns the certificates associated with this CodeSource.\n \u003cp\u003e\n If this CodeSource object was created using the\n {@link #CodeSource(URL url, CodeSigner[] signers)}\n constructor then its certificate chains are extracted and used to\n create an array of Certificate objects. Each signer certificate is\n followed by its supporting certificate chain (which may be empty).\n Each signer certificate and its supporting certificate chain is ordered\n bottom-to-top (i.e., with the signer certificate first and the (root)\n certificate authority last).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Certificate","qualifiedName":"java.security.cert.Certificate","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCodeSigners","comment":"Returns the code signers associated with this CodeSource.\n \u003cp\u003e\n If this CodeSource object was created using the\n {@link #CodeSource(URL url, java.security.cert.Certificate[] certs)}\n constructor then its certificate chains are extracted and used to\n create an array of CodeSigner objects. Note that only X.509 certificates\n are examined - all other certificate types are ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CodeSigner","qualifiedName":"java.security.CodeSigner","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"CodeSigner","qualifiedName":"java.security.CodeSigner","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"implies","comment":"Returns true if this CodeSource object \"implies\" the specified CodeSource.\n \u003cp\u003e\n More specifically, this method makes the following checks.\n If any fail, it returns false. If they all succeed, it returns true.\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003ecodesource\u003c/i\u003e must not be null.\n \u003cli\u003e If this object\u0027s certificates are not null, then all\n of this object\u0027s certificates must be present in \u003ci\u003ecodesource\u003c/i\u003e\u0027s\n certificates.\n \u003cli\u003e If this object\u0027s location (getLocation()) is not null, then the\n following checks are made against this object\u0027s location and\n \u003ci\u003ecodesource\u003c/i\u003e\u0027s:\n   \u003cul\u003e\n     \u003cli\u003e  \u003ci\u003ecodesource\u003c/i\u003e\u0027s location must not be null.\n\n     \u003cli\u003e  If this object\u0027s location\n           equals \u003ci\u003ecodesource\u003c/i\u003e\u0027s location, then return true.\n\n     \u003cli\u003e  This object\u0027s protocol (getLocation().getProtocol()) must be\n           equal to \u003ci\u003ecodesource\u003c/i\u003e\u0027s protocol, ignoring case.\n\n     \u003cli\u003e  If this object\u0027s host (getLocation().getHost()) is not null,\n           then the SocketPermission\n           constructed with this object\u0027s host must imply the\n           SocketPermission constructed with \u003ci\u003ecodesource\u003c/i\u003e\u0027s host.\n\n     \u003cli\u003e  If this object\u0027s port (getLocation().getPort()) is not\n           equal to -1 (that is, if a port is specified), it must equal\n           \u003ci\u003ecodesource\u003c/i\u003e\u0027s port or default port\n           (codesource.getLocation().getDefaultPort()).\n\n     \u003cli\u003e  If this object\u0027s file (getLocation().getFile()) doesn\u0027t equal\n           \u003ci\u003ecodesource\u003c/i\u003e\u0027s file, then the following checks are made:\n           If this object\u0027s file ends with \"/-\",\n           then \u003ci\u003ecodesource\u003c/i\u003e\u0027s file must start with this object\u0027s\n           file (exclusive the trailing \"-\").\n           If this object\u0027s file ends with a \"/*\",\n           then \u003ci\u003ecodesource\u003c/i\u003e\u0027s file must start with this object\u0027s\n           file and must not have any further \"/\" separators.\n           If this object\u0027s file doesn\u0027t end with a \"/\",\n           then \u003ci\u003ecodesource\u003c/i\u003e\u0027s file must match this object\u0027s\n           file with a \u0027/\u0027 appended.\n\n     \u003cli\u003e  If this object\u0027s reference (getLocation().getRef()) is\n           not null, it must equal \u003ci\u003ecodesource\u003c/i\u003e\u0027s reference.\n\n   \u003c/ul\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For example, the codesource objects with the following locations\n and null certificates all imply\n the codesource with the location \"http://java.sun.com/classes/foo.jar\"\n and null certificates:\n \u003cpre\u003e\n     http:\n     http://*.sun.com/classes/*\n     http://java.sun.com/classes/-\n     http://java.sun.com/classes/foo.jar\n \u003c/pre\u003e\n\n Note that if this CodeSource has a null location and a null\n certificate chain, then it implies every other CodeSource.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.CodeSource)","flatSignature":"(CodeSource)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"codesource","type":{"isPrimitive":false,"simpleName":"CodeSource","qualifiedName":"java.security.CodeSource","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this CodeSource, telling its\n URL and certificates.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}