{"name":"AccessControlContext","comment":"An AccessControlContext is used to make system resource access decisions\n based on the context it encapsulates.\n\n \u003cp\u003eMore specifically, it encapsulates a context and\n has a single method, {@code checkPermission},\n that is equivalent to the {@code checkPermission} method\n in the AccessController class, with one difference: The AccessControlContext\n {@code checkPermission} method makes access decisions based on the\n context it encapsulates,\n rather than that of the current execution thread.\n\n \u003cp\u003eThus, the purpose of AccessControlContext is for those situations where\n a security check that should be made within a given context\n actually needs to be done from within a\n \u003ci\u003edifferent\u003c/i\u003e context (for example, from within a worker thread).\n\n \u003cp\u003e An AccessControlContext is created by calling the\n {@code AccessController.getContext} method.\n The {@code getContext} method takes a \"snapshot\"\n of the current calling context, and places\n it in an AccessControlContext object, which it returns. A sample call is\n the following:\n\n \u003cpre\u003e\n   AccessControlContext acc \u003d AccessController.getContext()\n \u003c/pre\u003e\n\n \u003cp\u003e\n Code within a different context can subsequently call the\n {@code checkPermission} method on the\n previously-saved AccessControlContext object. A sample call is the\n following:\n\n \u003cpre\u003e\n   acc.checkPermission(permission)\n \u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{},"package":"java.security","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"AccessControlContext","comment":"Create an AccessControlContext with the given array of ProtectionDomains.\n Context must not be null. Duplicate domains will be removed from the\n context.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.security.ProtectionDomain[])","flatSignature":"(ProtectionDomain[])","parameters":[{"name":"context","type":{"isPrimitive":false,"simpleName":"ProtectionDomain","qualifiedName":"java.security.ProtectionDomain","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ProtectionDomain","qualifiedName":"java.security.ProtectionDomain","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"AccessControlContext","comment":"Create a new {@code AccessControlContext} with the given\n {@code AccessControlContext} and {@code DomainCombiner}.\n This constructor associates the provided\n {@code DomainCombiner} with the provided\n {@code AccessControlContext}.\n\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.security.AccessControlContext, java.security.DomainCombiner)","flatSignature":"(AccessControlContext, DomainCombiner)","parameters":[{"name":"acc","type":{"isPrimitive":false,"simpleName":"AccessControlContext","qualifiedName":"java.security.AccessControlContext","dimension":"","elementType":{}}},{"name":"combiner","type":{"isPrimitive":false,"simpleName":"DomainCombiner","qualifiedName":"java.security.DomainCombiner","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getDomainCombiner","comment":"Get the {@code DomainCombiner} associated with this\n {@code AccessControlContext}.\n\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DomainCombiner","qualifiedName":"java.security.DomainCombiner","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkPermission","comment":"Determines whether the access request indicated by the\n specified permission should be allowed or denied, based on\n the security policy currently in effect, and the context in\n this object. The request is allowed only if every ProtectionDomain\n in the context implies the permission. Otherwise the request is\n denied.\n\n \u003cp\u003e\n This method quietly returns if the access request\n is permitted, or throws a suitable AccessControlException otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"perm","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks two AccessControlContext objects for equality.\n Checks that \u003ci\u003eobj\u003c/i\u003e is\n an AccessControlContext and has the same set of ProtectionDomains\n as this context.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this context. The hash code\n is computed by exclusive or-ing the hash code of all the protection\n domains in the context together.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}