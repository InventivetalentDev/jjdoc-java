{"name":"URI","comment":"Represents a Uniform Resource Identifier (URI) reference.\n\n \u003cp\u003e Aside from some minor deviations noted below, an instance of this\n class represents a URI reference as defined by\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2396: Uniform\n Resource Identifiers (URI): Generic Syntax\u003c/i\u003e\u003c/a\u003e, amended by \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2732: Format for\n Literal IPv6 Addresses in URLs\u003c/i\u003e\u003c/a\u003e. The Literal IPv6 address format\n also supports scope_ids. The syntax and usage of scope_ids is described\n \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e.\n This class provides constructors for creating URI instances from\n their components or by parsing their string forms, methods for accessing the\n various components of an instance, and methods for normalizing, resolving,\n and relativizing URI instances.  Instances of this class are immutable.\n\n\n \u003ch3\u003e URI syntax and components \u003c/h3\u003e\n\n At the highest level a URI reference (hereinafter simply \"URI\") in string\n form has the syntax\n\n \u003cblockquote\u003e\n [\u003ci\u003escheme\u003c/i\u003e\u003cb\u003e{@code :}\u003c/b\u003e]\u003ci\u003escheme-specific-part\u003c/i\u003e[\u003cb\u003e{@code #}\u003c/b\u003e\u003ci\u003efragment\u003c/i\u003e]\n \u003c/blockquote\u003e\n\n where square brackets [...] delineate optional components and the characters\n \u003cb\u003e{@code :}\u003c/b\u003e and \u003cb\u003e{@code #}\u003c/b\u003e stand for themselves.\n\n \u003cp\u003e An \u003ci\u003eabsolute\u003c/i\u003e URI specifies a scheme; a URI that is not absolute is\n said to be \u003ci\u003erelative\u003c/i\u003e.  URIs are also classified according to whether\n they are \u003ci\u003eopaque\u003c/i\u003e or \u003ci\u003ehierarchical\u003c/i\u003e.\n\n \u003cp\u003e An \u003ci\u003eopaque\u003c/i\u003e URI is an absolute URI whose scheme-specific part does\n not begin with a slash character ({@code \u0027/\u0027}).  Opaque URIs are not\n subject to further parsing.  Some examples of opaque URIs are:\n\n \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n \u003ctr\u003e\u003ctd\u003e{@code mailto:java-net@java.sun.com}\u003ctd\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e{@code news:comp.lang.java}\u003ctd\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e{@code urn:isbn:096139210x}\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e A \u003ci\u003ehierarchical\u003c/i\u003e URI is either an absolute URI whose\n scheme-specific part begins with a slash character, or a relative URI, that\n is, a URI that does not specify a scheme.  Some examples of hierarchical\n URIs are:\n\n \u003cblockquote\u003e\n {@code http://java.sun.com/j2se/1.3/}\u003cbr\u003e\n {@code docs/guide/collections/designfaq.html#28}\u003cbr\u003e\n {@code ../../../demo/jfc/SwingSet2/src/SwingSet2.java}\u003cbr\u003e\n {@code file:///~/calendar}\n \u003c/blockquote\u003e\n\n \u003cp\u003e A hierarchical URI is subject to further parsing according to the syntax\n\n \u003cblockquote\u003e\n [\u003ci\u003escheme\u003c/i\u003e\u003cb\u003e{@code :}\u003c/b\u003e][\u003cb\u003e{@code //}\u003c/b\u003e\u003ci\u003eauthority\u003c/i\u003e][\u003ci\u003epath\u003c/i\u003e][\u003cb\u003e{@code ?}\u003c/b\u003e\u003ci\u003equery\u003c/i\u003e][\u003cb\u003e{@code #}\u003c/b\u003e\u003ci\u003efragment\u003c/i\u003e]\n \u003c/blockquote\u003e\n\n where the characters \u003cb\u003e{@code :}\u003c/b\u003e, \u003cb\u003e{@code /}\u003c/b\u003e,\n \u003cb\u003e{@code ?}\u003c/b\u003e, and \u003cb\u003e{@code #}\u003c/b\u003e stand for themselves.  The\n scheme-specific part of a hierarchical URI consists of the characters\n between the scheme and fragment components.\n\n \u003cp\u003e The authority component of a hierarchical URI is, if specified, either\n \u003ci\u003eserver-based\u003c/i\u003e or \u003ci\u003eregistry-based\u003c/i\u003e.  A server-based authority\n parses according to the familiar syntax\n\n \u003cblockquote\u003e\n [\u003ci\u003euser-info\u003c/i\u003e\u003cb\u003e{@code @}\u003c/b\u003e]\u003ci\u003ehost\u003c/i\u003e[\u003cb\u003e{@code :}\u003c/b\u003e\u003ci\u003eport\u003c/i\u003e]\n \u003c/blockquote\u003e\n\n where the characters \u003cb\u003e{@code @}\u003c/b\u003e and \u003cb\u003e{@code :}\u003c/b\u003e stand for\n themselves.  Nearly all URI schemes currently in use are server-based.  An\n authority component that does not parse in this way is considered to be\n registry-based.\n\n \u003cp\u003e The path component of a hierarchical URI is itself said to be absolute\n if it begins with a slash character ({@code \u0027/\u0027}); otherwise it is\n relative.  The path of a hierarchical URI that is either absolute or\n specifies an authority is always absolute.\n\n \u003cp\u003e All told, then, a URI instance has the following nine components:\n\n \u003cblockquote\u003e\u003ctable summary\u003d\"Describes the components of a URI:scheme,scheme-specific-part,authority,user-info,host,port,path,query,fragment\"\u003e\n \u003ctr\u003e\u003cth\u003e\u003ci\u003eComponent\u003c/i\u003e\u003c/th\u003e\u003cth\u003e\u003ci\u003eType\u003c/i\u003e\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003escheme\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003escheme-specific-part\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eauthority\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003euser-info\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ehost\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eport\u003c/td\u003e\u003ctd\u003e{@code int}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003epath\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003equery\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003efragment\u003c/td\u003e\u003ctd\u003e{@code String}\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n In a given instance any particular component is either \u003ci\u003eundefined\u003c/i\u003e or\n \u003ci\u003edefined\u003c/i\u003e with a distinct value.  Undefined string components are\n represented by {@code null}, while undefined integer components are\n represented by {@code -1}.  A string component may be defined to have the\n empty string as its value; this is not equivalent to that component being\n undefined.\n\n \u003cp\u003e Whether a particular component is or is not defined in an instance\n depends upon the type of the URI being represented.  An absolute URI has a\n scheme component.  An opaque URI has a scheme, a scheme-specific part, and\n possibly a fragment, but has no other components.  A hierarchical URI always\n has a path (though it may be empty) and a scheme-specific-part (which at\n least contains the path), and may have any of the other components.  If the\n authority component is present and is server-based then the host component\n will be defined and the user-information and port components may be defined.\n\n\n \u003ch4\u003e Operations on URI instances \u003c/h4\u003e\n\n The key operations supported by this class are those of\n \u003ci\u003enormalization\u003c/i\u003e, \u003ci\u003eresolution\u003c/i\u003e, and \u003ci\u003erelativization\u003c/i\u003e.\n\n \u003cp\u003e \u003ci\u003eNormalization\u003c/i\u003e is the process of removing unnecessary {@code \".\"}\n and {@code \"..\"} segments from the path component of a hierarchical URI.\n Each {@code \".\"} segment is simply removed.  A {@code \"..\"} segment is\n removed only if it is preceded by a non-{@code \"..\"} segment.\n Normalization has no effect upon opaque URIs.\n\n \u003cp\u003e \u003ci\u003eResolution\u003c/i\u003e is the process of resolving one URI against another,\n \u003ci\u003ebase\u003c/i\u003e URI.  The resulting URI is constructed from components of both\n URIs in the manner specified by RFC\u0026nbsp;2396, taking components from the\n base URI for those not specified in the original.  For hierarchical URIs,\n the path of the original is resolved against the path of the base and then\n normalized.  The result, for example, of resolving\n\n \u003cblockquote\u003e\n {@code docs/guide/collections/designfaq.html#28}\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;(1)\n \u003c/blockquote\u003e\n\n against the base URI {@code http://java.sun.com/j2se/1.3/} is the result\n URI\n\n \u003cblockquote\u003e\n {@code https://docs.oracle.com/javase/1.3/docs/guide/collections/designfaq.html#28}\n \u003c/blockquote\u003e\n\n Resolving the relative URI\n\n \u003cblockquote\u003e\n {@code ../../../demo/jfc/SwingSet2/src/SwingSet2.java}\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;(2)\n \u003c/blockquote\u003e\n\n against this result yields, in turn,\n\n \u003cblockquote\u003e\n {@code http://java.sun.com/j2se/1.3/demo/jfc/SwingSet2/src/SwingSet2.java}\n \u003c/blockquote\u003e\n\n Resolution of both absolute and relative URIs, and of both absolute and\n relative paths in the case of hierarchical URIs, is supported.  Resolving\n the URI {@code file:///~calendar} against any other URI simply yields the\n original URI, since it is absolute.  Resolving the relative URI (2) above\n against the relative base URI (1) yields the normalized, but still relative,\n URI\n\n \u003cblockquote\u003e\n {@code demo/jfc/SwingSet2/src/SwingSet2.java}\n \u003c/blockquote\u003e\n\n \u003cp\u003e \u003ci\u003eRelativization\u003c/i\u003e, finally, is the inverse of resolution: For any\n two normalized URIs \u003ci\u003eu\u003c/i\u003e and\u0026nbsp;\u003ci\u003ev\u003c/i\u003e,\n\n \u003cblockquote\u003e\n   \u003ci\u003eu\u003c/i\u003e{@code .relativize(}\u003ci\u003eu\u003c/i\u003e{@code .resolve(}\u003ci\u003ev\u003c/i\u003e{@code )).equals(}\u003ci\u003ev\u003c/i\u003e{@code )}\u0026nbsp;\u0026nbsp;and\u003cbr\u003e\n   \u003ci\u003eu\u003c/i\u003e{@code .resolve(}\u003ci\u003eu\u003c/i\u003e{@code .relativize(}\u003ci\u003ev\u003c/i\u003e{@code )).equals(}\u003ci\u003ev\u003c/i\u003e{@code )}\u0026nbsp;\u0026nbsp;.\u003cbr\u003e\n \u003c/blockquote\u003e\n\n This operation is often useful when constructing a document containing URIs\n that must be made relative to the base URI of the document wherever\n possible.  For example, relativizing the URI\n\n \u003cblockquote\u003e\n {@code https://docs.oracle.com/javase/1.3/docs/guide/index.html}\n \u003c/blockquote\u003e\n\n against the base URI\n\n \u003cblockquote\u003e\n {@code http://java.sun.com/j2se/1.3}\n \u003c/blockquote\u003e\n\n yields the relative URI {@code docs/guide/index.html}.\n\n\n \u003ch4\u003e Character categories \u003c/h4\u003e\n\n RFC\u0026nbsp;2396 specifies precisely which characters are permitted in the\n various components of a URI reference.  The following categories, most of\n which are taken from that specification, are used below to describe these\n constraints:\n\n \u003cblockquote\u003e\u003ctable cellspacing\u003d2 summary\u003d\"Describes categories alpha,digit,alphanum,unreserved,punct,reserved,escaped,and other\"\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003ealpha\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eThe US-ASCII alphabetic characters,\n        {@code \u0027A\u0027}\u0026nbsp;through\u0026nbsp;{@code \u0027Z\u0027}\n        and {@code \u0027a\u0027}\u0026nbsp;through\u0026nbsp;{@code \u0027z\u0027}\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003edigit\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eThe US-ASCII decimal digit characters,\n       {@code \u00270\u0027}\u0026nbsp;through\u0026nbsp;{@code \u00279\u0027}\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003ealphanum\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eAll \u003ci\u003ealpha\u003c/i\u003e and \u003ci\u003edigit\u003c/i\u003e characters\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003eunreserved\u003c/i\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n       \u003ctd\u003eAll \u003ci\u003ealphanum\u003c/i\u003e characters together with those in the string\n        {@code \"_-!.~\u0027()*\"}\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003epunct\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eThe characters in the string {@code \",;:$\u0026+\u003d\"}\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003ereserved\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eAll \u003ci\u003epunct\u003c/i\u003e characters together with those in the string\n        {@code \"?/[]@\"}\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003eescaped\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eEscaped octets, that is, triplets consisting of the percent\n           character ({@code \u0027%\u0027}) followed by two hexadecimal digits\n           ({@code \u00270\u0027}-{@code \u00279\u0027}, {@code \u0027A\u0027}-{@code \u0027F\u0027}, and\n           {@code \u0027a\u0027}-{@code \u0027f\u0027})\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003eother\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eThe Unicode characters that are not in the US-ASCII character set,\n           are not control characters (according to the {@link\n           java.lang.Character#isISOControl(char) Character.isISOControl}\n           method), and are not space characters (according to the {@link\n           java.lang.Character#isSpaceChar(char) Character.isSpaceChar}\n           method)\u0026nbsp;\u0026nbsp;\u003ci\u003e(\u003cb\u003eDeviation from RFC 2396\u003c/b\u003e, which is\n           limited to US-ASCII)\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e\u003ca name\u003d\"legal-chars\"\u003e\u003c/a\u003e The set of all legal URI characters consists of\n the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003ereserved\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, and \u003ci\u003eother\u003c/i\u003e\n characters.\n\n\n \u003ch4\u003e Escaped octets, quotation, encoding, and decoding \u003c/h4\u003e\n\n RFC 2396 allows escaped octets to appear in the user-info, path, query, and\n fragment components.  Escaping serves two purposes in URIs:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e To \u003ci\u003eencode\u003c/i\u003e non-US-ASCII characters when a URI is required to\n   conform strictly to RFC\u0026nbsp;2396 by not containing any \u003ci\u003eother\u003c/i\u003e\n   characters.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e To \u003ci\u003equote\u003c/i\u003e characters that are otherwise illegal in a\n   component.  The user-info, path, query, and fragment components differ\n   slightly in terms of which characters are considered legal and illegal.\n   \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n These purposes are served in this class by three related operations:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e\u003ca name\u003d\"encode\"\u003e\u003c/a\u003e A character is \u003ci\u003eencoded\u003c/i\u003e by replacing it\n   with the sequence of escaped octets that represent that character in the\n   UTF-8 character set.  The Euro currency symbol ({@code \u0027\\u20AC\u0027}),\n   for example, is encoded as {@code \"%E2%82%AC\"}.  \u003ci\u003e(\u003cb\u003eDeviation from\n   RFC\u0026nbsp;2396\u003c/b\u003e, which does not specify any particular character\n   set.)\u003c/i\u003e \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e\u003ca name\u003d\"quote\"\u003e\u003c/a\u003e An illegal character is \u003ci\u003equoted\u003c/i\u003e simply by\n   encoding it.  The space character, for example, is quoted by replacing it\n   with {@code \"%20\"}.  UTF-8 contains US-ASCII, hence for US-ASCII\n   characters this transformation has exactly the effect required by\n   RFC\u0026nbsp;2396. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e\u003ca name\u003d\"decode\"\u003e\u003c/a\u003e\n   A sequence of escaped octets is \u003ci\u003edecoded\u003c/i\u003e by\n   replacing it with the sequence of characters that it represents in the\n   UTF-8 character set.  UTF-8 contains US-ASCII, hence decoding has the\n   effect of de-quoting any quoted US-ASCII characters as well as that of\n   decoding any encoded non-US-ASCII characters.  If a \u003ca\n   href\u003d\"../nio/charset/CharsetDecoder.html#ce\"\u003edecoding error\u003c/a\u003e occurs\n   when decoding the escaped octets then the erroneous octets are replaced by\n   {@code \u0027\\uFFFD\u0027}, the Unicode replacement character.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n These operations are exposed in the constructors and methods of this class\n as follows:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@linkplain #URI(java.lang.String) single-argument\n   constructor} requires any illegal characters in its argument to be\n   quoted and preserves any escaped octets and \u003ci\u003eother\u003c/i\u003e characters that\n   are present.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@linkplain\n   #URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)\n   multi-argument constructors} quote illegal characters as\n   required by the components in which they appear.  The percent character\n   ({@code \u0027%\u0027}) is always quoted by these constructors.  Any \u003ci\u003eother\u003c/i\u003e\n   characters are preserved.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #getRawUserInfo() getRawUserInfo}, {@link #getRawPath()\n   getRawPath}, {@link #getRawQuery() getRawQuery}, {@link #getRawFragment()\n   getRawFragment}, {@link #getRawAuthority() getRawAuthority}, and {@link\n   #getRawSchemeSpecificPart() getRawSchemeSpecificPart} methods return the\n   values of their corresponding components in raw form, without interpreting\n   any escaped octets.  The strings returned by these methods may contain\n   both escaped octets and \u003ci\u003eother\u003c/i\u003e characters, and will not contain any\n   illegal characters.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #getUserInfo() getUserInfo}, {@link #getPath()\n   getPath}, {@link #getQuery() getQuery}, {@link #getFragment()\n   getFragment}, {@link #getAuthority() getAuthority}, and {@link\n   #getSchemeSpecificPart() getSchemeSpecificPart} methods decode any escaped\n   octets in their corresponding components.  The strings returned by these\n   methods may contain both \u003ci\u003eother\u003c/i\u003e characters and illegal characters,\n   and will not contain any escaped octets.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #toString() toString} method returns a URI string with\n   all necessary quotation but which may contain \u003ci\u003eother\u003c/i\u003e characters.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #toASCIIString() toASCIIString} method returns a fully\n   quoted and encoded URI string that does not contain any \u003ci\u003eother\u003c/i\u003e\n   characters.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n\n \u003ch4\u003e Identities \u003c/h4\u003e\n\n For any URI \u003ci\u003eu\u003c/i\u003e, it is always the case that\n\n \u003cblockquote\u003e\n {@code new URI(}\u003ci\u003eu\u003c/i\u003e{@code .toString()).equals(}\u003ci\u003eu\u003c/i\u003e{@code )}\u0026nbsp;.\n \u003c/blockquote\u003e\n\n For any URI \u003ci\u003eu\u003c/i\u003e that does not contain redundant syntax such as two\n slashes before an empty authority (as in {@code file:///tmp/}\u0026nbsp;) or a\n colon following a host name but no port (as in\n {@code http://java.sun.com:}\u0026nbsp;), and that does not encode characters\n except those that must be quoted, the following identities also hold:\n \u003cpre\u003e\n     new URI(\u003ci\u003eu\u003c/i\u003e.getScheme(),\n             \u003ci\u003eu\u003c/i\u003e.getSchemeSpecificPart(),\n             \u003ci\u003eu\u003c/i\u003e.getFragment())\n     .equals(\u003ci\u003eu\u003c/i\u003e)\u003c/pre\u003e\n in all cases,\n \u003cpre\u003e\n     new URI(\u003ci\u003eu\u003c/i\u003e.getScheme(),\n             \u003ci\u003eu\u003c/i\u003e.getUserInfo(), \u003ci\u003eu\u003c/i\u003e.getAuthority(),\n             \u003ci\u003eu\u003c/i\u003e.getPath(), \u003ci\u003eu\u003c/i\u003e.getQuery(),\n             \u003ci\u003eu\u003c/i\u003e.getFragment())\n     .equals(\u003ci\u003eu\u003c/i\u003e)\u003c/pre\u003e\n if \u003ci\u003eu\u003c/i\u003e is hierarchical, and\n \u003cpre\u003e\n     new URI(\u003ci\u003eu\u003c/i\u003e.getScheme(),\n             \u003ci\u003eu\u003c/i\u003e.getUserInfo(), \u003ci\u003eu\u003c/i\u003e.getHost(), \u003ci\u003eu\u003c/i\u003e.getPort(),\n             \u003ci\u003eu\u003c/i\u003e.getPath(), \u003ci\u003eu\u003c/i\u003e.getQuery(),\n             \u003ci\u003eu\u003c/i\u003e.getFragment())\n     .equals(\u003ci\u003eu\u003c/i\u003e)\u003c/pre\u003e\n if \u003ci\u003eu\u003c/i\u003e is hierarchical and has either no authority or a server-based\n authority.\n\n\n \u003ch4\u003e URIs, URLs, and URNs \u003c/h4\u003e\n\n A URI is a uniform resource \u003ci\u003eidentifier\u003c/i\u003e while a URL is a uniform\n resource \u003ci\u003elocator\u003c/i\u003e.  Hence every URL is a URI, abstractly speaking, but\n not every URI is a URL.  This is because there is another subcategory of\n URIs, uniform resource \u003ci\u003enames\u003c/i\u003e (URNs), which name resources but do not\n specify how to locate them.  The {@code mailto}, {@code news}, and\n {@code isbn} URIs shown above are examples of URNs.\n\n \u003cp\u003e The conceptual distinction between URIs and URLs is reflected in the\n differences between this class and the {@link URL} class.\n\n \u003cp\u003e An instance of this class represents a URI reference in the syntactic\n sense defined by RFC\u0026nbsp;2396.  A URI may be either absolute or relative.\n A URI string is parsed according to the generic syntax without regard to the\n scheme, if any, that it specifies.  No lookup of the host, if any, is\n performed, and no scheme-dependent stream handler is constructed.  Equality,\n hashing, and comparison are defined strictly in terms of the character\n content of the instance.  In other words, a URI instance is little more than\n a structured string that supports the syntactic, scheme-independent\n operations of comparison, normalization, resolution, and relativization.\n\n \u003cp\u003e An instance of the {@link URL} class, by contrast, represents the\n syntactic components of a URL together with some of the information required\n to access the resource that it describes.  A URL must be absolute, that is,\n it must always specify a scheme.  A URL string is parsed according to its\n scheme.  A stream handler is always established for a URL, and in fact it is\n impossible to create a URL instance for a scheme for which no handler is\n available.  Equality and hashing depend upon both the scheme and the\n Internet address of the host, if any; comparison is not defined.  In other\n words, a URL is a structured string that supports the syntactic operation of\n resolution as well as the network I/O operations of looking up the host and\n opening a connection to the specified resource.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":["java.lang.Comparable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"URI","comment":"Constructs a URI by parsing the given string.\n\n \u003cp\u003e This constructor parses the given string exactly as specified by the\n grammar in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e,\n Appendix\u0026nbsp;A, \u003cb\u003e\u003ci\u003eexcept for the following deviations:\u003c/i\u003e\u003c/b\u003e \u003c/p\u003e\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e An empty authority component is permitted as long as it is\n   followed by a non-empty path, a query component, or a fragment\n   component.  This allows the parsing of URIs such as\n   {@code \"file:///foo/bar\"}, which seems to be the intent of\n   RFC\u0026nbsp;2396 although the grammar does not permit it.  If the\n   authority component is empty then the user-information, host, and port\n   components are undefined. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Empty relative paths are permitted; this seems to be the\n   intent of RFC\u0026nbsp;2396 although the grammar does not permit it.  The\n   primary consequence of this deviation is that a standalone fragment\n   such as {@code \"#foo\"} parses as a relative URI with an empty path\n   and the given fragment, and can be usefully \u003ca\n   href\u003d\"#resolve-frag\"\u003eresolved\u003c/a\u003e against a base URI.\n\n   \u003cli\u003e\u003cp\u003e IPv4 addresses in host components are parsed rigorously, as\n   specified by \u003ca\n   href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003eRFC\u0026nbsp;2732\u003c/a\u003e: Each\n   element of a dotted-quad address must contain no more than three\n   decimal digits.  Each element is further constrained to have a value\n   no greater than 255. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e \u003cp\u003e Hostnames in host components that comprise only a single\n   domain label are permitted to start with an \u003ci\u003ealphanum\u003c/i\u003e\n   character. This seems to be the intent of \u003ca\n   href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e\n   section\u0026nbsp;3.2.2 although the grammar does not permit it. The\n   consequence of this deviation is that the authority component of a\n   hierarchical URI such as {@code s://123}, will parse as a server-based\n   authority. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e IPv6 addresses are permitted for the host component.  An IPv6\n   address must be enclosed in square brackets ({@code \u0027[\u0027} and\n   {@code \u0027]\u0027}) as specified by \u003ca\n   href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003eRFC\u0026nbsp;2732\u003c/a\u003e.  The\n   IPv6 address itself must parse according to \u003ca\n   href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003eRFC\u0026nbsp;2373\u003c/a\u003e.  IPv6\n   addresses are further constrained to describe no more than sixteen\n   bytes of address information, a constraint implicit in RFC\u0026nbsp;2373\n   but not expressible in the grammar. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Characters in the \u003ci\u003eother\u003c/i\u003e category are permitted wherever\n   RFC\u0026nbsp;2396 permits \u003ci\u003eescaped\u003c/i\u003e octets, that is, in the\n   user-information, path, query, and fragment components, as well as in\n   the authority component if the authority is registry-based.  This\n   allows URIs to contain Unicode characters beyond those in the US-ASCII\n   character set. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URI","comment":"Constructs a hierarchical URI from the given components.\n\n \u003cp\u003e If a scheme is given then the path, if also given, must either be\n empty or begin with a slash character ({@code \u0027/\u0027}).  Otherwise a\n component of the new URI may be left undefined by passing {@code null}\n for the corresponding parameter or, in the case of the {@code port}\n parameter, by passing {@code -1}.\n\n \u003cp\u003e This constructor first builds a URI string from the given components\n according to the rules specified in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e,\n section\u0026nbsp;5.2, step\u0026nbsp;7: \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e Initially, the result string is empty. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a scheme is given then it is appended to the result,\n   followed by a colon character ({@code \u0027:\u0027}).  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If user information, a host, or a port are given then the\n   string {@code \"//\"} is appended.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If user information is given then it is appended, followed by\n   a commercial-at character ({@code \u0027@\u0027}).  Any character not in the\n   \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, or \u003ci\u003eother\u003c/i\u003e\n   categories is \u003ca href\u003d\"#quote\"\u003equoted\u003c/a\u003e.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a host is given then it is appended.  If the host is a\n   literal IPv6 address but is not enclosed in square brackets\n   ({@code \u0027[\u0027} and {@code \u0027]\u0027}) then the square brackets are added.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a port number is given then a colon character\n   ({@code \u0027:\u0027}) is appended, followed by the port number in decimal.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a path is given then it is appended.  Any character not in\n   the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, or \u003ci\u003eother\u003c/i\u003e\n   categories, and not equal to the slash character ({@code \u0027/\u0027}) or the\n   commercial-at character ({@code \u0027@\u0027}), is quoted.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a query is given then a question-mark character\n   ({@code \u0027?\u0027}) is appended, followed by the query.  Any character that\n   is not a \u003ca href\u003d\"#legal-chars\"\u003elegal URI character\u003c/a\u003e is quoted.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Finally, if a fragment is given then a hash character\n   ({@code \u0027#\u0027}) is appended, followed by the fragment.  Any character\n   that is not a legal URI character is quoted.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e The resulting URI string is then parsed as if by invoking the {@link\n #URI(String)} constructor and then invoking the {@link\n #parseServerAuthority()} method upon the result; this may cause a {@link\n URISyntaxException} to be thrown.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String, int, String, String, String)","parameters":[{"name":"scheme","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"userInfo","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"path","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"query","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fragment","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URI","comment":"Constructs a hierarchical URI from the given components.\n\n \u003cp\u003e If a scheme is given then the path, if also given, must either be\n empty or begin with a slash character ({@code \u0027/\u0027}).  Otherwise a\n component of the new URI may be left undefined by passing {@code null}\n for the corresponding parameter.\n\n \u003cp\u003e This constructor first builds a URI string from the given components\n according to the rules specified in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e,\n section\u0026nbsp;5.2, step\u0026nbsp;7: \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e Initially, the result string is empty.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a scheme is given then it is appended to the result,\n   followed by a colon character ({@code \u0027:\u0027}).  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If an authority is given then the string {@code \"//\"} is\n   appended, followed by the authority.  If the authority contains a\n   literal IPv6 address then the address must be enclosed in square\n   brackets ({@code \u0027[\u0027} and {@code \u0027]\u0027}).  Any character not in the\n   \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, or \u003ci\u003eother\u003c/i\u003e\n   categories, and not equal to the commercial-at character\n   ({@code \u0027@\u0027}), is \u003ca href\u003d\"#quote\"\u003equoted\u003c/a\u003e.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a path is given then it is appended.  Any character not in\n   the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, or \u003ci\u003eother\u003c/i\u003e\n   categories, and not equal to the slash character ({@code \u0027/\u0027}) or the\n   commercial-at character ({@code \u0027@\u0027}), is quoted.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a query is given then a question-mark character\n   ({@code \u0027?\u0027}) is appended, followed by the query.  Any character that\n   is not a \u003ca href\u003d\"#legal-chars\"\u003elegal URI character\u003c/a\u003e is quoted.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Finally, if a fragment is given then a hash character\n   ({@code \u0027#\u0027}) is appended, followed by the fragment.  Any character\n   that is not a legal URI character is quoted.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e The resulting URI string is then parsed as if by invoking the {@link\n #URI(String)} constructor and then invoking the {@link\n #parseServerAuthority()} method upon the result; this may cause a {@link\n URISyntaxException} to be thrown.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String, String, String)","parameters":[{"name":"scheme","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"authority","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"path","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"query","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fragment","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URI","comment":"Constructs a hierarchical URI from the given components.\n\n \u003cp\u003e A component may be left undefined by passing {@code null}.\n\n \u003cp\u003e This convenience constructor works as if by invoking the\n seven-argument constructor as follows:\n\n \u003cblockquote\u003e\n {@code new} {@link #URI(String, String, String, int, String, String, String)\n URI}{@code (scheme, null, host, -1, path, null, fragment);}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String, String)","parameters":[{"name":"scheme","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"path","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fragment","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URI","comment":"Constructs a URI from the given components.\n\n \u003cp\u003e A component may be left undefined by passing {@code null}.\n\n \u003cp\u003e This constructor first builds a URI in string form using the given\n components as follows:  \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e Initially, the result string is empty.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a scheme is given then it is appended to the result,\n   followed by a colon character ({@code \u0027:\u0027}).  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a scheme-specific part is given then it is appended.  Any\n   character that is not a \u003ca href\u003d\"#legal-chars\"\u003elegal URI character\u003c/a\u003e\n   is \u003ca href\u003d\"#quote\"\u003equoted\u003c/a\u003e.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Finally, if a fragment is given then a hash character\n   ({@code \u0027#\u0027}) is appended to the string, followed by the fragment.\n   Any character that is not a legal URI character is quoted.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e The resulting URI string is then parsed in order to create the new\n URI instance as if by invoking the {@link #URI(String)} constructor;\n this may cause a {@link URISyntaxException} to be thrown.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String)","parameters":[{"name":"scheme","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"ssp","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fragment","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"create","comment":"Creates a URI by parsing the given string.\n\n \u003cp\u003e This convenience factory method works as if by invoking the {@link\n #URI(String)} constructor; any {@link URISyntaxException} thrown by the\n constructor is caught and wrapped in a new {@link\n IllegalArgumentException} object, which is then thrown.\n\n \u003cp\u003e This method is provided for use in situations where it is known that\n the given string is a legal URI, for example for URI constants declared\n within in a program, and so it would be considered a programming error\n for the string not to parse as such.  The constructors, which throw\n {@link URISyntaxException} directly, should be used situations where a\n URI is being constructed from user input or from some other source that\n may be prone to errors.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseServerAuthority","comment":"Attempts to parse this URI\u0027s authority component, if defined, into\n user-information, host, and port components.\n\n \u003cp\u003e If this URI\u0027s authority component has already been recognized as\n being server-based then it will already have been parsed into\n user-information, host, and port components.  In this case, or if this\n URI has no authority component, this method simply returns this URI.\n\n \u003cp\u003e Otherwise this method attempts once more to parse the authority\n component into user-information, host, and port components, and throws\n an exception describing why the authority component could not be parsed\n in that way.\n\n \u003cp\u003e This method is provided because the generic URI syntax specified in\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e\n cannot always distinguish a malformed server-based authority from a\n legitimate registry-based authority.  It must therefore treat some\n instances of the former as instances of the latter.  The authority\n component in the URI string {@code \"//foo:bar\"}, for example, is not a\n legal server-based authority but it is legal as a registry-based\n authority.\n\n \u003cp\u003e In many common situations, for example when working URIs that are\n known to be either URNs or URLs, the hierarchical URIs being used will\n always be server-based.  They therefore must either be parsed as such or\n treated as an error.  In these cases a statement such as\n\n \u003cblockquote\u003e\n {@code URI }\u003ci\u003eu\u003c/i\u003e{@code  \u003d new URI(str).parseServerAuthority();}\n \u003c/blockquote\u003e\n\n \u003cp\u003e can be used to ensure that \u003ci\u003eu\u003c/i\u003e always refers to a URI that, if\n it has an authority component, has a server-based authority with proper\n user-information, host, and port components.  Invoking this method also\n ensures that if the authority could not be parsed in that way then an\n appropriate diagnostic message can be issued based upon the exception\n that is thrown. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"normalize","comment":"Normalizes this URI\u0027s path.\n\n \u003cp\u003e If this URI is opaque, or if its path is already in normal form,\n then this URI is returned.  Otherwise a new URI is constructed that is\n identical to this URI except that its path is computed by normalizing\n this URI\u0027s path in a manner consistent with \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e,\n section\u0026nbsp;5.2, step\u0026nbsp;6, sub-steps\u0026nbsp;c through\u0026nbsp;f; that is:\n \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e All {@code \".\"} segments are removed. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a {@code \"..\"} segment is preceded by a non-{@code \"..\"}\n   segment then both of these segments are removed.  This step is\n   repeated until it is no longer applicable. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If the path is relative, and if its first segment contains a\n   colon character ({@code \u0027:\u0027}), then a {@code \".\"} segment is\n   prepended.  This prevents a relative URI with a path such as\n   {@code \"a:b/c/d\"} from later being re-parsed as an opaque URI with a\n   scheme of {@code \"a\"} and a scheme-specific part of {@code \"b/c/d\"}.\n   \u003cb\u003e\u003ci\u003e(Deviation from RFC\u0026nbsp;2396)\u003c/i\u003e\u003c/b\u003e \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e A normalized path will begin with one or more {@code \"..\"} segments\n if there were insufficient non-{@code \"..\"} segments preceding them to\n allow their removal.  A normalized path will begin with a {@code \".\"}\n segment if one was inserted by step 3 above.  Otherwise, a normalized\n path will not contain any {@code \".\"} or {@code \"..\"} segments. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"resolve","comment":"Resolves the given URI against this URI.\n\n \u003cp\u003e If the given URI is already absolute, or if this URI is opaque, then\n the given URI is returned.\n\n \u003cp\u003e\u003ca name\u003d\"resolve-frag\"\u003e\u003c/a\u003e If the given URI\u0027s fragment component is\n defined, its path component is empty, and its scheme, authority, and\n query components are undefined, then a URI with the given fragment but\n with all other components equal to those of this URI is returned.  This\n allows a URI representing a standalone fragment reference, such as\n {@code \"#foo\"}, to be usefully resolved against a base URI.\n\n \u003cp\u003e Otherwise this method constructs a new hierarchical URI in a manner\n consistent with \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e,\n section\u0026nbsp;5.2; that is: \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e A new URI is constructed with this URI\u0027s scheme and the given\n   URI\u0027s query and fragment components. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If the given URI has an authority component then the new URI\u0027s\n   authority and path are taken from the given URI. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Otherwise the new URI\u0027s authority component is copied from\n   this URI, and its path is computed as follows: \u003c/p\u003e\n\n   \u003col\u003e\n\n     \u003cli\u003e\u003cp\u003e If the given URI\u0027s path is absolute then the new URI\u0027s path\n     is taken from the given URI. \u003c/p\u003e\u003c/li\u003e\n\n     \u003cli\u003e\u003cp\u003e Otherwise the given URI\u0027s path is relative, and so the new\n     URI\u0027s path is computed by resolving the path of the given URI\n     against the path of this URI.  This is done by concatenating all but\n     the last segment of this URI\u0027s path, if any, with the given URI\u0027s\n     path and then normalizing the result as if by invoking the {@link\n     #normalize() normalize} method. \u003c/p\u003e\u003c/li\u003e\n\n   \u003c/ol\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e The result of this method is absolute if, and only if, either this\n URI is absolute or the given URI is absolute.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URI)","flatSignature":"(URI)","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"uri","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"resolve","comment":"Constructs a new URI by parsing the given string and then resolving it\n against this URI.\n\n \u003cp\u003e This convenience method works as if invoking it were equivalent to\n evaluating the expression {@link #resolve(java.net.URI)\n resolve}{@code (URI.}{@link #create(String) create}{@code (str))}. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"relativize","comment":"Relativizes the given URI against this URI.\n\n \u003cp\u003e The relativization of the given URI against this URI is computed as\n follows: \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e If either this URI or the given URI are opaque, or if the\n   scheme and authority components of the two URIs are not identical, or\n   if the path of this URI is not a prefix of the path of the given URI,\n   then the given URI is returned. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Otherwise a new relative hierarchical URI is constructed with\n   query and fragment components taken from the given URI and with a path\n   component computed by removing this URI\u0027s path from the beginning of\n   the given URI\u0027s path. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URI)","flatSignature":"(URI)","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"uri","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toURL","comment":"Constructs a URL from this URI.\n\n \u003cp\u003e This convenience method works as if invoking it were equivalent to\n evaluating the expression {@code new URL(this.toString())} after\n first checking that this URI is absolute. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getScheme","comment":"Returns the scheme component of this URI.\n\n \u003cp\u003e The scheme component of a URI, if defined, only contains characters\n in the \u003ci\u003ealphanum\u003c/i\u003e category and in the string {@code \"-.+\"}.  A\n scheme always starts with an \u003ci\u003ealpha\u003c/i\u003e character. \u003cp\u003e\n\n The scheme component of a URI cannot contain escaped octets, hence this\n method does not perform any decoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAbsolute","comment":"Tells whether or not this URI is absolute.\n\n \u003cp\u003e A URI is absolute if, and only if, it has a scheme component. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isOpaque","comment":"Tells whether or not this URI is opaque.\n\n \u003cp\u003e A URI is opaque if, and only if, it is absolute and its\n scheme-specific part does not begin with a slash character (\u0027/\u0027).\n An opaque URI has a scheme, a scheme-specific part, and possibly\n a fragment; all other components are undefined. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRawSchemeSpecificPart","comment":"Returns the raw scheme-specific part of this URI.  The scheme-specific\n part is never undefined, though it may be empty.\n\n \u003cp\u003e The scheme-specific part of a URI only contains legal URI\n characters. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSchemeSpecificPart","comment":"Returns the decoded scheme-specific part of this URI.\n\n \u003cp\u003e The string returned by this method is equal to that returned by the\n {@link #getRawSchemeSpecificPart() getRawSchemeSpecificPart} method\n except that all sequences of escaped octets are \u003ca\n href\u003d\"#decode\"\u003edecoded\u003c/a\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRawAuthority","comment":"Returns the raw authority component of this URI.\n\n \u003cp\u003e The authority component of a URI, if defined, only contains the\n commercial-at character ({@code \u0027@\u0027}) and characters in the\n \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, and \u003ci\u003eother\u003c/i\u003e\n categories.  If the authority is server-based then it is further\n constrained to have valid user-information, host, and port\n components. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAuthority","comment":"Returns the decoded authority component of this URI.\n\n \u003cp\u003e The string returned by this method is equal to that returned by the\n {@link #getRawAuthority() getRawAuthority} method except that all\n sequences of escaped octets are \u003ca href\u003d\"#decode\"\u003edecoded\u003c/a\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRawUserInfo","comment":"Returns the raw user-information component of this URI.\n\n \u003cp\u003e The user-information component of a URI, if defined, only contains\n characters in the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e, and\n \u003ci\u003eother\u003c/i\u003e categories. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUserInfo","comment":"Returns the decoded user-information component of this URI.\n\n \u003cp\u003e The string returned by this method is equal to that returned by the\n {@link #getRawUserInfo() getRawUserInfo} method except that all\n sequences of escaped octets are \u003ca href\u003d\"#decode\"\u003edecoded\u003c/a\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHost","comment":"Returns the host component of this URI.\n\n \u003cp\u003e The host component of a URI, if defined, will have one of the\n following forms: \u003c/p\u003e\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e A domain name consisting of one or more \u003ci\u003elabels\u003c/i\u003e\n   separated by period characters ({@code \u0027.\u0027}), optionally followed by\n   a period character.  Each label consists of \u003ci\u003ealphanum\u003c/i\u003e characters\n   as well as hyphen characters ({@code \u0027-\u0027}), though hyphens never\n   occur as the first or last characters in a label. The rightmost\n   label of a domain name consisting of two or more labels, begins\n   with an \u003ci\u003ealpha\u003c/i\u003e character. \u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A dotted-quad IPv4 address of the form\n   \u003ci\u003edigit\u003c/i\u003e{@code +.}\u003ci\u003edigit\u003c/i\u003e{@code +.}\u003ci\u003edigit\u003c/i\u003e{@code +.}\u003ci\u003edigit\u003c/i\u003e{@code +},\n   where no \u003ci\u003edigit\u003c/i\u003e sequence is longer than three characters and no\n   sequence has a value larger than 255. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e An IPv6 address enclosed in square brackets ({@code \u0027[\u0027} and\n   {@code \u0027]\u0027}) and consisting of hexadecimal digits, colon characters\n   ({@code \u0027:\u0027}), and possibly an embedded IPv4 address.  The full\n   syntax of IPv6 addresses is specified in \u003ca\n   href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2373: IPv6\n   Addressing Architecture\u003c/i\u003e\u003c/a\u003e.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n The host component of a URI cannot contain escaped octets, hence this\n method does not perform any decoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPort","comment":"Returns the port number of this URI.\n\n \u003cp\u003e The port component of a URI, if defined, is a non-negative\n integer. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRawPath","comment":"Returns the raw path component of this URI.\n\n \u003cp\u003e The path component of a URI, if defined, only contains the slash\n character ({@code \u0027/\u0027}), the commercial-at character ({@code \u0027@\u0027}),\n and characters in the \u003ci\u003eunreserved\u003c/i\u003e, \u003ci\u003epunct\u003c/i\u003e, \u003ci\u003eescaped\u003c/i\u003e,\n and \u003ci\u003eother\u003c/i\u003e categories. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPath","comment":"Returns the decoded path component of this URI.\n\n \u003cp\u003e The string returned by this method is equal to that returned by the\n {@link #getRawPath() getRawPath} method except that all sequences of\n escaped octets are \u003ca href\u003d\"#decode\"\u003edecoded\u003c/a\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRawQuery","comment":"Returns the raw query component of this URI.\n\n \u003cp\u003e The query component of a URI, if defined, only contains legal URI\n characters. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQuery","comment":"Returns the decoded query component of this URI.\n\n \u003cp\u003e The string returned by this method is equal to that returned by the\n {@link #getRawQuery() getRawQuery} method except that all sequences of\n escaped octets are \u003ca href\u003d\"#decode\"\u003edecoded\u003c/a\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRawFragment","comment":"Returns the raw fragment component of this URI.\n\n \u003cp\u003e The fragment component of a URI, if defined, only contains legal URI\n characters. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFragment","comment":"Returns the decoded fragment component of this URI.\n\n \u003cp\u003e The string returned by this method is equal to that returned by the\n {@link #getRawFragment() getRawFragment} method except that all\n sequences of escaped octets are \u003ca href\u003d\"#decode\"\u003edecoded\u003c/a\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Tests this URI for equality with another object.\n\n \u003cp\u003e If the given object is not a URI then this method immediately\n returns {@code false}.\n\n \u003cp\u003e For two URIs to be considered equal requires that either both are\n opaque or both are hierarchical.  Their schemes must either both be\n undefined or else be equal without regard to case. Their fragments\n must either both be undefined or else be equal.\n\n \u003cp\u003e For two opaque URIs to be considered equal, their scheme-specific\n parts must be equal.\n\n \u003cp\u003e For two hierarchical URIs to be considered equal, their paths must\n be equal and their queries must either both be undefined or else be\n equal.  Their authorities must either both be undefined, or both be\n registry-based, or both be server-based.  If their authorities are\n defined and are registry-based, then they must be equal.  If their\n authorities are defined and are server-based, then their hosts must be\n equal without regard to case, their port numbers must be equal, and\n their user-information components must be equal.\n\n \u003cp\u003e When testing the user-information, path, query, fragment, authority,\n or scheme-specific parts of two URIs for equality, the raw forms rather\n than the encoded forms of these components are compared and the\n hexadecimal digits of escaped octets are compared without regard to\n case.\n\n \u003cp\u003e This method satisfies the general contract of the {@link\n java.lang.Object#equals(Object) Object.equals} method. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ob","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash-code value for this URI.  The hash code is based upon all\n of the URI\u0027s components, and satisfies the general contract of the\n {@link java.lang.Object#hashCode() Object.hashCode} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares this URI to another object, which must be a URI.\n\n \u003cp\u003e When comparing corresponding components of two URIs, if one\n component is undefined but the other is defined then the first is\n considered to be less than the second.  Unless otherwise noted, string\n components are ordered according to their natural, case-sensitive\n ordering as defined by the {@link java.lang.String#compareTo(Object)\n String.compareTo} method.  String components that are subject to\n encoding are compared by comparing their raw forms rather than their\n encoded forms.\n\n \u003cp\u003e The ordering of URIs is defined as follows: \u003c/p\u003e\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e Two URIs with different schemes are ordered according the\n   ordering of their schemes, without regard to case. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A hierarchical URI is considered to be less than an opaque URI\n   with an identical scheme. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Two opaque URIs with identical schemes are ordered according\n   to the ordering of their scheme-specific parts. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Two opaque URIs with identical schemes and scheme-specific\n   parts are ordered according to the ordering of their\n   fragments. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Two hierarchical URIs with identical schemes are ordered\n   according to the ordering of their authority components: \u003c/p\u003e\n\n   \u003cul\u003e\n\n     \u003cli\u003e\u003cp\u003e If both authority components are server-based then the URIs\n     are ordered according to their user-information components; if these\n     components are identical then the URIs are ordered according to the\n     ordering of their hosts, without regard to case; if the hosts are\n     identical then the URIs are ordered according to the ordering of\n     their ports. \u003c/p\u003e\u003c/li\u003e\n\n     \u003cli\u003e\u003cp\u003e If one or both authority components are registry-based then\n     the URIs are ordered according to the ordering of their authority\n     components. \u003c/p\u003e\u003c/li\u003e\n\n   \u003c/ul\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Finally, two hierarchical URIs with identical schemes and\n   authority components are ordered according to the ordering of their\n   paths; if their paths are identical then they are ordered according to\n   the ordering of their queries; if the queries are identical then they\n   are ordered according to the order of their fragments. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e This method satisfies the general contract of the {@link\n java.lang.Comparable#compareTo(Object) Comparable.compareTo}\n method. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URI)","flatSignature":"(URI)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"that","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns the content of this URI as a string.\n\n \u003cp\u003e If this URI was created by invoking one of the constructors in this\n class then a string equivalent to the original input string, or to the\n string computed from the originally-given components, as appropriate, is\n returned.  Otherwise this URI was created by normalization, resolution,\n or relativization, and so a string is constructed from this URI\u0027s\n components according to the rules specified in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003eRFC\u0026nbsp;2396\u003c/a\u003e,\n section\u0026nbsp;5.2, step\u0026nbsp;7. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toASCIIString","comment":"Returns the content of this URI as a US-ASCII string.\n\n \u003cp\u003e If this URI does not contain any characters in the \u003ci\u003eother\u003c/i\u003e\n category then an invocation of this method will return the same value as\n an invocation of the {@link #toString() toString} method.  Otherwise\n this method works as if by invoking that method and then \u003ca\n href\u003d\"#encode\"\u003eencoding\u003c/a\u003e the result.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}