{"name":"InetSocketAddress","comment":"This class implements an IP Socket Address (IP address + port number)\n It can also be a pair (hostname + port number), in which case an attempt\n will be made to resolve the hostname. If resolution fails then the address\n is said to be \u003cI\u003eunresolved\u003c/I\u003e but can still be used on some circumstances\n like connecting through a proxy.\n \u003cp\u003e\n It provides an immutable object used by sockets for binding, connecting, or\n as returned values.\n \u003cp\u003e\n The \u003ci\u003ewildcard\u003c/i\u003e is a special local IP address. It usually means \"any\"\n and can only be used for {@code bind} operations.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"InetSocketAddress","qualifiedName":"java.net.InetSocketAddress","dimension":"","elementType":{},"package":"java.net","superclass":"java.net.SocketAddress","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"InetSocketAddress","comment":"Creates a socket address where the IP address is the wildcard address\n and the port number a specified value.\n \u003cp\u003e\n A valid port value is between 0 and 65535.\n A port number of {@code zero} will let the system pick up an\n ephemeral port in a {@code bind} operation.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"InetSocketAddress","comment":"Creates a socket address from an IP address and a port number.\n \u003cp\u003e\n A valid port value is between 0 and 65535.\n A port number of {@code zero} will let the system pick up an\n ephemeral port in a {@code bind} operation.\n \u003cP\u003e\n A {@code null} address will assign the \u003ci\u003ewildcard\u003c/i\u003e address.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, int)","flatSignature":"(InetAddress, int)","parameters":[{"name":"addr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"InetSocketAddress","comment":"Creates a socket address from a hostname and a port number.\n \u003cp\u003e\n An attempt will be made to resolve the hostname into an InetAddress.\n If that attempt fails, the address will be flagged as \u003cI\u003eunresolved\u003c/I\u003e.\n \u003cp\u003e\n If there is a security manager, its {@code checkConnect} method\n is called with the host name as its argument to check the permission\n to resolve it. This could result in a SecurityException.\n \u003cP\u003e\n A valid port value is between 0 and 65535.\n A port number of {@code zero} will let the system pick up an\n ephemeral port in a {@code bind} operation.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","parameters":[{"name":"hostname","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"createUnresolved","comment":"Creates an unresolved socket address from a hostname and a port number.\n \u003cp\u003e\n No attempt will be made to resolve the hostname into an InetAddress.\n The address will be flagged as \u003cI\u003eunresolved\u003c/I\u003e.\n \u003cp\u003e\n A valid port value is between 0 and 65535.\n A port number of {@code zero} will let the system pick up an\n ephemeral port in a {@code bind} operation.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"InetSocketAddress","qualifiedName":"java.net.InetSocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPort","comment":"Gets the port number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAddress","comment":"Gets the {@code InetAddress}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHostName","comment":"Gets the {@code hostname}.\n Note: This method may trigger a name service reverse lookup if the\n address was created with a literal IP address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHostString","comment":"Returns the hostname, or the String form of the address if it\n doesn\u0027t have a hostname (it was created using a literal).\n This has the benefit of \u003cb\u003enot\u003c/b\u003e attempting a reverse lookup.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isUnresolved","comment":"Checks whether the address has been resolved or not.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Constructs a string representation of this InetSocketAddress.\n This String is constructed by calling toString() on the InetAddress\n and concatenating the port number (with a colon). If the address\n is unresolved then the part before the colon will only contain the hostname.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object against the specified object.\n The result is {@code true} if and only if the argument is\n not {@code null} and it represents the same address as\n this object.\n \u003cp\u003e\n Two instances of {@code InetSocketAddress} represent the same\n address if both the InetAddresses (or hostnames if it is unresolved) and port\n numbers are equal.\n If both addresses are unresolved, then the hostname and the port number\n are compared.\n\n Note: Hostnames are case insensitive. e.g. \"FooBar\" and \"foobar\" are\n considered equal.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode for this socket address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}