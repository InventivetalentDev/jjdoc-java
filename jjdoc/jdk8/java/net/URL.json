{"name":"URL","comment":"Class {@code URL} represents a Uniform Resource\n Locator, a pointer to a \"resource\" on the World\n Wide Web. A resource can be something as simple as a file or a\n directory, or it can be a reference to a more complicated object,\n such as a query to a database or to a search engine. More\n information on the types of URLs and their formats can be found at:\n \u003ca href\u003d\n \"http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html\"\u003e\n \u003ci\u003eTypes of URL\u003c/i\u003e\u003c/a\u003e\n \u003cp\u003e\n In general, a URL can be broken into several parts. Consider the\n following example:\n \u003cblockquote\u003e\u003cpre\u003e\n     http://www.example.com/docs/resource1.html\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The URL above indicates that the protocol to use is\n {@code http} (HyperText Transfer Protocol) and that the\n information resides on a host machine named\n {@code www.example.com}. The information on that host\n machine is named {@code /docs/resource1.html}. The exact\n meaning of this name on the host machine is both protocol\n dependent and host dependent. The information normally resides in\n a file, but it could be generated on the fly. This component of\n the URL is called the \u003ci\u003epath\u003c/i\u003e component.\n \u003cp\u003e\n A URL can optionally specify a \"port\", which is the\n port number to which the TCP connection is made on the remote host\n machine. If the port is not specified, the default port for\n the protocol is used instead. For example, the default port for\n {@code http} is {@code 80}. An alternative port could be\n specified as:\n \u003cblockquote\u003e\u003cpre\u003e\n     http://www.example.com:1080/docs/resource1.html\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The syntax of {@code URL} is defined by  \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2396: Uniform\n Resource Identifiers (URI): Generic Syntax\u003c/i\u003e\u003c/a\u003e, amended by \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2732: Format for\n Literal IPv6 Addresses in URLs\u003c/i\u003e\u003c/a\u003e. The Literal IPv6 address format\n also supports scope_ids. The syntax and usage of scope_ids is described\n \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e.\n \u003cp\u003e\n A URL may have appended to it a \"fragment\", also known\n as a \"ref\" or a \"reference\". The fragment is indicated by the sharp\n sign character \"#\" followed by more characters. For example,\n \u003cblockquote\u003e\u003cpre\u003e\n     http://java.sun.com/index.html#chapter1\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This fragment is not technically part of the URL. Rather, it\n indicates that after the specified resource is retrieved, the\n application is specifically interested in that part of the\n document that has the tag {@code chapter1} attached to it. The\n meaning of a tag is resource specific.\n \u003cp\u003e\n An application can also specify a \"relative URL\",\n which contains only enough information to reach the resource\n relative to another URL. Relative URLs are frequently used within\n HTML pages. For example, if the contents of the URL:\n \u003cblockquote\u003e\u003cpre\u003e\n     http://java.sun.com/index.html\n \u003c/pre\u003e\u003c/blockquote\u003e\n contained within it the relative URL:\n \u003cblockquote\u003e\u003cpre\u003e\n     FAQ.html\n \u003c/pre\u003e\u003c/blockquote\u003e\n it would be a shorthand for:\n \u003cblockquote\u003e\u003cpre\u003e\n     http://java.sun.com/FAQ.html\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The relative URL need not specify all the components of a URL. If\n the protocol, host name, or port number is missing, the value is\n inherited from the fully specified URL. The file component must be\n specified. The optional fragment is not inherited.\n \u003cp\u003e\n The URL class does not itself encode or decode any URL components\n according to the escaping mechanism defined in RFC2396. It is the\n responsibility of the caller to encode any fields, which need to be\n escaped prior to calling URL, and also to decode any escaped fields,\n that are returned from URL. Furthermore, because URL has no knowledge\n of URL escaping, it does not recognise equivalence between the encoded\n or decoded form of the same URL. For example, the two URLs:\u003cbr\u003e\n \u003cpre\u003e    http://foo.com/hello world/ and http://foo.com/hello%20world\u003c/pre\u003e\n would be considered not equal to each other.\n \u003cp\u003e\n Note, the {@link java.net.URI} class does perform escaping of its\n component fields in certain circumstances. The recommended way\n to manage the encoding and decoding of URLs is to use {@link java.net.URI},\n and to convert between these two classes using {@link #toURI()} and\n {@link URI#toURL()}.\n \u003cp\u003e\n The {@link URLEncoder} and {@link URLDecoder} classes can also be\n used, but only for HTML form encoding, which is not the same\n as the encoding scheme defined in RFC2396.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"URL","comment":"Creates a {@code URL} object from the specified\n {@code protocol}, {@code host}, {@code port}\n number, and {@code file}.\u003cp\u003e\n\n {@code host} can be expressed as a host name or a literal\n IP address. If IPv6 literal address is used, it should be\n enclosed in square brackets ({@code \u0027[\u0027} and {@code \u0027]\u0027}), as\n specified by \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003eRFC\u0026nbsp;2732\u003c/a\u003e;\n However, the literal IPv6 address format defined in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2373: IP\n Version 6 Addressing Architecture\u003c/i\u003e\u003c/a\u003e is also accepted.\u003cp\u003e\n\n Specifying a {@code port} number of {@code -1}\n indicates that the URL should use the default port for the\n protocol.\u003cp\u003e\n\n If this is the first URL object being created with the specified\n protocol, a \u003ci\u003estream protocol handler\u003c/i\u003e object, an instance of\n class {@code URLStreamHandler}, is created for that protocol:\n \u003col\u003e\n \u003cli\u003eIf the application has previously set up an instance of\n     {@code URLStreamHandlerFactory} as the stream handler factory,\n     then the {@code createURLStreamHandler} method of that instance\n     is called with the protocol string as an argument to create the\n     stream protocol handler.\n \u003cli\u003eIf no {@code URLStreamHandlerFactory} has yet been set up,\n     or if the factory\u0027s {@code createURLStreamHandler} method\n     returns {@code null}, then the constructor finds the\n     value of the system property:\n     \u003cblockquote\u003e\u003cpre\u003e\n         java.protocol.handler.pkgs\n     \u003c/pre\u003e\u003c/blockquote\u003e\n     If the value of that system property is not {@code null},\n     it is interpreted as a list of packages separated by a vertical\n     slash character \u0027{@code |}\u0027. The constructor tries to load\n     the class named:\n     \u003cblockquote\u003e\u003cpre\u003e\n         \u0026lt;\u003ci\u003epackage\u003c/i\u003e\u0026gt;.\u0026lt;\u003ci\u003eprotocol\u003c/i\u003e\u0026gt;.Handler\n     \u003c/pre\u003e\u003c/blockquote\u003e\n     where \u0026lt;\u003ci\u003epackage\u003c/i\u003e\u0026gt; is replaced by the name of the package\n     and \u0026lt;\u003ci\u003eprotocol\u003c/i\u003e\u0026gt; is replaced by the name of the protocol.\n     If this class does not exist, or if the class exists but it is not\n     a subclass of {@code URLStreamHandler}, then the next package\n     in the list is tried.\n \u003cli\u003eIf the previous step fails to find a protocol handler, then the\n     constructor tries to load from a system default package.\n     \u003cblockquote\u003e\u003cpre\u003e\n         \u0026lt;\u003ci\u003esystem default package\u003c/i\u003e\u0026gt;.\u0026lt;\u003ci\u003eprotocol\u003c/i\u003e\u0026gt;.Handler\n     \u003c/pre\u003e\u003c/blockquote\u003e\n     If this class does not exist, or if the class exists but it is not a\n     subclass of {@code URLStreamHandler}, then a\n     {@code MalformedURLException} is thrown.\n \u003c/ol\u003e\n\n \u003cp\u003eProtocol handlers for the following protocols are guaranteed\n to exist on the search path :-\n \u003cblockquote\u003e\u003cpre\u003e\n     http, https, file, and jar\n \u003c/pre\u003e\u003c/blockquote\u003e\n Protocol handlers for additional protocols may also be\n available.\n\n \u003cp\u003eNo validation of the inputs is performed by this constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, int, java.lang.String)","flatSignature":"(String, String, int, String)","parameters":[{"name":"protocol","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URL","comment":"Creates a URL from the specified {@code protocol}\n name, {@code host} name, and {@code file} name. The\n default port for the specified protocol is used.\n \u003cp\u003e\n This method is equivalent to calling the four-argument\n constructor with the arguments being {@code protocol},\n {@code host}, {@code -1}, and {@code file}.\n\n No validation of the inputs is performed by this constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String)","parameters":[{"name":"protocol","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URL","comment":"Creates a {@code URL} object from the specified\n {@code protocol}, {@code host}, {@code port}\n number, {@code file}, and {@code handler}. Specifying\n a {@code port} number of {@code -1} indicates that\n the URL should use the default port for the protocol. Specifying\n a {@code handler} of {@code null} indicates that the URL\n should use a default stream handler for the protocol, as outlined\n for:\n     java.net.URL#URL(java.lang.String, java.lang.String, int,\n                      java.lang.String)\n\n \u003cp\u003eIf the handler is not null and there is a security manager,\n the security manager\u0027s {@code checkPermission}\n method is called with a\n {@code NetPermission(\"specifyStreamHandler\")} permission.\n This may result in a SecurityException.\n\n No validation of the inputs is performed by this constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, int, java.lang.String, java.net.URLStreamHandler)","flatSignature":"(String, String, int, String, URLStreamHandler)","parameters":[{"name":"protocol","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"URLStreamHandler","qualifiedName":"java.net.URLStreamHandler","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URL","comment":"Creates a {@code URL} object from the {@code String}\n representation.\n \u003cp\u003e\n This constructor is equivalent to a call to the two-argument\n constructor with a {@code null} first argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"spec","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URL","comment":"Creates a URL by parsing the given spec within a specified context.\n\n The new URL is created from the given context URL and the spec\n argument as described in\n RFC2396 \u0026quot;Uniform Resource Identifiers : Generic * Syntax\u0026quot; :\n \u003cblockquote\u003e\u003cpre\u003e\n          \u0026lt;scheme\u0026gt;://\u0026lt;authority\u0026gt;\u0026lt;path\u0026gt;?\u0026lt;query\u0026gt;#\u0026lt;fragment\u0026gt;\n \u003c/pre\u003e\u003c/blockquote\u003e\n The reference is parsed into the scheme, authority, path, query and\n fragment parts. If the path component is empty and the scheme,\n authority, and query components are undefined, then the new URL is a\n reference to the current document. Otherwise, the fragment and query\n parts present in the spec are used in the new URL.\n \u003cp\u003e\n If the scheme component is defined in the given spec and does not match\n the scheme of the context, then the new URL is created as an absolute\n URL based on the spec alone. Otherwise the scheme component is inherited\n from the context URL.\n \u003cp\u003e\n If the authority component is present in the spec then the spec is\n treated as absolute and the spec authority and path will replace the\n context authority and path. If the authority component is absent in the\n spec then the authority of the new URL will be inherited from the\n context.\n \u003cp\u003e\n If the spec\u0027s path component begins with a slash character\n \u0026quot;/\u0026quot; then the\n path is treated as absolute and the spec path replaces the context path.\n \u003cp\u003e\n Otherwise, the path is treated as a relative path and is appended to the\n context path, as described in RFC2396. Also, in this case,\n the path is canonicalized through the removal of directory\n changes made by occurrences of \u0026quot;..\u0026quot; and \u0026quot;.\u0026quot;.\n \u003cp\u003e\n For a more detailed description of URL parsing, refer to RFC2396.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.URL, java.lang.String)","flatSignature":"(URL, String)","parameters":[{"name":"context","type":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}}},{"name":"spec","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URL","comment":"Creates a URL by parsing the given spec with the specified handler\n within a specified context. If the handler is null, the parsing\n occurs as with the two argument constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.URL, java.lang.String, java.net.URLStreamHandler)","flatSignature":"(URL, String, URLStreamHandler)","parameters":[{"name":"context","type":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}}},{"name":"spec","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"URLStreamHandler","qualifiedName":"java.net.URLStreamHandler","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getQuery","comment":"Gets the query part of this {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPath","comment":"Gets the path part of this {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUserInfo","comment":"Gets the userInfo part of this {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAuthority","comment":"Gets the authority part of this {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPort","comment":"Gets the port number of this {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDefaultPort","comment":"Gets the default port number of the protocol associated\n with this {@code URL}. If the URL scheme or the URLStreamHandler\n for the URL do not define a default port number,\n then -1 is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getProtocol","comment":"Gets the protocol name of this {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHost","comment":"Gets the host name of this {@code URL}, if applicable.\n The format of the host conforms to RFC 2732, i.e. for a\n literal IPv6 address, this method will return the IPv6 address\n enclosed in square brackets ({@code \u0027[\u0027} and {@code \u0027]\u0027}).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFile","comment":"Gets the file name of this {@code URL}.\n The returned file portion will be\n the same as \u003cCODE\u003egetPath()\u003c/CODE\u003e, plus the concatenation of\n the value of \u003cCODE\u003egetQuery()\u003c/CODE\u003e, if any. If there is\n no query portion, this method and \u003cCODE\u003egetPath()\u003c/CODE\u003e will\n return identical results.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRef","comment":"Gets the anchor (also known as the \"reference\") of this\n {@code URL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this URL for equality with another object.\u003cp\u003e\n\n If the given object is not a URL then this method immediately returns\n {@code false}.\u003cp\u003e\n\n Two URL objects are equal if they have the same protocol, reference\n equivalent hosts, have the same port number on the host, and the same\n file and fragment of the file.\u003cp\u003e\n\n Two hosts are considered equivalent if both host names can be resolved\n into the same IP addresses; else if either host name can\u0027t be\n resolved, the host names must be equal without regard to case; or both\n host names equal to null.\u003cp\u003e\n\n Since hosts comparison requires name resolution, this operation is a\n blocking operation. \u003cp\u003e\n\n Note: The defined behavior for {@code equals} is known to\n be inconsistent with virtual hosting in HTTP.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Creates an integer suitable for hash table indexing.\u003cp\u003e\n\n The hash code is based upon all the URL components relevant for URL\n comparison. As such, this operation is a blocking operation.\u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sameFile","comment":"Compares two URLs, excluding the fragment component.\u003cp\u003e\n\n Returns {@code true} if this {@code URL} and the\n {@code other} argument are equal without taking the\n fragment component into consideration.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URL)","flatSignature":"(URL)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Constructs a string representation of this {@code URL}. The\n string is created by calling the {@code toExternalForm}\n method of the stream protocol handler for this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toExternalForm","comment":"Constructs a string representation of this {@code URL}. The\n string is created by calling the {@code toExternalForm}\n method of the stream protocol handler for this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toURI","comment":"Returns a {@link java.net.URI} equivalent to this URL.\n This method functions in the same way as {@code new URI (this.toString())}.\n \u003cp\u003eNote, any URL instance that complies with RFC 2396 can be converted\n to a URI. However, some URLs that are not strictly in compliance\n can not be converted to a URI.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"openConnection","comment":"Returns a {@link java.net.URLConnection URLConnection} instance that\n represents a connection to the remote object referred to by the\n {@code URL}.\n\n \u003cP\u003eA new instance of {@linkplain java.net.URLConnection URLConnection} is\n created every time when invoking the\n {@linkplain java.net.URLStreamHandler#openConnection(URL)\n URLStreamHandler.openConnection(URL)} method of the protocol handler for\n this URL.\u003c/P\u003e\n\n \u003cP\u003eIt should be noted that a URLConnection instance does not establish\n the actual network connection on creation. This will happen only when\n calling {@linkplain java.net.URLConnection#connect() URLConnection.connect()}.\u003c/P\u003e\n\n \u003cP\u003eIf for the URL\u0027s protocol (such as HTTP or JAR), there\n exists a public, specialized URLConnection subclass belonging\n to one of the following packages or one of their subpackages:\n java.lang, java.io, java.util, java.net, the connection\n returned will be of that subclass. For example, for HTTP an\n HttpURLConnection will be returned, and for JAR a\n JarURLConnection will be returned.\u003c/P\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"URLConnection","qualifiedName":"java.net.URLConnection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"openConnection","comment":"Same as {@link #openConnection()}, except that the connection will be\n made through the specified proxy; Protocol handlers that do not\n support proxing will ignore the proxy parameter and make a\n normal connection.\n\n Invoking this method preempts the system\u0027s default ProxySelector\n settings.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.Proxy)","flatSignature":"(Proxy)","returnType":{"isPrimitive":false,"simpleName":"URLConnection","qualifiedName":"java.net.URLConnection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"proxy","type":{"isPrimitive":false,"simpleName":"Proxy","qualifiedName":"java.net.Proxy","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"openStream","comment":"Opens a connection to this {@code URL} and returns an\n {@code InputStream} for reading from that connection. This\n method is a shorthand for:\n \u003cblockquote\u003e\u003cpre\u003e\n     openConnection().getInputStream()\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getContent","comment":"Gets the contents of this URL. This method is a shorthand for:\n \u003cblockquote\u003e\u003cpre\u003e\n     openConnection().getContent()\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getContent","comment":"Gets the contents of this URL. This method is a shorthand for:\n \u003cblockquote\u003e\u003cpre\u003e\n     openConnection().getContent(Class[])\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class[])","flatSignature":"(Class[])","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"classes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setURLStreamHandlerFactory","comment":"Sets an application\u0027s {@code URLStreamHandlerFactory}.\n This method can be called at most once in a given Java Virtual\n Machine.\n\n\u003cp\u003e The {@code URLStreamHandlerFactory} instance is used to\nconstruct a stream protocol handler from a protocol name.\n\n \u003cp\u003e If there is a security manager, this method first calls\n the security manager\u0027s {@code checkSetFactory} method\n to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URLStreamHandlerFactory)","flatSignature":"(URLStreamHandlerFactory)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"fac","type":{"isPrimitive":false,"simpleName":"URLStreamHandlerFactory","qualifiedName":"java.net.URLStreamHandlerFactory","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}