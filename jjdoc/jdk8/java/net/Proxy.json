{"name":"Proxy","comment":"This class represents a proxy setting, typically a type (http, socks) and\n a socket address.\n A {@code Proxy} is an immutable object.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Proxy","qualifiedName":"java.net.Proxy","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":["java.net.Proxy.Type"],"isInnerClass":false,"constructors":[{"name":"Proxy","comment":"Creates an entry representing a PROXY connection.\n Certain combinations are illegal. For instance, for types Http, and\n Socks, a SocketAddress \u003cb\u003emust\u003c/b\u003e be provided.\n \u003cP\u003e\n Use the {@code Proxy.NO_PROXY} constant\n for representing a direct connection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.Proxy.Type, java.net.SocketAddress)","flatSignature":"(Proxy.Type, SocketAddress)","parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.net.Proxy.Type","dimension":"","elementType":{}}},{"name":"sa","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"NO_PROXY","comment":"A proxy setting that represents a {@code DIRECT} connection,\n basically telling the protocol handler not to use any proxying.\n Used, for instance, to create sockets bypassing any other global\n proxy settings (like SOCKS):\n \u003cP\u003e\n {@code Socket s \u003d new Socket(Proxy.NO_PROXY);}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Proxy","qualifiedName":"java.net.Proxy","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"type","comment":"Returns the proxy type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.net.Proxy.Type","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"address","comment":"Returns the socket address of the proxy, or\n {@code null} if its a direct connection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Constructs a string representation of this Proxy.\n This String is constructed by calling toString() on its type\n and concatenating \" @ \" and the toString() result from its address\n if its type is not {@code DIRECT}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object against the specified object.\n The result is {@code true} if and only if the argument is\n not {@code null} and it represents the same proxy as\n this object.\n \u003cp\u003e\n Two instances of {@code Proxy} represent the same\n address if both the SocketAddresses and type are equal.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode for this Proxy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}