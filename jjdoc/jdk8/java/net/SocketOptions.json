{"name":"SocketOptions","comment":"Interface of methods to get/set socket options.  This interface is\n implemented by: \u003cB\u003eSocketImpl\u003c/B\u003e and  \u003cB\u003eDatagramSocketImpl\u003c/B\u003e.\n Subclasses of these should override the methods\n of this interface in order to support their own options.\n \u003cP\u003e\n The methods and constants which specify options in this interface are\n for implementation only.  If you\u0027re not subclassing SocketImpl or\n DatagramSocketImpl, \u003cB\u003eyou won\u0027t use these directly.\u003c/B\u003e There are\n type-safe methods to get/set each of these options in Socket, ServerSocket,\n DatagramSocket and MulticastSocket.\n \u003cP\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"SocketOptions","qualifiedName":"java.net.SocketOptions","dimension":"","elementType":{},"package":"java.net","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"TCP_NODELAY","comment":"Disable Nagle\u0027s algorithm for this connection.  Written data\n to the network is not buffered pending acknowledgement of\n previously written data.\n\u003cP\u003e\n Valid for TCP only: SocketImpl.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"SO_BINDADDR","comment":"Fetch the local address binding of a socket (this option cannot\n be \"set\" only \"gotten\", since sockets are bound at creation time,\n and so the locally bound address cannot be changed).  The default local\n address of a socket is INADDR_ANY, meaning any local address on a\n multi-homed host.  A multi-homed host can use this option to accept\n connections to only one of its addresses (in the case of a\n ServerSocket or DatagramSocket), or to specify its return address\n to the peer (for a Socket or DatagramSocket).  The parameter of\n this option is an InetAddress.\n \u003cP\u003e\n This option \u003cB\u003emust\u003c/B\u003e be specified in the constructor.\n \u003cP\u003e\n Valid for: SocketImpl, DatagramSocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"15"},{"name":"SO_REUSEADDR","comment":"Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets\n in java, and it is set by default for MulticastSockets.\n \u003cP\u003e\n Valid for: DatagramSocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"SO_BROADCAST","comment":"Sets SO_BROADCAST for a socket. This option enables and disables\n the ability of the process to send broadcast messages. It is supported\n for only datagram sockets and only on networks that support\n the concept of a broadcast message (e.g. Ethernet, token ring, etc.),\n and it is set by default for DatagramSockets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32"},{"name":"IP_MULTICAST_IF","comment":"Set which outgoing interface on which to send multicast packets.\n Useful on hosts with multiple network interfaces, where applications\n want to use other than the system default.  Takes/returns an InetAddress.\n \u003cP\u003e\n Valid for Multicast: DatagramSocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"IP_MULTICAST_IF2","comment":"Same as above. This option is introduced so that the behaviour\n  with IP_MULTICAST_IF will be kept the same as before, while\n  this new option can support setting outgoing interfaces with either\n  IPv4 and IPv6 addresses.\n\n  NOTE: make sure there is no conflict with this","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"31"},{"name":"IP_MULTICAST_LOOP","comment":"This option enables or disables local loopback of multicast datagrams.\n This option is enabled by default for Multicast Sockets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"18"},{"name":"IP_TOS","comment":"This option sets the type-of-service or traffic class field\n in the IP header for a TCP or UDP socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"SO_LINGER","comment":"Specify a linger-on-close timeout.  This option disables/enables\n immediate return from a \u003cB\u003eclose()\u003c/B\u003e of a TCP Socket.  Enabling\n this option with a non-zero Integer \u003cI\u003etimeout\u003c/I\u003e means that a\n \u003cB\u003eclose()\u003c/B\u003e will block pending the transmission and acknowledgement\n of all data written to the peer, at which point the socket is closed\n \u003cI\u003egracefully\u003c/I\u003e.  Upon reaching the linger timeout, the socket is\n closed \u003cI\u003eforcefully\u003c/I\u003e, with a TCP RST. Enabling the option with a\n timeout of zero does a forceful close immediately. If the specified\n timeout value exceeds 65,535 it will be reduced to 65,535.\n \u003cP\u003e\n Valid only for TCP: SocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"128"},{"name":"SO_TIMEOUT","comment":"Set a timeout on blocking Socket operations:\n \u003cPRE\u003e\n ServerSocket.accept();\n SocketInputStream.read();\n DatagramSocket.receive();\n \u003c/PRE\u003e\n\n \u003cP\u003e The option must be set prior to entering a blocking\n operation to take effect.  If the timeout expires and the\n operation would continue to block,\n \u003cB\u003ejava.io.InterruptedIOException\u003c/B\u003e is raised.  The Socket is\n not closed in this case.\n\n \u003cP\u003e Valid for all sockets: SocketImpl, DatagramSocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4102"},{"name":"SO_SNDBUF","comment":"Set a hint the size of the underlying buffers used by the\n platform for outgoing network I/O. When used in set, this is a\n suggestion to the kernel from the application about the size of\n buffers to use for the data to be sent over the socket. When\n used in get, this must return the size of the buffer actually\n used by the platform when sending out data on this socket.\n\n Valid for all sockets: SocketImpl, DatagramSocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4097"},{"name":"SO_RCVBUF","comment":"Set a hint the size of the underlying buffers used by the\n platform for incoming network I/O. When used in set, this is a\n suggestion to the kernel from the application about the size of\n buffers to use for the data to be received over the\n socket. When used in get, this must return the size of the\n buffer actually used by the platform when receiving in data on\n this socket.\n\n Valid for all sockets: SocketImpl, DatagramSocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4098"},{"name":"SO_KEEPALIVE","comment":"When the keepalive option is set for a TCP socket and no data\n has been exchanged across the socket in either direction for\n 2 hours (NOTE: the actual value is implementation dependent),\n TCP automatically sends a keepalive probe to the peer. This probe is a\n TCP segment to which the peer must respond.\n One of three responses is expected:\n 1. The peer responds with the expected ACK. The application is not\n    notified (since everything is OK). TCP will send another probe\n    following another 2 hours of inactivity.\n 2. The peer responds with an RST, which tells the local TCP that\n    the peer host has crashed and rebooted. The socket is closed.\n 3. There is no response from the peer. The socket is closed.\n\n The purpose of this option is to detect if the peer host crashes.\n\n Valid only for TCP socket: SocketImpl","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"SO_OOBINLINE","comment":"When the OOBINLINE option is set, any TCP urgent data received on\n the socket will be received through the socket input stream.\n When the option is disabled (which is the default) urgent data\n is silently discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4099"}],"methods":[{"name":"setOption","comment":"Enable/disable the option specified by \u003cI\u003eoptID\u003c/I\u003e.  If the option\n is to be enabled, and it takes an option-specific \"value\",  this is\n passed in \u003cI\u003evalue\u003c/I\u003e.  The actual type of value is option-specific,\n and it is an error to pass something that isn\u0027t of the expected type:\n \u003cBR\u003e\u003cPRE\u003e\n SocketImpl s;\n ...\n s.setOption(SO_LINGER, new Integer(10));\n    // OK - set SO_LINGER w/ timeout of 10 sec.\n s.setOption(SO_LINGER, new Double(10));\n    // ERROR - expects java.lang.Integer\n\u003c/PRE\u003e\n If the requested option is binary, it can be set using this method by\n a java.lang.Boolean:\n \u003cBR\u003e\u003cPRE\u003e\n s.setOption(TCP_NODELAY, new Boolean(true));\n    // OK - enables TCP_NODELAY, a binary option\n \u003c/PRE\u003e\n \u003cBR\u003e\n Any option can be disabled using this method with a Boolean(false):\n \u003cBR\u003e\u003cPRE\u003e\n s.setOption(TCP_NODELAY, new Boolean(false));\n    // OK - disables TCP_NODELAY\n s.setOption(SO_LINGER, new Boolean(false));\n    // OK - disables SO_LINGER\n \u003c/PRE\u003e\n \u003cBR\u003e\n For an option that has a notion of on and off, and requires\n a non-boolean parameter, setting its value to anything other than\n \u003cI\u003eBoolean(false)\u003c/I\u003e implicitly enables it.\n \u003cBR\u003e\n Throws SocketException if the option is unrecognized,\n the socket is closed, or some low-level error occurred\n \u003cBR\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.Object)","flatSignature":"(int, Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"optID","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOption","comment":"Fetch the value of an option.\n Binary options will return java.lang.Boolean(true)\n if enabled, java.lang.Boolean(false) if disabled, e.g.:\n \u003cBR\u003e\u003cPRE\u003e\n SocketImpl s;\n ...\n Boolean noDelay \u003d (Boolean)(s.getOption(TCP_NODELAY));\n if (noDelay.booleanValue()) {\n     // true if TCP_NODELAY is enabled...\n ...\n }\n \u003c/PRE\u003e\n \u003cP\u003e\n For options that take a particular type as a parameter,\n getOption(int) will return the parameter\u0027s value, else\n it will return java.lang.Boolean(false):\n \u003cPRE\u003e\n Object o \u003d s.getOption(SO_LINGER);\n if (o instanceof Integer) {\n     System.out.print(\"Linger time is \" + ((Integer)o).intValue());\n } else {\n   // the true type of o is java.lang.Boolean(false);\n }\n \u003c/PRE\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"optID","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.net.SocketImpl","java.net.DatagramSocketImpl"],"enumConstants":[]}