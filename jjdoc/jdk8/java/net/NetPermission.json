{"name":"NetPermission","comment":"This class is for various network permissions.\n A NetPermission contains a name (also referred to as a \"target name\") but\n no actions list; you either have the named permission\n or you don\u0027t.\n \u003cP\u003e\n The target name is the name of the network permission (see below). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard\n match, while \"*foo\" and \"a*b\" do not.\n \u003cP\u003e\n The following table lists all the possible NetPermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"Permission target name, what the permission allows, and associated risks\"\u003e\n \u003ctr\u003e\n \u003cth\u003ePermission Target Name\u003c/th\u003e\n \u003cth\u003eWhat the Permission Allows\u003c/th\u003e\n \u003cth\u003eRisks of Allowing this Permission\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003eallowHttpTrace\u003c/td\u003e\n   \u003ctd\u003eThe ability to use the HTTP TRACE method in HttpURLConnection.\u003c/td\u003e\n   \u003ctd\u003eMalicious code using HTTP TRACE could get access to security sensitive\n   information in the HTTP headers (such as cookies) that it might not\n   otherwise have access to.\u003c/td\u003e\n   \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetCookieHandler\u003c/td\u003e\n   \u003ctd\u003eThe ability to get the cookie handler that processes highly\n   security sensitive cookie information for an Http session.\u003c/td\u003e\n   \u003ctd\u003eMalicious code can get a cookie handler to obtain access to\n   highly security sensitive cookie information. Some web servers\n   use cookies to save user private information such as access\n   control information, or to track user browsing habit.\u003c/td\u003e\n   \u003c/tr\u003e\n\n \u003ctr\u003e\n  \u003ctd\u003egetNetworkInformation\u003c/td\u003e\n  \u003ctd\u003eThe ability to retrieve all information about local network interfaces.\u003c/td\u003e\n  \u003ctd\u003eMalicious code can read information about network hardware such as\n  MAC addresses, which could be used to construct local IPv6 addresses.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetProxySelector\u003c/td\u003e\n   \u003ctd\u003eThe ability to get the proxy selector used to make decisions\n   on which proxies to use when making network connections.\u003c/td\u003e\n   \u003ctd\u003eMalicious code can get a ProxySelector to discover proxy\n   hosts and ports on internal networks, which could then become\n   targets for attack.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003egetResponseCache\u003c/td\u003e\n   \u003ctd\u003eThe ability to get the response cache that provides\n   access to a local response cache.\u003c/td\u003e\n   \u003ctd\u003eMalicious code getting access to the local response cache\n   could access security sensitive information.\u003c/td\u003e\n   \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003erequestPasswordAuthentication\u003c/td\u003e\n   \u003ctd\u003eThe ability\n to ask the authenticator registered with the system for\n a password\u003c/td\u003e\n   \u003ctd\u003eMalicious code may steal this password.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetCookieHandler\u003c/td\u003e\n   \u003ctd\u003eThe ability to set the cookie handler that processes highly\n   security sensitive cookie information for an Http session.\u003c/td\u003e\n   \u003ctd\u003eMalicious code can set a cookie handler to obtain access to\n   highly security sensitive cookie information. Some web servers\n   use cookies to save user private information such as access\n   control information, or to track user browsing habit.\u003c/td\u003e\n   \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetDefaultAuthenticator\u003c/td\u003e\n   \u003ctd\u003eThe ability to set the\n way authentication information is retrieved when\n a proxy or HTTP server asks for authentication\u003c/td\u003e\n   \u003ctd\u003eMalicious\n code can set an authenticator that monitors and steals user\n authentication input as it retrieves the input from the user.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetProxySelector\u003c/td\u003e\n   \u003ctd\u003eThe ability to set the proxy selector used to make decisions\n   on which proxies to use when making network connections.\u003c/td\u003e\n   \u003ctd\u003eMalicious code can set a ProxySelector that directs network\n   traffic to an arbitrary network host.\u003c/td\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003esetResponseCache\u003c/td\u003e\n   \u003ctd\u003eThe ability to set the response cache that provides access to\n   a local response cache.\u003c/td\u003e\n   \u003ctd\u003eMalicious code getting access to the local response cache\n   could access security sensitive information, or create false\n   entries in the response cache.\u003c/td\u003e\n   \u003c/tr\u003e\n\n \u003ctr\u003e\n   \u003ctd\u003especifyStreamHandler\u003c/td\u003e\n   \u003ctd\u003eThe ability\n to specify a stream handler when constructing a URL\u003c/td\u003e\n   \u003ctd\u003eMalicious code may create a URL with resources that it would\nnormally not have access to (like file:/foo/fum/), specifying a\nstream handler that gets the actual bytes from someplace it does\nhave access to. Thus it might be able to trick the system into\ncreating a ProtectionDomain/CodeSource for a class even though\nthat class really didn\u0027t come from that location.\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"NetPermission","qualifiedName":"java.net.NetPermission","dimension":"","elementType":{},"package":"java.net","superclass":"java.security.BasicPermission","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"NetPermission","comment":"Creates a new NetPermission with the specified name.\n The name is the symbolic name of the NetPermission, such as\n \"setDefaultAuthenticator\", etc. An asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"NetPermission","comment":"Creates a new NetPermission object with the specified name.\n The name is the symbolic name of the NetPermission, and the\n actions String is currently unused and should be null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"actions","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[],"typeParameters":[],"enumConstants":[]}