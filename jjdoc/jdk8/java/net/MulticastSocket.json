{"name":"MulticastSocket","comment":"The multicast datagram socket class is useful for sending\n and receiving IP multicast packets.  A MulticastSocket is\n a (UDP) DatagramSocket, with additional capabilities for\n joining \"groups\" of other multicast hosts on the internet.\n \u003cP\u003e\n A multicast group is specified by a class D IP address\n and by a standard UDP port number. Class D IP addresses\n are in the range \u003cCODE\u003e224.0.0.0\u003c/CODE\u003e to \u003cCODE\u003e239.255.255.255\u003c/CODE\u003e,\n inclusive. The address 224.0.0.0 is reserved and should not be used.\n \u003cP\u003e\n One would join a multicast group by first creating a MulticastSocket\n with the desired port, then invoking the\n \u003cCODE\u003ejoinGroup(InetAddress groupAddr)\u003c/CODE\u003e\n method:\n \u003cPRE\u003e\n // join a Multicast group and send the group salutations\n ...\n String msg \u003d \"Hello\";\n InetAddress group \u003d InetAddress.getByName(\"228.5.6.7\");\n MulticastSocket s \u003d new MulticastSocket(6789);\n s.joinGroup(group);\n DatagramPacket hi \u003d new DatagramPacket(msg.getBytes(), msg.length(),\n                             group, 6789);\n s.send(hi);\n // get their responses!\n byte[] buf \u003d new byte[1000];\n DatagramPacket recv \u003d new DatagramPacket(buf, buf.length);\n s.receive(recv);\n ...\n // OK, I\u0027m done talking - leave the group...\n s.leaveGroup(group);\n \u003c/PRE\u003e\n\n When one sends a message to a multicast group, \u003cB\u003eall\u003c/B\u003e subscribing\n recipients to that host and port receive the message (within the\n time-to-live range of the packet, see below).  The socket needn\u0027t\n be a member of the multicast group to send messages to it.\n \u003cP\u003e\n When a socket subscribes to a multicast group/port, it receives\n datagrams sent by other hosts to the group/port, as do all other\n members of the group and port.  A socket relinquishes membership\n in a group by the leaveGroup(InetAddress addr) method.  \u003cB\u003e\n Multiple MulticastSocket\u0027s\u003c/B\u003e may subscribe to a multicast group\n and port concurrently, and they will all receive group datagrams.\n \u003cP\u003e\n Currently applets are not allowed to use multicast sockets.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"MulticastSocket","qualifiedName":"java.net.MulticastSocket","dimension":"","elementType":{},"package":"java.net","superclass":"java.net.DatagramSocket","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"MulticastSocket","comment":"Create a multicast socket.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with 0 as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n \u003cp\u003e\n When the socket is created the\n {@link DatagramSocket#setReuseAddress(boolean)} method is\n called to enable the SO_REUSEADDR socket option.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"MulticastSocket","comment":"Create a multicast socket and bind it to a specific port.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with the {@code port} argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n \u003cp\u003e\n When the socket is created the\n {@link DatagramSocket#setReuseAddress(boolean)} method is\n called to enable the SO_REUSEADDR socket option.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"MulticastSocket","comment":"Create a MulticastSocket bound to the specified socket address.\n \u003cp\u003e\n Or, if the address is {@code null}, create an unbound socket.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with the SocketAddress port as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n \u003cp\u003e\n When the socket is created the\n {@link DatagramSocket#setReuseAddress(boolean)} method is\n called to enable the SO_REUSEADDR socket option.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","parameters":[{"name":"bindaddr","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"setTTL","comment":"Set the default time-to-live for multicast packets sent out\n on this {@code MulticastSocket} in order to control the\n scope of the multicasts.\n\n \u003cp\u003eThe ttl is an \u003cb\u003eunsigned\u003c/b\u003e 8-bit quantity, and so \u003cB\u003emust\u003c/B\u003e be\n in the range {@code 0 \u003c\u003d ttl \u003c\u003d 0xFF }.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte)","flatSignature":"(byte)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ttl","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setTimeToLive","comment":"Set the default time-to-live for multicast packets sent out\n on this {@code MulticastSocket} in order to control the\n scope of the multicasts.\n\n \u003cP\u003e The ttl \u003cB\u003emust\u003c/B\u003e be in the range {@code  0 \u003c\u003d ttl \u003c\u003d\n 255} or an {@code IllegalArgumentException} will be thrown.\n Multicast packets sent with a TTL of {@code 0} are not transmitted\n on the network but may be delivered locally.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ttl","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTTL","comment":"Get the default time-to-live for multicast packets sent out on\n the socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTimeToLive","comment":"Get the default time-to-live for multicast packets sent out on\n the socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"joinGroup","comment":"Joins a multicast group. Its behavior may be affected by\n {@code setInterface} or {@code setNetworkInterface}.\n\n \u003cp\u003eIf there is a security manager, this method first\n calls its {@code checkMulticast} method\n with the {@code mcastaddr} argument\n as its argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress)","flatSignature":"(InetAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"mcastaddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"leaveGroup","comment":"Leave a multicast group. Its behavior may be affected by\n {@code setInterface} or {@code setNetworkInterface}.\n\n \u003cp\u003eIf there is a security manager, this method first\n calls its {@code checkMulticast} method\n with the {@code mcastaddr} argument\n as its argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress)","flatSignature":"(InetAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"mcastaddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"joinGroup","comment":"Joins the specified multicast group at the specified interface.\n\n \u003cp\u003eIf there is a security manager, this method first\n calls its {@code checkMulticast} method\n with the {@code mcastaddr} argument\n as its argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress, java.net.NetworkInterface)","flatSignature":"(SocketAddress, NetworkInterface)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"mcastaddr","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}},{"name":"netIf","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"leaveGroup","comment":"Leave a multicast group on a specified local interface.\n\n \u003cp\u003eIf there is a security manager, this method first\n calls its {@code checkMulticast} method\n with the {@code mcastaddr} argument\n as its argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress, java.net.NetworkInterface)","flatSignature":"(SocketAddress, NetworkInterface)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"mcastaddr","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}},{"name":"netIf","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setInterface","comment":"Set the multicast network interface used by methods\n whose behavior would be affected by the value of the\n network interface. Useful for multihomed hosts.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress)","flatSignature":"(InetAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inf","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInterface","comment":"Retrieve the address of the network interface used for\n multicast packets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setNetworkInterface","comment":"Specify the network interface for outgoing multicast datagrams\n sent on this socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.NetworkInterface)","flatSignature":"(NetworkInterface)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"netIf","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNetworkInterface","comment":"Get the multicast network interface set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setLoopbackMode","comment":"Disable/Enable local loopback of multicast datagrams\n The option is used by the platform\u0027s networking code as a hint\n for setting whether multicast data will be looped back to\n the local socket.\n\n \u003cp\u003eBecause this option is a hint, applications that want to\n verify what loopback mode is set to should call\n {@link #getLoopbackMode()}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"disable","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLoopbackMode","comment":"Get the setting for local loopback of multicast datagrams.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"send","comment":"Sends a datagram packet to the destination, with a TTL (time-\n to-live) other than the default for the socket.  This method\n need only be used in instances where a particular TTL is desired;\n otherwise it is preferable to set a TTL once on the socket, and\n use that default TTL for all packets.  This method does \u003cB\u003enot\n \u003c/B\u003e alter the default TTL for the socket. Its behavior may be\n affected by {@code setInterface}.\n\n \u003cp\u003eIf there is a security manager, this method first performs some\n security checks. First, if {@code p.getAddress().isMulticastAddress()}\n is true, this method calls the\n security manager\u0027s {@code checkMulticast} method\n with {@code p.getAddress()} and {@code ttl} as its arguments.\n If the evaluation of that expression is false,\n this method instead calls the security manager\u0027s\n {@code checkConnect} method with arguments\n {@code p.getAddress().getHostAddress()} and\n {@code p.getPort()}. Each call to a security manager method\n could result in a SecurityException if the operation is not allowed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.DatagramPacket, byte)","flatSignature":"(DatagramPacket, byte)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"DatagramPacket","qualifiedName":"java.net.DatagramPacket","dimension":"","elementType":{}}},{"name":"ttl","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}