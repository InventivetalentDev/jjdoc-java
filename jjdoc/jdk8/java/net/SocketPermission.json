{"name":"SocketPermission","comment":"This class represents access to a network via sockets.\n A SocketPermission consists of a\n host specification and a set of \"actions\" specifying ways to\n connect to that host. The host is specified as\n \u003cpre\u003e\n    host \u003d (hostname | IPv4address | iPv6reference) [:portrange]\n    portrange \u003d portnumber | -portnumber | portnumber-[portnumber]\n \u003c/pre\u003e\n The host is expressed as a DNS name, as a numerical IP address,\n or as \"localhost\" (for the local machine).\n The wildcard \"*\" may be included once in a DNS name host\n specification. If it is included, it must be in the leftmost\n position, as in \"*.sun.com\".\n \u003cp\u003e\n The format of the IPv6reference should follow that specified in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2732: Format\n for Literal IPv6 Addresses in URLs\u003c/i\u003e\u003c/a\u003e:\n \u003cpre\u003e\n    ipv6reference \u003d \"[\" IPv6address \"]\"\n\u003c/pre\u003e\n For example, you can construct a SocketPermission instance\n as the following:\n \u003cpre\u003e\n    String hostAddress \u003d inetaddress.getHostAddress();\n    if (inetaddress instanceof Inet6Address) {\n        sp \u003d new SocketPermission(\"[\" + hostAddress + \"]:\" + port, action);\n    } else {\n        sp \u003d new SocketPermission(hostAddress + \":\" + port, action);\n    }\n \u003c/pre\u003e\n or\n \u003cpre\u003e\n    String host \u003d url.getHost();\n    sp \u003d new SocketPermission(host + \":\" + port, action);\n \u003c/pre\u003e\n \u003cp\u003e\n The \u003cA HREF\u003d\"Inet6Address.html#lform\"\u003efull uncompressed form\u003c/A\u003e of\n an IPv6 literal address is also valid.\n \u003cp\u003e\n The port or portrange is optional. A port specification of the\n form \"N-\", where \u003ci\u003eN\u003c/i\u003e is a port number, signifies all ports\n numbered \u003ci\u003eN\u003c/i\u003e and above, while a specification of the\n form \"-N\" indicates all ports numbered \u003ci\u003eN\u003c/i\u003e and below.\n The special port value {@code 0} refers to the entire \u003ci\u003eephemeral\u003c/i\u003e\n port range. This is a fixed range of ports a system may use to\n allocate dynamic ports from. The actual range may be system dependent.\n \u003cp\u003e\n The possible ways to connect to the host are\n \u003cpre\u003e\n accept\n connect\n listen\n resolve\n \u003c/pre\u003e\n The \"listen\" action is only meaningful when used with \"localhost\" and\n means the ability to bind to a specified port.\n The \"resolve\" action is implied when any of the other actions are present.\n The action \"resolve\" refers to host/ip name service lookups.\n \u003cP\u003e\n The actions string is converted to lowercase before processing.\n \u003cp\u003eAs an example of the creation and meaning of SocketPermissions,\n note that if the following permission:\n\n \u003cpre\u003e\n   p1 \u003d new SocketPermission(\"puffin.eng.sun.com:7777\", \"connect,accept\");\n \u003c/pre\u003e\n\n is granted to some code, it allows that code to connect to port 7777 on\n {@code puffin.eng.sun.com}, and to accept connections on that port.\n\n \u003cp\u003eSimilarly, if the following permission:\n\n \u003cpre\u003e\n   p2 \u003d new SocketPermission(\"localhost:1024-\", \"accept,connect,listen\");\n \u003c/pre\u003e\n\n is granted to some code, it allows that code to\n accept connections on, connect to, or listen on any port between\n 1024 and 65535 on the local host.\n\n \u003cp\u003eNote: Granting code permission to accept or make connections to remote\n hosts may be dangerous because malevolent code can then more easily\n transfer and share confidential data among parties who may not\n otherwise have access to the data.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SocketPermission","qualifiedName":"java.net.SocketPermission","dimension":"","elementType":{},"package":"java.net","superclass":"java.security.Permission","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SocketPermission","comment":"Creates a new SocketPermission object with the specified actions.\n The host is expressed as a DNS name, or as a numerical IP address.\n Optionally, a port or a portrange may be supplied (separated\n from the DNS name or IP address by a colon).\n \u003cp\u003e\n To specify the local machine, use \"localhost\" as the \u003ci\u003ehost\u003c/i\u003e.\n Also note: An empty \u003ci\u003ehost\u003c/i\u003e String (\"\") is equivalent to \"localhost\".\n \u003cp\u003e\n The \u003ci\u003eactions\u003c/i\u003e parameter contains a comma-separated list of the\n actions granted for the specified host (and port(s)). Possible actions are\n \"connect\", \"listen\", \"accept\", \"resolve\", or\n any combination of those. \"resolve\" is automatically added\n when any of the other three are specified.\n \u003cp\u003e\n Examples of SocketPermission instantiation are the following:\n \u003cpre\u003e\n    nr \u003d new SocketPermission(\"www.catalog.com\", \"connect\");\n    nr \u003d new SocketPermission(\"www.sun.com:80\", \"connect\");\n    nr \u003d new SocketPermission(\"*.sun.com\", \"connect\");\n    nr \u003d new SocketPermission(\"*.edu\", \"resolve\");\n    nr \u003d new SocketPermission(\"204.160.241.0\", \"connect\");\n    nr \u003d new SocketPermission(\"localhost:1024-65535\", \"listen\");\n    nr \u003d new SocketPermission(\"204.160.241.0:1024-65535\", \"connect\");\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"implies","comment":"Checks if this socket permission object \"implies\" the\n specified permission.\n \u003cP\u003e\n More specifically, this method first ensures that all of the following\n are true (and returns false if any of them are not):\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e is an instanceof SocketPermission,\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s actions are a proper subset of this\n object\u0027s actions, and\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s port range is included in this port range. Note:\n port range is ignored when p only contains the action, \u0027resolve\u0027.\n \u003c/ul\u003e\n\n Then {@code implies} checks each of the following, in order,\n and for each returns true if the stated condition is true:\n \u003cul\u003e\n \u003cli\u003e If this object was initialized with a single IP address and one of \u003ci\u003ep\u003c/i\u003e\u0027s\n IP addresses is equal to this object\u0027s IP address.\n \u003cli\u003eIf this object is a wildcard domain (such as *.sun.com), and\n \u003ci\u003ep\u003c/i\u003e\u0027s canonical name (the name without any preceding *)\n ends with this object\u0027s canonical host name. For example, *.sun.com\n implies *.eng.sun.com.\n \u003cli\u003eIf this object was not initialized with a single IP address, and one of this\n object\u0027s IP addresses equals one of \u003ci\u003ep\u003c/i\u003e\u0027s IP addresses.\n \u003cli\u003eIf this canonical name equals \u003ci\u003ep\u003c/i\u003e\u0027s canonical name.\n \u003c/ul\u003e\n\n If none of the above are true, {@code implies} returns false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks two SocketPermission objects for equality.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getActions","comment":"Returns the canonical string representation of the actions.\n Always returns present actions in the following order:\n connect, listen, accept, resolve.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newPermissionCollection","comment":"Returns a new PermissionCollection object for storing SocketPermission\n objects.\n \u003cp\u003e\n SocketPermission objects must be stored in a manner that allows them\n to be inserted into the collection in any order, but that also enables the\n PermissionCollection {@code implies}\n method to be implemented in an efficient (and consistent) manner.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}