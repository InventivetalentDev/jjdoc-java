{"name":"Inet6Address","comment":"This class represents an Internet Protocol version 6 (IPv6) address.\n Defined by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003e\n \u003ci\u003eRFC\u0026nbsp;2373: IP Version 6 Addressing Architecture\u003c/i\u003e\u003c/a\u003e.\n\n \u003ch3\u003e \u003cA NAME\u003d\"format\"\u003eTextual representation of IP addresses\u003c/a\u003e \u003c/h3\u003e\n\n Textual representation of IPv6 address used as input to methods\n takes one of the following forms:\n\n \u003col\u003e\n   \u003cli\u003e\u003cp\u003e \u003cA NAME\u003d\"lform\"\u003eThe preferred form\u003c/a\u003e is x:x:x:x:x:x:x:x,\n   where the \u0027x\u0027s are\n   the hexadecimal values of the eight 16-bit pieces of the\n   address. This is the full form.  For example,\n\n   \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code 1080:0:0:0:8:800:200C:417A}\u003ctd\u003e\u003c/tr\u003e\n   \u003c/table\u003e\u003c/blockquote\u003e\n\n   \u003cp\u003e Note that it is not necessary to write the leading zeros in\n   an individual field. However, there must be at least one numeral\n   in every field, except as described below.\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Due to some methods of allocating certain styles of IPv6\n   addresses, it will be common for addresses to contain long\n   strings of zero bits. In order to make writing addresses\n   containing zero bits easier, a special syntax is available to\n   compress the zeros. The use of \"::\" indicates multiple groups\n   of 16-bits of zeros. The \"::\" can only appear once in an address.\n   The \"::\" can also be used to compress the leading and/or trailing\n   zeros in an address. For example,\n\n   \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code 1080::8:800:200C:417A}\u003ctd\u003e\u003c/tr\u003e\n   \u003c/table\u003e\u003c/blockquote\u003e\n\n   \u003cli\u003e\u003cp\u003e An alternative form that is sometimes more convenient\n   when dealing with a mixed environment of IPv4 and IPv6 nodes is\n   x:x:x:x:x:x:d.d.d.d, where the \u0027x\u0027s are the hexadecimal values\n   of the six high-order 16-bit pieces of the address, and the \u0027d\u0027s\n   are the decimal values of the four low-order 8-bit pieces of the\n   standard IPv4 representation address, for example,\n\n   \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::FFFF:129.144.52.38}\u003ctd\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::129.144.52.38}\u003ctd\u003e\u003c/tr\u003e\n   \u003c/table\u003e\u003c/blockquote\u003e\n\n   \u003cp\u003e where \"::FFFF:d.d.d.d\" and \"::d.d.d.d\" are, respectively, the\n   general forms of an IPv4-mapped IPv6 address and an\n   IPv4-compatible IPv6 address. Note that the IPv4 portion must be\n   in the \"d.d.d.d\" form. The following forms are invalid:\n\n   \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::FFFF:d.d.d}\u003ctd\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::FFFF:d.d}\u003ctd\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::d.d.d}\u003ctd\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::d.d}\u003ctd\u003e\u003c/tr\u003e\n   \u003c/table\u003e\u003c/blockquote\u003e\n\n   \u003cp\u003e The following form:\n\n   \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::FFFF:d}\u003ctd\u003e\u003c/tr\u003e\n   \u003c/table\u003e\u003c/blockquote\u003e\n\n   \u003cp\u003e is valid, however it is an unconventional representation of\n   the IPv4-compatible IPv6 address,\n\n   \u003cblockquote\u003e\u003ctable cellpadding\u003d0 cellspacing\u003d0 summary\u003d\"layout\"\u003e\n   \u003ctr\u003e\u003ctd\u003e{@code ::255.255.0.d}\u003ctd\u003e\u003c/tr\u003e\n   \u003c/table\u003e\u003c/blockquote\u003e\n\n   \u003cp\u003e while \"::d\" corresponds to the general IPv6 address\n   \"0:0:0:0:0:0:0:d\".\u003c/li\u003e\n \u003c/ol\u003e\n\n \u003cp\u003e For methods that return a textual representation as output\n value, the full form is used. Inet6Address will return the full\n form because it is unambiguous when used in combination with other\n textual data.\n\n \u003ch4\u003e Special IPv6 address \u003c/h4\u003e\n\n \u003cblockquote\u003e\n \u003ctable cellspacing\u003d2 summary\u003d\"Description of IPv4-mapped address\"\u003e\n \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003eIPv4-mapped address\u003c/i\u003e\u003c/th\u003e\n         \u003ctd\u003eOf the form::ffff:w.x.y.z, this IPv6 address is used to\n         represent an IPv4 address. It allows the native program to\n         use the same address data structure and also the same\n         socket when communicating with both IPv4 and IPv6 nodes.\n\n         \u003cp\u003eIn InetAddress and Inet6Address, it is used for internal\n         representation; it has no functional role. Java will never\n         return an IPv4-mapped address.  These classes can take an\n         IPv4-mapped address as input, both in byte array and text\n         representation. However, it will be converted into an IPv4\n         address.\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003ch4\u003e\u003cA NAME\u003d\"scoped\"\u003eTextual representation of IPv6 scoped addresses\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e The textual representation of IPv6 addresses as described above can be\n extended to specify IPv6 scoped addresses. This extension to the basic\n addressing architecture is described in [draft-ietf-ipngwg-scoping-arch-04.txt].\n\n \u003cp\u003e Because link-local and site-local addresses are non-global, it is possible\n that different hosts may have the same destination address and may be\n reachable through different interfaces on the same originating system. In\n this case, the originating system is said to be connected to multiple zones\n of the same scope. In order to disambiguate which is the intended destination\n zone, it is possible to append a zone identifier (or \u003ci\u003escope_id\u003c/i\u003e) to an\n IPv6 address.\n\n \u003cp\u003e The general format for specifying the \u003ci\u003escope_id\u003c/i\u003e is the following:\n\n \u003cblockquote\u003e\u003ci\u003eIPv6-address\u003c/i\u003e%\u003ci\u003escope_id\u003c/i\u003e\u003c/blockquote\u003e\n \u003cp\u003e The IPv6-address is a literal IPv6 address as described above.\n The \u003ci\u003escope_id\u003c/i\u003e refers to an interface on the local system, and it can be\n specified in two ways.\n \u003col\u003e\u003cli\u003e\u003ci\u003eAs a numeric identifier.\u003c/i\u003e This must be a positive integer\n that identifies the particular interface and scope as understood by the\n system. Usually, the numeric values can be determined through administration\n tools on the system. Each interface may have multiple values, one for each\n scope. If the scope is unspecified, then the default value used is zero.\u003c/li\u003e\n \u003cli\u003e\u003ci\u003eAs a string.\u003c/i\u003e This must be the exact string that is returned by\n {@link java.net.NetworkInterface#getName()} for the particular interface in\n question. When an Inet6Address is created in this way, the numeric scope-id\n is determined at the time the object is created by querying the relevant\n NetworkInterface.\u003c/li\u003e\u003c/ol\u003e\n\n \u003cp\u003e Note also, that the numeric \u003ci\u003escope_id\u003c/i\u003e can be retrieved from\n Inet6Address instances returned from the NetworkInterface class. This can be\n used to find out the current scope ids configured on the system.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Inet6Address","qualifiedName":"java.net.Inet6Address","dimension":"","elementType":{},"package":"java.net","superclass":"java.net.InetAddress","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getByAddress","comment":"Create an Inet6Address in the exact manner of {@link\n InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is\n set to the value corresponding to the given interface for the address\n type specified in {@code addr}. The call will fail with an\n UnknownHostException if the given interface does not have a numeric\n scope_id assigned for the given address type (eg. link-local or site-local).\n See \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e for a description of IPv6\n scoped addresses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[], java.net.NetworkInterface)","flatSignature":"(String, byte[], NetworkInterface)","returnType":{"isPrimitive":false,"simpleName":"Inet6Address","qualifiedName":"java.net.Inet6Address","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"addr","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"nif","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getByAddress","comment":"Create an Inet6Address in the exact manner of {@link\n InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is\n set to the given numeric value. The scope_id is not checked to determine\n if it corresponds to any interface on the system.\n See \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e for a description of IPv6\n scoped addresses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[], int)","flatSignature":"(String, byte[], int)","returnType":{"isPrimitive":false,"simpleName":"Inet6Address","qualifiedName":"java.net.Inet6Address","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"addr","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"scope_id","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isMulticastAddress","comment":"Utility routine to check if the InetAddress is an IP multicast\n address. 11111111 at the start of the address identifies the\n address as being a multicast address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAnyLocalAddress","comment":"Utility routine to check if the InetAddress in a wildcard address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLoopbackAddress","comment":"Utility routine to check if the InetAddress is a loopback address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLinkLocalAddress","comment":"Utility routine to check if the InetAddress is an link local address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSiteLocalAddress","comment":"Utility routine to check if the InetAddress is a site local address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCGlobal","comment":"Utility routine to check if the multicast address has global scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCNodeLocal","comment":"Utility routine to check if the multicast address has node scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCLinkLocal","comment":"Utility routine to check if the multicast address has link scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCSiteLocal","comment":"Utility routine to check if the multicast address has site scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCOrgLocal","comment":"Utility routine to check if the multicast address has organization scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAddress","comment":"Returns the raw IP address of this {@code InetAddress} object. The result\n is in network byte order: the highest order byte of the address is in\n {@code getAddress()[0]}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getScopeId","comment":"Returns the numeric scopeId, if this instance is associated with\n an interface. If no scoped_id is set, the returned value is zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getScopedInterface","comment":"Returns the scoped interface, if this instance was created with\n with a scoped interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHostAddress","comment":"Returns the IP address string in textual presentation. If the instance\n was created specifying a scope identifier then the scope id is appended\n to the IP address preceded by a \"%\" (per-cent) character. This can be\n either a numeric value or a string, depending on which was used to create\n the instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode for this IP address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object against the specified object. The result is {@code\n true} if and only if the argument is not {@code null} and it represents\n the same IP address as this object.\n\n \u003cp\u003e Two instances of {@code InetAddress} represent the same IP address\n if the length of the byte arrays returned by {@code getAddress} is the\n same for both, and each of the array components is the same for the byte\n arrays.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isIPv4CompatibleAddress","comment":"Utility routine to check if the InetAddress is an\n IPv4 compatible IPv6 address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}