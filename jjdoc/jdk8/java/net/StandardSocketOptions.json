{"name":"StandardSocketOptions","comment":"Defines the \u003cem\u003estandard\u003c/em\u003e socket options.\n\n \u003cp\u003e The {@link SocketOption#name name} of each socket option defined by this\n class is its field name.\n\n \u003cp\u003e In this release, the socket options defined here are used by {@link\n java.nio.channels.NetworkChannel network} channels in the {@link\n java.nio.channels channels} package.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"StandardSocketOptions","qualifiedName":"java.net.StandardSocketOptions","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"SO_BROADCAST","comment":"Allow transmission of broadcast datagrams.\n\n \u003cp\u003e The value of this socket option is a {@code Boolean} that represents\n whether the option is enabled or disabled. The option is specific to\n datagram-oriented sockets sending to {@link java.net.Inet4Address IPv4}\n broadcast addresses. When the socket option is enabled then the socket\n can be used to send \u003cem\u003ebroadcast datagrams\u003c/em\u003e.\n\n \u003cp\u003e The initial value of this socket option is {@code FALSE}. The socket\n option may be enabled or disabled at any time. Some operating systems may\n require that the Java virtual machine be started with implementation\n specific privileges to enable this option or send broadcast datagrams.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"SO_KEEPALIVE","comment":"Keep connection alive.\n\n \u003cp\u003e The value of this socket option is a {@code Boolean} that represents\n whether the option is enabled or disabled. When the {@code SO_KEEPALIVE}\n option is enabled the operating system may use a \u003cem\u003ekeep-alive\u003c/em\u003e\n mechanism to periodically probe the other end of a connection when the\n connection is otherwise idle. The exact semantics of the keep alive\n mechanism is system dependent and therefore unspecified.\n\n \u003cp\u003e The initial value of this socket option is {@code FALSE}. The socket\n option may be enabled or disabled at any time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"SO_SNDBUF","comment":"The size of the socket send buffer.\n\n \u003cp\u003e The value of this socket option is an {@code Integer} that is the\n size of the socket send buffer in bytes. The socket send buffer is an\n output buffer used by the networking implementation. It may need to be\n increased for high-volume connections. The value of the socket option is\n a \u003cem\u003ehint\u003c/em\u003e to the implementation to size the buffer and the actual\n size may differ. The socket option can be queried to retrieve the actual\n size.\n\n \u003cp\u003e For datagram-oriented sockets, the size of the send buffer may limit\n the size of the datagrams that may be sent by the socket. Whether\n datagrams larger than the buffer size are sent or discarded is system\n dependent.\n\n \u003cp\u003e The initial/default size of the socket send buffer and the range of\n allowable values is system dependent although a negative size is not\n allowed. An attempt to set the socket send buffer to larger than its\n maximum size causes it to be set to its maximum size.\n\n \u003cp\u003e An implementation allows this socket option to be set before the\n socket is bound or connected. Whether an implementation allows the\n socket send buffer to be changed after the socket is bound is system\n dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"SO_RCVBUF","comment":"The size of the socket receive buffer.\n\n \u003cp\u003e The value of this socket option is an {@code Integer} that is the\n size of the socket receive buffer in bytes. The socket receive buffer is\n an input buffer used by the networking implementation. It may need to be\n increased for high-volume connections or decreased to limit the possible\n backlog of incoming data. The value of the socket option is a\n \u003cem\u003ehint\u003c/em\u003e to the implementation to size the buffer and the actual\n size may differ.\n\n \u003cp\u003e For datagram-oriented sockets, the size of the receive buffer may\n limit the size of the datagrams that can be received. Whether datagrams\n larger than the buffer size can be received is system dependent.\n Increasing the socket receive buffer may be important for cases where\n datagrams arrive in bursts faster than they can be processed.\n\n \u003cp\u003e In the case of stream-oriented sockets and the TCP/IP protocol, the\n size of the socket receive buffer may be used when advertising the size\n of the TCP receive window to the remote peer.\n\n \u003cp\u003e The initial/default size of the socket receive buffer and the range\n of allowable values is system dependent although a negative size is not\n allowed. An attempt to set the socket receive buffer to larger than its\n maximum size causes it to be set to its maximum size.\n\n \u003cp\u003e An implementation allows this socket option to be set before the\n socket is bound or connected. Whether an implementation allows the\n socket receive buffer to be changed after the socket is bound is system\n dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"SO_REUSEADDR","comment":"Re-use address.\n\n \u003cp\u003e The value of this socket option is a {@code Boolean} that represents\n whether the option is enabled or disabled. The exact semantics of this\n socket option are socket type and system dependent.\n\n \u003cp\u003e In the case of stream-oriented sockets, this socket option will\n usually determine whether the socket can be bound to a socket address\n when a previous connection involving that socket address is in the\n \u003cem\u003eTIME_WAIT\u003c/em\u003e state. On implementations where the semantics differ,\n and the socket option is not required to be enabled in order to bind the\n socket when a previous connection is in this state, then the\n implementation may choose to ignore this option.\n\n \u003cp\u003e For datagram-oriented sockets the socket option is used to allow\n multiple programs bind to the same address. This option should be enabled\n when the socket is to be used for Internet Protocol (IP) multicasting.\n\n \u003cp\u003e An implementation allows this socket option to be set before the\n socket is bound or connected. Changing the value of this socket option\n after the socket is bound has no effect. The default value of this\n socket option is system dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"SO_LINGER","comment":"Linger on close if data is present.\n\n \u003cp\u003e The value of this socket option is an {@code Integer} that controls\n the action taken when unsent data is queued on the socket and a method\n to close the socket is invoked. If the value of the socket option is zero\n or greater, then it represents a timeout value, in seconds, known as the\n \u003cem\u003elinger interval\u003c/em\u003e. The linger interval is the timeout for the\n {@code close} method to block while the operating system attempts to\n transmit the unsent data or it decides that it is unable to transmit the\n data. If the value of the socket option is less than zero then the option\n is disabled. In that case the {@code close} method does not wait until\n unsent data is transmitted; if possible the operating system will transmit\n any unsent data before the connection is closed.\n\n \u003cp\u003e This socket option is intended for use with sockets that are configured\n in {@link java.nio.channels.SelectableChannel#isBlocking() blocking} mode\n only. The behavior of the {@code close} method when this option is\n enabled on a non-blocking socket is not defined.\n\n \u003cp\u003e The initial value of this socket option is a negative value, meaning\n that the option is disabled. The option may be enabled, or the linger\n interval changed, at any time. The maximum value of the linger interval\n is system dependent. Setting the linger interval to a value that is\n greater than its maximum value causes the linger interval to be set to\n its maximum value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"IP_TOS","comment":"The Type of Service (ToS) octet in the Internet Protocol (IP) header.\n\n \u003cp\u003e The value of this socket option is an {@code Integer} representing\n the value of the ToS octet in IP packets sent by sockets to an {@link\n StandardProtocolFamily#INET IPv4} socket. The interpretation of the ToS\n octet is network specific and is not defined by this class. Further\n information on the ToS octet can be found in \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc1349.txt\"\u003eRFC\u0026nbsp;1349\u003c/a\u003e and \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2474.txt\"\u003eRFC\u0026nbsp;2474\u003c/a\u003e. The value\n of the socket option is a \u003cem\u003ehint\u003c/em\u003e. An implementation may ignore the\n value, or ignore specific values.\n\n \u003cp\u003e The initial/default value of the TOS field in the ToS octet is\n implementation specific but will typically be {@code 0}. For\n datagram-oriented sockets the option may be configured at any time after\n the socket has been bound. The new value of the octet is used when sending\n subsequent datagrams. It is system dependent whether this option can be\n queried or changed prior to binding the socket.\n\n \u003cp\u003e The behavior of this socket option on a stream-oriented socket, or an\n {@link StandardProtocolFamily#INET6 IPv6} socket, is not defined in this\n release.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"IP_MULTICAST_IF","comment":"The network interface for Internet Protocol (IP) multicast datagrams.\n\n \u003cp\u003e The value of this socket option is a {@link NetworkInterface} that\n represents the outgoing interface for multicast datagrams sent by the\n datagram-oriented socket. For {@link StandardProtocolFamily#INET6 IPv6}\n sockets then it is system dependent whether setting this option also\n sets the outgoing interface for multicast datagrams sent to IPv4\n addresses.\n\n \u003cp\u003e The initial/default value of this socket option may be {@code null}\n to indicate that outgoing interface will be selected by the operating\n system, typically based on the network routing tables. An implementation\n allows this socket option to be set after the socket is bound. Whether\n the socket option can be queried or changed prior to binding the socket\n is system dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"IP_MULTICAST_TTL","comment":"The \u003cem\u003etime-to-live\u003c/em\u003e for Internet Protocol (IP) multicast datagrams.\n\n \u003cp\u003e The value of this socket option is an {@code Integer} in the range\n {@code 0 \u003c\u003d value \u003c\u003d 255}. It is used to control the scope of multicast\n datagrams sent by the datagram-oriented socket.\n In the case of an {@link StandardProtocolFamily#INET IPv4} socket\n the option is the time-to-live (TTL) on multicast datagrams sent by the\n socket. Datagrams with a TTL of zero are not transmitted on the network\n but may be delivered locally. In the case of an {@link\n StandardProtocolFamily#INET6 IPv6} socket the option is the\n \u003cem\u003ehop limit\u003c/em\u003e which is number of \u003cem\u003ehops\u003c/em\u003e that the datagram can\n pass through before expiring on the network. For IPv6 sockets it is\n system dependent whether the option also sets the \u003cem\u003etime-to-live\u003c/em\u003e\n on multicast datagrams sent to IPv4 addresses.\n\n \u003cp\u003e The initial/default value of the time-to-live setting is typically\n {@code 1}. An implementation allows this socket option to be set after\n the socket is bound. Whether the socket option can be queried or changed\n prior to binding the socket is system dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"IP_MULTICAST_LOOP","comment":"Loopback for Internet Protocol (IP) multicast datagrams.\n\n \u003cp\u003e The value of this socket option is a {@code Boolean} that controls\n the \u003cem\u003eloopback\u003c/em\u003e of multicast datagrams. The value of the socket\n option represents if the option is enabled or disabled.\n\n \u003cp\u003e The exact semantics of this socket options are system dependent.\n In particular, it is system dependent whether the loopback applies to\n multicast datagrams sent from the socket or received by the socket.\n For {@link StandardProtocolFamily#INET6 IPv6} sockets then it is\n system dependent whether the option also applies to multicast datagrams\n sent to IPv4 addresses.\n\n \u003cp\u003e The initial/default value of this socket option is {@code TRUE}. An\n implementation allows this socket option to be set after the socket is\n bound. Whether the socket option can be queried or changed prior to\n binding the socket is system dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true},{"name":"TCP_NODELAY","comment":"Disable the Nagle algorithm.\n\n \u003cp\u003e The value of this socket option is a {@code Boolean} that represents\n whether the option is enabled or disabled. The socket option is specific to\n stream-oriented sockets using the TCP/IP protocol. TCP/IP uses an algorithm\n known as \u003cem\u003eThe Nagle Algorithm\u003c/em\u003e to coalesce short segments and\n improve network efficiency.\n\n \u003cp\u003e The default value of this socket option is {@code FALSE}. The\n socket option should only be enabled in cases where it is known that the\n coalescing impacts performance. The socket option may be enabled at any\n time. In other words, the Nagle Algorithm can be disabled. Once the option\n is enabled, it is system dependent whether it can be subsequently\n disabled. If it cannot, then invoking the {@code setOption} method to\n disable the option has no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}},"isStatic":true}],"methods":[],"typeParameters":[],"enumConstants":[]}