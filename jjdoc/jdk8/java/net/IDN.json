{"name":"IDN","comment":"Provides methods to convert internationalized domain names (IDNs) between\n a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.\n Internationalized domain names can use characters from the entire range of\n Unicode, while traditional domain names are restricted to ASCII characters.\n ACE is an encoding of Unicode strings that uses only ASCII characters and\n can be used with software (such as the Domain Name System) that only\n understands traditional domain names.\n\n \u003cp\u003eInternationalized domain names are defined in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3490.txt\"\u003eRFC 3490\u003c/a\u003e.\n RFC 3490 defines two operations: ToASCII and ToUnicode. These 2 operations employ\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3491.txt\"\u003eNameprep\u003c/a\u003e algorithm, which is a\n profile of \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3454.txt\"\u003eStringprep\u003c/a\u003e, and\n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3492.txt\"\u003ePunycode\u003c/a\u003e algorithm to convert\n domain name string back and forth.\n\n \u003cp\u003eThe behavior of aforementioned conversion process can be adjusted by various flags:\n   \u003cul\u003e\n     \u003cli\u003eIf the ALLOW_UNASSIGNED flag is used, the domain name string to be converted\n         can contain code points that are unassigned in Unicode 3.2, which is the\n         Unicode version on which IDN conversion is based. If the flag is not used,\n         the presence of such unassigned code points is treated as an error.\n     \u003cli\u003eIf the USE_STD3_ASCII_RULES flag is used, ASCII strings are checked against \u003ca href\u003d\"http://www.ietf.org/rfc/rfc1122.txt\"\u003eRFC 1122\u003c/a\u003e and \u003ca href\u003d\"http://www.ietf.org/rfc/rfc1123.txt\"\u003eRFC 1123\u003c/a\u003e.\n         It is an error if they don\u0027t meet the requirements.\n   \u003c/ul\u003e\n These flags can be logically OR\u0027ed together.\n\n \u003cp\u003eThe security consideration is important with respect to internationalization\n domain name support. For example, English domain names may be \u003ci\u003ehomographed\u003c/i\u003e\n - maliciously misspelled by substitution of non-Latin letters.\n \u003ca href\u003d\"http://www.unicode.org/reports/tr36/\"\u003eUnicode Technical Report #36\u003c/a\u003e\n discusses security issues of IDN support as well as possible solutions.\n Applications are responsible for taking adequate security measures when using\n international domain names.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"IDN","qualifiedName":"java.net.IDN","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"ALLOW_UNASSIGNED","comment":"Flag to allow processing of unassigned code points","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"USE_STD3_ASCII_RULES","comment":"Flag to turn on the check against STD-3 ASCII rules","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"}],"methods":[{"name":"toASCII","comment":"Translates a string from Unicode to ASCII Compatible Encoding (ACE),\n as defined by the ToASCII operation of \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3490.txt\"\u003eRFC 3490\u003c/a\u003e.\n\n \u003cp\u003eToASCII operation can fail. ToASCII fails if any step of it fails.\n If ToASCII operation fails, an IllegalArgumentException will be thrown.\n In this case, the input string should not be used in an internationalized domain name.\n\n \u003cp\u003e A label is an individual part of a domain name. The original ToASCII operation,\n as defined in RFC 3490, only operates on a single label. This method can handle\n both label and entire domain name, by assuming that labels in a domain name are\n always separated by dots. The following characters are recognized as dots:\n \u0026#0092;u002E (full stop), \u0026#0092;u3002 (ideographic full stop), \u0026#0092;uFF0E (fullwidth full stop),\n and \u0026#0092;uFF61 (halfwidth ideographic full stop). if dots are\n used as label separators, this method also changes all of them to \u0026#0092;u002E (full stop)\n in output translated string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"flag","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toASCII","comment":"Translates a string from Unicode to ASCII Compatible Encoding (ACE),\n as defined by the ToASCII operation of \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3490.txt\"\u003eRFC 3490\u003c/a\u003e.\n\n \u003cp\u003e This convenience method works as if by invoking the\n two-argument counterpart as follows:\n \u003cblockquote\u003e\n {@link #toASCII(String, int) toASCII}(input,\u0026nbsp;0);\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnicode","comment":"Translates a string from ASCII Compatible Encoding (ACE) to Unicode,\n as defined by the ToUnicode operation of \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3490.txt\"\u003eRFC 3490\u003c/a\u003e.\n\n \u003cp\u003eToUnicode never fails. In case of any error, the input string is returned unmodified.\n\n \u003cp\u003e A label is an individual part of a domain name. The original ToUnicode operation,\n as defined in RFC 3490, only operates on a single label. This method can handle\n both label and entire domain name, by assuming that labels in a domain name are\n always separated by dots. The following characters are recognized as dots:\n \u0026#0092;u002E (full stop), \u0026#0092;u3002 (ideographic full stop), \u0026#0092;uFF0E (fullwidth full stop),\n and \u0026#0092;uFF61 (halfwidth ideographic full stop).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"flag","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnicode","comment":"Translates a string from ASCII Compatible Encoding (ACE) to Unicode,\n as defined by the ToUnicode operation of \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3490.txt\"\u003eRFC 3490\u003c/a\u003e.\n\n \u003cp\u003e This convenience method works as if by invoking the\n two-argument counterpart as follows:\n \u003cblockquote\u003e\n {@link #toUnicode(String, int) toUnicode}(input,\u0026nbsp;0);\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}