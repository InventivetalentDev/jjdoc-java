{"name":"DatagramSocket","comment":"This class represents a socket for sending and receiving datagram packets.\n\n \u003cp\u003eA datagram socket is the sending or receiving point for a packet\n delivery service. Each packet sent or received on a datagram socket\n is individually addressed and routed. Multiple packets sent from\n one machine to another may be routed differently, and may arrive in\n any order.\n\n \u003cp\u003e Where possible, a newly constructed {@code DatagramSocket} has the\n {@link SocketOptions#SO_BROADCAST SO_BROADCAST} socket option enabled so as\n to allow the transmission of broadcast datagrams. In order to receive\n broadcast packets a DatagramSocket should be bound to the wildcard address.\n In some implementations, broadcast packets may also be received when\n a DatagramSocket is bound to a more specific address.\n \u003cp\u003e\n Example:\n {@code\n              DatagramSocket s \u003d new DatagramSocket(null);\n              s.bind(new InetSocketAddress(8888));\n }\n Which is equivalent to:\n {@code\n              DatagramSocket s \u003d new DatagramSocket(8888);\n }\n Both cases will create a DatagramSocket able to receive broadcasts on\n UDP port 8888.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DatagramSocket","qualifiedName":"java.net.DatagramSocket","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":["java.io.Closeable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DatagramSocket","comment":"Constructs a datagram socket and binds it to any available port\n on the local host machine.  The socket will be bound to the\n {@link InetAddress#isAnyLocalAddress wildcard} address,\n an IP address chosen by the kernel.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with 0 as its argument to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"DatagramSocket","comment":"Creates a datagram socket, bound to the specified local\n socket address.\n \u003cp\u003e\n If, if the address is {@code null}, creates an unbound socket.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with the port from the socket address\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","parameters":[{"name":"bindaddr","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"DatagramSocket","comment":"Constructs a datagram socket and binds it to the specified port\n on the local host machine.  The socket will be bound to the\n {@link InetAddress#isAnyLocalAddress wildcard} address,\n an IP address chosen by the kernel.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with the {@code port} argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"DatagramSocket","comment":"Creates a datagram socket, bound to the specified local\n address.  The local port must be between 0 and 65535 inclusive.\n If the IP address is 0.0.0.0, the socket will be bound to the\n {@link InetAddress#isAnyLocalAddress wildcard} address,\n an IP address chosen by the kernel.\n\n \u003cp\u003eIf there is a security manager,\n its {@code checkListen} method is first called\n with the {@code port} argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.net.InetAddress)","flatSignature":"(int, InetAddress)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"laddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"bind","comment":"Binds this DatagramSocket to a specific address and port.\n \u003cp\u003e\n If the address is {@code null}, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n\u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"addr","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"connect","comment":"Connects the socket to a remote address for this socket. When a\n socket is connected to a remote address, packets may only be\n sent to or received from that address. By default a datagram\n socket is not connected.\n\n \u003cp\u003eIf the remote destination to which the socket is connected does not\n exist, or is otherwise unreachable, and if an ICMP destination unreachable\n packet has been received for that address, then a subsequent call to\n send or receive may throw a PortUnreachableException. Note, there is no\n guarantee that the exception will be thrown.\n\n \u003cp\u003e If a security manager has been installed then it is invoked to check\n access to the remote address. Specifically, if the given {@code address}\n is a {@link InetAddress#isMulticastAddress multicast address},\n the security manager\u0027s {@link\n java.lang.SecurityManager#checkMulticast(InetAddress)\n checkMulticast} method is invoked with the given {@code address}.\n Otherwise, the security manager\u0027s {@link\n java.lang.SecurityManager#checkConnect(String,int) checkConnect}\n and {@link java.lang.SecurityManager#checkAccept checkAccept} methods\n are invoked, with the given {@code address} and {@code port}, to\n verify that datagrams are permitted to be sent and received\n respectively.\n\n \u003cp\u003e When a socket is connected, {@link #receive receive} and\n {@link #send send} \u003cb\u003ewill not perform any security checks\u003c/b\u003e\n on incoming and outgoing packets, other than matching the packet\u0027s\n and the socket\u0027s address and port. On a send operation, if the\n packet\u0027s address is set and the packet\u0027s address and the socket\u0027s\n address do not match, an {@code IllegalArgumentException} will be\n thrown. A socket connected to a multicast address may only be used\n to send packets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, int)","flatSignature":"(InetAddress, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"address","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"connect","comment":"Connects this socket to a remote socket address (IP address + port number).\n\n \u003cp\u003e If given an {@link InetSocketAddress InetSocketAddress}, this method\n behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}\n with the the given socket addresses IP address and port number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"addr","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"disconnect","comment":"Disconnects the socket. If the socket is closed or not connected,\n then this method has no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isBound","comment":"Returns the binding state of the socket.\n \u003cp\u003e\n If the socket was bound prior to being {@link #close closed},\n then this method will continue to return {@code true}\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isConnected","comment":"Returns the connection state of the socket.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return {@code true}\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getInetAddress","comment":"Returns the address to which this socket is connected. Returns\n {@code null} if the socket is not connected.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return the connected address\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPort","comment":"Returns the port number to which this socket is connected.\n Returns {@code -1} if the socket is not connected.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return the connected port number\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRemoteSocketAddress","comment":"Returns the address of the endpoint this socket is connected to, or\n {@code null} if it is unconnected.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return the connected address\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalSocketAddress","comment":"Returns the address of the endpoint this socket is bound to.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"send","comment":"Sends a datagram packet from this socket. The\n {@code DatagramPacket} includes information indicating the\n data to be sent, its length, the IP address of the remote host,\n and the port number on the remote host.\n\n \u003cp\u003eIf there is a security manager, and the socket is not currently\n connected to a remote address, this method first performs some\n security checks. First, if {@code p.getAddress().isMulticastAddress()}\n is true, this method calls the\n security manager\u0027s {@code checkMulticast} method\n with {@code p.getAddress()} as its argument.\n If the evaluation of that expression is false,\n this method instead calls the security manager\u0027s\n {@code checkConnect} method with arguments\n {@code p.getAddress().getHostAddress()} and\n {@code p.getPort()}. Each call to a security manager method\n could result in a SecurityException if the operation is not allowed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.DatagramPacket)","flatSignature":"(DatagramPacket)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"DatagramPacket","qualifiedName":"java.net.DatagramPacket","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"receive","comment":"Receives a datagram packet from this socket. When this method\n returns, the {@code DatagramPacket}\u0027s buffer is filled with\n the data received. The datagram packet also contains the sender\u0027s\n IP address, and the port number on the sender\u0027s machine.\n \u003cp\u003e\n This method blocks until a datagram is received. The\n {@code length} field of the datagram packet object contains\n the length of the received message. If the message is longer than\n the packet\u0027s length, the message is truncated.\n \u003cp\u003e\n If there is a security manager, a packet cannot be received if the\n security manager\u0027s {@code checkAccept} method\n does not allow it.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.DatagramPacket)","flatSignature":"(DatagramPacket)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"DatagramPacket","qualifiedName":"java.net.DatagramPacket","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLocalAddress","comment":"Gets the local address to which the socket is bound.\n\n \u003cp\u003eIf there is a security manager, its\n {@code checkConnect} method is first called\n with the host address and {@code -1}\n as its arguments to see if the operation is allowed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalPort","comment":"Returns the port number on the local host to which this socket\n is bound.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSoTimeout","comment":"Enable/disable SO_TIMEOUT with the specified timeout, in\n  milliseconds. With this option set to a non-zero timeout,\n  a call to receive() for this DatagramSocket\n  will block for only this amount of time.  If the timeout expires,\n  a \u003cB\u003ejava.net.SocketTimeoutException\u003c/B\u003e is raised, though the\n  DatagramSocket is still valid.  The option \u003cB\u003emust\u003c/B\u003e be enabled\n  prior to entering the blocking operation to have effect.  The\n  timeout must be {@code \u003e 0}.\n  A timeout of zero is interpreted as an infinite timeout.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSoTimeout","comment":"Retrieve setting for SO_TIMEOUT.  0 returns implies that the\n option is disabled (i.e., timeout of infinity).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSendBufferSize","comment":"Sets the SO_SNDBUF option to the specified value for this\n {@code DatagramSocket}. The SO_SNDBUF option is used by the\n network implementation as a hint to size the underlying\n network I/O buffers. The SO_SNDBUF setting may also be used\n by the network implementation to determine the maximum size\n of the packet that can be sent on this socket.\n \u003cp\u003e\n As SO_SNDBUF is a hint, applications that want to verify\n what size the buffer is should call {@link #getSendBufferSize()}.\n \u003cp\u003e\n Increasing the buffer size may allow multiple outgoing packets\n to be queued by the network implementation when the send rate\n is high.\n \u003cp\u003e\n Note: If {@link #send(DatagramPacket)} is used to send a\n {@code DatagramPacket} that is larger than the setting\n of SO_SNDBUF then it is implementation specific if the\n packet is sent or discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSendBufferSize","comment":"Get value of the SO_SNDBUF option for this {@code DatagramSocket}, that is the\n buffer size used by the platform for output on this {@code DatagramSocket}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setReceiveBufferSize","comment":"Sets the SO_RCVBUF option to the specified value for this\n {@code DatagramSocket}. The SO_RCVBUF option is used by the\n the network implementation as a hint to size the underlying\n network I/O buffers. The SO_RCVBUF setting may also be used\n by the network implementation to determine the maximum size\n of the packet that can be received on this socket.\n \u003cp\u003e\n Because SO_RCVBUF is a hint, applications that want to\n verify what size the buffers were set to should call\n {@link #getReceiveBufferSize()}.\n \u003cp\u003e\n Increasing SO_RCVBUF may allow the network implementation\n to buffer multiple packets when packets arrive faster than\n are being received using {@link #receive(DatagramPacket)}.\n \u003cp\u003e\n Note: It is implementation specific if a packet larger\n than SO_RCVBUF can be received.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getReceiveBufferSize","comment":"Get value of the SO_RCVBUF option for this {@code DatagramSocket}, that is the\n buffer size used by the platform for input on this {@code DatagramSocket}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setReuseAddress","comment":"Enable/disable the SO_REUSEADDR socket option.\n \u003cp\u003e\n For UDP sockets it may be necessary to bind more than one\n socket to the same socket address. This is typically for the\n purpose of receiving multicast packets\n (See {@link java.net.MulticastSocket}). The\n {@code SO_REUSEADDR} socket option allows multiple\n sockets to be bound to the same socket address if the\n {@code SO_REUSEADDR} socket option is enabled prior\n to binding the socket using {@link #bind(SocketAddress)}.\n \u003cp\u003e\n Note: This functionality is not supported by all existing platforms,\n so it is implementation specific whether this option will be ignored\n or not. However, if it is not supported then\n {@link #getReuseAddress()} will always return {@code false}.\n \u003cp\u003e\n When a {@code DatagramSocket} is created the initial setting\n of {@code SO_REUSEADDR} is disabled.\n \u003cp\u003e\n The behaviour when {@code SO_REUSEADDR} is enabled or\n disabled after a socket is bound (See {@link #isBound()})\n is not defined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getReuseAddress","comment":"Tests if SO_REUSEADDR is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setBroadcast","comment":"Enable/disable SO_BROADCAST.\n\n \u003cp\u003e Some operating systems may require that the Java virtual machine be\n started with implementation specific privileges to enable this option or\n send broadcast datagrams.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBroadcast","comment":"Tests if SO_BROADCAST is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTrafficClass","comment":"Sets traffic class or type-of-service octet in the IP\n datagram header for datagrams sent from this DatagramSocket.\n As the underlying network implementation may ignore this\n value applications should consider it a hint.\n\n \u003cP\u003e The tc \u003cB\u003emust\u003c/B\u003e be in the range {@code 0 \u003c\u003d tc \u003c\u003d\n 255} or an IllegalArgumentException will be thrown.\n \u003cp\u003eNotes:\n \u003cp\u003eFor Internet Protocol v4 the value consists of an\n {@code integer}, the least significant 8 bits of which\n represent the value of the TOS octet in IP packets sent by\n the socket.\n RFC 1349 defines the TOS values as follows:\n\n \u003cUL\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_LOWCOST (0x02)\u003c/CODE\u003e\u003c/LI\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_RELIABILITY (0x04)\u003c/CODE\u003e\u003c/LI\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_THROUGHPUT (0x08)\u003c/CODE\u003e\u003c/LI\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_LOWDELAY (0x10)\u003c/CODE\u003e\u003c/LI\u003e\n \u003c/UL\u003e\n The last low order bit is always ignored as this\n corresponds to the MBZ (must be zero) bit.\n \u003cp\u003e\n Setting bits in the precedence field may result in a\n SocketException indicating that the operation is not\n permitted.\n \u003cp\u003e\n for Internet Protocol v6 {@code tc} is the value that\n would be placed into the sin6_flowinfo field of the IP header.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"tc","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTrafficClass","comment":"Gets traffic class or type-of-service in the IP datagram\n header for packets sent from this DatagramSocket.\n \u003cp\u003e\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using {@link #setTrafficClass(int)}\n this method may return a different value than was previously\n set using the {@link #setTrafficClass(int)} method on this\n DatagramSocket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this datagram socket.\n \u003cp\u003e\n Any thread currently blocked in {@link #receive} upon this socket\n will throw a {@link SocketException}.\n\n \u003cp\u003e If this socket has an associated channel then the channel is closed\n as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isClosed","comment":"Returns whether the socket is closed or not.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChannel","comment":"Returns the unique {@link java.nio.channels.DatagramChannel} object\n associated with this datagram socket, if any.\n\n \u003cp\u003e A datagram socket will have a channel if, and only if, the channel\n itself was created via the {@link java.nio.channels.DatagramChannel#open\n DatagramChannel.open} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setDatagramSocketImplFactory","comment":"Sets the datagram socket implementation factory for the\n application. The factory can be specified only once.\n \u003cp\u003e\n When an application creates a new datagram socket, the socket\n implementation factory\u0027s {@code createDatagramSocketImpl} method is\n called to create the actual datagram socket implementation.\n \u003cp\u003e\n Passing {@code null} to the method is a no-op unless the factory\n was already set.\n\n \u003cp\u003eIf there is a security manager, this method first calls\n the security manager\u0027s {@code checkSetFactory} method\n to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.DatagramSocketImplFactory)","flatSignature":"(DatagramSocketImplFactory)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"fac","type":{"isPrimitive":false,"simpleName":"DatagramSocketImplFactory","qualifiedName":"java.net.DatagramSocketImplFactory","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.net.MulticastSocket"],"enumConstants":[]}