{"name":"Socket","comment":"This class implements client sockets (also called just\n \"sockets\"). A socket is an endpoint for communication\n between two machines.\n \u003cp\u003e\n The actual work of the socket is performed by an instance of the\n {@code SocketImpl} class. An application, by changing\n the socket factory that creates the socket implementation,\n can configure itself to create sockets appropriate to the local\n firewall.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Socket","qualifiedName":"java.net.Socket","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":["java.io.Closeable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Socket","comment":"Creates an unconnected socket, with the\n system-default type of SocketImpl.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Socket","comment":"Creates an unconnected socket, specifying the type of proxy, if any,\n that should be used regardless of any other settings.\n \u003cP\u003e\n If there is a security manager, its {@code checkConnect} method\n is called with the proxy host address and port number\n as its arguments. This could result in a SecurityException.\n \u003cP\u003e\n Examples:\n \u003cUL\u003e \u003cLI\u003e{@code Socket s \u003d new Socket(Proxy.NO_PROXY);} will create\n a plain socket ignoring any other proxy configuration.\u003c/LI\u003e\n \u003cLI\u003e{@code Socket s \u003d new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(\"socks.mydom.com\", 1080)));}\n will create a socket connecting through the specified SOCKS proxy\n server.\u003c/LI\u003e\n \u003c/UL\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.Proxy)","flatSignature":"(Proxy)","parameters":[{"name":"proxy","type":{"isPrimitive":false,"simpleName":"Proxy","qualifiedName":"java.net.Proxy","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Socket","comment":"Creates a stream socket and connects it to the specified port\n number on the named host.\n \u003cp\u003e\n If the specified host is {@code null} it is the equivalent of\n specifying the address as\n {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n In other words, it is equivalent to specifying an address of the\n loopback interface. \u003c/p\u003e\n \u003cp\u003e\n If the application has specified a server socket factory, that\n factory\u0027s {@code createSocketImpl} method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \u003cp\u003e\n If there is a security manager, its\n {@code checkConnect} method is called\n with the host address and {@code port}\n as its arguments. This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Socket","comment":"Creates a stream socket and connects it to the specified port\n number at the specified IP address.\n \u003cp\u003e\n If the application has specified a socket factory, that factory\u0027s\n {@code createSocketImpl} method is called to create the\n actual socket implementation. Otherwise a \"plain\" socket is created.\n \u003cp\u003e\n If there is a security manager, its\n {@code checkConnect} method is called\n with the host address and {@code port}\n as its arguments. This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, int)","flatSignature":"(InetAddress, int)","parameters":[{"name":"address","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Socket","comment":"Creates a socket and connects it to the specified remote host on\n the specified remote port. The Socket will also bind() to the local\n address and port supplied.\n \u003cp\u003e\n If the specified host is {@code null} it is the equivalent of\n specifying the address as\n {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n In other words, it is equivalent to specifying an address of the\n loopback interface. \u003c/p\u003e\n \u003cp\u003e\n A local port number of {@code zero} will let the system pick up a\n free port in the {@code bind} operation.\u003c/p\u003e\n \u003cp\u003e\n If there is a security manager, its\n {@code checkConnect} method is called\n with the host address and {@code port}\n as its arguments. This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int, java.net.InetAddress, int)","flatSignature":"(String, int, InetAddress, int)","parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"localAddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"localPort","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Socket","comment":"Creates a socket and connects it to the specified remote address on\n the specified remote port. The Socket will also bind() to the local\n address and port supplied.\n \u003cp\u003e\n If the specified local address is {@code null} it is the equivalent of\n specifying the address as the AnyLocal address\n (see {@link java.net.InetAddress#isAnyLocalAddress InetAddress.isAnyLocalAddress}{@code ()}).\n \u003cp\u003e\n A local port number of {@code zero} will let the system pick up a\n free port in the {@code bind} operation.\u003c/p\u003e\n \u003cp\u003e\n If there is a security manager, its\n {@code checkConnect} method is called\n with the host address and {@code port}\n as its arguments. This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, int, java.net.InetAddress, int)","flatSignature":"(InetAddress, int, InetAddress, int)","parameters":[{"name":"address","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"localAddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"localPort","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Socket","comment":"Creates a stream socket and connects it to the specified port\n number on the named host.\n \u003cp\u003e\n If the specified host is {@code null} it is the equivalent of\n specifying the address as\n {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n In other words, it is equivalent to specifying an address of the\n loopback interface. \u003c/p\u003e\n \u003cp\u003e\n If the stream argument is {@code true}, this creates a\n stream socket. If the stream argument is {@code false}, it\n creates a datagram socket.\n \u003cp\u003e\n If the application has specified a server socket factory, that\n factory\u0027s {@code createSocketImpl} method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \u003cp\u003e\n If there is a security manager, its\n {@code checkConnect} method is called\n with the host address and {@code port}\n as its arguments. This could result in a SecurityException.\n \u003cp\u003e\n If a UDP socket is used, TCP/IP related socket options will not apply.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int, boolean)","flatSignature":"(String, int, boolean)","parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"stream","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Socket","comment":"Creates a socket and connects it to the specified port number at\n the specified IP address.\n \u003cp\u003e\n If the stream argument is {@code true}, this creates a\n stream socket. If the stream argument is {@code false}, it\n creates a datagram socket.\n \u003cp\u003e\n If the application has specified a server socket factory, that\n factory\u0027s {@code createSocketImpl} method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n\n \u003cp\u003eIf there is a security manager, its\n {@code checkConnect} method is called\n with {@code host.getHostAddress()} and {@code port}\n as its arguments. This could result in a SecurityException.\n \u003cp\u003e\n If UDP socket is used, TCP/IP related socket options will not apply.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, int, boolean)","flatSignature":"(InetAddress, int, boolean)","parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"stream","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"connect","comment":"Connects this socket to the server.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endpoint","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"connect","comment":"Connects this socket to the server with a specified timeout value.\n A timeout of zero is interpreted as an infinite timeout. The connection\n will then block until established or an error occurs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress, int)","flatSignature":"(SocketAddress, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endpoint","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bind","comment":"Binds the socket to a local address.\n \u003cP\u003e\n If the address is {@code null}, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bindpoint","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInetAddress","comment":"Returns the address to which the socket is connected.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return the connected address\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalAddress","comment":"Gets the local address to which the socket is bound.\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n the {@link InetAddress#getLoopbackAddress loopback} address is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPort","comment":"Returns the remote port number to which this socket is connected.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return the connected port number\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalPort","comment":"Returns the local port number to which this socket is bound.\n \u003cp\u003e\n If the socket was bound prior to being {@link #close closed},\n then this method will continue to return the local port number\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRemoteSocketAddress","comment":"Returns the address of the endpoint this socket is connected to, or\n {@code null} if it is unconnected.\n \u003cp\u003e\n If the socket was connected prior to being {@link #close closed},\n then this method will continue to return the connected address\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalSocketAddress","comment":"Returns the address of the endpoint this socket is bound to.\n \u003cp\u003e\n If a socket bound to an endpoint represented by an\n {@code InetSocketAddress } is {@link #close closed},\n then this method will continue to return an {@code InetSocketAddress}\n after the socket is closed. In that case the returned\n {@code InetSocketAddress}\u0027s address is the\n {@link InetAddress#isAnyLocalAddress wildcard} address\n and its port is the local port that it was bound to.\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n {@link InetAddress#getLoopbackAddress loopback} address and the local\n port to which this socket is bound is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChannel","comment":"Returns the unique {@link java.nio.channels.SocketChannel SocketChannel}\n object associated with this socket, if any.\n\n \u003cp\u003e A socket will have a channel if, and only if, the channel itself was\n created via the {@link java.nio.channels.SocketChannel#open\n SocketChannel.open} or {@link\n java.nio.channels.ServerSocketChannel#accept ServerSocketChannel.accept}\n methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getInputStream","comment":"Returns an input stream for this socket.\n\n \u003cp\u003e If this socket has an associated channel then the resulting input\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the input stream\u0027s {@code read} operations\n will throw an {@link java.nio.channels.IllegalBlockingModeException}.\n\n \u003cp\u003eUnder abnormal conditions the underlying connection may be\n broken by the remote host or the network software (for example\n a connection reset in the case of TCP connections). When a\n broken connection is detected by the network software the\n following applies to the returned input stream :-\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003eThe network software may discard bytes that are buffered\n   by the socket. Bytes that aren\u0027t discarded by the network\n   software can be read using {@link java.io.InputStream#read read}.\n\n   \u003cli\u003e\u003cp\u003eIf there are no bytes buffered on the socket, or all\n   buffered bytes have been consumed by\n   {@link java.io.InputStream#read read}, then all subsequent\n   calls to {@link java.io.InputStream#read read} will throw an\n   {@link java.io.IOException IOException}.\n\n   \u003cli\u003e\u003cp\u003eIf there are no bytes buffered on the socket, and the\n   socket has not been closed using {@link #close close}, then\n   {@link java.io.InputStream#available available} will\n   return {@code 0}.\n\n \u003c/ul\u003e\n\n \u003cp\u003e Closing the returned {@link java.io.InputStream InputStream}\n will close the associated socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOutputStream","comment":"Returns an output stream for this socket.\n\n \u003cp\u003e If this socket has an associated channel then the resulting output\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the output stream\u0027s {@code write}\n operations will throw an {@link\n java.nio.channels.IllegalBlockingModeException}.\n\n \u003cp\u003e Closing the returned {@link java.io.OutputStream OutputStream}\n will close the associated socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTcpNoDelay","comment":"Enable/disable {@link SocketOptions#TCP_NODELAY TCP_NODELAY}\n (disable/enable Nagle\u0027s algorithm).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTcpNoDelay","comment":"Tests if {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSoLinger","comment":"Enable/disable {@link SocketOptions#SO_LINGER SO_LINGER} with the\n specified linger time in seconds. The maximum timeout value is platform\n specific.\n\n The setting only affects socket close.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, int)","flatSignature":"(boolean, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"linger","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSoLinger","comment":"Returns setting for {@link SocketOptions#SO_LINGER SO_LINGER}.\n -1 returns implies that the\n option is disabled.\n\n The setting only affects socket close.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sendUrgentData","comment":"Send one byte of urgent data on the socket. The byte to be sent is the lowest eight\n bits of the data parameter. The urgent byte is\n sent after any preceding writes to the socket OutputStream\n and before any future writes to the OutputStream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOOBInline","comment":"Enable/disable {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE}\n (receipt of TCP urgent data)\n\n By default, this option is disabled and TCP urgent data received on a\n socket is silently discarded. If the user wishes to receive urgent data, then\n this option must be enabled. When enabled, urgent data is received\n inline with normal data.\n \u003cp\u003e\n Note, only limited support is provided for handling incoming urgent\n data. In particular, no notification of incoming urgent data is provided\n and there is no capability to distinguish between normal data and urgent\n data unless provided by a higher level protocol.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOOBInline","comment":"Tests if {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE} is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSoTimeout","comment":"Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}\n  with the specified timeout, in milliseconds. With this option set\n  to a non-zero timeout, a read() call on the InputStream associated with\n  this Socket will block for only this amount of time.  If the timeout\n  expires, a \u003cB\u003ejava.net.SocketTimeoutException\u003c/B\u003e is raised, though the\n  Socket is still valid. The option \u003cB\u003emust\u003c/B\u003e be enabled\n  prior to entering the blocking operation to have effect. The\n  timeout must be {@code \u003e 0}.\n  A timeout of zero is interpreted as an infinite timeout.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSoTimeout","comment":"Returns setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}.\n 0 returns implies that the option is disabled (i.e., timeout of infinity).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSendBufferSize","comment":"Sets the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option to the\n specified value for this {@code Socket}.\n The {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option is used by the\n platform\u0027s networking code as a hint for the size to set the underlying\n network I/O buffers.\n\n \u003cp\u003eBecause {@link SocketOptions#SO_SNDBUF SO_SNDBUF} is a hint,\n applications that want to verify what size the buffers were set to\n should call {@link #getSendBufferSize()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSendBufferSize","comment":"Get value of the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option\n for this {@code Socket}, that is the buffer size used by the platform\n for output on this {@code Socket}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setReceiveBufferSize","comment":"Sets the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option to the\n specified value for this {@code Socket}. The\n {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option is\n used by the platform\u0027s networking code as a hint for the size to set\n the underlying network I/O buffers.\n\n \u003cp\u003eIncreasing the receive buffer size can increase the performance of\n network I/O for high-volume connection, while decreasing it can\n help reduce the backlog of incoming data.\n\n \u003cp\u003eBecause {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is a hint,\n applications that want to verify what size the buffers were set to\n should call {@link #getReceiveBufferSize()}.\n\n \u003cp\u003eThe value of {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is also used\n to set the TCP receive window that is advertized to the remote peer.\n Generally, the window size can be modified at any time when a socket is\n connected. However, if a receive window larger than 64K is required then\n this must be requested \u003cB\u003ebefore\u003c/B\u003e the socket is connected to the\n remote peer. There are two cases to be aware of:\n \u003col\u003e\n \u003cli\u003eFor sockets accepted from a ServerSocket, this must be done by calling\n {@link ServerSocket#setReceiveBufferSize(int)} before the ServerSocket\n is bound to a local address.\u003cp\u003e\u003c/li\u003e\n \u003cli\u003eFor client sockets, setReceiveBufferSize() must be called before\n connecting the socket to its remote peer.\u003c/li\u003e\u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getReceiveBufferSize","comment":"Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option\n for this {@code Socket}, that is the buffer size used by the platform\n for input on this {@code Socket}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setKeepAlive","comment":"Enable/disable {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getKeepAlive","comment":"Tests if {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTrafficClass","comment":"Sets traffic class or type-of-service octet in the IP\n header for packets sent from this Socket.\n As the underlying network implementation may ignore this\n value applications should consider it a hint.\n\n \u003cP\u003e The tc \u003cB\u003emust\u003c/B\u003e be in the range {@code 0 \u003c\u003d tc \u003c\u003d\n 255} or an IllegalArgumentException will be thrown.\n \u003cp\u003eNotes:\n \u003cp\u003eFor Internet Protocol v4 the value consists of an\n {@code integer}, the least significant 8 bits of which\n represent the value of the TOS octet in IP packets sent by\n the socket.\n RFC 1349 defines the TOS values as follows:\n\n \u003cUL\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_LOWCOST (0x02)\u003c/CODE\u003e\u003c/LI\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_RELIABILITY (0x04)\u003c/CODE\u003e\u003c/LI\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_THROUGHPUT (0x08)\u003c/CODE\u003e\u003c/LI\u003e\n \u003cLI\u003e\u003cCODE\u003eIPTOS_LOWDELAY (0x10)\u003c/CODE\u003e\u003c/LI\u003e\n \u003c/UL\u003e\n The last low order bit is always ignored as this\n corresponds to the MBZ (must be zero) bit.\n \u003cp\u003e\n Setting bits in the precedence field may result in a\n SocketException indicating that the operation is not\n permitted.\n \u003cp\u003e\n As RFC 1122 section 4.2.4.2 indicates, a compliant TCP\n implementation should, but is not required to, let application\n change the TOS field during the lifetime of a connection.\n So whether the type-of-service field can be changed after the\n TCP connection has been established depends on the implementation\n in the underlying platform. Applications should not assume that\n they can change the TOS field after the connection.\n \u003cp\u003e\n For Internet Protocol v6 {@code tc} is the value that\n would be placed into the sin6_flowinfo field of the IP header.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"tc","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTrafficClass","comment":"Gets traffic class or type-of-service in the IP header\n for packets sent from this Socket\n \u003cp\u003e\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using {@link #setTrafficClass(int)}\n this method may return a different value than was previously\n set using the {@link #setTrafficClass(int)} method on this Socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setReuseAddress","comment":"Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}\n socket option.\n \u003cp\u003e\n When a TCP connection is closed the connection may remain\n in a timeout state for a period of time after the connection\n is closed (typically known as the {@code TIME_WAIT} state\n or {@code 2MSL} wait state).\n For applications using a well known socket address or port\n it may not be possible to bind a socket to the required\n {@code SocketAddress} if there is a connection in the\n timeout state involving the socket address or port.\n \u003cp\u003e\n Enabling {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}\n prior to binding the socket using {@link #bind(SocketAddress)} allows\n the socket to be bound even though a previous connection is in a timeout\n state.\n \u003cp\u003e\n When a {@code Socket} is created the initial setting\n of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is disabled.\n \u003cp\u003e\n The behaviour when {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is\n enabled or disabled after a socket is bound (See {@link #isBound()})\n is not defined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getReuseAddress","comment":"Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this socket.\n \u003cp\u003e\n Any thread currently blocked in an I/O operation upon this socket\n will throw a {@link SocketException}.\n \u003cp\u003e\n Once a socket has been closed, it is not available for further networking\n use (i.e. can\u0027t be reconnected or rebound). A new socket needs to be\n created.\n\n \u003cp\u003e Closing this socket will also close the socket\u0027s\n {@link java.io.InputStream InputStream} and\n {@link java.io.OutputStream OutputStream}.\n\n \u003cp\u003e If this socket has an associated channel then the channel is closed\n as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownInput","comment":"Places the input stream for this socket at \"end of stream\".\n Any data sent to the input stream side of the socket is acknowledged\n and then silently discarded.\n \u003cp\u003e\n If you read from a socket input stream after invoking this method on the\n socket, the stream\u0027s {@code available} method will return 0, and its\n {@code read} methods will return {@code -1} (end of stream).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownOutput","comment":"Disables the output stream for this socket.\n For a TCP socket, any previously written data will be sent\n followed by TCP\u0027s normal connection termination sequence.\n\n If you write to a socket output stream after invoking\n shutdownOutput() on the socket, the stream will throw\n an IOException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Converts this socket to a {@code String}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isConnected","comment":"Returns the connection state of the socket.\n \u003cp\u003e\n Note: Closing a socket doesn\u0027t clear its connection state, which means\n this method will return {@code true} for a closed socket\n (see {@link #isClosed()}) if it was successfuly connected prior\n to being closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isBound","comment":"Returns the binding state of the socket.\n \u003cp\u003e\n Note: Closing a socket doesn\u0027t clear its binding state, which means\n this method will return {@code true} for a closed socket\n (see {@link #isClosed()}) if it was successfuly bound prior\n to being closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isClosed","comment":"Returns the closed state of the socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isInputShutdown","comment":"Returns whether the read-half of the socket connection is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isOutputShutdown","comment":"Returns whether the write-half of the socket connection is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSocketImplFactory","comment":"Sets the client socket implementation factory for the\n application. The factory can be specified only once.\n \u003cp\u003e\n When an application creates a new client socket, the socket\n implementation factory\u0027s {@code createSocketImpl} method is\n called to create the actual socket implementation.\n \u003cp\u003e\n Passing {@code null} to the method is a no-op unless the factory\n was already set.\n \u003cp\u003eIf there is a security manager, this method first calls\n the security manager\u0027s {@code checkSetFactory} method\n to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketImplFactory)","flatSignature":"(SocketImplFactory)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"fac","type":{"isPrimitive":false,"simpleName":"SocketImplFactory","qualifiedName":"java.net.SocketImplFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setPerformancePreferences","comment":"Sets performance preferences for this socket.\n\n \u003cp\u003e Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n \u003cp\u003e Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences. Negative\n values represent a lower priority than positive values. If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n {@code (1, 0, 0)}.  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values {@code (0, 1, 2)}.\n\n \u003cp\u003e Invoking this method after this socket has been connected\n will have no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"connectionTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"latency","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"bandwidth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}