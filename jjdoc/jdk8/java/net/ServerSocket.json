{"name":"ServerSocket","comment":"This class implements server sockets. A server socket waits for\n requests to come in over the network. It performs some operation\n based on that request, and then possibly returns a result to the requester.\n \u003cp\u003e\n The actual work of the server socket is performed by an instance\n of the {@code SocketImpl} class. An application can\n change the socket factory that creates the socket\n implementation to configure itself to create sockets\n appropriate to the local firewall.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ServerSocket","qualifiedName":"java.net.ServerSocket","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":["java.io.Closeable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ServerSocket","comment":"Creates an unbound server socket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ServerSocket","comment":"Creates a server socket, bound to the specified port. A port number\n of {@code 0} means that the port number is automatically\n allocated, typically from an ephemeral port range. This port\n number can then be retrieved by calling {@link #getLocalPort getLocalPort}.\n \u003cp\u003e\n The maximum queue length for incoming connection indications (a\n request to connect) is set to {@code 50}. If a connection\n indication arrives when the queue is full, the connection is refused.\n \u003cp\u003e\n If the application has specified a server socket factory, that\n factory\u0027s {@code createSocketImpl} method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \u003cp\u003e\n If there is a security manager,\n its {@code checkListen} method is called\n with the {@code port} argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ServerSocket","comment":"Creates a server socket and binds it to the specified local port\n number, with the specified backlog.\n A port number of {@code 0} means that the port number is\n automatically allocated, typically from an ephemeral port range.\n This port number can then be retrieved by calling\n {@link #getLocalPort getLocalPort}.\n \u003cp\u003e\n The maximum queue length for incoming connection indications (a\n request to connect) is set to the {@code backlog} parameter. If\n a connection indication arrives when the queue is full, the\n connection is refused.\n \u003cp\u003e\n If the application has specified a server socket factory, that\n factory\u0027s {@code createSocketImpl} method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \u003cp\u003e\n If there is a security manager,\n its {@code checkListen} method is called\n with the {@code port} argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n\n The {@code backlog} argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than {@code 0}. If it is less than or equal to\n {@code 0}, then an implementation specific default will be used.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"backlog","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ServerSocket","comment":"Create a server with the specified port, listen backlog, and\n local IP address to bind to.  The \u003ci\u003ebindAddr\u003c/i\u003e argument\n can be used on a multi-homed host for a ServerSocket that\n will only accept connect requests to one of its addresses.\n If \u003ci\u003ebindAddr\u003c/i\u003e is null, it will default accepting\n connections on any/all local addresses.\n The port must be between 0 and 65535, inclusive.\n A port number of {@code 0} means that the port number is\n automatically allocated, typically from an ephemeral port range.\n This port number can then be retrieved by calling\n {@link #getLocalPort getLocalPort}.\n\n \u003cP\u003eIf there is a security manager, this method\n calls its {@code checkListen} method\n with the {@code port} argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n\n The {@code backlog} argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than {@code 0}. If it is less than or equal to\n {@code 0}, then an implementation specific default will be used.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, java.net.InetAddress)","flatSignature":"(int, int, InetAddress)","parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"backlog","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"bindAddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"bind","comment":"Binds the {@code ServerSocket} to a specific address\n (IP address and port number).\n \u003cp\u003e\n If the address is {@code null}, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endpoint","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bind","comment":"Binds the {@code ServerSocket} to a specific address\n (IP address and port number).\n \u003cp\u003e\n If the address is {@code null}, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n \u003cP\u003e\n The {@code backlog} argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than {@code 0}. If it is less than or equal to\n {@code 0}, then an implementation specific default will be used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress, int)","flatSignature":"(SocketAddress, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endpoint","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}},{"name":"backlog","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInetAddress","comment":"Returns the local address of this server socket.\n \u003cp\u003e\n If the socket was bound prior to being {@link #close closed},\n then this method will continue to return the local address\n after the socket is closed.\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n the {@link InetAddress#getLoopbackAddress loopback} address is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalPort","comment":"Returns the port number on which this socket is listening.\n \u003cp\u003e\n If the socket was bound prior to being {@link #close closed},\n then this method will continue to return the port number\n after the socket is closed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalSocketAddress","comment":"Returns the address of the endpoint this socket is bound to.\n \u003cp\u003e\n If the socket was bound prior to being {@link #close closed},\n then this method will continue to return the address of the endpoint\n after the socket is closed.\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n {@link InetAddress#getLoopbackAddress loopback} address and the local\n port to which the socket is bound is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"accept","comment":"Listens for a connection to be made to this socket and accepts\n it. The method blocks until a connection is made.\n\n \u003cp\u003eA new Socket {@code s} is created and, if there\n is a security manager,\n the security manager\u0027s {@code checkAccept} method is called\n with {@code s.getInetAddress().getHostAddress()} and\n {@code s.getPort()}\n as its arguments to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Socket","qualifiedName":"java.net.Socket","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this socket.\n\n Any thread currently blocked in {@link #accept()} will throw\n a {@link SocketException}.\n\n \u003cp\u003e If this socket has an associated channel then the channel is closed\n as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChannel","comment":"Returns the unique {@link java.nio.channels.ServerSocketChannel} object\n associated with this socket, if any.\n\n \u003cp\u003e A server socket will have a channel if, and only if, the channel\n itself was created via the {@link\n java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open}\n method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isBound","comment":"Returns the binding state of the ServerSocket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isClosed","comment":"Returns the closed state of the ServerSocket.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSoTimeout","comment":"Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} with the\n specified timeout, in milliseconds.  With this option set to a non-zero\n timeout, a call to accept() for this ServerSocket\n will block for only this amount of time.  If the timeout expires,\n a \u003cB\u003ejava.net.SocketTimeoutException\u003c/B\u003e is raised, though the\n ServerSocket is still valid.  The option \u003cB\u003emust\u003c/B\u003e be enabled\n prior to entering the blocking operation to have effect.  The\n timeout must be {@code \u003e 0}.\n A timeout of zero is interpreted as an infinite timeout.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSoTimeout","comment":"Retrieve setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}.\n 0 returns implies that the option is disabled (i.e., timeout of infinity).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setReuseAddress","comment":"Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}\n socket option.\n \u003cp\u003e\n When a TCP connection is closed the connection may remain\n in a timeout state for a period of time after the connection\n is closed (typically known as the {@code TIME_WAIT} state\n or {@code 2MSL} wait state).\n For applications using a well known socket address or port\n it may not be possible to bind a socket to the required\n {@code SocketAddress} if there is a connection in the\n timeout state involving the socket address or port.\n \u003cp\u003e\n Enabling {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} prior to\n binding the socket using {@link #bind(SocketAddress)} allows the socket\n to be bound even though a previous connection is in a timeout state.\n \u003cp\u003e\n When a {@code ServerSocket} is created the initial setting\n of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is not defined.\n Applications can use {@link #getReuseAddress()} to determine the initial\n setting of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}.\n \u003cp\u003e\n The behaviour when {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is\n enabled or disabled after a socket is bound (See {@link #isBound()})\n is not defined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getReuseAddress","comment":"Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns the implementation address and implementation port of\n this socket as a {@code String}.\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n an {@code InetAddress} representing the\n {@link InetAddress#getLoopbackAddress loopback} address is returned as\n the implementation address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSocketFactory","comment":"Sets the server socket implementation factory for the\n application. The factory can be specified only once.\n \u003cp\u003e\n When an application creates a new server socket, the socket\n implementation factory\u0027s {@code createSocketImpl} method is\n called to create the actual socket implementation.\n \u003cp\u003e\n Passing {@code null} to the method is a no-op unless the factory\n was already set.\n \u003cp\u003e\n If there is a security manager, this method first calls\n the security manager\u0027s {@code checkSetFactory} method\n to ensure the operation is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketImplFactory)","flatSignature":"(SocketImplFactory)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"fac","type":{"isPrimitive":false,"simpleName":"SocketImplFactory","qualifiedName":"java.net.SocketImplFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setReceiveBufferSize","comment":"Sets a default proposed value for the\n {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for sockets\n accepted from this {@code ServerSocket}. The value actually set\n in the accepted socket must be determined by calling\n {@link Socket#getReceiveBufferSize()} after the socket\n is returned by {@link #accept()}.\n \u003cp\u003e\n The value of {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is used both to\n set the size of the internal socket receive buffer, and to set the size\n of the TCP receive window that is advertized to the remote peer.\n \u003cp\u003e\n It is possible to change the value subsequently, by calling\n {@link Socket#setReceiveBufferSize(int)}. However, if the application\n wishes to allow a receive window larger than 64K bytes, as defined by RFC1323\n then the proposed value must be set in the ServerSocket \u003cB\u003ebefore\u003c/B\u003e\n it is bound to a local address. This implies, that the ServerSocket must be\n created with the no-argument constructor, then setReceiveBufferSize() must\n be called and lastly the ServerSocket is bound to an address by calling bind().\n \u003cp\u003e\n Failure to do this will not cause an error, and the buffer size may be set to the\n requested value but the TCP receive window in sockets accepted from\n this ServerSocket will be no larger than 64K bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getReceiveBufferSize","comment":"Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option\n for this {@code ServerSocket}, that is the proposed buffer size that\n will be used for Sockets accepted from this {@code ServerSocket}.\n\n \u003cp\u003eNote, the value actually set in the accepted socket is determined by\n calling {@link Socket#getReceiveBufferSize()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPerformancePreferences","comment":"Sets performance preferences for this ServerSocket.\n\n \u003cp\u003e Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n \u003cp\u003e Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences.  If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n {@code (1, 0, 0)}.  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values {@code (0, 1, 2)}.\n\n \u003cp\u003e Invoking this method after this socket has been bound\n will have no effect. This implies that in order to use this capability\n requires the socket to be created with the no-argument constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"connectionTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"latency","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"bandwidth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}