{"name":"InetAddress","comment":"This class represents an Internet Protocol (IP) address.\n\n \u003cp\u003e An IP address is either a 32-bit or 128-bit unsigned number\n used by IP, a lower-level protocol on which protocols like UDP and\n TCP are built. The IP address architecture is defined by \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc790.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;790:\n Assigned Numbers\u003c/i\u003e\u003c/a\u003e, \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc1918.txt\"\u003e \u003ci\u003eRFC\u0026nbsp;1918:\n Address Allocation for Private Internets\u003c/i\u003e\u003c/a\u003e, \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2365.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2365:\n Administratively Scoped IP Multicast\u003c/i\u003e\u003c/a\u003e, and \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2373: IP\n Version 6 Addressing Architecture\u003c/i\u003e\u003c/a\u003e. An instance of an\n InetAddress consists of an IP address and possibly its\n corresponding host name (depending on whether it is constructed\n with a host name or whether it has already done reverse host name\n resolution).\n\n \u003ch3\u003e Address types \u003c/h3\u003e\n\n \u003cblockquote\u003e\u003ctable cellspacing\u003d2 summary\u003d\"Description of unicast and multicast address types\"\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003eunicast\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eAn identifier for a single interface. A packet sent to\n         a unicast address is delivered to the interface identified by\n         that address.\n\n         \u003cp\u003e The Unspecified Address -- Also called anylocal or wildcard\n         address. It must never be assigned to any node. It indicates the\n         absence of an address. One example of its use is as the target of\n         bind, which allows a server to accept a client connection on any\n         interface, in case the server host has multiple interfaces.\n\n         \u003cp\u003e The \u003ci\u003eunspecified\u003c/i\u003e address must not be used as\n         the destination address of an IP packet.\n\n         \u003cp\u003e The \u003ci\u003eLoopback\u003c/i\u003e Addresses -- This is the address\n         assigned to the loopback interface. Anything sent to this\n         IP address loops around and becomes IP input on the local\n         host. This address is often used when testing a\n         client.\u003c/td\u003e\u003c/tr\u003e\n   \u003ctr\u003e\u003cth valign\u003dtop\u003e\u003ci\u003emulticast\u003c/i\u003e\u003c/th\u003e\n       \u003ctd\u003eAn identifier for a set of interfaces (typically belonging\n         to different nodes). A packet sent to a multicast address is\n         delivered to all interfaces identified by that address.\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003ch4\u003e IP address scope \u003c/h4\u003e\n\n \u003cp\u003e \u003ci\u003eLink-local\u003c/i\u003e addresses are designed to be used for addressing\n on a single link for purposes such as auto-address configuration,\n neighbor discovery, or when no routers are present.\n\n \u003cp\u003e \u003ci\u003eSite-local\u003c/i\u003e addresses are designed to be used for addressing\n inside of a site without the need for a global prefix.\n\n \u003cp\u003e \u003ci\u003eGlobal\u003c/i\u003e addresses are unique across the internet.\n\n \u003ch4\u003e Textual representation of IP addresses \u003c/h4\u003e\n\n The textual representation of an IP address is address family specific.\n\n \u003cp\u003e\n\n For IPv4 address format, please refer to \u003cA\n HREF\u003d\"Inet4Address.html#format\"\u003eInet4Address#format\u003c/A\u003e; For IPv6\n address format, please refer to \u003cA\n HREF\u003d\"Inet6Address.html#format\"\u003eInet6Address#format\u003c/A\u003e.\n\n \u003cP\u003eThere is a \u003ca href\u003d\"doc-files/net-properties.html#Ipv4IPv6\"\u003ecouple of\n System Properties\u003c/a\u003e affecting how IPv4 and IPv6 addresses are used.\u003c/P\u003e\n\n \u003ch4\u003e Host Name Resolution \u003c/h4\u003e\n\n Host name-to-IP address \u003ci\u003eresolution\u003c/i\u003e is accomplished through\n the use of a combination of local machine configuration information\n and network naming services such as the Domain Name System (DNS)\n and Network Information Service(NIS). The particular naming\n services(s) being used is by default the local machine configured\n one. For any host name, its corresponding IP address is returned.\n\n \u003cp\u003e \u003ci\u003eReverse name resolution\u003c/i\u003e means that for any IP address,\n the host associated with the IP address is returned.\n\n \u003cp\u003e The InetAddress class provides methods to resolve host names to\n their IP addresses and vice versa.\n\n \u003ch4\u003e InetAddress Caching \u003c/h4\u003e\n\n The InetAddress class has a cache to store successful as well as\n unsuccessful host name resolutions.\n\n \u003cp\u003e By default, when a security manager is installed, in order to\n protect against DNS spoofing attacks,\n the result of positive host name resolutions are\n cached forever. When a security manager is not installed, the default\n behavior is to cache entries for a finite (implementation dependent)\n period of time. The result of unsuccessful host\n name resolution is cached for a very short period of time (10\n seconds) to improve performance.\n\n \u003cp\u003e If the default behavior is not desired, then a Java security property\n can be set to a different Time-to-live (TTL) value for positive\n caching. Likewise, a system admin can configure a different\n negative caching TTL value when needed.\n\n \u003cp\u003e Two Java security properties control the TTL values used for\n  positive and negative host name resolution caching:\n\n \u003cblockquote\u003e\n \u003cdl\u003e\n \u003cdt\u003e\u003cb\u003enetworkaddress.cache.ttl\u003c/b\u003e\u003c/dt\u003e\n \u003cdd\u003eIndicates the caching policy for successful name lookups from\n the name service. The value is specified as as integer to indicate\n the number of seconds to cache the successful lookup. The default\n setting is to cache for an implementation specific period of time.\n \u003cp\u003e\n A value of -1 indicates \"cache forever\".\n \u003c/dd\u003e\n \u003cdt\u003e\u003cb\u003enetworkaddress.cache.negative.ttl\u003c/b\u003e (default: 10)\u003c/dt\u003e\n \u003cdd\u003eIndicates the caching policy for un-successful name lookups\n from the name service. The value is specified as as integer to\n indicate the number of seconds to cache the failure for\n un-successful lookups.\n \u003cp\u003e\n A value of 0 indicates \"never cache\".\n A value of -1 indicates \"cache forever\".\n \u003c/dd\u003e\n \u003c/dl\u003e\n \u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{},"package":"java.net","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"isMulticastAddress","comment":"Utility routine to check if the InetAddress is an\n IP multicast address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAnyLocalAddress","comment":"Utility routine to check if the InetAddress in a wildcard address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLoopbackAddress","comment":"Utility routine to check if the InetAddress is a loopback address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLinkLocalAddress","comment":"Utility routine to check if the InetAddress is an link local address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSiteLocalAddress","comment":"Utility routine to check if the InetAddress is a site local address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCGlobal","comment":"Utility routine to check if the multicast address has global scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCNodeLocal","comment":"Utility routine to check if the multicast address has node scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCLinkLocal","comment":"Utility routine to check if the multicast address has link scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCSiteLocal","comment":"Utility routine to check if the multicast address has site scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMCOrgLocal","comment":"Utility routine to check if the multicast address has organization scope.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isReachable","comment":"Test whether that address is reachable. Best effort is made by the\n implementation to try to reach the host, but firewalls and server\n configuration may block requests resulting in a unreachable status\n while some specific ports may be accessible.\n A typical implementation will use ICMP ECHO REQUESTs if the\n privilege can be obtained, otherwise it will try to establish\n a TCP connection on port 7 (Echo) of the destination host.\n \u003cp\u003e\n The timeout value, in milliseconds, indicates the maximum amount of time\n the try should take. If the operation times out before getting an\n answer, the host is deemed unreachable. A negative value will result\n in an IllegalArgumentException being thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isReachable","comment":"Test whether that address is reachable. Best effort is made by the\n implementation to try to reach the host, but firewalls and server\n configuration may block requests resulting in a unreachable status\n while some specific ports may be accessible.\n A typical implementation will use ICMP ECHO REQUESTs if the\n privilege can be obtained, otherwise it will try to establish\n a TCP connection on port 7 (Echo) of the destination host.\n \u003cp\u003e\n The {@code network interface} and {@code ttl} parameters\n let the caller specify which network interface the test will go through\n and the maximum number of hops the packets should go through.\n A negative value for the {@code ttl} will result in an\n IllegalArgumentException being thrown.\n \u003cp\u003e\n The timeout value, in milliseconds, indicates the maximum amount of time\n the try should take. If the operation times out before getting an\n answer, the host is deemed unreachable. A negative value will result\n in an IllegalArgumentException being thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.NetworkInterface, int, int)","flatSignature":"(NetworkInterface, int, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"netif","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}},{"name":"ttl","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getHostName","comment":"Gets the host name for this IP address.\n\n \u003cp\u003eIf this InetAddress was created with a host name,\n this host name will be remembered and returned;\n otherwise, a reverse name lookup will be performed\n and the result will be returned based on the system\n configured name lookup service. If a lookup of the name service\n is required, call\n {@link #getCanonicalHostName() getCanonicalHostName}.\n\n \u003cp\u003eIf there is a security manager, its\n {@code checkConnect} method is first called\n with the hostname and {@code -1}\n as its arguments to see if the operation is allowed.\n If the operation is not allowed, it will return\n the textual representation of the IP address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCanonicalHostName","comment":"Gets the fully qualified domain name for this IP address.\n Best effort method, meaning we may not be able to return\n the FQDN depending on the underlying system configuration.\n\n \u003cp\u003eIf there is a security manager, this method first\n calls its {@code checkConnect} method\n with the hostname and {@code -1}\n as its arguments to see if the calling code is allowed to know\n the hostname for this IP address, i.e., to connect to the host.\n If the operation is not allowed, it will return\n the textual representation of the IP address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAddress","comment":"Returns the raw IP address of this {@code InetAddress}\n object. The result is in network byte order: the highest order\n byte of the address is in {@code getAddress()[0]}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHostAddress","comment":"Returns the IP address string in textual presentation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode for this IP address.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object against the specified object.\n The result is {@code true} if and only if the argument is\n not {@code null} and it represents the same IP address as\n this object.\n \u003cp\u003e\n Two instances of {@code InetAddress} represent the same IP\n address if the length of the byte arrays returned by\n {@code getAddress} is the same for both, and each of the\n array components is the same for the byte arrays.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Converts this IP address to a {@code String}. The\n string returned is of the form: hostname / literal IP\n address.\n\n If the host name is unresolved, no reverse name service lookup\n is performed. The hostname part will be represented by an empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getByAddress","comment":"Creates an InetAddress based on the provided host name and IP address.\n No name service is checked for the validity of the address.\n\n \u003cp\u003e The host name can either be a machine name, such as\n \"{@code java.sun.com}\", or a textual representation of its IP\n address.\n \u003cp\u003e No validity checking is done on the host name either.\n\n \u003cp\u003e If addr specifies an IPv4 address an instance of Inet4Address\n will be returned; otherwise, an instance of Inet6Address\n will be returned.\n\n \u003cp\u003e IPv4 address byte array must be 4 bytes long and IPv6 byte array\n must be 16 bytes long","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[])","flatSignature":"(String, byte[])","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"addr","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getByName","comment":"Determines the IP address of a host, given the host\u0027s name.\n\n \u003cp\u003e The host name can either be a machine name, such as\n \"{@code java.sun.com}\", or a textual representation of its\n IP address. If a literal IP address is supplied, only the\n validity of the address format is checked.\n\n \u003cp\u003e For {@code host} specified in literal IPv6 address,\n either the form defined in RFC 2732 or the literal IPv6 address\n format defined in RFC 2373 is accepted. IPv6 scoped addresses are also\n supported. See \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e for a description of IPv6\n scoped addresses.\n\n \u003cp\u003e If the host is {@code null} then an {@code InetAddress}\n representing an address of the loopback interface is returned.\n See \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3330.txt\"\u003eRFC\u0026nbsp;3330\u003c/a\u003e\n section\u0026nbsp;2 and \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003eRFC\u0026nbsp;2373\u003c/a\u003e\n section\u0026nbsp;2.5.3. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAllByName","comment":"Given the name of a host, returns an array of its IP addresses,\n based on the configured name service on the system.\n\n \u003cp\u003e The host name can either be a machine name, such as\n \"{@code java.sun.com}\", or a textual representation of its IP\n address. If a literal IP address is supplied, only the\n validity of the address format is checked.\n\n \u003cp\u003e For {@code host} specified in \u003ci\u003eliteral IPv6 address\u003c/i\u003e,\n either the form defined in RFC 2732 or the literal IPv6 address\n format defined in RFC 2373 is accepted. A literal IPv6 address may\n also be qualified by appending a scoped zone identifier or scope_id.\n The syntax and usage of scope_ids is described\n \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e.\n \u003cp\u003e If the host is {@code null} then an {@code InetAddress}\n representing an address of the loopback interface is returned.\n See \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3330.txt\"\u003eRFC\u0026nbsp;3330\u003c/a\u003e\n section\u0026nbsp;2 and \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2373.txt\"\u003eRFC\u0026nbsp;2373\u003c/a\u003e\n section\u0026nbsp;2.5.3. \u003c/p\u003e\n\n \u003cp\u003e If there is a security manager and {@code host} is not\n null and {@code host.length() } is not equal to zero, the\n security manager\u0027s\n {@code checkConnect} method is called\n with the hostname and {@code -1}\n as its arguments to see if the operation is allowed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLoopbackAddress","comment":"Returns the loopback address.\n \u003cp\u003e\n The InetAddress returned will represent the IPv4\n loopback address, 127.0.0.1, or the IPv6 loopback\n address, ::1. The IPv4 loopback address returned\n is only one of many in the form 127.*.*.*","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getByAddress","comment":"Returns an {@code InetAddress} object given the raw IP address .\n The argument is in network byte order: the highest order\n byte of the address is in {@code getAddress()[0]}.\n\n \u003cp\u003e This method doesn\u0027t block, i.e. no reverse name service lookup\n is performed.\n\n \u003cp\u003e IPv4 address byte array must be 4 bytes long and IPv6 byte array\n must be 16 bytes long","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"addr","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getLocalHost","comment":"Returns the address of the local host. This is achieved by retrieving\n the name of the host from the system, then resolving that name into\n an {@code InetAddress}.\n\n \u003cP\u003eNote: The resolved address may be cached for a short period of time.\n \u003c/P\u003e\n\n \u003cp\u003eIf there is a security manager, its\n {@code checkConnect} method is called\n with the local host name and {@code -1}\n as its arguments to see if the operation is allowed.\n If the operation is not allowed, an InetAddress representing\n the loopback address is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.net.Inet6Address","java.net.Inet4Address"],"enumConstants":[]}