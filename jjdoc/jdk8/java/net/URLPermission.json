{"name":"URLPermission","comment":"Represents permission to access a resource or set of resources defined by a\n given url, and for a given set of user-settable request methods\n and request headers. The \u003ci\u003ename\u003c/i\u003e of the permission is the url string.\n The \u003ci\u003eactions\u003c/i\u003e string is a concatenation of the request methods and headers.\n The range of method and header names is not restricted by this class.\n \u003cp\u003e\u003cb\u003eThe url\u003c/b\u003e\u003cp\u003e\n The url string has the following expected structure.\n \u003cpre\u003e\n     scheme : // authority [ / path ]\n \u003c/pre\u003e\n \u003ci\u003escheme\u003c/i\u003e will typically be http or https, but is not restricted by this\n class.\n \u003ci\u003eauthority\u003c/i\u003e is specified as:\n \u003cpre\u003e\n     authority \u003d [ userinfo @ ] hostrange [ : portrange ]\n     portrange \u003d portnumber | -portnumber | portnumber-[portnumber] | *\n     hostrange \u003d ([*.] dnsname) | IPv4address | IPv6address\n \u003c/pre\u003e\n \u003ci\u003ednsname\u003c/i\u003e is a standard DNS host or domain name, ie. one or more labels\n separated by \".\". \u003ci\u003eIPv4address\u003c/i\u003e is a standard literal IPv4 address and\n \u003ci\u003eIPv6address\u003c/i\u003e is as defined in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e\n RFC 2732\u003c/a\u003e. Literal IPv6 addresses must however, be enclosed in \u0027[]\u0027 characters.\n The \u003ci\u003ednsname\u003c/i\u003e specification can be preceded by \"*.\" which means\n the name will match any hostname whose right-most domain labels are the same as\n this name. For example, \"*.oracle.com\" matches \"foo.bar.oracle.com\"\n \u003cp\u003e\n \u003ci\u003eportrange\u003c/i\u003e is used to specify a port number, or a bounded or unbounded range of ports\n that this permission applies to. If portrange is absent or invalid, then a default\n port number is assumed if the scheme is {@code http} (default 80) or {@code https}\n (default 443). No default is assumed for other schemes. A wildcard may be specified\n which means all ports.\n \u003cp\u003e\n \u003ci\u003euserinfo\u003c/i\u003e is optional. A userinfo component if present, is ignored when\n creating a URLPermission, and has no effect on any other methods defined by this class.\n \u003cp\u003e\n The \u003ci\u003epath\u003c/i\u003e component comprises a sequence of path segments,\n separated by \u0027/\u0027 characters. \u003ci\u003epath\u003c/i\u003e may also be empty. The path is specified\n in a similar way to the path in {@link java.io.FilePermission}. There are\n three different ways as the following examples show:\n \u003ctable border\u003e\n \u003ccaption\u003eURL Examples\u003c/caption\u003e\n \u003ctr\u003e\u003cth\u003eExample url\u003c/th\u003e\u003cth\u003eDescription\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd style\u003d\"white-space:nowrap;\"\u003ehttp://www.oracle.com/a/b/c.html\u003c/td\u003e\n   \u003ctd\u003eA url which identifies a specific (single) resource\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ehttp://www.oracle.com/a/b/*\u003c/td\u003e\n   \u003ctd\u003eThe \u0027*\u0027 character refers to all resources in the same \"directory\" - in\n       other words all resources with the same number of path components, and\n       which only differ in the final path component, represented by the \u0027*\u0027.\n   \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ehttp://www.oracle.com/a/b/-\u003c/td\u003e\n   \u003ctd\u003eThe \u0027-\u0027 character refers to all resources recursively below the\n       preceding path (eg. http://www.oracle.com/a/b/c/d/e.html matches this\n       example).\n   \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n The \u0027*\u0027 and \u0027-\u0027 may only be specified in the final segment of a path and must be\n the only character in that segment. Any query or fragment components of the\n url are ignored when constructing URLPermissions.\n \u003cp\u003e\n As a special case, urls of the form, \"scheme:*\" are accepted to\n mean any url of the given scheme.\n \u003cp\u003e\n The \u003ci\u003escheme\u003c/i\u003e and \u003ci\u003eauthority\u003c/i\u003e components of the url string are handled\n without regard to case. This means {@link #equals(Object)},\n {@link #hashCode()} and {@link #implies(Permission)} are case insensitive with respect\n to these components. If the \u003ci\u003eauthority\u003c/i\u003e contains a literal IP address,\n then the address is normalized for comparison. The path component is case sensitive.\n \u003cp\u003e\u003cb\u003eThe actions string\u003c/b\u003e\u003cp\u003e\n The actions string of a URLPermission is a concatenation of the \u003ci\u003emethod list\u003c/i\u003e\n and the \u003ci\u003erequest headers list\u003c/i\u003e. These are lists of the permitted request\n methods and permitted request headers of the permission (respectively). The two lists\n are separated by a colon \u0027:\u0027 character and elements of each list are comma separated.\n Some examples are:\n \u003cpre\u003e\n         \"POST,GET,DELETE\"\n         \"GET:X-Foo-Request,X-Bar-Request\"\n         \"POST,GET:Header1,Header2\"\n \u003c/pre\u003e\n The first example specifies the methods: POST, GET and DELETE, but no request headers.\n The second example specifies one request method and two headers. The third\n example specifies two request methods, and two headers.\n \u003cp\u003e\n The colon separator need not be present if the request headers list is empty.\n No white-space is permitted in the actions string. The action strings supplied to\n the URLPermission constructors are case-insensitive and are normalized by converting\n method names to upper-case and header names to the form defines in RFC2616 (lower case\n with initial letter of each word capitalized). Either list can contain a wild-card \u0027*\u0027\n character which signifies all request methods or headers respectively.\n \u003cp\u003e\n Note. Depending on the context of use, some request methods and headers may be permitted\n at all times, and others may not be permitted at any time. For example, the\n HTTP protocol handler might disallow certain headers such as Content-Length\n from being set by application code, regardless of whether the security policy\n in force, permits it.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"URLPermission","qualifiedName":"java.net.URLPermission","dimension":"","elementType":{},"package":"java.net","superclass":"java.security.Permission","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"URLPermission","comment":"Creates a new URLPermission from a url string and which permits the given\n request methods and user-settable request headers.\n The name of the permission is the url string it was created with. Only the scheme,\n authority and path components of the url are used internally. Any fragment or query\n components are ignored. The permissions action string is as specified above.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"url","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"actions","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"URLPermission","comment":"Creates a URLPermission with the given url string and unrestricted\n methods and request headers by invoking the two argument\n constructor as follows: URLPermission(url, \"*:*\")","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"url","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getActions","comment":"Returns the normalized method list and request\n header list, in the form:\n \u003cpre\u003e\n      \"method-names : header-names\"\n \u003c/pre\u003e\n \u003cp\u003e\n where method-names is the list of methods separated by commas\n and header-names is the list of permitted headers separated by commas.\n There is no white space in the returned String. If header-names is empty\n then the colon separator will not be present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"implies","comment":"Checks if this URLPermission implies the given permission.\n Specifically, the following checks are done as if in the\n following sequence:\n \u003cul\u003e\n \u003cli\u003eif \u0027p\u0027 is not an instance of URLPermission return false\u003c/li\u003e\n \u003cli\u003eif any of p\u0027s methods are not in this\u0027s method list, and if\n     this\u0027s method list is not equal to \"*\", then return false.\u003c/li\u003e\n \u003cli\u003eif any of p\u0027s headers are not in this\u0027s request header list, and if\n     this\u0027s request header list is not equal to \"*\", then return false.\u003c/li\u003e\n \u003cli\u003eif this\u0027s url scheme is not equal to p\u0027s url scheme return false\u003c/li\u003e\n \u003cli\u003eif the scheme specific part of this\u0027s url is \u0027*\u0027 return true\u003c/li\u003e\n \u003cli\u003eif the set of hosts defined by p\u0027s url hostrange is not a subset of\n     this\u0027s url hostrange then return false. For example, \"*.foo.oracle.com\"\n     is a subset of \"*.oracle.com\". \"foo.bar.oracle.com\" is not\n     a subset of \"*.foo.oracle.com\"\u003c/li\u003e\n \u003cli\u003eif the portrange defined by p\u0027s url is not a subset of the\n     portrange defined by this\u0027s url then return false.\n \u003cli\u003eif the path or paths specified by p\u0027s url are contained in the\n     set of paths specified by this\u0027s url, then return true\n \u003cli\u003eotherwise, return false\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003eSome examples of how paths are matched are shown below:\n \u003ctable border\u003e\n \u003ccaption\u003eExamples of Path Matching\u003c/caption\u003e\n \u003ctr\u003e\u003cth\u003ethis\u0027s path\u003c/th\u003e\u003cth\u003ep\u0027s path\u003c/th\u003e\u003cth\u003ematch\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b\u003c/td\u003e\u003ctd\u003e/a/b\u003c/td\u003e\u003ctd\u003eyes\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b/*\u003c/td\u003e\u003ctd\u003e/a/b/c\u003c/td\u003e\u003ctd\u003eyes\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b/*\u003c/td\u003e\u003ctd\u003e/a/b/c/d\u003c/td\u003e\u003ctd\u003eno\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b/-\u003c/td\u003e\u003ctd\u003e/a/b/c/d\u003c/td\u003e\u003ctd\u003eyes\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b/-\u003c/td\u003e\u003ctd\u003e/a/b/c/d/e\u003c/td\u003e\u003ctd\u003eyes\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b/-\u003c/td\u003e\u003ctd\u003e/a/b/c/*\u003c/td\u003e\u003ctd\u003eyes\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e/a/b/*\u003c/td\u003e\u003ctd\u003e/a/b/c/-\u003c/td\u003e\u003ctd\u003eno\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Returns true if, this.getActions().equals(p.getActions())\n and p\u0027s url equals this\u0027s url.  Returns false otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode calculated from the hashcode of the\n actions String and the url string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}