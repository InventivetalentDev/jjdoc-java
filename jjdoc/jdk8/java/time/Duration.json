{"name":"Duration","comment":"A time-based amount of time, such as \u002734.5 seconds\u0027.\n \u003cp\u003e\n This class models a quantity or amount of time in terms of seconds and nanoseconds.\n It can be accessed using other duration-based units, such as minutes and hours.\n In addition, the {@link ChronoUnit#DAYS DAYS} unit can be used and is treated as\n exactly equal to 24 hours, thus ignoring daylight savings effects.\n See {@link Period} for the date-based equivalent to this class.\n \u003cp\u003e\n A physical duration could be of infinite length.\n For practicality, the duration is stored with constraints similar to {@link Instant}.\n The duration uses nanosecond resolution with a maximum value of the seconds that can\n be held in a {@code long}. This is greater than the current estimated age of the universe.\n \u003cp\u003e\n The range of a duration requires the storage of a number larger than a {@code long}.\n To achieve this, the class stores a {@code long} representing seconds and an {@code int}\n representing nanosecond-of-second, which will always be between 0 and 999,999,999.\n The model is of a directed duration, meaning that the duration may be negative.\n \u003cp\u003e\n The duration is measured in \"seconds\", but these are not necessarily identical to\n the scientific \"SI second\" definition based on atomic clocks.\n This difference only impacts durations measured near a leap-second and should not affect\n most applications.\n See {@link Instant} for a discussion as to the meaning of the second and time-scales.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code Duration} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.temporal.TemporalAmount","java.lang.Comparable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"ZERO","comment":"Constant for a duration of zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"ofDays","comment":"Obtains a {@code Duration} representing a number of standard 24 hour days.\n \u003cp\u003e\n The seconds are calculated based on the standard definition of a day,\n where each day is 86400 seconds which implies a 24 hour day.\n The nanosecond in second field is set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofHours","comment":"Obtains a {@code Duration} representing a number of standard hours.\n \u003cp\u003e\n The seconds are calculated based on the standard definition of an hour,\n where each hour is 3600 seconds.\n The nanosecond in second field is set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofMinutes","comment":"Obtains a {@code Duration} representing a number of standard minutes.\n \u003cp\u003e\n The seconds are calculated based on the standard definition of a minute,\n where each minute is 60 seconds.\n The nanosecond in second field is set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofSeconds","comment":"Obtains a {@code Duration} representing a number of seconds.\n \u003cp\u003e\n The nanosecond in second field is set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofSeconds","comment":"Obtains a {@code Duration} representing a number of seconds and an\n adjustment in nanoseconds.\n \u003cp\u003e\n This method allows an arbitrary number of nanoseconds to be passed in.\n The factory will alter the values of the second and nanosecond in order\n to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n For example, the following will result in the exactly the same duration:\n \u003cpre\u003e\n  Duration.ofSeconds(3, 1);\n  Duration.ofSeconds(4, -999_999_999);\n  Duration.ofSeconds(2, 1000_000_001);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanoAdjustment","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofMillis","comment":"Obtains a {@code Duration} representing a number of milliseconds.\n \u003cp\u003e\n The seconds and nanoseconds are extracted from the specified milliseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"millis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofNanos","comment":"Obtains a {@code Duration} representing a number of nanoseconds.\n \u003cp\u003e\n The seconds and nanoseconds are extracted from the specified nanoseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains a {@code Duration} representing an amount in the specified unit.\n \u003cp\u003e\n The parameters represent the two parts of a phrase like \u00276 Hours\u0027. For example:\n \u003cpre\u003e\n  Duration.of(3, SECONDS);\n  Duration.of(465, HOURS);\n \u003c/pre\u003e\n Only a subset of units are accepted by this method.\n The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or\n be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"amount","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code Duration} from a temporal amount.\n \u003cp\u003e\n This obtains a duration based on the specified amount.\n A {@code TemporalAmount} represents an  amount of time, which may be\n date-based or time-based, which this factory extracts to a duration.\n \u003cp\u003e\n The conversion loops around the set of units from the amount and uses\n the {@linkplain TemporalUnit#getDuration() duration} of the unit to\n calculate the total {@code Duration}.\n Only a subset of units are accepted by this method. The unit must either\n have an {@linkplain TemporalUnit#isDurationEstimated() exact duration}\n or be {@link ChronoUnit#DAYS} which is treated as 24 hours.\n If any other units are found then an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains a {@code Duration} from a text string such as {@code PnDTnHnMn.nS}.\n \u003cp\u003e\n This will parse a textual representation of a duration, including the\n string produced by {@code toString()}. The formats accepted are based\n on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days\n considered to be exactly 24 hours.\n \u003cp\u003e\n The string starts with an optional sign, denoted by the ASCII negative\n or positive symbol. If negative, the whole period is negated.\n The ASCII letter \"P\" is next in upper or lower case.\n There are then four sections, each consisting of a number and a suffix.\n The sections have suffixes in ASCII of \"D\", \"H\", \"M\" and \"S\" for\n days, hours, minutes and seconds, accepted in upper or lower case.\n The suffixes must occur in order. The ASCII letter \"T\" must occur before\n the first occurrence, if any, of an hour, minute or second section.\n At least one of the four sections must be present, and if \"T\" is present\n there must be at least one section after the \"T\".\n The number part of each section must consist of one or more ASCII digits.\n The number may be prefixed by the ASCII negative or positive symbol.\n The number of days, hours and minutes must parse to an {@code long}.\n The number of seconds must parse to an {@code long} with optional fraction.\n The decimal point may be either a dot or a comma.\n The fractional part may have from zero to 9 digits.\n \u003cp\u003e\n The leading plus/minus sign, and negative values for other units are\n not part of the ISO-8601 standard.\n \u003cp\u003e\n Examples:\n \u003cpre\u003e\n    \"PT20.345S\" -- parses as \"20.345 seconds\"\n    \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n    \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n    \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n    \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n    \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n    \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n    \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"between","comment":"Obtains a {@code Duration} representing the duration between two temporal objects.\n \u003cp\u003e\n This calculates the duration between two temporal objects. If the objects\n are of different types, then the duration is calculated based on the type\n of the first object. For example, if the first argument is a {@code LocalTime}\n then the second argument is converted to a {@code LocalTime}.\n \u003cp\u003e\n The specified temporal objects must support the {@link ChronoUnit#SECONDS SECONDS} unit.\n For full accuracy, either the {@link ChronoUnit#NANOS NANOS} unit or the\n {@link ChronoField#NANO_OF_SECOND NANO_OF_SECOND} field should be supported.\n \u003cp\u003e\n The result of this method can be a negative period if the end is before the start.\n To guarantee to obtain a positive duration call {@link #abs()} on the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.Temporal)","flatSignature":"(Temporal, Temporal)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"startInclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the requested unit.\n \u003cp\u003e\n This returns a value for each of the two supported units,\n {@link ChronoUnit#SECONDS SECONDS} and {@link ChronoUnit#NANOS NANOS}.\n All other units throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getUnits","comment":"Gets the set of units supported by this duration.\n \u003cp\u003e\n The supported units are {@link ChronoUnit#SECONDS SECONDS},\n and {@link ChronoUnit#NANOS NANOS}.\n They are returned in the order seconds, nanos.\n \u003cp\u003e\n This set can be used in conjunction with {@link #get(TemporalUnit)}\n to access the entire state of the duration.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isZero","comment":"Checks if this duration is zero length.\n \u003cp\u003e\n A {@code Duration} represents a directed distance between two points on\n the time-line and can therefore be positive, zero or negative.\n This method checks whether the length is zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isNegative","comment":"Checks if this duration is negative, excluding zero.\n \u003cp\u003e\n A {@code Duration} represents a directed distance between two points on\n the time-line and can therefore be positive, zero or negative.\n This method checks whether the length is less than zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSeconds","comment":"Gets the number of seconds in this duration.\n \u003cp\u003e\n The length of the duration is stored using two fields - seconds and nanoseconds.\n The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to\n the length in seconds.\n The total duration is defined by calling this method and {@link #getNano()}.\n \u003cp\u003e\n A {@code Duration} represents a directed distance between two points on the time-line.\n A negative duration is expressed by the negative sign of the seconds part.\n A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNano","comment":"Gets the number of nanoseconds within the second in this duration.\n \u003cp\u003e\n The length of the duration is stored using two fields - seconds and nanoseconds.\n The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to\n the length in seconds.\n The total duration is defined by calling this method and {@link #getSeconds()}.\n \u003cp\u003e\n A {@code Duration} represents a directed distance between two points on the time-line.\n A negative duration is expressed by the negative sign of the seconds part.\n A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withSeconds","comment":"Returns a copy of this duration with the specified amount of seconds.\n \u003cp\u003e\n This returns a duration with the specified seconds, retaining the\n nano-of-second part of this duration.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withNanos","comment":"Returns a copy of this duration with the specified nano-of-second.\n \u003cp\u003e\n This returns a duration with the specified nano-of-second, retaining the\n seconds part of this duration.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this duration with the specified duration added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Duration)","flatSignature":"(Duration)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"duration","type":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this duration with the specified duration added.\n \u003cp\u003e\n The duration amount is measured in terms of the specified unit.\n Only a subset of units are accepted by this method.\n The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or\n be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusDays","comment":"Returns a copy of this duration with the specified duration in standard 24 hour days added.\n \u003cp\u003e\n The number of days is multiplied by 86400 to obtain the number of seconds to add.\n This is based on the standard definition of a day as 24 hours.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daysToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusHours","comment":"Returns a copy of this duration with the specified duration in hours added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hoursToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMinutes","comment":"Returns a copy of this duration with the specified duration in minutes added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutesToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusSeconds","comment":"Returns a copy of this duration with the specified duration in seconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"secondsToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMillis","comment":"Returns a copy of this duration with the specified duration in milliseconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millisToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusNanos","comment":"Returns a copy of this duration with the specified duration in nanoseconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanosToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this duration with the specified duration subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Duration)","flatSignature":"(Duration)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"duration","type":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this duration with the specified duration subtracted.\n \u003cp\u003e\n The duration amount is measured in terms of the specified unit.\n Only a subset of units are accepted by this method.\n The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or\n be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusDays","comment":"Returns a copy of this duration with the specified duration in standard 24 hour days subtracted.\n \u003cp\u003e\n The number of days is multiplied by 86400 to obtain the number of seconds to subtract.\n This is based on the standard definition of a day as 24 hours.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daysToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusHours","comment":"Returns a copy of this duration with the specified duration in hours subtracted.\n \u003cp\u003e\n The number of hours is multiplied by 3600 to obtain the number of seconds to subtract.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hoursToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMinutes","comment":"Returns a copy of this duration with the specified duration in minutes subtracted.\n \u003cp\u003e\n The number of hours is multiplied by 60 to obtain the number of seconds to subtract.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutesToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusSeconds","comment":"Returns a copy of this duration with the specified duration in seconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"secondsToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMillis","comment":"Returns a copy of this duration with the specified duration in milliseconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millisToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusNanos","comment":"Returns a copy of this duration with the specified duration in nanoseconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanosToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"multipliedBy","comment":"Returns a copy of this duration multiplied by the scalar.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"multiplicand","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dividedBy","comment":"Returns a copy of this duration divided by the specified value.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"divisor","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"negated","comment":"Returns a copy of this duration with the length negated.\n \u003cp\u003e\n This method swaps the sign of the total length of this duration.\n For example, {@code PT1.3S} will be returned as {@code PT-1.3S}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"abs","comment":"Returns a copy of this duration with a positive length.\n \u003cp\u003e\n This method returns a positive duration by effectively removing the sign from any negative total length.\n For example, {@code PT-1.3S} will be returned as {@code PT1.3S}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addTo","comment":"Adds this duration to the specified temporal object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with this duration added.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#plus(TemporalAmount)}.\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisDuration.addTo(dateTime);\n   dateTime \u003d dateTime.plus(thisDuration);\n \u003c/pre\u003e\n \u003cp\u003e\n The calculation will add the seconds, then nanos.\n Only non-zero amounts will be added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtractFrom","comment":"Subtracts this duration from the specified temporal object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with this duration subtracted.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#minus(TemporalAmount)}.\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisDuration.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(thisDuration);\n \u003c/pre\u003e\n \u003cp\u003e\n The calculation will subtract the seconds, then nanos.\n Only non-zero amounts will be added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toDays","comment":"Gets the number of days in this duration.\n \u003cp\u003e\n This returns the total number of days in the duration by dividing the\n number of seconds by 86400.\n This is based on the standard definition of a day as 24 hours.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toHours","comment":"Gets the number of hours in this duration.\n \u003cp\u003e\n This returns the total number of hours in the duration by dividing the\n number of seconds by 3600.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toMinutes","comment":"Gets the number of minutes in this duration.\n \u003cp\u003e\n This returns the total number of minutes in the duration by dividing the\n number of seconds by 60.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toMillis","comment":"Converts this duration to the total length in milliseconds.\n \u003cp\u003e\n If this duration is too large to fit in a {@code long} milliseconds, then an\n exception is thrown.\n \u003cp\u003e\n If this duration has greater than millisecond precision, then the conversion\n will drop any excess precision information as though the amount in nanoseconds\n was subject to integer division by one million.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toNanos","comment":"Converts this duration to the total length in nanoseconds expressed as a {@code long}.\n \u003cp\u003e\n If this duration is too large to fit in a {@code long} nanoseconds, then an\n exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares this duration to the specified {@code Duration}.\n \u003cp\u003e\n The comparison is based on the total length of the durations.\n It is \"consistent with equals\", as defined by {@link Comparable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Duration)","flatSignature":"(Duration)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherDuration","type":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this duration is equal to the specified {@code Duration}.\n \u003cp\u003e\n The comparison is based on the total length of the durations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherDuration","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this duration.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"A string representation of this duration using ISO-8601 seconds\n based representation, such as {@code PT8H6M12.345S}.\n \u003cp\u003e\n The format of the returned string will be {@code PTnHnMnS}, where n is\n the relevant hours, minutes or seconds part of the duration.\n Any fractional seconds are placed after a decimal point i the seconds section.\n If a section has a zero value, it is omitted.\n The hours, minutes and seconds will all have the same sign.\n \u003cp\u003e\n Examples:\n \u003cpre\u003e\n    \"20.345 seconds\"                 -- \"PT20.345S\n    \"15 minutes\" (15 * 60 seconds)   -- \"PT15M\"\n    \"10 hours\" (10 * 3600 seconds)   -- \"PT10H\"\n    \"2 days\" (2 * 86400 seconds)     -- \"PT48H\"\n \u003c/pre\u003e\n Note that multiples of 24 hours are not output as days to avoid confusion\n with {@code Period}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}