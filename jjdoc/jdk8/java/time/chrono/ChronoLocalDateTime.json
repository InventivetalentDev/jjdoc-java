{"name":"ChronoLocalDateTime","comment":"A date-time without a time-zone in an arbitrary chronology, intended\n for advanced globalization use cases.\n \u003cp\u003e\n \u003cb\u003eMost applications should declare method signatures, fields and variables\n as {@link LocalDateTime}, not this interface.\u003c/b\u003e\n \u003cp\u003e\n A {@code ChronoLocalDateTime} is the abstract representation of a local date-time\n where the {@code Chronology chronology}, or calendar system, is pluggable.\n The date-time is defined in terms of fields expressed by {@link TemporalField},\n where most common implementations are defined in {@link ChronoField}.\n The chronology defines how the calendar system operates and the meaning of\n the standard fields.\n\n \u003ch3\u003eWhen to use this interface\u003c/h3\u003e\n The design of the API encourages the use of {@code LocalDateTime} rather than this\n interface, even in the case where the application needs to deal with multiple\n calendar systems. The rationale for this is explored in detail in {@link ChronoLocalDate}.\n \u003cp\u003e\n Ensure that the discussion in {@code ChronoLocalDate} has been read and understood\n before using this interface.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{},"package":"java.time.chrono","interfaces":["java.time.temporal.Temporal","java.time.temporal.TemporalAdjuster","java.lang.Comparable"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"timeLineOrder","comment":"Gets a comparator that compares {@code ChronoLocalDateTime} in\n time-line order ignoring the chronology.\n \u003cp\u003e\n This comparator differs from the comparison in {@link #compareTo} in that it\n only compares the underlying date-time and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the position of the date-time on the local time-line.\n The underlying comparison is equivalent to comparing the epoch-day and nano-of-day.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code ChronoLocalDateTime} from a temporal object.\n \u003cp\u003e\n This obtains a local date-time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ChronoLocalDateTime}.\n \u003cp\u003e\n The conversion extracts and combines the chronology and the date-time\n from the temporal object. The behavior is equivalent to using\n {@link Chronology#localDateTime(TemporalAccessor)} with the extracted chronology.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code ChronoLocalDateTime::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChronology","comment":"Gets the chronology of this date-time.\n \u003cp\u003e\n The {@code Chronology} represents the calendar system in use.\n The era and other fields in {@link ChronoField} are defined by the chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalDate","comment":"Gets the local date part of this date-time.\n \u003cp\u003e\n This returns a local date with the same year, month and day\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"D","qualifiedName":"D","dimension":"","elementType":{},"typeVariable":{"name":"D","bounds":["java.time.chrono.ChronoLocalDate"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalTime","comment":"Gets the local time part of this date-time.\n \u003cp\u003e\n This returns a local time with the same hour, minute, second and\n nanosecond as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if the specified field can be queried on this date-time.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n The set of supported fields is defined by the chronology and normally includes\n all {@code ChronoField} date and time fields.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to or subtracted from this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n The set of supported units is defined by the chronology and normally includes\n all {@code ChronoUnit} units except {@code FOREVER}.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date-time using the specified query.\n \u003cp\u003e\n This queries this date-time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have the same date and time as this object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the date and time changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n twice, passing {@link ChronoField#EPOCH_DAY} and\n {@link ChronoField#NANO_OF_DAY} as the fields.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisLocalDateTime.adjustInto(temporal);\n   temporal \u003d temporal.with(thisLocalDateTime);\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats this date-time using the specified formatter.\n \u003cp\u003e\n This date-time will be passed to the formatter to produce a string.\n \u003cp\u003e\n The default implementation must behave as follows:\n \u003cpre\u003e\n  return formatter.format(this);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DateTimeFormatter)","flatSignature":"(DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atZone","comment":"Combines this time with a time-zone to create a {@code ChronoZonedDateTime}.\n \u003cp\u003e\n This returns a {@code ChronoZonedDateTime} formed from this date-time at the\n specified time-zone. The result will match this date-time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \u003cp\u003e\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the {@link ZoneRules rules} of the zone ID.\n\u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \u003cp\u003e\n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n \u003cp\u003e\n To obtain the later offset during an overlap, call\n {@link ChronoZonedDateTime#withLaterOffsetAtOverlap()} on the result of this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toInstant","comment":"Converts this date-time to an {@code Instant}.\n \u003cp\u003e\n This combines this local date-time and the specified offset to form\n an {@code Instant}.\n \u003cp\u003e\n This default implementation calculates from the epoch-day of the date and the\n second-of-day of the time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toEpochSecond","comment":"Converts this date-time to the number of seconds from the epoch\n of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n This combines this local date-time and the specified offset to calculate the\n epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n Instants on the time-line after the epoch are positive, earlier are negative.\n \u003cp\u003e\n This default implementation calculates from the epoch-day of the date and the\n second-of-day of the time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this date-time to another date-time, including the chronology.\n \u003cp\u003e\n The comparison is based first on the underlying time-line date-time, then\n on the chronology.\n It is \"consistent with equals\", as defined by {@link Comparable}.\n \u003cp\u003e\n For example, the following is the comparator order:\n \u003col\u003e\n \u003cli\u003e{@code 2012-12-03T12:00 (ISO)}\u003c/li\u003e\n \u003cli\u003e{@code 2012-12-04T12:00 (ISO)}\u003c/li\u003e\n \u003cli\u003e{@code 2555-12-04T12:00 (ThaiBuddhist)}\u003c/li\u003e\n \u003cli\u003e{@code 2012-12-05T12:00 (ISO)}\u003c/li\u003e\n \u003c/ol\u003e\n Values #2 and #3 represent the same date-time on the time-line.\n When two values represent the same date-time, the chronology ID is compared to distinguish them.\n This step is needed to make the ordering \"consistent with equals\".\n \u003cp\u003e\n If all the date-time objects being compared are in the same chronology, then the\n additional chronology stage is not required and only the local date-time is used.\n \u003cp\u003e\n This default implementation performs the comparison defined above.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAfter","comment":"Checks if this date-time is after the specified date-time ignoring the chronology.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the underlying date-time and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n \u003cp\u003e\n This default implementation performs the comparison based on the epoch-day\n and nano-of-day.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBefore","comment":"Checks if this date-time is before the specified date-time ignoring the chronology.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the underlying date-time and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n \u003cp\u003e\n This default implementation performs the comparison based on the epoch-day\n and nano-of-day.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isEqual","comment":"Checks if this date-time is equal to the specified date-time ignoring the chronology.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the underlying date and time and not the chronology.\n This allows date-times in different calendar systems to be compared based\n on the time-line position.\n \u003cp\u003e\n This default implementation performs the comparison based on the epoch-day\n and nano-of-day.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this date-time is equal to another date-time, including the chronology.\n \u003cp\u003e\n Compares this date-time with another ensuring that the date-time and chronology are the same.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this date-time as a {@code String}.\n \u003cp\u003e\n The output will include the full local date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"D","bounds":["java.time.chrono.ChronoLocalDate"]}],"subInterfaces":["java.time.LocalDateTime"],"enumConstants":[]}