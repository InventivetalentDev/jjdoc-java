{"name":"ChronoZonedDateTime","comment":"A date-time with a time-zone in an arbitrary chronology,\n intended for advanced globalization use cases.\n \u003cp\u003e\n \u003cb\u003eMost applications should declare method signatures, fields and variables\n as {@link ZonedDateTime}, not this interface.\u003c/b\u003e\n \u003cp\u003e\n A {@code ChronoZonedDateTime} is the abstract representation of an offset date-time\n where the {@code Chronology chronology}, or calendar system, is pluggable.\n The date-time is defined in terms of fields expressed by {@link TemporalField},\n where most common implementations are defined in {@link ChronoField}.\n The chronology defines how the calendar system operates and the meaning of\n the standard fields.\n\n \u003ch3\u003eWhen to use this interface\u003c/h3\u003e\n The design of the API encourages the use of {@code ZonedDateTime} rather than this\n interface, even in the case where the application needs to deal with multiple\n calendar systems. The rationale for this is explored in detail in {@link ChronoLocalDate}.\n \u003cp\u003e\n Ensure that the discussion in {@code ChronoLocalDate} has been read and understood\n before using this interface.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{},"package":"java.time.chrono","interfaces":["java.time.temporal.Temporal","java.lang.Comparable"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"timeLineOrder","comment":"Gets a comparator that compares {@code ChronoZonedDateTime} in\n time-line order ignoring the chronology.\n \u003cp\u003e\n This comparator differs from the comparison in {@link #compareTo} in that it\n only compares the underlying instant and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the position of the date-time on the instant time-line.\n The underlying comparison is equivalent to comparing the epoch-second and nano-of-second.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code ChronoZonedDateTime} from a temporal object.\n \u003cp\u003e\n This creates a zoned date-time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ChronoZonedDateTime}.\n \u003cp\u003e\n The conversion extracts and combines the chronology, date, time and zone\n from the temporal object. The behavior is equivalent to using\n {@link Chronology#zonedDateTime(TemporalAccessor)} with the extracted chronology.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code ChronoZonedDateTime::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLocalDate","comment":"Gets the local date part of this date-time.\n \u003cp\u003e\n This returns a local date with the same year, month and day\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"D","qualifiedName":"D","dimension":"","elementType":{},"typeVariable":{"name":"D","bounds":["java.time.chrono.ChronoLocalDate"]}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalTime","comment":"Gets the local time part of this date-time.\n \u003cp\u003e\n This returns a local time with the same hour, minute, second and\n nanosecond as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalDateTime","comment":"Gets the local date-time part of this date-time.\n \u003cp\u003e\n This returns a local date with the same year, month and day\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChronology","comment":"Gets the chronology of this date-time.\n \u003cp\u003e\n The {@code Chronology} represents the calendar system in use.\n The era and other fields in {@link ChronoField} are defined by the chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOffset","comment":"Gets the zone offset, such as \u0027+01:00\u0027.\n \u003cp\u003e\n This is the offset of the local date-time from UTC/Greenwich.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getZone","comment":"Gets the zone ID, such as \u0027Europe/Paris\u0027.\n \u003cp\u003e\n This returns the stored time-zone id used to determine the time-zone rules.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withEarlierOffsetAtOverlap","comment":"Returns a copy of this date-time changing the zone offset to the\n earlier of the two valid offsets at a local time-line overlap.\n \u003cp\u003e\n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the earlier of the two selected.\n \u003cp\u003e\n If this method is called when it is not an overlap, {@code this}\n is returned.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withLaterOffsetAtOverlap","comment":"Returns a copy of this date-time changing the zone offset to the\n later of the two valid offsets at a local time-line overlap.\n \u003cp\u003e\n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the later of the two selected.\n \u003cp\u003e\n If this method is called when it is not an overlap, {@code this}\n is returned.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withZoneSameLocal","comment":"Returns a copy of this date-time with a different time-zone,\n retaining the local date-time if possible.\n \u003cp\u003e\n This method changes the time-zone and retains the local date-time.\n The local date-time is only changed if it is invalid for the new zone.\n \u003cp\u003e\n To change the zone and adjust the local date-time,\n use {@link #withZoneSameInstant(ZoneId)}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withZoneSameInstant","comment":"Returns a copy of this date-time with a different time-zone,\n retaining the instant.\n \u003cp\u003e\n This method changes the time-zone and retains the instant.\n This normally results in a change to the local date-time.\n \u003cp\u003e\n This method is based on retaining the same instant, thus gaps and overlaps\n in the local time-line have no effect on the result.\n \u003cp\u003e\n To change the offset while keeping the local time,\n use {@link #withZoneSameLocal(ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if the specified field can be queried on this date-time.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n The set of supported fields is defined by the chronology and normally includes\n all {@code ChronoField} fields.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to or subtracted from this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n The set of supported units is defined by the chronology and normally includes\n all {@code ChronoUnit} units except {@code FOREVER}.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date-time using the specified query.\n \u003cp\u003e\n This queries this date-time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"format","comment":"Formats this date-time using the specified formatter.\n \u003cp\u003e\n This date-time will be passed to the formatter to produce a string.\n \u003cp\u003e\n The default implementation must behave as follows:\n \u003cpre\u003e\n  return formatter.format(this);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DateTimeFormatter)","flatSignature":"(DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toInstant","comment":"Converts this date-time to an {@code Instant}.\n \u003cp\u003e\n This returns an {@code Instant} representing the same point on the\n time-line as this date-time. The calculation combines the\n {@linkplain #toLocalDateTime() local date-time} and\n {@linkplain #getOffset() offset}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toEpochSecond","comment":"Converts this date-time to the number of seconds from the epoch\n of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n This uses the {@linkplain #toLocalDateTime() local date-time} and\n {@linkplain #getOffset() offset} to calculate the epoch-second value,\n which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n Instants on the time-line after the epoch are positive, earlier are negative.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares this date-time to another date-time, including the chronology.\n \u003cp\u003e\n The comparison is based first on the instant, then on the local date-time,\n then on the zone ID, then on the chronology.\n It is \"consistent with equals\", as defined by {@link Comparable}.\n \u003cp\u003e\n If all the date-time objects being compared are in the same chronology, then the\n additional chronology stage is not required.\n \u003cp\u003e\n This default implementation performs the comparison defined above.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoZonedDateTime\u003c?\u003e)","flatSignature":"(ChronoZonedDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBefore","comment":"Checks if the instant of this date-time is before that of the specified date-time.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the instant of the date-time. This is equivalent to using\n {@code dateTime1.toInstant().isBefore(dateTime2.toInstant());}.\n \u003cp\u003e\n This default implementation performs the comparison based on the epoch-second\n and nano-of-second.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoZonedDateTime\u003c?\u003e)","flatSignature":"(ChronoZonedDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAfter","comment":"Checks if the instant of this date-time is after that of the specified date-time.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the instant of the date-time. This is equivalent to using\n {@code dateTime1.toInstant().isAfter(dateTime2.toInstant());}.\n \u003cp\u003e\n This default implementation performs the comparison based on the epoch-second\n and nano-of-second.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoZonedDateTime\u003c?\u003e)","flatSignature":"(ChronoZonedDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isEqual","comment":"Checks if the instant of this date-time is equal to that of the specified date-time.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} and {@link #equals}\n in that it only compares the instant of the date-time. This is equivalent to using\n {@code dateTime1.toInstant().equals(dateTime2.toInstant());}.\n \u003cp\u003e\n This default implementation performs the comparison based on the epoch-second\n and nano-of-second.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoZonedDateTime\u003c?\u003e)","flatSignature":"(ChronoZonedDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this date-time is equal to another date-time.\n \u003cp\u003e\n The comparison is based on the offset date-time and the zone.\n To compare for the same instant on the time-line, use {@link #compareTo}.\n Only objects of type {@code ChronoZonedDateTime} are compared, other types return false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this date-time as a {@code String}.\n \u003cp\u003e\n The output will include the full zoned date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"D","bounds":["java.time.chrono.ChronoLocalDate"]}],"subInterfaces":["java.time.ZonedDateTime"],"enumConstants":[]}