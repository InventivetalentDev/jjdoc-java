{"name":"ChronoPeriod","comment":"A date-based amount of time, such as \u00273 years, 4 months and 5 days\u0027 in an\n arbitrary chronology, intended for advanced globalization use cases.\n \u003cp\u003e\n This interface models a date-based amount of time in a calendar system.\n While most calendar systems use years, months and days, some do not.\n Therefore, this interface operates solely in terms of a set of supported\n units that are defined by the {@code Chronology}.\n The set of supported units is fixed for a given chronology.\n The amount of a supported unit may be set to zero.\n \u003cp\u003e\n The period is modeled as a directed amount of time, meaning that individual\n parts of the period may be negative.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{},"package":"java.time.chrono","interfaces":["java.time.temporal.TemporalAmount"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"between","comment":"Obtains a {@code ChronoPeriod} consisting of amount of time between two dates.\n \u003cp\u003e\n The start date is included, but the end date is not.\n The period is calculated using {@link ChronoLocalDate#until(ChronoLocalDate)}.\n As such, the calculation is chronology specific.\n \u003cp\u003e\n The chronology of the first date is used.\n The chronology of the second date is ignored, with the date being converted\n to the target chronology system before the calculation starts.\n \u003cp\u003e\n The result of this method can be a negative period if the end is before the start.\n In most cases, the positive/negative sign will be the same in each of the supported fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate, java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate, ChronoLocalDate)","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"startDateInclusive","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}},{"name":"endDateExclusive","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the requested unit.\n \u003cp\u003e\n The supported units are chronology specific.\n They will typically be {@link ChronoUnit#YEARS YEARS},\n {@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.\n Requesting an unsupported unit will throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getUnits","comment":"Gets the set of units supported by this period.\n \u003cp\u003e\n The supported units are chronology specific.\n They will typically be {@link ChronoUnit#YEARS YEARS},\n {@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.\n They are returned in order from largest to smallest.\n \u003cp\u003e\n This set can be used in conjunction with {@link #get(TemporalUnit)}\n to access the entire state of the period.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChronology","comment":"Gets the chronology that defines the meaning of the supported units.\n \u003cp\u003e\n The period is defined by the chronology.\n It controls the supported units and restricts addition/subtraction\n to {@code ChronoLocalDate} instances of the same chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isZero","comment":"Checks if all the supported units of this period are zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isNegative","comment":"Checks if any of the supported units of this period are negative.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this period with the specified period added.\n \u003cp\u003e\n If the specified amount is a {@code ChronoPeriod} then it must have\n the same chronology as this period. Implementations may choose to\n accept or reject other {@code TemporalAmount} implementations.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this period with the specified period subtracted.\n \u003cp\u003e\n If the specified amount is a {@code ChronoPeriod} then it must have\n the same chronology as this period. Implementations may choose to\n accept or reject other {@code TemporalAmount} implementations.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"multipliedBy","comment":"Returns a new instance with each amount in this period in this period\n multiplied by the specified scalar.\n \u003cp\u003e\n This returns a period with each supported unit individually multiplied.\n For example, a period of \"2 years, -3 months and 4 days\" multiplied by\n 3 will return \"6 years, -9 months and 12 days\".\n No normalization is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"scalar","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"negated","comment":"Returns a new instance with each amount in this period negated.\n \u003cp\u003e\n This returns a period with each supported unit individually negated.\n For example, a period of \"2 years, -3 months and 4 days\" will be\n negated to \"-2 years, 3 months and -4 days\".\n No normalization is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"normalized","comment":"Returns a copy of this period with the amounts of each unit normalized.\n \u003cp\u003e\n The process of normalization is specific to each calendar system.\n For example, in the ISO calendar system, the years and months are\n normalized but the days are not, such that \"15 months\" would be\n normalized to \"1 year and 3 months\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addTo","comment":"Adds this period to the specified temporal object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with this period added.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#plus(TemporalAmount)}.\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.addTo(dateTime);\n   dateTime \u003d dateTime.plus(thisPeriod);\n \u003c/pre\u003e\n \u003cp\u003e\n The specified temporal must have the same chronology as this period.\n This returns a temporal with the non-zero supported units added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtractFrom","comment":"Subtracts this period from the specified temporal object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with this period subtracted.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#minus(TemporalAmount)}.\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(thisPeriod);\n \u003c/pre\u003e\n \u003cp\u003e\n The specified temporal must have the same chronology as this period.\n This returns a temporal with the non-zero supported units subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this period is equal to another period, including the chronology.\n \u003cp\u003e\n Compares this period with another ensuring that the type, each amount and\n the chronology are the same.\n Note that this means that a period of \"15 Months\" is not equal to a period\n of \"1 Year and 3 Months\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this period.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this period as a {@code String}.\n \u003cp\u003e\n The output will include the period amounts and chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.time.Period"],"enumConstants":[]}