{"name":"JapaneseDate","comment":"A date in the Japanese Imperial calendar system.\n \u003cp\u003e\n This date operates using the {@linkplain JapaneseChronology Japanese Imperial calendar}.\n This calendar system is primarily used in Japan.\n \u003cp\u003e\n The Japanese Imperial calendar system is the same as the ISO calendar system\n apart from the era-based year numbering. The proleptic-year is defined to be\n equal to the ISO proleptic-year.\n \u003cp\u003e\n Japan introduced the Gregorian calendar starting with Meiji 6.\n Only Meiji and later eras are supported;\n dates before Meiji 6, January 1 are not supported.\n \u003cp\u003e\n For example, the Japanese year \"Heisei 24\" corresponds to ISO year \"2012\".\u003cbr\u003e\n Calling {@code japaneseDate.get(YEAR_OF_ERA)} will return 24.\u003cbr\u003e\n Calling {@code japaneseDate.get(YEAR)} will return 2012.\u003cbr\u003e\n Calling {@code japaneseDate.get(ERA)} will return 2, corresponding to\n {@code JapaneseChronology.ERA_HEISEI}.\u003cbr\u003e\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code JapaneseDate} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{},"package":"java.time.chrono","superclass":"java.time.chrono.ChronoLocalDateImpl","interfaces":["java.time.chrono.ChronoLocalDate","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"now","comment":"Obtains the current {@code JapaneseDate} from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current {@code JapaneseDate} from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"now","comment":"Obtains the current {@code JapaneseDate} from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@linkplain Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains a {@code JapaneseDate} representing a date in the Japanese calendar\n system from the era, year-of-era, month-of-year and day-of-month fields.\n \u003cp\u003e\n This returns a {@code JapaneseDate} with the specified fields.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n \u003cp\u003e\n The Japanese month and day-of-month are the same as those in the\n ISO calendar system. They are not reset when the era changes.\n For example:\n \u003cpre\u003e\n  6th Jan Showa 64 \u003d ISO 1989-01-06\n  7th Jan Showa 64 \u003d ISO 1989-01-07\n  8th Jan Heisei 1 \u003d ISO 1989-01-08\n  9th Jan Heisei 1 \u003d ISO 1989-01-09\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.JapaneseEra, int, int, int)","flatSignature":"(JapaneseEra, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"JapaneseEra","qualifiedName":"java.time.chrono.JapaneseEra","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains a {@code JapaneseDate} representing a date in the Japanese calendar\n system from the proleptic-year, month-of-year and day-of-month fields.\n \u003cp\u003e\n This returns a {@code JapaneseDate} with the specified fields.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n \u003cp\u003e\n The Japanese proleptic year, month and day-of-month are the same as those\n in the ISO calendar system. They are not reset when the era changes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains a {@code JapaneseDate} from a temporal object.\n \u003cp\u003e\n This obtains a date in the Japanese calendar system based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code JapaneseDate}.\n \u003cp\u003e\n The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}\n field, which is standardized across calendar systems.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code JapaneseDate::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChronology","comment":"Gets the chronology of this date, which is the Japanese calendar system.\n \u003cp\u003e\n The {@code Chronology} represents the calendar system in use.\n The era and other fields in {@link ChronoField} are defined by the chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"JapaneseChronology","qualifiedName":"java.time.chrono.JapaneseChronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEra","comment":"Gets the era applicable at this date.\n \u003cp\u003e\n The Japanese calendar system has multiple eras defined by {@link JapaneseEra}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"JapaneseEra","qualifiedName":"java.time.chrono.JapaneseEra","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lengthOfMonth","comment":"Returns the length of the month represented by this date.\n \u003cp\u003e\n This returns the length of the month in days.\n Month lengths match those of the ISO calendar system.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lengthOfYear","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this date can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range} and\n {@link #get(TemporalField) get} methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The supported fields are:\n \u003cul\u003e\n \u003cli\u003e{@code DAY_OF_WEEK}\n \u003cli\u003e{@code DAY_OF_MONTH}\n \u003cli\u003e{@code DAY_OF_YEAR}\n \u003cli\u003e{@code EPOCH_DAY}\n \u003cli\u003e{@code MONTH_OF_YEAR}\n \u003cli\u003e{@code PROLEPTIC_MONTH}\n \u003cli\u003e{@code YEAR_OF_ERA}\n \u003cli\u003e{@code YEAR}\n \u003cli\u003e{@code ERA}\n \u003c/ul\u003e\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"JapaneseDate","qualifiedName":"java.time.chrono.JapaneseDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atTime","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalTime)","flatSignature":"(LocalTime)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"localTime","type":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate)","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endDate","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toEpochDay","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this date to another date, including the chronology.\n \u003cp\u003e\n Compares this {@code JapaneseDate} with another ensuring that the date is the same.\n \u003cp\u003e\n Only objects of type {@code JapaneseDate} are compared, other types return false.\n To compare the dates of two {@code TemporalAccessor} instances, including dates\n in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}