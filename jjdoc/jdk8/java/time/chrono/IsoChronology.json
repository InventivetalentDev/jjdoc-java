{"name":"IsoChronology","comment":"The ISO calendar system.\n \u003cp\u003e\n This chronology defines the rules of the ISO calendar system.\n This calendar system is based on the ISO-8601 standard, which is the\n \u003ci\u003ede facto\u003c/i\u003e world calendar.\n \u003cp\u003e\n The fields are defined as follows:\n \u003cul\u003e\n \u003cli\u003eera - There are two eras, \u0027Current Era\u0027 (CE) and \u0027Before Current Era\u0027 (BCE).\n \u003cli\u003eyear-of-era - The year-of-era is the same as the proleptic-year for the current CE era.\n  For the BCE era before the ISO epoch the year increases from 1 upwards as time goes backwards.\n \u003cli\u003eproleptic-year - The proleptic year is the same as the year-of-era for the\n  current era. For the previous era, years have zero, then negative values.\n \u003cli\u003emonth-of-year - There are 12 months in an ISO year, numbered from 1 to 12.\n \u003cli\u003eday-of-month - There are between 28 and 31 days in each of the ISO month, numbered from 1 to 31.\n  Months 4, 6, 9 and 11 have 30 days, Months 1, 3, 5, 7, 8, 10 and 12 have 31 days.\n  Month 2 has 28 days, or 29 in a leap year.\n \u003cli\u003eday-of-year - There are 365 days in a standard ISO year and 366 in a leap year.\n  The days are numbered from 1 to 365 or 1 to 366.\n \u003cli\u003eleap-year - Leap years occur every 4 years, except where the year is divisble by 100 and not divisble by 400.\n \u003c/ul\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"IsoChronology","qualifiedName":"java.time.chrono.IsoChronology","dimension":"","elementType":{},"package":"java.time.chrono","superclass":"java.time.chrono.AbstractChronology","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"INSTANCE","comment":"Singleton instance of the ISO chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"IsoChronology","qualifiedName":"java.time.chrono.IsoChronology","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"getId","comment":"Gets the ID of the chronology - \u0027ISO\u0027.\n \u003cp\u003e\n The ID uniquely identifies the {@code Chronology}.\n It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCalendarType","comment":"Gets the calendar type of the underlying calendar system - \u0027iso8601\u0027.\n \u003cp\u003e\n The calendar type is an identifier defined by the\n \u003cem\u003eUnicode Locale Data Markup Language (LDML)\u003c/em\u003e specification.\n It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.\n It can also be used as part of a locale, accessible via\n {@link Locale#getUnicodeLocaleType(String)} with the key \u0027ca\u0027.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"date","comment":"Obtains an ISO local date from the era, year-of-era, month-of-year\n and day-of-month fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Era, int, int, int)","flatSignature":"(Era, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"date","comment":"Obtains an ISO local date from the proleptic-year, month-of-year\n and day-of-month fields.\n \u003cp\u003e\n This is equivalent to {@link LocalDate#of(int, int, int)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateYearDay","comment":"Obtains an ISO local date from the era, year-of-era and day-of-year fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Era, int, int)","flatSignature":"(Era, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateYearDay","comment":"Obtains an ISO local date from the proleptic-year and day-of-year fields.\n \u003cp\u003e\n This is equivalent to {@link LocalDate#ofYearDay(int, int)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateEpochDay","comment":"Obtains an ISO local date from the epoch-day.\n \u003cp\u003e\n This is equivalent to {@link LocalDate#ofEpochDay(long)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"epochDay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"date","comment":"Obtains an ISO local date from another date-time object.\n \u003cp\u003e\n This is equivalent to {@link LocalDate#from(TemporalAccessor)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"localDateTime","comment":"Obtains an ISO local date-time from another date-time object.\n \u003cp\u003e\n This is equivalent to {@link LocalDateTime#from(TemporalAccessor)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"zonedDateTime","comment":"Obtains an ISO zoned date-time from another date-time object.\n \u003cp\u003e\n This is equivalent to {@link ZonedDateTime#from(TemporalAccessor)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"zonedDateTime","comment":"Obtains an ISO zoned date-time in this chronology from an {@code Instant}.\n \u003cp\u003e\n This is equivalent to {@link ZonedDateTime#ofInstant(Instant, ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant, java.time.ZoneId)","flatSignature":"(Instant, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateNow","comment":"Obtains the current ISO local date from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"dateNow","comment":"Obtains the current ISO local date from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateNow","comment":"Obtains the current ISO local date from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLeapYear","comment":"Checks if the year is a leap year, according to the ISO proleptic\n calendar system rules.\n \u003cp\u003e\n This method applies the current rules for leap years across the whole time-line.\n In general, a year is a leap year if it is divisible by four without\n remainder. However, years divisible by 100, are not leap years, with\n the exception of years divisible by 400 which are.\n \u003cp\u003e\n For example, 1904 is a leap year it is divisible by 4.\n 1900 was not a leap year as it is divisible by 100, however 2000 was a\n leap year as it is divisible by 400.\n \u003cp\u003e\n The calculation is proleptic - applying the same rules into the far future and far past.\n This is historically inaccurate, but is correct for the ISO-8601 standard.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"prolepticYear","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Era, int)","flatSignature":"(Era, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"eraOf","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"IsoEra","qualifiedName":"java.time.chrono.IsoEra","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"eraValue","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"eras","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"resolveDate","comment":"Resolves parsed {@code ChronoField} values into a date during parsing.\n \u003cp\u003e\n Most {@code TemporalField} implementations are resolved using the\n resolve method on the field. By contrast, the {@code ChronoField} class\n defines fields that only have meaning relative to the chronology.\n As such, {@code ChronoField} date fields are resolved here in the\n context of a specific chronology.\n \u003cp\u003e\n {@code ChronoField} instances on the ISO calendar system are resolved\n as follows.\n \u003cul\u003e\n \u003cli\u003e{@code EPOCH_DAY} - If present, this is converted to a {@code LocalDate}\n  and all other date fields are then cross-checked against the date.\n \u003cli\u003e{@code PROLEPTIC_MONTH} - If present, then it is split into the\n  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n  then the field is validated.\n \u003cli\u003e{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n  range is not validated, in smart and strict mode it is. The {@code ERA} is\n  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n  present, and the mode is smart or lenient, then the current era (CE/AD)\n  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n  left untouched. If only the {@code ERA} is present, then it is left untouched.\n \u003cli\u003e{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n  If all three are present, then they are combined to form a {@code LocalDate}.\n  In all three modes, the {@code YEAR} is validated. If the mode is smart or strict,\n  then the month and day are validated, with the day validated from 1 to 31.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in months, then the difference in days.\n  If the mode is smart, and the day-of-month is greater than the maximum for\n  the year-month, then the day-of-month is adjusted to the last day-of-month.\n  If the mode is strict, then the three fields must form a valid date.\n \u003cli\u003e{@code YEAR} and {@code DAY_OF_YEAR} -\n  If both are present, then they are combined to form a {@code LocalDate}.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in days.\n  If the mode is smart or strict, then the two fields must form a valid date.\n \u003cli\u003e{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n  If all four are present, then they are combined to form a {@code LocalDate}.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in months, then the difference in weeks, then in days.\n  If the mode is smart or strict, then the all four fields are validated to\n  their outer ranges. The date is then combined in a manner equivalent to\n  creating a date on the first day of the requested year and month, then adding\n  the amount in weeks and days to reach their values. If the mode is strict,\n  the date is additionally validated to check that the day and week adjustment\n  did not change the month.\n \u003cli\u003e{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n  form a {@code LocalDate}. The approach is the same as described above for\n  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n  The day-of-week is adjusted as the next or same matching day-of-week once\n  the years, months and weeks have been handled.\n \u003cli\u003e{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n  If all three are present, then they are combined to form a {@code LocalDate}.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in weeks, then in days.\n  If the mode is smart or strict, then the all three fields are validated to\n  their outer ranges. The date is then combined in a manner equivalent to\n  creating a date on the first day of the requested year, then adding\n  the amount in weeks and days to reach their values. If the mode is strict,\n  the date is additionally validated to check that the day and week adjustment\n  did not change the year.\n \u003cli\u003e{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n  If all three are present, then they are combined to form a {@code LocalDate}.\n  The approach is the same as described above for years and weeks in\n  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n  next or same matching day-of-week once the years and weeks have been handled.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003cjava.time.temporal.TemporalField, java.lang.Long\u003e, java.time.format.ResolverStyle)","flatSignature":"(Map\u003cTemporalField, Long\u003e, ResolverStyle)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fieldValues","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}},{"name":"resolverStyle","type":{"isPrimitive":false,"simpleName":"ResolverStyle","qualifiedName":"java.time.format.ResolverStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.ChronoField)","flatSignature":"(ChronoField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"ChronoField","qualifiedName":"java.time.temporal.ChronoField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"period","comment":"Obtains a period for this chronology based on years, months and days.\n \u003cp\u003e\n This returns a period tied to the ISO chronology using the specified\n years, months and days. See {@link Period} for further details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"months","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"days","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}