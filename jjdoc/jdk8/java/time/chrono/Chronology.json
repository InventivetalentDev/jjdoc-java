{"name":"Chronology","comment":"A calendar system, used to organize and identify dates.\n \u003cp\u003e\n The main date and time API is built on the ISO calendar system.\n The chronology operates behind the scenes to represent the general concept of a calendar system.\n For example, the Japanese, Minguo, Thai Buddhist and others.\n \u003cp\u003e\n Most other calendar systems also operate on the shared concepts of year, month and day,\n linked to the cycles of the Earth around the Sun, and the Moon around the Earth.\n These shared concepts are defined by {@link ChronoField} and are available\n for use by any {@code Chronology} implementation:\n \u003cpre\u003e\n   LocalDate isoDate \u003d ...\n   ThaiBuddhistDate thaiDate \u003d ...\n   int isoYear \u003d isoDate.get(ChronoField.YEAR);\n   int thaiYear \u003d thaiDate.get(ChronoField.YEAR);\n \u003c/pre\u003e\n As shown, although the date objects are in different calendar systems, represented by different\n {@code Chronology} instances, both can be queried using the same constant on {@code ChronoField}.\n For a full discussion of the implications of this, see {@link ChronoLocalDate}.\n In general, the advice is to use the known ISO-based {@code LocalDate}, rather than\n {@code ChronoLocalDate}.\n \u003cp\u003e\n While a {@code Chronology} object typically uses {@code ChronoField} and is based on\n an era, year-of-era, month-of-year, day-of-month model of a date, this is not required.\n A {@code Chronology} instance may represent a totally different kind of calendar system,\n such as the Mayan.\n \u003cp\u003e\n In practical terms, the {@code Chronology} instance also acts as a factory.\n The {@link #of(String)} method allows an instance to be looked up by identifier,\n while the {@link #ofLocale(Locale)} method allows lookup by locale.\n \u003cp\u003e\n The {@code Chronology} instance provides a set of methods to create {@code ChronoLocalDate} instances.\n The date classes are used to manipulate specific dates.\n \u003cul\u003e\n \u003cli\u003e {@link #dateNow() dateNow()}\n \u003cli\u003e {@link #dateNow(Clock) dateNow(clock)}\n \u003cli\u003e {@link #dateNow(ZoneId) dateNow(zone)}\n \u003cli\u003e {@link #date(int, int, int) date(yearProleptic, month, day)}\n \u003cli\u003e {@link #date(Era, int, int, int) date(era, yearOfEra, month, day)}\n \u003cli\u003e {@link #dateYearDay(int, int) dateYearDay(yearProleptic, dayOfYear)}\n \u003cli\u003e {@link #dateYearDay(Era, int, int) dateYearDay(era, yearOfEra, dayOfYear)}\n \u003cli\u003e {@link #date(TemporalAccessor) date(TemporalAccessor)}\n \u003c/ul\u003e\n\n \u003ch3 id\u003d\"addcalendars\"\u003eAdding New Calendars\u003c/h3\u003e\n The set of available chronologies can be extended by applications.\n Adding a new calendar system requires the writing of an implementation of\n {@code Chronology}, {@code ChronoLocalDate} and {@code Era}.\n The majority of the logic specific to the calendar system will be in the\n {@code ChronoLocalDate} implementation.\n The {@code Chronology} implementation acts as a factory.\n \u003cp\u003e\n To permit the discovery of additional chronologies, the {@link java.util.ServiceLoader ServiceLoader}\n is used. A file must be added to the {@code META-INF/services} directory with the\n name \u0027java.time.chrono.Chronology\u0027 listing the implementation classes.\n See the ServiceLoader for more details on service loading.\n For lookup by id or calendarType, the system provided calendars are found\n first followed by application provided calendars.\n \u003cp\u003e\n Each chronology must define a chronology ID that is unique within the system.\n If the chronology represents a calendar system defined by the\n CLDR specification then the calendar type is the concatenation of the\n CLDR type and, if applicable, the CLDR variant,","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{},"package":"java.time.chrono","interfaces":["java.lang.Comparable"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"from","comment":"Obtains an instance of {@code Chronology} from a temporal object.\n \u003cp\u003e\n This obtains a chronology based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code Chronology}.\n \u003cp\u003e\n The conversion will obtain the chronology using {@link TemporalQueries#chronology()}.\n If the specified temporal object does not have a chronology, {@link IsoChronology} is returned.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code Chronology::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofLocale","comment":"Obtains an instance of {@code Chronology} from a locale.\n \u003cp\u003e\n This returns a {@code Chronology} based on the specified locale,\n typically returning {@code IsoChronology}. Other calendar systems\n are only returned if they are explicitly selected within the locale.\n \u003cp\u003e\n The {@link Locale} class provide access to a range of information useful\n for localizing an application. This includes the language and region,\n such as \"en-GB\" for English as used in Great Britain.\n \u003cp\u003e\n The {@code Locale} class also supports an extension mechanism that\n can be used to identify a calendar system. The mechanism is a form\n of key-value pairs, where the calendar system has the key \"ca\".\n For example, the locale \"en-JP-u-ca-japanese\" represents the English\n language as used in Japan with the Japanese calendar system.\n \u003cp\u003e\n This method finds the desired calendar system by in a manner equivalent\n to passing \"ca\" to {@link Locale#getUnicodeLocaleType(String)}.\n If the \"ca\" key is not present, then {@code IsoChronology} is returned.\n \u003cp\u003e\n Note that the behavior of this method differs from the older\n {@link java.util.Calendar#getInstance(Locale)} method.\n If that method receives a locale of \"th_TH\" it will return {@code BuddhistCalendar}.\n By contrast, this method will return {@code IsoChronology}.\n Passing the locale \"th-TH-u-ca-buddhist\" into either method will\n result in the Thai Buddhist calendar system and is therefore the\n recommended approach going forward for Thai calendar system localization.\n \u003cp\u003e\n A similar, but simpler, situation occurs for the Japanese calendar system.\n The locale \"jp_JP_JP\" has previously been used to access the calendar.\n However, unlike the Thai locale, \"ja_JP_JP\" is automatically converted by\n {@code Locale} to the modern and recommended form of \"ja-JP-u-ca-japanese\".\n Thus, there is no difference in behavior between this method and\n {@code Calendar#getInstance(Locale)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code Chronology} from a chronology ID or\n calendar system type.\n \u003cp\u003e\n This returns a chronology based on either the ID or the type.\n The {@link #getId() chronology ID} uniquely identifies the chronology.\n The {@link #getCalendarType() calendar system type} is defined by the\n CLDR specification.\n \u003cp\u003e\n The chronology may be a system chronology or a chronology\n provided by the application via ServiceLoader configuration.\n \u003cp\u003e\n Since some calendars can be customized, the ID or type typically refers\n to the default customization. For example, the Gregorian calendar can have multiple\n cutover dates from the Julian, but the lookup only provides the default cutover date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"id","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAvailableChronologies","comment":"Returns the available chronologies.\n \u003cp\u003e\n Each returned {@code Chronology} is available for use in the system.\n The set of chronologies includes the system chronologies and\n any chronologies provided by the application via ServiceLoader\n configuration.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getId","comment":"Gets the ID of the chronology.\n \u003cp\u003e\n The ID uniquely identifies the {@code Chronology}.\n It can be used to lookup the {@code Chronology} using {@link #of(String)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCalendarType","comment":"Gets the calendar type of the calendar system.\n \u003cp\u003e\n The calendar type is an identifier defined by the CLDR and\n \u003cem\u003eUnicode Locale Data Markup Language (LDML)\u003c/em\u003e specifications\n to uniquely identification a calendar.\n The {@code getCalendarType} is the concatenation of the CLDR calendar type\n and the variant, if applicable, is appended separated by \"-\".\n The calendar type is used to lookup the {@code Chronology} using {@link #of(String)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"date","comment":"Obtains a local date in this chronology from the era, year-of-era,\n month-of-year and day-of-month fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Era, int, int, int)","flatSignature":"(Era, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"date","comment":"Obtains a local date in this chronology from the proleptic-year,\n month-of-year and day-of-month fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateYearDay","comment":"Obtains a local date in this chronology from the era, year-of-era and\n day-of-year fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Era, int, int)","flatSignature":"(Era, int, int)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateYearDay","comment":"Obtains a local date in this chronology from the proleptic-year and\n day-of-year fields.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateEpochDay","comment":"Obtains a local date in this chronology from the epoch-day.\n \u003cp\u003e\n The definition of {@link ChronoField#EPOCH_DAY EPOCH_DAY} is the same\n for all calendar systems, thus it can be used for conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"epochDay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateNow","comment":"Obtains the current local date in this chronology from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"dateNow","comment":"Obtains the current local date in this chronology from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dateNow","comment":"Obtains the current local date in this chronology from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"date","comment":"Obtains a local date in this chronology from another temporal object.\n \u003cp\u003e\n This obtains a date in this chronology based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ChronoLocalDate}.\n \u003cp\u003e\n The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}\n field, which is standardized across calendar systems.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code aChronology::date}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"localDateTime","comment":"Obtains a local date-time in this chronology from another temporal object.\n \u003cp\u003e\n This obtains a date-time in this chronology based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ChronoLocalDateTime}.\n \u003cp\u003e\n The conversion extracts and combines the {@code ChronoLocalDate} and the\n {@code LocalTime} from the temporal object.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n The result uses this chronology.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code aChronology::localDateTime}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"zonedDateTime","comment":"Obtains a {@code ChronoZonedDateTime} in this chronology from another temporal object.\n \u003cp\u003e\n This obtains a zoned date-time in this chronology based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ChronoZonedDateTime}.\n \u003cp\u003e\n The conversion will first obtain a {@code ZoneId} from the temporal object,\n falling back to a {@code ZoneOffset} if necessary. It will then try to obtain\n an {@code Instant}, falling back to a {@code ChronoLocalDateTime} if necessary.\n The result will be either the combination of {@code ZoneId} or {@code ZoneOffset}\n with {@code Instant} or {@code ChronoLocalDateTime}.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n The result uses this chronology.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code aChronology::zonedDateTime}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"zonedDateTime","comment":"Obtains a {@code ChronoZonedDateTime} in this chronology from an {@code Instant}.\n \u003cp\u003e\n This obtains a zoned date-time with the same instant as that specified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant, java.time.ZoneId)","flatSignature":"(Instant, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ChronoZonedDateTime","qualifiedName":"java.time.chrono.ChronoZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLeapYear","comment":"Checks if the specified year is a leap year.\n \u003cp\u003e\n A leap-year is a year of a longer length than normal.\n The exact meaning is determined by the chronology according to the following constraints.\n \u003cul\u003e\n \u003cli\u003ea leap-year must imply a year-length longer than a non leap-year.\n \u003cli\u003ea chronology that does not support the concept of a year must return false.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"prolepticYear","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"prolepticYear","comment":"Calculates the proleptic-year given the era and year-of-era.\n \u003cp\u003e\n This combines the era and year-of-era into the single proleptic-year field.\n \u003cp\u003e\n If the chronology makes active use of eras, such as {@code JapaneseChronology}\n then the year-of-era will be validated against the era.\n For other chronologies, validation is optional.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Era, int)","flatSignature":"(Era, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}}},{"name":"yearOfEra","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"eraOf","comment":"Creates the chronology era object from the numeric value.\n \u003cp\u003e\n The era is, conceptually, the largest division of the time-line.\n Most calendar systems have a single epoch dividing the time-line into two eras.\n However, some have multiple eras, such as one for the reign of each leader.\n The exact meaning is determined by the chronology according to the following constraints.\n \u003cp\u003e\n The era in use at 1970-01-01 must have the value 1.\n Later eras must have sequentially higher values.\n Earlier eras must have sequentially lower values.\n Each chronology must refer to an enum or similar singleton to provide the era values.\n \u003cp\u003e\n This method returns the singleton era of the correct type for the specified era value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"eraValue","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"eras","comment":"Gets the list of eras for the chronology.\n \u003cp\u003e\n Most calendar systems have an era, within which the year has meaning.\n If the calendar system does not support the concept of eras, an empty\n list must be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n All fields can be expressed as a {@code long} integer.\n This method returns an object that describes the valid range for that value.\n \u003cp\u003e\n Note that the result only describes the minimum and maximum valid values\n and it is important not to read too much into them. For example, there\n could be values within the range that are invalid for the field.\n \u003cp\u003e\n This method will return a result whether or not the chronology supports the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.ChronoField)","flatSignature":"(ChronoField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"ChronoField","qualifiedName":"java.time.temporal.ChronoField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayName","comment":"Gets the textual representation of this chronology.\n \u003cp\u003e\n This returns the textual name used to identify the chronology,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.TextStyle, java.util.Locale)","flatSignature":"(TextStyle, Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"style","type":{"isPrimitive":false,"simpleName":"TextStyle","qualifiedName":"java.time.format.TextStyle","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"resolveDate","comment":"Resolves parsed {@code ChronoField} values into a date during parsing.\n \u003cp\u003e\n Most {@code TemporalField} implementations are resolved using the\n resolve method on the field. By contrast, the {@code ChronoField} class\n defines fields that only have meaning relative to the chronology.\n As such, {@code ChronoField} date fields are resolved here in the\n context of a specific chronology.\n \u003cp\u003e\n The default implementation, which explains typical resolve behaviour,\n is provided in {@link AbstractChronology}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003cjava.time.temporal.TemporalField, java.lang.Long\u003e, java.time.format.ResolverStyle)","flatSignature":"(Map\u003cTemporalField, Long\u003e, ResolverStyle)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fieldValues","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}},{"name":"resolverStyle","type":{"isPrimitive":false,"simpleName":"ResolverStyle","qualifiedName":"java.time.format.ResolverStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"period","comment":"Obtains a period for this chronology based on years, months and days.\n \u003cp\u003e\n This returns a period tied to this chronology using the specified\n years, months and days.  All supplied chronologies use periods\n based on years, months and days, however the {@code ChronoPeriod} API\n allows the period to be represented using other units.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"ChronoPeriod","qualifiedName":"java.time.chrono.ChronoPeriod","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"months","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"days","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this chronology to another chronology.\n \u003cp\u003e\n The comparison order first by the chronology ID string, then by any\n additional information specific to the subclass.\n It is \"consistent with equals\", as defined by {@link Comparable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Chronology)","flatSignature":"(Chronology)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this chronology is equal to another chronology.\n \u003cp\u003e\n The comparison is based on the entire state of the object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this chronology.\n \u003cp\u003e\n The hash code should be based on the entire state of the object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this chronology as a {@code String}.\n \u003cp\u003e\n The format should include the entire state of the object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.time.chrono.AbstractChronology"],"enumConstants":[]}