{"name":"AbstractChronology","comment":"An abstract implementation of a calendar system, used to organize and identify dates.\n \u003cp\u003e\n The main date and time API is built on the ISO calendar system.\n The chronology operates behind the scenes to represent the general concept of a calendar system.\n \u003cp\u003e\n See {@link Chronology} for more details.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractChronology","qualifiedName":"java.time.chrono.AbstractChronology","dimension":"","elementType":{},"package":"java.time.chrono","superclass":"java.lang.Object","interfaces":["java.time.chrono.Chronology"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"resolveDate","comment":"Resolves parsed {@code ChronoField} values into a date during parsing.\n \u003cp\u003e\n Most {@code TemporalField} implementations are resolved using the\n resolve method on the field. By contrast, the {@code ChronoField} class\n defines fields that only have meaning relative to the chronology.\n As such, {@code ChronoField} date fields are resolved here in the\n context of a specific chronology.\n \u003cp\u003e\n {@code ChronoField} instances are resolved by this method, which may\n be overridden in subclasses.\n \u003cul\u003e\n \u003cli\u003e{@code EPOCH_DAY} - If present, this is converted to a date and\n  all other date fields are then cross-checked against the date.\n \u003cli\u003e{@code PROLEPTIC_MONTH} - If present, then it is split into the\n  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n  then the field is validated.\n \u003cli\u003e{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n  range is not validated, in smart and strict mode it is. The {@code ERA} is\n  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n  present, and the mode is smart or lenient, then the last available era\n  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n  left untouched. If only the {@code ERA} is present, then it is left untouched.\n \u003cli\u003e{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n  If all three are present, then they are combined to form a date.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is smart or strict, then the month and day are validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first day of the first month in the requested year,\n  then adding the difference in months, then the difference in days.\n  If the mode is smart, and the day-of-month is greater than the maximum for\n  the year-month, then the day-of-month is adjusted to the last day-of-month.\n  If the mode is strict, then the three fields must form a valid date.\n \u003cli\u003e{@code YEAR} and {@code DAY_OF_YEAR} -\n  If both are present, then they are combined to form a date.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first day of the requested year, then adding\n  the difference in days.\n  If the mode is smart or strict, then the two fields must form a valid date.\n \u003cli\u003e{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n  If all four are present, then they are combined to form a date.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first day of the first month in the requested year, then adding\n  the difference in months, then the difference in weeks, then in days.\n  If the mode is smart or strict, then the all four fields are validated to\n  their outer ranges. The date is then combined in a manner equivalent to\n  creating a date on the first day of the requested year and month, then adding\n  the amount in weeks and days to reach their values. If the mode is strict,\n  the date is additionally validated to check that the day and week adjustment\n  did not change the month.\n \u003cli\u003e{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n  form a date. The approach is the same as described above for\n  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n  The day-of-week is adjusted as the next or same matching day-of-week once\n  the years, months and weeks have been handled.\n \u003cli\u003e{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n  If all three are present, then they are combined to form a date.\n  In all three modes, the {@code YEAR} is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first day of the requested year, then adding\n  the difference in weeks, then in days.\n  If the mode is smart or strict, then the all three fields are validated to\n  their outer ranges. The date is then combined in a manner equivalent to\n  creating a date on the first day of the requested year, then adding\n  the amount in weeks and days to reach their values. If the mode is strict,\n  the date is additionally validated to check that the day and week adjustment\n  did not change the year.\n \u003cli\u003e{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n  If all three are present, then they are combined to form a date.\n  The approach is the same as described above for years and weeks in\n  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n  next or same matching day-of-week once the years and weeks have been handled.\n \u003c/ul\u003e\n \u003cp\u003e\n The default implementation is suitable for most calendar systems.\n If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}\n then the last era in {@link #eras()} is used.\n The implementation assumes a 7 day week, that the first day-of-month\n has the value 1, that first day-of-year has the value 1, and that the\n first of the month and year always exists.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003cjava.time.temporal.TemporalField, java.lang.Long\u003e, java.time.format.ResolverStyle)","flatSignature":"(Map\u003cTemporalField, Long\u003e, ResolverStyle)","returnType":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fieldValues","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}},{"name":"resolverStyle","type":{"isPrimitive":false,"simpleName":"ResolverStyle","qualifiedName":"java.time.format.ResolverStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this chronology to another chronology.\n \u003cp\u003e\n The comparison order first by the chronology ID string, then by any\n additional information specific to the subclass.\n It is \"consistent with equals\", as defined by {@link Comparable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Chronology)","flatSignature":"(Chronology)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this chronology is equal to another chronology.\n \u003cp\u003e\n The comparison is based on the entire state of the object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this chronology.\n \u003cp\u003e\n The hash code should be based on the entire state of the object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this chronology as a {@code String}, using the chronology ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.time.chrono.ThaiBuddhistChronology","java.time.chrono.MinguoChronology","java.time.chrono.JapaneseChronology","java.time.chrono.IsoChronology","java.time.chrono.HijrahChronology"],"enumConstants":[]}