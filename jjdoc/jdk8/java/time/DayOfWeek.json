{"name":"DayOfWeek","comment":"A day-of-week, such as \u0027Tuesday\u0027.\n \u003cp\u003e\n {@code DayOfWeek} is an enum representing the 7 days of the week -\n Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.\n \u003cp\u003e\n In addition to the textual enum name, each day-of-week has an {@code int} value.\n The {@code int} value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).\n It is recommended that applications use the enum rather than the {@code int} value\n to ensure code clarity.\n \u003cp\u003e\n This enum provides access to the localized textual form of the day-of-week.\n Some locales also assign different numeric values to the days, declaring\n Sunday to have the value 1, however this class provides no support for this.\n See {@link WeekFields} for localized week-numbering.\n \u003cp\u003e\n \u003cb\u003eDo not use {@code ordinal()} to obtain the numeric representation of {@code DayOfWeek}.\n Use {@code getValue()} instead.\u003c/b\u003e\n \u003cp\u003e\n This enum represents a common concept that is found in many calendar systems.\n As such, this enum may be used by any calendar system that has the day-of-week\n concept defined exactly equivalent to the ISO calendar system.","isClass":true,"isInterface":false,"isEnum":true,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Enum","interfaces":["java.time.temporal.TemporalAccessor","java.time.temporal.TemporalAdjuster"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"values","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"valueOf","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code DayOfWeek} from an {@code int} value.\n \u003cp\u003e\n {@code DayOfWeek} is an enum representing the 7 days of the week.\n This factory allows the enum to be obtained from the {@code int} value.\n The {@code int} value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code DayOfWeek} from a temporal object.\n \u003cp\u003e\n This obtains a day-of-week based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code DayOfWeek}.\n \u003cp\u003e\n The conversion extracts the {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} field.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code DayOfWeek::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getValue","comment":"Gets the day-of-week {@code int} value.\n \u003cp\u003e\n The values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).\n See {@link java.time.temporal.WeekFields#dayOfWeek()} for localized week-numbering.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayName","comment":"Gets the textual representation, such as \u0027Mon\u0027 or \u0027Friday\u0027.\n \u003cp\u003e\n This returns the textual name used to identify the day-of-week,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \u003cp\u003e\n If no textual mapping is found then the {@link #getValue() numeric value} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.TextStyle, java.util.Locale)","flatSignature":"(TextStyle, Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"style","type":{"isPrimitive":false,"simpleName":"TextStyle","qualifiedName":"java.time.format.TextStyle","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this day-of-week can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range} and\n {@link #get(TemporalField) get} methods will throw an exception.\n \u003cp\u003e\n If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then\n this method returns true.\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This day-of-week is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the\n range of the day-of-week, from 1 to 7, will be returned.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this day-of-week as an {@code int}.\n \u003cp\u003e\n This queries this day-of-week for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the\n value of the day-of-week, from 1 to 7, will be returned.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this day-of-week as a {@code long}.\n \u003cp\u003e\n This queries this day-of-week for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the\n value of the day-of-week, from 1 to 7, will be returned.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns the day-of-week that is the specified number of days after this one.\n \u003cp\u003e\n The calculation rolls around the end of the week from Sunday to Monday.\n The specified period may be negative.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns the day-of-week that is the specified number of days before this one.\n \u003cp\u003e\n The calculation rolls around the start of the year from Monday to Sunday.\n The specified period may be negative.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this day-of-week using the specified query.\n \u003cp\u003e\n This queries this day-of-week using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have this day-of-week.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the day-of-week changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n passing {@link ChronoField#DAY_OF_WEEK} as the field.\n Note that this adjusts forwards or backwards within a Monday to Sunday week.\n See {@link java.time.temporal.WeekFields#dayOfWeek()} for localized week start days.\n See {@code TemporalAdjuster} for other adjusters with more control,\n such as {@code next(MONDAY)}.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisDayOfWeek.adjustInto(temporal);\n   temporal \u003d temporal.with(thisDayOfWeek);\n \u003c/pre\u003e\n \u003cp\u003e\n For example, given a date that is a Wednesday, the following are output:\n \u003cpre\u003e\n   dateOnWed.with(MONDAY);     // two days earlier\n   dateOnWed.with(TUESDAY);    // one day earlier\n   dateOnWed.with(WEDNESDAY);  // same date\n   dateOnWed.with(THURSDAY);   // one day later\n   dateOnWed.with(FRIDAY);     // two days later\n   dateOnWed.with(SATURDAY);   // three days later\n   dateOnWed.with(SUNDAY);     // four days later\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]}