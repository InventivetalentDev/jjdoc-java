{"name":"OffsetDateTime","comment":"A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system,\n such as {@code 2007-12-03T10:15:30+01:00}.\n \u003cp\u003e\n {@code OffsetDateTime} is an immutable representation of a date-time with an offset.\n This class stores all date and time fields, to a precision of nanoseconds,\n as well as the offset from UTC/Greenwich. For example, the value\n \"2nd October 2007 at 13:45.30.123456789 +02:00\" can be stored in an {@code OffsetDateTime}.\n \u003cp\u003e\n {@code OffsetDateTime}, {@link java.time.ZonedDateTime} and {@link java.time.Instant} all store an instant\n on the time-line to nanosecond precision.\n {@code Instant} is the simplest, simply representing the instant.\n {@code OffsetDateTime} adds to the instant the offset from UTC/Greenwich, which allows\n the local date-time to be obtained.\n {@code ZonedDateTime} adds full time-zone rules.\n \u003cp\u003e\n It is intended that {@code ZonedDateTime} or {@code Instant} is used to model data\n in simpler applications. This class may be used when modeling date-time concepts in\n more detail, or when communicating to a database or in a network protocol.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code OffsetDateTime} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.temporal.Temporal","java.time.temporal.TemporalAdjuster","java.lang.Comparable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"MIN","comment":"The minimum supported {@code OffsetDateTime}, \u0027-999999999-01-01T00:00:00+18:00\u0027.\n This is the local date-time of midnight at the start of the minimum date\n in the maximum offset (larger offsets are earlier on the time-line).\n This combines {@link LocalDateTime#MIN} and {@link ZoneOffset#MAX}.\n This could be used by an application as a \"far past\" date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isStatic":true},{"name":"MAX","comment":"The maximum supported {@code OffsetDateTime}, \u0027+999999999-12-31T23:59:59.999999999-18:00\u0027.\n This is the local date-time just before midnight at the end of the maximum date\n in the minimum offset (larger negative offsets are later on the time-line).\n This combines {@link LocalDateTime#MAX} and {@link ZoneOffset#MIN}.\n This could be used by an application as a \"far future\" date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"timeLineOrder","comment":"Gets a comparator that compares two {@code OffsetDateTime} instances\n based solely on the instant.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the underlying instant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date-time.\n The offset will be calculated from the time-zone in the clock.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date-time.\n Specifying the time-zone avoids dependence on the default time-zone.\n The offset will be calculated from the specified time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date-time.\n The offset will be calculated from the time-zone in the clock.\n \u003cp\u003e\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code OffsetDateTime} from a date, time and offset.\n \u003cp\u003e\n This creates an offset date-time with the specified local date, time and offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDate, java.time.LocalTime, java.time.ZoneOffset)","flatSignature":"(LocalDate, LocalTime, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}}},{"name":"time","type":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code OffsetDateTime} from a date-time and offset.\n \u003cp\u003e\n This creates an offset date-time with the specified local date-time and offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDateTime, java.time.ZoneOffset)","flatSignature":"(LocalDateTime, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dateTime","type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code OffsetDateTime} from a year, month, day,\n hour, minute, second, nanosecond and offset.\n \u003cp\u003e\n This creates an offset date-time with the seven specified fields.\n \u003cp\u003e\n This method exists primarily for writing test cases.\n Non test-code will typically use other methods to create an offset time.\n {@code LocalDateTime} has five additional convenience variants of the\n equivalent factory method taking fewer arguments.\n They are not provided here to reduce the footprint of the API.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int, int, java.time.ZoneOffset)","flatSignature":"(int, int, int, int, int, int, int, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofInstant","comment":"Obtains an instance of {@code OffsetDateTime} from an {@code Instant} and zone ID.\n \u003cp\u003e\n This creates an offset date-time with the same instant as that specified.\n Finding the offset from UTC/Greenwich is simple as there is only one valid\n offset for each instant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant, java.time.ZoneId)","flatSignature":"(Instant, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code OffsetDateTime} from a temporal object.\n \u003cp\u003e\n This obtains an offset date-time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code OffsetDateTime}.\n \u003cp\u003e\n The conversion will first obtain a {@code ZoneOffset} from the temporal object.\n It will then try to obtain a {@code LocalDateTime}, falling back to an {@code Instant} if necessary.\n The result will be the combination of {@code ZoneOffset} with either\n with {@code LocalDateTime} or {@code Instant}.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code OffsetDateTime::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code OffsetDateTime} from a text string\n such as {@code 2007-12-03T10:15:30+01:00}.\n \u003cp\u003e\n The string must represent a valid date-time and is parsed using\n {@link java.time.format.DateTimeFormatter#ISO_OFFSET_DATE_TIME}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code OffsetDateTime} from a text string using a specific formatter.\n \u003cp\u003e\n The text is parsed using the formatter, returning a date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.time.format.DateTimeFormatter)","flatSignature":"(CharSequence, DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this date-time can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The supported fields are:\n \u003cul\u003e\n \u003cli\u003e{@code NANO_OF_SECOND}\n \u003cli\u003e{@code NANO_OF_DAY}\n \u003cli\u003e{@code MICRO_OF_SECOND}\n \u003cli\u003e{@code MICRO_OF_DAY}\n \u003cli\u003e{@code MILLI_OF_SECOND}\n \u003cli\u003e{@code MILLI_OF_DAY}\n \u003cli\u003e{@code SECOND_OF_MINUTE}\n \u003cli\u003e{@code SECOND_OF_DAY}\n \u003cli\u003e{@code MINUTE_OF_HOUR}\n \u003cli\u003e{@code MINUTE_OF_DAY}\n \u003cli\u003e{@code HOUR_OF_AMPM}\n \u003cli\u003e{@code CLOCK_HOUR_OF_AMPM}\n \u003cli\u003e{@code HOUR_OF_DAY}\n \u003cli\u003e{@code CLOCK_HOUR_OF_DAY}\n \u003cli\u003e{@code AMPM_OF_DAY}\n \u003cli\u003e{@code DAY_OF_WEEK}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}\n \u003cli\u003e{@code DAY_OF_MONTH}\n \u003cli\u003e{@code DAY_OF_YEAR}\n \u003cli\u003e{@code EPOCH_DAY}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_MONTH}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_YEAR}\n \u003cli\u003e{@code MONTH_OF_YEAR}\n \u003cli\u003e{@code PROLEPTIC_MONTH}\n \u003cli\u003e{@code YEAR_OF_ERA}\n \u003cli\u003e{@code YEAR}\n \u003cli\u003e{@code ERA}\n \u003cli\u003e{@code INSTANT_SECONDS}\n \u003cli\u003e{@code OFFSET_SECONDS}\n \u003c/ul\u003e\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n If the unit is a {@link ChronoUnit} then the query is implemented here.\n The supported units are:\n \u003cul\u003e\n \u003cli\u003e{@code NANOS}\n \u003cli\u003e{@code MICROS}\n \u003cli\u003e{@code MILLIS}\n \u003cli\u003e{@code SECONDS}\n \u003cli\u003e{@code MINUTES}\n \u003cli\u003e{@code HOURS}\n \u003cli\u003e{@code HALF_DAYS}\n \u003cli\u003e{@code DAYS}\n \u003cli\u003e{@code WEEKS}\n \u003cli\u003e{@code MONTHS}\n \u003cli\u003e{@code YEARS}\n \u003cli\u003e{@code DECADES}\n \u003cli\u003e{@code CENTURIES}\n \u003cli\u003e{@code MILLENNIA}\n \u003cli\u003e{@code ERAS}\n \u003c/ul\u003e\n All other {@code ChronoUnit} instances will return false.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This date-time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this date-time as an {@code int}.\n \u003cp\u003e\n This queries this date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},\n {@code EPOCH_DAY}, {@code PROLEPTIC_MONTH} and {@code INSTANT_SECONDS} which are too\n large to fit in an {@code int} and throw a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this date-time as a {@code long}.\n \u003cp\u003e\n This queries this date-time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOffset","comment":"Gets the zone offset, such as \u0027+01:00\u0027.\n \u003cp\u003e\n This is the offset of the local date-time from UTC/Greenwich.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withOffsetSameLocal","comment":"Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring\n that the result has the same local date-time.\n \u003cp\u003e\n This method returns an object with the same {@code LocalDateTime} and the specified {@code ZoneOffset}.\n No calculation is needed or performed.\n For example, if this time represents {@code 2007-12-03T10:30+02:00} and the offset specified is\n {@code +03:00}, then this method will return {@code 2007-12-03T10:30+03:00}.\n \u003cp\u003e\n To take into account the difference between the offsets, and adjust the time fields,\n use {@link #withOffsetSameInstant}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withOffsetSameInstant","comment":"Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring\n that the result is at the same instant.\n \u003cp\u003e\n This method returns an object with the specified {@code ZoneOffset} and a {@code LocalDateTime}\n adjusted by the difference between the two offsets.\n This will result in the old and new objects representing the same instant.\n This is useful for finding the local time in a different offset.\n For example, if this time represents {@code 2007-12-03T10:30+02:00} and the offset specified is\n {@code +03:00}, then this method will return {@code 2007-12-03T11:30+03:00}.\n \u003cp\u003e\n To change the offset without adjusting the local time use {@link #withOffsetSameLocal}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLocalDateTime","comment":"Gets the {@code LocalDateTime} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the same year, month, day and time\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalDate","comment":"Gets the {@code LocalDate} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalDate} with the same year, month and day\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getYear","comment":"Gets the year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the year.\n \u003cp\u003e\n The year returned by this method is proleptic as per {@code get(YEAR)}.\n To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonthValue","comment":"Gets the month-of-year field from 1 to 12.\n \u003cp\u003e\n This method returns the month as an {@code int} from 1 to 12.\n Application code is frequently clearer if the enum {@link Month}\n is used by calling {@link #getMonth()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonth","comment":"Gets the month-of-year field using the {@code Month} enum.\n \u003cp\u003e\n This method returns the enum {@link Month} for the month.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link Month#getValue() int value}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfMonth","comment":"Gets the day-of-month field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-month.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfYear","comment":"Gets the day-of-year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfWeek","comment":"Gets the day-of-week field, which is an enum {@code DayOfWeek}.\n \u003cp\u003e\n This method returns the enum {@link DayOfWeek} for the day-of-week.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link DayOfWeek#getValue() int value}.\n \u003cp\u003e\n Additional information can be obtained from the {@code DayOfWeek}.\n This includes textual names of the values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalTime","comment":"Gets the {@code LocalTime} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalTime} with the same hour, minute, second and\n nanosecond as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHour","comment":"Gets the hour-of-day field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMinute","comment":"Gets the minute-of-hour field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSecond","comment":"Gets the second-of-minute field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNano","comment":"Gets the nano-of-second field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"with","comment":"Returns an adjusted copy of this date-time.\n \u003cp\u003e\n This returns an {@code OffsetDateTime}, based on this one, with the date-time adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \u003cp\u003e\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n {@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the {@code TemporalAdjuster} interface,\n such as {@link Month} and {@link java.time.MonthDay MonthDay}.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \u003cp\u003e\n For example this code returns a date on the last day of July:\n \u003cpre\u003e\n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result \u003d offsetDateTime.with(JULY).with(lastDayOfMonth());\n \u003c/pre\u003e\n \u003cp\u003e\n The classes {@link LocalDate}, {@link LocalTime} and {@link ZoneOffset} implement\n {@code TemporalAdjuster}, thus this method can be used to change the date, time or offset:\n \u003cpre\u003e\n  result \u003d offsetDateTime.with(date);\n  result \u003d offsetDateTime.with(time);\n  result \u003d offsetDateTime.with(offset);\n \u003c/pre\u003e\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalAdjuster#adjustInto(Temporal)} method on the\n specified adjuster passing {@code this} as the argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns a copy of this date-time with the specified field set to a new value.\n \u003cp\u003e\n This returns an {@code OffsetDateTime}, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \u003cp\u003e\n In some cases, changing the specified field can cause the resulting date-time to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the adjustment is implemented here.\n \u003cp\u003e\n The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.\n The offset and nano-of-second are unchanged.\n If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.\n \u003cp\u003e\n The {@code OFFSET_SECONDS} field will return a date-time with the specified offset.\n The local date-time is unaltered. If the new offset value is outside the valid range\n then a {@code DateTimeException} will be thrown.\n \u003cp\u003e\n The other {@link #isSupported(TemporalField) supported fields} will behave as per\n the matching method on {@link LocalDateTime#with(TemporalField, long) LocalDateTime}.\n In this case, the offset is not part of the calculation and will be unchanged.\n \u003cp\u003e\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withYear","comment":"Returns a copy of this {@code OffsetDateTime} with the year altered.\n \u003cp\u003e\n The time and offset do not affect the calculation and will be the same in the result.\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMonth","comment":"Returns a copy of this {@code OffsetDateTime} with the month-of-year altered.\n \u003cp\u003e\n The time and offset do not affect the calculation and will be the same in the result.\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfMonth","comment":"Returns a copy of this {@code OffsetDateTime} with the day-of-month altered.\n \u003cp\u003e\n If the resulting {@code OffsetDateTime} is invalid, an exception is thrown.\n The time and offset do not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfYear","comment":"Returns a copy of this {@code OffsetDateTime} with the day-of-year altered.\n \u003cp\u003e\n The time and offset do not affect the calculation and will be the same in the result.\n If the resulting {@code OffsetDateTime} is invalid, an exception is thrown.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withHour","comment":"Returns a copy of this {@code OffsetDateTime} with the hour-of-day altered.\n \u003cp\u003e\n The date and offset do not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMinute","comment":"Returns a copy of this {@code OffsetDateTime} with the minute-of-hour altered.\n \u003cp\u003e\n The date and offset do not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withSecond","comment":"Returns a copy of this {@code OffsetDateTime} with the second-of-minute altered.\n \u003cp\u003e\n The date and offset do not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withNano","comment":"Returns a copy of this {@code OffsetDateTime} with the nano-of-second altered.\n \u003cp\u003e\n The date and offset do not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"truncatedTo","comment":"Returns a copy of this {@code OffsetDateTime} with the time truncated.\n \u003cp\u003e\n Truncation returns a copy of the original date-time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit\n will set the second-of-minute and nano-of-second field to zero.\n \u003cp\u003e\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on {@link ChronoUnit} and\n {@link ChronoUnit#DAYS DAYS}. Other units throw an exception.\n \u003cp\u003e\n The offset does not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date-time with the specified amount added.\n \u003cp\u003e\n This returns an {@code OffsetDateTime}, based on this one, with the specified amount added.\n The amount is typically {@link Period} or {@link Duration} but may be\n any other type implementing the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#addTo(Temporal)}. The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date-time with the specified amount added.\n \u003cp\u003e\n This returns an {@code OffsetDateTime}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoUnit} then the addition is implemented by\n {@link LocalDateTime#plus(long, TemporalUnit)}.\n The offset is not part of the calculation and will be unchanged in the result.\n \u003cp\u003e\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusYears","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of years added.\n \u003cp\u003e\n This method adds the specified amount to the years field in three steps:\n \u003col\u003e\n \u003cli\u003eAdd the input years to the year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2008-02-29 (leap year) plus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMonths","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of months added.\n \u003cp\u003e\n This method adds the specified amount to the months field in three steps:\n \u003col\u003e\n \u003cli\u003eAdd the input months to the month-of-year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2007-03-31 plus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusWeeks","comment":"Returns a copy of this OffsetDateTime with the specified number of weeks added.\n \u003cp\u003e\n This method adds the specified amount in weeks to the days field incrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 plus one week would result in 2009-01-07.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusDays","comment":"Returns a copy of this OffsetDateTime with the specified number of days added.\n \u003cp\u003e\n This method adds the specified amount to the days field incrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 plus one day would result in 2009-01-01.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusHours","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of hours added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMinutes","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of minutes added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusSeconds","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of seconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusNanos","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date-time with the specified amount subtracted.\n \u003cp\u003e\n This returns an {@code OffsetDateTime}, based on this one, with the specified amount subtracted.\n The amount is typically {@link Period} or {@link Duration} but may be\n any other type implementing the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date-time with the specified amount subtracted.\n \u003cp\u003e\n This returns an {@code OffsetDateTime}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusYears","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of years subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the years field in three steps:\n \u003col\u003e\n \u003cli\u003eSubtract the input years from the year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2008-02-29 (leap year) minus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMonths","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of months subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the months field in three steps:\n \u003col\u003e\n \u003cli\u003eSubtract the input months from the month-of-year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2007-03-31 minus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusWeeks","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of weeks subtracted.\n \u003cp\u003e\n This method subtracts the specified amount in weeks from the days field decrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 minus one week would result in 2009-01-07.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusDays","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of days subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the days field decrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 minus one day would result in 2009-01-01.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusHours","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of hours subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMinutes","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of minutes subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusSeconds","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of seconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusNanos","comment":"Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date-time using the specified query.\n \u003cp\u003e\n This queries this date-time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have the same offset, date\n and time as this object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the offset, date and time changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n three times, passing {@link ChronoField#EPOCH_DAY},\n {@link ChronoField#NANO_OF_DAY} and {@link ChronoField#OFFSET_SECONDS} as the fields.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisOffsetDateTime.adjustInto(temporal);\n   temporal \u003d temporal.with(thisOffsetDateTime);\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"Calculates the amount of time until another date-time in terms of the specified unit.\n \u003cp\u003e\n This calculates the amount of time between two {@code OffsetDateTime}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified date-time.\n The result will be negative if the end is before the start.\n For example, the amount in days between two date-times can be calculated\n using {@code startDateTime.until(endDateTime, DAYS)}.\n \u003cp\u003e\n The {@code Temporal} passed to this method is converted to a\n {@code OffsetDateTime} using {@link #from(TemporalAccessor)}.\n If the offset differs between the two date-times, the specified\n end date-time is normalized to have the same offset as this date-time.\n \u003cp\u003e\n The calculation returns a whole number, representing the number of\n complete units between the two date-times.\n For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z\n will only be one month as it is one minute short of two months.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   amount \u003d start.until(end, MONTHS);\n   amount \u003d MONTHS.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.\n \u003cp\u003e\n The calculation is implemented in this method for {@link ChronoUnit}.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},\n {@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},\n {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.\n Other {@code ChronoUnit} values will throw an exception.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)","flatSignature":"(Temporal, TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats this date-time using the specified formatter.\n \u003cp\u003e\n This date-time will be passed to the formatter to produce a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DateTimeFormatter)","flatSignature":"(DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atZoneSameInstant","comment":"Combines this date-time with a time-zone to create a {@code ZonedDateTime}\n ensuring that the result has the same instant.\n \u003cp\u003e\n This returns a {@code ZonedDateTime} formed from this date-time and the specified time-zone.\n This conversion will ignore the visible local date-time and use the underlying instant instead.\n This avoids any problems with local time-line gaps or overlaps.\n The result might have different values for fields such as hour, minute an even day.\n \u003cp\u003e\n To attempt to retain the values of the fields, use {@link #atZoneSimilarLocal(ZoneId)}.\n To use the offset as the zone ID, use {@link #toZonedDateTime()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atZoneSimilarLocal","comment":"Combines this date-time with a time-zone to create a {@code ZonedDateTime}\n trying to keep the same local date and time.\n \u003cp\u003e\n This returns a {@code ZonedDateTime} formed from this date-time and the specified time-zone.\n Where possible, the result will have the same local date-time as this object.\n \u003cp\u003e\n Time-zone rules, such as daylight savings, mean that not every time on the\n local time-line exists. If the local date-time is in a gap or overlap according to\n the rules then a resolver is used to determine the resultant local time and offset.\n This method uses {@link ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset)}\n to retain the offset from this instance if possible.\n \u003cp\u003e\n Finer control over gaps and overlaps is available in two ways.\n If you simply want to use the later offset at overlaps then call\n {@link ZonedDateTime#withLaterOffsetAtOverlap()} immediately after this method.\n \u003cp\u003e\n To create a zoned date-time at the same instant irrespective of the local time-line,\n use {@link #atZoneSameInstant(ZoneId)}.\n To use the offset as the zone ID, use {@link #toZonedDateTime()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toOffsetTime","comment":"Converts this date-time to an {@code OffsetTime}.\n \u003cp\u003e\n This returns an offset time with the same local time and offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OffsetTime","qualifiedName":"java.time.OffsetTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toZonedDateTime","comment":"Converts this date-time to a {@code ZonedDateTime} using the offset as the zone ID.\n \u003cp\u003e\n This creates the simplest possible {@code ZonedDateTime} using the offset\n as the zone ID.\n \u003cp\u003e\n To control the time-zone used, see {@link #atZoneSameInstant(ZoneId)} and\n {@link #atZoneSimilarLocal(ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toInstant","comment":"Converts this date-time to an {@code Instant}.\n \u003cp\u003e\n This returns an {@code Instant} representing the same point on the\n time-line as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toEpochSecond","comment":"Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n This allows this date-time to be converted to a value of the\n {@link ChronoField#INSTANT_SECONDS epoch-seconds} field. This is primarily\n intended for low-level conversions rather than general application usage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares this date-time to another date-time.\n \u003cp\u003e\n The comparison is based on the instant then on the local date-time.\n It is \"consistent with equals\", as defined by {@link Comparable}.\n \u003cp\u003e\n For example, the following is the comparator order:\n \u003col\u003e\n \u003cli\u003e{@code 2008-12-03T10:30+01:00}\u003c/li\u003e\n \u003cli\u003e{@code 2008-12-03T11:00+01:00}\u003c/li\u003e\n \u003cli\u003e{@code 2008-12-03T12:00+02:00}\u003c/li\u003e\n \u003cli\u003e{@code 2008-12-03T11:30+01:00}\u003c/li\u003e\n \u003cli\u003e{@code 2008-12-03T12:00+01:00}\u003c/li\u003e\n \u003cli\u003e{@code 2008-12-03T12:30+01:00}\u003c/li\u003e\n \u003c/ol\u003e\n Values #2 and #3 represent the same instant on the time-line.\n When two values represent the same instant, the local date-time is compared\n to distinguish them. This step is needed to make the ordering\n consistent with {@code equals()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.OffsetDateTime)","flatSignature":"(OffsetDateTime)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAfter","comment":"Checks if the instant of this date-time is after that of the specified date-time.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} and {@link #equals} in that it\n only compares the instant of the date-time. This is equivalent to using\n {@code dateTime1.toInstant().isAfter(dateTime2.toInstant());}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.OffsetDateTime)","flatSignature":"(OffsetDateTime)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBefore","comment":"Checks if the instant of this date-time is before that of the specified date-time.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} in that it\n only compares the instant of the date-time. This is equivalent to using\n {@code dateTime1.toInstant().isBefore(dateTime2.toInstant());}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.OffsetDateTime)","flatSignature":"(OffsetDateTime)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isEqual","comment":"Checks if the instant of this date-time is equal to that of the specified date-time.\n \u003cp\u003e\n This method differs from the comparison in {@link #compareTo} and {@link #equals}\n in that it only compares the instant of the date-time. This is equivalent to using\n {@code dateTime1.toInstant().equals(dateTime2.toInstant());}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.OffsetDateTime)","flatSignature":"(OffsetDateTime)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this date-time is equal to another date-time.\n \u003cp\u003e\n The comparison is based on the local date-time and the offset.\n To compare for the same instant on the time-line, use {@link #isEqual}.\n Only objects of type {@code OffsetDateTime} are compared, other types return false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30+01:00}.\n \u003cp\u003e\n The output will be one of the following ISO-8601 formats:\n \u003cul\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mmXXXXX}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ssXXXXX}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSXXXXX}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSSSSXXXXX}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSSSSSSSXXXXX}\u003c/li\u003e\n \u003c/ul\u003e\n The format used will be the shortest that outputs the full value of\n the time where the omitted parts are implied to be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}