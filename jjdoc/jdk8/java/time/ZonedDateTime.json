{"name":"ZonedDateTime","comment":"A date-time with a time-zone in the ISO-8601 calendar system,\n such as {@code 2007-12-03T10:15:30+01:00 Europe/Paris}.\n \u003cp\u003e\n {@code ZonedDateTime} is an immutable representation of a date-time with a time-zone.\n This class stores all date and time fields, to a precision of nanoseconds,\n and a time-zone, with a zone offset used to handle ambiguous local date-times.\n For example, the value\n \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone\"\n can be stored in a {@code ZonedDateTime}.\n \u003cp\u003e\n This class handles conversion from the local time-line of {@code LocalDateTime}\n to the instant time-line of {@code Instant}.\n The difference between the two time-lines is the offset from UTC/Greenwich,\n represented by a {@code ZoneOffset}.\n \u003cp\u003e\n Converting between the two time-lines involves calculating the offset using the\n {@link ZoneRules rules} accessed from the {@code ZoneId}.\n Obtaining the offset for an instant is simple, as there is exactly one valid\n offset for each instant. By contrast, obtaining the offset for a local date-time\n is not straightforward. There are three cases:\n \u003cul\u003e\n \u003cli\u003eNormal, with one valid offset. For the vast majority of the year, the normal\n  case applies, where there is a single valid offset for the local date-time.\u003c/li\u003e\n \u003cli\u003eGap, with zero valid offsets. This is when clocks jump forward typically\n  due to the spring daylight savings change from \"winter\" to \"summer\".\n  In a gap there are local date-time values with no valid offset.\u003c/li\u003e\n \u003cli\u003eOverlap, with two valid offsets. This is when clocks are set back typically\n  due to the autumn daylight savings change from \"summer\" to \"winter\".\n  In an overlap there are local date-time values with two valid offsets.\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n Any method that converts directly or implicitly from a local date-time to an\n instant by obtaining the offset has the potential to be complicated.\n \u003cp\u003e\n For Gaps, the general strategy is that if the local date-time falls in the\n middle of a Gap, then the resulting zoned date-time will have a local date-time\n shifted forwards by the length of the Gap, resulting in a date-time in the later\n offset, typically \"summer\" time.\n \u003cp\u003e\n For Overlaps, the general strategy is that if the local date-time falls in the\n middle of an Overlap, then the previous offset will be retained. If there is no\n previous offset, or the previous offset is invalid, then the earlier offset is\n used, typically \"summer\" time.. Two additional methods,\n {@link #withEarlierOffsetAtOverlap()} and {@link #withLaterOffsetAtOverlap()},\n help manage the case of an overlap.\n \u003cp\u003e\n In terms of design, this class should be viewed primarily as the combination\n of a {@code LocalDateTime} and a {@code ZoneId}. The {@code ZoneOffset} is\n a vital, but secondary, piece of information, used to ensure that the class\n represents an instant, especially during a daylight savings overlap.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code ZonedDateTime} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.temporal.Temporal","java.time.chrono.ChronoZonedDateTime","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"now","comment":"Obtains the current date-time from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date-time.\n The zone and offset will be set based on the time-zone in the clock.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date-time.\n Specifying the time-zone avoids dependence on the default time-zone.\n The offset will be calculated from the specified time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date-time.\n The zone and offset will be set based on the time-zone in the clock.\n \u003cp\u003e\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code ZonedDateTime} from a local date and time.\n \u003cp\u003e\n This creates a zoned date-time matching the input local date and time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \u003cp\u003e\n The local date time and first combined to form a local date-time.\n The local date-time is then resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the {@link ZoneRules rules} of the zone ID.\n\u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \u003cp\u003e\n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDate, java.time.LocalTime, java.time.ZoneId)","flatSignature":"(LocalDate, LocalTime, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}}},{"name":"time","type":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code ZonedDateTime} from a local date-time.\n \u003cp\u003e\n This creates a zoned date-time matching the input local date-time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \u003cp\u003e\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the {@link ZoneRules rules} of the zone ID.\n\u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \u003cp\u003e\n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDateTime, java.time.ZoneId)","flatSignature":"(LocalDateTime, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"localDateTime","type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code ZonedDateTime} from a year, month, day,\n hour, minute, second, nanosecond and time-zone.\n \u003cp\u003e\n This creates a zoned date-time matching the local date-time of the seven\n specified fields as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \u003cp\u003e\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the {@link ZoneRules rules} of the zone ID.\n\u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \u003cp\u003e\n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n \u003cp\u003e\n This method exists primarily for writing test cases.\n Non test-code will typically use other methods to create an offset time.\n {@code LocalDateTime} has five additional convenience variants of the\n equivalent factory method taking fewer arguments.\n They are not provided here to reduce the footprint of the API.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int, int, java.time.ZoneId)","flatSignature":"(int, int, int, int, int, int, int, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofLocal","comment":"Obtains an instance of {@code ZonedDateTime} from a local date-time\n using the preferred offset if possible.\n \u003cp\u003e\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the {@link ZoneRules rules} of the zone ID.\n\u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n If the preferred offset is one of the valid offsets then it is used.\n Otherwise the earlier valid offset is used, typically corresponding to \"summer\".\n \u003cp\u003e\n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDateTime, java.time.ZoneId, java.time.ZoneOffset)","flatSignature":"(LocalDateTime, ZoneId, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"localDateTime","type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}},{"name":"preferredOffset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofInstant","comment":"Obtains an instance of {@code ZonedDateTime} from an {@code Instant}.\n \u003cp\u003e\n This creates a zoned date-time with the same instant as that specified.\n Calling {@link #toInstant()} will return an instant equal to the one used here.\n \u003cp\u003e\n Converting an instant to a zoned date-time is simple as there is only one valid\n offset for each instant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant, java.time.ZoneId)","flatSignature":"(Instant, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofInstant","comment":"Obtains an instance of {@code ZonedDateTime} from the instant formed by combining\n the local date-time and offset.\n \u003cp\u003e\n This creates a zoned date-time by {@link LocalDateTime#toInstant(ZoneOffset) combining}\n the {@code LocalDateTime} and {@code ZoneOffset}.\n This combination uniquely specifies an instant without ambiguity.\n \u003cp\u003e\n Converting an instant to a zoned date-time is simple as there is only one valid\n offset for each instant. If the valid offset is different to the offset specified,\n then the date-time and offset of the zoned date-time will differ from those specified.\n \u003cp\u003e\n If the {@code ZoneId} to be used is a {@code ZoneOffset}, this method is equivalent\n to {@link #of(LocalDateTime, ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDateTime, java.time.ZoneOffset, java.time.ZoneId)","flatSignature":"(LocalDateTime, ZoneOffset, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"localDateTime","type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofStrict","comment":"Obtains an instance of {@code ZonedDateTime} strictly validating the\n combination of local date-time, offset and zone ID.\n \u003cp\u003e\n This creates a zoned date-time ensuring that the offset is valid for the\n local date-time according to the rules of the specified zone.\n If the offset is invalid, an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDateTime, java.time.ZoneOffset, java.time.ZoneId)","flatSignature":"(LocalDateTime, ZoneOffset, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"localDateTime","type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code ZonedDateTime} from a temporal object.\n \u003cp\u003e\n This obtains a zoned date-time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ZonedDateTime}.\n \u003cp\u003e\n The conversion will first obtain a {@code ZoneId} from the temporal object,\n falling back to a {@code ZoneOffset} if necessary. It will then try to obtain\n an {@code Instant}, falling back to a {@code LocalDateTime} if necessary.\n The result will be either the combination of {@code ZoneId} or {@code ZoneOffset}\n with {@code Instant} or {@code LocalDateTime}.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code ZonedDateTime::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code ZonedDateTime} from a text string such as\n {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}.\n \u003cp\u003e\n The string must represent a valid date-time and is parsed using\n {@link java.time.format.DateTimeFormatter#ISO_ZONED_DATE_TIME}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code ZonedDateTime} from a text string using a specific formatter.\n \u003cp\u003e\n The text is parsed using the formatter, returning a date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.time.format.DateTimeFormatter)","flatSignature":"(CharSequence, DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this date-time can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The supported fields are:\n \u003cul\u003e\n \u003cli\u003e{@code NANO_OF_SECOND}\n \u003cli\u003e{@code NANO_OF_DAY}\n \u003cli\u003e{@code MICRO_OF_SECOND}\n \u003cli\u003e{@code MICRO_OF_DAY}\n \u003cli\u003e{@code MILLI_OF_SECOND}\n \u003cli\u003e{@code MILLI_OF_DAY}\n \u003cli\u003e{@code SECOND_OF_MINUTE}\n \u003cli\u003e{@code SECOND_OF_DAY}\n \u003cli\u003e{@code MINUTE_OF_HOUR}\n \u003cli\u003e{@code MINUTE_OF_DAY}\n \u003cli\u003e{@code HOUR_OF_AMPM}\n \u003cli\u003e{@code CLOCK_HOUR_OF_AMPM}\n \u003cli\u003e{@code HOUR_OF_DAY}\n \u003cli\u003e{@code CLOCK_HOUR_OF_DAY}\n \u003cli\u003e{@code AMPM_OF_DAY}\n \u003cli\u003e{@code DAY_OF_WEEK}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}\n \u003cli\u003e{@code DAY_OF_MONTH}\n \u003cli\u003e{@code DAY_OF_YEAR}\n \u003cli\u003e{@code EPOCH_DAY}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_MONTH}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_YEAR}\n \u003cli\u003e{@code MONTH_OF_YEAR}\n \u003cli\u003e{@code PROLEPTIC_MONTH}\n \u003cli\u003e{@code YEAR_OF_ERA}\n \u003cli\u003e{@code YEAR}\n \u003cli\u003e{@code ERA}\n \u003cli\u003e{@code INSTANT_SECONDS}\n \u003cli\u003e{@code OFFSET_SECONDS}\n \u003c/ul\u003e\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n If the unit is a {@link ChronoUnit} then the query is implemented here.\n The supported units are:\n \u003cul\u003e\n \u003cli\u003e{@code NANOS}\n \u003cli\u003e{@code MICROS}\n \u003cli\u003e{@code MILLIS}\n \u003cli\u003e{@code SECONDS}\n \u003cli\u003e{@code MINUTES}\n \u003cli\u003e{@code HOURS}\n \u003cli\u003e{@code HALF_DAYS}\n \u003cli\u003e{@code DAYS}\n \u003cli\u003e{@code WEEKS}\n \u003cli\u003e{@code MONTHS}\n \u003cli\u003e{@code YEARS}\n \u003cli\u003e{@code DECADES}\n \u003cli\u003e{@code CENTURIES}\n \u003cli\u003e{@code MILLENNIA}\n \u003cli\u003e{@code ERAS}\n \u003c/ul\u003e\n All other {@code ChronoUnit} instances will return false.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This date-time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this date-time as an {@code int}.\n \u003cp\u003e\n This queries this date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},\n {@code EPOCH_DAY}, {@code PROLEPTIC_MONTH} and {@code INSTANT_SECONDS} which are too\n large to fit in an {@code int} and throw a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this date-time as a {@code long}.\n \u003cp\u003e\n This queries this date-time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOffset","comment":"Gets the zone offset, such as \u0027+01:00\u0027.\n \u003cp\u003e\n This is the offset of the local date-time from UTC/Greenwich.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withEarlierOffsetAtOverlap","comment":"Returns a copy of this date-time changing the zone offset to the\n earlier of the two valid offsets at a local time-line overlap.\n \u003cp\u003e\n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the earlier of the two selected.\n \u003cp\u003e\n If this method is called when it is not an overlap, {@code this}\n is returned.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withLaterOffsetAtOverlap","comment":"Returns a copy of this date-time changing the zone offset to the\n later of the two valid offsets at a local time-line overlap.\n \u003cp\u003e\n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the later of the two selected.\n \u003cp\u003e\n If this method is called when it is not an overlap, {@code this}\n is returned.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getZone","comment":"Gets the time-zone, such as \u0027Europe/Paris\u0027.\n \u003cp\u003e\n This returns the zone ID. This identifies the time-zone {@link ZoneRules rules}\n that determine when and how the offset from UTC/Greenwich changes.\n \u003cp\u003e\n The zone ID may be same as the {@linkplain #getOffset() offset}.\n If this is true, then any future calculations, such as addition or subtraction,\n have no complex edge cases due to time-zone rules.\n See also {@link #withFixedOffsetZone()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withZoneSameLocal","comment":"Returns a copy of this date-time with a different time-zone,\n retaining the local date-time if possible.\n \u003cp\u003e\n This method changes the time-zone and retains the local date-time.\n The local date-time is only changed if it is invalid for the new zone,\n determined using the same approach as\n {@link #ofLocal(LocalDateTime, ZoneId, ZoneOffset)}.\n \u003cp\u003e\n To change the zone and adjust the local date-time,\n use {@link #withZoneSameInstant(ZoneId)}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withZoneSameInstant","comment":"Returns a copy of this date-time with a different time-zone,\n retaining the instant.\n \u003cp\u003e\n This method changes the time-zone and retains the instant.\n This normally results in a change to the local date-time.\n \u003cp\u003e\n This method is based on retaining the same instant, thus gaps and overlaps\n in the local time-line have no effect on the result.\n \u003cp\u003e\n To change the offset while keeping the local time,\n use {@link #withZoneSameLocal(ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withFixedOffsetZone","comment":"Returns a copy of this date-time with the zone ID set to the offset.\n \u003cp\u003e\n This returns a zoned date-time where the zone ID is the same as {@link #getOffset()}.\n The local date-time, offset and instant of the result will be the same as in this date-time.\n \u003cp\u003e\n Setting the date-time to a fixed single offset means that any future\n calculations, such as addition or subtraction, have no complex edge cases\n due to time-zone rules.\n This might also be useful when sending a zoned date-time across a network,\n as most protocols, such as ISO-8601, only handle offsets,\n and not region-based zone IDs.\n \u003cp\u003e\n This is equivalent to {@code ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset())}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalDateTime","comment":"Gets the {@code LocalDateTime} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the same year, month, day and time\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalDate","comment":"Gets the {@code LocalDate} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalDate} with the same year, month and day\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getYear","comment":"Gets the year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the year.\n \u003cp\u003e\n The year returned by this method is proleptic as per {@code get(YEAR)}.\n To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonthValue","comment":"Gets the month-of-year field from 1 to 12.\n \u003cp\u003e\n This method returns the month as an {@code int} from 1 to 12.\n Application code is frequently clearer if the enum {@link Month}\n is used by calling {@link #getMonth()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonth","comment":"Gets the month-of-year field using the {@code Month} enum.\n \u003cp\u003e\n This method returns the enum {@link Month} for the month.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link Month#getValue() int value}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfMonth","comment":"Gets the day-of-month field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-month.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfYear","comment":"Gets the day-of-year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfWeek","comment":"Gets the day-of-week field, which is an enum {@code DayOfWeek}.\n \u003cp\u003e\n This method returns the enum {@link DayOfWeek} for the day-of-week.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link DayOfWeek#getValue() int value}.\n \u003cp\u003e\n Additional information can be obtained from the {@code DayOfWeek}.\n This includes textual names of the values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalTime","comment":"Gets the {@code LocalTime} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalTime} with the same hour, minute, second and\n nanosecond as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHour","comment":"Gets the hour-of-day field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMinute","comment":"Gets the minute-of-hour field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSecond","comment":"Gets the second-of-minute field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNano","comment":"Gets the nano-of-second field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"with","comment":"Returns an adjusted copy of this date-time.\n \u003cp\u003e\n This returns a {@code ZonedDateTime}, based on this one, with the date-time adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \u003cp\u003e\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n {@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the {@code TemporalAdjuster} interface,\n such as {@link Month} and {@link java.time.MonthDay MonthDay}.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \u003cp\u003e\n For example this code returns a date on the last day of July:\n \u003cpre\u003e\n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result \u003d zonedDateTime.with(JULY).with(lastDayOfMonth());\n \u003c/pre\u003e\n \u003cp\u003e\n The classes {@link LocalDate} and {@link LocalTime} implement {@code TemporalAdjuster},\n thus this method can be used to change the date, time or offset:\n \u003cpre\u003e\n  result \u003d zonedDateTime.with(date);\n  result \u003d zonedDateTime.with(time);\n \u003c/pre\u003e\n \u003cp\u003e\n {@link ZoneOffset} also implements {@code TemporalAdjuster} however using it\n as an argument typically has no effect. The offset of a {@code ZonedDateTime} is\n controlled primarily by the time-zone. As such, changing the offset does not generally\n make sense, because there is only one valid offset for the local date-time and zone.\n If the zoned date-time is in a daylight savings overlap, then the offset is used\n to switch between the two valid offsets. In all other cases, the offset is ignored.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalAdjuster#adjustInto(Temporal)} method on the\n specified adjuster passing {@code this} as the argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns a copy of this date-time with the specified field set to a new value.\n \u003cp\u003e\n This returns a {@code ZonedDateTime}, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \u003cp\u003e\n In some cases, changing the specified field can cause the resulting date-time to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the adjustment is implemented here.\n \u003cp\u003e\n The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.\n The zone and nano-of-second are unchanged.\n The result will have an offset derived from the new instant and original zone.\n If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.\n \u003cp\u003e\n The {@code OFFSET_SECONDS} field will typically be ignored.\n The offset of a {@code ZonedDateTime} is controlled primarily by the time-zone.\n As such, changing the offset does not generally make sense, because there is only\n one valid offset for the local date-time and zone.\n If the zoned date-time is in a daylight savings overlap, then the offset is used\n to switch between the two valid offsets. In all other cases, the offset is ignored.\n If the new offset value is outside the valid range then a {@code DateTimeException} will be thrown.\n \u003cp\u003e\n The other {@link #isSupported(TemporalField) supported fields} will behave as per\n the matching method on {@link LocalDateTime#with(TemporalField, long) LocalDateTime}.\n The zone is not part of the calculation and will be unchanged.\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withYear","comment":"Returns a copy of this {@code ZonedDateTime} with the year altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#withYear(int) changing the year} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMonth","comment":"Returns a copy of this {@code ZonedDateTime} with the month-of-year altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#withMonth(int) changing the month} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfMonth","comment":"Returns a copy of this {@code ZonedDateTime} with the day-of-month altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#withDayOfMonth(int) changing the day-of-month} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfYear","comment":"Returns a copy of this {@code ZonedDateTime} with the day-of-year altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#withDayOfYear(int) changing the day-of-year} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withHour","comment":"Returns a copy of this {@code ZonedDateTime} with the hour-of-day altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@linkplain LocalDateTime#withHour(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMinute","comment":"Returns a copy of this {@code ZonedDateTime} with the minute-of-hour altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@linkplain LocalDateTime#withMinute(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withSecond","comment":"Returns a copy of this {@code ZonedDateTime} with the second-of-minute altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@linkplain LocalDateTime#withSecond(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withNano","comment":"Returns a copy of this {@code ZonedDateTime} with the nano-of-second altered.\n \u003cp\u003e\n This operates on the local time-line,\n {@linkplain LocalDateTime#withNano(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"truncatedTo","comment":"Returns a copy of this {@code ZonedDateTime} with the time truncated.\n \u003cp\u003e\n Truncation returns a copy of the original date-time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit\n will set the second-of-minute and nano-of-second field to zero.\n \u003cp\u003e\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on {@link ChronoUnit} and\n {@link ChronoUnit#DAYS DAYS}. Other units throw an exception.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#truncatedTo(TemporalUnit) truncating}\n the underlying local date-time. This is then converted back to a\n {@code ZonedDateTime}, using the zone ID to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date-time with the specified amount added.\n \u003cp\u003e\n This returns a {@code ZonedDateTime}, based on this one, with the specified amount added.\n The amount is typically {@link Period} or {@link Duration} but may be\n any other type implementing the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#addTo(Temporal)}. The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date-time with the specified amount added.\n \u003cp\u003e\n This returns a {@code ZonedDateTime}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoUnit} then the addition is implemented here.\n The zone is not part of the calculation and will be unchanged in the result.\n The calculation for date and time units differ.\n \u003cp\u003e\n Date units operate on the local time-line.\n The period is first added to the local date-time, then converted back\n to a zoned date-time using the zone ID.\n The conversion uses {@link #ofLocal(LocalDateTime, ZoneId, ZoneOffset)}\n with the offset before the addition.\n \u003cp\u003e\n Time units operate on the instant time-line.\n The period is first added to the local date-time, then converted back to\n a zoned date-time using the zone ID.\n The conversion uses {@link #ofInstant(LocalDateTime, ZoneOffset, ZoneId)}\n with the offset before the addition.\n \u003cp\u003e\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusYears","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of years added.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#plusYears(long) adding years} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMonths","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of months added.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#plusMonths(long) adding months} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusWeeks","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of weeks added.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#plusWeeks(long) adding weeks} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusDays","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of days added.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#plusDays(long) adding days} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusHours","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of hours added.\n \u003cp\u003e\n This operates on the instant time-line, such that adding one hour will\n always be a duration of one hour later.\n This may cause the local date-time to change by an amount other than one hour.\n Note that this is a different approach to that used by days, months and years,\n thus adding one day is not the same as adding 24 hours.\n \u003cp\u003e\n For example, consider a time-zone where the spring DST cutover means that the\n local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.\n \u003cul\u003e\n \u003cli\u003eAdding one hour to 00:30+02:00 will result in 01:30+02:00\n \u003cli\u003eAdding one hour to 01:30+02:00 will result in 01:30+01:00\n \u003cli\u003eAdding one hour to 01:30+01:00 will result in 02:30+01:00\n \u003cli\u003eAdding three hours to 00:30+02:00 will result in 02:30+01:00\n \u003c/ul\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMinutes","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of minutes added.\n \u003cp\u003e\n This operates on the instant time-line, such that adding one minute will\n always be a duration of one minute later.\n This may cause the local date-time to change by an amount other than one minute.\n Note that this is a different approach to that used by days, months and years.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusSeconds","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of seconds added.\n \u003cp\u003e\n This operates on the instant time-line, such that adding one second will\n always be a duration of one second later.\n This may cause the local date-time to change by an amount other than one second.\n Note that this is a different approach to that used by days, months and years.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusNanos","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds added.\n \u003cp\u003e\n This operates on the instant time-line, such that adding one nano will\n always be a duration of one nano later.\n This may cause the local date-time to change by an amount other than one nano.\n Note that this is a different approach to that used by days, months and years.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date-time with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code ZonedDateTime}, based on this one, with the specified amount subtracted.\n The amount is typically {@link Period} or {@link Duration} but may be\n any other type implementing the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date-time with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code ZonedDateTime}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n The calculation for date and time units differ.\n \u003cp\u003e\n Date units operate on the local time-line.\n The period is first subtracted from the local date-time, then converted back\n to a zoned date-time using the zone ID.\n The conversion uses {@link #ofLocal(LocalDateTime, ZoneId, ZoneOffset)}\n with the offset before the subtraction.\n \u003cp\u003e\n Time units operate on the instant time-line.\n The period is first subtracted from the local date-time, then converted back to\n a zoned date-time using the zone ID.\n The conversion uses {@link #ofInstant(LocalDateTime, ZoneOffset, ZoneId)}\n with the offset before the subtraction.\n \u003cp\u003e\n This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusYears","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of years subtracted.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#minusYears(long) subtracting years} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMonths","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of months subtracted.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#minusMonths(long) subtracting months} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusWeeks","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of weeks subtracted.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#minusWeeks(long) subtracting weeks} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusDays","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of days subtracted.\n \u003cp\u003e\n This operates on the local time-line,\n {@link LocalDateTime#minusDays(long) subtracting days} to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n \u003cp\u003e\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusHours","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of hours subtracted.\n \u003cp\u003e\n This operates on the instant time-line, such that subtracting one hour will\n always be a duration of one hour earlier.\n This may cause the local date-time to change by an amount other than one hour.\n Note that this is a different approach to that used by days, months and years,\n thus subtracting one day is not the same as adding 24 hours.\n \u003cp\u003e\n For example, consider a time-zone where the spring DST cutover means that the\n local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.\n \u003cul\u003e\n \u003cli\u003eSubtracting one hour from 02:30+01:00 will result in 01:30+02:00\n \u003cli\u003eSubtracting one hour from 01:30+01:00 will result in 01:30+02:00\n \u003cli\u003eSubtracting one hour from 01:30+02:00 will result in 00:30+01:00\n \u003cli\u003eSubtracting three hours from 02:30+01:00 will result in 00:30+02:00\n \u003c/ul\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMinutes","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of minutes subtracted.\n \u003cp\u003e\n This operates on the instant time-line, such that subtracting one minute will\n always be a duration of one minute earlier.\n This may cause the local date-time to change by an amount other than one minute.\n Note that this is a different approach to that used by days, months and years.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusSeconds","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of seconds subtracted.\n \u003cp\u003e\n This operates on the instant time-line, such that subtracting one second will\n always be a duration of one second earlier.\n This may cause the local date-time to change by an amount other than one second.\n Note that this is a different approach to that used by days, months and years.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusNanos","comment":"Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds subtracted.\n \u003cp\u003e\n This operates on the instant time-line, such that subtracting one nano will\n always be a duration of one nano earlier.\n This may cause the local date-time to change by an amount other than one nano.\n Note that this is a different approach to that used by days, months and years.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date-time using the specified query.\n \u003cp\u003e\n This queries this date-time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"until","comment":"Calculates the amount of time until another date-time in terms of the specified unit.\n \u003cp\u003e\n This calculates the amount of time between two {@code ZonedDateTime}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified date-time.\n The result will be negative if the end is before the start.\n For example, the amount in days between two date-times can be calculated\n using {@code startDateTime.until(endDateTime, DAYS)}.\n \u003cp\u003e\n The {@code Temporal} passed to this method is converted to a\n {@code ZonedDateTime} using {@link #from(TemporalAccessor)}.\n If the time-zone differs between the two zoned date-times, the specified\n end date-time is normalized to have the same zone as this date-time.\n \u003cp\u003e\n The calculation returns a whole number, representing the number of\n complete units between the two date-times.\n For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z\n will only be one month as it is one minute short of two months.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   amount \u003d start.until(end, MONTHS);\n   amount \u003d MONTHS.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.\n \u003cp\u003e\n The calculation is implemented in this method for {@link ChronoUnit}.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},\n {@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},\n {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.\n Other {@code ChronoUnit} values will throw an exception.\n \u003cp\u003e\n The calculation for date and time units differ.\n \u003cp\u003e\n Date units operate on the local time-line, using the local date-time.\n For example, the period from noon on day 1 to noon the following day\n in days will always be counted as exactly one day, irrespective of whether\n there was a daylight savings change or not.\n \u003cp\u003e\n Time units operate on the instant time-line.\n The calculation effectively converts both zoned date-times to instants\n and then calculates the period between the instants.\n For example, the period from noon on day 1 to noon the following day\n in hours may be 23, 24 or 25 hours (or some other amount) depending on\n whether there was a daylight savings change or not.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)","flatSignature":"(Temporal, TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats this date-time using the specified formatter.\n \u003cp\u003e\n This date-time will be passed to the formatter to produce a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DateTimeFormatter)","flatSignature":"(DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toOffsetDateTime","comment":"Converts this date-time to an {@code OffsetDateTime}.\n \u003cp\u003e\n This creates an offset date-time using the local date-time and offset.\n The zone ID is ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Checks if this date-time is equal to another date-time.\n \u003cp\u003e\n The comparison is based on the offset date-time and the zone.\n Only objects of type {@code ZonedDateTime} are compared, other types return false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this date-time as a {@code String}, such as\n {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}.\n \u003cp\u003e\n The format consists of the {@code LocalDateTime} followed by the {@code ZoneOffset}.\n If the {@code ZoneId} is not the same as the offset, then the ID is output.\n The output is compatible with ISO-8601 if the offset and ID are the same.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}