{"name":"ZoneOffsetTransitionRule","comment":"A rule expressing how to create a transition.\n \u003cp\u003e\n This class allows rules for identifying future transitions to be expressed.\n A rule might be written in many forms:\n \u003cul\u003e\n \u003cli\u003ethe 16th March\n \u003cli\u003ethe Sunday on or after the 16th March\n \u003cli\u003ethe Sunday on or before the 16th March\n \u003cli\u003ethe last Sunday in February\n \u003c/ul\u003e\n These different rule types can be expressed and queried.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ZoneOffsetTransitionRule","qualifiedName":"java.time.zone.ZoneOffsetTransitionRule","dimension":"","elementType":{},"package":"java.time.zone","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":["java.time.zone.ZoneOffsetTransitionRule.TimeDefinition"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"of","comment":"Obtains an instance defining the yearly rule to create transitions between two offsets.\n \u003cp\u003e\n Applications should normally obtain an instance from {@link ZoneRules}.\n This factory is only intended for use when creating {@link ZoneRules}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Month, int, java.time.DayOfWeek, java.time.LocalTime, boolean, java.time.zone.ZoneOffsetTransitionRule.TimeDefinition, java.time.ZoneOffset, java.time.ZoneOffset, java.time.ZoneOffset)","flatSignature":"(Month, int, DayOfWeek, LocalTime, boolean, ZoneOffsetTransitionRule.TimeDefinition, ZoneOffset, ZoneOffset, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffsetTransitionRule","qualifiedName":"java.time.zone.ZoneOffsetTransitionRule","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"month","type":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}}},{"name":"dayOfMonthIndicator","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfWeek","type":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}}},{"name":"time","type":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}}},{"name":"timeEndOfDay","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"timeDefnition","type":{"isPrimitive":false,"simpleName":"TimeDefinition","qualifiedName":"java.time.zone.ZoneOffsetTransitionRule.TimeDefinition","dimension":"","elementType":{}}},{"name":"standardOffset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}},{"name":"offsetBefore","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}},{"name":"offsetAfter","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMonth","comment":"Gets the month of the transition.\n \u003cp\u003e\n If the rule defines an exact date then the month is the month of that date.\n \u003cp\u003e\n If the rule defines a week where the transition might occur, then the month\n if the month of either the earliest or latest possible date of the cutover.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfMonthIndicator","comment":"Gets the indicator of the day-of-month of the transition.\n \u003cp\u003e\n If the rule defines an exact date then the day is the month of that date.\n \u003cp\u003e\n If the rule defines a week where the transition might occur, then the day\n defines either the start of the end of the transition week.\n \u003cp\u003e\n If the value is positive, then it represents a normal day-of-month, and is the\n earliest possible date that the transition can be.\n The date may refer to 29th February which should be treated as 1st March in non-leap years.\n \u003cp\u003e\n If the value is negative, then it represents the number of days back from the\n end of the month where {@code -1} is the last day of the month.\n In this case, the day identified is the latest possible date that the transition can be.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfWeek","comment":"Gets the day-of-week of the transition.\n \u003cp\u003e\n If the rule defines an exact date then this returns null.\n \u003cp\u003e\n If the rule defines a week where the cutover might occur, then this method\n returns the day-of-week that the month-day will be adjusted to.\n If the day is positive then the adjustment is later.\n If the day is negative then the adjustment is earlier.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalTime","comment":"Gets the local time of day of the transition which must be checked with\n {@link #isMidnightEndOfDay()}.\n \u003cp\u003e\n The time is converted into an instant using the time definition.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMidnightEndOfDay","comment":"Is the transition local time midnight at the end of day.\n \u003cp\u003e\n The transition may be represented as occurring at 24:00.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTimeDefinition","comment":"Gets the time definition, specifying how to convert the time to an instant.\n \u003cp\u003e\n The local time can be converted to an instant using the standard offset,\n the wall offset or UTC.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TimeDefinition","qualifiedName":"java.time.zone.ZoneOffsetTransitionRule.TimeDefinition","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getStandardOffset","comment":"Gets the standard offset in force at the transition.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOffsetBefore","comment":"Gets the offset before the transition.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOffsetAfter","comment":"Gets the offset after the transition.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"createTransition","comment":"Creates a transition instance for the specified year.\n \u003cp\u003e\n Calculations are performed using the ISO-8601 chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffsetTransition","qualifiedName":"java.time.zone.ZoneOffsetTransition","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this object equals another.\n \u003cp\u003e\n The entire state of the object is compared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherRule","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a suitable hash code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}