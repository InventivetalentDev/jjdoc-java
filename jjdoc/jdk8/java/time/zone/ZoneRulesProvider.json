{"name":"ZoneRulesProvider","comment":"Provider of time-zone rules to the system.\n \u003cp\u003e\n This class manages the configuration of time-zone rules.\n The static methods provide the public API that can be used to manage the providers.\n The abstract methods provide the SPI that allows rules to be provided.\n \u003cp\u003e\n ZoneRulesProvider may be installed in an instance of the Java Platform as\n extension classes, that is, jar files placed into any of the usual extension\n directories. Installed providers are loaded using the service-provider loading\n facility defined by the {@link ServiceLoader} class. A ZoneRulesProvider\n identifies itself with a provider configuration file named\n {@code java.time.zone.ZoneRulesProvider} in the resource directory\n {@code META-INF/services}. The file should contain a line that specifies the\n fully qualified concrete zonerules-provider class name.\n Providers may also be made available by adding them to the class path or by\n registering themselves via {@link #registerProvider} method.\n \u003cp\u003e\n The Java virtual machine has a default provider that provides zone rules\n for the time-zones defined by IANA Time Zone Database (TZDB). If the system\n property {@code java.time.zone.DefaultZoneRulesProvider} is defined then\n it is taken to be the fully-qualified name of a concrete ZoneRulesProvider\n class to be loaded as the default provider, using the system class loader.\n If this system property is not defined, a system-default provider will be\n loaded to serve as the default provider.\n \u003cp\u003e\n Rules are looked up primarily by zone ID, as used by {@link ZoneId}.\n Only zone region IDs may be used, zone offset IDs are not used here.\n \u003cp\u003e\n Time-zone rules are political, thus the data can change at any time.\n Each provider will provide the latest rules for each zone ID, but they\n may also provide the history of how the rules changed.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ZoneRulesProvider","qualifiedName":"java.time.zone.ZoneRulesProvider","dimension":"","elementType":{},"package":"java.time.zone","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getAvailableZoneIds","comment":"Gets the set of available zone IDs.\n \u003cp\u003e\n These IDs are the string form of a {@link ZoneId}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getRules","comment":"Gets the rules for the zone ID.\n \u003cp\u003e\n This returns the latest available rules for the zone ID.\n \u003cp\u003e\n This method relies on time-zone data provider files that are configured.\n These are loaded using a {@code ServiceLoader}.\n \u003cp\u003e\n The caching flag is designed to allow provider implementations to\n prevent the rules being cached in {@code ZoneId}.\n Under normal circumstances, the caching of zone rules is highly desirable\n as it will provide greater performance. However, there is a use case where\n the caching would not be desirable, see {@link #provideRules}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":false,"simpleName":"ZoneRules","qualifiedName":"java.time.zone.ZoneRules","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zoneId","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"forCaching","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getVersions","comment":"Gets the history of rules for the zone ID.\n \u003cp\u003e\n Time-zones are defined by governments and change frequently.\n This method allows applications to find the history of changes to the\n rules for a single zone ID. The map is keyed by a string, which is the\n version string associated with the rules.\n \u003cp\u003e\n The exact meaning and format of the version is provider specific.\n The version must follow lexicographical order, thus the returned map will\n be order from the oldest known rules to the newest available rules.\n The default \u0027TZDB\u0027 group uses version numbering consisting of the year\n followed by a letter, such as \u00272009e\u0027 or \u00272012f\u0027.\n \u003cp\u003e\n Implementations must provide a result for each valid zone ID, however\n they do not have to provide a history of rules.\n Thus the map will always contain one element, and will only contain more\n than one element if historical rule information is available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zoneId","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"registerProvider","comment":"Registers a zone rules provider.\n \u003cp\u003e\n This adds a new provider to those currently available.\n A provider supplies rules for one or more zone IDs.\n A provider cannot be registered if it supplies a zone ID that has already been\n registered. See the notes on time-zone IDs in {@link ZoneId}, especially\n the section on using the concept of a \"group\" to make IDs unique.\n \u003cp\u003e\n To ensure the integrity of time-zones already created, there is no way\n to deregister providers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.zone.ZoneRulesProvider)","flatSignature":"(ZoneRulesProvider)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"provider","type":{"isPrimitive":false,"simpleName":"ZoneRulesProvider","qualifiedName":"java.time.zone.ZoneRulesProvider","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"refresh","comment":"Refreshes the rules from the underlying data provider.\n \u003cp\u003e\n This method allows an application to request that the providers check\n for any updates to the provided rules.\n After calling this method, the offset stored in any {@link ZonedDateTime}\n may be invalid for the zone ID.\n \u003cp\u003e\n Dynamic update of rules is a complex problem and most applications\n should not use this method or dynamic rules.\n To achieve dynamic rules, a provider implementation will have to be written\n as per the specification of this class.\n In addition, instances of {@code ZoneRules} must not be cached in the\n application as they will become stale. However, the boolean flag on\n {@link #provideRules(String, boolean)} allows provider implementations\n to control the caching of {@code ZoneId}, potentially ensuring that\n all objects in the system see the new rules.\n Note that there is likely to be a cost in performance of a dynamic rules\n provider. Note also that no dynamic rules provider is in this specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}