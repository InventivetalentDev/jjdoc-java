{"name":"ZoneOffsetTransition","comment":"A transition between two offsets caused by a discontinuity in the local time-line.\n \u003cp\u003e\n A transition between two offsets is normally the result of a daylight savings cutover.\n The discontinuity is normally a gap in spring and an overlap in autumn.\n {@code ZoneOffsetTransition} models the transition between the two offsets.\n \u003cp\u003e\n Gaps occur where there are local date-times that simply do not exist.\n An example would be when the offset changes from {@code +03:00} to {@code +04:00}.\n This might be described as \u0027the clocks will move forward one hour tonight at 1am\u0027.\n \u003cp\u003e\n Overlaps occur where there are local date-times that exist twice.\n An example would be when the offset changes from {@code +04:00} to {@code +03:00}.\n This might be described as \u0027the clocks will move back one hour tonight at 2am\u0027.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ZoneOffsetTransition","qualifiedName":"java.time.zone.ZoneOffsetTransition","dimension":"","elementType":{},"package":"java.time.zone","superclass":"java.lang.Object","interfaces":["java.lang.Comparable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"of","comment":"Obtains an instance defining a transition between two offsets.\n \u003cp\u003e\n Applications should normally obtain an instance from {@link ZoneRules}.\n This factory is only intended for use when creating {@link ZoneRules}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDateTime, java.time.ZoneOffset, java.time.ZoneOffset)","flatSignature":"(LocalDateTime, ZoneOffset, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffsetTransition","qualifiedName":"java.time.zone.ZoneOffsetTransition","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"transition","type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}}},{"name":"offsetBefore","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}},{"name":"offsetAfter","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstant","comment":"Gets the transition instant.\n \u003cp\u003e\n This is the instant of the discontinuity, which is defined as the first\n instant that the \u0027after\u0027 offset applies.\n \u003cp\u003e\n The methods {@link #getInstant()}, {@link #getDateTimeBefore()} and {@link #getDateTimeAfter()}\n all represent the same instant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toEpochSecond","comment":"Gets the transition instant as an epoch second.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDateTimeBefore","comment":"Gets the local transition date-time, as would be expressed with the \u0027before\u0027 offset.\n \u003cp\u003e\n This is the date-time where the discontinuity begins expressed with the \u0027before\u0027 offset.\n At this instant, the \u0027after\u0027 offset is actually used, therefore the combination of this\n date-time and the \u0027before\u0027 offset will never occur.\n \u003cp\u003e\n The combination of the \u0027before\u0027 date-time and offset represents the same instant\n as the \u0027after\u0027 date-time and offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDateTimeAfter","comment":"Gets the local transition date-time, as would be expressed with the \u0027after\u0027 offset.\n \u003cp\u003e\n This is the first date-time after the discontinuity, when the new offset applies.\n \u003cp\u003e\n The combination of the \u0027before\u0027 date-time and offset represents the same instant\n as the \u0027after\u0027 date-time and offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOffsetBefore","comment":"Gets the offset before the transition.\n \u003cp\u003e\n This is the offset in use before the instant of the transition.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOffsetAfter","comment":"Gets the offset after the transition.\n \u003cp\u003e\n This is the offset in use on and after the instant of the transition.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDuration","comment":"Gets the duration of the transition.\n \u003cp\u003e\n In most cases, the transition duration is one hour, however this is not always the case.\n The duration will be positive for a gap and negative for an overlap.\n Time-zones are second-based, so the nanosecond part of the duration will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Duration","qualifiedName":"java.time.Duration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isGap","comment":"Does this transition represent a gap in the local time-line.\n \u003cp\u003e\n Gaps occur where there are local date-times that simply do not exist.\n An example would be when the offset changes from {@code +01:00} to {@code +02:00}.\n This might be described as \u0027the clocks will move forward one hour tonight at 1am\u0027.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isOverlap","comment":"Does this transition represent an overlap in the local time-line.\n \u003cp\u003e\n Overlaps occur where there are local date-times that exist twice.\n An example would be when the offset changes from {@code +02:00} to {@code +01:00}.\n This might be described as \u0027the clocks will move back one hour tonight at 2am\u0027.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isValidOffset","comment":"Checks if the specified offset is valid during this transition.\n \u003cp\u003e\n This checks to see if the given offset will be valid at some point in the transition.\n A gap will always return false.\n An overlap will return true if the offset is either the before or after offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this transition to another based on the transition instant.\n \u003cp\u003e\n This compares the instants of each transition.\n The offsets are ignored, making this order inconsistent with equals.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.zone.ZoneOffsetTransition)","flatSignature":"(ZoneOffsetTransition)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"transition","type":{"isPrimitive":false,"simpleName":"ZoneOffsetTransition","qualifiedName":"java.time.zone.ZoneOffsetTransition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this object equals another.\n \u003cp\u003e\n The entire state of the object is compared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a suitable hash code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}