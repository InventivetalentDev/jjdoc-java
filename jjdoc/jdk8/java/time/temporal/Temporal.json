{"name":"Temporal","comment":"Framework-level interface defining read-write access to a temporal object,\n such as a date, time, offset or some combination of these.\n \u003cp\u003e\n This is the base interface type for date, time and offset objects that\n are complete enough to be manipulated using plus and minus.\n It is implemented by those classes that can provide and manipulate information\n as {@linkplain TemporalField fields} or {@linkplain TemporalQuery queries}.\n See {@link TemporalAccessor} for the read-only version of this interface.\n \u003cp\u003e\n Most date and time information can be represented as a number.\n These are modeled using {@code TemporalField} with the number held using\n a {@code long} to handle large values. Year, month and day-of-month are\n simple examples of fields, but they also include instant and offsets.\n See {@link ChronoField} for the standard set of fields.\n \u003cp\u003e\n Two pieces of date/time information cannot be represented by numbers,\n the {@linkplain java.time.chrono.Chronology chronology} and the\n {@linkplain java.time.ZoneId time-zone}.\n These can be accessed via {@link #query(TemporalQuery) queries} using\n the static methods defined on {@link TemporalQuery}.\n \u003cp\u003e\n This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as {@code LocalDate}.\n There are many reasons for this, part of which is that implementations\n of this interface may be in calendar systems other than ISO.\n See {@link java.time.chrono.ChronoLocalDate} for a fuller discussion of the issues.\n\n \u003ch3\u003eWhen to implement\u003c/h3\u003e\n \u003cp\u003e\n A class should implement this interface if it meets three criteria:\n \u003cul\u003e\n \u003cli\u003eit provides access to date/time/offset information, as per {@code TemporalAccessor}\n \u003cli\u003ethe set of fields are contiguous from the largest to the smallest\n \u003cli\u003ethe set of fields are complete, such that no other field is needed to define the\n  valid range of values for the fields that are represented\n \u003c/ul\u003e\n \u003cp\u003e\n Four examples make this clear:\n \u003cul\u003e\n \u003cli\u003e{@code LocalDate} implements this interface as it represents a set of fields\n  that are contiguous from days to forever and require no external information to determine\n  the validity of each date. It is therefore able to implement plus/minus correctly.\n \u003cli\u003e{@code LocalTime} implements this interface as it represents a set of fields\n  that are contiguous from nanos to within days and require no external information to determine\n  validity. It is able to implement plus/minus correctly, by wrapping around the day.\n \u003cli\u003e{@code MonthDay}, the combination of month-of-year and day-of-month, does not implement\n  this interface.  While the combination is contiguous, from days to months within years,\n  the combination does not have sufficient information to define the valid range of values\n  for day-of-month.  As such, it is unable to implement plus/minus correctly.\n \u003cli\u003eThe combination day-of-week and day-of-month (\"Friday the 13th\") should not implement\n  this interface. It does not represent a contiguous set of fields, as days to weeks overlaps\n  days to months.\n \u003c/ul\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{},"package":"java.time.temporal","interfaces":["java.time.temporal.TemporalAccessor"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns an adjusted object of the same type as this object with the adjustment made.\n \u003cp\u003e\n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n {@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \u003cp\u003e\n Some example code indicating how and why this method is used:\n \u003cpre\u003e\n  date \u003d date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date \u003d date.with(lastDayOfMonth());  // static import from Adjusters\n  date \u003d date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns an object of the same type as this object with the specified field altered.\n \u003cp\u003e\n This returns a new object based on this one with the value for the specified field changed.\n For example, on a {@code LocalDate}, this could be used to set the year, month or day-of-month.\n The returned object will have the same observable type as this object.\n \u003cp\u003e\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then changing the month to February would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns an object of the same type as this object with an amount added.\n \u003cp\u003e\n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a {@link java.time.Period} but may be any other type implementing\n the {@link TemporalAmount} interface, such as {@link java.time.Duration}.\n \u003cp\u003e\n Some example code indicating how and why this method is used:\n \u003cpre\u003e\n  date \u003d date.plus(period);                // add a Period instance\n  date \u003d date.plus(duration);              // add a Duration instance\n  date \u003d date.plus(workingDays(6));        // example user-written workingDays method\n \u003c/pre\u003e\n \u003cp\u003e\n Note that calling {@code plus} followed by {@code minus} is not guaranteed to\n return the same date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns an object of the same type as this object with the specified period added.\n \u003cp\u003e\n This method returns a new object based on this one with the specified period added.\n For example, on a {@code LocalDate}, this could be used to add a number of years, months or days.\n The returned object will have the same observable type as this object.\n \u003cp\u003e\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then adding one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns an object of the same type as this object with an amount subtracted.\n \u003cp\u003e\n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a {@link java.time.Period} but may be any other type implementing\n the {@link TemporalAmount} interface, such as {@link java.time.Duration}.\n \u003cp\u003e\n Some example code indicating how and why this method is used:\n \u003cpre\u003e\n  date \u003d date.minus(period);               // subtract a Period instance\n  date \u003d date.minus(duration);             // subtract a Duration instance\n  date \u003d date.minus(workingDays(6));       // example user-written workingDays method\n \u003c/pre\u003e\n \u003cp\u003e\n Note that calling {@code plus} followed by {@code minus} is not guaranteed to\n return the same date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns an object of the same type as this object with the specified period subtracted.\n \u003cp\u003e\n This method returns a new object based on this one with the specified period subtracted.\n For example, on a {@code LocalDate}, this could be used to subtract a number of years, months or days.\n The returned object will have the same observable type as this object.\n \u003cp\u003e\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st March, then subtracting one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"Calculates the amount of time until another temporal in terms of the specified unit.\n \u003cp\u003e\n This calculates the amount of time between two temporal objects\n in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified temporal.\n The end point is converted to be of the same type as the start point if different.\n The result will be negative if the end is before the start.\n For example, the amount in hours between two temporal objects can be\n calculated using {@code startTime.until(endTime, HOURS)}.\n \u003cp\u003e\n The calculation returns a whole number, representing the number of\n complete units between the two temporals.\n For example, the amount in hours between the times 11:30 and 13:29\n will only be one hour as it is one minute short of two hours.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   temporal \u003d start.until(end, unit);\n   temporal \u003d unit.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.\n \u003cp\u003e\n For example, this method allows the number of days between two dates to\n be calculated:\n \u003cpre\u003e\n  long daysBetween \u003d start.until(end, DAYS);\n  // or alternatively\n  long daysBetween \u003d DAYS.between(start, end);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)","flatSignature":"(Temporal, TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.time.ZonedDateTime","java.time.chrono.ChronoZonedDateTime","java.time.YearMonth","java.time.Year","java.time.OffsetTime","java.time.OffsetDateTime","java.time.LocalTime","java.time.LocalDateTime","java.time.chrono.ChronoLocalDateTime","java.time.LocalDate","java.time.chrono.ChronoLocalDate","java.time.Instant"],"enumConstants":[]}