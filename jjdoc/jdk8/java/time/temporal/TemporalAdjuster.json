{"name":"TemporalAdjuster","comment":"Strategy for adjusting a temporal object.\n \u003cp\u003e\n Adjusters are a key tool for modifying temporal objects.\n They exist to externalize the process of adjustment, permitting different\n approaches, as per the strategy design pattern.\n Examples might be an adjuster that sets the date avoiding weekends, or one that\n sets the date to the last day of the month.\n \u003cp\u003e\n There are two equivalent ways of using a {@code TemporalAdjuster}.\n The first is to invoke the method on this interface directly.\n The second is to use {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisAdjuster.adjustInto(temporal);\n   temporal \u003d temporal.with(thisAdjuster);\n \u003c/pre\u003e\n It is recommended to use the second approach, {@code with(TemporalAdjuster)},\n as it is a lot clearer to read in code.\n \u003cp\u003e\n The {@link TemporalAdjusters} class contains a standard set of adjusters,\n available as static methods.\n These include:\n \u003cul\u003e\n \u003cli\u003efinding the first or last day of the month\n \u003cli\u003efinding the first day of next month\n \u003cli\u003efinding the first or last day of the year\n \u003cli\u003efinding the first day of next year\n \u003cli\u003efinding the first or last day-of-week within a month, such as \"first Wednesday in June\"\n \u003cli\u003efinding the next or previous day-of-week, such as \"next Thursday\"\n \u003c/ul\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{},"package":"java.time.temporal","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"adjustInto","comment":"Adjusts the specified temporal object.\n \u003cp\u003e\n This adjusts the specified temporal object using the logic\n encapsulated in the implementing class.\n Examples might be an adjuster that sets the date avoiding weekends, or one that\n sets the date to the last day of the month.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisAdjuster.adjustInto(temporal);\n   temporal \u003d temporal.with(thisAdjuster);\n \u003c/pre\u003e\n It is recommended to use the second approach, {@code with(TemporalAdjuster)},\n as it is a lot clearer to read in code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.time.ZoneOffset","java.time.YearMonth","java.time.Year","java.time.OffsetTime","java.time.OffsetDateTime","java.time.MonthDay","java.time.Month","java.time.LocalTime","java.time.LocalDateTime","java.time.chrono.ChronoLocalDateTime","java.time.LocalDate","java.time.chrono.ChronoLocalDate","java.time.Instant","java.time.DayOfWeek","java.time.chrono.Era"],"enumConstants":[]}