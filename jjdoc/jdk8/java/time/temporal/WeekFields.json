{"name":"WeekFields","comment":"Localized definitions of the day-of-week, week-of-month and week-of-year fields.\n \u003cp\u003e\n A standard week is seven days long, but cultures have different definitions for some\n other aspects of a week. This class represents the definition of the week, for the\n purpose of providing {@link TemporalField} instances.\n \u003cp\u003e\n WeekFields provides five fields,\n {@link #dayOfWeek()}, {@link #weekOfMonth()}, {@link #weekOfYear()},\n {@link #weekOfWeekBasedYear()}, and {@link #weekBasedYear()}\n that provide access to the values from any {@linkplain Temporal temporal object}.\n \u003cp\u003e\n The computations for day-of-week, week-of-month, and week-of-year are based\n on the  {@linkplain ChronoField#YEAR proleptic-year},\n {@linkplain ChronoField#MONTH_OF_YEAR month-of-year},\n {@linkplain ChronoField#DAY_OF_MONTH day-of-month}, and\n {@linkplain ChronoField#DAY_OF_WEEK ISO day-of-week} which are based on the\n {@linkplain ChronoField#EPOCH_DAY epoch-day} and the chronology.\n The values may not be aligned with the {@linkplain ChronoField#YEAR_OF_ERA year-of-Era}\n depending on the Chronology.\n \u003cp\u003eA week is defined by:\n \u003cul\u003e\n \u003cli\u003eThe first day-of-week.\n For example, the ISO-8601 standard considers Monday to be the first day-of-week.\n \u003cli\u003eThe minimal number of days in the first week.\n For example, the ISO-8601 standard counts the first week as needing at least 4 days.\n \u003c/ul\u003e\n Together these two values allow a year or month to be divided into weeks.\n\n \u003ch3\u003eWeek of Month\u003c/h3\u003e\n One field is used: week-of-month.\n The calculation ensures that weeks never overlap a month boundary.\n The month is divided into periods where each period starts on the defined first day-of-week.\n The earliest period is referred to as week 0 if it has less than the minimal number of days\n and week 1 if it has at least the minimal number of days.\n\n \u003ctable cellpadding\u003d\"0\" cellspacing\u003d\"3\" border\u003d\"0\" style\u003d\"text-align: left; width: 50%;\"\u003e\n \u003ccaption\u003eExamples of WeekFields\u003c/caption\u003e\n \u003ctr\u003e\u003cth\u003eDate\u003c/th\u003e\u003ctd\u003eDay-of-week\u003c/td\u003e\n  \u003ctd\u003eFirst day: Monday\u003cbr\u003eMinimal days: 4\u003c/td\u003e\u003ctd\u003eFirst day: Monday\u003cbr\u003eMinimal days: 5\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2008-12-31\u003c/th\u003e\u003ctd\u003eWednesday\u003c/td\u003e\n  \u003ctd\u003eWeek 5 of December 2008\u003c/td\u003e\u003ctd\u003eWeek 5 of December 2008\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2009-01-01\u003c/th\u003e\u003ctd\u003eThursday\u003c/td\u003e\n  \u003ctd\u003eWeek 1 of January 2009\u003c/td\u003e\u003ctd\u003eWeek 0 of January 2009\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2009-01-04\u003c/th\u003e\u003ctd\u003eSunday\u003c/td\u003e\n  \u003ctd\u003eWeek 1 of January 2009\u003c/td\u003e\u003ctd\u003eWeek 0 of January 2009\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2009-01-05\u003c/th\u003e\u003ctd\u003eMonday\u003c/td\u003e\n  \u003ctd\u003eWeek 2 of January 2009\u003c/td\u003e\u003ctd\u003eWeek 1 of January 2009\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n\n \u003ch3\u003eWeek of Year\u003c/h3\u003e\n One field is used: week-of-year.\n The calculation ensures that weeks never overlap a year boundary.\n The year is divided into periods where each period starts on the defined first day-of-week.\n The earliest period is referred to as week 0 if it has less than the minimal number of days\n and week 1 if it has at least the minimal number of days.\n\n \u003ch3\u003eWeek Based Year\u003c/h3\u003e\n Two fields are used for week-based-year, one for the\n {@link #weekOfWeekBasedYear() week-of-week-based-year} and one for\n {@link #weekBasedYear() week-based-year}.  In a week-based-year, each week\n belongs to only a single year.  Week 1 of a year is the first week that\n starts on the first day-of-week and has at least the minimum number of days.\n The first and last weeks of a year may contain days from the\n previous calendar year or next calendar year respectively.\n\n \u003ctable cellpadding\u003d\"0\" cellspacing\u003d\"3\" border\u003d\"0\" style\u003d\"text-align: left; width: 50%;\"\u003e\n \u003ccaption\u003eExamples of WeekFields for week-based-year\u003c/caption\u003e\n \u003ctr\u003e\u003cth\u003eDate\u003c/th\u003e\u003ctd\u003eDay-of-week\u003c/td\u003e\n  \u003ctd\u003eFirst day: Monday\u003cbr\u003eMinimal days: 4\u003c/td\u003e\u003ctd\u003eFirst day: Monday\u003cbr\u003eMinimal days: 5\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2008-12-31\u003c/th\u003e\u003ctd\u003eWednesday\u003c/td\u003e\n  \u003ctd\u003eWeek 1 of 2009\u003c/td\u003e\u003ctd\u003eWeek 53 of 2008\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2009-01-01\u003c/th\u003e\u003ctd\u003eThursday\u003c/td\u003e\n  \u003ctd\u003eWeek 1 of 2009\u003c/td\u003e\u003ctd\u003eWeek 53 of 2008\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2009-01-04\u003c/th\u003e\u003ctd\u003eSunday\u003c/td\u003e\n  \u003ctd\u003eWeek 1 of 2009\u003c/td\u003e\u003ctd\u003eWeek 53 of 2008\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2009-01-05\u003c/th\u003e\u003ctd\u003eMonday\u003c/td\u003e\n  \u003ctd\u003eWeek 2 of 2009\u003c/td\u003e\u003ctd\u003eWeek 1 of 2009\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"WeekFields","qualifiedName":"java.time.temporal.WeekFields","dimension":"","elementType":{},"package":"java.time.temporal","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"ISO","comment":"The ISO-8601 definition, where a week starts on Monday and the first week\n has a minimum of 4 days.\n \u003cp\u003e\n The ISO-8601 standard defines a calendar system based on weeks.\n It uses the week-based-year and week-of-week-based-year concepts to split\n up the passage of days instead of the standard year/month/day.\n \u003cp\u003e\n Note that the first week may start in the previous calendar year.\n Note also that the first few days of a calendar year may be in the\n week-based-year corresponding to the previous calendar year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"WeekFields","qualifiedName":"java.time.temporal.WeekFields","dimension":"","elementType":{}},"isStatic":true},{"name":"SUNDAY_START","comment":"The common definition of a week that starts on Sunday and the first week\n has a minimum of 1 day.\n \u003cp\u003e\n Defined as starting on Sunday and with a minimum of 1 day in the month.\n This week definition is in use in the US and other European countries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"WeekFields","qualifiedName":"java.time.temporal.WeekFields","dimension":"","elementType":{}},"isStatic":true},{"name":"WEEK_BASED_YEARS","comment":"The unit that represents week-based-years for the purpose of addition and subtraction.\n \u003cp\u003e\n This allows a number of week-based-years to be added to, or subtracted from, a date.\n The unit is equal to either 52 or 53 weeks.\n The estimated duration of a week-based-year is the same as that of a standard ISO\n year at {@code 365.2425 Days}.\n \u003cp\u003e\n The rules for addition add the number of week-based-years to the existing value\n for the week-based-year field retaining the week-of-week-based-year\n and day-of-week, unless the week number it too large for the target year.\n In that case, the week is set to the last week of the year\n with the same day-of-week.\n \u003cp\u003e\n This unit is an immutable and thread-safe singleton.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"of","comment":"Obtains an instance of {@code WeekFields} appropriate for a locale.\n \u003cp\u003e\n This will look up appropriate values from the provider of localization data.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"WeekFields","qualifiedName":"java.time.temporal.WeekFields","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code WeekFields} from the first day-of-week and minimal days.\n \u003cp\u003e\n The first day-of-week defines the ISO {@code DayOfWeek} that is day 1 of the week.\n The minimal number of days in the first week defines how many days must be present\n in a month or year, starting from the first day-of-week, before the week is counted\n as the first week. A value of 1 will count the first day of the month or year as part\n of the first week, whereas a value of 7 will require the whole seven days to be in\n the new month or year.\n \u003cp\u003e\n WeekFields instances are singletons; for each unique combination\n of {@code firstDayOfWeek} and {@code minimalDaysInFirstWeek} the\n the same instance will be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.DayOfWeek, int)","flatSignature":"(DayOfWeek, int)","returnType":{"isPrimitive":false,"simpleName":"WeekFields","qualifiedName":"java.time.temporal.WeekFields","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"firstDayOfWeek","type":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}}},{"name":"minimalDaysInFirstWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFirstDayOfWeek","comment":"Gets the first day-of-week.\n \u003cp\u003e\n The first day-of-week varies by culture.\n For example, the US uses Sunday, while France and the ISO-8601 standard use Monday.\n This method returns the first day using the standard {@code DayOfWeek} enum.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMinimalDaysInFirstWeek","comment":"Gets the minimal number of days in the first week.\n \u003cp\u003e\n The number of days considered to define the first week of a month or year\n varies by culture.\n For example, the ISO-8601 requires 4 days (more than half a week) to\n be present before counting the first week.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"dayOfWeek","comment":"Returns a field to access the day of week based on this {@code WeekFields}.\n \u003cp\u003e\n This is similar to {@link ChronoField#DAY_OF_WEEK} but uses values for\n the day-of-week based on this {@code WeekFields}.\n The days are numbered from 1 to 7 where the\n {@link #getFirstDayOfWeek() first day-of-week} is assigned the value 1.\n \u003cp\u003e\n For example, if the first day-of-week is Sunday, then that will have the\n value 1, with other days ranging from Monday as 2 to Saturday as 7.\n \u003cp\u003e\n In the resolving phase of parsing, a localized day-of-week will be converted\n to a standardized {@code ChronoField} day-of-week.\n The day-of-week must be in the valid range 1 to 7.\n Other fields in this class build dates using the standardized day-of-week.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"weekOfMonth","comment":"Returns a field to access the week of month based on this {@code WeekFields}.\n \u003cp\u003e\n This represents the concept of the count of weeks within the month where weeks\n start on a fixed day-of-week, such as Monday.\n This field is typically used with {@link WeekFields#dayOfWeek()}.\n \u003cp\u003e\n Week one (1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}\n where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the month.\n Thus, week one may start up to {@code minDays} days before the start of the month.\n If the first week starts after the start of the month then the period before is week zero (0).\n \u003cp\u003e\n For example:\u003cbr\u003e\n - if the 1st day of the month is a Monday, week one starts on the 1st and there is no week zero\u003cbr\u003e\n - if the 2nd day of the month is a Monday, week one starts on the 2nd and the 1st is in week zero\u003cbr\u003e\n - if the 4th day of the month is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero\u003cbr\u003e\n - if the 5th day of the month is a Monday, week two starts on the 5th and the 1st to 4th is in week one\u003cbr\u003e\n \u003cp\u003e\n This field can be used with any calendar system.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a year,\n week-of-month, month-of-year and day-of-week.\n \u003cp\u003e\n In {@linkplain ResolverStyle#STRICT strict mode}, all four fields are\n validated against their range of valid values. The week-of-month field\n is validated to ensure that the resulting month is the month requested.\n \u003cp\u003e\n In {@linkplain ResolverStyle#SMART smart mode}, all four fields are\n validated against their range of valid values. The week-of-month field\n is validated from 0 to 6, meaning that the resulting date can be in a\n different month to that specified.\n \u003cp\u003e\n In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n are validated against the range of valid values. The resulting date is calculated\n equivalent to the following four stage approach.\n First, create a date on the first day of the first week of January in the requested year.\n Then take the month-of-year, subtract one, and add the amount in months to the date.\n Then take the week-of-month, subtract one, and add the amount in weeks to the date.\n Finally, adjust to the correct day-of-week within the localized week.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"weekOfYear","comment":"Returns a field to access the week of year based on this {@code WeekFields}.\n \u003cp\u003e\n This represents the concept of the count of weeks within the year where weeks\n start on a fixed day-of-week, such as Monday.\n This field is typically used with {@link WeekFields#dayOfWeek()}.\n \u003cp\u003e\n Week one(1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}\n where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.\n Thus, week one may start up to {@code minDays} days before the start of the year.\n If the first week starts after the start of the year then the period before is week zero (0).\n \u003cp\u003e\n For example:\u003cbr\u003e\n - if the 1st day of the year is a Monday, week one starts on the 1st and there is no week zero\u003cbr\u003e\n - if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in week zero\u003cbr\u003e\n - if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero\u003cbr\u003e\n - if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is in week one\u003cbr\u003e\n \u003cp\u003e\n This field can be used with any calendar system.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a year,\n week-of-year and day-of-week.\n \u003cp\u003e\n In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n validated against their range of valid values. The week-of-year field\n is validated to ensure that the resulting year is the year requested.\n \u003cp\u003e\n In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n validated against their range of valid values. The week-of-year field\n is validated from 0 to 54, meaning that the resulting date can be in a\n different year to that specified.\n \u003cp\u003e\n In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n are validated against the range of valid values. The resulting date is calculated\n equivalent to the following three stage approach.\n First, create a date on the first day of the first week in the requested year.\n Then take the week-of-year, subtract one, and add the amount in weeks to the date.\n Finally, adjust to the correct day-of-week within the localized week.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"weekOfWeekBasedYear","comment":"Returns a field to access the week of a week-based-year based on this {@code WeekFields}.\n \u003cp\u003e\n This represents the concept of the count of weeks within the year where weeks\n start on a fixed day-of-week, such as Monday and each week belongs to exactly one year.\n This field is typically used with {@link WeekFields#dayOfWeek()} and\n {@link WeekFields#weekBasedYear()}.\n \u003cp\u003e\n Week one(1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}\n where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.\n If the first week starts after the start of the year then the period before\n is in the last week of the previous year.\n \u003cp\u003e\n For example:\u003cbr\u003e\n - if the 1st day of the year is a Monday, week one starts on the 1st\u003cbr\u003e\n - if the 2nd day of the year is a Monday, week one starts on the 2nd and\n   the 1st is in the last week of the previous year\u003cbr\u003e\n - if the 4th day of the year is a Monday, week one starts on the 4th and\n   the 1st to 3rd is in the last week of the previous year\u003cbr\u003e\n - if the 5th day of the year is a Monday, week two starts on the 5th and\n   the 1st to 4th is in week one\u003cbr\u003e\n \u003cp\u003e\n This field can be used with any calendar system.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a week-based-year,\n week-of-year and day-of-week.\n \u003cp\u003e\n In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n validated against their range of valid values. The week-of-year field\n is validated to ensure that the resulting week-based-year is the\n week-based-year requested.\n \u003cp\u003e\n In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n validated against their range of valid values. The week-of-week-based-year field\n is validated from 1 to 53, meaning that the resulting date can be in the\n following week-based-year to that specified.\n \u003cp\u003e\n In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n are validated against the range of valid values. The resulting date is calculated\n equivalent to the following three stage approach.\n First, create a date on the first day of the first week in the requested week-based-year.\n Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.\n Finally, adjust to the correct day-of-week within the localized week.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"weekBasedYear","comment":"Returns a field to access the year of a week-based-year based on this {@code WeekFields}.\n \u003cp\u003e\n This represents the concept of the year where weeks start on a fixed day-of-week,\n such as Monday and each week belongs to exactly one year.\n This field is typically used with {@link WeekFields#dayOfWeek()} and\n {@link WeekFields#weekOfWeekBasedYear()}.\n \u003cp\u003e\n Week one(1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}\n where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.\n Thus, week one may start before the start of the year.\n If the first week starts after the start of the year then the period before\n is in the last week of the previous year.\n \u003cp\u003e\n This field can be used with any calendar system.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a week-based-year,\n week-of-year and day-of-week.\n \u003cp\u003e\n In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n validated against their range of valid values. The week-of-year field\n is validated to ensure that the resulting week-based-year is the\n week-based-year requested.\n \u003cp\u003e\n In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n validated against their range of valid values. The week-of-week-based-year field\n is validated from 1 to 53, meaning that the resulting date can be in the\n following week-based-year to that specified.\n \u003cp\u003e\n In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n are validated against the range of valid values. The resulting date is calculated\n equivalent to the following three stage approach.\n First, create a date on the first day of the first week in the requested week-based-year.\n Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.\n Finally, adjust to the correct day-of-week within the localized week.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Checks if this {@code WeekFields} is equal to the specified object.\n \u003cp\u003e\n The comparison is based on the entire state of the rules, which is\n the first day-of-week and minimal days.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"object","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this {@code WeekFields}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"A string representation of this {@code WeekFields} instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}