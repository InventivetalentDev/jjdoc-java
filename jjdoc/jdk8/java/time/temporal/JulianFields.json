{"name":"JulianFields","comment":"A set of date fields that provide access to Julian Days.\n \u003cp\u003e\n The Julian Day is a standard way of expressing date and time commonly used in the scientific community.\n It is expressed as a decimal number of whole days where days start at midday.\n This class represents variations on Julian Days that count whole days from midnight.\n \u003cp\u003e\n The fields are implemented relative to {@link ChronoField#EPOCH_DAY EPOCH_DAY}.\n The fields are supported, and can be queried and set if {@code EPOCH_DAY} is available.\n The fields work with all chronologies.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"JulianFields","qualifiedName":"java.time.temporal.JulianFields","dimension":"","elementType":{},"package":"java.time.temporal","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"JULIAN_DAY","comment":"Julian Day field.\n \u003cp\u003e\n This is an integer-based version of the Julian Day Number.\n Julian Day is a well-known system that represents the count of whole days since day 0,\n which is defined to be January 1, 4713 BCE in the Julian calendar, and -4713-11-24 Gregorian.\n The field  has \"JulianDay\" as \u0027name\u0027, and \u0027DAYS\u0027 as \u0027baseUnit\u0027.\n The field always refers to the local date-time, ignoring the offset or zone.\n \u003cp\u003e\n For date-times, \u0027JULIAN_DAY.getFrom()\u0027 assumes the same value from\n midnight until just before the next midnight.\n When \u0027JULIAN_DAY.adjustInto()\u0027 is applied to a date-time, the time of day portion remains unaltered.\n \u0027JULIAN_DAY.adjustInto()\u0027 and \u0027JULIAN_DAY.getFrom()\u0027 only apply to {@code Temporal} objects that\n can be converted into {@link ChronoField#EPOCH_DAY}.\n An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a Julian Day field.\n In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}\n the Julian Day value is validated against the range of valid values.\n In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.\n\n \u003ch3\u003eAstronomical and Scientific Notes\u003c/h3\u003e\n The standard astronomical definition uses a fraction to indicate the time-of-day,\n thus 3.25 would represent the time 18:00, since days start at midday.\n This implementation uses an integer and days starting at midnight.\n The integer value for the Julian Day Number is the astronomical Julian Day value at midday\n of the date in question.\n This amounts to the astronomical Julian Day, rounded to an integer {@code JDN \u003d floor(JD + 0.5)}.\n\n \u003cpre\u003e\n  | ISO date          |  Julian Day Number | Astronomical Julian Day |\n  | 1970-01-01T00:00  |         2,440,588  |         2,440,587.5     |\n  | 1970-01-01T06:00  |         2,440,588  |         2,440,587.75    |\n  | 1970-01-01T12:00  |         2,440,588  |         2,440,588.0     |\n  | 1970-01-01T18:00  |         2,440,588  |         2,440,588.25    |\n  | 1970-01-02T00:00  |         2,440,589  |         2,440,588.5     |\n  | 1970-01-02T06:00  |         2,440,589  |         2,440,588.75    |\n  | 1970-01-02T12:00  |         2,440,589  |         2,440,589.0     |\n \u003c/pre\u003e\n \u003cp\u003e\n Julian Days are sometimes taken to imply Universal Time or UTC, but this\n implementation always uses the Julian Day number for the local date,\n regardless of the offset or time-zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isStatic":true},{"name":"MODIFIED_JULIAN_DAY","comment":"Modified Julian Day field.\n \u003cp\u003e\n This is an integer-based version of the Modified Julian Day Number.\n Modified Julian Day (MJD) is a well-known system that counts days continuously.\n It is defined relative to astronomical Julian Day as  {@code MJD \u003d JD - 2400000.5}.\n Each Modified Julian Day runs from midnight to midnight.\n The field always refers to the local date-time, ignoring the offset or zone.\n \u003cp\u003e\n For date-times, \u0027MODIFIED_JULIAN_DAY.getFrom()\u0027 assumes the same value from\n midnight until just before the next midnight.\n When \u0027MODIFIED_JULIAN_DAY.adjustInto()\u0027 is applied to a date-time, the time of day portion remains unaltered.\n \u0027MODIFIED_JULIAN_DAY.adjustInto()\u0027 and \u0027MODIFIED_JULIAN_DAY.getFrom()\u0027 only apply to {@code Temporal} objects\n that can be converted into {@link ChronoField#EPOCH_DAY}.\n An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.\n \u003cp\u003e\n This implementation is an integer version of MJD with the decimal part rounded to floor.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a Modified Julian Day field.\n In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}\n the Modified Julian Day value is validated against the range of valid values.\n In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.\n\n \u003ch3\u003eAstronomical and Scientific Notes\u003c/h3\u003e\n \u003cpre\u003e\n  | ISO date          | Modified Julian Day |      Decimal MJD |\n  | 1970-01-01T00:00  |             40,587  |       40,587.0   |\n  | 1970-01-01T06:00  |             40,587  |       40,587.25  |\n  | 1970-01-01T12:00  |             40,587  |       40,587.5   |\n  | 1970-01-01T18:00  |             40,587  |       40,587.75  |\n  | 1970-01-02T00:00  |             40,588  |       40,588.0   |\n  | 1970-01-02T06:00  |             40,588  |       40,588.25  |\n  | 1970-01-02T12:00  |             40,588  |       40,588.5   |\n \u003c/pre\u003e\n\n Modified Julian Days are sometimes taken to imply Universal Time or UTC, but this\n implementation always uses the Modified Julian Day for the local date,\n regardless of the offset or time-zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isStatic":true},{"name":"RATA_DIE","comment":"Rata Die field.\n \u003cp\u003e\n Rata Die counts whole days continuously starting day 1 at midnight at the beginning of 0001-01-01 (ISO).\n The field always refers to the local date-time, ignoring the offset or zone.\n \u003cp\u003e\n For date-times, \u0027RATA_DIE.getFrom()\u0027 assumes the same value from\n midnight until just before the next midnight.\n When \u0027RATA_DIE.adjustInto()\u0027 is applied to a date-time, the time of day portion remains unaltered.\n \u0027RATA_DIE.adjustInto()\u0027 and \u0027RATA_DIE.getFrom()\u0027 only apply to {@code Temporal} objects\n that can be converted into {@link ChronoField#EPOCH_DAY}.\n An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.\n \u003cp\u003e\n In the resolving phase of parsing, a date can be created from a Rata Die field.\n In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}\n the Rata Die value is validated against the range of valid values.\n In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}},"isStatic":true}],"methods":[],"typeParameters":[],"enumConstants":[]}