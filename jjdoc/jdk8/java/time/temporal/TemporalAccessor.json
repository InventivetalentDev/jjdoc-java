{"name":"TemporalAccessor","comment":"Framework-level interface defining read-only access to a temporal object,\n such as a date, time, offset or some combination of these.\n \u003cp\u003e\n This is the base interface type for date, time and offset objects.\n It is implemented by those classes that can provide information\n as {@linkplain TemporalField fields} or {@linkplain TemporalQuery queries}.\n \u003cp\u003e\n Most date and time information can be represented as a number.\n These are modeled using {@code TemporalField} with the number held using\n a {@code long} to handle large values. Year, month and day-of-month are\n simple examples of fields, but they also include instant and offsets.\n See {@link ChronoField} for the standard set of fields.\n \u003cp\u003e\n Two pieces of date/time information cannot be represented by numbers,\n the {@linkplain java.time.chrono.Chronology chronology} and the\n {@linkplain java.time.ZoneId time-zone}.\n These can be accessed via {@linkplain #query(TemporalQuery) queries} using\n the static methods defined on {@link TemporalQuery}.\n \u003cp\u003e\n A sub-interface, {@link Temporal}, extends this definition to one that also\n supports adjustment and manipulation on more complete temporal objects.\n \u003cp\u003e\n This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as {@code LocalDate}.\n There are many reasons for this, part of which is that implementations\n of this interface may be in calendar systems other than ISO.\n See {@link java.time.chrono.ChronoLocalDate} for a fuller discussion of the issues.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{},"package":"java.time.temporal","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if the date-time can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range} and {@link #get(TemporalField) get}\n methods will throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n All fields can be expressed as a {@code long} integer.\n This method returns an object that describes the valid range for that value.\n The value of this temporal object is used to enhance the accuracy of the returned range.\n If the date-time cannot return the range, because the field is unsupported or for\n some other reason, an exception will be thrown.\n \u003cp\u003e\n Note that the result only describes the minimum and maximum valid values\n and it is important not to read too much into them. For example, there\n could be values within the range that are invalid for the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field as an {@code int}.\n \u003cp\u003e\n This queries the date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If the date-time cannot return the value, because the field is unsupported or for\n some other reason, an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field as a {@code long}.\n \u003cp\u003e\n This queries the date-time for the value of the specified field.\n The returned value may be outside the valid range of values for the field.\n If the date-time cannot return the value, because the field is unsupported or for\n some other reason, an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date-time.\n \u003cp\u003e\n This queries this date-time using the specified query strategy object.\n \u003cp\u003e\n Queries are a key tool for extracting information from date-times.\n They exists to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n \u003cp\u003e\n The most common query implementations are method references, such as\n {@code LocalDate::from} and {@code ZoneId::from}.\n Additional implementations are provided as static methods on {@link TemporalQuery}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]}],"typeParameters":[],"subInterfaces":["java.time.temporal.Temporal","java.time.ZoneOffset","java.time.MonthDay","java.time.Month","java.time.DayOfWeek","java.time.chrono.Era"],"enumConstants":[]}