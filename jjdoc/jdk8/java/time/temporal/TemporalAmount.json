{"name":"TemporalAmount","comment":"Framework-level interface defining an amount of time, such as\n \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n \u003cp\u003e\n This is the base interface type for amounts of time.\n An amount is distinct from a date or time-of-day in that it is not tied\n to any specific point on the time-line.\n \u003cp\u003e\n The amount can be thought of as a {@code Map} of {@link TemporalUnit} to\n {@code long}, exposed via {@link #getUnits()} and {@link #get(TemporalUnit)}.\n A simple case might have a single unit-value pair, such as \"6 hours\".\n A more complex case may have multiple unit-value pairs, such as\n \"7 years, 3 months and 5 days\".\n \u003cp\u003e\n There are two common implementations.\n {@link Period} is a date-based implementation, storing years, months and days.\n {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n but providing some access using other duration based units such as minutes,\n hours and fixed 24-hour days.\n \u003cp\u003e\n This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as {@code Period} and {@code Duration}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{},"package":"java.time.temporal","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"get","comment":"Returns the value of the requested unit.\n The units returned from {@link #getUnits()} uniquely define the\n value of the {@code TemporalAmount}.  A value must be returned\n for each unit listed in {@code getUnits}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getUnits","comment":"Returns the list of units uniquely defining the value of this TemporalAmount.\n The list of {@code TemporalUnits} is defined by the implementation class.\n The list is a snapshot of the units at the time {@code getUnits}\n is called and is not mutable.\n The units are ordered from longest duration to the shortest duration\n of the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addTo","comment":"Adds to the specified temporal object.\n \u003cp\u003e\n Adds the amount to the specified temporal object using the logic\n encapsulated in the implementing class.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use {@link Temporal#plus(TemporalAmount)}:\n \u003cpre\u003e\n   // These two lines are equivalent, but the second approach is recommended\n   dateTime \u003d amount.addTo(dateTime);\n   dateTime \u003d dateTime.plus(adder);\n \u003c/pre\u003e\n It is recommended to use the second approach, {@code plus(TemporalAmount)},\n as it is a lot clearer to read in code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtractFrom","comment":"Subtracts this object from the specified temporal object.\n \u003cp\u003e\n Subtracts the amount from the specified temporal object using the logic\n encapsulated in the implementing class.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use {@link Temporal#minus(TemporalAmount)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d amount.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(amount);\n \u003c/pre\u003e\n It is recommended to use the second approach, {@code minus(TemporalAmount)},\n as it is a lot clearer to read in code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.time.chrono.ChronoPeriod","java.time.Duration"],"enumConstants":[]}