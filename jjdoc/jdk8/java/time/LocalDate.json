{"name":"LocalDate","comment":"A date without a time-zone in the ISO-8601 calendar system,\n such as {@code 2007-12-03}.\n \u003cp\u003e\n {@code LocalDate} is an immutable date-time object that represents a date,\n often viewed as year-month-day. Other date fields, such as day-of-year,\n day-of-week and week-of-year, can also be accessed.\n For example, the value \"2nd October 2007\" can be stored in a {@code LocalDate}.\n \u003cp\u003e\n This class does not store or represent a time or time-zone.\n Instead, it is a description of the date, as used for birthdays.\n It cannot represent an instant on the time-line without additional information\n such as an offset or time-zone.\n \u003cp\u003e\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today\u0027s rules for leap years are applied for all time.\n For most applications written today, the ISO-8601 rules are entirely suitable.\n However, any application that makes use of historical dates, and requires them\n to be accurate will find the ISO-8601 approach unsuitable.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code LocalDate} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.temporal.Temporal","java.time.temporal.TemporalAdjuster","java.time.chrono.ChronoLocalDate","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"MIN","comment":"The minimum supported {@code LocalDate}, \u0027-999999999-01-01\u0027.\n This could be used by an application as a \"far past\" date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isStatic":true},{"name":"MAX","comment":"The maximum supported {@code LocalDate}, \u0027+999999999-12-31\u0027.\n This could be used by an application as a \"far future\" date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"now","comment":"Obtains the current date from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current date from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"now","comment":"Obtains the current date from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDate} from a year, month and day.\n \u003cp\u003e\n This returns a {@code LocalDate} with the specified year, month and day-of-month.\n The day must be valid for the year and month, otherwise an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.time.Month, int)","flatSignature":"(int, Month, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDate} from a year, month and day.\n \u003cp\u003e\n This returns a {@code LocalDate} with the specified year, month and day-of-month.\n The day must be valid for the year and month, otherwise an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofYearDay","comment":"Obtains an instance of {@code LocalDate} from a year and day-of-year.\n \u003cp\u003e\n This returns a {@code LocalDate} with the specified year and day-of-year.\n The day-of-year must be valid for the year, otherwise an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofEpochDay","comment":"Obtains an instance of {@code LocalDate} from the epoch day count.\n \u003cp\u003e\n This returns a {@code LocalDate} with the specified epoch-day.\n The {@link ChronoField#EPOCH_DAY EPOCH_DAY} is a simple incrementing count\n of days where day 0 is 1970-01-01. Negative numbers represent earlier days.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"epochDay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code LocalDate} from a temporal object.\n \u003cp\u003e\n This obtains a local date based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code LocalDate}.\n \u003cp\u003e\n The conversion uses the {@link TemporalQueries#localDate()} query, which relies\n on extracting the {@link ChronoField#EPOCH_DAY EPOCH_DAY} field.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code LocalDate::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code LocalDate} from a text string such as {@code 2007-12-03}.\n \u003cp\u003e\n The string must represent a valid date and is parsed using\n {@link java.time.format.DateTimeFormatter#ISO_LOCAL_DATE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code LocalDate} from a text string using a specific formatter.\n \u003cp\u003e\n The text is parsed using the formatter, returning a date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.time.format.DateTimeFormatter)","flatSignature":"(CharSequence, DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this date can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The supported fields are:\n \u003cul\u003e\n \u003cli\u003e{@code DAY_OF_WEEK}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}\n \u003cli\u003e{@code DAY_OF_MONTH}\n \u003cli\u003e{@code DAY_OF_YEAR}\n \u003cli\u003e{@code EPOCH_DAY}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_MONTH}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_YEAR}\n \u003cli\u003e{@code MONTH_OF_YEAR}\n \u003cli\u003e{@code PROLEPTIC_MONTH}\n \u003cli\u003e{@code YEAR_OF_ERA}\n \u003cli\u003e{@code YEAR}\n \u003cli\u003e{@code ERA}\n \u003c/ul\u003e\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to, or subtracted from, this date.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n If the unit is a {@link ChronoUnit} then the query is implemented here.\n The supported units are:\n \u003cul\u003e\n \u003cli\u003e{@code DAYS}\n \u003cli\u003e{@code WEEKS}\n \u003cli\u003e{@code MONTHS}\n \u003cli\u003e{@code YEARS}\n \u003cli\u003e{@code DECADES}\n \u003cli\u003e{@code CENTURIES}\n \u003cli\u003e{@code MILLENNIA}\n \u003cli\u003e{@code ERAS}\n \u003c/ul\u003e\n All other {@code ChronoUnit} instances will return false.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This date is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this date as an {@code int}.\n \u003cp\u003e\n This queries this date for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date, except {@code EPOCH_DAY} and {@code PROLEPTIC_MONTH}\n which are too large to fit in an {@code int} and throw a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this date as a {@code long}.\n \u003cp\u003e\n This queries this date for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChronology","comment":"Gets the chronology of this date, which is the ISO calendar system.\n \u003cp\u003e\n The {@code Chronology} represents the calendar system in use.\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today\u0027s rules for leap years are applied for all time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IsoChronology","qualifiedName":"java.time.chrono.IsoChronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEra","comment":"Gets the era applicable at this date.\n \u003cp\u003e\n The official ISO-8601 standard does not define eras, however {@code IsoChronology} does.\n It defines two eras, \u0027CE\u0027 from year one onwards and \u0027BCE\u0027 from year zero backwards.\n Since dates before the Julian-Gregorian cutover are not in line with history,\n the cutover between \u0027BCE\u0027 and \u0027CE\u0027 is also not aligned with the commonly used\n eras, often referred to using \u0027BC\u0027 and \u0027AD\u0027.\n \u003cp\u003e\n Users of this class should typically ignore this method as it exists primarily\n to fulfill the {@link ChronoLocalDate} contract where it is necessary to support\n the Japanese calendar system.\n \u003cp\u003e\n The returned era will be a singleton capable of being compared with the constants\n in {@link IsoChronology} using the {@code \u003d\u003d} operator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Era","qualifiedName":"java.time.chrono.Era","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getYear","comment":"Gets the year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the year.\n \u003cp\u003e\n The year returned by this method is proleptic as per {@code get(YEAR)}.\n To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonthValue","comment":"Gets the month-of-year field from 1 to 12.\n \u003cp\u003e\n This method returns the month as an {@code int} from 1 to 12.\n Application code is frequently clearer if the enum {@link Month}\n is used by calling {@link #getMonth()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonth","comment":"Gets the month-of-year field using the {@code Month} enum.\n \u003cp\u003e\n This method returns the enum {@link Month} for the month.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link Month#getValue() int value}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfMonth","comment":"Gets the day-of-month field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-month.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfYear","comment":"Gets the day-of-year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfWeek","comment":"Gets the day-of-week field, which is an enum {@code DayOfWeek}.\n \u003cp\u003e\n This method returns the enum {@link DayOfWeek} for the day-of-week.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link DayOfWeek#getValue() int value}.\n \u003cp\u003e\n Additional information can be obtained from the {@code DayOfWeek}.\n This includes textual names of the values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLeapYear","comment":"Checks if the year is a leap year, according to the ISO proleptic\n calendar system rules.\n \u003cp\u003e\n This method applies the current rules for leap years across the whole time-line.\n In general, a year is a leap year if it is divisible by four without\n remainder. However, years divisible by 100, are not leap years, with\n the exception of years divisible by 400 which are.\n \u003cp\u003e\n For example, 1904 is a leap year it is divisible by 4.\n 1900 was not a leap year as it is divisible by 100, however 2000 was a\n leap year as it is divisible by 400.\n \u003cp\u003e\n The calculation is proleptic - applying the same rules into the far future and far past.\n This is historically inaccurate, but is correct for the ISO-8601 standard.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lengthOfMonth","comment":"Returns the length of the month represented by this date.\n \u003cp\u003e\n This returns the length of the month in days.\n For example, a date in January would return 31.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lengthOfYear","comment":"Returns the length of the year represented by this date.\n \u003cp\u003e\n This returns the length of the year in days, either 365 or 366.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"with","comment":"Returns an adjusted copy of this date.\n \u003cp\u003e\n This returns a {@code LocalDate}, based on this one, with the date adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \u003cp\u003e\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n \u003cp\u003e\n A selection of common adjustments is provided in\n {@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the {@code TemporalAdjuster} interface,\n such as {@link Month} and {@link java.time.MonthDay MonthDay}.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \u003cp\u003e\n For example this code returns a date on the last day of July:\n \u003cpre\u003e\n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result \u003d localDate.with(JULY).with(lastDayOfMonth());\n \u003c/pre\u003e\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalAdjuster#adjustInto(Temporal)} method on the\n specified adjuster passing {@code this} as the argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns a copy of this date with the specified field set to a new value.\n \u003cp\u003e\n This returns a {@code LocalDate}, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \u003cp\u003e\n In some cases, changing the specified field can cause the resulting date to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the adjustment is implemented here.\n The supported fields behave as follows:\n \u003cul\u003e\n \u003cli\u003e{@code DAY_OF_WEEK} -\n  Returns a {@code LocalDate} with the specified day-of-week.\n  The date is adjusted up to 6 days forward or backward within the boundary\n  of a Monday to Sunday week.\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n  Returns a {@code LocalDate} with the specified aligned-day-of-week.\n  The date is adjusted to the specified month-based aligned-day-of-week.\n  Aligned weeks are counted such that the first week of a given month starts\n  on the first day of that month.\n  This may cause the date to be moved up to 6 days into the following month.\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n  Returns a {@code LocalDate} with the specified aligned-day-of-week.\n  The date is adjusted to the specified year-based aligned-day-of-week.\n  Aligned weeks are counted such that the first week of a given year starts\n  on the first day of that year.\n  This may cause the date to be moved up to 6 days into the following year.\n \u003cli\u003e{@code DAY_OF_MONTH} -\n  Returns a {@code LocalDate} with the specified day-of-month.\n  The month and year will be unchanged. If the day-of-month is invalid for the\n  year and month, then a {@code DateTimeException} is thrown.\n \u003cli\u003e{@code DAY_OF_YEAR} -\n  Returns a {@code LocalDate} with the specified day-of-year.\n  The year will be unchanged. If the day-of-year is invalid for the\n  year, then a {@code DateTimeException} is thrown.\n \u003cli\u003e{@code EPOCH_DAY} -\n  Returns a {@code LocalDate} with the specified epoch-day.\n  This completely replaces the date and is equivalent to {@link #ofEpochDay(long)}.\n \u003cli\u003e{@code ALIGNED_WEEK_OF_MONTH} -\n  Returns a {@code LocalDate} with the specified aligned-week-of-month.\n  Aligned weeks are counted such that the first week of a given month starts\n  on the first day of that month.\n  This adjustment moves the date in whole week chunks to match the specified week.\n  The result will have the same day-of-week as this date.\n  This may cause the date to be moved into the following month.\n \u003cli\u003e{@code ALIGNED_WEEK_OF_YEAR} -\n  Returns a {@code LocalDate} with the specified aligned-week-of-year.\n  Aligned weeks are counted such that the first week of a given year starts\n  on the first day of that year.\n  This adjustment moves the date in whole week chunks to match the specified week.\n  The result will have the same day-of-week as this date.\n  This may cause the date to be moved into the following year.\n \u003cli\u003e{@code MONTH_OF_YEAR} -\n  Returns a {@code LocalDate} with the specified month-of-year.\n  The year will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n \u003cli\u003e{@code PROLEPTIC_MONTH} -\n  Returns a {@code LocalDate} with the specified proleptic-month.\n  The day-of-month will be unchanged, unless it would be invalid for the new month\n  and year. In that case, the day-of-month is adjusted to the maximum valid value\n  for the new month and year.\n \u003cli\u003e{@code YEAR_OF_ERA} -\n  Returns a {@code LocalDate} with the specified year-of-era.\n  The era and month will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n \u003cli\u003e{@code YEAR} -\n  Returns a {@code LocalDate} with the specified year.\n  The month will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n \u003cli\u003e{@code ERA} -\n  Returns a {@code LocalDate} with the specified era.\n  The year-of-era and month will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n \u003c/ul\u003e\n \u003cp\u003e\n In all cases, if the new value is outside the valid range of values for the field\n then a {@code DateTimeException} will be thrown.\n \u003cp\u003e\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withYear","comment":"Returns a copy of this {@code LocalDate} with the year altered.\n \u003cp\u003e\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMonth","comment":"Returns a copy of this {@code LocalDate} with the month-of-year altered.\n \u003cp\u003e\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfMonth","comment":"Returns a copy of this {@code LocalDate} with the day-of-month altered.\n \u003cp\u003e\n If the resulting date is invalid, an exception is thrown.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfYear","comment":"Returns a copy of this {@code LocalDate} with the day-of-year altered.\n \u003cp\u003e\n If the resulting date is invalid, an exception is thrown.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date with the specified amount added.\n \u003cp\u003e\n This returns a {@code LocalDate}, based on this one, with the specified amount added.\n The amount is typically {@link Period} but may be any other type implementing\n the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#addTo(Temporal)}. The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date with the specified amount added.\n \u003cp\u003e\n This returns a {@code LocalDate}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n In some cases, adding the amount can cause the resulting date to become invalid.\n For example, adding one month to 31st January would result in 31st February.\n In cases like this, the unit is responsible for resolving the date.\n Typically it will choose the previous valid date, which would be the last valid\n day of February in this example.\n \u003cp\u003e\n If the field is a {@link ChronoUnit} then the addition is implemented here.\n The supported fields behave as follows:\n \u003cul\u003e\n \u003cli\u003e{@code DAYS} -\n  Returns a {@code LocalDate} with the specified number of days added.\n  This is equivalent to {@link #plusDays(long)}.\n \u003cli\u003e{@code WEEKS} -\n  Returns a {@code LocalDate} with the specified number of weeks added.\n  This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.\n \u003cli\u003e{@code MONTHS} -\n  Returns a {@code LocalDate} with the specified number of months added.\n  This is equivalent to {@link #plusMonths(long)}.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \u003cli\u003e{@code YEARS} -\n  Returns a {@code LocalDate} with the specified number of years added.\n  This is equivalent to {@link #plusYears(long)}.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \u003cli\u003e{@code DECADES} -\n  Returns a {@code LocalDate} with the specified number of decades added.\n  This is equivalent to calling {@link #plusYears(long)} with the amount\n  multiplied by 10.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \u003cli\u003e{@code CENTURIES} -\n  Returns a {@code LocalDate} with the specified number of centuries added.\n  This is equivalent to calling {@link #plusYears(long)} with the amount\n  multiplied by 100.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \u003cli\u003e{@code MILLENNIA} -\n  Returns a {@code LocalDate} with the specified number of millennia added.\n  This is equivalent to calling {@link #plusYears(long)} with the amount\n  multiplied by 1,000.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \u003cli\u003e{@code ERAS} -\n  Returns a {@code LocalDate} with the specified number of eras added.\n  Only two eras are supported so the amount must be one, zero or minus one.\n  If the amount is non-zero then the year is changed such that the year-of-era\n  is unchanged.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \u003c/ul\u003e\n \u003cp\u003e\n All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusYears","comment":"Returns a copy of this {@code LocalDate} with the specified number of years added.\n \u003cp\u003e\n This method adds the specified amount to the years field in three steps:\n \u003col\u003e\n \u003cli\u003eAdd the input years to the year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2008-02-29 (leap year) plus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"yearsToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMonths","comment":"Returns a copy of this {@code LocalDate} with the specified number of months added.\n \u003cp\u003e\n This method adds the specified amount to the months field in three steps:\n \u003col\u003e\n \u003cli\u003eAdd the input months to the month-of-year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2007-03-31 plus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"monthsToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusWeeks","comment":"Returns a copy of this {@code LocalDate} with the specified number of weeks added.\n \u003cp\u003e\n This method adds the specified amount in weeks to the days field incrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 plus one week would result in 2009-01-07.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeksToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusDays","comment":"Returns a copy of this {@code LocalDate} with the specified number of days added.\n \u003cp\u003e\n This method adds the specified amount to the days field incrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 plus one day would result in 2009-01-01.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daysToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code LocalDate}, based on this one, with the specified amount subtracted.\n The amount is typically {@link Period} but may be any other type implementing\n the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code LocalDate}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusYears","comment":"Returns a copy of this {@code LocalDate} with the specified number of years subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the years field in three steps:\n \u003col\u003e\n \u003cli\u003eSubtract the input years from the year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2008-02-29 (leap year) minus one year would result in the\n invalid date 2007-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2007-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"yearsToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMonths","comment":"Returns a copy of this {@code LocalDate} with the specified number of months subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the months field in three steps:\n \u003col\u003e\n \u003cli\u003eSubtract the input months from the month-of-year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2007-03-31 minus one month would result in the invalid date\n 2007-02-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"monthsToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusWeeks","comment":"Returns a copy of this {@code LocalDate} with the specified number of weeks subtracted.\n \u003cp\u003e\n This method subtracts the specified amount in weeks from the days field decrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2009-01-07 minus one week would result in 2008-12-31.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeksToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusDays","comment":"Returns a copy of this {@code LocalDate} with the specified number of days subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the days field decrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2009-01-01 minus one day would result in 2008-12-31.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daysToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date using the specified query.\n \u003cp\u003e\n This queries this date using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have the same date as this object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the date changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n passing {@link ChronoField#EPOCH_DAY} as the field.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisLocalDate.adjustInto(temporal);\n   temporal \u003d temporal.with(thisLocalDate);\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"Calculates the amount of time until another date in terms of the specified unit.\n \u003cp\u003e\n This calculates the amount of time between two {@code LocalDate}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified date.\n The result will be negative if the end is before the start.\n The {@code Temporal} passed to this method is converted to a\n {@code LocalDate} using {@link #from(TemporalAccessor)}.\n For example, the amount in days between two dates can be calculated\n using {@code startDate.until(endDate, DAYS)}.\n \u003cp\u003e\n The calculation returns a whole number, representing the number of\n complete units between the two dates.\n For example, the amount in months between 2012-06-15 and 2012-08-14\n will only be one month as it is one day short of two months.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   amount \u003d start.until(end, MONTHS);\n   amount \u003d MONTHS.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.\n \u003cp\u003e\n The calculation is implemented in this method for {@link ChronoUnit}.\n The units {@code DAYS}, {@code WEEKS}, {@code MONTHS}, {@code YEARS},\n {@code DECADES}, {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS}\n are supported. Other {@code ChronoUnit} values will throw an exception.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)","flatSignature":"(Temporal, TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"Calculates the period between this date and another date as a {@code Period}.\n \u003cp\u003e\n This calculates the period between two dates in terms of years, months and days.\n The start and end points are {@code this} and the specified date.\n The result will be negative if the end is before the start.\n The negative sign will be the same in each of year, month and day.\n \u003cp\u003e\n The calculation is performed using the ISO calendar system.\n If necessary, the input date will be converted to ISO.\n \u003cp\u003e\n The start date is included, but the end date is not.\n The period is calculated by removing complete months, then calculating\n the remaining number of days, adjusting to ensure that both have the same sign.\n The number of months is then normalized into years and months based on a 12 month year.\n A month is considered to be complete if the end day-of-month is greater\n than or equal to the start day-of-month.\n For example, from {@code 2010-01-15} to {@code 2011-03-18} is \"1 year, 2 months and 3 days\".\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use {@link Period#between(LocalDate, LocalDate)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   period \u003d start.until(end);\n   period \u003d Period.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endDateExclusive","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats this date using the specified formatter.\n \u003cp\u003e\n This date will be passed to the formatter to produce a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DateTimeFormatter)","flatSignature":"(DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atTime","comment":"Combines this date with a time to create a {@code LocalDateTime}.\n \u003cp\u003e\n This returns a {@code LocalDateTime} formed from this date at the specified time.\n All possible combinations of date and time are valid.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalTime)","flatSignature":"(LocalTime)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"time","type":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atTime","comment":"Combines this date with a time to create a {@code LocalDateTime}.\n \u003cp\u003e\n This returns a {@code LocalDateTime} formed from this date at the\n specified hour and minute.\n The seconds and nanosecond fields will be set to zero.\n The individual time fields must be within their valid range.\n All possible combinations of date and time are valid.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atTime","comment":"Combines this date with a time to create a {@code LocalDateTime}.\n \u003cp\u003e\n This returns a {@code LocalDateTime} formed from this date at the\n specified hour, minute and second.\n The nanosecond field will be set to zero.\n The individual time fields must be within their valid range.\n All possible combinations of date and time are valid.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atTime","comment":"Combines this date with a time to create a {@code LocalDateTime}.\n \u003cp\u003e\n This returns a {@code LocalDateTime} formed from this date at the\n specified hour, minute, second and nanosecond.\n The individual time fields must be within their valid range.\n All possible combinations of date and time are valid.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int)","flatSignature":"(int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atTime","comment":"Combines this date with an offset time to create an {@code OffsetDateTime}.\n \u003cp\u003e\n This returns an {@code OffsetDateTime} formed from this date at the specified time.\n All possible combinations of date and time are valid.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.OffsetTime)","flatSignature":"(OffsetTime)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"time","type":{"isPrimitive":false,"simpleName":"OffsetTime","qualifiedName":"java.time.OffsetTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atStartOfDay","comment":"Combines this date with the time of midnight to create a {@code LocalDateTime}\n at the start of this date.\n \u003cp\u003e\n This returns a {@code LocalDateTime} formed from this date at the time of\n midnight, 00:00, at the start of this date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"atStartOfDay","comment":"Returns a zoned date-time from this date at the earliest valid time according\n to the rules in the time-zone.\n \u003cp\u003e\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may not be midnight.\n \u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, there are two valid offsets, and the earlier one is used,\n corresponding to the first occurrence of midnight on the date.\n In the case of a gap, the zoned date-time will represent the instant just after the gap.\n \u003cp\u003e\n If the zone ID is a {@link ZoneOffset}, then the result always has a time of midnight.\n \u003cp\u003e\n To convert to a specific time in a given time-zone call {@link #atTime(LocalTime)}\n followed by {@link LocalDateTime#atZone(ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toEpochDay","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares this date to another date.\n \u003cp\u003e\n The comparison is primarily based on the date, from earliest to latest.\n It is \"consistent with equals\", as defined by {@link Comparable}.\n \u003cp\u003e\n If all the dates being compared are instances of {@code LocalDate},\n then the comparison will be entirely based on the date.\n If some dates being compared are in different chronologies, then the\n chronology is also considered, see {@link java.time.chrono.ChronoLocalDate#compareTo}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAfter","comment":"Checks if this date is after the specified date.\n \u003cp\u003e\n This checks to see if this date represents a point on the\n local time-line after the other date.\n \u003cpre\u003e\n   LocalDate a \u003d LocalDate.of(2012, 6, 30);\n   LocalDate b \u003d LocalDate.of(2012, 7, 1);\n   a.isAfter(b) \u003d\u003d false\n   a.isAfter(a) \u003d\u003d false\n   b.isAfter(a) \u003d\u003d true\n \u003c/pre\u003e\n \u003cp\u003e\n This method only considers the position of the two dates on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in {@link #compareTo(ChronoLocalDate)},\n but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBefore","comment":"Checks if this date is before the specified date.\n \u003cp\u003e\n This checks to see if this date represents a point on the\n local time-line before the other date.\n \u003cpre\u003e\n   LocalDate a \u003d LocalDate.of(2012, 6, 30);\n   LocalDate b \u003d LocalDate.of(2012, 7, 1);\n   a.isBefore(b) \u003d\u003d true\n   a.isBefore(a) \u003d\u003d false\n   b.isBefore(a) \u003d\u003d false\n \u003c/pre\u003e\n \u003cp\u003e\n This method only considers the position of the two dates on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in {@link #compareTo(ChronoLocalDate)},\n but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isEqual","comment":"Checks if this date is equal to the specified date.\n \u003cp\u003e\n This checks to see if this date represents the same point on the\n local time-line as the other date.\n \u003cpre\u003e\n   LocalDate a \u003d LocalDate.of(2012, 6, 30);\n   LocalDate b \u003d LocalDate.of(2012, 7, 1);\n   a.isEqual(b) \u003d\u003d false\n   a.isEqual(a) \u003d\u003d true\n   b.isEqual(a) \u003d\u003d false\n \u003c/pre\u003e\n \u003cp\u003e\n This method only considers the position of the two dates on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in {@link #compareTo(ChronoLocalDate)}\n but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDate)","flatSignature":"(ChronoLocalDate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDate","qualifiedName":"java.time.chrono.ChronoLocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this date is equal to another date.\n \u003cp\u003e\n Compares this {@code LocalDate} with another ensuring that the date is the same.\n \u003cp\u003e\n Only objects of type {@code LocalDate} are compared, other types return false.\n To compare the dates of two {@code TemporalAccessor} instances, including dates\n in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this date as a {@code String}, such as {@code 2007-12-03}.\n \u003cp\u003e\n The output will be in the ISO-8601 format {@code uuuu-MM-dd}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}