{"name":"Period","comment":"A date-based amount of time in the ISO-8601 calendar system,\n such as \u00272 years, 3 months and 4 days\u0027.\n \u003cp\u003e\n This class models a quantity or amount of time in terms of years, months and days.\n See {@link Duration} for the time-based equivalent to this class.\n \u003cp\u003e\n Durations and periods differ in their treatment of daylight savings time\n when added to {@link ZonedDateTime}. A {@code Duration} will add an exact\n number of seconds, thus a duration of one day is always exactly 24 hours.\n By contrast, a {@code Period} will add a conceptual day, trying to maintain\n the local time.\n \u003cp\u003e\n For example, consider adding a period of one day and a duration of one day to\n 18:00 on the evening before a daylight savings gap. The {@code Period} will add\n the conceptual day and result in a {@code ZonedDateTime} at 18:00 the following day.\n By contrast, the {@code Duration} will add exactly 24 hours, resulting in a\n {@code ZonedDateTime} at 19:00 the following day (assuming a one hour DST gap).\n \u003cp\u003e\n The supported units of a period are {@link ChronoUnit#YEARS YEARS},\n {@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.\n All three fields are always present, but may be set to zero.\n \u003cp\u003e\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today\u0027s rules for leap years are applied for all time.\n \u003cp\u003e\n The period is modeled as a directed amount of time, meaning that individual parts of the\n period may be negative.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code Period} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.chrono.ChronoPeriod","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"ZERO","comment":"A constant for a period of zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"ofYears","comment":"Obtains a {@code Period} representing a number of years.\n \u003cp\u003e\n The resulting period will have the specified years.\n The months and days units will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofMonths","comment":"Obtains a {@code Period} representing a number of months.\n \u003cp\u003e\n The resulting period will have the specified months.\n The years and days units will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofWeeks","comment":"Obtains a {@code Period} representing a number of weeks.\n \u003cp\u003e\n The resulting period will be day-based, with the amount of days\n equal to the number of weeks multiplied by 7.\n The years and months units will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofDays","comment":"Obtains a {@code Period} representing a number of days.\n \u003cp\u003e\n The resulting period will have the specified days.\n The years and months units will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains a {@code Period} representing a number of years, months and days.\n \u003cp\u003e\n This creates an instance based on years, months and days.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"months","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"days","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code Period} from a temporal amount.\n \u003cp\u003e\n This obtains a period based on the specified amount.\n A {@code TemporalAmount} represents an  amount of time, which may be\n date-based or time-based, which this factory extracts to a {@code Period}.\n \u003cp\u003e\n The conversion loops around the set of units from the amount and uses\n the {@link ChronoUnit#YEARS YEARS}, {@link ChronoUnit#MONTHS MONTHS}\n and {@link ChronoUnit#DAYS DAYS} units to create a period.\n If any other units are found then an exception is thrown.\n \u003cp\u003e\n If the amount is a {@code ChronoPeriod} then it must use the ISO chronology.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"amount","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains a {@code Period} from a text string such as {@code PnYnMnD}.\n \u003cp\u003e\n This will parse the string produced by {@code toString()} which is\n based on the ISO-8601 period formats {@code PnYnMnD} and {@code PnW}.\n \u003cp\u003e\n The string starts with an optional sign, denoted by the ASCII negative\n or positive symbol. If negative, the whole period is negated.\n The ASCII letter \"P\" is next in upper or lower case.\n There are then four sections, each consisting of a number and a suffix.\n At least one of the four sections must be present.\n The sections have suffixes in ASCII of \"Y\", \"M\", \"W\" and \"D\" for\n years, months, weeks and days, accepted in upper or lower case.\n The suffixes must occur in order.\n The number part of each section must consist of ASCII digits.\n The number may be prefixed by the ASCII negative or positive symbol.\n The number must parse to an {@code int}.\n \u003cp\u003e\n The leading plus/minus sign, and negative values for other units are\n not part of the ISO-8601 standard. In addition, ISO-8601 does not\n permit mixing between the {@code PnYnMnD} and {@code PnW} formats.\n Any week-based input is multiplied by 7 and treated as a number of days.\n \u003cp\u003e\n For example, the following are valid inputs:\n \u003cpre\u003e\n   \"P2Y\"             -- Period.ofYears(2)\n   \"P3M\"             -- Period.ofMonths(3)\n   \"P4W\"             -- Period.ofWeeks(4)\n   \"P5D\"             -- Period.ofDays(5)\n   \"P1Y2M3D\"         -- Period.of(1, 2, 3)\n   \"P1Y2M3W4D\"       -- Period.of(1, 2, 25)\n   \"P-1Y2M\"          -- Period.of(-1, 2, 0)\n   \"-P1Y2M\"          -- Period.of(-1, -2, 0)\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"between","comment":"Obtains a {@code Period} consisting of the number of years, months,\n and days between two dates.\n \u003cp\u003e\n The start date is included, but the end date is not.\n The period is calculated by removing complete months, then calculating\n the remaining number of days, adjusting to ensure that both have the same sign.\n The number of months is then split into years and months based on a 12 month year.\n A month is considered if the end day-of-month is greater than or equal to the start day-of-month.\n For example, from {@code 2010-01-15} to {@code 2011-03-18} is one year, two months and three days.\n \u003cp\u003e\n The result of this method can be a negative period if the end is before the start.\n The negative sign will be the same in each of year, month and day.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDate, java.time.LocalDate)","flatSignature":"(LocalDate, LocalDate)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"startDateInclusive","type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}}},{"name":"endDateExclusive","type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the requested unit.\n \u003cp\u003e\n This returns a value for each of the three supported units,\n {@link ChronoUnit#YEARS YEARS}, {@link ChronoUnit#MONTHS MONTHS} and\n {@link ChronoUnit#DAYS DAYS}.\n All other units throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getUnits","comment":"Gets the set of units supported by this period.\n \u003cp\u003e\n The supported units are {@link ChronoUnit#YEARS YEARS},\n {@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.\n They are returned in the order years, months, days.\n \u003cp\u003e\n This set can be used in conjunction with {@link #get(TemporalUnit)}\n to access the entire state of the period.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChronology","comment":"Gets the chronology of this period, which is the ISO calendar system.\n \u003cp\u003e\n The {@code Chronology} represents the calendar system in use.\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today\u0027s rules for leap years are applied for all time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IsoChronology","qualifiedName":"java.time.chrono.IsoChronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isZero","comment":"Checks if all three units of this period are zero.\n \u003cp\u003e\n A zero period has the value zero for the years, months and days units.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isNegative","comment":"Checks if any of the three units of this period are negative.\n \u003cp\u003e\n This checks whether the years, months or days units are less than zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getYears","comment":"Gets the amount of years of this period.\n \u003cp\u003e\n This returns the years unit.\n \u003cp\u003e\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonths","comment":"Gets the amount of months of this period.\n \u003cp\u003e\n This returns the months unit.\n \u003cp\u003e\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDays","comment":"Gets the amount of days of this period.\n \u003cp\u003e\n This returns the days unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withYears","comment":"Returns a copy of this period with the specified amount of years.\n \u003cp\u003e\n This sets the amount of the years unit in a copy of this period.\n The months and days units are unaffected.\n \u003cp\u003e\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMonths","comment":"Returns a copy of this period with the specified amount of months.\n \u003cp\u003e\n This sets the amount of the months unit in a copy of this period.\n The years and days units are unaffected.\n \u003cp\u003e\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDays","comment":"Returns a copy of this period with the specified amount of days.\n \u003cp\u003e\n This sets the amount of the days unit in a copy of this period.\n The years and months units are unaffected.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this period with the specified period added.\n \u003cp\u003e\n This operates separately on the years, months and days.\n No normalization is performed.\n \u003cp\u003e\n For example, \"1 year, 6 months and 3 days\" plus \"2 years, 2 months and 2 days\"\n returns \"3 years, 8 months and 5 days\".\n \u003cp\u003e\n The specified amount is typically an instance of {@code Period}.\n Other types are interpreted using {@link Period#from(TemporalAmount)}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusYears","comment":"Returns a copy of this period with the specified years added.\n \u003cp\u003e\n This adds the amount to the years unit in a copy of this period.\n The months and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"yearsToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMonths","comment":"Returns a copy of this period with the specified months added.\n \u003cp\u003e\n This adds the amount to the months unit in a copy of this period.\n The years and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" plus 2 months returns \"1 year, 8 months and 3 days\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"monthsToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusDays","comment":"Returns a copy of this period with the specified days added.\n \u003cp\u003e\n This adds the amount to the days unit in a copy of this period.\n The years and months units are unaffected.\n For example, \"1 year, 6 months and 3 days\" plus 2 days returns \"1 year, 6 months and 5 days\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daysToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this period with the specified period subtracted.\n \u003cp\u003e\n This operates separately on the years, months and days.\n No normalization is performed.\n \u003cp\u003e\n For example, \"1 year, 6 months and 3 days\" minus \"2 years, 2 months and 2 days\"\n returns \"-1 years, 4 months and 1 day\".\n \u003cp\u003e\n The specified amount is typically an instance of {@code Period}.\n Other types are interpreted using {@link Period#from(TemporalAmount)}.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusYears","comment":"Returns a copy of this period with the specified years subtracted.\n \u003cp\u003e\n This subtracts the amount from the years unit in a copy of this period.\n The months and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" minus 2 years returns \"-1 years, 6 months and 3 days\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"yearsToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMonths","comment":"Returns a copy of this period with the specified months subtracted.\n \u003cp\u003e\n This subtracts the amount from the months unit in a copy of this period.\n The years and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" minus 2 months returns \"1 year, 4 months and 3 days\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"monthsToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusDays","comment":"Returns a copy of this period with the specified days subtracted.\n \u003cp\u003e\n This subtracts the amount from the days unit in a copy of this period.\n The years and months units are unaffected.\n For example, \"1 year, 6 months and 3 days\" minus 2 days returns \"1 year, 6 months and 1 day\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daysToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"multipliedBy","comment":"Returns a new instance with each element in this period multiplied\n by the specified scalar.\n \u003cp\u003e\n This returns a period with each of the years, months and days units\n individually multiplied.\n For example, a period of \"2 years, -3 months and 4 days\" multiplied by\n 3 will return \"6 years, -9 months and 12 days\".\n No normalization is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"scalar","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"negated","comment":"Returns a new instance with each amount in this period negated.\n \u003cp\u003e\n This returns a period with each of the years, months and days units\n individually negated.\n For example, a period of \"2 years, -3 months and 4 days\" will be\n negated to \"-2 years, 3 months and -4 days\".\n No normalization is performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"normalized","comment":"Returns a copy of this period with the years and months normalized.\n \u003cp\u003e\n This normalizes the years and months units, leaving the days unit unchanged.\n The months unit is adjusted to have an absolute value less than 11,\n with the years unit being adjusted to compensate. For example, a period of\n \"1 Year and 15 months\" will be normalized to \"2 years and 3 months\".\n \u003cp\u003e\n The sign of the years and months units will be the same after normalization.\n For example, a period of \"1 year and -25 months\" will be normalized to\n \"-1 year and -1 month\".\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Period","qualifiedName":"java.time.Period","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toTotalMonths","comment":"Gets the total number of months in this period.\n \u003cp\u003e\n This returns the total number of months in the period by multiplying the\n number of years by 12 and adding the number of months.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addTo","comment":"Adds this period to the specified temporal object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with this period added.\n If the temporal has a chronology, it must be the ISO chronology.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#plus(TemporalAmount)}.\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.addTo(dateTime);\n   dateTime \u003d dateTime.plus(thisPeriod);\n \u003c/pre\u003e\n \u003cp\u003e\n The calculation operates as follows.\n First, the chronology of the temporal is checked to ensure it is ISO chronology or null.\n Second, if the months are zero, the years are added if non-zero, otherwise\n the combination of years and months is added if non-zero.\n Finally, any days are added.\n \u003cp\u003e\n This approach ensures that a partial period can be added to a partial date.\n For example, a period of years and/or months can be added to a {@code YearMonth},\n but a period including days cannot.\n The approach also adds years and months together when necessary, which ensures\n correct behaviour at the end of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtractFrom","comment":"Subtracts this period from the specified temporal object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with this period subtracted.\n If the temporal has a chronology, it must be the ISO chronology.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#minus(TemporalAmount)}.\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(thisPeriod);\n \u003c/pre\u003e\n \u003cp\u003e\n The calculation operates as follows.\n First, the chronology of the temporal is checked to ensure it is ISO chronology or null.\n Second, if the months are zero, the years are subtracted if non-zero, otherwise\n the combination of years and months is subtracted if non-zero.\n Finally, any days are subtracted.\n \u003cp\u003e\n This approach ensures that a partial period can be subtracted from a partial date.\n For example, a period of years and/or months can be subtracted from a {@code YearMonth},\n but a period including days cannot.\n The approach also subtracts years and months together when necessary, which ensures\n correct behaviour at the end of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this period is equal to another period.\n \u003cp\u003e\n The comparison is based on the type {@code Period} and each of the three amounts.\n To be equal, the years, months and days units must be individually equal.\n Note that this means that a period of \"15 Months\" is not equal to a period\n of \"1 Year and 3 Months\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this period.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this period as a {@code String}, such as {@code P6Y3M1D}.\n \u003cp\u003e\n The output will be in the ISO-8601 period format.\n A zero period will be represented as zero days, \u0027P0D\u0027.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}