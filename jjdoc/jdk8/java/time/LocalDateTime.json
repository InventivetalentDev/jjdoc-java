{"name":"LocalDateTime","comment":"A date-time without a time-zone in the ISO-8601 calendar system,\n such as {@code 2007-12-03T10:15:30}.\n \u003cp\u003e\n {@code LocalDateTime} is an immutable date-time object that represents a date-time,\n often viewed as year-month-day-hour-minute-second. Other date and time fields,\n such as day-of-year, day-of-week and week-of-year, can also be accessed.\n Time is represented to nanosecond precision.\n For example, the value \"2nd October 2007 at 13:45.30.123456789\" can be\n stored in a {@code LocalDateTime}.\n \u003cp\u003e\n This class does not store or represent a time-zone.\n Instead, it is a description of the date, as used for birthdays, combined with\n the local time as seen on a wall clock.\n It cannot represent an instant on the time-line without additional information\n such as an offset or time-zone.\n \u003cp\u003e\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today\u0027s rules for leap years are applied for all time.\n For most applications written today, the ISO-8601 rules are entirely suitable.\n However, any application that makes use of historical dates, and requires them\n to be accurate will find the ISO-8601 approach unsuitable.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code LocalDateTime} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.temporal.Temporal","java.time.temporal.TemporalAdjuster","java.time.chrono.ChronoLocalDateTime","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"MIN","comment":"The minimum supported {@code LocalDateTime}, \u0027-999999999-01-01T00:00:00\u0027.\n This is the local date-time of midnight at the start of the minimum date.\n This combines {@link LocalDate#MIN} and {@link LocalTime#MIN}.\n This could be used by an application as a \"far past\" date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isStatic":true},{"name":"MAX","comment":"The maximum supported {@code LocalDateTime}, \u0027+999999999-12-31T23:59:59.999999999\u0027.\n This is the local date-time just before midnight at the end of the maximum date.\n This combines {@link LocalDate#MAX} and {@link LocalTime#MAX}.\n This could be used by an application as a \"far future\" date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"now","comment":"Obtains the current date-time from the system clock in the default time-zone.\n \u003cp\u003e\n This will query the {@link Clock#systemDefaultZone() system clock} in the default\n time-zone to obtain the current date-time.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the system clock in the specified time-zone.\n \u003cp\u003e\n This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date-time.\n Specifying the time-zone avoids dependence on the default time-zone.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"now","comment":"Obtains the current date-time from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current date-time.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from year, month,\n day, hour and minute, setting the second and nanosecond to zero.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the specified year, month,\n day-of-month, hour and minute.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The second and nanosecond fields will be set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.time.Month, int, int, int)","flatSignature":"(int, Month, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from year, month,\n day, hour, minute and second, setting the nanosecond to zero.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the specified year, month,\n day-of-month, hour, minute and second.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The nanosecond field will be set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.time.Month, int, int, int, int)","flatSignature":"(int, Month, int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from year, month,\n day, hour, minute, second and nanosecond.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the specified year, month,\n day-of-month, hour, minute, second and nanosecond.\n The day must be valid for the year and month, otherwise an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.time.Month, int, int, int, int, int)","flatSignature":"(int, Month, int, int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from year, month,\n day, hour and minute, setting the second and nanosecond to zero.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the specified year, month,\n day-of-month, hour and minute.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The second and nanosecond fields will be set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int)","flatSignature":"(int, int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from year, month,\n day, hour, minute and second, setting the nanosecond to zero.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the specified year, month,\n day-of-month, hour, minute and second.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The nanosecond field will be set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from year, month,\n day, hour, minute, second and nanosecond.\n \u003cp\u003e\n This returns a {@code LocalDateTime} with the specified year, month,\n day-of-month, hour, minute, second and nanosecond.\n The day must be valid for the year and month, otherwise an exception will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code LocalDateTime} from a date and time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.LocalDate, java.time.LocalTime)","flatSignature":"(LocalDate, LocalTime)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}}},{"name":"time","type":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofInstant","comment":"Obtains an instance of {@code LocalDateTime} from an {@code Instant} and zone ID.\n \u003cp\u003e\n This creates a local date-time based on the specified instant.\n First, the offset from UTC/Greenwich is obtained using the zone ID and instant,\n which is simple as there is only one valid offset for each instant.\n Then, the instant and offset are used to calculate the local date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant, java.time.ZoneId)","flatSignature":"(Instant, ZoneId)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}},{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofEpochSecond","comment":"Obtains an instance of {@code LocalDateTime} using seconds from the\n epoch of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n This allows the {@link ChronoField#INSTANT_SECONDS epoch-second} field\n to be converted to a local date-time. This is primarily intended for\n low-level conversions rather than general application usage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int, java.time.ZoneOffset)","flatSignature":"(long, int, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"epochSecond","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code LocalDateTime} from a temporal object.\n \u003cp\u003e\n This obtains a local date-time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code LocalDateTime}.\n \u003cp\u003e\n The conversion extracts and combines the {@code LocalDate} and the\n {@code LocalTime} from the temporal object.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code LocalDateTime::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code LocalDateTime} from a text string such as {@code 2007-12-03T10:15:30}.\n \u003cp\u003e\n The string must represent a valid date-time and is parsed using\n {@link java.time.format.DateTimeFormatter#ISO_LOCAL_DATE_TIME}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code LocalDateTime} from a text string using a specific formatter.\n \u003cp\u003e\n The text is parsed using the formatter, returning a date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.time.format.DateTimeFormatter)","flatSignature":"(CharSequence, DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this date-time can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The supported fields are:\n \u003cul\u003e\n \u003cli\u003e{@code NANO_OF_SECOND}\n \u003cli\u003e{@code NANO_OF_DAY}\n \u003cli\u003e{@code MICRO_OF_SECOND}\n \u003cli\u003e{@code MICRO_OF_DAY}\n \u003cli\u003e{@code MILLI_OF_SECOND}\n \u003cli\u003e{@code MILLI_OF_DAY}\n \u003cli\u003e{@code SECOND_OF_MINUTE}\n \u003cli\u003e{@code SECOND_OF_DAY}\n \u003cli\u003e{@code MINUTE_OF_HOUR}\n \u003cli\u003e{@code MINUTE_OF_DAY}\n \u003cli\u003e{@code HOUR_OF_AMPM}\n \u003cli\u003e{@code CLOCK_HOUR_OF_AMPM}\n \u003cli\u003e{@code HOUR_OF_DAY}\n \u003cli\u003e{@code CLOCK_HOUR_OF_DAY}\n \u003cli\u003e{@code AMPM_OF_DAY}\n \u003cli\u003e{@code DAY_OF_WEEK}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}\n \u003cli\u003e{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}\n \u003cli\u003e{@code DAY_OF_MONTH}\n \u003cli\u003e{@code DAY_OF_YEAR}\n \u003cli\u003e{@code EPOCH_DAY}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_MONTH}\n \u003cli\u003e{@code ALIGNED_WEEK_OF_YEAR}\n \u003cli\u003e{@code MONTH_OF_YEAR}\n \u003cli\u003e{@code PROLEPTIC_MONTH}\n \u003cli\u003e{@code YEAR_OF_ERA}\n \u003cli\u003e{@code YEAR}\n \u003cli\u003e{@code ERA}\n \u003c/ul\u003e\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n If the unit is a {@link ChronoUnit} then the query is implemented here.\n The supported units are:\n \u003cul\u003e\n \u003cli\u003e{@code NANOS}\n \u003cli\u003e{@code MICROS}\n \u003cli\u003e{@code MILLIS}\n \u003cli\u003e{@code SECONDS}\n \u003cli\u003e{@code MINUTES}\n \u003cli\u003e{@code HOURS}\n \u003cli\u003e{@code HALF_DAYS}\n \u003cli\u003e{@code DAYS}\n \u003cli\u003e{@code WEEKS}\n \u003cli\u003e{@code MONTHS}\n \u003cli\u003e{@code YEARS}\n \u003cli\u003e{@code DECADES}\n \u003cli\u003e{@code CENTURIES}\n \u003cli\u003e{@code MILLENNIA}\n \u003cli\u003e{@code ERAS}\n \u003c/ul\u003e\n All other {@code ChronoUnit} instances will return false.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This date-time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this date-time as an {@code int}.\n \u003cp\u003e\n This queries this date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},\n {@code EPOCH_DAY} and {@code PROLEPTIC_MONTH} which are too large to fit in\n an {@code int} and throw a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this date-time as a {@code long}.\n \u003cp\u003e\n This queries this date-time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLocalDate","comment":"Gets the {@code LocalDate} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalDate} with the same year, month and day\n as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalDate","qualifiedName":"java.time.LocalDate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getYear","comment":"Gets the year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the year.\n \u003cp\u003e\n The year returned by this method is proleptic as per {@code get(YEAR)}.\n To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonthValue","comment":"Gets the month-of-year field from 1 to 12.\n \u003cp\u003e\n This method returns the month as an {@code int} from 1 to 12.\n Application code is frequently clearer if the enum {@link Month}\n is used by calling {@link #getMonth()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMonth","comment":"Gets the month-of-year field using the {@code Month} enum.\n \u003cp\u003e\n This method returns the enum {@link Month} for the month.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link Month#getValue() int value}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Month","qualifiedName":"java.time.Month","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfMonth","comment":"Gets the day-of-month field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-month.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfYear","comment":"Gets the day-of-year field.\n \u003cp\u003e\n This method returns the primitive {@code int} value for the day-of-year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDayOfWeek","comment":"Gets the day-of-week field, which is an enum {@code DayOfWeek}.\n \u003cp\u003e\n This method returns the enum {@link DayOfWeek} for the day-of-week.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the {@link DayOfWeek#getValue() int value}.\n \u003cp\u003e\n Additional information can be obtained from the {@code DayOfWeek}.\n This includes textual names of the values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DayOfWeek","qualifiedName":"java.time.DayOfWeek","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocalTime","comment":"Gets the {@code LocalTime} part of this date-time.\n \u003cp\u003e\n This returns a {@code LocalTime} with the same hour, minute, second and\n nanosecond as this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LocalTime","qualifiedName":"java.time.LocalTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHour","comment":"Gets the hour-of-day field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMinute","comment":"Gets the minute-of-hour field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSecond","comment":"Gets the second-of-minute field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNano","comment":"Gets the nano-of-second field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"with","comment":"Returns an adjusted copy of this date-time.\n \u003cp\u003e\n This returns a {@code LocalDateTime}, based on this one, with the date-time adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \u003cp\u003e\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n \u003cp\u003e\n A selection of common adjustments is provided in\n {@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the {@code TemporalAdjuster} interface,\n such as {@link Month} and {@link java.time.MonthDay MonthDay}.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \u003cp\u003e\n For example this code returns a date on the last day of July:\n \u003cpre\u003e\n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result \u003d localDateTime.with(JULY).with(lastDayOfMonth());\n \u003c/pre\u003e\n \u003cp\u003e\n The classes {@link LocalDate} and {@link LocalTime} implement {@code TemporalAdjuster},\n thus this method can be used to change the date, time or offset:\n \u003cpre\u003e\n  result \u003d localDateTime.with(date);\n  result \u003d localDateTime.with(time);\n \u003c/pre\u003e\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalAdjuster#adjustInto(Temporal)} method on the\n specified adjuster passing {@code this} as the argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns a copy of this date-time with the specified field set to a new value.\n \u003cp\u003e\n This returns a {@code LocalDateTime}, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \u003cp\u003e\n In some cases, changing the specified field can cause the resulting date-time to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the adjustment is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will behave as per\n the matching method on {@link LocalDate#with(TemporalField, long) LocalDate}\n or {@link LocalTime#with(TemporalField, long) LocalTime}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withYear","comment":"Returns a copy of this {@code LocalDateTime} with the year altered.\n \u003cp\u003e\n The time does not affect the calculation and will be the same in the result.\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMonth","comment":"Returns a copy of this {@code LocalDateTime} with the month-of-year altered.\n \u003cp\u003e\n The time does not affect the calculation and will be the same in the result.\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfMonth","comment":"Returns a copy of this {@code LocalDateTime} with the day-of-month altered.\n \u003cp\u003e\n If the resulting date-time is invalid, an exception is thrown.\n The time does not affect the calculation and will be the same in the result.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withDayOfYear","comment":"Returns a copy of this {@code LocalDateTime} with the day-of-year altered.\n \u003cp\u003e\n If the resulting date-time is invalid, an exception is thrown.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dayOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withHour","comment":"Returns a copy of this {@code LocalDateTime} with the hour-of-day altered.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hour","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withMinute","comment":"Returns a copy of this {@code LocalDateTime} with the minute-of-hour altered.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withSecond","comment":"Returns a copy of this {@code LocalDateTime} with the second-of-minute altered.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withNano","comment":"Returns a copy of this {@code LocalDateTime} with the nano-of-second altered.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanoOfSecond","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"truncatedTo","comment":"Returns a copy of this {@code LocalDateTime} with the time truncated.\n \u003cp\u003e\n Truncation returns a copy of the original date-time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit\n will set the second-of-minute and nano-of-second field to zero.\n \u003cp\u003e\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on {@link ChronoUnit} and\n {@link ChronoUnit#DAYS DAYS}. Other units throw an exception.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date-time with the specified amount added.\n \u003cp\u003e\n This returns a {@code LocalDateTime}, based on this one, with the specified amount added.\n The amount is typically {@link Period} or {@link Duration} but may be\n any other type implementing the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#addTo(Temporal)}. The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this date-time with the specified amount added.\n \u003cp\u003e\n This returns a {@code LocalDateTime}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoUnit} then the addition is implemented here.\n Date units are added as per {@link LocalDate#plus(long, TemporalUnit)}.\n Time units are added as per {@link LocalTime#plus(long, TemporalUnit)} with\n any overflow in days added equivalent to using {@link #plusDays(long)}.\n \u003cp\u003e\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusYears","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of years added.\n \u003cp\u003e\n This method adds the specified amount to the years field in three steps:\n \u003col\u003e\n \u003cli\u003eAdd the input years to the year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2008-02-29 (leap year) plus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMonths","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of months added.\n \u003cp\u003e\n This method adds the specified amount to the months field in three steps:\n \u003col\u003e\n \u003cli\u003eAdd the input months to the month-of-year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2007-03-31 plus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusWeeks","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of weeks added.\n \u003cp\u003e\n This method adds the specified amount in weeks to the days field incrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 plus one week would result in 2009-01-07.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusDays","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of days added.\n \u003cp\u003e\n This method adds the specified amount to the days field incrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2008-12-31 plus one day would result in 2009-01-01.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusHours","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of hours added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMinutes","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of minutes added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusSeconds","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of seconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusNanos","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date-time with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code LocalDateTime}, based on this one, with the specified amount subtracted.\n The amount is typically {@link Period} or {@link Duration} but may be\n any other type implementing the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this date-time with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code LocalDateTime}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusYears","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of years subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the years field in three steps:\n \u003col\u003e\n \u003cli\u003eSubtract the input years from the year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2008-02-29 (leap year) minus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"years","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMonths","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of months subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the months field in three steps:\n \u003col\u003e\n \u003cli\u003eSubtract the input months from the month-of-year field\u003c/li\u003e\n \u003cli\u003eCheck if the resulting date would be invalid\u003c/li\u003e\n \u003cli\u003eAdjust the day-of-month to the last valid day if necessary\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n For example, 2007-03-31 minus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"months","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusWeeks","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of weeks subtracted.\n \u003cp\u003e\n This method subtracts the specified amount in weeks from the days field decrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2009-01-07 minus one week would result in 2008-12-31.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weeks","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusDays","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of days subtracted.\n \u003cp\u003e\n This method subtracts the specified amount from the days field decrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \u003cp\u003e\n For example, 2009-01-01 minus one day would result in 2008-12-31.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"days","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusHours","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of hours subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMinutes","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of minutes subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusSeconds","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of seconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusNanos","comment":"Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LocalDateTime","qualifiedName":"java.time.LocalDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this date-time using the specified query.\n \u003cp\u003e\n This queries this date-time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have the same date and time as this object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the date and time changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n twice, passing {@link ChronoField#EPOCH_DAY} and\n {@link ChronoField#NANO_OF_DAY} as the fields.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisLocalDateTime.adjustInto(temporal);\n   temporal \u003d temporal.with(thisLocalDateTime);\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"Calculates the amount of time until another date-time in terms of the specified unit.\n \u003cp\u003e\n This calculates the amount of time between two {@code LocalDateTime}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified date-time.\n The result will be negative if the end is before the start.\n The {@code Temporal} passed to this method is converted to a\n {@code LocalDateTime} using {@link #from(TemporalAccessor)}.\n For example, the amount in days between two date-times can be calculated\n using {@code startDateTime.until(endDateTime, DAYS)}.\n \u003cp\u003e\n The calculation returns a whole number, representing the number of\n complete units between the two date-times.\n For example, the amount in months between 2012-06-15T00:00 and 2012-08-14T23:59\n will only be one month as it is one minute short of two months.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   amount \u003d start.until(end, MONTHS);\n   amount \u003d MONTHS.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.\n \u003cp\u003e\n The calculation is implemented in this method for {@link ChronoUnit}.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},\n {@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},\n {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.\n Other {@code ChronoUnit} values will throw an exception.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)","flatSignature":"(Temporal, TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats this date-time using the specified formatter.\n \u003cp\u003e\n This date-time will be passed to the formatter to produce a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DateTimeFormatter)","flatSignature":"(DateTimeFormatter)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"formatter","type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atOffset","comment":"Combines this date-time with an offset to create an {@code OffsetDateTime}.\n \u003cp\u003e\n This returns an {@code OffsetDateTime} formed from this date-time at the specified offset.\n All possible combinations of date-time and offset are valid.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atZone","comment":"Combines this date-time with a time-zone to create a {@code ZonedDateTime}.\n \u003cp\u003e\n This returns a {@code ZonedDateTime} formed from this date-time at the\n specified time-zone. The result will match this date-time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \u003cp\u003e\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the {@link ZoneRules rules} of the zone ID.\n\u003cp\u003e\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \u003cp\u003e\n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n \u003cp\u003e\n To obtain the later offset during an overlap, call\n {@link ZonedDateTime#withLaterOffsetAtOverlap()} on the result of this method.\n To throw an exception when there is a gap or overlap, use\n {@link ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this date-time to another date-time.\n \u003cp\u003e\n The comparison is primarily based on the date-time, from earliest to latest.\n It is \"consistent with equals\", as defined by {@link Comparable}.\n \u003cp\u003e\n If all the date-times being compared are instances of {@code LocalDateTime},\n then the comparison will be entirely based on the date-time.\n If some dates being compared are in different chronologies, then the\n chronology is also considered, see {@link ChronoLocalDateTime#compareTo}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAfter","comment":"Checks if this date-time is after the specified date-time.\n \u003cp\u003e\n This checks to see if this date-time represents a point on the\n local time-line after the other date-time.\n \u003cpre\u003e\n   LocalDate a \u003d LocalDateTime.of(2012, 6, 30, 12, 00);\n   LocalDate b \u003d LocalDateTime.of(2012, 7, 1, 12, 00);\n   a.isAfter(b) \u003d\u003d false\n   a.isAfter(a) \u003d\u003d false\n   b.isAfter(a) \u003d\u003d true\n \u003c/pre\u003e\n \u003cp\u003e\n This method only considers the position of the two date-times on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in {@link #compareTo(ChronoLocalDateTime)},\n but is the same approach as {@link ChronoLocalDateTime#timeLineOrder()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBefore","comment":"Checks if this date-time is before the specified date-time.\n \u003cp\u003e\n This checks to see if this date-time represents a point on the\n local time-line before the other date-time.\n \u003cpre\u003e\n   LocalDate a \u003d LocalDateTime.of(2012, 6, 30, 12, 00);\n   LocalDate b \u003d LocalDateTime.of(2012, 7, 1, 12, 00);\n   a.isBefore(b) \u003d\u003d true\n   a.isBefore(a) \u003d\u003d false\n   b.isBefore(a) \u003d\u003d false\n \u003c/pre\u003e\n \u003cp\u003e\n This method only considers the position of the two date-times on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in {@link #compareTo(ChronoLocalDateTime)},\n but is the same approach as {@link ChronoLocalDateTime#timeLineOrder()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isEqual","comment":"Checks if this date-time is equal to the specified date-time.\n \u003cp\u003e\n This checks to see if this date-time represents the same point on the\n local time-line as the other date-time.\n \u003cpre\u003e\n   LocalDate a \u003d LocalDateTime.of(2012, 6, 30, 12, 00);\n   LocalDate b \u003d LocalDateTime.of(2012, 7, 1, 12, 00);\n   a.isEqual(b) \u003d\u003d false\n   a.isEqual(a) \u003d\u003d true\n   b.isEqual(a) \u003d\u003d false\n \u003c/pre\u003e\n \u003cp\u003e\n This method only considers the position of the two date-times on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in {@link #compareTo(ChronoLocalDateTime)},\n but is the same approach as {@link ChronoLocalDateTime#timeLineOrder()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.ChronoLocalDateTime\u003c?\u003e)","flatSignature":"(ChronoLocalDateTime\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ChronoLocalDateTime","qualifiedName":"java.time.chrono.ChronoLocalDateTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this date-time is equal to another date-time.\n \u003cp\u003e\n Compares this {@code LocalDateTime} with another ensuring that the date-time is the same.\n Only objects of type {@code LocalDateTime} are compared, other types return false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this date-time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30}.\n \u003cp\u003e\n The output will be one of the following ISO-8601 formats:\n \u003cul\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSS}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSSSS}\u003c/li\u003e\n \u003cli\u003e{@code uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSSSSSSS}\u003c/li\u003e\n \u003c/ul\u003e\n The format used will be the shortest that outputs the full value of\n the time where the omitted parts are implied to be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}