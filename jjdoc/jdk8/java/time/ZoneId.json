{"name":"ZoneId","comment":"A time-zone ID, such as {@code Europe/Paris}.\n \u003cp\u003e\n A {@code ZoneId} is used to identify the rules used to convert between\n an {@link Instant} and a {@link LocalDateTime}.\n There are two distinct types of ID:\n \u003cul\u003e\n \u003cli\u003eFixed offsets - a fully resolved offset from UTC/Greenwich, that uses\n  the same offset for all local date-times\n \u003cli\u003eGeographical regions - an area where a specific set of rules for finding\n  the offset from UTC/Greenwich apply\n \u003c/ul\u003e\n Most fixed offsets are represented by {@link ZoneOffset}.\n Calling {@link #normalized()} on any {@code ZoneId} will ensure that a\n fixed offset ID will be represented as a {@code ZoneOffset}.\n \u003cp\u003e\n The actual rules, describing when and how the offset changes, are defined by {@link ZoneRules}.\n This class is simply an ID used to obtain the underlying rules.\n This approach is taken because rules are defined by governments and change\n frequently, whereas the ID is stable.\n \u003cp\u003e\n The distinction has other effects. Serializing the {@code ZoneId} will only send\n the ID, whereas serializing the rules sends the entire data set.\n Similarly, a comparison of two IDs only examines the ID, whereas\n a comparison of two rules examines the entire data set.\n\n \u003ch3\u003eTime-zone IDs\u003c/h3\u003e\n The ID is unique within the system.\n There are three types of ID.\n \u003cp\u003e\n The simplest type of ID is that from {@code ZoneOffset}.\n This consists of \u0027Z\u0027 and IDs starting with \u0027+\u0027 or \u0027-\u0027.\n \u003cp\u003e\n The next type of ID are offset-style IDs with some form of prefix,\n such as \u0027GMT+2\u0027 or \u0027UTC+01:00\u0027.\n The recognised prefixes are \u0027UTC\u0027, \u0027GMT\u0027 and \u0027UT\u0027.\n The offset is the suffix and will be normalized during creation.\n These IDs can be normalized to a {@code ZoneOffset} using {@code normalized()}.\n \u003cp\u003e\n The third type of ID are region-based IDs. A region-based ID must be of\n two or more characters, and not start with \u0027UTC\u0027, \u0027GMT\u0027, \u0027UT\u0027 \u0027+\u0027 or \u0027-\u0027.\n Region-based IDs are defined by configuration, see {@link ZoneRulesProvider}.\n The configuration focuses on providing the lookup from the ID to the\n underlying {@code ZoneRules}.\n \u003cp\u003e\n Time-zone rules are defined by governments and change frequently.\n There are a number of organizations, known here as groups, that monitor\n time-zone changes and collate them.\n The default group is the IANA Time Zone Database (TZDB).\n Other organizations include IATA (the airline industry body) and Microsoft.\n \u003cp\u003e\n Each group defines its own format for the region ID it provides.\n The TZDB group defines IDs such as \u0027Europe/London\u0027 or \u0027America/New_York\u0027.\n TZDB IDs take precedence over other groups.\n \u003cp\u003e\n It is strongly recommended that the group name is included in all IDs supplied by\n groups other than TZDB to avoid conflicts. For example, IATA airline time-zone\n region IDs are typically the same as the three letter airport code.\n However, the airport of Utrecht has the code \u0027UTC\u0027, which is obviously a conflict.\n The recommended format for region IDs from groups other than TZDB is \u0027group~region\u0027.\n Thus if IATA data were defined, Utrecht airport would be \u0027IATA~UTC\u0027.\n\n \u003ch3\u003eSerialization\u003c/h3\u003e\n This class can be serialized and stores the string zone ID in the external form.\n The {@code ZoneOffset} subclass uses a dedicated format that only stores the\n offset from UTC/Greenwich.\n \u003cp\u003e\n A {@code ZoneId} can be deserialized in a Java Runtime where the ID is unknown.\n For example, if a server-side Java Runtime has been updated with a new zone ID, but\n the client-side Java Runtime has not been updated. In this case, the {@code ZoneId}\n object will exist, and can be queried using {@code getId}, {@code equals},\n {@code hashCode}, {@code toString}, {@code getDisplayName} and {@code normalized}.\n However, any call to {@code getRules} will fail with {@code ZoneRulesException}.\n This approach is designed to allow a {@link ZonedDateTime} to be loaded and\n queried, but not modified, on a Java Runtime with incomplete time-zone information.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code ZoneId} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"SHORT_IDS","comment":"A map of zone overrides to enable the short time-zone names to be used.\n \u003cp\u003e\n Use of short zone IDs has been deprecated in {@code java.util.TimeZone}.\n This map allows the IDs to continue to be used via the\n {@link #of(String, Map)} factory method.\n \u003cp\u003e\n This map contains a mapping of the IDs that is in line with TZDB 2005r and\n later, where \u0027EST\u0027, \u0027MST\u0027 and \u0027HST\u0027 map to IDs which do not include daylight\n savings.\n \u003cp\u003e\n This maps as follows:\n \u003cul\u003e\n \u003cli\u003eEST - -05:00\u003c/li\u003e\n \u003cli\u003eHST - -10:00\u003c/li\u003e\n \u003cli\u003eMST - -07:00\u003c/li\u003e\n \u003cli\u003eACT - Australia/Darwin\u003c/li\u003e\n \u003cli\u003eAET - Australia/Sydney\u003c/li\u003e\n \u003cli\u003eAGT - America/Argentina/Buenos_Aires\u003c/li\u003e\n \u003cli\u003eART - Africa/Cairo\u003c/li\u003e\n \u003cli\u003eAST - America/Anchorage\u003c/li\u003e\n \u003cli\u003eBET - America/Sao_Paulo\u003c/li\u003e\n \u003cli\u003eBST - Asia/Dhaka\u003c/li\u003e\n \u003cli\u003eCAT - Africa/Harare\u003c/li\u003e\n \u003cli\u003eCNT - America/St_Johns\u003c/li\u003e\n \u003cli\u003eCST - America/Chicago\u003c/li\u003e\n \u003cli\u003eCTT - Asia/Shanghai\u003c/li\u003e\n \u003cli\u003eEAT - Africa/Addis_Ababa\u003c/li\u003e\n \u003cli\u003eECT - Europe/Paris\u003c/li\u003e\n \u003cli\u003eIET - America/Indiana/Indianapolis\u003c/li\u003e\n \u003cli\u003eIST - Asia/Kolkata\u003c/li\u003e\n \u003cli\u003eJST - Asia/Tokyo\u003c/li\u003e\n \u003cli\u003eMIT - Pacific/Apia\u003c/li\u003e\n \u003cli\u003eNET - Asia/Yerevan\u003c/li\u003e\n \u003cli\u003eNST - Pacific/Auckland\u003c/li\u003e\n \u003cli\u003ePLT - Asia/Karachi\u003c/li\u003e\n \u003cli\u003ePNT - America/Phoenix\u003c/li\u003e\n \u003cli\u003ePRT - America/Puerto_Rico\u003c/li\u003e\n \u003cli\u003ePST - America/Los_Angeles\u003c/li\u003e\n \u003cli\u003eSST - Pacific/Guadalcanal\u003c/li\u003e\n \u003cli\u003eVST - Asia/Ho_Chi_Minh\u003c/li\u003e\n \u003c/ul\u003e\n The map is unmodifiable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"systemDefault","comment":"Gets the system default time-zone.\n \u003cp\u003e\n This queries {@link TimeZone#getDefault()} to find the default time-zone\n and converts it to a {@code ZoneId}. If the system default time-zone is changed,\n then the result of this method will also change.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getAvailableZoneIds","comment":"Gets the set of available zone IDs.\n \u003cp\u003e\n This set includes the string form of all available region-based IDs.\n Offset-based zone IDs are not included in the returned set.\n The ID can be passed to {@link #of(String)} to create a {@code ZoneId}.\n \u003cp\u003e\n The set of zone IDs can increase over time, although in a typical application\n the set of IDs is fixed. Each call to this method is thread-safe.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code ZoneId} using its ID using a map\n of aliases to supplement the standard zone IDs.\n \u003cp\u003e\n Many users of time-zones use short abbreviations, such as PST for\n \u0027Pacific Standard Time\u0027 and PDT for \u0027Pacific Daylight Time\u0027.\n These abbreviations are not unique, and so cannot be used as IDs.\n This method allows a map of string to time-zone to be setup and reused\n within an application.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Map\u003cjava.lang.String, java.lang.String\u003e)","flatSignature":"(String, Map\u003cString, String\u003e)","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zoneId","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"aliasMap","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Obtains an instance of {@code ZoneId} from an ID ensuring that the\n ID is valid and available for use.\n \u003cp\u003e\n This method parses the ID producing a {@code ZoneId} or {@code ZoneOffset}.\n A {@code ZoneOffset} is returned if the ID is \u0027Z\u0027, or starts with \u0027+\u0027 or \u0027-\u0027.\n The result will always be a valid ID for which {@link ZoneRules} can be obtained.\n \u003cp\u003e\n Parsing matches the zone ID step by step as follows.\n \u003cul\u003e\n \u003cli\u003eIf the zone ID equals \u0027Z\u0027, the result is {@code ZoneOffset.UTC}.\n \u003cli\u003eIf the zone ID consists of a single letter, the zone ID is invalid\n  and {@code DateTimeException} is thrown.\n \u003cli\u003eIf the zone ID starts with \u0027+\u0027 or \u0027-\u0027, the ID is parsed as a\n  {@code ZoneOffset} using {@link ZoneOffset#of(String)}.\n \u003cli\u003eIf the zone ID equals \u0027GMT\u0027, \u0027UTC\u0027 or \u0027UT\u0027 then the result is a {@code ZoneId}\n  with the same ID and rules equivalent to {@code ZoneOffset.UTC}.\n \u003cli\u003eIf the zone ID starts with \u0027UTC+\u0027, \u0027UTC-\u0027, \u0027GMT+\u0027, \u0027GMT-\u0027, \u0027UT+\u0027 or \u0027UT-\u0027\n  then the ID is a prefixed offset-based ID. The ID is split in two, with\n  a two or three letter prefix and a suffix starting with the sign.\n  The suffix is parsed as a {@link ZoneOffset#of(String) ZoneOffset}.\n  The result will be a {@code ZoneId} with the specified UTC/GMT/UT prefix\n  and the normalized offset ID as per {@link ZoneOffset#getId()}.\n  The rules of the returned {@code ZoneId} will be equivalent to the\n  parsed {@code ZoneOffset}.\n \u003cli\u003eAll other IDs are parsed as region-based zone IDs. Region IDs must\n  match the regular expression \u003ccode\u003e[A-Za-z][A-Za-z0-9~/._+-]+\u003c/code\u003e\n  otherwise a {@code DateTimeException} is thrown. If the zone ID is not\n  in the configured set of IDs, {@code ZoneRulesException} is thrown.\n  The detailed format of the region ID depends on the group supplying the data.\n  The default set of data is supplied by the IANA Time Zone Database (TZDB).\n  This has region IDs of the form \u0027{area}/{city}\u0027, such as \u0027Europe/Paris\u0027 or \u0027America/New_York\u0027.\n  This is compatible with most IDs from {@link java.util.TimeZone}.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zoneId","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofOffset","comment":"Obtains an instance of {@code ZoneId} wrapping an offset.\n \u003cp\u003e\n If the prefix is \"GMT\", \"UTC\", or \"UT\" a {@code ZoneId}\n with the prefix and the non-zero offset is returned.\n If the prefix is empty {@code \"\"} the {@code ZoneOffset} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.time.ZoneOffset)","flatSignature":"(String, ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"prefix","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code ZoneId} from a temporal object.\n \u003cp\u003e\n This obtains a zone based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ZoneId}.\n \u003cp\u003e\n A {@code TemporalAccessor} represents some form of date and time information.\n This factory converts the arbitrary temporal object to an instance of {@code ZoneId}.\n \u003cp\u003e\n The conversion will try to obtain the zone in a way that favours region-based\n zones over offset-based zones using {@link TemporalQueries#zone()}.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code ZoneId::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getId","comment":"Gets the unique time-zone ID.\n \u003cp\u003e\n This ID uniquely defines this object.\n The format of an offset based ID is defined by {@link ZoneOffset#getId()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayName","comment":"Gets the textual representation of the zone, such as \u0027British Time\u0027 or\n \u0027+02:00\u0027.\n \u003cp\u003e\n This returns the textual name used to identify the time-zone ID,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \u003cp\u003e\n If no textual mapping is found then the {@link #getId() full ID} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.TextStyle, java.util.Locale)","flatSignature":"(TextStyle, Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"style","type":{"isPrimitive":false,"simpleName":"TextStyle","qualifiedName":"java.time.format.TextStyle","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRules","comment":"Gets the time-zone rules for this ID allowing calculations to be performed.\n \u003cp\u003e\n The rules provide the functionality associated with a time-zone,\n such as finding the offset for a given instant or local date-time.\n \u003cp\u003e\n A time-zone can be invalid if it is deserialized in a Java Runtime which\n does not have the same rules loaded as the Java Runtime that stored it.\n In this case, calling this method will throw a {@code ZoneRulesException}.\n \u003cp\u003e\n The rules are supplied by {@link ZoneRulesProvider}. An advanced provider may\n support dynamic updates to the rules without restarting the Java Runtime.\n If so, then the result of this method may change over time.\n Each individual call will be still remain thread-safe.\n \u003cp\u003e\n {@link ZoneOffset} will always return a set of rules where the offset never changes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneRules","qualifiedName":"java.time.zone.ZoneRules","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"normalized","comment":"Normalizes the time-zone ID, returning a {@code ZoneOffset} where possible.\n \u003cp\u003e\n The returns a normalized {@code ZoneId} that can be used in place of this ID.\n The result will have {@code ZoneRules} equivalent to those returned by this object,\n however the ID returned by {@code getId()} may be different.\n \u003cp\u003e\n The normalization checks if the rules of this {@code ZoneId} have a fixed offset.\n If they do, then the {@code ZoneOffset} equal to that offset is returned.\n Otherwise {@code this} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Checks if this time-zone ID is equal to another time-zone ID.\n \u003cp\u003e\n The comparison is based on the ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this time-zone ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this zone as a {@code String}, using the ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.time.ZoneOffset"],"enumConstants":[]}