{"name":"Instant","comment":"An instantaneous point on the time-line.\n \u003cp\u003e\n This class models a single instantaneous point on the time-line.\n This might be used to record event time-stamps in the application.\n \u003cp\u003e\n The range of an instant requires the storage of a number larger than a {@code long}.\n To achieve this, the class stores a {@code long} representing epoch-seconds and an\n {@code int} representing nanosecond-of-second, which will always be between 0 and 999,999,999.\n The epoch-seconds are measured from the standard Java epoch of {@code 1970-01-01T00:00:00Z}\n where instants after the epoch have positive values, and earlier instants have negative values.\n For both the epoch-second and nanosecond parts, a larger value is always later on the time-line\n than a smaller value.\n\n \u003ch3\u003eTime-scale\u003c/h3\u003e\n \u003cp\u003e\n The length of the solar day is the standard way that humans measure time.\n This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,\n forming a 86400 second day.\n \u003cp\u003e\n Modern timekeeping is based on atomic clocks which precisely define an SI second\n relative to the transitions of a Caesium atom. The length of an SI second was defined\n to be very close to the 86400th fraction of a day.\n \u003cp\u003e\n Unfortunately, as the Earth rotates the length of the day varies.\n In addition, over time the average length of the day is getting longer as the Earth slows.\n As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n The actual length of any given day and the amount by which the Earth is slowing\n are not predictable and can only be determined by measurement.\n The UT1 time-scale captures the accurate length of day, but is only available some\n time after the day has completed.\n \u003cp\u003e\n The UTC time-scale is a standard approach to bundle up all the additional fractions\n of a second from UT1 into whole seconds, known as \u003ci\u003eleap-seconds\u003c/i\u003e.\n A leap-second may be added or removed depending on the Earth\u0027s rotational changes.\n As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n necessary in order to keep the day aligned with the Sun.\n \u003cp\u003e\n The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.\n Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and\n alterations to the length of the notional second. As of 2012, discussions are underway\n to change the definition of UTC again, with the potential to remove leap seconds or\n introduce other changes.\n \u003cp\u003e\n Given the complexity of accurate timekeeping described above, this Java API defines\n its own time-scale, the \u003ci\u003eJava Time-Scale\u003c/i\u003e.\n \u003cp\u003e\n The Java Time-Scale divides each calendar day into exactly 86400\n subdivisions, known as seconds.  These seconds may differ from the\n SI second.  It closely matches the de facto international civil time\n scale, the definition of which changes from time to time.\n \u003cp\u003e\n The Java Time-Scale has slightly different definitions for different\n segments of the time-line, each based on the consensus international\n time scale that is used as the basis for civil time. Whenever the\n internationally-agreed time scale is modified or replaced, a new\n segment of the Java Time-Scale must be defined for it.  Each segment\n must meet these requirements:\n \u003cul\u003e\n \u003cli\u003ethe Java Time-Scale shall closely match the underlying international\n  civil time scale;\u003c/li\u003e\n \u003cli\u003ethe Java Time-Scale shall exactly match the international civil\n  time scale at noon each day;\u003c/li\u003e\n \u003cli\u003ethe Java Time-Scale shall have a precisely-defined relationship to\n  the international civil time scale.\u003c/li\u003e\n \u003c/ul\u003e\n There are currently, as of 2013, two segments in the Java time-scale.\n \u003cp\u003e\n For the segment from 1972-11-03 (exact boundary discussed below) until\n further notice, the consensus international time scale is UTC (with\n leap seconds).  In this segment, the Java Time-Scale is identical to\n \u003ca href\u003d\"http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/\"\u003eUTC-SLS\u003c/a\u003e.\n This is identical to UTC on days that do not have a leap second.\n On days that do have a leap second, the leap second is spread equally\n over the last 1000 seconds of the day, maintaining the appearance of\n exactly 86400 seconds per day.\n \u003cp\u003e\n For the segment prior to 1972-11-03, extending back arbitrarily far,\n the consensus international time scale is defined to be UT1, applied\n proleptically, which is equivalent to the (mean) solar time on the\n prime meridian (Greenwich). In this segment, the Java Time-Scale is\n identical to the consensus international time scale. The exact\n boundary between the two segments is the instant where UT1 \u003d UTC\n between 1972-11-03T00:00 and 1972-11-04T12:00.\n \u003cp\u003e\n Implementations of the Java time-scale using the JSR-310 API are not\n required to provide any clock that is sub-second accurate, or that\n progresses monotonically or smoothly. Implementations are therefore\n not required to actually perform the UTC-SLS slew or to otherwise be\n aware of leap seconds. JSR-310 does, however, require that\n implementations must document the approach they use when defining a\n clock representing the current instant.\n See {@link Clock} for details on the available clocks.\n \u003cp\u003e\n The Java time-scale is used for all date-time classes.\n This includes {@code Instant}, {@code LocalDate}, {@code LocalTime}, {@code OffsetDateTime},\n {@code ZonedDateTime} and {@code Duration}.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code Instant} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{},"package":"java.time","superclass":"java.lang.Object","interfaces":["java.time.temporal.Temporal","java.time.temporal.TemporalAdjuster","java.lang.Comparable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"EPOCH","comment":"Constant for the 1970-01-01T00:00:00Z epoch instant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isStatic":true},{"name":"MIN","comment":"The minimum supported {@code Instant}, \u0027-1000000000-01-01T00:00Z\u0027.\n This could be used by an application as a \"far past\" instant.\n \u003cp\u003e\n This is one year earlier than the minimum {@code LocalDateTime}.\n This provides sufficient values to handle the range of {@code ZoneOffset}\n which affect the instant in addition to the local date-time.\n The value is also chosen such that the value of the year fits in\n an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isStatic":true},{"name":"MAX","comment":"The maximum supported {@code Instant}, \u00271000000000-12-31T23:59:59.999999999Z\u0027.\n This could be used by an application as a \"far future\" instant.\n \u003cp\u003e\n This is one year later than the maximum {@code LocalDateTime}.\n This provides sufficient values to handle the range of {@code ZoneOffset}\n which affect the instant in addition to the local date-time.\n The value is also chosen such that the value of the year fits in\n an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"now","comment":"Obtains the current instant from the system clock.\n \u003cp\u003e\n This will query the {@link Clock#systemUTC() system UTC clock} to\n obtain the current instant.\n \u003cp\u003e\n Using this method will prevent the ability to use an alternate time-source for\n testing because the clock is effectively hard-coded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"now","comment":"Obtains the current instant from the specified clock.\n \u003cp\u003e\n This will query the specified clock to obtain the current time.\n \u003cp\u003e\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using {@link Clock dependency injection}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Clock)","flatSignature":"(Clock)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"clock","type":{"isPrimitive":false,"simpleName":"Clock","qualifiedName":"java.time.Clock","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofEpochSecond","comment":"Obtains an instance of {@code Instant} using seconds from the\n epoch of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n The nanosecond field is set to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"epochSecond","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofEpochSecond","comment":"Obtains an instance of {@code Instant} using seconds from the\n epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.\n \u003cp\u003e\n This method allows an arbitrary number of nanoseconds to be passed in.\n The factory will alter the values of the second and nanosecond in order\n to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n For example, the following will result in the exactly the same instant:\n \u003cpre\u003e\n  Instant.ofEpochSecond(3, 1);\n  Instant.ofEpochSecond(4, -999_999_999);\n  Instant.ofEpochSecond(2, 1000_000_001);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"epochSecond","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanoAdjustment","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofEpochMilli","comment":"Obtains an instance of {@code Instant} using milliseconds from the\n epoch of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n The seconds and nanoseconds are extracted from the specified milliseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"epochMilli","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code Instant} from a temporal object.\n \u003cp\u003e\n This obtains an instant based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code Instant}.\n \u003cp\u003e\n The conversion extracts the {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS}\n and {@link ChronoField#NANO_OF_SECOND NANO_OF_SECOND} fields.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code Instant::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Obtains an instance of {@code Instant} from a text string such as\n {@code 2007-12-03T10:15:30.00Z}.\n \u003cp\u003e\n The string must represent a valid instant in UTC and is parsed using\n {@link DateTimeFormatter#ISO_INSTANT}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this instant can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range},\n {@link #get(TemporalField) get} and {@link #with(TemporalField, long)}\n methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The supported fields are:\n \u003cul\u003e\n \u003cli\u003e{@code NANO_OF_SECOND}\n \u003cli\u003e{@code MICRO_OF_SECOND}\n \u003cli\u003e{@code MILLI_OF_SECOND}\n \u003cli\u003e{@code INSTANT_SECONDS}\n \u003c/ul\u003e\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified unit is supported.\n \u003cp\u003e\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the {@link #plus(long, TemporalUnit)} and\n {@link #minus(long, TemporalUnit) minus} methods will throw an exception.\n \u003cp\u003e\n If the unit is a {@link ChronoUnit} then the query is implemented here.\n The supported units are:\n \u003cul\u003e\n \u003cli\u003e{@code NANOS}\n \u003cli\u003e{@code MICROS}\n \u003cli\u003e{@code MILLIS}\n \u003cli\u003e{@code SECONDS}\n \u003cli\u003e{@code MINUTES}\n \u003cli\u003e{@code HOURS}\n \u003cli\u003e{@code HALF_DAYS}\n \u003cli\u003e{@code DAYS}\n \u003c/ul\u003e\n All other {@code ChronoUnit} instances will return false.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This instant is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this instant as an {@code int}.\n \u003cp\u003e\n This queries this instant for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time, except {@code INSTANT_SECONDS} which is too\n large to fit in an {@code int} and throws a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this instant as a {@code long}.\n \u003cp\u003e\n This queries this instant for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return valid\n values based on this date-time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getEpochSecond","comment":"Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n The epoch second count is a simple incrementing count of seconds where\n second 0 is 1970-01-01T00:00:00Z.\n The nanosecond part of the day is returned by {@code getNanosOfSecond}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getNano","comment":"Gets the number of nanoseconds, later along the time-line, from the start\n of the second.\n \u003cp\u003e\n The nanosecond-of-second value measures the total number of nanoseconds from\n the second returned by {@code getEpochSecond}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"with","comment":"Returns an adjusted copy of this instant.\n \u003cp\u003e\n This returns an {@code Instant}, based on this one, with the instant adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalAdjuster#adjustInto(Temporal)} method on the\n specified adjuster passing {@code this} as the argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAdjuster)","flatSignature":"(TemporalAdjuster)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"adjuster","type":{"isPrimitive":false,"simpleName":"TemporalAdjuster","qualifiedName":"java.time.temporal.TemporalAdjuster","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"with","comment":"Returns a copy of this instant with the specified field set to a new value.\n \u003cp\u003e\n This returns an {@code Instant}, based on this one, with the value\n for the specified field changed.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the adjustment is implemented here.\n The supported fields behave as follows:\n \u003cul\u003e\n \u003cli\u003e{@code NANO_OF_SECOND} -\n  Returns an {@code Instant} with the specified nano-of-second.\n  The epoch-second will be unchanged.\n \u003cli\u003e{@code MICRO_OF_SECOND} -\n  Returns an {@code Instant} with the nano-of-second replaced by the specified\n  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.\n \u003cli\u003e{@code MILLI_OF_SECOND} -\n  Returns an {@code Instant} with the nano-of-second replaced by the specified\n  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.\n \u003cli\u003e{@code INSTANT_SECONDS} -\n  Returns an {@code Instant} with the specified epoch-second.\n  The nano-of-second will be unchanged.\n \u003c/ul\u003e\n \u003cp\u003e\n In all cases, if the new value is outside the valid range of values for the field\n then a {@code DateTimeException} will be thrown.\n \u003cp\u003e\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField, long)","flatSignature":"(TemporalField, long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}},{"name":"newValue","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"truncatedTo","comment":"Returns a copy of this {@code Instant} truncated to the specified unit.\n \u003cp\u003e\n Truncating the instant returns a copy of the original with fields\n smaller than the specified unit set to zero.\n The fields are calculated on the basis of using a UTC offset as seen\n in {@code toString}.\n For example, truncating with the {@link ChronoUnit#MINUTES MINUTES} unit will\n round down to the nearest minute, setting the seconds and nanoseconds to zero.\n \u003cp\u003e\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on {@link ChronoUnit} and\n {@link ChronoUnit#DAYS DAYS}. Other units throw an exception.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalUnit)","flatSignature":"(TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this instant with the specified amount added.\n \u003cp\u003e\n This returns an {@code Instant}, based on this one, with the specified amount added.\n The amount is typically {@link Duration} but may be any other type implementing\n the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#addTo(Temporal)}. The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plus","comment":"Returns a copy of this instant with the specified amount added.\n \u003cp\u003e\n This returns an {@code Instant}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoUnit} then the addition is implemented here.\n The supported fields behave as follows:\n \u003cul\u003e\n \u003cli\u003e{@code NANOS} -\n  Returns a {@code Instant} with the specified number of nanoseconds added.\n  This is equivalent to {@link #plusNanos(long)}.\n \u003cli\u003e{@code MICROS} -\n  Returns a {@code Instant} with the specified number of microseconds added.\n  This is equivalent to {@link #plusNanos(long)} with the amount\n  multiplied by 1,000.\n \u003cli\u003e{@code MILLIS} -\n  Returns a {@code Instant} with the specified number of milliseconds added.\n  This is equivalent to {@link #plusNanos(long)} with the amount\n  multiplied by 1,000,000.\n \u003cli\u003e{@code SECONDS} -\n  Returns a {@code Instant} with the specified number of seconds added.\n  This is equivalent to {@link #plusSeconds(long)}.\n \u003cli\u003e{@code MINUTES} -\n  Returns a {@code Instant} with the specified number of minutes added.\n  This is equivalent to {@link #plusSeconds(long)} with the amount\n  multiplied by 60.\n \u003cli\u003e{@code HOURS} -\n  Returns a {@code Instant} with the specified number of hours added.\n  This is equivalent to {@link #plusSeconds(long)} with the amount\n  multiplied by 3,600.\n \u003cli\u003e{@code HALF_DAYS} -\n  Returns a {@code Instant} with the specified number of half-days added.\n  This is equivalent to {@link #plusSeconds(long)} with the amount\n  multiplied by 43,200 (12 hours).\n \u003cli\u003e{@code DAYS} -\n  Returns a {@code Instant} with the specified number of days added.\n  This is equivalent to {@link #plusSeconds(long)} with the amount\n  multiplied by 86,400 (24 hours).\n \u003c/ul\u003e\n \u003cp\u003e\n All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusSeconds","comment":"Returns a copy of this instant with the specified duration in seconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"secondsToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusMillis","comment":"Returns a copy of this instant with the specified duration in milliseconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millisToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"plusNanos","comment":"Returns a copy of this instant with the specified duration in nanoseconds added.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanosToAdd","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this instant with the specified amount subtracted.\n \u003cp\u003e\n This returns an {@code Instant}, based on this one, with the specified amount subtracted.\n The amount is typically {@link Duration} but may be any other type implementing\n the {@link TemporalAmount} interface.\n \u003cp\u003e\n The calculation is delegated to the amount object by calling\n {@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAmount)","flatSignature":"(TemporalAmount)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":false,"simpleName":"TemporalAmount","qualifiedName":"java.time.temporal.TemporalAmount","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minus","comment":"Returns a copy of this instant with the specified amount subtracted.\n \u003cp\u003e\n This returns a {@code Instant}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \u003cp\u003e\n This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.time.temporal.TemporalUnit)","flatSignature":"(long, TemporalUnit)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"amountToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusSeconds","comment":"Returns a copy of this instant with the specified duration in seconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"secondsToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusMillis","comment":"Returns a copy of this instant with the specified duration in milliseconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millisToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"minusNanos","comment":"Returns a copy of this instant with the specified duration in nanoseconds subtracted.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanosToSubtract","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this instant using the specified query.\n \u003cp\u003e\n This queries this instant using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have this instant.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the instant changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n twice, passing {@link ChronoField#INSTANT_SECONDS} and\n {@link ChronoField#NANO_OF_SECOND} as the fields.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisInstant.adjustInto(temporal);\n   temporal \u003d temporal.with(thisInstant);\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"until","comment":"Calculates the amount of time until another instant in terms of the specified unit.\n \u003cp\u003e\n This calculates the amount of time between two {@code Instant}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified instant.\n The result will be negative if the end is before the start.\n The calculation returns a whole number, representing the number of\n complete units between the two instants.\n The {@code Temporal} passed to this method is converted to a\n {@code Instant} using {@link #from(TemporalAccessor)}.\n For example, the amount in days between two dates can be calculated\n using {@code startInstant.until(endInstant, SECONDS)}.\n \u003cp\u003e\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n \u003cpre\u003e\n   // these two lines are equivalent\n   amount \u003d start.until(end, SECONDS);\n   amount \u003d SECONDS.between(start, end);\n \u003c/pre\u003e\n The choice should be made based on which makes the code more readable.\n \u003cp\u003e\n The calculation is implemented in this method for {@link ChronoUnit}.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS}, {@code HALF_DAYS} and {@code DAYS}\n are supported. Other {@code ChronoUnit} values will throw an exception.\n \u003cp\u003e\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)","flatSignature":"(Temporal, TemporalUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endExclusive","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TemporalUnit","qualifiedName":"java.time.temporal.TemporalUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atOffset","comment":"Combines this instant with an offset to create an {@code OffsetDateTime}.\n \u003cp\u003e\n This returns an {@code OffsetDateTime} formed from this instant at the\n specified offset from UTC/Greenwich. An exception will be thrown if the\n instant is too large to fit into an offset date-time.\n \u003cp\u003e\n This method is equivalent to\n {@link OffsetDateTime#ofInstant(Instant, ZoneId) OffsetDateTime.ofInstant(this, offset)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":false,"simpleName":"OffsetDateTime","qualifiedName":"java.time.OffsetDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atZone","comment":"Combines this instant with a time-zone to create a {@code ZonedDateTime}.\n \u003cp\u003e\n This returns an {@code ZonedDateTime} formed from this instant at the\n specified time-zone. An exception will be thrown if the instant is too\n large to fit into a zoned date-time.\n \u003cp\u003e\n This method is equivalent to\n {@link ZonedDateTime#ofInstant(Instant, ZoneId) ZonedDateTime.ofInstant(this, zone)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toEpochMilli","comment":"Converts this instant to the number of milliseconds from the epoch\n of 1970-01-01T00:00:00Z.\n \u003cp\u003e\n If this instant represents a point on the time-line too far in the future\n or past to fit in a {@code long} milliseconds, then an exception is thrown.\n \u003cp\u003e\n If this instant has greater than millisecond precision, then the conversion\n will drop any excess precision information as though the amount in nanoseconds\n was subject to integer division by one million.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares this instant to the specified instant.\n \u003cp\u003e\n The comparison is based on the time-line position of the instants.\n It is \"consistent with equals\", as defined by {@link Comparable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant)","flatSignature":"(Instant)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherInstant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAfter","comment":"Checks if this instant is after the specified instant.\n \u003cp\u003e\n The comparison is based on the time-line position of the instants.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant)","flatSignature":"(Instant)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherInstant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBefore","comment":"Checks if this instant is before the specified instant.\n \u003cp\u003e\n The comparison is based on the time-line position of the instants.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant)","flatSignature":"(Instant)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherInstant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this instant is equal to the specified instant.\n \u003cp\u003e\n The comparison is based on the time-line position of the instants.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"otherInstant","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this instant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"A string representation of this instant using ISO-8601 representation.\n \u003cp\u003e\n The format used is the same as {@link DateTimeFormatter#ISO_INSTANT}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}