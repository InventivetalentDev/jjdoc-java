{"name":"ZoneOffset","comment":"A time-zone offset from Greenwich/UTC, such as {@code +02:00}.\n \u003cp\u003e\n A time-zone offset is the amount of time that a time-zone differs from Greenwich/UTC.\n This is usually a fixed number of hours and minutes.\n \u003cp\u003e\n Different parts of the world have different time-zone offsets.\n The rules for how offsets vary by place and time of year are captured in the\n {@link ZoneId} class.\n \u003cp\u003e\n For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours\n ahead in summer. The {@code ZoneId} instance for Paris will reference two\n {@code ZoneOffset} instances - a {@code +01:00} instance for winter,\n and a {@code +02:00} instance for summer.\n \u003cp\u003e\n In 2008, time-zone offsets around the world extended from -12:00 to +14:00.\n To prevent any problems with that range being extended, yet still provide\n validation, the range of offsets is restricted to -18:00 to 18:00 inclusive.\n \u003cp\u003e\n This class is designed for use with the ISO calendar system.\n The fields of hours, minutes and seconds make assumptions that are valid for the\n standard ISO definitions of those fields. This class may be used with other\n calendar systems providing the definition of the time fields matches those\n of the ISO calendar system.\n \u003cp\u003e\n Instances of {@code ZoneOffset} must be compared using {@link #equals}.\n Implementations may choose to cache certain common offsets, however\n applications must not rely on such caching.\n\n \u003cp\u003e\n This is a \u003ca href\u003d\"{@docRoot}/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e\n class; use of identity-sensitive operations (including reference equality\n ({@code \u003d\u003d}), identity hash code, or synchronization) on instances of\n {@code ZoneOffset} may have unpredictable results and should be avoided.\n The {@code equals} method should be used for comparisons.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{},"package":"java.time","superclass":"java.time.ZoneId","interfaces":["java.time.temporal.TemporalAccessor","java.time.temporal.TemporalAdjuster","java.lang.Comparable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"UTC","comment":"The time-zone offset for UTC, with an ID of \u0027Z\u0027.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isStatic":true},{"name":"MIN","comment":"Constant for the maximum supported offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isStatic":true},{"name":"MAX","comment":"Constant for the maximum supported offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"of","comment":"Obtains an instance of {@code ZoneOffset} using the ID.\n \u003cp\u003e\n This method parses the string ID of a {@code ZoneOffset} to\n return an instance. The parsing accepts all the formats generated by\n {@link #getId()}, plus some additional formats:\n \u003cul\u003e\n \u003cli\u003e{@code Z} - for UTC\n \u003cli\u003e{@code +h}\n \u003cli\u003e{@code +hh}\n \u003cli\u003e{@code +hh:mm}\n \u003cli\u003e{@code -hh:mm}\n \u003cli\u003e{@code +hhmm}\n \u003cli\u003e{@code -hhmm}\n \u003cli\u003e{@code +hh:mm:ss}\n \u003cli\u003e{@code -hh:mm:ss}\n \u003cli\u003e{@code +hhmmss}\n \u003cli\u003e{@code -hhmmss}\n \u003c/ul\u003e\n Note that \u0026plusmn; means either the plus or minus symbol.\n \u003cp\u003e\n The ID of the returned offset will be normalized to one of the formats\n described by {@link #getId()}.\n \u003cp\u003e\n The maximum supported range is from +18:00 to -18:00 inclusive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"offsetId","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofHours","comment":"Obtains an instance of {@code ZoneOffset} using an offset in hours.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofHoursMinutes","comment":"Obtains an instance of {@code ZoneOffset} using an offset in\n hours and minutes.\n \u003cp\u003e\n The sign of the hours and minutes components must match.\n Thus, if the hours is negative, the minutes must be negative or zero.\n If the hours is zero, the minutes may be positive, negative or zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minutes","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofHoursMinutesSeconds","comment":"Obtains an instance of {@code ZoneOffset} using an offset in\n hours, minutes and seconds.\n \u003cp\u003e\n The sign of the hours, minutes and seconds components must match.\n Thus, if the hours is negative, the minutes and seconds must be negative or zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minutes","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"seconds","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code ZoneOffset} from a temporal object.\n \u003cp\u003e\n This obtains an offset based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ZoneOffset}.\n \u003cp\u003e\n A {@code TemporalAccessor} represents some form of date and time information.\n This factory converts the arbitrary temporal object to an instance of {@code ZoneOffset}.\n \u003cp\u003e\n The conversion uses the {@link TemporalQueries#offset()} query, which relies\n on extracting the {@link ChronoField#OFFSET_SECONDS OFFSET_SECONDS} field.\n \u003cp\u003e\n This method matches the signature of the functional interface {@link TemporalQuery}\n allowing it to be used as a query via method reference, {@code ZoneOffset::from}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofTotalSeconds","comment":"Obtains an instance of {@code ZoneOffset} specifying the total offset in seconds\n \u003cp\u003e\n The offset must be in the range {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"totalSeconds","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTotalSeconds","comment":"Gets the total zone offset in seconds.\n \u003cp\u003e\n This is the primary way to access the offset amount.\n It returns the total of the hours, minutes and seconds fields as a\n single offset that can be added to a time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getId","comment":"Gets the normalized zone offset ID.\n \u003cp\u003e\n The ID is minor variation to the standard ISO-8601 formatted string\n for the offset. There are three formats:\n \u003cul\u003e\n \u003cli\u003e{@code Z} - for UTC (ISO-8601)\n \u003cli\u003e{@code +hh:mm} or {@code -hh:mm} - if the seconds are zero (ISO-8601)\n \u003cli\u003e{@code +hh:mm:ss} or {@code -hh:mm:ss} - if the seconds are non-zero (not ISO-8601)\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRules","comment":"Gets the associated time-zone rules.\n \u003cp\u003e\n The rules will always return this offset when queried.\n The implementation class is immutable, thread-safe and serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneRules","qualifiedName":"java.time.zone.ZoneRules","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSupported","comment":"Checks if the specified field is supported.\n \u003cp\u003e\n This checks if this offset can be queried for the specified field.\n If false, then calling the {@link #range(TemporalField) range} and\n {@link #get(TemporalField) get} methods will throw an exception.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@code OFFSET_SECONDS} field returns true.\n All other {@code ChronoField} instances will return false.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Gets the range of valid values for the specified field.\n \u003cp\u003e\n The range object expresses the minimum and maximum valid values for a field.\n This offset is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@link #isSupported(TemporalField) supported fields} will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":false,"simpleName":"ValueRange","qualifiedName":"java.time.temporal.ValueRange","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Gets the value of the specified field from this offset as an {@code int}.\n \u003cp\u003e\n This queries this offset for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@code OFFSET_SECONDS} field returns the value of the offset.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of the specified field from this offset as a {@code long}.\n \u003cp\u003e\n This queries this offset for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \u003cp\u003e\n If the field is a {@link ChronoField} then the query is implemented here.\n The {@code OFFSET_SECONDS} field returns the value of the offset.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n \u003cp\u003e\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField)","flatSignature":"(TemporalField)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"query","comment":"Queries this offset using the specified query.\n \u003cp\u003e\n This queries this offset using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \u003cp\u003e\n The result of this method is obtained by invoking the\n {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n specified query passing {@code this} as the argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003cR\u003e)","flatSignature":"(TemporalQuery\u003cR\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"adjustInto","comment":"Adjusts the specified temporal object to have the same offset as this object.\n \u003cp\u003e\n This returns a temporal object of the same observable type as the input\n with the offset changed to be the same as this.\n \u003cp\u003e\n The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}\n passing {@link ChronoField#OFFSET_SECONDS} as the field.\n \u003cp\u003e\n In most cases, it is clearer to reverse the calling pattern by using\n {@link Temporal#with(TemporalAdjuster)}:\n \u003cpre\u003e\n   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisOffset.adjustInto(temporal);\n   temporal \u003d temporal.with(thisOffset);\n \u003c/pre\u003e\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.Temporal)","flatSignature":"(Temporal)","returnType":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"Temporal","qualifiedName":"java.time.temporal.Temporal","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this offset to another offset in descending order.\n \u003cp\u003e\n The offsets are compared in the order that they occur for the same time\n of day around the world. Thus, an offset of {@code +10:00} comes before an\n offset of {@code +09:00} and so on down to {@code -18:00}.\n \u003cp\u003e\n The comparison is \"consistent with equals\", as defined by {@link Comparable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneOffset)","flatSignature":"(ZoneOffset)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"ZoneOffset","qualifiedName":"java.time.ZoneOffset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks if this offset is equal to another offset.\n \u003cp\u003e\n The comparison is based on the amount of the offset in seconds.\n This is equivalent to a comparison by ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"A hash code for this offset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Outputs this offset as a {@code String}, using the normalized ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}