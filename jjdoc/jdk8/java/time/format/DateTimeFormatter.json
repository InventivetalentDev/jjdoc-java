{"name":"DateTimeFormatter","comment":"Formatter for printing and parsing date-time objects.\n \u003cp\u003e\n This class provides the main application entry point for printing and parsing\n and provides common implementations of {@code DateTimeFormatter}:\n \u003cul\u003e\n \u003cli\u003eUsing predefined constants, such as {@link #ISO_LOCAL_DATE}\u003c/li\u003e\n \u003cli\u003eUsing pattern letters, such as {@code uuuu-MMM-dd}\u003c/li\u003e\n \u003cli\u003eUsing localized styles, such as {@code long} or {@code medium}\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n More complex formatters are provided by\n {@link DateTimeFormatterBuilder DateTimeFormatterBuilder}.\n\n \u003cp\u003e\n The main date-time classes provide two methods - one for formatting,\n {@code format(DateTimeFormatter formatter)}, and one for parsing,\n {@code parse(CharSequence text, DateTimeFormatter formatter)}.\n \u003cp\u003eFor example:\n \u003cblockquote\u003e\u003cpre\u003e\n  LocalDate date \u003d LocalDate.now();\n  String text \u003d date.format(formatter);\n  LocalDate parsedDate \u003d LocalDate.parse(text, formatter);\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n In addition to the format, formatters can be created with desired Locale,\n Chronology, ZoneId, and DecimalStyle.\n \u003cp\u003e\n The {@link #withLocale withLocale} method returns a new formatter that\n overrides the locale. The locale affects some aspects of formatting and\n parsing. For example, the {@link #ofLocalizedDate ofLocalizedDate} provides a\n formatter that uses the locale specific date format.\n \u003cp\u003e\n The {@link #withChronology withChronology} method returns a new formatter\n that overrides the chronology. If overridden, the date-time value is\n converted to the chronology before formatting. During parsing the date-time\n value is converted to the chronology before it is returned.\n \u003cp\u003e\n The {@link #withZone withZone} method returns a new formatter that overrides\n the zone. If overridden, the date-time value is converted to a ZonedDateTime\n with the requested ZoneId before formatting. During parsing the ZoneId is\n applied before the value is returned.\n \u003cp\u003e\n The {@link #withDecimalStyle withDecimalStyle} method returns a new formatter that\n overrides the {@link DecimalStyle}. The DecimalStyle symbols are used for\n formatting and parsing.\n \u003cp\u003e\n Some applications may need to use the older {@link Format java.text.Format}\n class for formatting. The {@link #toFormat()} method returns an\n implementation of {@code java.text.Format}.\n\n \u003ch3 id\u003d\"predefined\"\u003ePredefined Formatters\u003c/h3\u003e\n \u003ctable summary\u003d\"Predefined Formatters\" cellpadding\u003d\"2\" cellspacing\u003d\"3\" border\u003d\"0\" \u003e\n \u003cthead\u003e\n \u003ctr class\u003d\"tableSubHeadingColor\"\u003e\n \u003cth class\u003d\"colFirst\" align\u003d\"left\"\u003eFormatter\u003c/th\u003e\n \u003cth class\u003d\"colFirst\" align\u003d\"left\"\u003eDescription\u003c/th\u003e\n \u003cth class\u003d\"colLast\" align\u003d\"left\"\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\n \u003c/thead\u003e\n \u003ctbody\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e{@link #ofLocalizedDate ofLocalizedDate(dateStyle)} \u003c/td\u003e\n \u003ctd\u003e Formatter with date style from the locale \u003c/td\u003e\n \u003ctd\u003e \u00272011-12-03\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ofLocalizedTime ofLocalizedTime(timeStyle)} \u003c/td\u003e\n \u003ctd\u003e Formatter with time style from the locale \u003c/td\u003e\n \u003ctd\u003e \u002710:15:30\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ofLocalizedDateTime ofLocalizedDateTime(dateTimeStyle)} \u003c/td\u003e\n \u003ctd\u003e Formatter with a style for date and time from the locale\u003c/td\u003e\n \u003ctd\u003e \u00273 Jun 2008 11:05:30\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ofLocalizedDateTime ofLocalizedDateTime(dateStyle,timeStyle)}\n \u003c/td\u003e\n \u003ctd\u003e Formatter with date and time styles from the locale \u003c/td\u003e\n \u003ctd\u003e \u00273 Jun 2008 11:05\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #BASIC_ISO_DATE}\u003c/td\u003e\n \u003ctd\u003eBasic ISO date \u003c/td\u003e \u003ctd\u003e\u002720111203\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_LOCAL_DATE}\u003c/td\u003e\n \u003ctd\u003e ISO Local Date \u003c/td\u003e\n \u003ctd\u003e\u00272011-12-03\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ISO_OFFSET_DATE}\u003c/td\u003e\n \u003ctd\u003e ISO Date with offset \u003c/td\u003e\n \u003ctd\u003e\u00272011-12-03+01:00\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_DATE}\u003c/td\u003e\n \u003ctd\u003e ISO Date with or without offset \u003c/td\u003e\n \u003ctd\u003e \u00272011-12-03+01:00\u0027; \u00272011-12-03\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ISO_LOCAL_TIME}\u003c/td\u003e\n \u003ctd\u003e Time without offset \u003c/td\u003e\n \u003ctd\u003e\u002710:15:30\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_OFFSET_TIME}\u003c/td\u003e\n \u003ctd\u003e Time with offset \u003c/td\u003e\n \u003ctd\u003e\u002710:15:30+01:00\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ISO_TIME}\u003c/td\u003e\n \u003ctd\u003e Time with or without offset \u003c/td\u003e\n \u003ctd\u003e\u002710:15:30+01:00\u0027; \u002710:15:30\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_LOCAL_DATE_TIME}\u003c/td\u003e\n \u003ctd\u003e ISO Local Date and Time \u003c/td\u003e\n \u003ctd\u003e\u00272011-12-03T10:15:30\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ISO_OFFSET_DATE_TIME}\u003c/td\u003e\n \u003ctd\u003e Date Time with Offset\n \u003c/td\u003e\u003ctd\u003e2011-12-03T10:15:30+01:00\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_ZONED_DATE_TIME}\u003c/td\u003e\n \u003ctd\u003e Zoned Date Time \u003c/td\u003e\n \u003ctd\u003e\u00272011-12-03T10:15:30+01:00[Europe/Paris]\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ISO_DATE_TIME}\u003c/td\u003e\n \u003ctd\u003e Date and time with ZoneId \u003c/td\u003e\n \u003ctd\u003e\u00272011-12-03T10:15:30+01:00[Europe/Paris]\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_ORDINAL_DATE}\u003c/td\u003e\n \u003ctd\u003e Year and day of year \u003c/td\u003e\n \u003ctd\u003e\u00272012-337\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #ISO_WEEK_DATE}\u003c/td\u003e\n \u003ctd\u003e Year and Week \u003c/td\u003e\n \u003ctd\u003e2012-W48-6\u0027\u003c/td\u003e\u003c/tr\u003e\n \u003ctr class\u003d\"altColor\"\u003e\n \u003ctd\u003e {@link #ISO_INSTANT}\u003c/td\u003e\n \u003ctd\u003e Date and Time of an Instant \u003c/td\u003e\n \u003ctd\u003e\u00272011-12-03T10:15:30Z\u0027 \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr class\u003d\"rowColor\"\u003e\n \u003ctd\u003e {@link #RFC_1123_DATE_TIME}\u003c/td\u003e\n \u003ctd\u003e RFC 1123 / RFC 822 \u003c/td\u003e\n \u003ctd\u003e\u0027Tue, 3 Jun 2008 11:05:30 GMT\u0027\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/tbody\u003e\n \u003c/table\u003e\n\n \u003ch3 id\u003d\"patterns\"\u003ePatterns for Formatting and Parsing\u003c/h3\u003e\n Patterns are based on a simple sequence of letters and symbols.\n A pattern is used to create a Formatter using the\n {@link #ofPattern(String)} and {@link #ofPattern(String, Locale)} methods.\n For example,\n {@code \"d MMM uuuu\"} will format 2011-12-03 as \u00273\u0026nbsp;Dec\u0026nbsp;2011\u0027.\n A formatter created from a pattern can be used as many times as necessary,\n it is immutable and is thread-safe.\n \u003cp\u003e\n For example:\n \u003cblockquote\u003e\u003cpre\u003e\n  LocalDate date \u003d LocalDate.now();\n  DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd\");\n  String text \u003d date.format(formatter);\n  LocalDate parsedDate \u003d LocalDate.parse(text, formatter);\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n All letters \u0027A\u0027 to \u0027Z\u0027 and \u0027a\u0027 to \u0027z\u0027 are reserved as pattern letters. The\n following pattern letters are defined:\n \u003cpre\u003e\n  Symbol  Meaning                     Presentation      Examples\n  ------  -------                     ------------      -------\n   G       era                         text              AD; Anno Domini; A\n   u       year                        year              2004; 04\n   y       year-of-era                 year              2004; 04\n   D       day-of-year                 number            189\n   M/L     month-of-year               number/text       7; 07; Jul; July; J\n   d       day-of-month                number            10\n\n   Q/q     quarter-of-year             number/text       3; 03; Q3; 3rd quarter\n   Y       week-based-year             year              1996; 96\n   w       week-of-week-based-year     number            27\n   W       week-of-month               number            4\n   E       day-of-week                 text              Tue; Tuesday; T\n   e/c     localized day-of-week       number/text       2; 02; Tue; Tuesday; T\n   F       week-of-month               number            3\n\n   a       am-pm-of-day                text              PM\n   h       clock-hour-of-am-pm (1-12)  number            12\n   K       hour-of-am-pm (0-11)        number            0\n   k       clock-hour-of-am-pm (1-24)  number            0\n\n   H       hour-of-day (0-23)          number            0\n   m       minute-of-hour              number            30\n   s       second-of-minute            number            55\n   S       fraction-of-second          fraction          978\n   A       milli-of-day                number            1234\n   n       nano-of-second              number            987654321\n   N       nano-of-day                 number            1234000000\n\n   V       time-zone ID                zone-id           America/Los_Angeles; Z; -08:30\n   z       time-zone name              zone-name         Pacific Standard Time; PST\n   O       localized zone-offset       offset-O          GMT+8; GMT+08:00; UTC-08:00;\n   X       zone-offset \u0027Z\u0027 for zero    offset-X          Z; -08; -0830; -08:30; -083015; -08:30:15;\n   x       zone-offset                 offset-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;\n   Z       zone-offset                 offset-Z          +0000; -0800; -08:00;\n\n   p       pad next                    pad modifier      1\n\n   \u0027       escape for text             delimiter\n   \u0027\u0027      single quote                literal           \u0027\n   [       optional section start\n   ]       optional section end\n   #       reserved for future use\n   {       reserved for future use\n   }       reserved for future use\n \u003c/pre\u003e\n \u003cp\u003e\n The count of pattern letters determines the format.\n \u003cp\u003e\n \u003cb\u003eText\u003c/b\u003e: The text style is determined based on the number of pattern\n letters used. Less than 4 pattern letters will use the\n {@link TextStyle#SHORT short form}. Exactly 4 pattern letters will use the\n {@link TextStyle#FULL full form}. Exactly 5 pattern letters will use the\n {@link TextStyle#NARROW narrow form}.\n Pattern letters \u0027L\u0027, \u0027c\u0027, and \u0027q\u0027 specify the stand-alone form of the text styles.\n \u003cp\u003e\n \u003cb\u003eNumber\u003c/b\u003e: If the count of letters is one, then the value is output using\n the minimum number of digits and without padding. Otherwise, the count of digits\n is used as the width of the output field, with the value zero-padded as necessary.\n The following pattern letters have constraints on the count of letters.\n Only one letter of \u0027c\u0027 and \u0027F\u0027 can be specified.\n Up to two letters of \u0027d\u0027, \u0027H\u0027, \u0027h\u0027, \u0027K\u0027, \u0027k\u0027, \u0027m\u0027, and \u0027s\u0027 can be specified.\n Up to three letters of \u0027D\u0027 can be specified.\n \u003cp\u003e\n \u003cb\u003eNumber/Text\u003c/b\u003e: If the count of pattern letters is 3 or greater, use the\n Text rules above. Otherwise use the Number rules above.\n \u003cp\u003e\n \u003cb\u003eFraction\u003c/b\u003e: Outputs the nano-of-second field as a fraction-of-second.\n The nano-of-second value has nine digits, thus the count of pattern letters\n is from 1 to 9. If it is less than 9, then the nano-of-second value is\n truncated, with only the most significant digits being output.\n \u003cp\u003e\n \u003cb\u003eYear\u003c/b\u003e: The count of letters determines the minimum field width below\n which padding is used. If the count of letters is two, then a\n {@link DateTimeFormatterBuilder#appendValueReduced reduced} two digit form is\n used. For printing, this outputs the rightmost two digits. For parsing, this\n will parse using the base value of 2000, resulting in a year within the range\n 2000 to 2099 inclusive. If the count of letters is less than four (but not\n two), then the sign is only output for negative years as per\n {@link SignStyle#NORMAL}. Otherwise, the sign is output if the pad width is\n exceeded, as per {@link SignStyle#EXCEEDS_PAD}.\n \u003cp\u003e\n \u003cb\u003eZoneId\u003c/b\u003e: This outputs the time-zone ID, such as \u0027Europe/Paris\u0027. If the\n count of letters is two, then the time-zone ID is output. Any other count of\n letters throws {@code IllegalArgumentException}.\n \u003cp\u003e\n \u003cb\u003eZone names\u003c/b\u003e: This outputs the display name of the time-zone ID. If the\n count of letters is one, two or three, then the short name is output. If the\n count of letters is four, then the full name is output. Five or more letters\n throws {@code IllegalArgumentException}.\n \u003cp\u003e\n \u003cb\u003eOffset X and x\u003c/b\u003e: This formats the offset based on the number of pattern\n letters. One letter outputs just the hour, such as \u0027+01\u0027, unless the minute\n is non-zero in which case the minute is also output, such as \u0027+0130\u0027. Two\n letters outputs the hour and minute, without a colon, such as \u0027+0130\u0027. Three\n letters outputs the hour and minute, with a colon, such as \u0027+01:30\u0027. Four\n letters outputs the hour and minute and optional second, without a colon,\n such as \u0027+013015\u0027. Five letters outputs the hour and minute and optional\n second, with a colon, such as \u0027+01:30:15\u0027. Six or more letters throws\n {@code IllegalArgumentException}. Pattern letter \u0027X\u0027 (upper case) will output\n \u0027Z\u0027 when the offset to be output would be zero, whereas pattern letter \u0027x\u0027\n (lower case) will output \u0027+00\u0027, \u0027+0000\u0027, or \u0027+00:00\u0027.\n \u003cp\u003e\n \u003cb\u003eOffset O\u003c/b\u003e: This formats the localized offset based on the number of\n pattern letters. One letter outputs the {@linkplain TextStyle#SHORT short}\n form of the localized offset, which is localized offset text, such as \u0027GMT\u0027,\n with hour without leading zero, optional 2-digit minute and second if\n non-zero, and colon, for example \u0027GMT+8\u0027. Four letters outputs the\n {@linkplain TextStyle#FULL full} form, which is localized offset text,\n such as \u0027GMT, with 2-digit hour and minute field, optional second field\n if non-zero, and colon, for example \u0027GMT+08:00\u0027. Any other count of letters\n throws {@code IllegalArgumentException}.\n \u003cp\u003e\n \u003cb\u003eOffset Z\u003c/b\u003e: This formats the offset based on the number of pattern\n letters. One, two or three letters outputs the hour and minute, without a\n colon, such as \u0027+0130\u0027. The output will be \u0027+0000\u0027 when the offset is zero.\n Four letters outputs the {@linkplain TextStyle#FULL full} form of localized\n offset, equivalent to four letters of Offset-O. The output will be the\n corresponding localized offset text if the offset is zero. Five\n letters outputs the hour, minute, with optional second if non-zero, with\n colon. It outputs \u0027Z\u0027 if the offset is zero.\n Six or more letters throws {@code IllegalArgumentException}.\n \u003cp\u003e\n \u003cb\u003eOptional section\u003c/b\u003e: The optional section markers work exactly like\n calling {@link DateTimeFormatterBuilder#optionalStart()} and\n {@link DateTimeFormatterBuilder#optionalEnd()}.\n \u003cp\u003e\n \u003cb\u003ePad modifier\u003c/b\u003e: Modifies the pattern that immediately follows to be\n padded with spaces. The pad width is determined by the number of pattern\n letters. This is the same as calling\n {@link DateTimeFormatterBuilder#padNext(int)}.\n \u003cp\u003e\n For example, \u0027ppH\u0027 outputs the hour-of-day padded on the left with spaces to\n a width of 2.\n \u003cp\u003e\n Any unrecognized letter is an error. Any non-letter character, other than\n \u0027[\u0027, \u0027]\u0027, \u0027{\u0027, \u0027}\u0027, \u0027#\u0027 and the single quote will be output directly.\n Despite this, it is recommended to use single quotes around all characters\n that you want to output directly to ensure that future changes do not break\n your application.\n\n \u003ch3 id\u003d\"resolving\"\u003eResolving\u003c/h3\u003e\n Parsing is implemented as a two-phase operation.\n First, the text is parsed using the layout defined by the formatter, producing\n a {@code Map} of field to value, a {@code ZoneId} and a {@code Chronology}.\n Second, the parsed data is \u003cem\u003eresolved\u003c/em\u003e, by validating, combining and\n simplifying the various fields into more useful ones.\n \u003cp\u003e\n Five parsing methods are supplied by this class.\n Four of these perform both the parse and resolve phases.\n The fifth method, {@link #parseUnresolved(CharSequence, ParsePosition)},\n only performs the first phase, leaving the result unresolved.\n As such, it is essentially a low-level operation.\n \u003cp\u003e\n The resolve phase is controlled by two parameters, set on this class.\n \u003cp\u003e\n The {@link ResolverStyle} is an enum that offers three different approaches,\n strict, smart and lenient. The smart option is the default.\n It can be set using {@link #withResolverStyle(ResolverStyle)}.\n \u003cp\u003e\n The {@link #withResolverFields(TemporalField...)} parameter allows the\n set of fields that will be resolved to be filtered before resolving starts.\n For example, if the formatter has parsed a year, month, day-of-month\n and day-of-year, then there are two approaches to resolve a date:\n (year + month + day-of-month) and (year + day-of-year).\n The resolver fields allows one of the two approaches to be selected.\n If no resolver fields are set then both approaches must result in the same date.\n \u003cp\u003e\n Resolving separate fields to form a complete date and time is a complex\n process with behaviour distributed across a number of classes.\n It follows these steps:\n \u003col\u003e\n \u003cli\u003eThe chronology is determined.\n The chronology of the result is either the chronology that was parsed,\n or if no chronology was parsed, it is the chronology set on this class,\n or if that is null, it is {@code IsoChronology}.\n \u003cli\u003eThe {@code ChronoField} date fields are resolved.\n This is achieved using {@link Chronology#resolveDate(Map, ResolverStyle)}.\n Documentation about field resolution is located in the implementation\n of {@code Chronology}.\n \u003cli\u003eThe {@code ChronoField} time fields are resolved.\n This is documented on {@link ChronoField} and is the same for all chronologies.\n \u003cli\u003eAny fields that are not {@code ChronoField} are processed.\n This is achieved using {@link TemporalField#resolve(Map, TemporalAccessor, ResolverStyle)}.\n Documentation about field resolution is located in the implementation\n of {@code TemporalField}.\n \u003cli\u003eThe {@code ChronoField} date and time fields are re-resolved.\n This allows fields in step four to produce {@code ChronoField} values\n and have them be processed into dates and times.\n \u003cli\u003eA {@code LocalTime} is formed if there is at least an hour-of-day available.\n This involves providing default values for minute, second and fraction of second.\n \u003cli\u003eAny remaining unresolved fields are cross-checked against any\n date and/or time that was resolved. Thus, an earlier stage would resolve\n (year + month + day-of-month) to a date, and this stage would check that\n day-of-week was valid for the date.\n \u003cli\u003eIf an {@linkplain #parsedExcessDays() excess number of days}\n was parsed then it is added to the date if a date is available.\n \u003c/ol\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{},"package":"java.time.format","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"ISO_LOCAL_DATE","comment":"The ISO date formatter that formats or parses a date without an\n offset, such as \u00272011-12-03\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended local date format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eFour digits or more for the {@link ChronoField#YEAR year}.\n Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.\n Years outside that range will have a prefixed positive or negative symbol.\n \u003cli\u003eA dash\n \u003cli\u003eTwo digits for the {@link ChronoField#MONTH_OF_YEAR month-of-year}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eA dash\n \u003cli\u003eTwo digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.\n  This is pre-padded by zero to ensure two digits.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_OFFSET_DATE","comment":"The ISO date formatter that formats or parses a date with an\n offset, such as \u00272011-12-03+01:00\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended offset date format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_DATE}\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_DATE","comment":"The ISO date formatter that formats or parses a date with the\n offset if available, such as \u00272011-12-03\u0027 or \u00272011-12-03+01:00\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended date format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_DATE}\n \u003cli\u003eIf the offset is not available then the format is complete.\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n As this formatter has an optional element, it may be necessary to parse using\n {@link DateTimeFormatter#parseBest}.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_LOCAL_TIME","comment":"The ISO time formatter that formats or parses a time without an\n offset, such as \u002710:15\u0027 or \u002710:15:30\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended local time format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eTwo digits for the {@link ChronoField#HOUR_OF_DAY hour-of-day}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eA colon\n \u003cli\u003eTwo digits for the {@link ChronoField#MINUTE_OF_HOUR minute-of-hour}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eIf the second-of-minute is not available then the format is complete.\n \u003cli\u003eA colon\n \u003cli\u003eTwo digits for the {@link ChronoField#SECOND_OF_MINUTE second-of-minute}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eIf the nano-of-second is zero or not available then the format is complete.\n \u003cli\u003eA decimal point\n \u003cli\u003eOne to nine digits for the {@link ChronoField#NANO_OF_SECOND nano-of-second}.\n  As many digits will be output as required.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has no override chronology or zone.\n It uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_OFFSET_TIME","comment":"The ISO time formatter that formats or parses a time with an\n offset, such as \u002710:15+01:00\u0027 or \u002710:15:30+01:00\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended offset time format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_TIME}\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has no override chronology or zone.\n It uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_TIME","comment":"The ISO time formatter that formats or parses a time, with the\n offset if available, such as \u002710:15\u0027, \u002710:15:30\u0027 or \u002710:15:30+01:00\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended offset time format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_TIME}\n \u003cli\u003eIf the offset is not available then the format is complete.\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n As this formatter has an optional element, it may be necessary to parse using\n {@link DateTimeFormatter#parseBest}.\n \u003cp\u003e\n The returned formatter has no override chronology or zone.\n It uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_LOCAL_DATE_TIME","comment":"The ISO date-time formatter that formats or parses a date-time without\n an offset, such as \u00272011-12-03T10:15:30\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended offset date-time format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_DATE}\n \u003cli\u003eThe letter \u0027T\u0027. Parsing is case insensitive.\n \u003cli\u003eThe {@link #ISO_LOCAL_TIME}\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_OFFSET_DATE_TIME","comment":"The ISO date-time formatter that formats or parses a date-time with an\n offset, such as \u00272011-12-03T10:15:30+01:00\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended offset date-time format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_DATE_TIME}\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_ZONED_DATE_TIME","comment":"The ISO-like date-time formatter that formats or parses a date-time with\n offset and zone, such as \u00272011-12-03T10:15:30+01:00[Europe/Paris]\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n a format that extends the ISO-8601 extended offset date-time format\n to add the time-zone.\n The section in square brackets is not part of the ISO-8601 standard.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_OFFSET_DATE_TIME}\n \u003cli\u003eIf the zone ID is not available or is a {@code ZoneOffset} then the format is complete.\n \u003cli\u003eAn open square bracket \u0027[\u0027.\n \u003cli\u003eThe {@link ZoneId#getId() zone ID}. This is not part of the ISO-8601 standard.\n  Parsing is case sensitive.\n \u003cli\u003eA close square bracket \u0027]\u0027.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_DATE_TIME","comment":"The ISO-like date-time formatter that formats or parses a date-time with\n the offset and zone if available, such as \u00272011-12-03T10:15:30\u0027,\n \u00272011-12-03T10:15:30+01:00\u0027 or \u00272011-12-03T10:15:30+01:00[Europe/Paris]\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended local or offset date-time format, as well as the\n extended non-ISO form specifying the time-zone.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_LOCAL_DATE_TIME}\n \u003cli\u003eIf the offset is not available to format or parse then the format is complete.\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n \u003cli\u003eIf the zone ID is not available or is a {@code ZoneOffset} then the format is complete.\n \u003cli\u003eAn open square bracket \u0027[\u0027.\n \u003cli\u003eThe {@link ZoneId#getId() zone ID}. This is not part of the ISO-8601 standard.\n  Parsing is case sensitive.\n \u003cli\u003eA close square bracket \u0027]\u0027.\n \u003c/ul\u003e\n \u003cp\u003e\n As this formatter has an optional element, it may be necessary to parse using\n {@link DateTimeFormatter#parseBest}.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_ORDINAL_DATE","comment":"The ISO date formatter that formats or parses the ordinal date\n without an offset, such as \u00272012-337\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended ordinal date format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eFour digits or more for the {@link ChronoField#YEAR year}.\n Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.\n Years outside that range will have a prefixed positive or negative symbol.\n \u003cli\u003eA dash\n \u003cli\u003eThree digits for the {@link ChronoField#DAY_OF_YEAR day-of-year}.\n  This is pre-padded by zero to ensure three digits.\n \u003cli\u003eIf the offset is not available to format or parse then the format is complete.\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n As this formatter has an optional element, it may be necessary to parse using\n {@link DateTimeFormatter#parseBest}.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_WEEK_DATE","comment":"The ISO date formatter that formats or parses the week-based date\n without an offset, such as \u00272012-W48-6\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 extended week-based date format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eFour digits or more for the {@link IsoFields#WEEK_BASED_YEAR week-based-year}.\n Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.\n Years outside that range will have a prefixed positive or negative symbol.\n \u003cli\u003eA dash\n \u003cli\u003eThe letter \u0027W\u0027. Parsing is case insensitive.\n \u003cli\u003eTwo digits for the {@link IsoFields#WEEK_OF_WEEK_BASED_YEAR week-of-week-based-year}.\n  This is pre-padded by zero to ensure three digits.\n \u003cli\u003eA dash\n \u003cli\u003eOne digit for the {@link ChronoField#DAY_OF_WEEK day-of-week}.\n  The value run from Monday (1) to Sunday (7).\n \u003cli\u003eIf the offset is not available to format or parse then the format is complete.\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID}. If the offset has seconds then\n  they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n As this formatter has an optional element, it may be necessary to parse using\n {@link DateTimeFormatter#parseBest}.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"ISO_INSTANT","comment":"The ISO instant formatter that formats or parses an instant in UTC,\n such as \u00272011-12-03T10:15:30Z\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 instant format.\n When formatting, the second-of-minute is always output.\n The nano-of-second outputs zero, three, six or nine digits digits as necessary.\n When parsing, time to at least the seconds field is required.\n Fractional seconds from zero to nine are parsed.\n The localized decimal style is not used.\n \u003cp\u003e\n This is a special case formatter intended to allow a human readable form\n of an {@link java.time.Instant}. The {@code Instant} class is designed to\n only represent a point in time and internally stores a value in nanoseconds\n from a fixed epoch of 1970-01-01Z. As such, an {@code Instant} cannot be\n formatted as a date or time without providing some form of time-zone.\n This formatter allows the {@code Instant} to be formatted, by providing\n a suitable conversion using {@code ZoneOffset.UTC}.\n \u003cp\u003e\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eThe {@link #ISO_OFFSET_DATE_TIME} where the instant is converted from\n  {@link ChronoField#INSTANT_SECONDS} and {@link ChronoField#NANO_OF_SECOND}\n  using the {@code UTC} offset. Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n The returned formatter has no override chronology or zone.\n It uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"BASIC_ISO_DATE","comment":"The ISO date formatter that formats or parses a date without an\n offset, such as \u002720111203\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n the ISO-8601 basic local date format.\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eFour digits for the {@link ChronoField#YEAR year}.\n  Only years in the range 0000 to 9999 are supported.\n \u003cli\u003eTwo digits for the {@link ChronoField#MONTH_OF_YEAR month-of-year}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eTwo digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eIf the offset is not available to format or parse then the format is complete.\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID} without colons. If the offset has\n  seconds then they will be handled even though this is not part of the ISO-8601 standard.\n  Parsing is case insensitive.\n \u003c/ul\u003e\n \u003cp\u003e\n As this formatter has an optional element, it may be necessary to parse using\n {@link DateTimeFormatter#parseBest}.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true},{"name":"RFC_1123_DATE_TIME","comment":"The RFC-1123 date-time formatter, such as \u0027Tue, 3 Jun 2008 11:05:30 GMT\u0027.\n \u003cp\u003e\n This returns an immutable formatter capable of formatting and parsing\n most of the RFC-1123 format.\n RFC-1123 updates RFC-822 changing the year from two digits to four.\n This implementation requires a four digit year.\n This implementation also does not handle North American or military zone\n names, only \u0027GMT\u0027 and offset amounts.\n \u003cp\u003e\n The format consists of:\n \u003cul\u003e\n \u003cli\u003eIf the day-of-week is not available to format or parse then jump to day-of-month.\n \u003cli\u003eThree letter {@link ChronoField#DAY_OF_WEEK day-of-week} in English.\n \u003cli\u003eA comma\n \u003cli\u003eA space\n \u003cli\u003eOne or two digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.\n \u003cli\u003eA space\n \u003cli\u003eThree letter {@link ChronoField#MONTH_OF_YEAR month-of-year} in English.\n \u003cli\u003eA space\n \u003cli\u003eFour digits for the {@link ChronoField#YEAR year}.\n  Only years in the range 0000 to 9999 are supported.\n \u003cli\u003eA space\n \u003cli\u003eTwo digits for the {@link ChronoField#HOUR_OF_DAY hour-of-day}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eA colon\n \u003cli\u003eTwo digits for the {@link ChronoField#MINUTE_OF_HOUR minute-of-hour}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eIf the second-of-minute is not available then jump to the next space.\n \u003cli\u003eA colon\n \u003cli\u003eTwo digits for the {@link ChronoField#SECOND_OF_MINUTE second-of-minute}.\n  This is pre-padded by zero to ensure two digits.\n \u003cli\u003eA space\n \u003cli\u003eThe {@link ZoneOffset#getId() offset ID} without colons or seconds.\n  An offset of zero uses \"GMT\". North American zone names and military zone names are not handled.\n \u003c/ul\u003e\n \u003cp\u003e\n Parsing is case insensitive.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"ofPattern","comment":"Creates a formatter using the specified pattern.\n \u003cp\u003e\n This method will create a formatter based on a simple\n \u003ca href\u003d\"#patterns\"\u003epattern of letters and symbols\u003c/a\u003e\n as described in the class documentation.\n For example, {@code d MMM uuuu} will format 2011-12-03 as \u00273 Dec 2011\u0027.\n \u003cp\u003e\n The formatter will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.\n This can be changed using {@link DateTimeFormatter#withLocale(Locale)} on the returned formatter\n Alternatively use the {@link #ofPattern(String, Locale)} variant of this method.\n \u003cp\u003e\n The returned formatter has no override chronology or zone.\n It uses {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"pattern","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofPattern","comment":"Creates a formatter using the specified pattern and locale.\n \u003cp\u003e\n This method will create a formatter based on a simple\n \u003ca href\u003d\"#patterns\"\u003epattern of letters and symbols\u003c/a\u003e\n as described in the class documentation.\n For example, {@code d MMM uuuu} will format 2011-12-03 as \u00273 Dec 2011\u0027.\n \u003cp\u003e\n The formatter will use the specified locale.\n This can be changed using {@link DateTimeFormatter#withLocale(Locale)} on the returned formatter\n \u003cp\u003e\n The returned formatter has no override chronology or zone.\n It uses {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale)","flatSignature":"(String, Locale)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"pattern","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofLocalizedDate","comment":"Returns a locale specific date format for the ISO chronology.\n \u003cp\u003e\n This returns a formatter that will format or parse a date.\n The exact format pattern used varies by locale.\n \u003cp\u003e\n The locale is determined from the formatter. The formatter returned directly by\n this method will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.\n The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}\n on the result of this method.\n \u003cp\u003e\n Note that the localized pattern is looked up lazily.\n This {@code DateTimeFormatter} holds the style required and the locale,\n looking up the pattern required on demand.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.FormatStyle)","flatSignature":"(FormatStyle)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dateStyle","type":{"isPrimitive":false,"simpleName":"FormatStyle","qualifiedName":"java.time.format.FormatStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofLocalizedTime","comment":"Returns a locale specific time format for the ISO chronology.\n \u003cp\u003e\n This returns a formatter that will format or parse a time.\n The exact format pattern used varies by locale.\n \u003cp\u003e\n The locale is determined from the formatter. The formatter returned directly by\n this method will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.\n The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}\n on the result of this method.\n \u003cp\u003e\n Note that the localized pattern is looked up lazily.\n This {@code DateTimeFormatter} holds the style required and the locale,\n looking up the pattern required on demand.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.FormatStyle)","flatSignature":"(FormatStyle)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"timeStyle","type":{"isPrimitive":false,"simpleName":"FormatStyle","qualifiedName":"java.time.format.FormatStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofLocalizedDateTime","comment":"Returns a locale specific date-time formatter for the ISO chronology.\n \u003cp\u003e\n This returns a formatter that will format or parse a date-time.\n The exact format pattern used varies by locale.\n \u003cp\u003e\n The locale is determined from the formatter. The formatter returned directly by\n this method will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.\n The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}\n on the result of this method.\n \u003cp\u003e\n Note that the localized pattern is looked up lazily.\n This {@code DateTimeFormatter} holds the style required and the locale,\n looking up the pattern required on demand.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.FormatStyle)","flatSignature":"(FormatStyle)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dateTimeStyle","type":{"isPrimitive":false,"simpleName":"FormatStyle","qualifiedName":"java.time.format.FormatStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ofLocalizedDateTime","comment":"Returns a locale specific date and time format for the ISO chronology.\n \u003cp\u003e\n This returns a formatter that will format or parse a date-time.\n The exact format pattern used varies by locale.\n \u003cp\u003e\n The locale is determined from the formatter. The formatter returned directly by\n this method will use the {@link Locale#getDefault() default FORMAT locale}.\n The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}\n on the result of this method.\n \u003cp\u003e\n Note that the localized pattern is looked up lazily.\n This {@code DateTimeFormatter} holds the style required and the locale,\n looking up the pattern required on demand.\n \u003cp\u003e\n The returned formatter has a chronology of ISO set to ensure dates in\n other calendar systems are correctly converted.\n It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.FormatStyle, java.time.format.FormatStyle)","flatSignature":"(FormatStyle, FormatStyle)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dateStyle","type":{"isPrimitive":false,"simpleName":"FormatStyle","qualifiedName":"java.time.format.FormatStyle","dimension":"","elementType":{}}},{"name":"timeStyle","type":{"isPrimitive":false,"simpleName":"FormatStyle","qualifiedName":"java.time.format.FormatStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parsedExcessDays","comment":"A query that provides access to the excess days that were parsed.\n \u003cp\u003e\n This returns a singleton {@linkplain TemporalQuery query} that provides\n access to additional information from the parse. The query always returns\n a non-null period, with a zero period returned instead of null.\n \u003cp\u003e\n There are two situations where this query may return a non-zero period.\n \u003cul\u003e\n \u003cli\u003eIf the {@code ResolverStyle} is {@code LENIENT} and a time is parsed\n  without a date, then the complete result of the parse consists of a\n  {@code LocalTime} and an excess {@code Period} in days.\n\n \u003cli\u003eIf the {@code ResolverStyle} is {@code SMART} and a time is parsed\n  without a date where the time is 24:00:00, then the complete result of\n  the parse consists of a {@code LocalTime} of 00:00:00 and an excess\n  {@code Period} of one day.\n \u003c/ul\u003e\n \u003cp\u003e\n In both cases, if a complete {@code ChronoLocalDateTime} or {@code Instant}\n is parsed, then the excess days are added to the date part.\n As a result, this query will return a zero period.\n \u003cp\u003e\n The {@code SMART} behaviour handles the common \"end of day\" 24:00 value.\n Processing in {@code LENIENT} mode also produces the same result:\n \u003cpre\u003e\n  Text to parse        Parsed object                         Excess days\n  \"2012-12-03T00:00\"   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO\n  \"2012-12-03T24:00\"   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO\n  \"00:00\"              LocalTime.of(0, 0)                    ZERO\n  \"24:00\"              LocalTime.of(0, 0)                    Period.ofDays(1)\n \u003c/pre\u003e\n The query can be used as follows:\n \u003cpre\u003e\n  TemporalAccessor parsed \u003d formatter.parse(str);\n  LocalTime time \u003d parsed.query(LocalTime::from);\n  Period extraDays \u003d parsed.query(DateTimeFormatter.parsedExcessDays());\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"parsedLeapSecond","comment":"A query that provides access to whether a leap-second was parsed.\n \u003cp\u003e\n This returns a singleton {@linkplain TemporalQuery query} that provides\n access to additional information from the parse. The query always returns\n a non-null boolean, true if parsing saw a leap-second, false if not.\n \u003cp\u003e\n Instant parsing handles the special \"leap second\" time of \u002723:59:60\u0027.\n Leap seconds occur at \u002723:59:60\u0027 in the UTC time-zone, but at other\n local times in different time-zones. To avoid this potential ambiguity,\n the handling of leap-seconds is limited to\n {@link DateTimeFormatterBuilder#appendInstant()}, as that method\n always parses the instant with the UTC zone offset.\n \u003cp\u003e\n If the time \u002723:59:60\u0027 is received, then a simple conversion is applied,\n replacing the second-of-minute of 60 with 59. This query can be used\n on the parse result to determine if the leap-second adjustment was made.\n The query will return {@code true} if it did adjust to remove the\n leap-second, and {@code false} if not. Note that applying a leap-second\n smoothing mechanism, such as UTC-SLS, is the responsibility of the\n application, as follows:\n \u003cpre\u003e\n  TemporalAccessor parsed \u003d formatter.parse(str);\n  Instant instant \u003d parsed.query(Instant::from);\n  if (parsed.query(DateTimeFormatter.parsedLeapSecond())) {\n    // validate leap-second is correct and apply correct smoothing\n  }\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getLocale","comment":"Gets the locale to be used during formatting.\n \u003cp\u003e\n This is used to lookup any part of the formatter needing specific\n localization, such as the text or localized pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withLocale","comment":"Returns a copy of this formatter with a new locale.\n \u003cp\u003e\n This is used to lookup any part of the formatter needing specific\n localization, such as the text or localized pattern.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDecimalStyle","comment":"Gets the DecimalStyle to be used during formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DecimalStyle","qualifiedName":"java.time.format.DecimalStyle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withDecimalStyle","comment":"Returns a copy of this formatter with a new DecimalStyle.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.DecimalStyle)","flatSignature":"(DecimalStyle)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"decimalStyle","type":{"isPrimitive":false,"simpleName":"DecimalStyle","qualifiedName":"java.time.format.DecimalStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChronology","comment":"Gets the overriding chronology to be used during formatting.\n \u003cp\u003e\n This returns the override chronology, used to convert dates.\n By default, a formatter has no override chronology, returning null.\n See {@link #withChronology(Chronology)} for more details on overriding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withChronology","comment":"Returns a copy of this formatter with a new override chronology.\n \u003cp\u003e\n This returns a formatter with similar state to this formatter but\n with the override chronology set.\n By default, a formatter has no override chronology, returning null.\n \u003cp\u003e\n If an override is added, then any date that is formatted or parsed will be affected.\n \u003cp\u003e\n When formatting, if the temporal object contains a date, then it will\n be converted to a date in the override chronology.\n Whether the temporal contains a date is determined by querying the\n {@link ChronoField#EPOCH_DAY EPOCH_DAY} field.\n Any time or zone will be retained unaltered unless overridden.\n \u003cp\u003e\n If the temporal object does not contain a date, but does contain one\n or more {@code ChronoField} date fields, then a {@code DateTimeException}\n is thrown. In all other cases, the override chronology is added to the temporal,\n replacing any previous chronology, but without changing the date/time.\n \u003cp\u003e\n When parsing, there are two distinct cases to consider.\n If a chronology has been parsed directly from the text, perhaps because\n {@link DateTimeFormatterBuilder#appendChronologyId()} was used, then\n this override chronology has no effect.\n If no zone has been parsed, then this override chronology will be used\n to interpret the {@code ChronoField} values into a date according to the\n date resolving rules of the chronology.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.chrono.Chronology)","flatSignature":"(Chronology)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"chrono","type":{"isPrimitive":false,"simpleName":"Chronology","qualifiedName":"java.time.chrono.Chronology","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getZone","comment":"Gets the overriding zone to be used during formatting.\n \u003cp\u003e\n This returns the override zone, used to convert instants.\n By default, a formatter has no override zone, returning null.\n See {@link #withZone(ZoneId)} for more details on overriding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withZone","comment":"Returns a copy of this formatter with a new override zone.\n \u003cp\u003e\n This returns a formatter with similar state to this formatter but\n with the override zone set.\n By default, a formatter has no override zone, returning null.\n \u003cp\u003e\n If an override is added, then any instant that is formatted or parsed will be affected.\n \u003cp\u003e\n When formatting, if the temporal object contains an instant, then it will\n be converted to a zoned date-time using the override zone.\n Whether the temporal is an instant is determined by querying the\n {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS} field.\n If the input has a chronology then it will be retained unless overridden.\n If the input does not have a chronology, such as {@code Instant}, then\n the ISO chronology will be used.\n \u003cp\u003e\n If the temporal object does not contain an instant, but does contain\n an offset then an additional check is made. If the normalized override\n zone is an offset that differs from the offset of the temporal, then\n a {@code DateTimeException} is thrown. In all other cases, the override\n zone is added to the temporal, replacing any previous zone, but without\n changing the date/time.\n \u003cp\u003e\n When parsing, there are two distinct cases to consider.\n If a zone has been parsed directly from the text, perhaps because\n {@link DateTimeFormatterBuilder#appendZoneId()} was used, then\n this override zone has no effect.\n If no zone has been parsed, then this override zone will be included in\n the result of the parse where it can be used to build instants and date-times.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getResolverStyle","comment":"Gets the resolver style to use during parsing.\n \u003cp\u003e\n This returns the resolver style, used during the second phase of parsing\n when fields are resolved into dates and times.\n By default, a formatter has the {@link ResolverStyle#SMART SMART} resolver style.\n See {@link #withResolverStyle(ResolverStyle)} for more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ResolverStyle","qualifiedName":"java.time.format.ResolverStyle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withResolverStyle","comment":"Returns a copy of this formatter with a new resolver style.\n \u003cp\u003e\n This returns a formatter with similar state to this formatter but\n with the resolver style set. By default, a formatter has the\n {@link ResolverStyle#SMART SMART} resolver style.\n \u003cp\u003e\n Changing the resolver style only has an effect during parsing.\n Parsing a text string occurs in two phases.\n Phase 1 is a basic text parse according to the fields added to the builder.\n Phase 2 resolves the parsed field-value pairs into date and/or time objects.\n The resolver style is used to control how phase 2, resolving, happens.\n See {@code ResolverStyle} for more information on the options available.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.format.ResolverStyle)","flatSignature":"(ResolverStyle)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"resolverStyle","type":{"isPrimitive":false,"simpleName":"ResolverStyle","qualifiedName":"java.time.format.ResolverStyle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getResolverFields","comment":"Gets the resolver fields to use during parsing.\n \u003cp\u003e\n This returns the resolver fields, used during the second phase of parsing\n when fields are resolved into dates and times.\n By default, a formatter has no resolver fields, and thus returns null.\n See {@link #withResolverFields(Set)} for more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withResolverFields","comment":"Returns a copy of this formatter with a new set of resolver fields.\n \u003cp\u003e\n This returns a formatter with similar state to this formatter but with\n the resolver fields set. By default, a formatter has no resolver fields.\n \u003cp\u003e\n Changing the resolver fields only has an effect during parsing.\n Parsing a text string occurs in two phases.\n Phase 1 is a basic text parse according to the fields added to the builder.\n Phase 2 resolves the parsed field-value pairs into date and/or time objects.\n The resolver fields are used to filter the field-value pairs between phase 1 and 2.\n \u003cp\u003e\n This can be used to select between two or more ways that a date or time might\n be resolved. For example, if the formatter consists of year, month, day-of-month\n and day-of-year, then there are two ways to resolve a date.\n Calling this method with the arguments {@link ChronoField#YEAR YEAR} and\n {@link ChronoField#DAY_OF_YEAR DAY_OF_YEAR} will ensure that the date is\n resolved using the year and day-of-year, effectively meaning that the month\n and day-of-month are ignored during the resolving phase.\n \u003cp\u003e\n In a similar manner, this method can be used to ignore secondary fields that\n would otherwise be cross-checked. For example, if the formatter consists of year,\n month, day-of-month and day-of-week, then there is only one way to resolve a\n date, but the parsed value for day-of-week will be cross-checked against the\n resolved date. Calling this method with the arguments {@link ChronoField#YEAR YEAR},\n {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} and\n {@link ChronoField#DAY_OF_MONTH DAY_OF_MONTH} will ensure that the date is\n resolved correctly, but without any cross-check for the day-of-week.\n \u003cp\u003e\n In implementation terms, this method behaves as follows. The result of the\n parsing phase can be considered to be a map of field to value. The behavior\n of this method is to cause that map to be filtered between phase 1 and 2,\n removing all fields other than those specified as arguments to this method.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalField...)","flatSignature":"(TemporalField...)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"resolverFields","type":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"TemporalField","qualifiedName":"java.time.temporal.TemporalField","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"withResolverFields","comment":"Returns a copy of this formatter with a new set of resolver fields.\n \u003cp\u003e\n This returns a formatter with similar state to this formatter but with\n the resolver fields set. By default, a formatter has no resolver fields.\n \u003cp\u003e\n Changing the resolver fields only has an effect during parsing.\n Parsing a text string occurs in two phases.\n Phase 1 is a basic text parse according to the fields added to the builder.\n Phase 2 resolves the parsed field-value pairs into date and/or time objects.\n The resolver fields are used to filter the field-value pairs between phase 1 and 2.\n \u003cp\u003e\n This can be used to select between two or more ways that a date or time might\n be resolved. For example, if the formatter consists of year, month, day-of-month\n and day-of-year, then there are two ways to resolve a date.\n Calling this method with the arguments {@link ChronoField#YEAR YEAR} and\n {@link ChronoField#DAY_OF_YEAR DAY_OF_YEAR} will ensure that the date is\n resolved using the year and day-of-year, effectively meaning that the month\n and day-of-month are ignored during the resolving phase.\n \u003cp\u003e\n In a similar manner, this method can be used to ignore secondary fields that\n would otherwise be cross-checked. For example, if the formatter consists of year,\n month, day-of-month and day-of-week, then there is only one way to resolve a\n date, but the parsed value for day-of-week will be cross-checked against the\n resolved date. Calling this method with the arguments {@link ChronoField#YEAR YEAR},\n {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} and\n {@link ChronoField#DAY_OF_MONTH DAY_OF_MONTH} will ensure that the date is\n resolved correctly, but without any cross-check for the day-of-week.\n \u003cp\u003e\n In implementation terms, this method behaves as follows. The result of the\n parsing phase can be considered to be a map of field to value. The behavior\n of this method is to cause that map to be filtered between phase 1 and 2,\n removing all fields other than those specified as arguments to this method.\n \u003cp\u003e\n This instance is immutable and unaffected by this method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Set\u003cjava.time.temporal.TemporalField\u003e)","flatSignature":"(Set\u003cTemporalField\u003e)","returnType":{"isPrimitive":false,"simpleName":"DateTimeFormatter","qualifiedName":"java.time.format.DateTimeFormatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"resolverFields","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats a date-time object using this formatter.\n \u003cp\u003e\n This formats the date-time to a String using the rules of the formatter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor)","flatSignature":"(TemporalAccessor)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"formatTo","comment":"Formats a date-time object to an {@code Appendable} using this formatter.\n \u003cp\u003e\n This outputs the formatted date-time to the specified destination.\n {@link Appendable} is a general purpose interface that is implemented by all\n key character output classes including {@code StringBuffer}, {@code StringBuilder},\n {@code PrintStream} and {@code Writer}.\n \u003cp\u003e\n Although {@code Appendable} methods throw an {@code IOException}, this method does not.\n Instead, any {@code IOException} is wrapped in a runtime exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalAccessor, java.lang.Appendable)","flatSignature":"(TemporalAccessor, Appendable)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"temporal","type":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}}},{"name":"appendable","type":{"isPrimitive":false,"simpleName":"Appendable","qualifiedName":"java.lang.Appendable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Fully parses the text producing a temporal object.\n \u003cp\u003e\n This parses the entire text producing a temporal object.\n It is typically more useful to use {@link #parse(CharSequence, TemporalQuery)}.\n The result of this method is {@code TemporalAccessor} which has been resolved,\n applying basic validation checks to help ensure a valid date-time.\n \u003cp\u003e\n If the parse completes without reading the entire length of the text,\n or a problem occurs during parsing or merging, then an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Parses the text using this formatter, providing control over the text position.\n \u003cp\u003e\n This parses the text without requiring the parse to start from the beginning\n of the string or finish at the end.\n The result of this method is {@code TemporalAccessor} which has been resolved,\n applying basic validation checks to help ensure a valid date-time.\n \u003cp\u003e\n The text will be parsed from the specified start {@code ParsePosition}.\n The entire length of the text does not have to be parsed, the {@code ParsePosition}\n will be updated with the index at the end of parsing.\n \u003cp\u003e\n The operation of this method is slightly different to similar methods using\n {@code ParsePosition} on {@code java.text.Format}. That class will return\n errors using the error index on the {@code ParsePosition}. By contrast, this\n method will throw a {@link DateTimeParseException} if an error occurs, with\n the exception containing the error index.\n This change in behavior is necessary due to the increased complexity of\n parsing and resolving dates/times in this API.\n \u003cp\u003e\n If the formatter parses the same field more than once with different values,\n the result will be an error.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.text.ParsePosition)","flatSignature":"(CharSequence, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Fully parses the text producing an object of the specified type.\n \u003cp\u003e\n Most applications should use this method for parsing.\n It parses the entire text to produce the required date-time.\n The query is typically a method reference to a {@code from(TemporalAccessor)} method.\n For example:\n \u003cpre\u003e\n  LocalDateTime dt \u003d parser.parse(str, LocalDateTime::from);\n \u003c/pre\u003e\n If the parse completes without reading the entire length of the text,\n or a problem occurs during parsing or merging, then an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.time.temporal.TemporalQuery\u003cT\u003e)","flatSignature":"(CharSequence, TemporalQuery\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"query","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"parseBest","comment":"Fully parses the text producing an object of one of the specified types.\n \u003cp\u003e\n This parse method is convenient for use when the parser can handle optional elements.\n For example, a pattern of \u0027uuuu-MM-dd HH.mm[ VV]\u0027 can be fully parsed to a {@code ZonedDateTime},\n or partially parsed to a {@code LocalDateTime}.\n The queries must be specified in order, starting from the best matching full-parse option\n and ending with the worst matching minimal parse option.\n The query is typically a method reference to a {@code from(TemporalAccessor)} method.\n \u003cp\u003e\n The result is associated with the first type that successfully parses.\n Normally, applications will use {@code instanceof} to check the result.\n For example:\n \u003cpre\u003e\n  TemporalAccessor dt \u003d parser.parseBest(str, ZonedDateTime::from, LocalDateTime::from);\n  if (dt instanceof ZonedDateTime) {\n   ...\n  } else {\n   ...\n  }\n \u003c/pre\u003e\n If the parse completes without reading the entire length of the text,\n or a problem occurs during parsing or merging, then an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.time.temporal.TemporalQuery\u003c?\u003e...)","flatSignature":"(CharSequence, TemporalQuery\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"queries","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"parseUnresolved","comment":"Parses the text using this formatter, without resolving the result, intended\n for advanced use cases.\n \u003cp\u003e\n Parsing is implemented as a two-phase operation.\n First, the text is parsed using the layout defined by the formatter, producing\n a {@code Map} of field to value, a {@code ZoneId} and a {@code Chronology}.\n Second, the parsed data is \u003cem\u003eresolved\u003c/em\u003e, by validating, combining and\n simplifying the various fields into more useful ones.\n This method performs the parsing stage but not the resolving stage.\n \u003cp\u003e\n The result of this method is {@code TemporalAccessor} which represents the\n data as seen in the input. Values are not validated, thus parsing a date string\n of \u00272012-00-65\u0027 would result in a temporal with three fields - year of \u00272012\u0027,\n month of \u00270\u0027 and day-of-month of \u002765\u0027.\n \u003cp\u003e\n The text will be parsed from the specified start {@code ParsePosition}.\n The entire length of the text does not have to be parsed, the {@code ParsePosition}\n will be updated with the index at the end of parsing.\n \u003cp\u003e\n Errors are returned using the error index field of the {@code ParsePosition}\n instead of {@code DateTimeParseException}.\n The returned error index will be set to an index indicative of the error.\n Callers must check for errors before using the result.\n \u003cp\u003e\n If the formatter parses the same field more than once with different values,\n the result will be an error.\n \u003cp\u003e\n This method is intended for advanced use cases that need access to the\n internal state during parsing. Typical application code should use\n {@link #parse(CharSequence, TemporalQuery)} or the parse method on the target type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.text.ParsePosition)","flatSignature":"(CharSequence, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"TemporalAccessor","qualifiedName":"java.time.temporal.TemporalAccessor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"text","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toFormat","comment":"Returns this formatter as a {@code java.text.Format} instance.\n \u003cp\u003e\n The returned {@link Format} instance will format any {@link TemporalAccessor}\n and parses to a resolved {@link TemporalAccessor}.\n \u003cp\u003e\n Exceptions will follow the definitions of {@code Format}, see those methods\n for details about {@code IllegalArgumentException} during formatting and\n {@code ParseException} or null during parsing.\n The format does not support attributing of the returned format string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Format","qualifiedName":"java.text.Format","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toFormat","comment":"Returns this formatter as a {@code java.text.Format} instance that will\n parse using the specified query.\n \u003cp\u003e\n The returned {@link Format} instance will format any {@link TemporalAccessor}\n and parses to the type specified.\n The type must be one that is supported by {@link #parse}.\n \u003cp\u003e\n Exceptions will follow the definitions of {@code Format}, see those methods\n for details about {@code IllegalArgumentException} during formatting and\n {@code ParseException} or null during parsing.\n The format does not support attributing of the returned format string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.temporal.TemporalQuery\u003c?\u003e)","flatSignature":"(TemporalQuery\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Format","qualifiedName":"java.text.Format","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parseQuery","type":{"isPrimitive":false,"simpleName":"TemporalQuery","qualifiedName":"java.time.temporal.TemporalQuery","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a description of the underlying formatters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}