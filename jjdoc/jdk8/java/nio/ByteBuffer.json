{"name":"ByteBuffer","comment":"A byte buffer.\n\n \u003cp\u003e This class defines six categories of operations upon\n byte buffers:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e Absolute and relative {@link #get() \u003ci\u003eget\u003c/i\u003e} and\n   {@link #put(byte) \u003ci\u003eput\u003c/i\u003e} methods that read and write\n   single bytes; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Relative {@link #get(byte[]) \u003ci\u003ebulk get\u003c/i\u003e}\n   methods that transfer contiguous sequences of bytes from this buffer\n   into an array; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Relative {@link #put(byte[]) \u003ci\u003ebulk put\u003c/i\u003e}\n   methods that transfer contiguous sequences of bytes from a\n   byte array or some other byte\n   buffer into this buffer; \u003c/p\u003e\u003c/li\u003e\n\n\n\n   \u003cli\u003e\u003cp\u003e Absolute and relative {@link #getChar() \u003ci\u003eget\u003c/i\u003e}\n   and {@link #putChar(char) \u003ci\u003eput\u003c/i\u003e} methods that read and\n   write values of other primitive types, translating them to and from\n   sequences of bytes in a particular byte order; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Methods for creating \u003ci\u003e\u003ca href\u003d\"#views\"\u003eview buffers\u003c/a\u003e\u003c/i\u003e,\n   which allow a byte buffer to be viewed as a buffer containing values of\n   some other primitive type; and \u003c/p\u003e\u003c/li\u003e\n\n\n\n   \u003cli\u003e\u003cp\u003e Methods for {@link #compact compacting}, {@link\n   #duplicate duplicating}, and {@link #slice slicing}\n   a byte buffer.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e Byte buffers can be created either by {@link #allocate\n \u003ci\u003eallocation\u003c/i\u003e}, which allocates space for the buffer\u0027s\n\n\n\n content, or by {@link #wrap(byte[]) \u003ci\u003ewrapping\u003c/i\u003e} an\n existing byte array  into a buffer.\n\n\n\n\n\n\n\n\n\n\n\n \u003ca name\u003d\"direct\"\u003e\u003c/a\u003e\n \u003ch2\u003e Direct \u003ci\u003evs.\u003c/i\u003e non-direct buffers \u003c/h2\u003e\n\n \u003cp\u003e A byte buffer is either \u003ci\u003edirect\u003c/i\u003e or \u003ci\u003enon-direct\u003c/i\u003e.  Given a\n direct byte buffer, the Java virtual machine will make a best effort to\n perform native I/O operations directly upon it.  That is, it will attempt to\n avoid copying the buffer\u0027s content to (or from) an intermediate buffer\n before (or after) each invocation of one of the underlying operating\n system\u0027s native I/O operations.\n\n \u003cp\u003e A direct byte buffer may be created by invoking the {@link\n #allocateDirect(int) allocateDirect} factory method of this class.  The\n buffers returned by this method typically have somewhat higher allocation\n and deallocation costs than non-direct buffers.  The contents of direct\n buffers may reside outside of the normal garbage-collected heap, and so\n their impact upon the memory footprint of an application might not be\n obvious.  It is therefore recommended that direct buffers be allocated\n primarily for large, long-lived buffers that are subject to the underlying\n system\u0027s native I/O operations.  In general it is best to allocate direct\n buffers only when they yield a measureable gain in program performance.\n\n \u003cp\u003e A direct byte buffer may also be created by {@link\n java.nio.channels.FileChannel#map mapping} a region of a file\n directly into memory.  An implementation of the Java platform may optionally\n support the creation of direct byte buffers from native code via JNI.  If an\n instance of one of these kinds of buffers refers to an inaccessible region\n of memory then an attempt to access that region will not change the buffer\u0027s\n content and will cause an unspecified exception to be thrown either at the\n time of the access or at some later time.\n\n \u003cp\u003e Whether a byte buffer is direct or non-direct may be determined by\n invoking its {@link #isDirect isDirect} method.  This method is provided so\n that explicit buffer management can be done in performance-critical code.\n\n\n \u003ca name\u003d\"bin\"\u003e\u003c/a\u003e\n \u003ch2\u003e Access to binary data \u003c/h2\u003e\n\n \u003cp\u003e This class defines methods for reading and writing values of all other\n primitive types, except \u003ctt\u003eboolean\u003c/tt\u003e.  Primitive values are translated\n to (or from) sequences of bytes according to the buffer\u0027s current byte\n order, which may be retrieved and modified via the {@link #order order}\n methods.  Specific byte orders are represented by instances of the {@link\n ByteOrder} class.  The initial order of a byte buffer is always {@link\n ByteOrder#BIG_ENDIAN BIG_ENDIAN}.\n\n \u003cp\u003e For access to heterogeneous binary data, that is, sequences of values of\n different types, this class defines a family of absolute and relative\n \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods for each type.  For 32-bit floating-point\n values, for example, this class defines:\n\n \u003cblockquote\u003e\u003cpre\u003e\n float  {@link #getFloat()}\n float  {@link #getFloat(int) getFloat(int index)}\n  void  {@link #putFloat(float) putFloat(float f)}\n  void  {@link #putFloat(int,float) putFloat(int index, float f)}\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e Corresponding methods are defined for the types \u003ctt\u003echar\u003c/tt\u003e,\n \u003ctt\u003eshort\u003c/tt\u003e, \u003ctt\u003eint\u003c/tt\u003e, \u003ctt\u003elong\u003c/tt\u003e, and \u003ctt\u003edouble\u003c/tt\u003e.  The index\n parameters of the absolute \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods are in terms of\n bytes rather than of the type being read or written.\n\n \u003ca name\u003d\"views\"\u003e\u003c/a\u003e\n\n \u003cp\u003e For access to homogeneous binary data, that is, sequences of values of\n the same type, this class defines methods that can create \u003ci\u003eviews\u003c/i\u003e of a\n given byte buffer.  A \u003ci\u003eview buffer\u003c/i\u003e is simply another buffer whose\n content is backed by the byte buffer.  Changes to the byte buffer\u0027s content\n will be visible in the view buffer, and vice versa; the two buffers\u0027\n position, limit, and mark values are independent.  The {@link\n #asFloatBuffer() asFloatBuffer} method, for example, creates an instance of\n the {@link FloatBuffer} class that is backed by the byte buffer upon which\n the method is invoked.  Corresponding view-creation methods are defined for\n the types \u003ctt\u003echar\u003c/tt\u003e, \u003ctt\u003eshort\u003c/tt\u003e, \u003ctt\u003eint\u003c/tt\u003e, \u003ctt\u003elong\u003c/tt\u003e, and\n \u003ctt\u003edouble\u003c/tt\u003e.\n\n \u003cp\u003e View buffers have three important advantages over the families of\n type-specific \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods described above:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e A view buffer is indexed not in terms of bytes but rather in terms\n   of the type-specific size of its values;  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A view buffer provides relative bulk \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e\n   methods that can transfer contiguous sequences of values between a buffer\n   and an array or some other buffer of the same type; and  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A view buffer is potentially much more efficient because it will\n   be direct if, and only if, its backing byte buffer is direct.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e The byte order of a view buffer is fixed to be that of its byte buffer\n at the time that the view is created.  \u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u003ch2\u003e Invocation chaining \u003c/h2\u003e\n\n\n \u003cp\u003e Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained.\n\n\n\n The sequence of statements\n\n \u003cblockquote\u003e\u003cpre\u003e\n bb.putInt(0xCAFEBABE);\n bb.putShort(3);\n bb.putShort(45);\u003c/pre\u003e\u003c/blockquote\u003e\n\n can, for example, be replaced by the single statement\n\n \u003cblockquote\u003e\u003cpre\u003e\n bb.putInt(0xCAFEBABE).putShort(3).putShort(45);\u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{},"package":"java.nio","superclass":"java.nio.Buffer","interfaces":["java.lang.Comparable"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"allocateDirect","comment":"Allocates a new direct byte buffer.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its limit will be its\n capacity, its mark will be undefined, and each of its elements will be\n initialized to zero.  Whether or not it has a\n {@link #hasArray backing array} is unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"capacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"allocate","comment":"Allocates a new byte buffer.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its limit will be its\n capacity, its mark will be undefined, and each of its elements will be\n initialized to zero.  It will have a {@link #array backing array},\n and its {@link #arrayOffset array offset} will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"capacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wrap","comment":"Wraps a byte array into a buffer.\n\n \u003cp\u003e The new buffer will be backed by the given byte array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer\u0027s capacity will be\n \u003ctt\u003earray.length\u003c/tt\u003e, its position will be \u003ctt\u003eoffset\u003c/tt\u003e, its limit\n will be \u003ctt\u003eoffset + length\u003c/tt\u003e, and its mark will be undefined.  Its\n {@link #array backing array} will be the given array, and\n its {@link #arrayOffset array offset} will be zero.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wrap","comment":"Wraps a byte array into a buffer.\n\n \u003cp\u003e The new buffer will be backed by the given byte array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer\u0027s capacity and limit will be\n \u003ctt\u003earray.length\u003c/tt\u003e, its position will be zero, and its mark will be\n undefined.  Its {@link #array backing array} will be the\n given array, and its {@link #arrayOffset array offset\u003e} will\n be zero.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"slice","comment":"Creates a new byte buffer whose content is a shared subsequence of\n this buffer\u0027s content.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer, and its mark\n will be undefined.  The new buffer will be direct if, and only if, this\n buffer is direct, and it will be read-only if, and only if, this buffer\n is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"duplicate","comment":"Creates a new byte buffer that shares this buffer\u0027s content.\n\n \u003cp\u003e The content of the new buffer will be that of this buffer.  Changes\n to this buffer\u0027s content will be visible in the new buffer, and vice\n versa; the two buffers\u0027 position, limit, and mark values will be\n independent.\n\n \u003cp\u003e The new buffer\u0027s capacity, limit, position, and mark values will be\n identical to those of this buffer.  The new buffer will be direct if,\n and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"asReadOnlyBuffer","comment":"Creates a new, read-only byte buffer that shares this buffer\u0027s\n content.\n\n \u003cp\u003e The content of the new buffer will be that of this buffer.  Changes\n to this buffer\u0027s content will be visible in the new buffer; the new\n buffer itself, however, will be read-only and will not allow the shared\n content to be modified.  The two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s capacity, limit, position, and mark values will be\n identical to those of this buffer.\n\n \u003cp\u003e If this buffer is itself read-only then this method behaves in\n exactly the same way as the {@link #duplicate duplicate} method.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Relative \u003ci\u003eget\u003c/i\u003e method.  Reads the byte at this buffer\u0027s\n current position, and then increments the position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"put","comment":"Relative \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes the given byte into this buffer at the current\n position, and then increments the position. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte)","flatSignature":"(byte)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method.  Reads the byte at the given\n index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes the given byte into this buffer at the given\n index. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, byte)","flatSignature":"(int, byte)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Relative bulk \u003ci\u003eget\u003c/i\u003e method.\n\n \u003cp\u003e This method transfers bytes from this buffer into the given\n destination array.  If there are fewer bytes remaining in the\n buffer than are required to satisfy the request, that is, if\n \u003ctt\u003elength\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026gt;\u003c/tt\u003e\u0026nbsp;\u003ctt\u003eremaining()\u003c/tt\u003e, then no\n bytes are transferred and a {@link BufferUnderflowException} is\n thrown.\n\n \u003cp\u003e Otherwise, this method copies \u003ctt\u003elength\u003c/tt\u003e bytes from this\n buffer into the given array, starting at the current position of this\n buffer and at the given offset in the array.  The position of this\n buffer is then incremented by \u003ctt\u003elength\u003c/tt\u003e.\n\n \u003cp\u003e In other words, an invocation of this method of the form\n \u003ctt\u003esrc.get(dst,\u0026nbsp;off,\u0026nbsp;len)\u003c/tt\u003e has exactly the same effect as\n the loop\n\n \u003cpre\u003e{@code\n     for (int i \u003d off; i \u003c off + len; i++)\n         dst[i] \u003d src.get():\n }\u003c/pre\u003e\n\n except that it first checks that there are sufficient bytes in\n this buffer and it is potentially much more efficient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Relative bulk \u003ci\u003eget\u003c/i\u003e method.\n\n \u003cp\u003e This method transfers bytes from this buffer into the given\n destination array.  An invocation of this method of the form\n \u003ctt\u003esrc.get(a)\u003c/tt\u003e behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     src.get(a, 0, a.length) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"put","comment":"Relative bulk \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method transfers the bytes remaining in the given source\n buffer into this buffer.  If there are more bytes remaining in the\n source buffer than in this buffer, that is, if\n \u003ctt\u003esrc.remaining()\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026gt;\u003c/tt\u003e\u0026nbsp;\u003ctt\u003eremaining()\u003c/tt\u003e,\n then no bytes are transferred and a {@link\n BufferOverflowException} is thrown.\n\n \u003cp\u003e Otherwise, this method copies\n \u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003d\u0026nbsp;\u003ctt\u003esrc.remaining()\u003c/tt\u003e bytes from the given\n buffer into this buffer, starting at each buffer\u0027s current position.\n The positions of both buffers are then incremented by \u003ci\u003en\u003c/i\u003e.\n\n \u003cp\u003e In other words, an invocation of this method of the form\n \u003ctt\u003edst.put(src)\u003c/tt\u003e has exactly the same effect as the loop\n\n \u003cpre\u003e\n     while (src.hasRemaining())\n         dst.put(src.get()); \u003c/pre\u003e\n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Relative bulk \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method transfers bytes into this buffer from the given\n source array.  If there are more bytes to be copied from the array\n than remain in this buffer, that is, if\n \u003ctt\u003elength\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026gt;\u003c/tt\u003e\u0026nbsp;\u003ctt\u003eremaining()\u003c/tt\u003e, then no\n bytes are transferred and a {@link BufferOverflowException} is\n thrown.\n\n \u003cp\u003e Otherwise, this method copies \u003ctt\u003elength\u003c/tt\u003e bytes from the\n given array into this buffer, starting at the given offset in the array\n and at the current position of this buffer.  The position of this buffer\n is then incremented by \u003ctt\u003elength\u003c/tt\u003e.\n\n \u003cp\u003e In other words, an invocation of this method of the form\n \u003ctt\u003edst.put(src,\u0026nbsp;off,\u0026nbsp;len)\u003c/tt\u003e has exactly the same effect as\n the loop\n\n \u003cpre\u003e{@code\n     for (int i \u003d off; i \u003c off + len; i++)\n         dst.put(a[i]);\n }\u003c/pre\u003e\n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Relative bulk \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method transfers the entire content of the given source\n byte array into this buffer.  An invocation of this method of the\n form \u003ctt\u003edst.put(a)\u003c/tt\u003e behaves in exactly the same way as the\n invocation\n\n \u003cpre\u003e\n     dst.put(a, 0, a.length) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"hasArray","comment":"Tells whether or not this buffer is backed by an accessible byte\n array.\n\n \u003cp\u003e If this method returns \u003ctt\u003etrue\u003c/tt\u003e then the {@link #array() array}\n and {@link #arrayOffset() arrayOffset} methods may safely be invoked.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"array","comment":"Returns the byte array that backs this\n buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Modifications to this buffer\u0027s content will cause the returned\n array\u0027s content to be modified, and vice versa.\n\n \u003cp\u003e Invoke the {@link #hasArray hasArray} method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"arrayOffset","comment":"Returns the offset within this buffer\u0027s backing array of the first\n element of the buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e If this buffer is backed by an array then buffer position \u003ci\u003ep\u003c/i\u003e\n corresponds to array index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ctt\u003earrayOffset()\u003c/tt\u003e.\n\n \u003cp\u003e Invoke the {@link #hasArray hasArray} method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compact","comment":"Compacts this buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e The bytes between the buffer\u0027s current position and its limit,\n if any, are copied to the beginning of the buffer.  That is, the\n byte at index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003d\u0026nbsp;\u003ctt\u003eposition()\u003c/tt\u003e is copied\n to index zero, the byte at index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;+\u0026nbsp;1 is copied\n to index one, and so forth until the byte at index\n \u003ctt\u003elimit()\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;1 is copied to index\n \u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003d\u0026nbsp;\u003ctt\u003elimit()\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ci\u003ep\u003c/i\u003e.\n The buffer\u0027s position is then set to \u003ci\u003en+1\u003c/i\u003e and its limit is set to\n its capacity.  The mark, if defined, is discarded.\n\n \u003cp\u003e The buffer\u0027s position is set to the number of bytes copied,\n rather than to zero, so that an invocation of this method can be\n followed immediately by an invocation of another relative \u003ci\u003eput\u003c/i\u003e\n method. \u003c/p\u003e\n\n\n\n \u003cp\u003e Invoke this method after writing data from a buffer in case the\n write was incomplete.  The following loop, for example, copies bytes\n from one channel to another via the buffer \u003ctt\u003ebuf\u003c/tt\u003e:\n\n \u003cblockquote\u003e\u003cpre\u003e{@code\n   buf.clear();          // Prepare buffer for use\n   while (in.read(buf) \u003e\u003d 0 || buf.position !\u003d 0) {\n       buf.flip();\n       out.write(buf);\n       buf.compact();    // In case of partial write\n   }\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isDirect","comment":"Tells whether or not this byte buffer is direct.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string summarizing the state of this buffer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns the current hash code of this buffer.\n\n \u003cp\u003e The hash code of a byte buffer depends only upon its remaining\n elements; that is, upon the elements from \u003ctt\u003eposition()\u003c/tt\u003e up to, and\n including, the element at \u003ctt\u003elimit()\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e.\n\n \u003cp\u003e Because buffer hash codes are content-dependent, it is inadvisable\n to use buffers as keys in hash maps or similar data structures unless it\n is known that their contents will not change.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Tells whether or not this buffer is equal to another object.\n\n \u003cp\u003e Two byte buffers are equal if, and only if,\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e They have the same element type,  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e They have the same number of remaining elements, and\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The two sequences of remaining elements, considered\n   independently of their starting positions, are pointwise equal.\n\n\n\n\n\n\n\n   \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e A byte buffer is not equal to any other type of object.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ob","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this buffer to another.\n\n \u003cp\u003e Two byte buffers are compared by comparing their sequences of\n remaining elements lexicographically, without regard to the starting\n position of each sequence within its corresponding buffer.\n\n\n\n\n\n\n\n\n Pairs of {@code byte} elements are compared as if by invoking\n {@link Byte#compare(byte,byte)}.\n\n\n \u003cp\u003e A byte buffer is not comparable to any other type of object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"that","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"order","comment":"Retrieves this buffer\u0027s byte order.\n\n \u003cp\u003e The byte order is used when reading or writing multibyte values, and\n when creating buffers that are views of this byte buffer.  The order of\n a newly-created byte buffer is always {@link ByteOrder#BIG_ENDIAN\n BIG_ENDIAN}.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ByteOrder","qualifiedName":"java.nio.ByteOrder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"order","comment":"Modifies this buffer\u0027s byte order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteOrder)","flatSignature":"(ByteOrder)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bo","type":{"isPrimitive":false,"simpleName":"ByteOrder","qualifiedName":"java.nio.ByteOrder","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChar","comment":"Relative \u003ci\u003eget\u003c/i\u003e method for reading a char value.\n\n \u003cp\u003e Reads the next two bytes at this buffer\u0027s current position,\n composing them into a char value according to the current byte order,\n and then increments the position by two.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putChar","comment":"Relative \u003ci\u003eput\u003c/i\u003e method for writing a char\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes two bytes containing the given char value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by two.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChar","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method for reading a char value.\n\n \u003cp\u003e Reads two bytes at the given index, composing them into a\n char value according to the current byte order.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putChar","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method for writing a char\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes two bytes containing the given char value, in the\n current byte order, into this buffer at the given index.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, char)","flatSignature":"(int, char)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asCharBuffer","comment":"Creates a view of this byte buffer as a char buffer.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n two, and its mark will be undefined.  The new buffer will be direct\n if, and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CharBuffer","qualifiedName":"java.nio.CharBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getShort","comment":"Relative \u003ci\u003eget\u003c/i\u003e method for reading a short value.\n\n \u003cp\u003e Reads the next two bytes at this buffer\u0027s current position,\n composing them into a short value according to the current byte order,\n and then increments the position by two.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putShort","comment":"Relative \u003ci\u003eput\u003c/i\u003e method for writing a short\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes two bytes containing the given short value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by two.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getShort","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method for reading a short value.\n\n \u003cp\u003e Reads two bytes at the given index, composing them into a\n short value according to the current byte order.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putShort","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method for writing a short\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes two bytes containing the given short value, in the\n current byte order, into this buffer at the given index.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, short)","flatSignature":"(int, short)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asShortBuffer","comment":"Creates a view of this byte buffer as a short buffer.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n two, and its mark will be undefined.  The new buffer will be direct\n if, and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ShortBuffer","qualifiedName":"java.nio.ShortBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getInt","comment":"Relative \u003ci\u003eget\u003c/i\u003e method for reading an int value.\n\n \u003cp\u003e Reads the next four bytes at this buffer\u0027s current position,\n composing them into an int value according to the current byte order,\n and then increments the position by four.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putInt","comment":"Relative \u003ci\u003eput\u003c/i\u003e method for writing an int\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes four bytes containing the given int value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by four.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInt","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method for reading an int value.\n\n \u003cp\u003e Reads four bytes at the given index, composing them into a\n int value according to the current byte order.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putInt","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method for writing an int\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes four bytes containing the given int value, in the\n current byte order, into this buffer at the given index.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asIntBuffer","comment":"Creates a view of this byte buffer as an int buffer.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n four, and its mark will be undefined.  The new buffer will be direct\n if, and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IntBuffer","qualifiedName":"java.nio.IntBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLong","comment":"Relative \u003ci\u003eget\u003c/i\u003e method for reading a long value.\n\n \u003cp\u003e Reads the next eight bytes at this buffer\u0027s current position,\n composing them into a long value according to the current byte order,\n and then increments the position by eight.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putLong","comment":"Relative \u003ci\u003eput\u003c/i\u003e method for writing a long\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes eight bytes containing the given long value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by eight.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method for reading a long value.\n\n \u003cp\u003e Reads eight bytes at the given index, composing them into a\n long value according to the current byte order.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putLong","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method for writing a long\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes eight bytes containing the given long value, in the\n current byte order, into this buffer at the given index.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, long)","flatSignature":"(int, long)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asLongBuffer","comment":"Creates a view of this byte buffer as a long buffer.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n eight, and its mark will be undefined.  The new buffer will be direct\n if, and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFloat","comment":"Relative \u003ci\u003eget\u003c/i\u003e method for reading a float value.\n\n \u003cp\u003e Reads the next four bytes at this buffer\u0027s current position,\n composing them into a float value according to the current byte order,\n and then increments the position by four.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putFloat","comment":"Relative \u003ci\u003eput\u003c/i\u003e method for writing a float\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes four bytes containing the given float value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by four.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFloat","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method for reading a float value.\n\n \u003cp\u003e Reads four bytes at the given index, composing them into a\n float value according to the current byte order.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putFloat","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method for writing a float\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes four bytes containing the given float value, in the\n current byte order, into this buffer at the given index.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, float)","flatSignature":"(int, float)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asFloatBuffer","comment":"Creates a view of this byte buffer as a float buffer.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n four, and its mark will be undefined.  The new buffer will be direct\n if, and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FloatBuffer","qualifiedName":"java.nio.FloatBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDouble","comment":"Relative \u003ci\u003eget\u003c/i\u003e method for reading a double value.\n\n \u003cp\u003e Reads the next eight bytes at this buffer\u0027s current position,\n composing them into a double value according to the current byte order,\n and then increments the position by eight.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putDouble","comment":"Relative \u003ci\u003eput\u003c/i\u003e method for writing a double\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes eight bytes containing the given double value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by eight.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDouble","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method for reading a double value.\n\n \u003cp\u003e Reads eight bytes at the given index, composing them into a\n double value according to the current byte order.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putDouble","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method for writing a double\n value\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes eight bytes containing the given double value, in the\n current byte order, into this buffer at the given index.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, double)","flatSignature":"(int, double)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asDoubleBuffer","comment":"Creates a view of this byte buffer as a double buffer.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n eight, and its mark will be undefined.  The new buffer will be direct\n if, and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DoubleBuffer","qualifiedName":"java.nio.DoubleBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.nio.MappedByteBuffer"],"enumConstants":[]}