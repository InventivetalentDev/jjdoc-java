{"name":"UserDefinedFileAttributeView","comment":"A file attribute view that provides a view of a file\u0027s user-defined\n attributes, sometimes known as \u003cem\u003eextended attributes\u003c/em\u003e. User-defined\n file attributes are used to store metadata with a file that is not meaningful\n to the file system. It is primarily intended for file system implementations\n that support such a capability directly but may be emulated. The details of\n such emulation are highly implementation specific and therefore not specified.\n\n \u003cp\u003e This {@code FileAttributeView} provides a view of a file\u0027s user-defined\n attributes as a set of name/value pairs, where the attribute name is\n represented by a {@code String}. An implementation may require to encode and\n decode from the platform or file system representation when accessing the\n attribute. The value has opaque content. This attribute view defines the\n {@link #read read} and {@link #write write} methods to read the value into\n or write from a {@link ByteBuffer}. This {@code FileAttributeView} is not\n intended for use where the size of an attribute value is larger than {@link\n Integer#MAX_VALUE}.\n\n \u003cp\u003e User-defined attributes may be used in some implementations to store\n security related attributes so consequently, in the case of the default\n provider at least, all methods that access user-defined attributes require the\n {@code RuntimePermission(\"accessUserDefinedAttributes\")} permission when a\n security manager is installed.\n\n \u003cp\u003e The {@link java.nio.file.FileStore#supportsFileAttributeView\n supportsFileAttributeView} method may be used to test if a specific {@link\n java.nio.file.FileStore FileStore} supports the storage of user-defined\n attributes.\n\n \u003cp\u003e Where dynamic access to file attributes is required, the {@link\n java.nio.file.Files#getAttribute getAttribute} method may be used to read\n the attribute value. The attribute value is returned as a byte array (byte[]).\n The {@link java.nio.file.Files#setAttribute setAttribute} method may be used\n to write the value of a user-defined attribute from a buffer (as if by\n invoking the {@link #write write} method), or byte array (byte[]).","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"UserDefinedFileAttributeView","qualifiedName":"java.nio.file.attribute.UserDefinedFileAttributeView","dimension":"","elementType":{},"package":"java.nio.file.attribute","interfaces":["java.nio.file.attribute.FileAttributeView"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"name","comment":"Returns the name of this attribute view. Attribute views of this type\n have the name {@code \"user\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"list","comment":"Returns a list containing the names of the user-defined attributes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"Returns the size of the value of a user-defined attribute.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Read the value of a user-defined attribute into a buffer.\n\n \u003cp\u003e This method reads the value of the attribute into the given buffer\n as a sequence of bytes, failing if the number of bytes remaining in\n the buffer is insufficient to read the complete attribute value. The\n number of bytes transferred into the buffer is {@code n}, where {@code n}\n is the size of the attribute value. The first byte in the sequence is at\n index {@code p} and the last byte is at index {@code p + n - 1}, where\n {@code p} is the buffer\u0027s position. Upon return the buffer\u0027s position\n will be equal to {@code p + n}; its limit will not have changed.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n Suppose we want to read a file\u0027s MIME type that is stored as a user-defined\n attribute with the name \"{@code user.mimetype}\".\n \u003cpre\u003e\n    UserDefinedFileAttributeView view \u003d\n        Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n    String name \u003d \"user.mimetype\";\n    ByteBuffer buf \u003d ByteBuffer.allocate(view.size(name));\n    view.read(name, buf);\n    buf.flip();\n    String value \u003d Charset.defaultCharset().decode(buf).toString();\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.nio.ByteBuffer)","flatSignature":"(String, ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes the value of a user-defined attribute from a buffer.\n\n \u003cp\u003e This method writes the value of the attribute from a given buffer as\n a sequence of bytes. The size of the value to transfer is {@code r},\n where {@code r} is the number of bytes remaining in the buffer, that is\n {@code src.remaining()}. The sequence of bytes is transferred from the\n buffer starting at index {@code p}, where {@code p} is the buffer\u0027s\n position. Upon return, the buffer\u0027s position will be equal to {@code\n p + n}, where {@code n} is the number of bytes transferred; its limit\n will not have changed.\n\n \u003cp\u003e If an attribute of the given name already exists then its value is\n replaced. If the attribute does not exist then it is created. If it\n implementation specific if a test to check for the existence of the\n attribute and the creation of attribute are atomic with respect to other\n file system activities.\n\n \u003cp\u003e Where there is insufficient space to store the attribute, or the\n attribute name or value exceed an implementation specific maximum size\n then an {@code IOException} is thrown.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n Suppose we want to write a file\u0027s MIME type as a user-defined attribute:\n \u003cpre\u003e\n    UserDefinedFileAttributeView view \u003d\n        FIles.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n    view.write(\"user.mimetype\", Charset.defaultCharset().encode(\"text/html\"));\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.nio.ByteBuffer)","flatSignature":"(String, ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"delete","comment":"Deletes a user-defined attribute.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}