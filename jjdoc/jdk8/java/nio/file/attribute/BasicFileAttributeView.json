{"name":"BasicFileAttributeView","comment":"A file attribute view that provides a view of a \u003cem\u003ebasic set\u003c/em\u003e of file\n attributes common to many file systems. The basic set of file attributes\n consist of \u003cem\u003emandatory\u003c/em\u003e and \u003cem\u003eoptional\u003c/em\u003e file attributes as\n defined by the {@link BasicFileAttributes} interface.\n\n \u003cp\u003e The file attributes are retrieved from the file system as a \u003cem\u003ebulk\n operation\u003c/em\u003e by invoking the {@link #readAttributes() readAttributes} method.\n This class also defines the {@link #setTimes setTimes} method to update the\n file\u0027s time attributes.\n\n \u003cp\u003e Where dynamic access to file attributes is required, the attributes\n supported by this attribute view have the following names and types:\n \u003cblockquote\u003e\n  \u003ctable border\u003d\"1\" cellpadding\u003d\"8\" summary\u003d\"Supported attributes\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003e Name \u003c/th\u003e\n     \u003cth\u003e Type \u003c/th\u003e\n   \u003c/tr\u003e\n  \u003ctr\u003e\n     \u003ctd\u003e \"lastModifiedTime\" \u003c/td\u003e\n     \u003ctd\u003e {@link FileTime} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"lastAccessTime\" \u003c/td\u003e\n     \u003ctd\u003e {@link FileTime} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"creationTime\" \u003c/td\u003e\n     \u003ctd\u003e {@link FileTime} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"size\" \u003c/td\u003e\n     \u003ctd\u003e {@link Long} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"isRegularFile\" \u003c/td\u003e\n     \u003ctd\u003e {@link Boolean} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"isDirectory\" \u003c/td\u003e\n     \u003ctd\u003e {@link Boolean} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"isSymbolicLink\" \u003c/td\u003e\n     \u003ctd\u003e {@link Boolean} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"isOther\" \u003c/td\u003e\n     \u003ctd\u003e {@link Boolean} \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"fileKey\" \u003c/td\u003e\n     \u003ctd\u003e {@link Object} \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e The {@link java.nio.file.Files#getAttribute getAttribute} method may be\n used to read any of these attributes as if by invoking the {@link\n #readAttributes() readAttributes()} method.\n\n \u003cp\u003e The {@link java.nio.file.Files#setAttribute setAttribute} method may be\n used to update the file\u0027s last modified time, last access time or create time\n attributes as if by invoking the {@link #setTimes setTimes} method.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"BasicFileAttributeView","qualifiedName":"java.nio.file.attribute.BasicFileAttributeView","dimension":"","elementType":{},"package":"java.nio.file.attribute","interfaces":["java.nio.file.attribute.FileAttributeView"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"name","comment":"Returns the name of the attribute view. Attribute views of this type\n have the name {@code \"basic\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readAttributes","comment":"Reads the basic file attributes as a bulk operation.\n\n \u003cp\u003e It is implementation specific if all file attributes are read as an\n atomic operation with respect to other file system operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BasicFileAttributes","qualifiedName":"java.nio.file.attribute.BasicFileAttributes","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTimes","comment":"Updates any or all of the file\u0027s last modified time, last access time,\n and create time attributes.\n\n \u003cp\u003e This method updates the file\u0027s timestamp attributes. The values are\n converted to the epoch and precision supported by the file system.\n Converting from finer to coarser granularities result in precision loss.\n The behavior of this method when attempting to set a timestamp that is\n not supported or to a value that is outside the range supported by the\n underlying file store is not defined. It may or not fail by throwing an\n {@code IOException}.\n\n \u003cp\u003e If any of the {@code lastModifiedTime}, {@code lastAccessTime},\n or {@code createTime} parameters has the value {@code null} then the\n corresponding timestamp is not changed. An implementation may require to\n read the existing values of the file attributes when only some, but not\n all, of the timestamp attributes are updated. Consequently, this method\n may not be an atomic operation with respect to other file system\n operations. Reading and re-writing existing values may also result in\n precision loss. If all of the {@code lastModifiedTime}, {@code\n lastAccessTime} and {@code createTime} parameters are {@code null} then\n this method has no effect.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n Suppose we want to change a file\u0027s last access time.\n \u003cpre\u003e\n    Path path \u003d ...\n    FileTime time \u003d ...\n    Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, time, null);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime)","flatSignature":"(FileTime, FileTime, FileTime)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"lastModifiedTime","type":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}}},{"name":"lastAccessTime","type":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}}},{"name":"createTime","type":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.file.attribute.PosixFileAttributeView","java.nio.file.attribute.DosFileAttributeView"],"enumConstants":[]}