{"name":"BasicFileAttributes","comment":"Basic attributes associated with a file in a file system.\n\n \u003cp\u003e Basic file attributes are attributes that are common to many file systems\n and consist of mandatory and optional file attributes as defined by this\n interface.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n \u003cpre\u003e\n    Path file \u003d ...\n    BasicFileAttributes attrs \u003d Files.readAttributes(file, BasicFileAttributes.class);\n \u003c/pre\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"BasicFileAttributes","qualifiedName":"java.nio.file.attribute.BasicFileAttributes","dimension":"","elementType":{},"package":"java.nio.file.attribute","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"lastModifiedTime","comment":"Returns the time of last modification.\n\n \u003cp\u003e If the file system implementation does not support a time stamp\n to indicate the time of last modification then this method returns an\n implementation specific default value, typically a {@code FileTime}\n representing the epoch (1970-01-01T00:00:00Z).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastAccessTime","comment":"Returns the time of last access.\n\n \u003cp\u003e If the file system implementation does not support a time stamp\n to indicate the time of last access then this method returns\n an implementation specific default value, typically the {@link\n #lastModifiedTime() last-modified-time} or a {@code FileTime}\n representing the epoch (1970-01-01T00:00:00Z).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"creationTime","comment":"Returns the creation time. The creation time is the time that the file\n was created.\n\n \u003cp\u003e If the file system implementation does not support a time stamp\n to indicate the time when the file was created then this method returns\n an implementation specific default value, typically the {@link\n #lastModifiedTime() last-modified-time} or a {@code FileTime}\n representing the epoch (1970-01-01T00:00:00Z).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isRegularFile","comment":"Tells whether the file is a regular file with opaque content.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isDirectory","comment":"Tells whether the file is a directory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSymbolicLink","comment":"Tells whether the file is a symbolic link.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isOther","comment":"Tells whether the file is something other than a regular file, directory,\n or symbolic link.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"Returns the size of the file (in bytes). The size may differ from the\n actual size on the file system due to compression, support for sparse\n files, or other reasons. The size of files that are not {@link\n #isRegularFile regular} files is implementation specific and\n therefore unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"fileKey","comment":"Returns an object that uniquely identifies the given file, or {@code\n null} if a file key is not available. On some platforms or file systems\n it is possible to use an identifier, or a combination of identifiers to\n uniquely identify a file. Such identifiers are important for operations\n such as file tree traversal in file systems that support \u003ca\n href\u003d\"../package-summary.html#links\"\u003esymbolic links\u003c/a\u003e or file systems\n that allow a file to be an entry in more than one directory. On UNIX file\n systems, for example, the \u003cem\u003edevice ID\u003c/em\u003e and \u003cem\u003einode\u003c/em\u003e are\n commonly used for such purposes.\n\n \u003cp\u003e The file key returned by this method can only be guaranteed to be\n unique if the file system and files remain static. Whether a file system\n re-uses identifiers after a file is deleted is implementation dependent and\n therefore unspecified.\n\n \u003cp\u003e File keys returned by this method can be compared for equality and are\n suitable for use in collections. If the file system and files remain static,\n and two files are the {@link java.nio.file.Files#isSameFile same} with\n non-{@code null} file keys, then their file keys are equal.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.file.attribute.PosixFileAttributes","java.nio.file.attribute.DosFileAttributes"],"enumConstants":[]}