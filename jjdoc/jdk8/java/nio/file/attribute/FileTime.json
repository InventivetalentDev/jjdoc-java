{"name":"FileTime","comment":"Represents the value of a file\u0027s time stamp attribute. For example, it may\n represent the time that the file was last\n {@link BasicFileAttributes#lastModifiedTime() modified},\n {@link BasicFileAttributes#lastAccessTime() accessed},\n or {@link BasicFileAttributes#creationTime() created}.\n\n \u003cp\u003e Instances of this class are immutable.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{},"package":"java.nio.file.attribute","superclass":"java.lang.Object","interfaces":["java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"from","comment":"Returns a {@code FileTime} representing a value at the given unit of\n granularity.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"fromMillis","comment":"Returns a {@code FileTime} representing the given value in milliseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"from","comment":"Returns a {@code FileTime} representing the same point of time value\n on the time-line as the provided {@code Instant} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant)","flatSignature":"(Instant)","returnType":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"to","comment":"Returns the value at the given unit of granularity.\n\n \u003cp\u003e Conversion from a coarser granularity that would numerically overflow\n saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}\n if positive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.TimeUnit)","flatSignature":"(TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toMillis","comment":"Returns the value in milliseconds.\n\n \u003cp\u003e Conversion from a coarser granularity that would numerically overflow\n saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}\n if positive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toInstant","comment":"Converts this {@code FileTime} object to an {@code Instant}.\n\n \u003cp\u003e The conversion creates an {@code Instant} that represents the\n same point on the time-line as this {@code FileTime}.\n\n \u003cp\u003e {@code FileTime} can store points on the time-line further in the\n future and further in the past than {@code Instant}. Conversion\n from such further time points saturates to {@link Instant#MIN} if\n earlier than {@code Instant.MIN} or {@link Instant#MAX} if later\n than {@code Instant.MAX}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Tests this {@code FileTime} for equality with the given object.\n\n \u003cp\u003e The result is {@code true} if and only if the argument is not {@code\n null} and is a {@code FileTime} that represents the same time. This\n method satisfies the general contract of the {@code Object.equals} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Computes a hash code for this file time.\n\n \u003cp\u003e The hash code is based upon the value represented, and satisfies the\n general contract of the {@link Object#hashCode} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compareTo","comment":"Compares the value of two {@code FileTime} objects for order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.attribute.FileTime)","flatSignature":"(FileTime)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"FileTime","qualifiedName":"java.nio.file.attribute.FileTime","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns the string representation of this {@code FileTime}. The string\n is returned in the \u003ca\n href\u003d\"http://www.w3.org/TR/NOTE-datetime\"\u003eISO\u0026nbsp;8601\u003c/a\u003e format:\n \u003cpre\u003e\n     YYYY-MM-DDThh:mm:ss[.s+]Z\n \u003c/pre\u003e\n where \"{@code [.s+]}\" represents a dot followed by one of more digits\n for the decimal fraction of a second. It is only present when the decimal\n fraction of a second is not zero. For example, {@code\n FileTime.fromMillis(1234567890000L).toString()} yields {@code\n \"2009-02-13T23:31:30Z\"}, and {@code FileTime.fromMillis(1234567890123L).toString()}\n yields {@code \"2009-02-13T23:31:30.123Z\"}.\n\n \u003cp\u003e A {@code FileTime} is primarily intended to represent the value of a\n file\u0027s time stamp. Where used to represent \u003ci\u003eextreme values\u003c/i\u003e, where\n the year is less than \"{@code 0001}\" or greater than \"{@code 9999}\" then\n this method deviates from ISO 8601 in the same manner as the\n \u003ca href\u003d\"http://www.w3.org/TR/xmlschema-2/#deviantformats\"\u003eXML Schema\n language\u003c/a\u003e. That is, the year may be expanded to more than four digits\n and may be negative-signed. If more than four digits then leading zeros\n are not present. The year before \"{@code 0001}\" is \"{@code -0001}\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}