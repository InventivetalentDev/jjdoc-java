{"name":"PosixFileAttributeView","comment":"A file attribute view that provides a view of the file attributes commonly\n associated with files on file systems used by operating systems that implement\n the Portable Operating System Interface (POSIX) family of standards.\n\n \u003cp\u003e Operating systems that implement the \u003ca href\u003d\"http://www.opengroup.org\"\u003e\n POSIX\u003c/a\u003e family of standards commonly use file systems that have a\n file \u003cem\u003eowner\u003c/em\u003e, \u003cem\u003egroup-owner\u003c/em\u003e, and related \u003cem\u003eaccess\n permissions\u003c/em\u003e. This file attribute view provides read and write access\n to these attributes.\n\n \u003cp\u003e The {@link #readAttributes() readAttributes} method is used to read the\n file\u0027s attributes. The file {@link PosixFileAttributes#owner() owner} is\n represented by a {@link UserPrincipal} that is the identity of the file owner\n for the purposes of access control. The {@link PosixFileAttributes#group()\n group-owner}, represented by a {@link GroupPrincipal}, is the identity of the\n group owner, where a group is an identity created for administrative purposes\n so as to determine the access rights for the members of the group.\n\n \u003cp\u003e The {@link PosixFileAttributes#permissions() permissions} attribute is a\n set of access permissions. This file attribute view provides access to the nine\n permission defined by the {@link PosixFilePermission} class.\n These nine permission bits determine the \u003cem\u003eread\u003c/em\u003e, \u003cem\u003ewrite\u003c/em\u003e, and\n \u003cem\u003eexecute\u003c/em\u003e access for the file owner, group, and others (others\n meaning identities other than the owner and members of the group). Some\n operating systems and file systems may provide additional permission bits\n but access to these other bits is not defined by this class in this release.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n Suppose we need to print out the owner and access permissions of a file:\n \u003cpre\u003e\n     Path file \u003d ...\n     PosixFileAttributes attrs \u003d Files.getFileAttributeView(file, PosixFileAttributeView.class)\n         .readAttributes();\n     System.out.format(\"%s %s%n\",\n         attrs.owner().getName(),\n         PosixFilePermissions.toString(attrs.permissions()));\n \u003c/pre\u003e\n\n \u003ch2\u003e Dynamic Access \u003c/h2\u003e\n \u003cp\u003e Where dynamic access to file attributes is required, the attributes\n supported by this attribute view are as defined by {@link\n BasicFileAttributeView} and {@link FileOwnerAttributeView}, and in addition,\n the following attributes are supported:\n \u003cblockquote\u003e\n \u003ctable border\u003d\"1\" cellpadding\u003d\"8\" summary\u003d\"Supported attributes\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003e Name \u003c/th\u003e\n     \u003cth\u003e Type \u003c/th\u003e\n   \u003c/tr\u003e\n  \u003ctr\u003e\n     \u003ctd\u003e \"permissions\" \u003c/td\u003e\n     \u003ctd\u003e {@link Set}\u0026lt;{@link PosixFilePermission}\u0026gt; \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"group\" \u003c/td\u003e\n     \u003ctd\u003e {@link GroupPrincipal} \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e The {@link Files#getAttribute getAttribute} method may be used to read\n any of these attributes, or any of the attributes defined by {@link\n BasicFileAttributeView} as if by invoking the {@link #readAttributes\n readAttributes()} method.\n\n \u003cp\u003e The {@link Files#setAttribute setAttribute} method may be used to update\n the file\u0027s last modified time, last access time or create time attributes as\n defined by {@link BasicFileAttributeView}. It may also be used to update\n the permissions, owner, or group-owner as if by invoking the {@link\n #setPermissions setPermissions}, {@link #setOwner setOwner}, and {@link\n #setGroup setGroup} methods respectively.\n\n \u003ch2\u003e Setting Initial Permissions \u003c/h2\u003e\n \u003cp\u003e Implementations supporting this attribute view may also support setting\n the initial permissions when creating a file or directory. The\n initial permissions are provided to the {@link Files#createFile createFile}\n or {@link Files#createDirectory createDirectory} methods as a {@link\n FileAttribute} with {@link FileAttribute#name name} {@code \"posix:permissions\"}\n and a {@link FileAttribute#value value} that is the set of permissions. The\n following example uses the {@link PosixFilePermissions#asFileAttribute\n asFileAttribute} method to construct a {@code FileAttribute} when creating a\n file:\n\n \u003cpre\u003e\n     Path path \u003d ...\n     Set\u0026lt;PosixFilePermission\u0026gt; perms \u003d\n         EnumSet.of(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE, GROUP_READ);\n     Files.createFile(path, PosixFilePermissions.asFileAttribute(perms));\n \u003c/pre\u003e\n\n \u003cp\u003e When the access permissions are set at file creation time then the actual\n value of the permissions may differ that the value of the attribute object.\n The reasons for this are implementation specific. On UNIX systems, for\n example, a process has a \u003cem\u003eumask\u003c/em\u003e that impacts the permission bits\n of newly created files. Where an implementation supports the setting of\n the access permissions, and the underlying file system supports access\n permissions, then it is required that the value of the actual access\n permissions will be equal or less than the value of the attribute\n provided to the {@link Files#createFile createFile} or {@link\n Files#createDirectory createDirectory} methods. In other words, the file may\n be more secure than requested.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"PosixFileAttributeView","qualifiedName":"java.nio.file.attribute.PosixFileAttributeView","dimension":"","elementType":{},"package":"java.nio.file.attribute","interfaces":["java.nio.file.attribute.BasicFileAttributeView","java.nio.file.attribute.FileOwnerAttributeView"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"name","comment":"Returns the name of the attribute view. Attribute views of this type\n have the name {@code \"posix\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readAttributes","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PosixFileAttributes","qualifiedName":"java.nio.file.attribute.PosixFileAttributes","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPermissions","comment":"Updates the file permissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Set\u003cjava.nio.file.attribute.PosixFilePermission\u003e)","flatSignature":"(Set\u003cPosixFilePermission\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"perms","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setGroup","comment":"Updates the file group-owner.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.attribute.GroupPrincipal)","flatSignature":"(GroupPrincipal)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"GroupPrincipal","qualifiedName":"java.nio.file.attribute.GroupPrincipal","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}