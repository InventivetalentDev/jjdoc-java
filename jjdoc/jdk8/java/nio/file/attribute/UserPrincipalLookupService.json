{"name":"UserPrincipalLookupService","comment":"An object to lookup user and group principals by name. A {@link UserPrincipal}\n represents an identity that may be used to determine access rights to objects\n in a file system. A {@link GroupPrincipal} represents a \u003cem\u003egroup identity\u003c/em\u003e.\n A {@code UserPrincipalLookupService} defines methods to lookup identities by\n name or group name (which are typically user or account names). Whether names\n and group names are case sensitive or not depends on the implementation.\n The exact definition of a group is implementation specific but typically a\n group represents an identity created for administrative purposes so as to\n determine the access rights for the members of the group. In particular it is\n implementation specific if the \u003cem\u003enamespace\u003c/em\u003e for names and groups is the\n same or is distinct. To ensure consistent and correct behavior across\n platforms it is recommended that this API be used as if the namespaces are\n distinct. In other words, the {@link #lookupPrincipalByName\n lookupPrincipalByName} should be used to lookup users, and {@link\n #lookupPrincipalByGroupName lookupPrincipalByGroupName} should be used to\n lookup groups.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"UserPrincipalLookupService","qualifiedName":"java.nio.file.attribute.UserPrincipalLookupService","dimension":"","elementType":{},"package":"java.nio.file.attribute","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"lookupPrincipalByName","comment":"Lookup a user principal by name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"UserPrincipal","qualifiedName":"java.nio.file.attribute.UserPrincipal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lookupPrincipalByGroupName","comment":"Lookup a group principal by group name.\n\n \u003cp\u003e Where an implementation does not support any notion of group then\n this method always throws {@link UserPrincipalNotFoundException}. Where\n the namespace for user accounts and groups is the same, then this method\n is identical to invoking {@link #lookupPrincipalByName\n lookupPrincipalByName}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"GroupPrincipal","qualifiedName":"java.nio.file.attribute.GroupPrincipal","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}