{"name":"AclFileAttributeView","comment":"A file attribute view that supports reading or updating a file\u0027s Access\n Control Lists (ACL) or file owner attributes.\n\n \u003cp\u003e ACLs are used to specify access rights to file system objects. An ACL is\n an ordered list of {@link AclEntry access-control-entries}, each specifying a\n {@link UserPrincipal} and the level of access for that user principal. This\n file attribute view defines the {@link #getAcl() getAcl}, and {@link\n #setAcl(List) setAcl} methods to read and write ACLs based on the ACL\n model specified in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3530.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;3530:\n Network File System (NFS) version 4 Protocol\u003c/i\u003e\u003c/a\u003e. This file attribute view\n is intended for file system implementations that support the NFSv4 ACL model\n or have a \u003cem\u003ewell-defined\u003c/em\u003e mapping between the NFSv4 ACL model and the ACL\n model used by the file system. The details of such mapping are implementation\n dependent and are therefore unspecified.\n\n \u003cp\u003e This class also extends {@code FileOwnerAttributeView} so as to define\n methods to get and set the file owner.\n\n \u003cp\u003e When a file system provides access to a set of {@link FileStore\n file-systems} that are not homogeneous then only some of the file systems may\n support ACLs. The {@link FileStore#supportsFileAttributeView\n supportsFileAttributeView} method can be used to test if a file system\n supports ACLs.\n\n \u003ch2\u003eInteroperability\u003c/h2\u003e\n\n RFC\u0026nbsp;3530 allows for special user identities to be used on platforms that\n support the POSIX defined access permissions. The special user identities\n are \"{@code OWNER@}\", \"{@code GROUP@}\", and \"{@code EVERYONE@}\". When both\n the {@code AclFileAttributeView} and the {@link PosixFileAttributeView}\n are supported then these special user identities may be included in ACL {@link\n AclEntry entries} that are read or written. The file system\u0027s {@link\n UserPrincipalLookupService} may be used to obtain a {@link UserPrincipal}\n to represent these special identities by invoking the {@link\n UserPrincipalLookupService#lookupPrincipalByName lookupPrincipalByName}\n method.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n Suppose we wish to add an entry to an existing ACL to grant \"joe\" access:\n \u003cpre\u003e\n     // lookup \"joe\"\n     UserPrincipal joe \u003d file.getFileSystem().getUserPrincipalLookupService()\n         .lookupPrincipalByName(\"joe\");\n\n     // get view\n     AclFileAttributeView view \u003d Files.getFileAttributeView(file, AclFileAttributeView.class);\n\n     // create ACE to give \"joe\" read access\n     AclEntry entry \u003d AclEntry.newBuilder()\n         .setType(AclEntryType.ALLOW)\n         .setPrincipal(joe)\n         .setPermissions(AclEntryPermission.READ_DATA, AclEntryPermission.READ_ATTRIBUTES)\n         .build();\n\n     // read ACL, insert ACE, re-write ACL\n     List\u0026lt;AclEntry\u0026gt; acl \u003d view.getAcl();\n     acl.add(0, entry);   // insert before any DENY entries\n     view.setAcl(acl);\n \u003c/pre\u003e\n\n \u003ch2\u003e Dynamic Access \u003c/h2\u003e\n \u003cp\u003e Where dynamic access to file attributes is required, the attributes\n supported by this attribute view are as follows:\n \u003cblockquote\u003e\n \u003ctable border\u003d\"1\" cellpadding\u003d\"8\" summary\u003d\"Supported attributes\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003e Name \u003c/th\u003e\n     \u003cth\u003e Type \u003c/th\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"acl\" \u003c/td\u003e\n     \u003ctd\u003e {@link List}\u0026lt;{@link AclEntry}\u0026gt; \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e \"owner\" \u003c/td\u003e\n     \u003ctd\u003e {@link UserPrincipal} \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e The {@link Files#getAttribute getAttribute} method may be used to read\n the ACL or owner attributes as if by invoking the {@link #getAcl getAcl} or\n {@link #getOwner getOwner} methods.\n\n \u003cp\u003e The {@link Files#setAttribute setAttribute} method may be used to\n update the ACL or owner attributes as if by invoking the {@link #setAcl setAcl}\n or {@link #setOwner setOwner} methods.\n\n \u003ch2\u003e Setting the ACL when creating a file \u003c/h2\u003e\n\n \u003cp\u003e Implementations supporting this attribute view may also support setting\n the initial ACL when creating a file or directory. The initial ACL\n may be provided to methods such as {@link Files#createFile createFile} or {@link\n Files#createDirectory createDirectory} as an {@link FileAttribute} with {@link\n FileAttribute#name name} {@code \"acl:acl\"} and a {@link FileAttribute#value\n value} that is the list of {@code AclEntry} objects.\n\n \u003cp\u003e Where an implementation supports an ACL model that differs from the NFSv4\n defined ACL model then setting the initial ACL when creating the file must\n translate the ACL to the model supported by the file system. Methods that\n create a file should reject (by throwing {@link IOException IOException})\n any attempt to create a file that would be less secure as a result of the\n translation.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"AclFileAttributeView","qualifiedName":"java.nio.file.attribute.AclFileAttributeView","dimension":"","elementType":{},"package":"java.nio.file.attribute","interfaces":["java.nio.file.attribute.FileOwnerAttributeView"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"name","comment":"Returns the name of the attribute view. Attribute views of this type\n have the name {@code \"acl\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAcl","comment":"Reads the access control list.\n\n \u003cp\u003e When the file system uses an ACL model that differs from the NFSv4\n defined ACL model, then this method returns an ACL that is the translation\n of the ACL to the NFSv4 ACL model.\n\n \u003cp\u003e The returned list is modifiable so as to facilitate changes to the\n existing ACL. The {@link #setAcl setAcl} method is used to update\n the file\u0027s ACL attribute.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setAcl","comment":"Updates (replace) the access control list.\n\n \u003cp\u003e Where the file system supports Access Control Lists, and it uses an\n ACL model that differs from the NFSv4 defined ACL model, then this method\n must translate the ACL to the model supported by the file system. This\n method should reject (by throwing {@link IOException IOException}) any\n attempt to write an ACL that would appear to make the file more secure\n than would be the case if the ACL were updated. Where an implementation\n does not support a mapping of {@link AclEntryType#AUDIT} or {@link\n AclEntryType#ALARM} entries, then this method ignores these entries when\n writing the ACL.\n\n \u003cp\u003e If an ACL entry contains a {@link AclEntry#principal user-principal}\n that is not associated with the same provider as this attribute view then\n {@link ProviderMismatchException} is thrown. Additional validation, if\n any, is implementation dependent.\n\n \u003cp\u003e If the file system supports other security related file attributes\n (such as a file {@link PosixFileAttributes#permissions\n access-permissions} for example), the updating the access control list\n may also cause these security related attributes to be updated.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.nio.file.attribute.AclEntry\u003e)","flatSignature":"(List\u003cAclEntry\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"acl","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}