{"name":"FileVisitor","comment":"A visitor of files. An implementation of this interface is provided to the\n {@link Files#walkFileTree Files.walkFileTree} methods to visit each file in\n a file tree.\n\n \u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e\n Suppose we want to delete a file tree. In that case, each directory should\n be deleted after the entries in the directory are deleted.\n \u003cpre\u003e\n     Path start \u003d ...\n     Files.walkFileTree(start, new SimpleFileVisitor\u0026lt;Path\u0026gt;() {\n         \u0026#64;Override\n         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n             throws IOException\n         {\n             Files.delete(file);\n             return FileVisitResult.CONTINUE;\n         }\n         \u0026#64;Override\n         public FileVisitResult postVisitDirectory(Path dir, IOException e)\n             throws IOException\n         {\n             if (e \u003d\u003d null) {\n                 Files.delete(dir);\n                 return FileVisitResult.CONTINUE;\n             } else {\n                 // directory iteration failed\n                 throw e;\n             }\n         }\n     });\n \u003c/pre\u003e\n \u003cp\u003e Furthermore, suppose we want to copy a file tree to a target location.\n In that case, symbolic links should be followed and the target directory\n should be created before the entries in the directory are copied.\n \u003cpre\u003e\n     final Path source \u003d ...\n     final Path target \u003d ...\n\n     Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n         new SimpleFileVisitor\u0026lt;Path\u0026gt;() {\n             \u0026#64;Override\n             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Path targetdir \u003d target.resolve(source.relativize(dir));\n                 try {\n                     Files.copy(dir, targetdir);\n                 } catch (FileAlreadyExistsException e) {\n                      if (!Files.isDirectory(targetdir))\n                          throw e;\n                 }\n                 return CONTINUE;\n             }\n             \u0026#64;Override\n             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Files.copy(file, target.resolve(source.relativize(file)));\n                 return CONTINUE;\n             }\n         });\n \u003c/pre\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"FileVisitor","qualifiedName":"java.nio.file.FileVisitor","dimension":"","elementType":{},"package":"java.nio.file","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"preVisitDirectory","comment":"Invoked for a directory before entries in the directory are visited.\n\n \u003cp\u003e If this method returns {@link FileVisitResult#CONTINUE CONTINUE},\n then entries in the directory are visited. If this method returns {@link\n FileVisitResult#SKIP_SUBTREE SKIP_SUBTREE} or {@link\n FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS} then entries in the\n directory (and any descendants) will not be visited.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.nio.file.attribute.BasicFileAttributes)","flatSignature":"(T, BasicFileAttributes)","returnType":{"isPrimitive":false,"simpleName":"FileVisitResult","qualifiedName":"java.nio.file.FileVisitResult","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dir","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"BasicFileAttributes","qualifiedName":"java.nio.file.attribute.BasicFileAttributes","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"visitFile","comment":"Invoked for a file in a directory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.nio.file.attribute.BasicFileAttributes)","flatSignature":"(T, BasicFileAttributes)","returnType":{"isPrimitive":false,"simpleName":"FileVisitResult","qualifiedName":"java.nio.file.FileVisitResult","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"BasicFileAttributes","qualifiedName":"java.nio.file.attribute.BasicFileAttributes","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"visitFileFailed","comment":"Invoked for a file that could not be visited. This method is invoked\n if the file\u0027s attributes could not be read, the file is a directory\n that could not be opened, and other reasons.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.io.IOException)","flatSignature":"(T, IOException)","returnType":{"isPrimitive":false,"simpleName":"FileVisitResult","qualifiedName":"java.nio.file.FileVisitResult","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"exc","type":{"isPrimitive":false,"simpleName":"IOException","qualifiedName":"java.io.IOException","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"postVisitDirectory","comment":"Invoked for a directory after entries in the directory, and all of their\n descendants, have been visited. This method is also invoked when iteration\n of the directory completes prematurely (by a {@link #visitFile visitFile}\n method returning {@link FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS},\n or an I/O error when iterating over the directory).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.io.IOException)","flatSignature":"(T, IOException)","returnType":{"isPrimitive":false,"simpleName":"FileVisitResult","qualifiedName":"java.nio.file.FileVisitResult","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dir","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"exc","type":{"isPrimitive":false,"simpleName":"IOException","qualifiedName":"java.io.IOException","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"subInterfaces":["java.nio.file.SimpleFileVisitor"],"enumConstants":[]}