{"name":"SecureDirectoryStream","comment":"A {@code DirectoryStream} that defines operations on files that are located\n relative to an open directory. A {@code SecureDirectoryStream} is intended\n for use by sophisticated or security sensitive applications requiring to\n traverse file trees or otherwise operate on directories in a race-free manner.\n Race conditions can arise when a sequence of file operations cannot be\n carried out in isolation. Each of the file operations defined by this\n interface specify a relative path. All access to the file is relative\n to the open directory irrespective of if the directory is moved or replaced\n by an attacker while the directory is open. A {@code SecureDirectoryStream}\n may also be used as a virtual \u003cem\u003eworking directory\u003c/em\u003e.\n\n \u003cp\u003e A {@code SecureDirectoryStream} requires corresponding support from the\n underlying operating system. Where an implementation supports this features\n then the {@code DirectoryStream} returned by the {@link Files#newDirectoryStream\n newDirectoryStream} method will be a {@code SecureDirectoryStream} and must\n be cast to that type in order to invoke the methods defined by this interface.\n\n \u003cp\u003e In the case of the default {@link java.nio.file.spi.FileSystemProvider\n provider}, and a security manager is set, then the permission checks are\n performed using the path obtained by resolving the given relative path\n against the \u003ci\u003eoriginal path\u003c/i\u003e of the directory (irrespective of if the\n directory is moved since it was opened).","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"SecureDirectoryStream","qualifiedName":"java.nio.file.SecureDirectoryStream","dimension":"","elementType":{},"package":"java.nio.file","interfaces":["java.nio.file.DirectoryStream"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"newDirectoryStream","comment":"Opens the directory identified by the given path, returning a {@code\n SecureDirectoryStream} to iterate over the entries in the directory.\n\n \u003cp\u003e This method works in exactly the manner specified by the {@link\n Files#newDirectoryStream(Path) newDirectoryStream} method for the case that\n the {@code path} parameter is an {@link Path#isAbsolute absolute} path.\n When the parameter is a relative path then the directory to open is\n relative to this open directory. The {@link\n LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to\n ensure that this method fails if the file is a symbolic link.\n\n \u003cp\u003e The new directory stream, once created, is not dependent upon the\n directory stream used to create it. Closing this directory stream has no\n effect upon newly created directory stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.nio.file.LinkOption...)","flatSignature":"(T, LinkOption...)","returnType":{"isPrimitive":false,"simpleName":"SecureDirectoryStream","qualifiedName":"java.nio.file.SecureDirectoryStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"newByteChannel","comment":"Opens or creates a file in this directory, returning a seekable byte\n channel to access the file.\n\n \u003cp\u003e This method works in exactly the manner specified by the {@link\n Files#newByteChannel Files.newByteChannel} method for the\n case that the {@code path} parameter is an {@link Path#isAbsolute absolute}\n path. When the parameter is a relative path then the file to open or\n create is relative to this open directory. In addition to the options\n defined by the {@code Files.newByteChannel} method, the {@link\n LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to\n ensure that this method fails if the file is a symbolic link.\n\n \u003cp\u003e The channel, once created, is not dependent upon the directory stream\n used to create it. Closing this directory stream has no effect upon the\n channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.Set\u003c? extends java.nio.file.OpenOption\u003e, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(T, Set\u003c? extends OpenOption\u003e, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"SeekableByteChannel","qualifiedName":"java.nio.channels.SeekableByteChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"deleteFile","comment":"Deletes a file.\n\n \u003cp\u003e Unlike the {@link Files#delete delete()} method, this method does\n not first examine the file to determine if the file is a directory.\n Whether a directory is deleted by this method is system dependent and\n therefore not specified. If the file is a symbolic link, then the link\n itself, not the final target of the link, is deleted. When the\n parameter is a relative path then the file to delete is relative to\n this open directory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"deleteDirectory","comment":"Deletes a directory.\n\n \u003cp\u003e Unlike the {@link Files#delete delete()} method, this method\n does not first examine the file to determine if the file is a directory.\n Whether non-directories are deleted by this method is system dependent and\n therefore not specified. When the parameter is a relative path then the\n directory to delete is relative to this open directory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"move","comment":"Move a file from this directory to another directory.\n\n \u003cp\u003e This method works in a similar manner to {@link Files#move move}\n method when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option\n is specified. That is, this method moves a file as an atomic file system\n operation. If the {@code srcpath} parameter is an {@link Path#isAbsolute\n absolute} path then it locates the source file. If the parameter is a\n relative path then it is located relative to this open directory. If\n the {@code targetpath} parameter is absolute then it locates the target\n file (the {@code targetdir} parameter is ignored). If the parameter is\n a relative path it is located relative to the open directory identified\n by the {@code targetdir} parameter. In all cases, if the target file\n exists then it is implementation specific if it is replaced or this\n method fails.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.nio.file.SecureDirectoryStream\u003cT\u003e, T)","flatSignature":"(T, SecureDirectoryStream\u003cT\u003e, T)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcpath","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"targetdir","type":{"isPrimitive":false,"simpleName":"SecureDirectoryStream","qualifiedName":"java.nio.file.SecureDirectoryStream","dimension":"","elementType":{}}},{"name":"targetpath","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"getFileAttributeView","comment":"Returns a new file attribute view to access the file attributes of this\n directory.\n\n \u003cp\u003e The resulting file attribute view can be used to read or update the\n attributes of this (open) directory. The {@code type} parameter specifies\n the type of the attribute view and the method returns an instance of that\n type if supported. Invoking this method to obtain a {@link\n BasicFileAttributeView} always returns an instance of that class that is\n bound to this open directory.\n\n \u003cp\u003e The state of resulting file attribute view is intimately connected\n to this directory stream. Once the directory stream is {@link #close closed},\n then all methods to read or update attributes will throw {@link\n ClosedDirectoryStreamException ClosedDirectoryStreamException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cV\u003e)","flatSignature":"(Class\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":["java.nio.file.attribute.FileAttributeView"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"V","bounds":["java.nio.file.attribute.FileAttributeView"]}]},{"name":"getFileAttributeView","comment":"Returns a new file attribute view to access the file attributes of a file\n in this directory.\n\n \u003cp\u003e The resulting file attribute view can be used to read or update the\n attributes of file in this directory. The {@code type} parameter specifies\n the type of the attribute view and the method returns an instance of that\n type if supported. Invoking this method to obtain a {@link\n BasicFileAttributeView} always returns an instance of that class that is\n bound to the file in the directory.\n\n \u003cp\u003e The state of resulting file attribute view is intimately connected\n to this directory stream. Once the directory stream {@link #close closed},\n then all methods to read or update attributes will throw {@link\n ClosedDirectoryStreamException ClosedDirectoryStreamException}. The\n file is not required to exist at the time that the file attribute view\n is created but methods to read or update attributes of the file will\n fail when invoked and the file does not exist.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.lang.Class\u003cV\u003e, java.nio.file.LinkOption...)","flatSignature":"(T, Class\u003cV\u003e, LinkOption...)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":["java.nio.file.attribute.FileAttributeView"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"V","bounds":["java.nio.file.attribute.FileAttributeView"]}]}],"typeParameters":[{"name":"T","bounds":[]}],"enumConstants":[]}