{"name":"FileStore","comment":"Storage for files. A {@code FileStore} represents a storage pool, device,\n partition, volume, concrete file system or other implementation specific means\n of file storage. The {@code FileStore} for where a file is stored is obtained\n by invoking the {@link Files#getFileStore getFileStore} method, or all file\n stores can be enumerated by invoking the {@link FileSystem#getFileStores\n getFileStores} method.\n\n \u003cp\u003e In addition to the methods defined by this class, a file store may support\n one or more {@link FileStoreAttributeView FileStoreAttributeView} classes\n that provide a read-only or updatable view of a set of file store attributes.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileStore","qualifiedName":"java.nio.file.FileStore","dimension":"","elementType":{},"package":"java.nio.file","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"name","comment":"Returns the name of this file store. The format of the name is highly\n implementation specific. It will typically be the name of the storage\n pool or volume.\n\n \u003cp\u003e The string returned by this method may differ from the string\n returned by the {@link Object#toString() toString} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"type","comment":"Returns the \u003cem\u003etype\u003c/em\u003e of this file store. The format of the string\n returned by this method is highly implementation specific. It may\n indicate, for example, the format used or if the file store is local\n or remote.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isReadOnly","comment":"Tells whether this file store is read-only. A file store is read-only if\n it does not support write operations or other changes to files. Any\n attempt to create a file, open an existing file for writing etc. causes\n an {@code IOException} to be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTotalSpace","comment":"Returns the size, in bytes, of the file store.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUsableSpace","comment":"Returns the number of bytes available to this Java virtual machine on the\n file store.\n\n \u003cp\u003e The returned number of available bytes is a hint, but not a\n guarantee, that it is possible to use most or any of these bytes.  The\n number of usable bytes is most likely to be accurate immediately\n after the space attributes are obtained. It is likely to be made inaccurate\n by any external I/O operations including those made on the system outside\n of this Java virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUnallocatedSpace","comment":"Returns the number of unallocated bytes in the file store.\n\n \u003cp\u003e The returned number of unallocated bytes is a hint, but not a\n guarantee, that it is possible to use most or any of these bytes.  The\n number of unallocated bytes is most likely to be accurate immediately\n after the space attributes are obtained. It is likely to be\n made inaccurate by any external I/O operations including those made on\n the system outside of this virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"supportsFileAttributeView","comment":"Tells whether or not this file store supports the file attributes\n identified by the given file attribute view.\n\n \u003cp\u003e Invoking this method to test if the file store supports {@link\n BasicFileAttributeView} will always return {@code true}. In the case of\n the default provider, this method cannot guarantee to give the correct\n result when the file store is not a local storage device. The reasons for\n this are implementation specific and therefore unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c? extends java.nio.file.attribute.FileAttributeView\u003e)","flatSignature":"(Class\u003c? extends FileAttributeView\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"supportsFileAttributeView","comment":"Tells whether or not this file store supports the file attributes\n identified by the given file attribute view.\n\n \u003cp\u003e Invoking this method to test if the file store supports {@link\n BasicFileAttributeView}, identified by the name \"{@code basic}\" will\n always return {@code true}. In the case of the default provider, this\n method cannot guarantee to give the correct result when the file store is\n not a local storage device. The reasons for this are implementation\n specific and therefore unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFileStoreAttributeView","comment":"Returns a {@code FileStoreAttributeView} of the given type.\n\n \u003cp\u003e This method is intended to be used where the file store attribute\n view defines type-safe methods to read or update the file store attributes.\n The {@code type} parameter is the type of the attribute view required and\n the method returns an instance of that type if supported.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cV\u003e)","flatSignature":"(Class\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":["java.nio.file.attribute.FileStoreAttributeView"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"V","bounds":["java.nio.file.attribute.FileStoreAttributeView"]}]},{"name":"getAttribute","comment":"Reads the value of a file store attribute.\n\n \u003cp\u003e The {@code attribute} parameter identifies the attribute to be read\n and takes the form:\n \u003cblockquote\u003e\n \u003ci\u003eview-name\u003c/i\u003e\u003cb\u003e:\u003c/b\u003e\u003ci\u003eattribute-name\u003c/i\u003e\n \u003c/blockquote\u003e\n where the character {@code \u0027:\u0027} stands for itself.\n\n \u003cp\u003e \u003ci\u003eview-name\u003c/i\u003e is the {@link FileStoreAttributeView#name name} of\n a {@link FileStore AttributeView} that identifies a set of file attributes.\n \u003ci\u003eattribute-name\u003c/i\u003e is the name of the attribute.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n Suppose we want to know if ZFS compression is enabled (assuming the \"zfs\"\n view is supported):\n \u003cpre\u003e\n    boolean compression \u003d (Boolean)fs.getAttribute(\"zfs:compression\");\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"attribute","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}