{"name":"DirectoryStream","comment":"An object to iterate over the entries in a directory. A directory stream\n allows for the convenient use of the for-each construct to iterate over a\n directory.\n\n \u003cp\u003e \u003cb\u003e While {@code DirectoryStream} extends {@code Iterable}, it is not a\n general-purpose {@code Iterable} as it supports only a single {@code\n Iterator}; invoking the {@link #iterator iterator} method to obtain a second\n or subsequent iterator throws {@code IllegalStateException}. \u003c/b\u003e\n\n \u003cp\u003e An important property of the directory stream\u0027s {@code Iterator} is that\n its {@link Iterator#hasNext() hasNext} method is guaranteed to read-ahead by\n at least one element. If {@code hasNext} method returns {@code true}, and is\n followed by a call to the {@code next} method, it is guaranteed that the\n {@code next} method will not throw an exception due to an I/O error, or\n because the stream has been {@link #close closed}. The {@code Iterator} does\n not support the {@link Iterator#remove remove} operation.\n\n \u003cp\u003e A {@code DirectoryStream} is opened upon creation and is closed by\n invoking the {@code close} method. Closing a directory stream releases any\n resources associated with the stream. Failure to close the stream may result\n in a resource leak. The try-with-resources statement provides a useful\n construct to ensure that the stream is closed:\n \u003cpre\u003e\n   Path dir \u003d ...\n   try (DirectoryStream\u0026lt;Path\u0026gt; stream \u003d Files.newDirectoryStream(dir)) {\n       for (Path entry: stream) {\n           ...\n       }\n   }\n \u003c/pre\u003e\n\n \u003cp\u003e Once a directory stream is closed, then further access to the directory,\n using the {@code Iterator}, behaves as if the end of stream has been reached.\n Due to read-ahead, the {@code Iterator} may return one or more elements\n after the directory stream has been closed. Once these buffered elements\n have been read, then subsequent calls to the {@code hasNext} method returns\n {@code false}, and subsequent calls to the {@code next} method will throw\n {@code NoSuchElementException}.\n\n \u003cp\u003e A directory stream is not required to be \u003ci\u003easynchronously closeable\u003c/i\u003e.\n If a thread is blocked on the directory stream\u0027s iterator reading from the\n directory, and another thread invokes the {@code close} method, then the\n second thread may block until the read operation is complete.\n\n \u003cp\u003e If an I/O error is encountered when accessing the directory then it\n causes the {@code Iterator}\u0027s {@code hasNext} or {@code next} methods to\n throw {@link DirectoryIteratorException} with the {@link IOException} as the\n cause. As stated above, the {@code hasNext} method is guaranteed to\n read-ahead by at least one element. This means that if {@code hasNext} method\n returns {@code true}, and is followed by a call to the {@code next} method,\n then it is guaranteed that the {@code next} method will not fail with a\n {@code DirectoryIteratorException}.\n\n \u003cp\u003e The elements returned by the iterator are in no specific order. Some file\n systems maintain special links to the directory itself and the directory\u0027s\n parent directory. Entries representing these links are not returned by the\n iterator.\n\n \u003cp\u003e The iterator is \u003ci\u003eweakly consistent\u003c/i\u003e. It is thread safe but does not\n freeze the directory while iterating, so it may (or may not) reflect updates\n to the directory that occur after the {@code DirectoryStream} is created.\n\n \u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e\n Suppose we want a list of the source files in a directory. This example uses\n both the for-each and try-with-resources constructs.\n \u003cpre\u003e\n   List\u0026lt;Path\u0026gt; listSourceFiles(Path dir) throws IOException {\n       List\u0026lt;Path\u0026gt; result \u003d new ArrayList\u0026lt;\u0026gt;();\n       try (DirectoryStream\u0026lt;Path\u0026gt; stream \u003d Files.newDirectoryStream(dir, \"*.{c,h,cpp,hpp,java}\")) {\n           for (Path entry: stream) {\n               result.add(entry);\n           }\n       } catch (DirectoryIteratorException ex) {\n           // I/O error encounted during the iteration, the cause is an IOException\n           throw ex.getCause();\n       }\n       return result;\n   }\n \u003c/pre\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"DirectoryStream","qualifiedName":"java.nio.file.DirectoryStream","dimension":"","elementType":{},"package":"java.nio.file","interfaces":["java.io.Closeable","java.lang.Iterable"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":["java.nio.file.DirectoryStream.Filter"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"iterator","comment":"Returns the iterator associated with this {@code DirectoryStream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"subInterfaces":["java.nio.file.SecureDirectoryStream"],"enumConstants":[]}