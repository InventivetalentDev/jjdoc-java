{"name":"FileSystemProvider","comment":"Service-provider class for file systems. The methods defined by the {@link\n java.nio.file.Files} class will typically delegate to an instance of this\n class.\n\n \u003cp\u003e A file system provider is a concrete implementation of this class that\n implements the abstract methods defined by this class. A provider is\n identified by a {@code URI} {@link #getScheme() scheme}. The default provider\n is identified by the URI scheme \"file\". It creates the {@link FileSystem} that\n provides access to the file systems accessible to the Java virtual machine.\n The {@link FileSystems} class defines how file system providers are located\n and loaded. The default provider is typically a system-default provider but\n may be overridden if the system property {@code\n java.nio.file.spi.DefaultFileSystemProvider} is set. In that case, the\n provider has a one argument constructor whose formal parameter type is {@code\n FileSystemProvider}. All other providers have a zero argument constructor\n that initializes the provider.\n\n \u003cp\u003e A provider is a factory for one or more {@link FileSystem} instances. Each\n file system is identified by a {@code URI} where the URI\u0027s scheme matches\n the provider\u0027s {@link #getScheme scheme}. The default file system, for example,\n is identified by the URI {@code \"file:///\"}. A memory-based file system,\n for example, may be identified by a URI such as {@code \"memory:///?name\u003dlogfs\"}.\n The {@link #newFileSystem newFileSystem} method may be used to create a file\n system, and the {@link #getFileSystem getFileSystem} method may be used to\n obtain a reference to an existing file system created by the provider. Where\n a provider is the factory for a single file system then it is provider dependent\n if the file system is created when the provider is initialized, or later when\n the {@code newFileSystem} method is invoked. In the case of the default\n provider, the {@code FileSystem} is created when the provider is initialized.\n\n \u003cp\u003e All of the methods in this class are safe for use by multiple concurrent\n threads.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileSystemProvider","qualifiedName":"java.nio.file.spi.FileSystemProvider","dimension":"","elementType":{},"package":"java.nio.file.spi","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"installedProviders","comment":"Returns a list of the installed file system providers.\n\n \u003cp\u003e The first invocation of this method causes the default provider to be\n initialized (if not already initialized) and loads any other installed\n providers as described by the {@link FileSystems} class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getScheme","comment":"Returns the URI scheme that identifies this provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newFileSystem","comment":"Constructs a new {@code FileSystem} object identified by a URI. This\n method is invoked by the {@link FileSystems#newFileSystem(URI,Map)}\n method to open a new file system identified by a URI.\n\n \u003cp\u003e The {@code uri} parameter is an absolute, hierarchical URI, with a\n scheme equal (without regard to case) to the scheme supported by this\n provider. The exact form of the URI is highly provider dependent. The\n {@code env} parameter is a map of provider specific properties to configure\n the file system.\n\n \u003cp\u003e This method throws {@link FileSystemAlreadyExistsException} if the\n file system already exists because it was previously created by an\n invocation of this method. Once a file system is {@link\n java.nio.file.FileSystem#close closed} it is provider-dependent if the\n provider allows a new file system to be created with the same URI as a\n file system it previously created.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URI, java.util.Map\u003cjava.lang.String, ?\u003e)","flatSignature":"(URI, Map\u003cString, ?\u003e)","returnType":{"isPrimitive":false,"simpleName":"FileSystem","qualifiedName":"java.nio.file.FileSystem","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"uri","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}},{"name":"env","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFileSystem","comment":"Returns an existing {@code FileSystem} created by this provider.\n\n \u003cp\u003e This method returns a reference to a {@code FileSystem} that was\n created by invoking the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}\n method. File systems created the {@link #newFileSystem(Path,Map)\n newFileSystem(Path,Map)} method are not returned by this method.\n The file system is identified by its {@code URI}. Its exact form\n is highly provider dependent. In the case of the default provider the URI\u0027s\n path component is {@code \"/\"} and the authority, query and fragment components\n are undefined (Undefined components are represented by {@code null}).\n\n \u003cp\u003e Once a file system created by this provider is {@link\n java.nio.file.FileSystem#close closed} it is provider-dependent if this\n method returns a reference to the closed file system or throws {@link\n FileSystemNotFoundException}. If the provider allows a new file system to\n be created with the same URI as a file system it previously created then\n this method throws the exception if invoked after the file system is\n closed (and before a new instance is created by the {@link #newFileSystem\n newFileSystem} method).\n\n \u003cp\u003e If a security manager is installed then a provider implementation\n may require to check a permission before returning a reference to an\n existing file system. In the case of the {@link FileSystems#getDefault\n default} file system, no permission check is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URI)","flatSignature":"(URI)","returnType":{"isPrimitive":false,"simpleName":"FileSystem","qualifiedName":"java.nio.file.FileSystem","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"uri","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPath","comment":"Return a {@code Path} object by converting the given {@link URI}. The\n resulting {@code Path} is associated with a {@link FileSystem} that\n already exists or is constructed automatically.\n\n \u003cp\u003e The exact form of the URI is file system provider dependent. In the\n case of the default provider, the URI scheme is {@code \"file\"} and the\n given URI has a non-empty path component, and undefined query, and\n fragment components. The resulting {@code Path} is associated with the\n default {@link FileSystems#getDefault default} {@code FileSystem}.\n\n \u003cp\u003e If a security manager is installed then a provider implementation\n may require to check a permission. In the case of the {@link\n FileSystems#getDefault default} file system, no permission check is\n required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.URI)","flatSignature":"(URI)","returnType":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"uri","type":{"isPrimitive":false,"simpleName":"URI","qualifiedName":"java.net.URI","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newFileSystem","comment":"Constructs a new {@code FileSystem} to access the contents of a file as a\n file system.\n\n \u003cp\u003e This method is intended for specialized providers of pseudo file\n systems where the contents of one or more files is treated as a file\n system. The {@code env} parameter is a map of provider specific properties\n to configure the file system.\n\n \u003cp\u003e If this provider does not support the creation of such file systems\n or if the provider does not recognize the file type of the given file then\n it throws {@code UnsupportedOperationException}. The default implementation\n of this method throws {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.util.Map\u003cjava.lang.String, ?\u003e)","flatSignature":"(Path, Map\u003cString, ?\u003e)","returnType":{"isPrimitive":false,"simpleName":"FileSystem","qualifiedName":"java.nio.file.FileSystem","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"env","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newInputStream","comment":"Opens a file, returning an input stream to read from the file. This\n method works in exactly the manner specified by the {@link\n Files#newInputStream} method.\n\n \u003cp\u003e The default implementation of this method opens a channel to the file\n as if by invoking the {@link #newByteChannel} method and constructs a\n stream that reads bytes from the channel. This method should be overridden\n where appropriate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.OpenOption...)","flatSignature":"(Path, OpenOption...)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"newOutputStream","comment":"Opens or creates a file, returning an output stream that may be used to\n write bytes to the file. This method works in exactly the manner\n specified by the {@link Files#newOutputStream} method.\n\n \u003cp\u003e The default implementation of this method opens a channel to the file\n as if by invoking the {@link #newByteChannel} method and constructs a\n stream that writes bytes to the channel. This method should be overridden\n where appropriate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.OpenOption...)","flatSignature":"(Path, OpenOption...)","returnType":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"newFileChannel","comment":"Opens or creates a file for reading and/or writing, returning a file\n channel to access the file. This method works in exactly the manner\n specified by the {@link FileChannel#open(Path,Set,FileAttribute[])\n FileChannel.open} method. A provider that does not support all the\n features required to construct a file channel throws {@code\n UnsupportedOperationException}. The default provider is required to\n support the creation of file channels. When not overridden, the default\n implementation throws {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.util.Set\u003c? extends java.nio.file.OpenOption\u003e, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, Set\u003c? extends OpenOption\u003e, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"newAsynchronousFileChannel","comment":"Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file. This method works in\n exactly the manner specified by the {@link\n AsynchronousFileChannel#open(Path,Set,ExecutorService,FileAttribute[])\n AsynchronousFileChannel.open} method.\n A provider that does not support all the features required to construct\n an asynchronous file channel throws {@code UnsupportedOperationException}.\n The default provider is required to support the creation of asynchronous\n file channels. When not overridden, the default implementation of this\n method throws {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.util.Set\u003c? extends java.nio.file.OpenOption\u003e, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, Set\u003c? extends OpenOption\u003e, ExecutorService, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousFileChannel","qualifiedName":"java.nio.channels.AsynchronousFileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"newByteChannel","comment":"Opens or creates a file, returning a seekable byte channel to access the\n file. This method works in exactly the manner specified by the {@link\n Files#newByteChannel(Path,Set,FileAttribute[])} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.util.Set\u003c? extends java.nio.file.OpenOption\u003e, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, Set\u003c? extends OpenOption\u003e, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"SeekableByteChannel","qualifiedName":"java.nio.channels.SeekableByteChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"newDirectoryStream","comment":"Opens a directory, returning a {@code DirectoryStream} to iterate over\n the entries in the directory. This method works in exactly the manner\n specified by the {@link\n Files#newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream.Filter)}\n method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.DirectoryStream.Filter\u003c? super java.nio.file.Path\u003e)","flatSignature":"(Path, DirectoryStream.Filter\u003c? super Path\u003e)","returnType":{"isPrimitive":false,"simpleName":"DirectoryStream","qualifiedName":"java.nio.file.DirectoryStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dir","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"filter","type":{"isPrimitive":false,"simpleName":"Filter","qualifiedName":"java.nio.file.DirectoryStream.Filter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"createDirectory","comment":"Creates a new directory. This method works in exactly the manner\n specified by the {@link Files#createDirectory} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dir","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"createSymbolicLink","comment":"Creates a symbolic link to a target. This method works in exactly the\n manner specified by the {@link Files#createSymbolicLink} method.\n\n \u003cp\u003e The default implementation of this method throws {@code\n UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, Path, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"link","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"createLink","comment":"Creates a new link (directory entry) for an existing file. This method\n works in exactly the manner specified by the {@link Files#createLink}\n method.\n\n \u003cp\u003e The default implementation of this method throws {@code\n UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.Path)","flatSignature":"(Path, Path)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"link","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"existing","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"delete","comment":"Deletes a file. This method works in exactly the  manner specified by the\n {@link Files#delete} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path)","flatSignature":"(Path)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"deleteIfExists","comment":"Deletes a file if it exists. This method works in exactly the manner\n specified by the {@link Files#deleteIfExists} method.\n\n \u003cp\u003e The default implementation of this method simply invokes {@link\n #delete} ignoring the {@code NoSuchFileException} when the file does not\n exist. It may be overridden where appropriate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path)","flatSignature":"(Path)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"readSymbolicLink","comment":"Reads the target of a symbolic link. This method works in exactly the\n manner specified by the {@link Files#readSymbolicLink} method.\n\n \u003cp\u003e The default implementation of this method throws {@code\n UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path)","flatSignature":"(Path)","returnType":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"link","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"copy","comment":"Copy a file to a target file. This method works in exactly the manner\n specified by the {@link Files#copy(Path,Path,CopyOption[])} method\n except that both the source and target paths must be associated with\n this provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)","flatSignature":"(Path, Path, CopyOption...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"CopyOption","qualifiedName":"java.nio.file.CopyOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"CopyOption","qualifiedName":"java.nio.file.CopyOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"move","comment":"Move or rename a file to a target file. This method works in exactly the\n manner specified by the {@link Files#move} method except that both the\n source and target paths must be associated with this provider.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)","flatSignature":"(Path, Path, CopyOption...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"CopyOption","qualifiedName":"java.nio.file.CopyOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"CopyOption","qualifiedName":"java.nio.file.CopyOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"isSameFile","comment":"Tests if two paths locate the same file. This method works in exactly the\n manner specified by the {@link Files#isSameFile} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.Path)","flatSignature":"(Path, Path)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"path2","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isHidden","comment":"Tells whether or not a file is considered \u003cem\u003ehidden\u003c/em\u003e. This method\n works in exactly the manner specified by the {@link Files#isHidden}\n method.\n\n \u003cp\u003e This method is invoked by the {@link Files#isHidden isHidden} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path)","flatSignature":"(Path)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFileStore","comment":"Returns the {@link FileStore} representing the file store where a file\n is located. This method works in exactly the manner specified by the\n {@link Files#getFileStore} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path)","flatSignature":"(Path)","returnType":{"isPrimitive":false,"simpleName":"FileStore","qualifiedName":"java.nio.file.FileStore","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkAccess","comment":"Checks the existence, and optionally the accessibility, of a file.\n\n \u003cp\u003e This method may be used by the {@link Files#isReadable isReadable},\n {@link Files#isWritable isWritable} and {@link Files#isExecutable\n isExecutable} methods to check the accessibility of a file.\n\n \u003cp\u003e This method checks the existence of a file and that this Java virtual\n machine has appropriate privileges that would allow it access the file\n according to all of access modes specified in the {@code modes} parameter\n as follows:\n\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e\n \u003ctr\u003e \u003cth\u003eValue\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link AccessMode#READ READ} \u003c/td\u003e\n   \u003ctd\u003e Checks that the file exists and that the Java virtual machine has\n     permission to read the file. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link AccessMode#WRITE WRITE} \u003c/td\u003e\n   \u003ctd\u003e Checks that the file exists and that the Java virtual machine has\n     permission to write to the file, \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link AccessMode#EXECUTE EXECUTE} \u003c/td\u003e\n   \u003ctd\u003e Checks that the file exists and that the Java virtual machine has\n     permission to {@link Runtime#exec execute} the file. The semantics\n     may differ when checking access to a directory. For example, on UNIX\n     systems, checking for {@code EXECUTE} access checks that the Java\n     virtual machine has permission to search the directory in order to\n     access file or subdirectories. \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003e If the {@code modes} parameter is of length zero, then the existence\n of the file is checked.\n\n \u003cp\u003e This method follows symbolic links if the file referenced by this\n object is a symbolic link. Depending on the implementation, this method\n may require to read file permissions, access control lists, or other\n file attributes in order to check the effective access to the file. To\n determine the effective access to a file may require access to several\n attributes and so in some implementations this method may not be atomic\n with respect to other file system operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.AccessMode...)","flatSignature":"(Path, AccessMode...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"modes","type":{"isPrimitive":false,"simpleName":"AccessMode","qualifiedName":"java.nio.file.AccessMode","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"AccessMode","qualifiedName":"java.nio.file.AccessMode","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getFileAttributeView","comment":"Returns a file attribute view of a given type. This method works in\n exactly the manner specified by the {@link Files#getFileAttributeView}\n method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.lang.Class\u003cV\u003e, java.nio.file.LinkOption...)","flatSignature":"(Path, Class\u003cV\u003e, LinkOption...)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":["java.nio.file.attribute.FileAttributeView"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"V","bounds":["java.nio.file.attribute.FileAttributeView"]}]},{"name":"readAttributes","comment":"Reads a file\u0027s attributes as a bulk operation. This method works in\n exactly the manner specified by the {@link\n Files#readAttributes(Path,Class,LinkOption[])} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.lang.Class\u003cA\u003e, java.nio.file.LinkOption...)","flatSignature":"(Path, Class\u003cA\u003e, LinkOption...)","returnType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":["java.nio.file.attribute.BasicFileAttributes"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"A","bounds":["java.nio.file.attribute.BasicFileAttributes"]}]},{"name":"readAttributes","comment":"Reads a set of file attributes as a bulk operation. This method works in\n exactly the manner specified by the {@link\n Files#readAttributes(Path,String,LinkOption[])} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...)","flatSignature":"(Path, String, LinkOption...)","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"attributes","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setAttribute","comment":"Sets the value of a file attribute. This method works in exactly the\n manner specified by the {@link Files#setAttribute} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...)","flatSignature":"(Path, String, Object, LinkOption...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"attribute","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LinkOption","qualifiedName":"java.nio.file.LinkOption","dimension":"","elementType":{}}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}