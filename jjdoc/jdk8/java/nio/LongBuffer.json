{"name":"LongBuffer","comment":"A long buffer.\n\n \u003cp\u003e This class defines four categories of operations upon\n long buffers:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e Absolute and relative {@link #get() \u003ci\u003eget\u003c/i\u003e} and\n   {@link #put(long) \u003ci\u003eput\u003c/i\u003e} methods that read and write\n   single longs; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Relative {@link #get(long[]) \u003ci\u003ebulk get\u003c/i\u003e}\n   methods that transfer contiguous sequences of longs from this buffer\n   into an array; and\u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Relative {@link #put(long[]) \u003ci\u003ebulk put\u003c/i\u003e}\n   methods that transfer contiguous sequences of longs from a\n   long array or some other long\n   buffer into this buffer;\u0026#32;and \u003c/p\u003e\u003c/li\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \u003cli\u003e\u003cp\u003e Methods for {@link #compact compacting}, {@link\n   #duplicate duplicating}, and {@link #slice slicing}\n   a long buffer.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e Long buffers can be created either by {@link #allocate\n \u003ci\u003eallocation\u003c/i\u003e}, which allocates space for the buffer\u0027s\n\n\n\n\n\n\n\n\n content, by {@link #wrap(long[]) \u003ci\u003ewrapping\u003c/i\u003e} an existing\n long array  into a buffer, or by creating a\n \u003ca href\u003d\"ByteBuffer.html#views\"\u003e\u003ci\u003eview\u003c/i\u003e\u003c/a\u003e of an existing byte buffer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u003cp\u003e Like a byte buffer, a long buffer is either \u003ca\n href\u003d\"ByteBuffer.html#direct\"\u003e\u003ci\u003edirect\u003c/i\u003e or \u003ci\u003enon-direct\u003c/i\u003e\u003c/a\u003e.  A\n long buffer created via the \u003ctt\u003ewrap\u003c/tt\u003e methods of this class will\n be non-direct.  A long buffer created as a view of a byte buffer will\n be direct if, and only if, the byte buffer itself is direct.  Whether or not\n a long buffer is direct may be determined by invoking the {@link\n #isDirect isDirect} method.  \u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u003cp\u003e Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{},"package":"java.nio","superclass":"java.nio.Buffer","interfaces":["java.lang.Comparable"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"allocate","comment":"Allocates a new long buffer.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its limit will be its\n capacity, its mark will be undefined, and each of its elements will be\n initialized to zero.  It will have a {@link #array backing array},\n and its {@link #arrayOffset array offset} will be zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"capacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wrap","comment":"Wraps a long array into a buffer.\n\n \u003cp\u003e The new buffer will be backed by the given long array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer\u0027s capacity will be\n \u003ctt\u003earray.length\u003c/tt\u003e, its position will be \u003ctt\u003eoffset\u003c/tt\u003e, its limit\n will be \u003ctt\u003eoffset + length\u003c/tt\u003e, and its mark will be undefined.  Its\n {@link #array backing array} will be the given array, and\n its {@link #arrayOffset array offset} will be zero.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], int, int)","flatSignature":"(long[], int, int)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wrap","comment":"Wraps a long array into a buffer.\n\n \u003cp\u003e The new buffer will be backed by the given long array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer\u0027s capacity and limit will be\n \u003ctt\u003earray.length\u003c/tt\u003e, its position will be zero, and its mark will be\n undefined.  Its {@link #array backing array} will be the\n given array, and its {@link #arrayOffset array offset\u003e} will\n be zero.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[])","flatSignature":"(long[])","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"slice","comment":"Creates a new long buffer whose content is a shared subsequence of\n this buffer\u0027s content.\n\n \u003cp\u003e The content of the new buffer will start at this buffer\u0027s current\n position.  Changes to this buffer\u0027s content will be visible in the new\n buffer, and vice versa; the two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s position will be zero, its capacity and its limit\n will be the number of longs remaining in this buffer, and its mark\n will be undefined.  The new buffer will be direct if, and only if, this\n buffer is direct, and it will be read-only if, and only if, this buffer\n is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"duplicate","comment":"Creates a new long buffer that shares this buffer\u0027s content.\n\n \u003cp\u003e The content of the new buffer will be that of this buffer.  Changes\n to this buffer\u0027s content will be visible in the new buffer, and vice\n versa; the two buffers\u0027 position, limit, and mark values will be\n independent.\n\n \u003cp\u003e The new buffer\u0027s capacity, limit, position, and mark values will be\n identical to those of this buffer.  The new buffer will be direct if,\n and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"asReadOnlyBuffer","comment":"Creates a new, read-only long buffer that shares this buffer\u0027s\n content.\n\n \u003cp\u003e The content of the new buffer will be that of this buffer.  Changes\n to this buffer\u0027s content will be visible in the new buffer; the new\n buffer itself, however, will be read-only and will not allow the shared\n content to be modified.  The two buffers\u0027 position, limit, and mark\n values will be independent.\n\n \u003cp\u003e The new buffer\u0027s capacity, limit, position, and mark values will be\n identical to those of this buffer.\n\n \u003cp\u003e If this buffer is itself read-only then this method behaves in\n exactly the same way as the {@link #duplicate duplicate} method.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Relative \u003ci\u003eget\u003c/i\u003e method.  Reads the long at this buffer\u0027s\n current position, and then increments the position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"put","comment":"Relative \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes the given long into this buffer at the current\n position, and then increments the position. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Absolute \u003ci\u003eget\u003c/i\u003e method.  Reads the long at the given\n index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Absolute \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Writes the given long into this buffer at the given\n index. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, long)","flatSignature":"(int, long)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"l","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Relative bulk \u003ci\u003eget\u003c/i\u003e method.\n\n \u003cp\u003e This method transfers longs from this buffer into the given\n destination array.  If there are fewer longs remaining in the\n buffer than are required to satisfy the request, that is, if\n \u003ctt\u003elength\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026gt;\u003c/tt\u003e\u0026nbsp;\u003ctt\u003eremaining()\u003c/tt\u003e, then no\n longs are transferred and a {@link BufferUnderflowException} is\n thrown.\n\n \u003cp\u003e Otherwise, this method copies \u003ctt\u003elength\u003c/tt\u003e longs from this\n buffer into the given array, starting at the current position of this\n buffer and at the given offset in the array.  The position of this\n buffer is then incremented by \u003ctt\u003elength\u003c/tt\u003e.\n\n \u003cp\u003e In other words, an invocation of this method of the form\n \u003ctt\u003esrc.get(dst,\u0026nbsp;off,\u0026nbsp;len)\u003c/tt\u003e has exactly the same effect as\n the loop\n\n \u003cpre\u003e{@code\n     for (int i \u003d off; i \u003c off + len; i++)\n         dst[i] \u003d src.get():\n }\u003c/pre\u003e\n\n except that it first checks that there are sufficient longs in\n this buffer and it is potentially much more efficient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], int, int)","flatSignature":"(long[], int, int)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Relative bulk \u003ci\u003eget\u003c/i\u003e method.\n\n \u003cp\u003e This method transfers longs from this buffer into the given\n destination array.  An invocation of this method of the form\n \u003ctt\u003esrc.get(a)\u003c/tt\u003e behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     src.get(a, 0, a.length) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[])","flatSignature":"(long[])","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"put","comment":"Relative bulk \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method transfers the longs remaining in the given source\n buffer into this buffer.  If there are more longs remaining in the\n source buffer than in this buffer, that is, if\n \u003ctt\u003esrc.remaining()\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026gt;\u003c/tt\u003e\u0026nbsp;\u003ctt\u003eremaining()\u003c/tt\u003e,\n then no longs are transferred and a {@link\n BufferOverflowException} is thrown.\n\n \u003cp\u003e Otherwise, this method copies\n \u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003d\u0026nbsp;\u003ctt\u003esrc.remaining()\u003c/tt\u003e longs from the given\n buffer into this buffer, starting at each buffer\u0027s current position.\n The positions of both buffers are then incremented by \u003ci\u003en\u003c/i\u003e.\n\n \u003cp\u003e In other words, an invocation of this method of the form\n \u003ctt\u003edst.put(src)\u003c/tt\u003e has exactly the same effect as the loop\n\n \u003cpre\u003e\n     while (src.hasRemaining())\n         dst.put(src.get()); \u003c/pre\u003e\n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.LongBuffer)","flatSignature":"(LongBuffer)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Relative bulk \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method transfers longs into this buffer from the given\n source array.  If there are more longs to be copied from the array\n than remain in this buffer, that is, if\n \u003ctt\u003elength\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026gt;\u003c/tt\u003e\u0026nbsp;\u003ctt\u003eremaining()\u003c/tt\u003e, then no\n longs are transferred and a {@link BufferOverflowException} is\n thrown.\n\n \u003cp\u003e Otherwise, this method copies \u003ctt\u003elength\u003c/tt\u003e longs from the\n given array into this buffer, starting at the given offset in the array\n and at the current position of this buffer.  The position of this buffer\n is then incremented by \u003ctt\u003elength\u003c/tt\u003e.\n\n \u003cp\u003e In other words, an invocation of this method of the form\n \u003ctt\u003edst.put(src,\u0026nbsp;off,\u0026nbsp;len)\u003c/tt\u003e has exactly the same effect as\n the loop\n\n \u003cpre\u003e{@code\n     for (int i \u003d off; i \u003c off + len; i++)\n         dst.put(a[i]);\n }\u003c/pre\u003e\n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], int, int)","flatSignature":"(long[], int, int)","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Relative bulk \u003ci\u003eput\u003c/i\u003e method\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method transfers the entire content of the given source\n long array into this buffer.  An invocation of this method of the\n form \u003ctt\u003edst.put(a)\u003c/tt\u003e behaves in exactly the same way as the\n invocation\n\n \u003cpre\u003e\n     dst.put(a, 0, a.length) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[])","flatSignature":"(long[])","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"hasArray","comment":"Tells whether or not this buffer is backed by an accessible long\n array.\n\n \u003cp\u003e If this method returns \u003ctt\u003etrue\u003c/tt\u003e then the {@link #array() array}\n and {@link #arrayOffset() arrayOffset} methods may safely be invoked.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"array","comment":"Returns the long array that backs this\n buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e Modifications to this buffer\u0027s content will cause the returned\n array\u0027s content to be modified, and vice versa.\n\n \u003cp\u003e Invoke the {@link #hasArray hasArray} method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"arrayOffset","comment":"Returns the offset within this buffer\u0027s backing array of the first\n element of the buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e If this buffer is backed by an array then buffer position \u003ci\u003ep\u003c/i\u003e\n corresponds to array index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ctt\u003earrayOffset()\u003c/tt\u003e.\n\n \u003cp\u003e Invoke the {@link #hasArray hasArray} method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"compact","comment":"Compacts this buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e The longs between the buffer\u0027s current position and its limit,\n if any, are copied to the beginning of the buffer.  That is, the\n long at index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003d\u0026nbsp;\u003ctt\u003eposition()\u003c/tt\u003e is copied\n to index zero, the long at index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;+\u0026nbsp;1 is copied\n to index one, and so forth until the long at index\n \u003ctt\u003elimit()\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;1 is copied to index\n \u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003d\u0026nbsp;\u003ctt\u003elimit()\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ci\u003ep\u003c/i\u003e.\n The buffer\u0027s position is then set to \u003ci\u003en+1\u003c/i\u003e and its limit is set to\n its capacity.  The mark, if defined, is discarded.\n\n \u003cp\u003e The buffer\u0027s position is set to the number of longs copied,\n rather than to zero, so that an invocation of this method can be\n followed immediately by an invocation of another relative \u003ci\u003eput\u003c/i\u003e\n method. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isDirect","comment":"Tells whether or not this long buffer is direct.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string summarizing the state of this buffer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns the current hash code of this buffer.\n\n \u003cp\u003e The hash code of a long buffer depends only upon its remaining\n elements; that is, upon the elements from \u003ctt\u003eposition()\u003c/tt\u003e up to, and\n including, the element at \u003ctt\u003elimit()\u003c/tt\u003e\u0026nbsp;-\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e.\n\n \u003cp\u003e Because buffer hash codes are content-dependent, it is inadvisable\n to use buffers as keys in hash maps or similar data structures unless it\n is known that their contents will not change.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Tells whether or not this buffer is equal to another object.\n\n \u003cp\u003e Two long buffers are equal if, and only if,\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e They have the same element type,  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e They have the same number of remaining elements, and\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The two sequences of remaining elements, considered\n   independently of their starting positions, are pointwise equal.\n\n\n\n\n\n\n\n   \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e A long buffer is not equal to any other type of object.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ob","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this buffer to another.\n\n \u003cp\u003e Two long buffers are compared by comparing their sequences of\n remaining elements lexicographically, without regard to the starting\n position of each sequence within its corresponding buffer.\n\n\n\n\n\n\n\n\n Pairs of {@code long} elements are compared as if by invoking\n {@link Long#compare(long,long)}.\n\n\n \u003cp\u003e A long buffer is not comparable to any other type of object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.LongBuffer)","flatSignature":"(LongBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"that","type":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"order","comment":"Retrieves this buffer\u0027s byte order.\n\n \u003cp\u003e The byte order of a long buffer created by allocation or by\n wrapping an existing \u003ctt\u003elong\u003c/tt\u003e array is the {@link\n ByteOrder#nativeOrder native order} of the underlying\n hardware.  The byte order of a long buffer created as a \u003ca\n href\u003d\"ByteBuffer.html#views\"\u003eview\u003c/a\u003e of a byte buffer is that of the\n byte buffer at the moment that the view is created.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ByteOrder","qualifiedName":"java.nio.ByteOrder","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}