{"name":"Buffer","comment":"A container for data of a specific primitive type.\n\n \u003cp\u003e A buffer is a linear, finite sequence of elements of a specific\n primitive type.  Aside from its content, the essential properties of a\n buffer are its capacity, limit, and position: \u003c/p\u003e\n\n \u003cblockquote\u003e\n\n   \u003cp\u003e A buffer\u0027s \u003ci\u003ecapacity\u003c/i\u003e is the number of elements it contains.  The\n   capacity of a buffer is never negative and never changes.  \u003c/p\u003e\n\n   \u003cp\u003e A buffer\u0027s \u003ci\u003elimit\u003c/i\u003e is the index of the first element that should\n   not be read or written.  A buffer\u0027s limit is never negative and is never\n   greater than its capacity.  \u003c/p\u003e\n\n   \u003cp\u003e A buffer\u0027s \u003ci\u003eposition\u003c/i\u003e is the index of the next element to be\n   read or written.  A buffer\u0027s position is never negative and is never\n   greater than its limit.  \u003c/p\u003e\n\n \u003c/blockquote\u003e\n\n \u003cp\u003e There is one subclass of this class for each non-boolean primitive type.\n\n\n \u003ch2\u003e Transferring data \u003c/h2\u003e\n\n \u003cp\u003e Each subclass of this class defines two categories of \u003ci\u003eget\u003c/i\u003e and\n \u003ci\u003eput\u003c/i\u003e operations: \u003c/p\u003e\n\n \u003cblockquote\u003e\n\n   \u003cp\u003e \u003ci\u003eRelative\u003c/i\u003e operations read or write one or more elements starting\n   at the current position and then increment the position by the number of\n   elements transferred.  If the requested transfer exceeds the limit then a\n   relative \u003ci\u003eget\u003c/i\u003e operation throws a {@link BufferUnderflowException}\n   and a relative \u003ci\u003eput\u003c/i\u003e operation throws a {@link\n   BufferOverflowException}; in either case, no data is transferred.  \u003c/p\u003e\n\n   \u003cp\u003e \u003ci\u003eAbsolute\u003c/i\u003e operations take an explicit element index and do not\n   affect the position.  Absolute \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e operations throw\n   an {@link IndexOutOfBoundsException} if the index argument exceeds the\n   limit.  \u003c/p\u003e\n\n \u003c/blockquote\u003e\n\n \u003cp\u003e Data may also, of course, be transferred in to or out of a buffer by the\n I/O operations of an appropriate channel, which are always relative to the\n current position.\n\n\n \u003ch2\u003e Marking and resetting \u003c/h2\u003e\n\n \u003cp\u003e A buffer\u0027s \u003ci\u003emark\u003c/i\u003e is the index to which its position will be reset\n when the {@link #reset reset} method is invoked.  The mark is not always\n defined, but when it is defined it is never negative and is never greater\n than the position.  If the mark is defined then it is discarded when the\n position or the limit is adjusted to a value smaller than the mark.  If the\n mark is not defined then invoking the {@link #reset reset} method causes an\n {@link InvalidMarkException} to be thrown.\n\n\n \u003ch2\u003e Invariants \u003c/h2\u003e\n\n \u003cp\u003e The following invariant holds for the mark, position, limit, and\n capacity values:\n\n \u003cblockquote\u003e\n     \u003ctt\u003e0\u003c/tt\u003e \u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\n     \u003ci\u003emark\u003c/i\u003e \u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\n     \u003ci\u003eposition\u003c/i\u003e \u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\n     \u003ci\u003elimit\u003c/i\u003e \u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\n     \u003ci\u003ecapacity\u003c/i\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e A newly-created buffer always has a position of zero and a mark that is\n undefined.  The initial limit may be zero, or it may be some other value\n that depends upon the type of the buffer and the manner in which it is\n constructed.  Each element of a newly-allocated buffer is initialized\n to zero.\n\n\n \u003ch2\u003e Clearing, flipping, and rewinding \u003c/h2\u003e\n\n \u003cp\u003e In addition to methods for accessing the position, limit, and capacity\n values and for marking and resetting, this class also defines the following\n operations upon buffers:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link #clear} makes a buffer ready for a new sequence of\n   channel-read or relative \u003ci\u003eput\u003c/i\u003e operations: It sets the limit to the\n   capacity and the position to zero.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link #flip} makes a buffer ready for a new sequence of\n   channel-write or relative \u003ci\u003eget\u003c/i\u003e operations: It sets the limit to the\n   current position and then sets the position to zero.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link #rewind} makes a buffer ready for re-reading the data that\n   it already contains: It leaves the limit unchanged and sets the position\n   to zero.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n\n \u003ch2\u003e Read-only buffers \u003c/h2\u003e\n\n \u003cp\u003e Every buffer is readable, but not every buffer is writable.  The\n mutation methods of each buffer class are specified as \u003ci\u003eoptional\n operations\u003c/i\u003e that will throw a {@link ReadOnlyBufferException} when\n invoked upon a read-only buffer.  A read-only buffer does not allow its\n content to be changed, but its mark, position, and limit values are mutable.\n Whether or not a buffer is read-only may be determined by invoking its\n {@link #isReadOnly isReadOnly} method.\n\n\n \u003ch2\u003e Thread safety \u003c/h2\u003e\n\n \u003cp\u003e Buffers are not safe for use by multiple concurrent threads.  If a\n buffer is to be used by more than one thread then access to the buffer\n should be controlled by appropriate synchronization.\n\n\n \u003ch2\u003e Invocation chaining \u003c/h2\u003e\n\n \u003cp\u003e Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained; for example, the sequence of statements\n\n \u003cblockquote\u003e\u003cpre\u003e\n b.flip();\n b.position(23);\n b.limit(42);\u003c/pre\u003e\u003c/blockquote\u003e\n\n can be replaced by the single, more compact statement\n\n \u003cblockquote\u003e\u003cpre\u003e\n b.flip().position(23).limit(42);\u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{},"package":"java.nio","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"capacity","comment":"Returns this buffer\u0027s capacity.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"position","comment":"Returns this buffer\u0027s position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"position","comment":"Sets this buffer\u0027s position.  If the mark is defined and larger than the\n new position then it is discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newPosition","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"limit","comment":"Returns this buffer\u0027s limit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"limit","comment":"Sets this buffer\u0027s limit.  If the position is larger than the new limit\n then it is set to the new limit.  If the mark is defined and larger than\n the new limit then it is discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newLimit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mark","comment":"Sets this buffer\u0027s mark at its position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Resets this buffer\u0027s position to the previously-marked position.\n\n \u003cp\u003e Invoking this method neither changes nor discards the mark\u0027s\n value. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clear","comment":"Clears this buffer.  The position is set to zero, the limit is set to\n the capacity, and the mark is discarded.\n\n \u003cp\u003e Invoke this method before using a sequence of channel-read or\n \u003ci\u003eput\u003c/i\u003e operations to fill this buffer.  For example:\n\n \u003cblockquote\u003e\u003cpre\u003e\n buf.clear();     // Prepare buffer for reading\n in.read(buf);    // Read data\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e This method does not actually erase the data in the buffer, but it\n is named as if it did because it will most often be used in situations\n in which that might as well be the case. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flip","comment":"Flips this buffer.  The limit is set to the current position and then\n the position is set to zero.  If the mark is defined then it is\n discarded.\n\n \u003cp\u003e After a sequence of channel-read or \u003ci\u003eput\u003c/i\u003e operations, invoke\n this method to prepare for a sequence of channel-write or relative\n \u003ci\u003eget\u003c/i\u003e operations.  For example:\n\n \u003cblockquote\u003e\u003cpre\u003e\n buf.put(magic);    // Prepend header\n in.read(buf);      // Read data into rest of buffer\n buf.flip();        // Flip buffer\n out.write(buf);    // Write header + data to channel\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e This method is often used in conjunction with the {@link\n java.nio.ByteBuffer#compact compact} method when transferring data from\n one place to another.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"rewind","comment":"Rewinds this buffer.  The position is set to zero and the mark is\n discarded.\n\n \u003cp\u003e Invoke this method before a sequence of channel-write or \u003ci\u003eget\u003c/i\u003e\n operations, assuming that the limit has already been set\n appropriately.  For example:\n\n \u003cblockquote\u003e\u003cpre\u003e\n out.write(buf);    // Write remaining data\n buf.rewind();      // Rewind buffer\n buf.get(array);    // Copy data into array\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Buffer","qualifiedName":"java.nio.Buffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"remaining","comment":"Returns the number of elements between the current position and the\n limit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasRemaining","comment":"Tells whether there are any elements between the current position and\n the limit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isReadOnly","comment":"Tells whether or not this buffer is read-only.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasArray","comment":"Tells whether or not this buffer is backed by an accessible\n array.\n\n \u003cp\u003e If this method returns \u003ctt\u003etrue\u003c/tt\u003e then the {@link #array() array}\n and {@link #arrayOffset() arrayOffset} methods may safely be invoked.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"array","comment":"Returns the array that backs this\n buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e This method is intended to allow array-backed buffers to be\n passed to native code more efficiently. Concrete subclasses\n provide more strongly-typed return values for this method.\n\n \u003cp\u003e Modifications to this buffer\u0027s content will cause the returned\n array\u0027s content to be modified, and vice versa.\n\n \u003cp\u003e Invoke the {@link #hasArray hasArray} method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"arrayOffset","comment":"Returns the offset within this buffer\u0027s backing array of the first\n element of the buffer\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e If this buffer is backed by an array then buffer position \u003ci\u003ep\u003c/i\u003e\n corresponds to array index \u003ci\u003ep\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ctt\u003earrayOffset()\u003c/tt\u003e.\n\n \u003cp\u003e Invoke the {@link #hasArray hasArray} method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isDirect","comment":"Tells whether or not this buffer is\n \u003ca href\u003d\"ByteBuffer.html#direct\"\u003e\u003ci\u003edirect\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.nio.ShortBuffer","java.nio.ByteBuffer","java.nio.LongBuffer","java.nio.IntBuffer","java.nio.FloatBuffer","java.nio.DoubleBuffer","java.nio.CharBuffer"],"enumConstants":[]}