{"name":"Channels","comment":"Utility methods for channels and streams.\n\n \u003cp\u003e This class defines static methods that support the interoperation of the\n stream classes of the \u003ctt\u003e{@link java.io}\u003c/tt\u003e package with the channel\n classes of this package.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Channels","qualifiedName":"java.nio.channels.Channels","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"newInputStream","comment":"Constructs a stream that reads bytes from the given channel.\n\n \u003cp\u003e The \u003ctt\u003eread\u003c/tt\u003e methods of the resulting stream will throw an\n {@link IllegalBlockingModeException} if invoked while the underlying\n channel is in non-blocking mode.  The stream will not be buffered, and\n it will not support the {@link InputStream#mark mark} or {@link\n InputStream#reset reset} methods.  The stream will be safe for access by\n multiple concurrent threads.  Closing the stream will in turn cause the\n channel to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.ReadableByteChannel)","flatSignature":"(ReadableByteChannel)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"ReadableByteChannel","qualifiedName":"java.nio.channels.ReadableByteChannel","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newOutputStream","comment":"Constructs a stream that writes bytes to the given channel.\n\n \u003cp\u003e The \u003ctt\u003ewrite\u003c/tt\u003e methods of the resulting stream will throw an\n {@link IllegalBlockingModeException} if invoked while the underlying\n channel is in non-blocking mode.  The stream will not be buffered.  The\n stream will be safe for access by multiple concurrent threads.  Closing\n the stream will in turn cause the channel to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.WritableByteChannel)","flatSignature":"(WritableByteChannel)","returnType":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"WritableByteChannel","qualifiedName":"java.nio.channels.WritableByteChannel","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newInputStream","comment":"Constructs a stream that reads bytes from the given channel.\n\n \u003cp\u003e The stream will not be buffered, and it will not support the {@link\n InputStream#mark mark} or {@link InputStream#reset reset} methods.  The\n stream will be safe for access by multiple concurrent threads.  Closing\n the stream will in turn cause the channel to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.AsynchronousByteChannel)","flatSignature":"(AsynchronousByteChannel)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"AsynchronousByteChannel","qualifiedName":"java.nio.channels.AsynchronousByteChannel","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newOutputStream","comment":"Constructs a stream that writes bytes to the given channel.\n\n \u003cp\u003e The stream will not be buffered. The stream will be safe for access\n by multiple concurrent threads.  Closing the stream will in turn cause\n the channel to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.AsynchronousByteChannel)","flatSignature":"(AsynchronousByteChannel)","returnType":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"AsynchronousByteChannel","qualifiedName":"java.nio.channels.AsynchronousByteChannel","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newChannel","comment":"Constructs a channel that reads bytes from the given stream.\n\n \u003cp\u003e The resulting channel will not be buffered; it will simply redirect\n its I/O operations to the given stream.  Closing the channel will in\n turn cause the stream to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"ReadableByteChannel","qualifiedName":"java.nio.channels.ReadableByteChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newChannel","comment":"Constructs a channel that writes bytes to the given stream.\n\n \u003cp\u003e The resulting channel will not be buffered; it will simply redirect\n its I/O operations to the given stream.  Closing the channel will in\n turn cause the stream to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","returnType":{"isPrimitive":false,"simpleName":"WritableByteChannel","qualifiedName":"java.nio.channels.WritableByteChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newReader","comment":"Constructs a reader that decodes bytes from the given channel using the\n given decoder.\n\n \u003cp\u003e The resulting stream will contain an internal input buffer of at\n least \u003ctt\u003eminBufferCap\u003c/tt\u003e bytes.  The stream\u0027s \u003ctt\u003eread\u003c/tt\u003e methods\n will, as needed, fill the buffer by reading bytes from the underlying\n channel; if the channel is in non-blocking mode when bytes are to be\n read then an {@link IllegalBlockingModeException} will be thrown.  The\n resulting stream will not otherwise be buffered, and it will not support\n the {@link Reader#mark mark} or {@link Reader#reset reset} methods.\n Closing the stream will in turn cause the channel to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.ReadableByteChannel, java.nio.charset.CharsetDecoder, int)","flatSignature":"(ReadableByteChannel, CharsetDecoder, int)","returnType":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"ReadableByteChannel","qualifiedName":"java.nio.channels.ReadableByteChannel","dimension":"","elementType":{}}},{"name":"dec","type":{"isPrimitive":false,"simpleName":"CharsetDecoder","qualifiedName":"java.nio.charset.CharsetDecoder","dimension":"","elementType":{}}},{"name":"minBufferCap","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newReader","comment":"Constructs a reader that decodes bytes from the given channel according\n to the named charset.\n\n \u003cp\u003e An invocation of this method of the form\n\n \u003cblockquote\u003e\u003cpre\u003e\n Channels.newReader(ch, csname)\u003c/pre\u003e\u003c/blockquote\u003e\n\n behaves in exactly the same way as the expression\n\n \u003cblockquote\u003e\u003cpre\u003e\n Channels.newReader(ch,\n                    Charset.forName(csName)\n                        .newDecoder(),\n                    -1);\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.ReadableByteChannel, java.lang.String)","flatSignature":"(ReadableByteChannel, String)","returnType":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"ReadableByteChannel","qualifiedName":"java.nio.channels.ReadableByteChannel","dimension":"","elementType":{}}},{"name":"csName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newWriter","comment":"Constructs a writer that encodes characters using the given encoder and\n writes the resulting bytes to the given channel.\n\n \u003cp\u003e The resulting stream will contain an internal output buffer of at\n least \u003ctt\u003eminBufferCap\u003c/tt\u003e bytes.  The stream\u0027s \u003ctt\u003ewrite\u003c/tt\u003e methods\n will, as needed, flush the buffer by writing bytes to the underlying\n channel; if the channel is in non-blocking mode when bytes are to be\n written then an {@link IllegalBlockingModeException} will be thrown.\n The resulting stream will not otherwise be buffered.  Closing the stream\n will in turn cause the channel to be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.WritableByteChannel, java.nio.charset.CharsetEncoder, int)","flatSignature":"(WritableByteChannel, CharsetEncoder, int)","returnType":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"WritableByteChannel","qualifiedName":"java.nio.channels.WritableByteChannel","dimension":"","elementType":{}}},{"name":"enc","type":{"isPrimitive":false,"simpleName":"CharsetEncoder","qualifiedName":"java.nio.charset.CharsetEncoder","dimension":"","elementType":{}}},{"name":"minBufferCap","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newWriter","comment":"Constructs a writer that encodes characters according to the named\n charset and writes the resulting bytes to the given channel.\n\n \u003cp\u003e An invocation of this method of the form\n\n \u003cblockquote\u003e\u003cpre\u003e\n Channels.newWriter(ch, csname)\u003c/pre\u003e\u003c/blockquote\u003e\n\n behaves in exactly the same way as the expression\n\n \u003cblockquote\u003e\u003cpre\u003e\n Channels.newWriter(ch,\n                    Charset.forName(csName)\n                        .newEncoder(),\n                    -1);\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.WritableByteChannel, java.lang.String)","flatSignature":"(WritableByteChannel, String)","returnType":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":false,"simpleName":"WritableByteChannel","qualifiedName":"java.nio.channels.WritableByteChannel","dimension":"","elementType":{}}},{"name":"csName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}