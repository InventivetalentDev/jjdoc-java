{"name":"SocketChannel","comment":"A selectable channel for stream-oriented connecting sockets.\n\n \u003cp\u003e A socket channel is created by invoking one of the {@link #open open}\n methods of this class.  It is not possible to create a channel for an arbitrary,\n pre-existing socket. A newly-created socket channel is open but not yet\n connected.  An attempt to invoke an I/O operation upon an unconnected\n channel will cause a {@link NotYetConnectedException} to be thrown.  A\n socket channel can be connected by invoking its {@link #connect connect}\n method; once connected, a socket channel remains connected until it is\n closed.  Whether or not a socket channel is connected may be determined by\n invoking its {@link #isConnected isConnected} method.\n\n \u003cp\u003e Socket channels support \u003ci\u003enon-blocking connection:\u003c/i\u003e\u0026nbsp;A socket\n channel may be created and the process of establishing the link to the\n remote socket may be initiated via the {@link #connect connect} method for\n later completion by the {@link #finishConnect finishConnect} method.\n Whether or not a connection operation is in progress may be determined by\n invoking the {@link #isConnectionPending isConnectionPending} method.\n\n \u003cp\u003e Socket channels support \u003ci\u003easynchronous shutdown,\u003c/i\u003e which is similar\n to the asynchronous close operation specified in the {@link Channel} class.\n If the input side of a socket is shut down by one thread while another\n thread is blocked in a read operation on the socket\u0027s channel, then the read\n operation in the blocked thread will complete without reading any bytes and\n will return \u003ctt\u003e-1\u003c/tt\u003e.  If the output side of a socket is shut down by one\n thread while another thread is blocked in a write operation on the socket\u0027s\n channel, then the blocked thread will receive an {@link\n AsynchronousCloseException}.\n\n \u003cp\u003e Socket options are configured using the {@link #setOption(SocketOption,Object)\n setOption} method. Socket channels support the following options:\n \u003cblockquote\u003e\n \u003ctable border summary\u003d\"Socket options\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003eOption Name\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_SNDBUF SO_SNDBUF} \u003c/td\u003e\n     \u003ctd\u003e The size of the socket send buffer \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} \u003c/td\u003e\n     \u003ctd\u003e The size of the socket receive buffer \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_KEEPALIVE SO_KEEPALIVE} \u003c/td\u003e\n     \u003ctd\u003e Keep connection alive \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} \u003c/td\u003e\n     \u003ctd\u003e Re-use address \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_LINGER SO_LINGER} \u003c/td\u003e\n     \u003ctd\u003e Linger on close if data is present (when configured in blocking mode\n          only) \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#TCP_NODELAY TCP_NODELAY} \u003c/td\u003e\n     \u003ctd\u003e Disable the Nagle algorithm \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n Additional (implementation specific) options may also be supported.\n\n \u003cp\u003e Socket channels are safe for use by multiple concurrent threads.  They\n support concurrent reading and writing, though at most one thread may be\n reading and at most one thread may be writing at any given time.  The {@link\n #connect connect} and {@link #finishConnect finishConnect} methods are\n mutually synchronized against each other, and an attempt to initiate a read\n or write operation while an invocation of one of these methods is in\n progress will block until that invocation is complete.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.nio.channels.spi.AbstractSelectableChannel","interfaces":["java.nio.channels.ByteChannel","java.nio.channels.ScatteringByteChannel","java.nio.channels.GatheringByteChannel","java.nio.channels.NetworkChannel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"open","comment":"Opens a socket channel.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n java.nio.channels.spi.SelectorProvider#openSocketChannel\n openSocketChannel} method of the system-wide default {@link\n java.nio.channels.spi.SelectorProvider} object.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"open","comment":"Opens a socket channel and connects it to a remote address.\n\n \u003cp\u003e This convenience method works as if by invoking the {@link #open()}\n method, invoking the {@link #connect(SocketAddress) connect} method upon\n the resulting socket channel, passing it \u003ctt\u003eremote\u003c/tt\u003e, and then\n returning that channel.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"remote","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"validOps","comment":"Returns an operation set identifying this channel\u0027s supported\n operations.\n\n \u003cp\u003e Socket channels support connecting, reading, and writing, so this\n method returns \u003ctt\u003e(\u003c/tt\u003e{@link SelectionKey#OP_CONNECT}\n \u003ctt\u003e|\u003c/tt\u003e\u0026nbsp;{@link SelectionKey#OP_READ} \u003ctt\u003e|\u003c/tt\u003e\u0026nbsp;{@link\n SelectionKey#OP_WRITE}\u003ctt\u003e)\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"bind","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"local","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOption","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketOption\u003cT\u003e, T)","flatSignature":"(SocketOption\u003cT\u003e, T)","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"shutdownInput","comment":"Shutdown the connection for reading without closing the channel.\n\n \u003cp\u003e Once shutdown for reading then further reads on the channel will\n return {@code -1}, the end-of-stream indication. If the input side of the\n connection is already shutdown then invoking this method has no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownOutput","comment":"Shutdown the connection for writing without closing the channel.\n\n \u003cp\u003e Once shutdown for writing then further attempts to write to the\n channel will throw {@link ClosedChannelException}. If the output side of\n the connection is already shutdown then invoking this method has no\n effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"socket","comment":"Retrieves a socket associated with this channel.\n\n \u003cp\u003e The returned object will not declare any public methods that are not\n declared in the {@link java.net.Socket} class.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Socket","qualifiedName":"java.net.Socket","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isConnected","comment":"Tells whether or not this channel\u0027s network socket is connected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isConnectionPending","comment":"Tells whether or not a connection operation is in progress on this\n channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"connect","comment":"Connects this channel\u0027s socket.\n\n \u003cp\u003e If this channel is in non-blocking mode then an invocation of this\n method initiates a non-blocking connection operation.  If the connection\n is established immediately, as can happen with a local connection, then\n this method returns \u003ctt\u003etrue\u003c/tt\u003e.  Otherwise this method returns\n \u003ctt\u003efalse\u003c/tt\u003e and the connection operation must later be completed by\n invoking the {@link #finishConnect finishConnect} method.\n\n \u003cp\u003e If this channel is in blocking mode then an invocation of this\n method will block until the connection is established or an I/O error\n occurs.\n\n \u003cp\u003e This method performs exactly the same security checks as the {@link\n java.net.Socket} class.  That is, if a security manager has been\n installed then this method verifies that its {@link\n java.lang.SecurityManager#checkConnect checkConnect} method permits\n connecting to the address and port number of the given remote endpoint.\n\n \u003cp\u003e This method may be invoked at any time.  If a read or write\n operation upon this channel is invoked while an invocation of this\n method is in progress then that operation will first block until this\n invocation is complete.  If a connection attempt is initiated but fails,\n that is, if an invocation of this method throws a checked exception,\n then the channel will be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"remote","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"finishConnect","comment":"Finishes the process of connecting a socket channel.\n\n \u003cp\u003e A non-blocking connection operation is initiated by placing a socket\n channel in non-blocking mode and then invoking its {@link #connect\n connect} method.  Once the connection is established, or the attempt has\n failed, the socket channel will become connectable and this method may\n be invoked to complete the connection sequence.  If the connection\n operation failed then invoking this method will cause an appropriate\n {@link java.io.IOException} to be thrown.\n\n \u003cp\u003e If this channel is already connected then this method will not block\n and will immediately return \u003ctt\u003etrue\u003c/tt\u003e.  If this channel is in\n non-blocking mode then this method will return \u003ctt\u003efalse\u003c/tt\u003e if the\n connection process is not yet complete.  If this channel is in blocking\n mode then this method will block until the connection either completes\n or fails, and will always either return \u003ctt\u003etrue\u003c/tt\u003e or throw a checked\n exception describing the failure.\n\n \u003cp\u003e This method may be invoked at any time.  If a read or write\n operation upon this channel is invoked while an invocation of this\n method is in progress then that operation will first block until this\n invocation is complete.  If a connection attempt fails, that is, if an\n invocation of this method throws a checked exception, then the channel\n will be closed.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRemoteAddress","comment":"Returns the remote address to which this channel\u0027s socket is connected.\n\n \u003cp\u003e Where the channel is bound and connected to an Internet Protocol\n socket address then the return value from this method is of type {@link\n java.net.InetSocketAddress}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dsts","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dsts","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getLocalAddress","comment":"{@inheritDoc}\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n local port of the channel\u0027s socket is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}