{"name":"FileChannel","comment":"A channel for reading, writing, mapping, and manipulating a file.\n\n \u003cp\u003e A file channel is a {@link SeekableByteChannel} that is connected to\n a file. It has a current \u003ci\u003eposition\u003c/i\u003e within its file which can\n be both {@link #position() \u003ci\u003equeried\u003c/i\u003e} and {@link #position(long)\n \u003ci\u003emodified\u003c/i\u003e}.  The file itself contains a variable-length sequence\n of bytes that can be read and written and whose current {@link #size\n \u003ci\u003esize\u003c/i\u003e} can be queried.  The size of the file increases\n when bytes are written beyond its current size; the size of the file\n decreases when it is {@link #truncate \u003ci\u003etruncated\u003c/i\u003e}.  The\n file may also have some associated \u003ci\u003emetadata\u003c/i\u003e such as access\n permissions, content type, and last-modification time; this class does not\n define methods for metadata access.\n\n \u003cp\u003e In addition to the familiar read, write, and close operations of byte\n channels, this class defines the following file-specific operations: \u003c/p\u003e\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e Bytes may be {@link #read(ByteBuffer, long) read} or\n   {@link #write(ByteBuffer, long) \u003ci\u003ewritten\u003c/i\u003e} at an absolute\n   position in a file in a way that does not affect the channel\u0027s current\n   position.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A region of a file may be {@link #map \u003ci\u003emapped\u003c/i\u003e}\n   directly into memory; for large files this is often much more efficient\n   than invoking the usual \u003ctt\u003eread\u003c/tt\u003e or \u003ctt\u003ewrite\u003c/tt\u003e methods.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Updates made to a file may be {@link #force \u003ci\u003eforced\n   out\u003c/i\u003e} to the underlying storage device, ensuring that data are not\n   lost in the event of a system crash.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Bytes can be transferred from a file {@link #transferTo \u003ci\u003eto\n   some other channel\u003c/i\u003e}, and {@link #transferFrom \u003ci\u003evice\n   versa\u003c/i\u003e}, in a way that can be optimized by many operating systems\n   into a very fast transfer directly to or from the filesystem cache.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A region of a file may be {@link FileLock \u003ci\u003elocked\u003c/i\u003e}\n   against access by other programs.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e File channels are safe for use by multiple concurrent threads.  The\n {@link Channel#close close} method may be invoked at any time, as specified\n by the {@link Channel} interface.  Only one operation that involves the\n channel\u0027s position or can change its file\u0027s size may be in progress at any\n given time; attempts to initiate a second such operation while the first is\n still in progress will block until the first operation completes.  Other\n operations, in particular those that take an explicit position, may proceed\n concurrently; whether they in fact do so is dependent upon the underlying\n implementation and is therefore unspecified.\n\n \u003cp\u003e The view of a file provided by an instance of this class is guaranteed\n to be consistent with other views of the same file provided by other\n instances in the same program.  The view provided by an instance of this\n class may or may not, however, be consistent with the views seen by other\n concurrently-running programs due to caching performed by the underlying\n operating system and delays induced by network-filesystem protocols.  This\n is true regardless of the language in which these other programs are\n written, and whether they are running on the same machine or on some other\n machine.  The exact nature of any such inconsistencies are system-dependent\n and are therefore unspecified.\n\n \u003cp\u003e A file channel is created by invoking one of the {@link #open open}\n methods defined by this class. A file channel can also be obtained from an\n existing {@link java.io.FileInputStream#getChannel FileInputStream}, {@link\n java.io.FileOutputStream#getChannel FileOutputStream}, or {@link\n java.io.RandomAccessFile#getChannel RandomAccessFile} object by invoking\n that object\u0027s \u003ctt\u003egetChannel\u003c/tt\u003e method, which returns a file channel that\n is connected to the same underlying file. Where the file channel is obtained\n from an existing stream or random access file then the state of the file\n channel is intimately connected to that of the object whose \u003ctt\u003egetChannel\u003c/tt\u003e\n method returned the channel.  Changing the channel\u0027s position, whether\n explicitly or by reading or writing bytes, will change the file position of\n the originating object, and vice versa. Changing the file\u0027s length via the\n file channel will change the length seen via the originating object, and vice\n versa.  Changing the file\u0027s content by writing bytes will change the content\n seen by the originating object, and vice versa.\n\n \u003ca name\u003d\"open-mode\"\u003e\u003c/a\u003e \u003cp\u003e At various points this class specifies that an\n instance that is \"open for reading,\" \"open for writing,\" or \"open for\n reading and writing\" is required.  A channel obtained via the {@link\n java.io.FileInputStream#getChannel getChannel} method of a {@link\n java.io.FileInputStream} instance will be open for reading.  A channel\n obtained via the {@link java.io.FileOutputStream#getChannel getChannel}\n method of a {@link java.io.FileOutputStream} instance will be open for\n writing.  Finally, a channel obtained via the {@link\n java.io.RandomAccessFile#getChannel getChannel} method of a {@link\n java.io.RandomAccessFile} instance will be open for reading if the instance\n was created with mode \u003ctt\u003e\"r\"\u003c/tt\u003e and will be open for reading and writing\n if the instance was created with mode \u003ctt\u003e\"rw\"\u003c/tt\u003e.\n\n \u003ca name\u003d\"append-mode\"\u003e\u003c/a\u003e\u003cp\u003e A file channel that is open for writing may be in\n \u003ci\u003eappend mode\u003c/i\u003e, for example if it was obtained from a file-output stream\n that was created by invoking the {@link\n java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)\n FileOutputStream(File,boolean)} constructor and passing \u003ctt\u003etrue\u003c/tt\u003e for\n the second parameter.  In this mode each invocation of a relative write\n operation first advances the position to the end of the file and then writes\n the requested data.  Whether the advancement of the position and the writing\n of the data are done in a single atomic operation is system-dependent and\n therefore unspecified.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.nio.channels.spi.AbstractInterruptibleChannel","interfaces":["java.nio.channels.SeekableByteChannel","java.nio.channels.GatheringByteChannel","java.nio.channels.ScatteringByteChannel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":["java.nio.channels.FileChannel.MapMode"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"open","comment":"Opens or creates a file, returning a file channel to access the file.\n\n \u003cp\u003e The {@code options} parameter determines how the file is opened.\n The {@link StandardOpenOption#READ READ} and {@link StandardOpenOption#WRITE\n WRITE} options determine if the file should be opened for reading and/or\n writing. If neither option (or the {@link StandardOpenOption#APPEND APPEND}\n option) is contained in the array then the file is opened for reading.\n By default reading or writing commences at the beginning of the file.\n\n \u003cp\u003e In the addition to {@code READ} and {@code WRITE}, the following\n options may be present:\n\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e\n \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#APPEND APPEND} \u003c/td\u003e\n   \u003ctd\u003e If this option is present then the file is opened for writing and\n     each invocation of the channel\u0027s {@code write} method first advances\n     the position to the end of the file and then writes the requested\n     data. Whether the advancement of the position and the writing of the\n     data are done in a single atomic operation is system-dependent and\n     therefore unspecified. This option may not be used in conjunction\n     with the {@code READ} or {@code TRUNCATE_EXISTING} options. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} \u003c/td\u003e\n   \u003ctd\u003e If this option is present then the existing file is truncated to\n   a size of 0 bytes. This option is ignored when the file is opened only\n   for reading. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#CREATE_NEW CREATE_NEW} \u003c/td\u003e\n   \u003ctd\u003e If this option is present then a new file is created, failing if\n   the file already exists. When creating a file the check for the\n   existence of the file and the creation of the file if it does not exist\n   is atomic with respect to other file system operations. This option is\n   ignored when the file is opened only for reading. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd \u003e {@link StandardOpenOption#CREATE CREATE} \u003c/td\u003e\n   \u003ctd\u003e If this option is present then an existing file is opened if it\n   exists, otherwise a new file is created. When creating a file the check\n   for the existence of the file and the creation of the file if it does\n   not exist is atomic with respect to other file system operations. This\n   option is ignored if the {@code CREATE_NEW} option is also present or\n   the file is opened only for reading. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd \u003e {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} \u003c/td\u003e\n   \u003ctd\u003e When this option is present then the implementation makes a\n   \u003cem\u003ebest effort\u003c/em\u003e attempt to delete the file when closed by the\n   the {@link #close close} method. If the {@code close} method is not\n   invoked then a \u003cem\u003ebest effort\u003c/em\u003e attempt is made to delete the file\n   when the Java virtual machine terminates. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e{@link StandardOpenOption#SPARSE SPARSE} \u003c/td\u003e\n   \u003ctd\u003e When creating a new file this option is a \u003cem\u003ehint\u003c/em\u003e that the\n   new file will be sparse. This option is ignored when not creating\n   a new file. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#SYNC SYNC} \u003c/td\u003e\n   \u003ctd\u003e Requires that every update to the file\u0027s content or metadata be\n   written synchronously to the underlying storage device. (see \u003ca\n   href\u003d\"../file/package-summary.html#integrity\"\u003e Synchronized I/O file\n   integrity\u003c/a\u003e). \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#DSYNC DSYNC} \u003c/td\u003e\n   \u003ctd\u003e Requires that every update to the file\u0027s content be written\n   synchronously to the underlying storage device. (see \u003ca\n   href\u003d\"../file/package-summary.html#integrity\"\u003e Synchronized I/O file\n   integrity\u003c/a\u003e). \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003e An implementation may also support additional options.\n\n \u003cp\u003e The {@code attrs} parameter is an optional array of file {@link\n FileAttribute file-attributes} to set atomically when creating the file.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n FileSystemProvider#newFileChannel newFileChannel} method on the\n provider that created the {@code Path}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.util.Set\u003c? extends java.nio.file.OpenOption\u003e, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, Set\u003c? extends OpenOption\u003e, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"open","comment":"Opens or creates a file, returning a file channel to access the file.\n\n \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n invocation\n \u003cpre\u003e\n     fc.{@link #open(Path,Set,FileAttribute[]) open}(file, opts, new FileAttribute\u0026lt;?\u0026gt;[0]);\n \u003c/pre\u003e\n where {@code opts} is a set of the options specified in the {@code\n options} array.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.OpenOption...)","flatSignature":"(Path, OpenOption...)","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffer.\n\n \u003cp\u003e Bytes are read starting at this channel\u0027s current file position, and\n then the file position is updated with the number of bytes actually\n read.  Otherwise this method behaves exactly as specified in the {@link\n ReadableByteChannel} interface. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a sequence of bytes from this channel into a subsequence of the\n given buffers.\n\n \u003cp\u003e Bytes are read starting at this channel\u0027s current file position, and\n then the file position is updated with the number of bytes actually\n read.  Otherwise this method behaves exactly as specified in the {@link\n ScatteringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dsts","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffers.\n\n \u003cp\u003e Bytes are read starting at this channel\u0027s current file position, and\n then the file position is updated with the number of bytes actually\n read.  Otherwise this method behaves exactly as specified in the {@link\n ScatteringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dsts","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffer.\n\n \u003cp\u003e Bytes are written starting at this channel\u0027s current file position\n unless the channel is in append mode, in which case the position is\n first advanced to the end of the file.  The file is grown, if necessary,\n to accommodate the written bytes, and then the file position is updated\n with the number of bytes actually written.  Otherwise this method\n behaves exactly as specified by the {@link WritableByteChannel}\n interface. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from a subsequence of the\n given buffers.\n\n \u003cp\u003e Bytes are written starting at this channel\u0027s current file position\n unless the channel is in append mode, in which case the position is\n first advanced to the end of the file.  The file is grown, if necessary,\n to accommodate the written bytes, and then the file position is updated\n with the number of bytes actually written.  Otherwise this method\n behaves exactly as specified in the {@link GatheringByteChannel}\n interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffers.\n\n \u003cp\u003e Bytes are written starting at this channel\u0027s current file position\n unless the channel is in append mode, in which case the position is\n first advanced to the end of the file.  The file is grown, if necessary,\n to accommodate the written bytes, and then the file position is updated\n with the number of bytes actually written.  Otherwise this method\n behaves exactly as specified in the {@link GatheringByteChannel}\n interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"position","comment":"Returns this channel\u0027s file position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"position","comment":"Sets this channel\u0027s file position.\n\n \u003cp\u003e Setting the position to a value that is greater than the file\u0027s\n current size is legal but does not change the size of the file.  A later\n attempt to read bytes at such a position will immediately return an\n end-of-file indication.  A later attempt to write bytes at such a\n position will cause the file to be grown to accommodate the new bytes;\n the values of any bytes between the previous end-of-file and the\n newly-written bytes are unspecified.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"newPosition","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"size","comment":"Returns the current size of this channel\u0027s file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"truncate","comment":"Truncates this channel\u0027s file to the given size.\n\n \u003cp\u003e If the given size is less than the file\u0027s current size then the file\n is truncated, discarding any bytes beyond the new end of the file.  If\n the given size is greater than or equal to the file\u0027s current size then\n the file is not modified.  In either case, if this channel\u0027s file\n position is greater than the given size then it is set to that size.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"force","comment":"Forces any updates to this channel\u0027s file to be written to the storage\n device that contains it.\n\n \u003cp\u003e If this channel\u0027s file resides on a local storage device then when\n this method returns it is guaranteed that all changes made to the file\n since this channel was created, or since this method was last invoked,\n will have been written to that device.  This is useful for ensuring that\n critical information is not lost in the event of a system crash.\n\n \u003cp\u003e If the file does not reside on a local device then no such guarantee\n is made.\n\n \u003cp\u003e The \u003ctt\u003emetaData\u003c/tt\u003e parameter can be used to limit the number of\n I/O operations that this method is required to perform.  Passing\n \u003ctt\u003efalse\u003c/tt\u003e for this parameter indicates that only updates to the\n file\u0027s content need be written to storage; passing \u003ctt\u003etrue\u003c/tt\u003e\n indicates that updates to both the file\u0027s content and metadata must be\n written, which generally requires at least one more I/O operation.\n Whether this parameter actually has any effect is dependent upon the\n underlying operating system and is therefore unspecified.\n\n \u003cp\u003e Invoking this method may cause an I/O operation to occur even if the\n channel was only opened for reading.  Some operating systems, for\n example, maintain a last-access time as part of a file\u0027s metadata, and\n this time is updated whenever the file is read.  Whether or not this is\n actually done is system-dependent and is therefore unspecified.\n\n \u003cp\u003e This method is only guaranteed to force changes that were made to\n this channel\u0027s file via the methods defined in this class.  It may or\n may not force changes that were made by modifying the content of a\n {@link MappedByteBuffer \u003ci\u003emapped byte buffer\u003c/i\u003e} obtained by\n invoking the {@link #map map} method.  Invoking the {@link\n MappedByteBuffer#force force} method of the mapped byte buffer will\n force changes made to the buffer\u0027s content to be written.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"metaData","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"transferTo","comment":"Transfers bytes from this channel\u0027s file to the given writable byte\n channel.\n\n \u003cp\u003e An attempt is made to read up to \u003ctt\u003ecount\u003c/tt\u003e bytes starting at\n the given \u003ctt\u003eposition\u003c/tt\u003e in this channel\u0027s file and write them to the\n target channel.  An invocation of this method may or may not transfer\n all of the requested bytes; whether or not it does so depends upon the\n natures and states of the channels.  Fewer than the requested number of\n bytes are transferred if this channel\u0027s file contains fewer than\n \u003ctt\u003ecount\u003c/tt\u003e bytes starting at the given \u003ctt\u003eposition\u003c/tt\u003e, or if the\n target channel is non-blocking and it has fewer than \u003ctt\u003ecount\u003c/tt\u003e\n bytes free in its output buffer.\n\n \u003cp\u003e This method does not modify this channel\u0027s position.  If the given\n position is greater than the file\u0027s current size then no bytes are\n transferred.  If the target channel has a position then bytes are\n written starting at that position and then the position is incremented\n by the number of bytes written.\n\n \u003cp\u003e This method is potentially much more efficient than a simple loop\n that reads from this channel and writes to the target channel.  Many\n operating systems can transfer bytes directly from the filesystem cache\n to the target channel without actually copying them.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long, java.nio.channels.WritableByteChannel)","flatSignature":"(long, long, WritableByteChannel)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"WritableByteChannel","qualifiedName":"java.nio.channels.WritableByteChannel","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"transferFrom","comment":"Transfers bytes into this channel\u0027s file from the given readable byte\n channel.\n\n \u003cp\u003e An attempt is made to read up to \u003ctt\u003ecount\u003c/tt\u003e bytes from the\n source channel and write them to this channel\u0027s file starting at the\n given \u003ctt\u003eposition\u003c/tt\u003e.  An invocation of this method may or may not\n transfer all of the requested bytes; whether or not it does so depends\n upon the natures and states of the channels.  Fewer than the requested\n number of bytes will be transferred if the source channel has fewer than\n \u003ctt\u003ecount\u003c/tt\u003e bytes remaining, or if the source channel is non-blocking\n and has fewer than \u003ctt\u003ecount\u003c/tt\u003e bytes immediately available in its\n input buffer.\n\n \u003cp\u003e This method does not modify this channel\u0027s position.  If the given\n position is greater than the file\u0027s current size then no bytes are\n transferred.  If the source channel has a position then bytes are read\n starting at that position and then the position is incremented by the\n number of bytes read.\n\n \u003cp\u003e This method is potentially much more efficient than a simple loop\n that reads from the source channel and writes to this channel.  Many\n operating systems can transfer bytes directly from the source channel\n into the filesystem cache without actually copying them.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.ReadableByteChannel, long, long)","flatSignature":"(ReadableByteChannel, long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ReadableByteChannel","qualifiedName":"java.nio.channels.ReadableByteChannel","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.\n\n \u003cp\u003e This method works in the same manner as the {@link\n #read(ByteBuffer)} method, except that bytes are read starting at the\n given file position rather than at the channel\u0027s current position.  This\n method does not modify this channel\u0027s position.  If the given position\n is greater than the file\u0027s current size then no bytes are read.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, long)","flatSignature":"(ByteBuffer, long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffer,\n starting at the given file position.\n\n \u003cp\u003e This method works in the same manner as the {@link\n #write(ByteBuffer)} method, except that bytes are written starting at\n the given file position rather than at the channel\u0027s current position.\n This method does not modify this channel\u0027s position.  If the given\n position is greater than the file\u0027s current size then the file will be\n grown to accommodate the new bytes; the values of any bytes between the\n previous end-of-file and the newly-written bytes are unspecified.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, long)","flatSignature":"(ByteBuffer, long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"map","comment":"Maps a region of this channel\u0027s file directly into memory.\n\n \u003cp\u003e A region of a file may be mapped into memory in one of three modes:\n \u003c/p\u003e\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e \u003ci\u003eRead-only:\u003c/i\u003e Any attempt to modify the resulting buffer\n   will cause a {@link java.nio.ReadOnlyBufferException} to be thrown.\n   ({@link MapMode#READ_ONLY MapMode.READ_ONLY}) \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e \u003ci\u003eRead/write:\u003c/i\u003e Changes made to the resulting buffer will\n   eventually be propagated to the file; they may or may not be made\n   visible to other programs that have mapped the same file.  ({@link\n   MapMode#READ_WRITE MapMode.READ_WRITE}) \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e \u003ci\u003ePrivate:\u003c/i\u003e Changes made to the resulting buffer will not\n   be propagated to the file and will not be visible to other programs\n   that have mapped the same file; instead, they will cause private\n   copies of the modified portions of the buffer to be created.  ({@link\n   MapMode#PRIVATE MapMode.PRIVATE}) \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e For a read-only mapping, this channel must have been opened for\n reading; for a read/write or private mapping, this channel must have\n been opened for both reading and writing.\n\n \u003cp\u003e The {@link MappedByteBuffer \u003ci\u003emapped byte buffer\u003c/i\u003e}\n returned by this method will have a position of zero and a limit and\n capacity of \u003ctt\u003esize\u003c/tt\u003e; its mark will be undefined.  The buffer and\n the mapping that it represents will remain valid until the buffer itself\n is garbage-collected.\n\n \u003cp\u003e A mapping, once established, is not dependent upon the file channel\n that was used to create it.  Closing the channel, in particular, has no\n effect upon the validity of the mapping.\n\n \u003cp\u003e Many of the details of memory-mapped files are inherently dependent\n upon the underlying operating system and are therefore unspecified.  The\n behavior of this method when the requested region is not completely\n contained within this channel\u0027s file is unspecified.  Whether changes\n made to the content or size of the underlying file, by this program or\n another, are propagated to the buffer is unspecified.  The rate at which\n changes to the buffer are propagated to the file is unspecified.\n\n \u003cp\u003e For most operating systems, mapping a file into memory is more\n expensive than reading or writing a few tens of kilobytes of data via\n the usual {@link #read read} and {@link #write write} methods.  From the\n standpoint of performance it is generally only worth mapping relatively\n large files into memory.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.FileChannel.MapMode, long, long)","flatSignature":"(FileChannel.MapMode, long, long)","returnType":{"isPrimitive":false,"simpleName":"MappedByteBuffer","qualifiedName":"java.nio.MappedByteBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mode","type":{"isPrimitive":false,"simpleName":"MapMode","qualifiedName":"java.nio.channels.FileChannel.MapMode","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lock","comment":"Acquires a lock on the given region of this channel\u0027s file.\n\n \u003cp\u003e An invocation of this method will block until the region can be\n locked, this channel is closed, or the invoking thread is interrupted,\n whichever comes first.\n\n \u003cp\u003e If this channel is closed by another thread during an invocation of\n this method then an {@link AsynchronousCloseException} will be thrown.\n\n \u003cp\u003e If the invoking thread is interrupted while waiting to acquire the\n lock then its interrupt status will be set and a {@link\n FileLockInterruptionException} will be thrown.  If the invoker\u0027s\n interrupt status is set when this method is invoked then that exception\n will be thrown immediately; the thread\u0027s interrupt status will not be\n changed.\n\n \u003cp\u003e The region specified by the \u003ctt\u003eposition\u003c/tt\u003e and \u003ctt\u003esize\u003c/tt\u003e\n parameters need not be contained within, or even overlap, the actual\n underlying file.  Lock regions are fixed in size; if a locked region\n initially contains the end of the file and the file grows beyond the\n region then the new portion of the file will not be covered by the lock.\n If a file is expected to grow in size and a lock on the entire file is\n required then a region starting at zero, and no smaller than the\n expected maximum size of the file, should be locked.  The zero-argument\n {@link #lock()} method simply locks a region of size {@link\n Long#MAX_VALUE}.\n\n \u003cp\u003e Some operating systems do not support shared locks, in which case a\n request for a shared lock is automatically converted into a request for\n an exclusive lock.  Whether the newly-acquired lock is shared or\n exclusive may be tested by invoking the resulting lock object\u0027s {@link\n FileLock#isShared() isShared} method.\n\n \u003cp\u003e File locks are held on behalf of the entire Java virtual machine.\n They are not suitable for controlling access to a file by multiple\n threads within the same virtual machine.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long, boolean)","flatSignature":"(long, long, boolean)","returnType":{"isPrimitive":false,"simpleName":"FileLock","qualifiedName":"java.nio.channels.FileLock","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"shared","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lock","comment":"Acquires an exclusive lock on this channel\u0027s file.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003efc.lock()\u003c/tt\u003e behaves\n in exactly the same way as the invocation\n\n \u003cpre\u003e\n     fc.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileLock","qualifiedName":"java.nio.channels.FileLock","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Attempts to acquire a lock on the given region of this channel\u0027s file.\n\n \u003cp\u003e This method does not block.  An invocation always returns\n immediately, either having acquired a lock on the requested region or\n having failed to do so.  If it fails to acquire a lock because an\n overlapping lock is held by another program then it returns\n \u003ctt\u003enull\u003c/tt\u003e.  If it fails to acquire a lock for any other reason then\n an appropriate exception is thrown.\n\n \u003cp\u003e The region specified by the \u003ctt\u003eposition\u003c/tt\u003e and \u003ctt\u003esize\u003c/tt\u003e\n parameters need not be contained within, or even overlap, the actual\n underlying file.  Lock regions are fixed in size; if a locked region\n initially contains the end of the file and the file grows beyond the\n region then the new portion of the file will not be covered by the lock.\n If a file is expected to grow in size and a lock on the entire file is\n required then a region starting at zero, and no smaller than the\n expected maximum size of the file, should be locked.  The zero-argument\n {@link #tryLock()} method simply locks a region of size {@link\n Long#MAX_VALUE}.\n\n \u003cp\u003e Some operating systems do not support shared locks, in which case a\n request for a shared lock is automatically converted into a request for\n an exclusive lock.  Whether the newly-acquired lock is shared or\n exclusive may be tested by invoking the resulting lock object\u0027s {@link\n FileLock#isShared() isShared} method.\n\n \u003cp\u003e File locks are held on behalf of the entire Java virtual machine.\n They are not suitable for controlling access to a file by multiple\n threads within the same virtual machine.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long, boolean)","flatSignature":"(long, long, boolean)","returnType":{"isPrimitive":false,"simpleName":"FileLock","qualifiedName":"java.nio.channels.FileLock","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"shared","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryLock","comment":"Attempts to acquire an exclusive lock on this channel\u0027s file.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003efc.tryLock()\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     fc.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileLock","qualifiedName":"java.nio.channels.FileLock","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}