{"name":"AsynchronousChannelGroup","comment":"A grouping of asynchronous channels for the purpose of resource sharing.\n\n \u003cp\u003e An asynchronous channel group encapsulates the mechanics required to\n handle the completion of I/O operations initiated by {@link AsynchronousChannel\n asynchronous channels} that are bound to the group. A group has an associated\n thread pool to which tasks are submitted to handle I/O events and dispatch to\n {@link CompletionHandler completion-handlers} that consume the result of\n asynchronous operations performed on channels in the group. In addition to\n handling I/O events, the pooled threads may also execute other tasks required\n to support the execution of asynchronous I/O operations.\n\n \u003cp\u003e An asynchronous channel group is created by invoking the {@link\n #withFixedThreadPool withFixedThreadPool} or {@link #withCachedThreadPool\n withCachedThreadPool} methods defined here. Channels are bound to a group by\n specifying the group when constructing the channel. The associated thread\n pool is \u003cem\u003eowned\u003c/em\u003e by the group; termination of the group results in the\n shutdown of the associated thread pool.\n\n \u003cp\u003e In addition to groups created explicitly, the Java virtual machine\n maintains a system-wide \u003cem\u003edefault group\u003c/em\u003e that is constructed\n automatically. Asynchronous channels that do not specify a group at\n construction time are bound to the default group. The default group has an\n associated thread pool that creates new threads as needed. The default group\n may be configured by means of system properties defined in the table below.\n Where the {@link java.util.concurrent.ThreadFactory ThreadFactory} for the\n default group is not configured then the pooled threads of the default group\n are {@link Thread#isDaemon daemon} threads.\n\n \u003ctable border summary\u003d\"System properties\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003eSystem property\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@code java.nio.channels.DefaultThreadPool.threadFactory} \u003c/td\u003e\n     \u003ctd\u003e The value of this property is taken to be the fully-qualified name\n     of a concrete {@link java.util.concurrent.ThreadFactory ThreadFactory}\n     class. The class is loaded using the system class loader and instantiated.\n     The factory\u0027s {@link java.util.concurrent.ThreadFactory#newThread\n     newThread} method is invoked to create each thread for the default\n     group\u0027s thread pool. If the process to load and instantiate the value\n     of the property fails then an unspecified error is thrown during the\n     construction of the default group. \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@code java.nio.channels.DefaultThreadPool.initialSize} \u003c/td\u003e\n     \u003ctd\u003e The value of the {@code initialSize} parameter for the default\n     group (see {@link #withCachedThreadPool withCachedThreadPool}).\n     The value of the property is taken to be the {@code String}\n     representation of an {@code Integer} that is the initial size parameter.\n     If the value cannot be parsed as an {@code Integer} it causes an\n     unspecified error to be thrown during the construction of the default\n     group. \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003ca name\u003d\"threading\"\u003e\u003c/a\u003e\u003ch2\u003eThreading\u003c/h2\u003e\n\n \u003cp\u003e The completion handler for an I/O operation initiated on a channel bound\n to a group is guaranteed to be invoked by one of the pooled threads in the\n group. This ensures that the completion handler is run by a thread with the\n expected \u003cem\u003eidentity\u003c/em\u003e.\n\n \u003cp\u003e Where an I/O operation completes immediately, and the initiating thread\n is one of the pooled threads in the group then the completion handler may\n be invoked directly by the initiating thread. To avoid stack overflow, an\n implementation may impose a limit as to the number of activations on the\n thread stack. Some I/O operations may prohibit invoking the completion\n handler directly by the initiating thread (see {@link\n AsynchronousServerSocketChannel#accept(Object,CompletionHandler) accept}).\n\n \u003ca name\u003d\"shutdown\"\u003e\u003c/a\u003e\u003ch2\u003eShutdown and Termination\u003c/h2\u003e\n\n \u003cp\u003e The {@link #shutdown() shutdown} method is used to initiate an \u003cem\u003eorderly\n shutdown\u003c/em\u003e of a group. An orderly shutdown marks the group as shutdown;\n further attempts to construct a channel that binds to the group will throw\n {@link ShutdownChannelGroupException}. Whether or not a group is shutdown can\n be tested using the {@link #isShutdown() isShutdown} method. Once shutdown,\n the group \u003cem\u003eterminates\u003c/em\u003e when all asynchronous channels that are bound to\n the group are closed, all actively executing completion handlers have run to\n completion, and resources used by the group are released. No attempt is made\n to stop or interrupt threads that are executing completion handlers. The\n {@link #isTerminated() isTerminated} method is used to test if the group has\n terminated, and the {@link #awaitTermination awaitTermination} method can be\n used to block until the group has terminated.\n\n \u003cp\u003e The {@link #shutdownNow() shutdownNow} method can be used to initiate a\n \u003cem\u003eforceful shutdown\u003c/em\u003e of the group. In addition to the actions performed\n by an orderly shutdown, the {@code shutdownNow} method closes all open channels\n in the group as if by invoking the {@link AsynchronousChannel#close close}\n method.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AsynchronousChannelGroup","qualifiedName":"java.nio.channels.AsynchronousChannelGroup","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"provider","comment":"Returns the provider that created this channel group.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AsynchronousChannelProvider","qualifiedName":"java.nio.channels.spi.AsynchronousChannelProvider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"withFixedThreadPool","comment":"Creates an asynchronous channel group with a fixed thread pool.\n\n \u003cp\u003e The resulting asynchronous channel group reuses a fixed number of\n threads. At any point, at most {@code nThreads} threads will be active\n processing tasks that are submitted to handle I/O events and dispatch\n completion results for operations initiated on asynchronous channels in\n the group.\n\n \u003cp\u003e The group is created by invoking the {@link\n AsynchronousChannelProvider#openAsynchronousChannelGroup(int,ThreadFactory)\n openAsynchronousChannelGroup(int,ThreadFactory)} method of the system-wide\n default {@link AsynchronousChannelProvider} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.ThreadFactory)","flatSignature":"(int, ThreadFactory)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousChannelGroup","qualifiedName":"java.nio.channels.AsynchronousChannelGroup","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nThreads","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withCachedThreadPool","comment":"Creates an asynchronous channel group with a given thread pool that\n creates new threads as needed.\n\n \u003cp\u003e The {@code executor} parameter is an {@code ExecutorService} that\n creates new threads as needed to execute tasks that are submitted to\n handle I/O events and dispatch completion results for operations initiated\n on asynchronous channels in the group. It may reuse previously constructed\n threads when they are available.\n\n \u003cp\u003e The {@code initialSize} parameter may be used by the implementation\n as a \u003cem\u003ehint\u003c/em\u003e as to the initial number of tasks it may submit. For\n example, it may be used to indicate the initial number of threads that\n wait on I/O events.\n\n \u003cp\u003e The executor is intended to be used exclusively by the resulting\n asynchronous channel group. Termination of the group results in the\n orderly  {@link ExecutorService#shutdown shutdown} of the executor\n service. Shutting down the executor service by other means results in\n unspecified behavior.\n\n \u003cp\u003e The group is created by invoking the {@link\n AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)\n openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide\n default {@link AsynchronousChannelProvider} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ExecutorService, int)","flatSignature":"(ExecutorService, int)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousChannelGroup","qualifiedName":"java.nio.channels.AsynchronousChannelGroup","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"executor","type":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}}},{"name":"initialSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"withThreadPool","comment":"Creates an asynchronous channel group with a given thread pool.\n\n \u003cp\u003e The {@code executor} parameter is an {@code ExecutorService} that\n executes tasks submitted to dispatch completion results for operations\n initiated on asynchronous channels in the group.\n\n \u003cp\u003e Care should be taken when configuring the executor service. It\n should support \u003cem\u003edirect handoff\u003c/em\u003e or \u003cem\u003eunbounded queuing\u003c/em\u003e of\n submitted tasks, and the thread that invokes the {@link\n ExecutorService#execute execute} method should never invoke the task\n directly. An implementation may mandate additional constraints.\n\n \u003cp\u003e The executor is intended to be used exclusively by the resulting\n asynchronous channel group. Termination of the group results in the\n orderly  {@link ExecutorService#shutdown shutdown} of the executor\n service. Shutting down the executor service by other means results in\n unspecified behavior.\n\n \u003cp\u003e The group is created by invoking the {@link\n AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)\n openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide\n default {@link AsynchronousChannelProvider} object with an {@code\n initialSize} of {@code 0}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ExecutorService)","flatSignature":"(ExecutorService)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousChannelGroup","qualifiedName":"java.nio.channels.AsynchronousChannelGroup","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"executor","type":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isShutdown","comment":"Tells whether or not this asynchronous channel group is shutdown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isTerminated","comment":"Tells whether or not this group has terminated.\n\n \u003cp\u003e Where this method returns {@code true}, then the associated thread\n pool has also {@link ExecutorService#isTerminated terminated}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdown","comment":"Initiates an orderly shutdown of the group.\n\n \u003cp\u003e This method marks the group as shutdown. Further attempts to construct\n channel that binds to this group will throw {@link ShutdownChannelGroupException}.\n The group terminates when all asynchronous channels in the group are\n closed, all actively executing completion handlers have run to completion,\n and all resources have been released. This method has no effect if the\n group is already shutdown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownNow","comment":"Shuts down the group and closes all open channels in the group.\n\n \u003cp\u003e In addition to the actions performed by the {@link #shutdown() shutdown}\n method, this method invokes the {@link AsynchronousChannel#close close}\n method on all open channels in the group. This method does not attempt to\n stop or interrupt threads that are executing completion handlers. The\n group terminates when all actively executing completion handlers have run\n to completion and all resources have been released. This method may be\n invoked at any time. If some other thread has already invoked it, then\n another invocation will block until the first invocation is complete,\n after which it will return without effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"awaitTermination","comment":"Awaits termination of the group.\n\n \u003cp\u003e This method blocks until the group has terminated, or the timeout\n occurs, or the current thread is interrupted, whichever happens first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}