{"name":"AsynchronousFileChannel","comment":"An asynchronous channel for reading, writing, and manipulating a file.\n\n \u003cp\u003e An asynchronous file channel is created when a file is opened by invoking\n one of the {@link #open open} methods defined by this class. The file contains\n a variable-length sequence of bytes that can be read and written and whose\n current size can be {@link #size() queried}. The size of the file increases\n when bytes are written beyond its  current size; the size of the file decreases\n when it is {@link #truncate truncated}.\n\n \u003cp\u003e An asynchronous file channel does not have a \u003ci\u003ecurrent position\u003c/i\u003e\n within the file. Instead, the file position is specified to each read and\n write method that initiates asynchronous operations. A {@link CompletionHandler}\n is specified as a parameter and is invoked to consume the result of the I/O\n operation. This class also defines read and write methods that initiate\n asynchronous operations, returning a {@link Future} to represent the pending\n result of the operation. The {@code Future} may be used to check if the\n operation has completed, wait for its completion, and retrieve the result.\n\n \u003cp\u003e In addition to read and write operations, this class defines the\n following operations: \u003c/p\u003e\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e Updates made to a file may be {@link #force \u003ci\u003eforced\n   out\u003c/i\u003e} to the underlying storage device, ensuring that data are not\n   lost in the event of a system crash.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A region of a file may be {@link #lock \u003ci\u003elocked\u003c/i\u003e} against\n   access by other programs.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e An {@code AsynchronousFileChannel} is associated with a thread pool to\n which tasks are submitted to handle I/O events and dispatch to completion\n handlers that consume the results of I/O operations on the channel. The\n completion handler for an I/O operation initiated on a channel is guaranteed\n to be invoked by one of the threads in the thread pool (This ensures that the\n completion handler is run by a thread with the expected \u003cem\u003eidentity\u003c/em\u003e).\n Where an I/O operation completes immediately, and the initiating thread is\n itself a thread in the thread pool, then the completion handler may be invoked\n directly by the initiating thread. When an {@code AsynchronousFileChannel} is\n created without specifying a thread pool then the channel is associated with\n a system-dependent default thread pool that may be shared with other\n channels. The default thread pool is configured by the system properties\n defined by the {@link AsynchronousChannelGroup} class.\n\n \u003cp\u003e Channels of this type are safe for use by multiple concurrent threads. The\n {@link Channel#close close} method may be invoked at any time, as specified\n by the {@link Channel} interface. This causes all outstanding asynchronous\n operations on the channel to complete with the exception {@link\n AsynchronousCloseException}. Multiple read and write operations may be\n outstanding at the same time. When multiple read and write operations are\n outstanding then the ordering of the I/O operations, and the order that the\n completion handlers are invoked, is not specified; they are not, in particular,\n guaranteed to execute in the order that the operations were initiated. The\n {@link java.nio.ByteBuffer ByteBuffers} used when reading or writing are not\n safe for use by multiple concurrent I/O operations. Furthermore, after an I/O\n operation is initiated then care should be taken to ensure that the buffer is\n not accessed until after the operation has completed.\n\n \u003cp\u003e As with {@link FileChannel}, the view of a file provided by an instance of\n this class is guaranteed to be consistent with other views of the same file\n provided by other instances in the same program.  The view provided by an\n instance of this class may or may not, however, be consistent with the views\n seen by other concurrently-running programs due to caching performed by the\n underlying operating system and delays induced by network-filesystem protocols.\n This is true regardless of the language in which these other programs are\n written, and whether they are running on the same machine or on some other\n machine.  The exact nature of any such inconsistencies are system-dependent\n and are therefore unspecified.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AsynchronousFileChannel","qualifiedName":"java.nio.channels.AsynchronousFileChannel","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.lang.Object","interfaces":["java.nio.channels.AsynchronousChannel"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"open","comment":"Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file.\n\n \u003cp\u003e The {@code options} parameter determines how the file is opened.\n The {@link StandardOpenOption#READ READ} and {@link StandardOpenOption#WRITE\n WRITE} options determines if the file should be opened for reading and/or\n writing. If neither option is contained in the array then an existing file\n is opened for  reading.\n\n \u003cp\u003e In addition to {@code READ} and {@code WRITE}, the following options\n may be present:\n\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"\"\u003e\n \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} \u003c/td\u003e\n   \u003ctd\u003e When opening an existing file, the file is first truncated to a\n   size of 0 bytes. This option is ignored when the file is opened only\n   for reading.\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#CREATE_NEW CREATE_NEW} \u003c/td\u003e\n   \u003ctd\u003e If this option is present then a new file is created, failing if\n   the file already exists. When creating a file the check for the\n   existence of the file and the creation of the file if it does not exist\n   is atomic with respect to other file system operations. This option is\n   ignored when the file is opened only for reading. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd \u003e {@link StandardOpenOption#CREATE CREATE} \u003c/td\u003e\n   \u003ctd\u003e If this option is present then an existing file is opened if it\n   exists, otherwise a new file is created. When creating a file the check\n   for the existence of the file and the creation of the file if it does\n   not exist is atomic with respect to other file system operations. This\n   option is ignored if the {@code CREATE_NEW} option is also present or\n   the file is opened only for reading. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd \u003e {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} \u003c/td\u003e\n   \u003ctd\u003e When this option is present then the implementation makes a\n   \u003cem\u003ebest effort\u003c/em\u003e attempt to delete the file when closed by the\n   the {@link #close close} method. If the {@code close} method is not\n   invoked then a \u003cem\u003ebest effort\u003c/em\u003e attempt is made to delete the file\n   when the Java virtual machine terminates. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e{@link StandardOpenOption#SPARSE SPARSE} \u003c/td\u003e\n   \u003ctd\u003e When creating a new file this option is a \u003cem\u003ehint\u003c/em\u003e that the\n   new file will be sparse. This option is ignored when not creating\n   a new file. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#SYNC SYNC} \u003c/td\u003e\n   \u003ctd\u003e Requires that every update to the file\u0027s content or metadata be\n   written synchronously to the underlying storage device. (see \u003ca\n   href\u003d\"../file/package-summary.html#integrity\"\u003e Synchronized I/O file\n   integrity\u003c/a\u003e). \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e {@link StandardOpenOption#DSYNC DSYNC} \u003c/td\u003e\n   \u003ctd\u003e Requires that every update to the file\u0027s content be written\n   synchronously to the underlying storage device. (see \u003ca\n   href\u003d\"../file/package-summary.html#integrity\"\u003e Synchronized I/O file\n   integrity\u003c/a\u003e). \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003e An implementation may also support additional options.\n\n \u003cp\u003e The {@code executor} parameter is the {@link ExecutorService} to\n which tasks are submitted to handle I/O events and dispatch completion\n results for operations initiated on resulting channel.\n The nature of these tasks is highly implementation specific and so care\n should be taken when configuring the {@code Executor}. Minimally it\n should support an unbounded work queue and should not run tasks on the\n caller thread of the {@link ExecutorService#execute execute} method.\n Shutting down the executor service while the channel is open results in\n unspecified behavior.\n\n \u003cp\u003e The {@code attrs} parameter is an optional array of file {@link\n FileAttribute file-attributes} to set atomically when creating the file.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n FileSystemProvider#newFileChannel newFileChannel} method on the\n provider that created the {@code Path}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.util.Set\u003c? extends java.nio.file.OpenOption\u003e, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute\u003c?\u003e...)","flatSignature":"(Path, Set\u003c? extends OpenOption\u003e, ExecutorService, FileAttribute\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousFileChannel","qualifiedName":"java.nio.channels.AsynchronousFileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}}},{"name":"attrs","type":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"FileAttribute","qualifiedName":"java.nio.file.attribute.FileAttribute","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"open","comment":"Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file.\n\n \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n invocation\n \u003cpre\u003e\n     ch.{@link #open(Path,Set,ExecutorService,FileAttribute[])\n       open}(file, opts, null, new FileAttribute\u0026lt;?\u0026gt;[0]);\n \u003c/pre\u003e\n where {@code opts} is a {@code Set} containing the options specified to\n this method.\n\n \u003cp\u003e The resulting channel is associated with default thread pool to which\n tasks are submitted to handle I/O events and dispatch to completion\n handlers that consume the result of asynchronous operations performed on\n the resulting channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.file.Path, java.nio.file.OpenOption...)","flatSignature":"(Path, OpenOption...)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousFileChannel","qualifiedName":"java.nio.channels.AsynchronousFileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"Path","qualifiedName":"java.nio.file.Path","dimension":"","elementType":{}}},{"name":"options","type":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"OpenOption","qualifiedName":"java.nio.file.OpenOption","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"size","comment":"Returns the current size of this channel\u0027s file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"truncate","comment":"Truncates this channel\u0027s file to the given size.\n\n \u003cp\u003e If the given size is less than the file\u0027s current size then the file\n is truncated, discarding any bytes beyond the new end of the file.  If\n the given size is greater than or equal to the file\u0027s current size then\n the file is not modified. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousFileChannel","qualifiedName":"java.nio.channels.AsynchronousFileChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"force","comment":"Forces any updates to this channel\u0027s file to be written to the storage\n device that contains it.\n\n \u003cp\u003e If this channel\u0027s file resides on a local storage device then when\n this method returns it is guaranteed that all changes made to the file\n since this channel was created, or since this method was last invoked,\n will have been written to that device.  This is useful for ensuring that\n critical information is not lost in the event of a system crash.\n\n \u003cp\u003e If the file does not reside on a local device then no such guarantee\n is made.\n\n \u003cp\u003e The {@code metaData} parameter can be used to limit the number of\n I/O operations that this method is required to perform.  Passing\n {@code false} for this parameter indicates that only updates to the\n file\u0027s content need be written to storage; passing {@code true}\n indicates that updates to both the file\u0027s content and metadata must be\n written, which generally requires at least one more I/O operation.\n Whether this parameter actually has any effect is dependent upon the\n underlying operating system and is therefore unspecified.\n\n \u003cp\u003e Invoking this method may cause an I/O operation to occur even if the\n channel was only opened for reading.  Some operating systems, for\n example, maintain a last-access time as part of a file\u0027s metadata, and\n this time is updated whenever the file is read.  Whether or not this is\n actually done is system-dependent and is therefore unspecified.\n\n \u003cp\u003e This method is only guaranteed to force changes that were made to\n this channel\u0027s file via the methods defined in this class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"metaData","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lock","comment":"Acquires a lock on the given region of this channel\u0027s file.\n\n \u003cp\u003e This method initiates an operation to acquire a lock on the given\n region of this channel\u0027s file. The {@code handler} parameter is a\n completion handler that is invoked when the lock is acquired (or the\n operation fails). The result passed to the completion handler is the\n resulting {@code FileLock}.\n\n \u003cp\u003e The region specified by the {@code position} and {@code size}\n parameters need not be contained within, or even overlap, the actual\n underlying file.  Lock regions are fixed in size; if a locked region\n initially contains the end of the file and the file grows beyond the\n region then the new portion of the file will not be covered by the lock.\n If a file is expected to grow in size and a lock on the entire file is\n required then a region starting at zero, and no smaller than the\n expected maximum size of the file, should be locked.  The two-argument\n {@link #lock(Object,CompletionHandler)} method simply locks a region\n of size {@link Long#MAX_VALUE}. If a lock that overlaps the requested\n region is already held by this Java virtual machine, or this method has\n been invoked to lock an overlapping region and that operation has not\n completed, then this method throws {@link OverlappingFileLockException}.\n\n \u003cp\u003e Some operating systems do not support a mechanism to acquire a file\n lock in an asynchronous manner. Consequently an implementation may\n acquire the file lock in a background thread or from a task executed by\n a thread in the associated thread pool. If there are many lock operations\n outstanding then it may consume threads in the Java virtual machine for\n indefinite periods.\n\n \u003cp\u003e Some operating systems do not support shared locks, in which case a\n request for a shared lock is automatically converted into a request for\n an exclusive lock.  Whether the newly-acquired lock is shared or\n exclusive may be tested by invoking the resulting lock object\u0027s {@link\n FileLock#isShared() isShared} method.\n\n \u003cp\u003e File locks are held on behalf of the entire Java virtual machine.\n They are not suitable for controlling access to a file by multiple\n threads within the same virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long, boolean, A, java.nio.channels.CompletionHandler\u003cjava.nio.channels.FileLock, ? super A\u003e)","flatSignature":"(long, long, boolean, A, CompletionHandler\u003cFileLock, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"shared","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"lock","comment":"Acquires an exclusive lock on this channel\u0027s file.\n\n \u003cp\u003e This method initiates an operation to acquire a lock on the given\n region of this channel\u0027s file. The {@code handler} parameter is a\n completion handler that is invoked when the lock is acquired (or the\n operation fails). The result passed to the completion handler is the\n resulting {@code FileLock}.\n\n \u003cp\u003e An invocation of this method of the form {@code ch.lock(att,handler)}\n behaves in exactly the same way as the invocation\n \u003cpre\u003e\n     ch.{@link #lock(long,long,boolean,Object,CompletionHandler) lock}(0L, Long.MAX_VALUE, false, att, handler)\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(A, java.nio.channels.CompletionHandler\u003cjava.nio.channels.FileLock, ? super A\u003e)","flatSignature":"(A, CompletionHandler\u003cFileLock, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"lock","comment":"Acquires a lock on the given region of this channel\u0027s file.\n\n \u003cp\u003e This method initiates an operation to acquire a lock on the given\n region of this channel\u0027s file.  The method behaves in exactly the same\n manner as the {@link #lock(long, long, boolean, Object, CompletionHandler)}\n method except that instead of specifying a completion handler, this\n method returns a {@code Future} representing the pending result. The\n {@code Future}\u0027s {@link Future#get() get} method returns the {@link\n FileLock} on successful completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long, boolean)","flatSignature":"(long, long, boolean)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"shared","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lock","comment":"Acquires an exclusive lock on this channel\u0027s file.\n\n \u003cp\u003e This method initiates an operation to acquire an exclusive lock on this\n channel\u0027s file. The method returns a {@code Future} representing the\n pending result of the operation. The {@code Future}\u0027s {@link Future#get()\n get} method returns the {@link FileLock} on successful completion.\n\n \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n invocation\n \u003cpre\u003e\n     ch.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false)\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Attempts to acquire a lock on the given region of this channel\u0027s file.\n\n \u003cp\u003e This method does not block. An invocation always returns immediately,\n either having acquired a lock on the requested region or having failed to\n do so.  If it fails to acquire a lock because an overlapping lock is held\n by another program then it returns {@code null}.  If it fails to acquire\n a lock for any other reason then an appropriate exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long, boolean)","flatSignature":"(long, long, boolean)","returnType":{"isPrimitive":false,"simpleName":"FileLock","qualifiedName":"java.nio.channels.FileLock","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"shared","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryLock","comment":"Attempts to acquire an exclusive lock on this channel\u0027s file.\n\n \u003cp\u003e An invocation of this method of the form {@code ch.tryLock()}\n behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     ch.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileLock","qualifiedName":"java.nio.channels.FileLock","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.\n\n \u003cp\u003e This method initiates the reading of a sequence of bytes from this\n channel into the given buffer, starting at the given file position. The\n result of the read is the number of bytes read or {@code -1} if the given\n position is greater than or equal to the file\u0027s size at the time that the\n read is attempted.\n\n \u003cp\u003e This method works in the same manner as the {@link\n AsynchronousByteChannel#read(ByteBuffer,Object,CompletionHandler)}\n method, except that bytes are read starting at the given file position.\n If the given file position is greater than the file\u0027s size at the time\n that the read is attempted then no bytes are read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler\u003cjava.lang.Integer, ? super A\u003e)","flatSignature":"(ByteBuffer, long, A, CompletionHandler\u003cInteger, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.\n\n \u003cp\u003e This method initiates the reading of a sequence of bytes from this\n channel into the given buffer, starting at the given file position. This\n method returns a {@code Future} representing the pending result of the\n operation. The {@code Future}\u0027s {@link Future#get() get} method returns\n the number of bytes read or {@code -1} if the given position is greater\n than or equal to the file\u0027s size at the time that the read is attempted.\n\n \u003cp\u003e This method works in the same manner as the {@link\n AsynchronousByteChannel#read(ByteBuffer)} method, except that bytes are\n read starting at the given file position. If the given file position is\n greater than the file\u0027s size at the time that the read is attempted then\n no bytes are read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, long)","flatSignature":"(ByteBuffer, long)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffer, starting\n at the given file position.\n\n \u003cp\u003e This method works in the same manner as the {@link\n AsynchronousByteChannel#write(ByteBuffer,Object,CompletionHandler)}\n method, except that bytes are written starting at the given file position.\n If the given position is greater than the file\u0027s size, at the time that\n the write is attempted, then the file will be grown to accommodate the new\n bytes; the values of any bytes between the previous end-of-file and the\n newly-written bytes are unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler\u003cjava.lang.Integer, ? super A\u003e)","flatSignature":"(ByteBuffer, long, A, CompletionHandler\u003cInteger, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffer, starting\n at the given file position.\n\n \u003cp\u003e This method initiates the writing of a sequence of bytes to this\n channel from the given buffer, starting at the given file position. The\n method returns a {@code Future} representing the pending result of the\n write operation. The {@code Future}\u0027s {@link Future#get() get} method\n returns the number of bytes written.\n\n \u003cp\u003e This method works in the same manner as the {@link\n AsynchronousByteChannel#write(ByteBuffer)} method, except that bytes are\n written starting at the given file position. If the given position is\n greater than the file\u0027s size, at the time that the write is attempted,\n then the file will be grown to accommodate the new bytes; the values of\n any bytes between the previous end-of-file and the newly-written bytes\n are unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, long)","flatSignature":"(ByteBuffer, long)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"position","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}