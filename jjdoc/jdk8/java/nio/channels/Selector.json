{"name":"Selector","comment":"A multiplexor of {@link SelectableChannel} objects.\n\n \u003cp\u003e A selector may be created by invoking the {@link #open open} method of\n this class, which will use the system\u0027s default {@link\n java.nio.channels.spi.SelectorProvider selector provider} to\n create a new selector.  A selector may also be created by invoking the\n {@link java.nio.channels.spi.SelectorProvider#openSelector openSelector}\n method of a custom selector provider.  A selector remains open until it is\n closed via its {@link #close close} method.\n\n \u003ca name\u003d\"ks\"\u003e\u003c/a\u003e\n\n \u003cp\u003e A selectable channel\u0027s registration with a selector is represented by a\n {@link SelectionKey} object.  A selector maintains three sets of selection\n keys:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e The \u003ci\u003ekey set\u003c/i\u003e contains the keys representing the current\n   channel registrations of this selector.  This set is returned by the\n   {@link #keys() keys} method. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The \u003ci\u003eselected-key set\u003c/i\u003e is the set of keys such that each\n   key\u0027s channel was detected to be ready for at least one of the operations\n   identified in the key\u0027s interest set during a prior selection operation.\n   This set is returned by the {@link #selectedKeys() selectedKeys} method.\n   The selected-key set is always a subset of the key set. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The \u003ci\u003ecancelled-key\u003c/i\u003e set is the set of keys that have been\n   cancelled but whose channels have not yet been deregistered.  This set is\n   not directly accessible.  The cancelled-key set is always a subset of the\n   key set. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e All three sets are empty in a newly-created selector.\n\n \u003cp\u003e A key is added to a selector\u0027s key set as a side effect of registering a\n channel via the channel\u0027s {@link SelectableChannel#register(Selector,int)\n register} method.  Cancelled keys are removed from the key set during\n selection operations.  The key set itself is not directly modifiable.\n\n \u003cp\u003e A key is added to its selector\u0027s cancelled-key set when it is cancelled,\n whether by closing its channel or by invoking its {@link SelectionKey#cancel\n cancel} method.  Cancelling a key will cause its channel to be deregistered\n during the next selection operation, at which time the key will removed from\n all of the selector\u0027s key sets.\n\n \u003ca name\u003d\"sks\"\u003e\u003c/a\u003e\u003cp\u003e Keys are added to the selected-key set by selection\n operations.  A key may be removed directly from the selected-key set by\n invoking the set\u0027s {@link java.util.Set#remove(java.lang.Object) remove}\n method or by invoking the {@link java.util.Iterator#remove() remove} method\n of an {@link java.util.Iterator iterator} obtained from the\n set.  Keys are never removed from the selected-key set in any other way;\n they are not, in particular, removed as a side effect of selection\n operations.  Keys may not be added directly to the selected-key set. \u003c/p\u003e\n\n\n \u003ca name\u003d\"selop\"\u003e\u003c/a\u003e\n \u003ch2\u003eSelection\u003c/h2\u003e\n\n \u003cp\u003e During each selection operation, keys may be added to and removed from a\n selector\u0027s selected-key set and may be removed from its key and\n cancelled-key sets.  Selection is performed by the {@link #select()}, {@link\n #select(long)}, and {@link #selectNow()} methods, and involves three steps:\n \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e Each key in the cancelled-key set is removed from each key set of\n   which it is a member, and its channel is deregistered.  This step leaves\n   the cancelled-key set empty. \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The underlying operating system is queried for an update as to the\n   readiness of each remaining channel to perform any of the operations\n   identified by its key\u0027s interest set as of the moment that the selection\n   operation began.  For a channel that is ready for at least one such\n   operation, one of the following two actions is performed: \u003c/p\u003e\n\n   \u003col\u003e\n\n     \u003cli\u003e\u003cp\u003e If the channel\u0027s key is not already in the selected-key set then\n     it is added to that set and its ready-operation set is modified to\n     identify exactly those operations for which the channel is now reported\n     to be ready.  Any readiness information previously recorded in the ready\n     set is discarded.  \u003c/p\u003e\u003c/li\u003e\n\n     \u003cli\u003e\u003cp\u003e Otherwise the channel\u0027s key is already in the selected-key set,\n     so its ready-operation set is modified to identify any new operations\n     for which the channel is reported to be ready.  Any readiness\n     information previously recorded in the ready set is preserved; in other\n     words, the ready set returned by the underlying system is\n     bitwise-disjoined into the key\u0027s current ready set. \u003c/p\u003e\u003c/li\u003e\n\n   \u003c/ol\u003e\n\n   If all of the keys in the key set at the start of this step have empty\n   interest sets then neither the selected-key set nor any of the keys\u0027\n   ready-operation sets will be updated.\n\n   \u003cli\u003e\u003cp\u003e If any keys were added to the cancelled-key set while step (2) was\n   in progress then they are processed as in step (1). \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e Whether or not a selection operation blocks to wait for one or more\n channels to become ready, and if so for how long, is the only essential\n difference between the three selection methods. \u003c/p\u003e\n\n\n \u003ch2\u003eConcurrency\u003c/h2\u003e\n\n \u003cp\u003e Selectors are themselves safe for use by multiple concurrent threads;\n their key sets, however, are not.\n\n \u003cp\u003e The selection operations synchronize on the selector itself, on the key\n set, and on the selected-key set, in that order.  They also synchronize on\n the cancelled-key set during steps (1) and (3) above.\n\n \u003cp\u003e Changes made to the interest sets of a selector\u0027s keys while a\n selection operation is in progress have no effect upon that operation; they\n will be seen by the next selection operation.\n\n \u003cp\u003e Keys may be cancelled and channels may be closed at any time.  Hence the\n presence of a key in one or more of a selector\u0027s key sets does not imply\n that the key is valid or that its channel is open.  Application code should\n be careful to synchronize and check these conditions as necessary if there\n is any possibility that another thread will cancel a key or close a channel.\n\n \u003cp\u003e A thread blocked in one of the {@link #select()} or {@link\n #select(long)} methods may be interrupted by some other thread in one of\n three ways:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e By invoking the selector\u0027s {@link #wakeup wakeup} method,\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e By invoking the selector\u0027s {@link #close close} method, or\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e By invoking the blocked thread\u0027s {@link\n   java.lang.Thread#interrupt() interrupt} method, in which case its\n   interrupt status will be set and the selector\u0027s {@link #wakeup wakeup}\n   method will be invoked. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e The {@link #close close} method synchronizes on the selector and all\n three key sets in the same order as in a selection operation.\n\n \u003ca name\u003d\"ksc\"\u003e\u003c/a\u003e\n\n \u003cp\u003e A selector\u0027s key and selected-key sets are not, in general, safe for use\n by multiple concurrent threads.  If such a thread might modify one of these\n sets directly then access should be controlled by synchronizing on the set\n itself.  The iterators returned by these sets\u0027 {@link\n java.util.Set#iterator() iterator} methods are \u003ci\u003efail-fast:\u003c/i\u003e If the set\n is modified after the iterator is created, in any way except by invoking the\n iterator\u0027s own {@link java.util.Iterator#remove() remove} method, then a\n {@link java.util.ConcurrentModificationException} will be thrown. \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Selector","qualifiedName":"java.nio.channels.Selector","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.lang.Object","interfaces":["java.io.Closeable"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"open","comment":"Opens a selector.\n\n \u003cp\u003e The new selector is created by invoking the {@link\n java.nio.channels.spi.SelectorProvider#openSelector openSelector} method\n of the system-wide default {@link\n java.nio.channels.spi.SelectorProvider} object.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Selector","qualifiedName":"java.nio.channels.Selector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"isOpen","comment":"Tells whether or not this selector is open.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"provider","comment":"Returns the provider that created this channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SelectorProvider","qualifiedName":"java.nio.channels.spi.SelectorProvider","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keys","comment":"Returns this selector\u0027s key set.\n\n \u003cp\u003e The key set is not directly modifiable.  A key is removed only after\n it has been cancelled and its channel has been deregistered.  Any\n attempt to modify the key set will cause an {@link\n UnsupportedOperationException} to be thrown.\n\n \u003cp\u003e The key set is \u003ca href\u003d\"#ksc\"\u003enot thread-safe\u003c/a\u003e. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"selectedKeys","comment":"Returns this selector\u0027s selected-key set.\n\n \u003cp\u003e Keys may be removed from, but not directly added to, the\n selected-key set.  Any attempt to add an object to the key set will\n cause an {@link UnsupportedOperationException} to be thrown.\n\n \u003cp\u003e The selected-key set is \u003ca href\u003d\"#ksc\"\u003enot thread-safe\u003c/a\u003e. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"selectNow","comment":"Selects a set of keys whose corresponding channels are ready for I/O\n operations.\n\n \u003cp\u003e This method performs a non-blocking \u003ca href\u003d\"#selop\"\u003eselection\n operation\u003c/a\u003e.  If no channels have become selectable since the previous\n selection operation then this method immediately returns zero.\n\n \u003cp\u003e Invoking this method clears the effect of any previous invocations\n of the {@link #wakeup wakeup} method.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"select","comment":"Selects a set of keys whose corresponding channels are ready for I/O\n operations.\n\n \u003cp\u003e This method performs a blocking \u003ca href\u003d\"#selop\"\u003eselection\n operation\u003c/a\u003e.  It returns only after at least one channel is selected,\n this selector\u0027s {@link #wakeup wakeup} method is invoked, the current\n thread is interrupted, or the given timeout period expires, whichever\n comes first.\n\n \u003cp\u003e This method does not offer real-time guarantees: It schedules the\n timeout as if by invoking the {@link Object#wait(long)} method. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"select","comment":"Selects a set of keys whose corresponding channels are ready for I/O\n operations.\n\n \u003cp\u003e This method performs a blocking \u003ca href\u003d\"#selop\"\u003eselection\n operation\u003c/a\u003e.  It returns only after at least one channel is selected,\n this selector\u0027s {@link #wakeup wakeup} method is invoked, or the current\n thread is interrupted, whichever comes first.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"wakeup","comment":"Causes the first selection operation that has not yet returned to return\n immediately.\n\n \u003cp\u003e If another thread is currently blocked in an invocation of the\n {@link #select()} or {@link #select(long)} methods then that invocation\n will return immediately.  If no selection operation is currently in\n progress then the next invocation of one of these methods will return\n immediately unless the {@link #selectNow()} method is invoked in the\n meantime.  In any case the value returned by that invocation may be\n non-zero.  Subsequent invocations of the {@link #select()} or {@link\n #select(long)} methods will block as usual unless this method is invoked\n again in the meantime.\n\n \u003cp\u003e Invoking this method more than once between two successive selection\n operations has the same effect as invoking it just once.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Selector","qualifiedName":"java.nio.channels.Selector","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this selector.\n\n \u003cp\u003e If a thread is currently blocked in one of this selector\u0027s selection\n methods then it is interrupted as if by invoking the selector\u0027s {@link\n #wakeup wakeup} method.\n\n \u003cp\u003e Any uncancelled keys still associated with this selector are\n invalidated, their channels are deregistered, and any other resources\n associated with this selector are released.\n\n \u003cp\u003e If this selector is already closed then invoking this method has no\n effect.\n\n \u003cp\u003e After a selector is closed, any further attempt to use it, except by\n invoking this method or the {@link #wakeup wakeup} method, will cause a\n {@link ClosedSelectorException} to be thrown. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.nio.channels.spi.AbstractSelector"],"enumConstants":[]}