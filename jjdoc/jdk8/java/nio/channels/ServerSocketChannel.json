{"name":"ServerSocketChannel","comment":"A selectable channel for stream-oriented listening sockets.\n\n \u003cp\u003e A server-socket channel is created by invoking the {@link #open() open}\n method of this class.  It is not possible to create a channel for an arbitrary,\n pre-existing {@link ServerSocket}. A newly-created server-socket channel is\n open but not yet bound.  An attempt to invoke the {@link #accept() accept}\n method of an unbound server-socket channel will cause a {@link NotYetBoundException}\n to be thrown. A server-socket channel can be bound by invoking one of the\n {@link #bind(java.net.SocketAddress,int) bind} methods defined by this class.\n\n \u003cp\u003e Socket options are configured using the {@link #setOption(SocketOption,Object)\n setOption} method. Server-socket channels support the following options:\n \u003cblockquote\u003e\n \u003ctable border summary\u003d\"Socket options\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003eOption Name\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} \u003c/td\u003e\n     \u003ctd\u003e The size of the socket receive buffer \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} \u003c/td\u003e\n     \u003ctd\u003e Re-use address \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n Additional (implementation specific) options may also be supported.\n\n \u003cp\u003e Server-socket channels are safe for use by multiple concurrent threads.\n \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.nio.channels.spi.AbstractSelectableChannel","interfaces":["java.nio.channels.NetworkChannel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"open","comment":"Opens a server-socket channel.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n java.nio.channels.spi.SelectorProvider#openServerSocketChannel\n openServerSocketChannel} method of the system-wide default {@link\n java.nio.channels.spi.SelectorProvider} object.\n\n \u003cp\u003e The new channel\u0027s socket is initially unbound; it must be bound to a\n specific address via one of its socket\u0027s {@link\n java.net.ServerSocket#bind(SocketAddress) bind} methods before\n connections can be accepted.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"validOps","comment":"Returns an operation set identifying this channel\u0027s supported\n operations.\n\n \u003cp\u003e Server-socket channels only support the accepting of new\n connections, so this method returns {@link SelectionKey#OP_ACCEPT}.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"bind","comment":"Binds the channel\u0027s socket to a local address and configures the socket\n to listen for connections.\n\n \u003cp\u003e An invocation of this method is equivalent to the following:\n \u003cblockquote\u003e\u003cpre\u003e\n bind(local, 0);\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"local","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bind","comment":"Binds the channel\u0027s socket to a local address and configures the socket to\n listen for connections.\n\n \u003cp\u003e This method is used to establish an association between the socket and\n a local address. Once an association is established then the socket remains\n bound until the channel is closed.\n\n \u003cp\u003e The {@code backlog} parameter is the maximum number of pending\n connections on the socket. Its exact semantics are implementation specific.\n In particular, an implementation may impose a maximum length or may choose\n to ignore the parameter altogther. If the {@code backlog} parameter has\n the value {@code 0}, or a negative value, then an implementation specific\n default is used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress, int)","flatSignature":"(SocketAddress, int)","returnType":{"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"local","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}},{"name":"backlog","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOption","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketOption\u003cT\u003e, T)","flatSignature":"(SocketOption\u003cT\u003e, T)","returnType":{"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"socket","comment":"Retrieves a server socket associated with this channel.\n\n \u003cp\u003e The returned object will not declare any public methods that are not\n declared in the {@link java.net.ServerSocket} class.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ServerSocket","qualifiedName":"java.net.ServerSocket","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"accept","comment":"Accepts a connection made to this channel\u0027s socket.\n\n \u003cp\u003e If this channel is in non-blocking mode then this method will\n immediately return \u003ctt\u003enull\u003c/tt\u003e if there are no pending connections.\n Otherwise it will block indefinitely until a new connection is available\n or an I/O error occurs.\n\n \u003cp\u003e The socket channel returned by this method, if any, will be in\n blocking mode regardless of the blocking mode of this channel.\n\n \u003cp\u003e This method performs exactly the same security checks as the {@link\n java.net.ServerSocket#accept accept} method of the {@link\n java.net.ServerSocket} class.  That is, if a security manager has been\n installed then for each new connection this method verifies that the\n address and port number of the connection\u0027s remote endpoint are\n permitted by the security manager\u0027s {@link\n java.lang.SecurityManager#checkAccept checkAccept} method.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalAddress","comment":"{@inheritDoc}\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n local port of the channel\u0027s socket is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}