{"name":"AsynchronousByteChannel","comment":"An asynchronous channel that can read and write bytes.\n\n \u003cp\u003e Some channels may not allow more than one read or write to be outstanding\n at any given time. If a thread invokes a read method before a previous read\n operation has completed then a {@link ReadPendingException} will be thrown.\n Similarly, if a write method is invoked before a previous write has completed\n then {@link WritePendingException} is thrown. Whether or not other kinds of\n I/O operations may proceed concurrently with a read operation depends upon\n the type of the channel.\n\n \u003cp\u003e Note that {@link java.nio.ByteBuffer ByteBuffers} are not safe for use by\n multiple concurrent threads. When a read or write operation is initiated then\n care must be taken to ensure that the buffer is not accessed until the\n operation completes.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"AsynchronousByteChannel","qualifiedName":"java.nio.channels.AsynchronousByteChannel","dimension":"","elementType":{},"package":"java.nio.channels","interfaces":["java.nio.channels.AsynchronousChannel"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffer.\n\n \u003cp\u003e This method initiates an asynchronous read operation to read a\n sequence of bytes from this channel into the given buffer. The {@code\n handler} parameter is a completion handler that is invoked when the read\n operation completes (or fails). The result passed to the completion\n handler is the number of bytes read or {@code -1} if no bytes could be\n read because the channel has reached end-of-stream.\n\n \u003cp\u003e The read operation may read up to \u003ci\u003er\u003c/i\u003e bytes from the channel,\n where \u003ci\u003er\u003c/i\u003e is the number of bytes remaining in the buffer, that is,\n {@code dst.remaining()} at the time that the read is attempted. Where\n \u003ci\u003er\u003c/i\u003e is 0, the read operation completes immediately with a result of\n {@code 0} without initiating an I/O operation.\n\n \u003cp\u003e Suppose that a byte sequence of length \u003ci\u003en\u003c/i\u003e is read, where\n \u003ctt\u003e0\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003er\u003c/i\u003e.\n This byte sequence will be transferred into the buffer so that the first\n byte in the sequence is at index \u003ci\u003ep\u003c/i\u003e and the last byte is at index\n \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e-\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e,\n where \u003ci\u003ep\u003c/i\u003e is the buffer\u0027s position at the moment the read is\n performed. Upon completion the buffer\u0027s position will be equal to\n \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e; its limit will not have changed.\n\n \u003cp\u003e Buffers are not safe for use by multiple concurrent threads so care\n should be taken to not access the buffer until the operation has\n completed.\n\n \u003cp\u003e This method may be invoked at any time. Some channel types may not\n allow more than one read to be outstanding at any given time. If a thread\n initiates a read operation before a previous read operation has\n completed then a {@link ReadPendingException} will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler\u003cjava.lang.Integer, ? super A\u003e)","flatSignature":"(ByteBuffer, A, CompletionHandler\u003cInteger, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"read","comment":"Reads a sequence of bytes from this channel into the given buffer.\n\n \u003cp\u003e This method initiates an asynchronous read operation to read a\n sequence of bytes from this channel into the given buffer. The method\n behaves in exactly the same manner as the {@link\n #read(ByteBuffer,Object,CompletionHandler)\n read(ByteBuffer,Object,CompletionHandler)} method except that instead\n of specifying a completion handler, this method returns a {@code Future}\n representing the pending result. The {@code Future}\u0027s {@link Future#get()\n get} method returns the number of bytes read or {@code -1} if no bytes\n could be read because the channel has reached end-of-stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffer.\n\n \u003cp\u003e This method initiates an asynchronous write operation to write a\n sequence of bytes to this channel from the given buffer. The {@code\n handler} parameter is a completion handler that is invoked when the write\n operation completes (or fails). The result passed to the completion\n handler is the number of bytes written.\n\n \u003cp\u003e The write operation may write up to \u003ci\u003er\u003c/i\u003e bytes to the channel,\n where \u003ci\u003er\u003c/i\u003e is the number of bytes remaining in the buffer, that is,\n {@code src.remaining()} at the time that the write is attempted. Where\n \u003ci\u003er\u003c/i\u003e is 0, the write operation completes immediately with a result of\n {@code 0} without initiating an I/O operation.\n\n \u003cp\u003e Suppose that a byte sequence of length \u003ci\u003en\u003c/i\u003e is written, where\n \u003ctt\u003e0\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003er\u003c/i\u003e.\n This byte sequence will be transferred from the buffer starting at index\n \u003ci\u003ep\u003c/i\u003e, where \u003ci\u003ep\u003c/i\u003e is the buffer\u0027s position at the moment the\n write is performed; the index of the last byte written will be\n \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e-\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e.\n Upon completion the buffer\u0027s position will be equal to\n \u003ci\u003ep\u003c/i\u003e\u0026nbsp;\u003ctt\u003e+\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e; its limit will not have changed.\n\n \u003cp\u003e Buffers are not safe for use by multiple concurrent threads so care\n should be taken to not access the buffer until the operation has\n completed.\n\n \u003cp\u003e This method may be invoked at any time. Some channel types may not\n allow more than one write to be outstanding at any given time. If a thread\n initiates a write operation before a previous write operation has\n completed then a {@link WritePendingException} will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler\u003cjava.lang.Integer, ? super A\u003e)","flatSignature":"(ByteBuffer, A, CompletionHandler\u003cInteger, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffer.\n\n \u003cp\u003e This method initiates an asynchronous write operation to write a\n sequence of bytes to this channel from the given buffer. The method\n behaves in exactly the same manner as the {@link\n #write(ByteBuffer,Object,CompletionHandler)\n write(ByteBuffer,Object,CompletionHandler)} method except that instead\n of specifying a completion handler, this method returns a {@code Future}\n representing the pending result. The {@code Future}\u0027s {@link Future#get()\n get} method returns the number of bytes written.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.channels.AsynchronousSocketChannel"],"enumConstants":[]}