{"name":"DatagramChannel","comment":"A selectable channel for datagram-oriented sockets.\n\n \u003cp\u003e A datagram channel is created by invoking one of the {@link #open open} methods\n of this class. It is not possible to create a channel for an arbitrary,\n pre-existing datagram socket. A newly-created datagram channel is open but not\n connected. A datagram channel need not be connected in order for the {@link #send\n send} and {@link #receive receive} methods to be used.  A datagram channel may be\n connected, by invoking its {@link #connect connect} method, in order to\n avoid the overhead of the security checks are otherwise performed as part of\n every send and receive operation.  A datagram channel must be connected in\n order to use the {@link #read(java.nio.ByteBuffer) read} and {@link\n #write(java.nio.ByteBuffer) write} methods, since those methods do not\n accept or return socket addresses.\n\n \u003cp\u003e Once connected, a datagram channel remains connected until it is\n disconnected or closed.  Whether or not a datagram channel is connected may\n be determined by invoking its {@link #isConnected isConnected} method.\n\n \u003cp\u003e Socket options are configured using the {@link #setOption(SocketOption,Object)\n setOption} method. A datagram channel to an Internet Protocol socket supports\n the following options:\n \u003cblockquote\u003e\n \u003ctable border summary\u003d\"Socket options\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003eOption Name\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_SNDBUF SO_SNDBUF} \u003c/td\u003e\n     \u003ctd\u003e The size of the socket send buffer \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} \u003c/td\u003e\n     \u003ctd\u003e The size of the socket receive buffer \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} \u003c/td\u003e\n     \u003ctd\u003e Re-use address \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_BROADCAST SO_BROADCAST} \u003c/td\u003e\n     \u003ctd\u003e Allow transmission of broadcast datagrams \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#IP_TOS IP_TOS} \u003c/td\u003e\n     \u003ctd\u003e The Type of Service (ToS) octet in the Internet Protocol (IP) header \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#IP_MULTICAST_IF IP_MULTICAST_IF} \u003c/td\u003e\n     \u003ctd\u003e The network interface for Internet Protocol (IP) multicast datagrams \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#IP_MULTICAST_TTL\n       IP_MULTICAST_TTL} \u003c/td\u003e\n     \u003ctd\u003e The \u003cem\u003etime-to-live\u003c/em\u003e for Internet Protocol (IP) multicast\n       datagrams \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#IP_MULTICAST_LOOP\n       IP_MULTICAST_LOOP} \u003c/td\u003e\n     \u003ctd\u003e Loopback for Internet Protocol (IP) multicast datagrams \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n Additional (implementation specific) options may also be supported.\n\n \u003cp\u003e Datagram channels are safe for use by multiple concurrent threads.  They\n support concurrent reading and writing, though at most one thread may be\n reading and at most one thread may be writing at any given time.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.nio.channels.spi.AbstractSelectableChannel","interfaces":["java.nio.channels.ByteChannel","java.nio.channels.ScatteringByteChannel","java.nio.channels.GatheringByteChannel","java.nio.channels.MulticastChannel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"open","comment":"Opens a datagram channel.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n java.nio.channels.spi.SelectorProvider#openDatagramChannel()\n openDatagramChannel} method of the system-wide default {@link\n java.nio.channels.spi.SelectorProvider} object.  The channel will not be\n connected.\n\n \u003cp\u003e The {@link ProtocolFamily ProtocolFamily} of the channel\u0027s socket\n is platform (and possibly configuration) dependent and therefore unspecified.\n The {@link #open(ProtocolFamily) open} allows the protocol family to be\n selected when opening a datagram channel, and should be used to open\n datagram channels that are intended for Internet Protocol multicasting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"open","comment":"Opens a datagram channel.\n\n \u003cp\u003e The {@code family} parameter is used to specify the {@link\n ProtocolFamily}. If the datagram channel is to be used for IP multicasting\n then this should correspond to the address type of the multicast groups\n that this channel will join.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n java.nio.channels.spi.SelectorProvider#openDatagramChannel(ProtocolFamily)\n openDatagramChannel} method of the system-wide default {@link\n java.nio.channels.spi.SelectorProvider} object.  The channel will not be\n connected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.ProtocolFamily)","flatSignature":"(ProtocolFamily)","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"family","type":{"isPrimitive":false,"simpleName":"ProtocolFamily","qualifiedName":"java.net.ProtocolFamily","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"validOps","comment":"Returns an operation set identifying this channel\u0027s supported\n operations.\n\n \u003cp\u003e Datagram channels support reading and writing, so this method\n returns \u003ctt\u003e(\u003c/tt\u003e{@link SelectionKey#OP_READ} \u003ctt\u003e|\u003c/tt\u003e\u0026nbsp;{@link\n SelectionKey#OP_WRITE}\u003ctt\u003e)\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"bind","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"local","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOption","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketOption\u003cT\u003e, T)","flatSignature":"(SocketOption\u003cT\u003e, T)","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"socket","comment":"Retrieves a datagram socket associated with this channel.\n\n \u003cp\u003e The returned object will not declare any public methods that are not\n declared in the {@link java.net.DatagramSocket} class.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DatagramSocket","qualifiedName":"java.net.DatagramSocket","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isConnected","comment":"Tells whether or not this channel\u0027s socket is connected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"connect","comment":"Connects this channel\u0027s socket.\n\n \u003cp\u003e The channel\u0027s socket is configured so that it only receives\n datagrams from, and sends datagrams to, the given remote \u003ci\u003epeer\u003c/i\u003e\n address.  Once connected, datagrams may not be received from or sent to\n any other address.  A datagram socket remains connected until it is\n explicitly disconnected or until it is closed.\n\n \u003cp\u003e This method performs exactly the same security checks as the {@link\n java.net.DatagramSocket#connect connect} method of the {@link\n java.net.DatagramSocket} class.  That is, if a security manager has been\n installed then this method verifies that its {@link\n java.lang.SecurityManager#checkAccept checkAccept} and {@link\n java.lang.SecurityManager#checkConnect checkConnect} methods permit\n datagrams to be received from and sent to, respectively, the given\n remote address.\n\n \u003cp\u003e This method may be invoked at any time.  It will not have any effect\n on read or write operations that are already in progress at the moment\n that it is invoked. If this channel\u0027s socket is not bound then this method\n will first cause the socket to be bound to an address that is assigned\n automatically, as if invoking the {@link #bind bind} method with a\n parameter of {@code null}. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"remote","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"disconnect","comment":"Disconnects this channel\u0027s socket.\n\n \u003cp\u003e The channel\u0027s socket is configured so that it can receive datagrams\n from, and sends datagrams to, any remote address so long as the security\n manager, if installed, permits it.\n\n \u003cp\u003e This method may be invoked at any time.  It will not have any effect\n on read or write operations that are already in progress at the moment\n that it is invoked.\n\n \u003cp\u003e If this channel\u0027s socket is not connected, or if the channel is\n closed, then invoking this method has no effect.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRemoteAddress","comment":"Returns the remote address to which this channel\u0027s socket is connected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"receive","comment":"Receives a datagram via this channel.\n\n \u003cp\u003e If a datagram is immediately available, or if this channel is in\n blocking mode and one eventually becomes available, then the datagram is\n copied into the given byte buffer and its source address is returned.\n If this channel is in non-blocking mode and a datagram is not\n immediately available then this method immediately returns\n \u003ctt\u003enull\u003c/tt\u003e.\n\n \u003cp\u003e The datagram is transferred into the given byte buffer starting at\n its current position, as if by a regular {@link\n ReadableByteChannel#read(java.nio.ByteBuffer) read} operation.  If there\n are fewer bytes remaining in the buffer than are required to hold the\n datagram then the remainder of the datagram is silently discarded.\n\n \u003cp\u003e This method performs exactly the same security checks as the {@link\n java.net.DatagramSocket#receive receive} method of the {@link\n java.net.DatagramSocket} class.  That is, if the socket is not connected\n to a specific remote address and a security manager has been installed\n then for each datagram received this method verifies that the source\u0027s\n address and port number are permitted by the security manager\u0027s {@link\n java.lang.SecurityManager#checkAccept checkAccept} method.  The overhead\n of this security check can be avoided by first connecting the socket via\n the {@link #connect connect} method.\n\n \u003cp\u003e This method may be invoked at any time.  If another thread has\n already initiated a read operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. If this channel\u0027s socket is not bound then this method will\n first cause the socket to be bound to an address that is assigned\n automatically, as if invoking the {@link #bind bind} method with a\n parameter of {@code null}. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"send","comment":"Sends a datagram via this channel.\n\n \u003cp\u003e If this channel is in non-blocking mode and there is sufficient room\n in the underlying output buffer, or if this channel is in blocking mode\n and sufficient room becomes available, then the remaining bytes in the\n given buffer are transmitted as a single datagram to the given target\n address.\n\n \u003cp\u003e The datagram is transferred from the byte buffer as if by a regular\n {@link WritableByteChannel#write(java.nio.ByteBuffer) write} operation.\n\n \u003cp\u003e This method performs exactly the same security checks as the {@link\n java.net.DatagramSocket#send send} method of the {@link\n java.net.DatagramSocket} class.  That is, if the socket is not connected\n to a specific remote address and a security manager has been installed\n then for each datagram sent this method verifies that the target address\n and port number are permitted by the security manager\u0027s {@link\n java.lang.SecurityManager#checkConnect checkConnect} method.  The\n overhead of this security check can be avoided by first connecting the\n socket via the {@link #connect connect} method.\n\n \u003cp\u003e This method may be invoked at any time.  If another thread has\n already initiated a write operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. If this channel\u0027s socket is not bound then this method will\n first cause the socket to be bound to an address that is assigned\n automatically, as if by invoking the {@link #bind bind} method with a\n parameter of {@code null}. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, java.net.SocketAddress)","flatSignature":"(ByteBuffer, SocketAddress)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a datagram from this channel.\n\n \u003cp\u003e This method may only be invoked if this channel\u0027s socket is\n connected, and it only accepts datagrams from the socket\u0027s peer.  If\n there are more bytes in the datagram than remain in the given buffer\n then the remainder of the datagram is silently discarded.  Otherwise\n this method behaves exactly as specified in the {@link\n ReadableByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dst","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a datagram from this channel.\n\n \u003cp\u003e This method may only be invoked if this channel\u0027s socket is\n connected, and it only accepts datagrams from the socket\u0027s peer.  If\n there are more bytes in the datagram than remain in the given buffers\n then the remainder of the datagram is silently discarded.  Otherwise\n this method behaves exactly as specified in the {@link\n ScatteringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"dsts","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a datagram from this channel.\n\n \u003cp\u003e This method may only be invoked if this channel\u0027s socket is\n connected, and it only accepts datagrams from the socket\u0027s peer.  If\n there are more bytes in the datagram than remain in the given buffers\n then the remainder of the datagram is silently discarded.  Otherwise\n this method behaves exactly as specified in the {@link\n ScatteringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"dsts","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes a datagram to this channel.\n\n \u003cp\u003e This method may only be invoked if this channel\u0027s socket is\n connected, in which case it sends datagrams directly to the socket\u0027s\n peer.  Otherwise it behaves exactly as specified in the {@link\n WritableByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a datagram to this channel.\n\n \u003cp\u003e This method may only be invoked if this channel\u0027s socket is\n connected, in which case it sends datagrams directly to the socket\u0027s\n peer.  Otherwise it behaves exactly as specified in the {@link\n GatheringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a datagram to this channel.\n\n \u003cp\u003e This method may only be invoked if this channel\u0027s socket is\n connected, in which case it sends datagrams directly to the socket\u0027s\n peer.  Otherwise it behaves exactly as specified in the {@link\n GatheringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getLocalAddress","comment":"{@inheritDoc}\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n local port of the channel\u0027s socket is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}