{"name":"AbstractInterruptibleChannel","comment":"Base implementation class for interruptible channels.\n\n \u003cp\u003e This class encapsulates the low-level machinery required to implement\n the asynchronous closing and interruption of channels.  A concrete channel\n class must invoke the {@link #begin begin} and {@link #end end} methods\n before and after, respectively, invoking an I/O operation that might block\n indefinitely.  In order to ensure that the {@link #end end} method is always\n invoked, these methods should be used within a\n \u003ctt\u003etry\u003c/tt\u003e\u0026nbsp;...\u0026nbsp;\u003ctt\u003efinally\u003c/tt\u003e block:\n\n \u003cblockquote\u003e\u003cpre\u003e\n boolean completed \u003d false;\n try {\n     begin();\n     completed \u003d ...;    // Perform blocking I/O operation\n     return ...;         // Return result\n } finally {\n     end(completed);\n }\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The \u003ctt\u003ecompleted\u003c/tt\u003e argument to the {@link #end end} method tells\n whether or not the I/O operation actually completed, that is, whether it had\n any effect that would be visible to the invoker.  In the case of an\n operation that reads bytes, for example, this argument should be\n \u003ctt\u003etrue\u003c/tt\u003e if, and only if, some bytes were actually transferred into the\n invoker\u0027s target buffer.\n\n \u003cp\u003e A concrete channel class must also implement the {@link\n #implCloseChannel implCloseChannel} method in such a way that if it is\n invoked while another thread is blocked in a native I/O operation upon the\n channel then that operation will immediately return, either by throwing an\n exception or by returning normally.  If a thread is interrupted or the\n channel upon which it is blocked is asynchronously closed then the channel\u0027s\n {@link #end end} method will throw the appropriate exception.\n\n \u003cp\u003e This class performs the synchronization required to implement the {@link\n java.nio.channels.Channel} specification.  Implementations of the {@link\n #implCloseChannel implCloseChannel} method need not synchronize against\n other threads that might be attempting to close the channel.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractInterruptibleChannel","qualifiedName":"java.nio.channels.spi.AbstractInterruptibleChannel","dimension":"","elementType":{},"package":"java.nio.channels.spi","superclass":"java.lang.Object","interfaces":["java.nio.channels.Channel","java.nio.channels.InterruptibleChannel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"close","comment":"Closes this channel.\n\n \u003cp\u003e If the channel has already been closed then this method returns\n immediately.  Otherwise it marks the channel as closed and then invokes\n the {@link #implCloseChannel implCloseChannel} method in order to\n complete the close operation.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isOpen","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.nio.channels.SelectableChannel","java.nio.channels.FileChannel"],"enumConstants":[]}