{"name":"SelectorProvider","comment":"Service-provider class for selectors and selectable channels.\n\n \u003cp\u003e A selector provider is a concrete subclass of this class that has a\n zero-argument constructor and implements the abstract methods specified\n below.  A given invocation of the Java virtual machine maintains a single\n system-wide default provider instance, which is returned by the {@link\n #provider() provider} method.  The first invocation of that method will locate\n the default provider as specified below.\n\n \u003cp\u003e The system-wide default provider is used by the static \u003ctt\u003eopen\u003c/tt\u003e\n methods of the {@link java.nio.channels.DatagramChannel#open\n DatagramChannel}, {@link java.nio.channels.Pipe#open Pipe}, {@link\n java.nio.channels.Selector#open Selector}, {@link\n java.nio.channels.ServerSocketChannel#open ServerSocketChannel}, and {@link\n java.nio.channels.SocketChannel#open SocketChannel} classes.  It is also\n used by the {@link java.lang.System#inheritedChannel System.inheritedChannel()}\n method. A program may make use of a provider other than the default provider\n by instantiating that provider and then directly invoking the \u003ctt\u003eopen\u003c/tt\u003e\n methods defined in this class.\n\n \u003cp\u003e All of the methods in this class are safe for use by multiple concurrent\n threads.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SelectorProvider","qualifiedName":"java.nio.channels.spi.SelectorProvider","dimension":"","elementType":{},"package":"java.nio.channels.spi","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"provider","comment":"Returns the system-wide default selector provider for this invocation of\n the Java virtual machine.\n\n \u003cp\u003e The first invocation of this method locates the default provider\n object as follows: \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e If the system property\n   \u003ctt\u003ejava.nio.channels.spi.SelectorProvider\u003c/tt\u003e is defined then it is\n   taken to be the fully-qualified name of a concrete provider class.\n   The class is loaded and instantiated; if this process fails then an\n   unspecified error is thrown.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e If a provider class has been installed in a jar file that is\n   visible to the system class loader, and that jar file contains a\n   provider-configuration file named\n   \u003ctt\u003ejava.nio.channels.spi.SelectorProvider\u003c/tt\u003e in the resource\n   directory \u003ctt\u003eMETA-INF/services\u003c/tt\u003e, then the first class name\n   specified in that file is taken.  The class is loaded and\n   instantiated; if this process fails then an unspecified error is\n   thrown.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Finally, if no provider has been specified by any of the above\n   means then the system-default provider class is instantiated and the\n   result is returned.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e Subsequent invocations of this method return the provider that was\n returned by the first invocation.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SelectorProvider","qualifiedName":"java.nio.channels.spi.SelectorProvider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"openDatagramChannel","comment":"Opens a datagram channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"openDatagramChannel","comment":"Opens a datagram channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.ProtocolFamily)","flatSignature":"(ProtocolFamily)","returnType":{"isPrimitive":false,"simpleName":"DatagramChannel","qualifiedName":"java.nio.channels.DatagramChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"family","type":{"isPrimitive":false,"simpleName":"ProtocolFamily","qualifiedName":"java.net.ProtocolFamily","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"openPipe","comment":"Opens a pipe.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Pipe","qualifiedName":"java.nio.channels.Pipe","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"openSelector","comment":"Opens a selector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AbstractSelector","qualifiedName":"java.nio.channels.spi.AbstractSelector","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"openServerSocketChannel","comment":"Opens a server-socket channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ServerSocketChannel","qualifiedName":"java.nio.channels.ServerSocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"openSocketChannel","comment":"Opens a socket channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketChannel","qualifiedName":"java.nio.channels.SocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"inheritedChannel","comment":"Returns the channel inherited from the entity that created this\n Java virtual machine.\n\n \u003cp\u003e On many operating systems a process, such as a Java virtual\n machine, can be started in a manner that allows the process to\n inherit a channel from the entity that created the process. The\n manner in which this is done is system dependent, as are the\n possible entities to which the channel may be connected. For example,\n on UNIX systems, the Internet services daemon (\u003ci\u003einetd\u003c/i\u003e) is used to\n start programs to service requests when a request arrives on an\n associated network port. In this example, the process that is started,\n inherits a channel representing a network socket.\n\n \u003cp\u003e In cases where the inherited channel represents a network socket\n then the {@link java.nio.channels.Channel Channel} type returned\n by this method is determined as follows:\n\n \u003cul\u003e\n\n  \u003cli\u003e\u003cp\u003e If the inherited channel represents a stream-oriented connected\n  socket then a {@link java.nio.channels.SocketChannel SocketChannel} is\n  returned. The socket channel is, at least initially, in blocking\n  mode, bound to a socket address, and connected to a peer.\n  \u003c/p\u003e\u003c/li\u003e\n\n  \u003cli\u003e\u003cp\u003e If the inherited channel represents a stream-oriented listening\n  socket then a {@link java.nio.channels.ServerSocketChannel\n  ServerSocketChannel} is returned. The server-socket channel is, at\n  least initially, in blocking mode, and bound to a socket address.\n  \u003c/p\u003e\u003c/li\u003e\n\n  \u003cli\u003e\u003cp\u003e If the inherited channel is a datagram-oriented socket\n  then a {@link java.nio.channels.DatagramChannel DatagramChannel} is\n  returned. The datagram channel is, at least initially, in blocking\n  mode, and bound to a socket address.\n  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e In addition to the network-oriented channels described, this method\n may return other kinds of channels in the future.\n\n \u003cp\u003e The first invocation of this method creates the channel that is\n returned. Subsequent invocations of this method return the same\n channel. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Channel","qualifiedName":"java.nio.channels.Channel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}