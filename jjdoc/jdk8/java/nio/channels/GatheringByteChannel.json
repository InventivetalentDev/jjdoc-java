{"name":"GatheringByteChannel","comment":"A channel that can write bytes from a sequence of buffers.\n\n \u003cp\u003e A \u003ci\u003egathering\u003c/i\u003e write operation writes, in a single invocation, a\n sequence of bytes from one or more of a given sequence of buffers.\n Gathering writes are often useful when implementing network protocols or\n file formats that, for example, group data into segments consisting of one\n or more fixed-length headers followed by a variable-length body.  Similar\n \u003ci\u003escattering\u003c/i\u003e read operations are defined in the {@link\n ScatteringByteChannel} interface.  \u003c/p\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"GatheringByteChannel","qualifiedName":"java.nio.channels.GatheringByteChannel","dimension":"","elementType":{},"package":"java.nio.channels","interfaces":["java.nio.channels.WritableByteChannel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"write","comment":"Writes a sequence of bytes to this channel from a subsequence of the\n given buffers.\n\n \u003cp\u003e An attempt is made to write up to \u003ci\u003er\u003c/i\u003e bytes to this channel,\n where \u003ci\u003er\u003c/i\u003e is the total number of bytes remaining in the specified\n subsequence of the given buffer array, that is,\n\n \u003cblockquote\u003e\u003cpre\u003e\n srcs[offset].remaining()\n     + srcs[offset+1].remaining()\n     + ... + srcs[offset+length-1].remaining()\u003c/pre\u003e\u003c/blockquote\u003e\n\n at the moment that this method is invoked.\n\n \u003cp\u003e Suppose that a byte sequence of length \u003ci\u003en\u003c/i\u003e is written, where\n \u003ctt\u003e0\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003er\u003c/i\u003e.\n Up to the first \u003ctt\u003esrcs[offset].remaining()\u003c/tt\u003e bytes of this sequence\n are written from buffer \u003ctt\u003esrcs[offset]\u003c/tt\u003e, up to the next\n \u003ctt\u003esrcs[offset+1].remaining()\u003c/tt\u003e bytes are written from buffer\n \u003ctt\u003esrcs[offset+1]\u003c/tt\u003e, and so forth, until the entire byte sequence is\n written.  As many bytes as possible are written from each buffer, hence\n the final position of each updated buffer, except the last updated\n buffer, is guaranteed to be equal to that buffer\u0027s limit.\n\n \u003cp\u003e Unless otherwise specified, a write operation will return only after\n writing all of the \u003ci\u003er\u003c/i\u003e requested bytes.  Some types of channels,\n depending upon their state, may write only some of the bytes or possibly\n none at all.  A socket channel in non-blocking mode, for example, cannot\n write any more bytes than are free in the socket\u0027s output buffer.\n\n \u003cp\u003e This method may be invoked at any time.  If another thread has\n already initiated a write operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[], int, int)","flatSignature":"(ByteBuffer[], int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sequence of bytes to this channel from the given buffers.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003ec.write(srcs)\u003c/tt\u003e\n behaves in exactly the same manner as the invocation\n\n \u003cblockquote\u003e\u003cpre\u003e\n c.write(srcs, 0, srcs.length);\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer[])","flatSignature":"(ByteBuffer[])","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcs","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.channels.SocketChannel","java.nio.channels.Pipe.SinkChannel","java.nio.channels.FileChannel","java.nio.channels.DatagramChannel"],"enumConstants":[]}