{"name":"InterruptibleChannel","comment":"A channel that can be asynchronously closed and interrupted.\n\n \u003cp\u003e A channel that implements this interface is \u003ci\u003easynchronously\n closeable:\u003c/i\u003e If a thread is blocked in an I/O operation on an\n interruptible channel then another thread may invoke the channel\u0027s {@link\n #close close} method.  This will cause the blocked thread to receive an\n {@link AsynchronousCloseException}.\n\n \u003cp\u003e A channel that implements this interface is also \u003ci\u003einterruptible:\u003c/i\u003e\n If a thread is blocked in an I/O operation on an interruptible channel then\n another thread may invoke the blocked thread\u0027s {@link Thread#interrupt()\n interrupt} method.  This will cause the channel to be closed, the blocked\n thread to receive a {@link ClosedByInterruptException}, and the blocked\n thread\u0027s interrupt status to be set.\n\n \u003cp\u003e If a thread\u0027s interrupt status is already set and it invokes a blocking\n I/O operation upon a channel then the channel will be closed and the thread\n will immediately receive a {@link ClosedByInterruptException}; its interrupt\n status will remain set.\n\n \u003cp\u003e A channel supports asynchronous closing and interruption if, and only\n if, it implements this interface.  This can be tested at runtime, if\n necessary, via the \u003ctt\u003einstanceof\u003c/tt\u003e operator.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"InterruptibleChannel","qualifiedName":"java.nio.channels.InterruptibleChannel","dimension":"","elementType":{},"package":"java.nio.channels","interfaces":["java.nio.channels.Channel"],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"close","comment":"Closes this channel.\n\n \u003cp\u003e Any thread currently blocked in an I/O operation upon this channel\n will receive an {@link AsynchronousCloseException}.\n\n \u003cp\u003e This method otherwise behaves exactly as specified by the {@link\n Channel#close Channel} interface.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.channels.spi.AbstractInterruptibleChannel"],"enumConstants":[]}