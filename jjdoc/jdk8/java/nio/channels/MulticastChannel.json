{"name":"MulticastChannel","comment":"A network channel that supports Internet Protocol (IP) multicasting.\n\n \u003cp\u003e IP multicasting is the transmission of IP datagrams to members of\n a \u003cem\u003egroup\u003c/em\u003e that is zero or more hosts identified by a single destination\n address.\n\n \u003cp\u003e In the case of a channel to an {@link StandardProtocolFamily#INET IPv4} socket,\n the underlying operating system supports \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2236.txt\"\u003e\n \u003ci\u003eRFC\u0026nbsp;2236: Internet Group Management Protocol, Version 2 (IGMPv2)\u003c/i\u003e\u003c/a\u003e.\n It may optionally support source filtering as specified by \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc3376.txt\"\u003e \u003ci\u003eRFC\u0026nbsp;3376: Internet Group\n Management Protocol, Version 3 (IGMPv3)\u003c/i\u003e\u003c/a\u003e.\n For channels to an {@link StandardProtocolFamily#INET6 IPv6} socket, the equivalent\n standards are \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2710.txt\"\u003e \u003ci\u003eRFC\u0026nbsp;2710:\n Multicast Listener Discovery (MLD) for IPv6\u003c/i\u003e\u003c/a\u003e and \u003ca\n href\u003d\"http://www.ietf.org/rfc/rfc3810.txt\"\u003e \u003ci\u003eRFC\u0026nbsp;3810: Multicast Listener\n Discovery Version 2 (MLDv2) for IPv6\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003e The {@link #join(InetAddress,NetworkInterface)} method is used to\n join a group and receive all multicast datagrams sent to the group. A channel\n may join several multicast groups and may join the same group on several\n {@link NetworkInterface interfaces}. Membership is dropped by invoking the {@link\n MembershipKey#drop drop} method on the returned {@link MembershipKey}. If the\n underlying platform supports source filtering then the {@link MembershipKey#block\n block} and {@link MembershipKey#unblock unblock} methods can be used to block or\n unblock multicast datagrams from particular source addresses.\n\n \u003cp\u003e The {@link #join(InetAddress,NetworkInterface,InetAddress)} method\n is used to begin receiving datagrams sent to a group whose source address matches\n a given source address. This method throws {@link UnsupportedOperationException}\n if the underlying platform does not support source filtering.  Membership is\n \u003cem\u003ecumulative\u003c/em\u003e and this method may be invoked again with the same group\n and interface to allow receiving datagrams from other source addresses. The\n method returns a {@link MembershipKey} that represents membership to receive\n datagrams from the given source address. Invoking the key\u0027s {@link\n MembershipKey#drop drop} method drops membership so that datagrams from the\n source address can no longer be received.\n\n \u003ch2\u003ePlatform dependencies\u003c/h2\u003e\n\n The multicast implementation is intended to map directly to the native\n multicasting facility. Consequently, the following items should be considered\n when developing an application that receives IP multicast datagrams:\n\n \u003col\u003e\n\n \u003cli\u003e\u003cp\u003e The creation of the channel should specify the {@link ProtocolFamily}\n that corresponds to the address type of the multicast groups that the channel\n will join. There is no guarantee that a channel to a socket in one protocol\n family can join and receive multicast datagrams when the address of the\n multicast group corresponds to another protocol family. For example, it is\n implementation specific if a channel to an {@link StandardProtocolFamily#INET6 IPv6}\n socket can join an {@link StandardProtocolFamily#INET IPv4} multicast group and receive\n multicast datagrams sent to the group. \u003c/p\u003e\u003c/li\u003e\n\n \u003cli\u003e\u003cp\u003e The channel\u0027s socket should be bound to the {@link\n InetAddress#isAnyLocalAddress wildcard} address. If the socket is bound to\n a specific address, rather than the wildcard address then it is implementation\n specific if multicast datagrams are received by the socket. \u003c/p\u003e\u003c/li\u003e\n\n \u003cli\u003e\u003cp\u003e The {@link StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} option should be\n enabled prior to {@link NetworkChannel#bind binding} the socket. This is\n required to allow multiple members of the group to bind to the same\n address. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n \u003cpre\u003e\n     // join multicast group on this interface, and also use this\n     // interface for outgoing multicast datagrams\n     NetworkInterface ni \u003d NetworkInterface.getByName(\"hme0\");\n\n     DatagramChannel dc \u003d DatagramChannel.open(StandardProtocolFamily.INET)\n         .setOption(StandardSocketOptions.SO_REUSEADDR, true)\n         .bind(new InetSocketAddress(5000))\n         .setOption(StandardSocketOptions.IP_MULTICAST_IF, ni);\n\n     InetAddress group \u003d InetAddress.getByName(\"225.4.5.6\");\n\n     MembershipKey key \u003d dc.join(group, ni);\n \u003c/pre\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"MulticastChannel","qualifiedName":"java.nio.channels.MulticastChannel","dimension":"","elementType":{},"package":"java.nio.channels","interfaces":["java.nio.channels.NetworkChannel"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"close","comment":"Closes this channel.\n\n \u003cp\u003e If the channel is a member of a multicast group then the membership\n is {@link MembershipKey#drop dropped}. Upon return, the {@link\n MembershipKey membership-key} will be {@link MembershipKey#isValid\n invalid}.\n\n \u003cp\u003e This method otherwise behaves exactly as specified by the {@link\n Channel} interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"join","comment":"Joins a multicast group to begin receiving all datagrams sent to the group,\n returning a membership key.\n\n \u003cp\u003e If this channel is currently a member of the group on the given\n interface to receive all datagrams then the membership key, representing\n that membership, is returned. Otherwise this channel joins the group and\n the resulting new membership key is returned. The resulting membership key\n is not {@link MembershipKey#sourceAddress source-specific}.\n\n \u003cp\u003e A multicast channel may join several multicast groups, including\n the same group on more than one interface. An implementation may impose a\n limit on the number of groups that may be joined at the same time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, java.net.NetworkInterface)","flatSignature":"(InetAddress, NetworkInterface)","returnType":{"isPrimitive":false,"simpleName":"MembershipKey","qualifiedName":"java.nio.channels.MembershipKey","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"interf","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"join","comment":"Joins a multicast group to begin receiving datagrams sent to the group\n from a given source address.\n\n \u003cp\u003e If this channel is currently a member of the group on the given\n interface to receive datagrams from the given source address then the\n membership key, representing that membership, is returned. Otherwise this\n channel joins the group and the resulting new membership key is returned.\n The resulting membership key is {@link MembershipKey#sourceAddress\n source-specific}.\n\n \u003cp\u003e Membership is \u003cem\u003ecumulative\u003c/em\u003e and this method may be invoked\n again with the same group and interface to allow receiving datagrams sent\n by other source addresses to the group.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)","flatSignature":"(InetAddress, NetworkInterface, InetAddress)","returnType":{"isPrimitive":false,"simpleName":"MembershipKey","qualifiedName":"java.nio.channels.MembershipKey","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"interf","type":{"isPrimitive":false,"simpleName":"NetworkInterface","qualifiedName":"java.net.NetworkInterface","dimension":"","elementType":{}}},{"name":"source","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.channels.DatagramChannel"],"enumConstants":[]}