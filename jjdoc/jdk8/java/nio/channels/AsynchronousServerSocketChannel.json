{"name":"AsynchronousServerSocketChannel","comment":"An asynchronous channel for stream-oriented listening sockets.\n\n \u003cp\u003e An asynchronous server-socket channel is created by invoking the\n {@link #open open} method of this class.\n A newly-created asynchronous server-socket channel is open but not yet bound.\n It can be bound to a local address and configured to listen for connections\n by invoking the {@link #bind(SocketAddress,int) bind} method. Once bound,\n the {@link #accept(Object,CompletionHandler) accept} method\n is used to initiate the accepting of connections to the channel\u0027s socket.\n An attempt to invoke the \u003ctt\u003eaccept\u003c/tt\u003e method on an unbound channel will\n cause a {@link NotYetBoundException} to be thrown.\n\n \u003cp\u003e Channels of this type are safe for use by multiple concurrent threads\n though at most one accept operation can be outstanding at any time.\n If a thread initiates an accept operation before a previous accept operation\n has completed then an {@link AcceptPendingException} will be thrown.\n\n \u003cp\u003e Socket options are configured using the {@link #setOption(SocketOption,Object)\n setOption} method. Channels of this type support the following options:\n \u003cblockquote\u003e\n \u003ctable border summary\u003d\"Socket options\"\u003e\n   \u003ctr\u003e\n     \u003cth\u003eOption Name\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} \u003c/td\u003e\n     \u003ctd\u003e The size of the socket receive buffer \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\n     \u003ctd\u003e {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} \u003c/td\u003e\n     \u003ctd\u003e Re-use address \u003c/td\u003e\n   \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e\n Additional (implementation specific) options may also be supported.\n\n \u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e\n \u003cpre\u003e\n  final AsynchronousServerSocketChannel listener \u003d\n      AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(5000));\n\n  listener.accept(null, new CompletionHandler\u0026lt;AsynchronousSocketChannel,Void\u0026gt;() {\n      public void completed(AsynchronousSocketChannel ch, Void att) {\n          // accept the next connection\n          listener.accept(null, this);\n\n          // handle this connection\n          handle(ch);\n      }\n      public void failed(Throwable exc, Void att) {\n          ...\n      }\n  });\n \u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AsynchronousServerSocketChannel","qualifiedName":"java.nio.channels.AsynchronousServerSocketChannel","dimension":"","elementType":{},"package":"java.nio.channels","superclass":"java.lang.Object","interfaces":["java.nio.channels.AsynchronousChannel","java.nio.channels.NetworkChannel"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"provider","comment":"Returns the provider that created this channel.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AsynchronousChannelProvider","qualifiedName":"java.nio.channels.spi.AsynchronousChannelProvider","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"open","comment":"Opens an asynchronous server-socket channel.\n\n \u003cp\u003e The new channel is created by invoking the {@link\n java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousServerSocketChannel\n openAsynchronousServerSocketChannel} method on the {@link\n java.nio.channels.spi.AsynchronousChannelProvider} object that created\n the given group. If the group parameter is \u003ctt\u003enull\u003c/tt\u003e then the\n resulting channel is created by the system-wide default provider, and\n bound to the \u003cem\u003edefault group\u003c/em\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.channels.AsynchronousChannelGroup)","flatSignature":"(AsynchronousChannelGroup)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousServerSocketChannel","qualifiedName":"java.nio.channels.AsynchronousServerSocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"AsynchronousChannelGroup","qualifiedName":"java.nio.channels.AsynchronousChannelGroup","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"open","comment":"Opens an asynchronous server-socket channel.\n\n \u003cp\u003e This method returns an asynchronous server socket channel that is\n bound to the \u003cem\u003edefault group\u003c/em\u003e. This method is equivalent to evaluating\n the expression:\n \u003cblockquote\u003e\u003cpre\u003e\n open((AsynchronousChannelGroup)null);\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AsynchronousServerSocketChannel","qualifiedName":"java.nio.channels.AsynchronousServerSocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"bind","comment":"Binds the channel\u0027s socket to a local address and configures the socket to\n listen for connections.\n\n \u003cp\u003e An invocation of this method is equivalent to the following:\n \u003cblockquote\u003e\u003cpre\u003e\n bind(local, 0);\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress)","flatSignature":"(SocketAddress)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousServerSocketChannel","qualifiedName":"java.nio.channels.AsynchronousServerSocketChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"local","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bind","comment":"Binds the channel\u0027s socket to a local address and configures the socket to\n listen for connections.\n\n \u003cp\u003e This method is used to establish an association between the socket and\n a local address. Once an association is established then the socket remains\n bound until the associated channel is closed.\n\n \u003cp\u003e The {@code backlog} parameter is the maximum number of pending\n connections on the socket. Its exact semantics are implementation specific.\n In particular, an implementation may impose a maximum length or may choose\n to ignore the parameter altogther. If the {@code backlog} parameter has\n the value {@code 0}, or a negative value, then an implementation specific\n default is used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketAddress, int)","flatSignature":"(SocketAddress, int)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousServerSocketChannel","qualifiedName":"java.nio.channels.AsynchronousServerSocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"local","type":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}}},{"name":"backlog","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOption","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.SocketOption\u003cT\u003e, T)","flatSignature":"(SocketOption\u003cT\u003e, T)","returnType":{"isPrimitive":false,"simpleName":"AsynchronousServerSocketChannel","qualifiedName":"java.nio.channels.AsynchronousServerSocketChannel","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"SocketOption","qualifiedName":"java.net.SocketOption","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"accept","comment":"Accepts a connection.\n\n \u003cp\u003e This method initiates an asynchronous operation to accept a\n connection made to this channel\u0027s socket. The {@code handler} parameter is\n a completion handler that is invoked when a connection is accepted (or\n the operation fails). The result passed to the completion handler is\n the {@link AsynchronousSocketChannel} to the new connection.\n\n \u003cp\u003e When a new connection is accepted then the resulting {@code\n AsynchronousSocketChannel} will be bound to the same {@link\n AsynchronousChannelGroup} as this channel. If the group is {@link\n AsynchronousChannelGroup#isShutdown shutdown} and a connection is accepted,\n then the connection is closed, and the operation completes with an {@code\n IOException} and cause {@link ShutdownChannelGroupException}.\n\n \u003cp\u003e To allow for concurrent handling of new connections, the completion\n handler is not invoked directly by the initiating thread when a new\n connection is accepted immediately (see \u003ca\n href\u003d\"AsynchronousChannelGroup.html#threading\"\u003eThreading\u003c/a\u003e).\n\n \u003cp\u003e If a security manager has been installed then it verifies that the\n address and port number of the connection\u0027s remote endpoint are permitted\n by the security manager\u0027s {@link SecurityManager#checkAccept checkAccept}\n method. The permission check is performed with privileges that are restricted\n by the calling context of this method. If the permission check fails then\n the connection is closed and the operation completes with a {@link\n SecurityException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(A, java.nio.channels.CompletionHandler\u003cjava.nio.channels.AsynchronousSocketChannel, ? super A\u003e)","flatSignature":"(A, CompletionHandler\u003cAsynchronousSocketChannel, ? super A\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"attachment","type":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"CompletionHandler","qualifiedName":"java.nio.channels.CompletionHandler","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"accept","comment":"Accepts a connection.\n\n \u003cp\u003e This method initiates an asynchronous operation to accept a\n connection made to this channel\u0027s socket. The method behaves in exactly\n the same manner as the {@link #accept(Object, CompletionHandler)} method\n except that instead of specifying a completion handler, this method\n returns a {@code Future} representing the pending result. The {@code\n Future}\u0027s {@link Future#get() get} method returns the {@link\n AsynchronousSocketChannel} to the new connection on successful completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocalAddress","comment":"{@inheritDoc}\n \u003cp\u003e\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n local port of the channel\u0027s socket is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SocketAddress","qualifiedName":"java.net.SocketAddress","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}