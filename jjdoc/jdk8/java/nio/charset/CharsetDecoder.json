{"name":"CharsetDecoder","comment":"An engine that can transform a sequence of bytes in a specific charset into a sequence of\n sixteen-bit Unicode characters.\n\n \u003ca name\u003d\"steps\"\u003e\u003c/a\u003e\n\n \u003cp\u003e The input byte sequence is provided in a byte buffer or a series\n of such buffers.  The output character sequence is written to a character buffer\n or a series of such buffers.  A decoder should always be used by making\n the following sequence of method invocations, hereinafter referred to as a\n \u003ci\u003edecoding operation\u003c/i\u003e:\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e Reset the decoder via the {@link #reset reset} method, unless it\n   has not been used before; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Invoke the {@link #decode decode} method zero or more times, as\n   long as additional input may be available, passing \u003ctt\u003efalse\u003c/tt\u003e for the\n   \u003ctt\u003eendOfInput\u003c/tt\u003e argument and filling the input buffer and flushing the\n   output buffer between invocations; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Invoke the {@link #decode decode} method one final time, passing\n   \u003ctt\u003etrue\u003c/tt\u003e for the \u003ctt\u003eendOfInput\u003c/tt\u003e argument; and then \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Invoke the {@link #flush flush} method so that the decoder can\n   flush any internal state to the output buffer. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n Each invocation of the {@link #decode decode} method will decode as many\n bytes as possible from the input buffer, writing the resulting characters\n to the output buffer.  The {@link #decode decode} method returns when more\n input is required, when there is not enough room in the output buffer, or\n when a decoding error has occurred.  In each case a {@link CoderResult}\n object is returned to describe the reason for termination.  An invoker can\n examine this object and fill the input buffer, flush the output buffer, or\n attempt to recover from a decoding error, as appropriate, and try again.\n\n \u003ca name\u003d\"ce\"\u003e\u003c/a\u003e\n\n \u003cp\u003e There are two general types of decoding errors.  If the input byte\n sequence is not legal for this charset then the input is considered \u003ci\u003emalformed\u003c/i\u003e.  If\n the input byte sequence is legal but cannot be mapped to a valid\n Unicode character then an \u003ci\u003eunmappable character\u003c/i\u003e has been encountered.\n\n \u003ca name\u003d\"cae\"\u003e\u003c/a\u003e\n\n \u003cp\u003e How a decoding error is handled depends upon the action requested for\n that type of error, which is described by an instance of the {@link\n CodingErrorAction} class.  The possible error actions are to {@linkplain\n CodingErrorAction#IGNORE ignore} the erroneous input, {@linkplain\n CodingErrorAction#REPORT report} the error to the invoker via\n the returned {@link CoderResult} object, or {@linkplain CodingErrorAction#REPLACE\n replace} the erroneous input with the current value of the\n replacement string.  The replacement\n\n\n\n\n\n\n has the initial value \u003ctt\u003e\"\u0026#92;uFFFD\"\u003c/tt\u003e;\n\n\n its value may be changed via the {@link #replaceWith(java.lang.String)\n replaceWith} method.\n\n \u003cp\u003e The default action for malformed-input and unmappable-character errors\n is to {@linkplain CodingErrorAction#REPORT report} them.  The\n malformed-input error action may be changed via the {@link\n #onMalformedInput(CodingErrorAction) onMalformedInput} method; the\n unmappable-character action may be changed via the {@link\n #onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter} method.\n\n \u003cp\u003e This class is designed to handle many of the details of the decoding\n process, including the implementation of error actions.  A decoder for a\n specific charset, which is a concrete subclass of this class, need only\n implement the abstract {@link #decodeLoop decodeLoop} method, which\n encapsulates the basic decoding loop.  A subclass that maintains internal\n state should, additionally, override the {@link #implFlush implFlush} and\n {@link #implReset implReset} methods.\n\n \u003cp\u003e Instances of this class are not safe for use by multiple concurrent\n threads.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CharsetDecoder","qualifiedName":"java.nio.charset.CharsetDecoder","dimension":"","elementType":{},"package":"java.nio.charset","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"charset","comment":"Returns the charset that created this decoder.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Charset","qualifiedName":"java.nio.charset.Charset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"replacement","comment":"Returns this decoder\u0027s replacement value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"replaceWith","comment":"Changes this decoder\u0027s replacement value.\n\n \u003cp\u003e This method invokes the {@link #implReplaceWith implReplaceWith}\n method, passing the new replacement, after checking that the new\n replacement is acceptable.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"CharsetDecoder","qualifiedName":"java.nio.charset.CharsetDecoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newReplacement","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"malformedInputAction","comment":"Returns this decoder\u0027s current action for malformed-input errors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"onMalformedInput","comment":"Changes this decoder\u0027s action for malformed-input errors.\n\n \u003cp\u003e This method invokes the {@link #implOnMalformedInput\n implOnMalformedInput} method, passing the new action.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.charset.CodingErrorAction)","flatSignature":"(CodingErrorAction)","returnType":{"isPrimitive":false,"simpleName":"CharsetDecoder","qualifiedName":"java.nio.charset.CharsetDecoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newAction","type":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unmappableCharacterAction","comment":"Returns this decoder\u0027s current action for unmappable-character errors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"onUnmappableCharacter","comment":"Changes this decoder\u0027s action for unmappable-character errors.\n\n \u003cp\u003e This method invokes the {@link #implOnUnmappableCharacter\n implOnUnmappableCharacter} method, passing the new action.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.charset.CodingErrorAction)","flatSignature":"(CodingErrorAction)","returnType":{"isPrimitive":false,"simpleName":"CharsetDecoder","qualifiedName":"java.nio.charset.CharsetDecoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newAction","type":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"averageCharsPerByte","comment":"Returns the average number of characters that will be produced for each\n byte of input.  This heuristic value may be used to estimate the size\n of the output buffer required for a given input sequence.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"maxCharsPerByte","comment":"Returns the maximum number of characters that will be produced for each\n byte of input.  This value may be used to compute the worst-case size\n of the output buffer required for a given input sequence.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"decode","comment":"Decodes as many bytes as possible from the given input buffer,\n writing the results to the given output buffer.\n\n \u003cp\u003e The buffers are read from, and written to, starting at their current\n positions.  At most {@link Buffer#remaining in.remaining()} bytes\n will be read and at most {@link Buffer#remaining out.remaining()}\n characters will be written.  The buffers\u0027 positions will be advanced to\n reflect the bytes read and the characters written, but their marks and\n limits will not be modified.\n\n \u003cp\u003e In addition to reading bytes from the input buffer and writing\n characters to the output buffer, this method returns a {@link CoderResult}\n object to describe its reason for termination:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link CoderResult#UNDERFLOW} indicates that as much of the\n   input buffer as possible has been decoded.  If there is no further\n   input then the invoker can proceed to the next step of the\n   \u003ca href\u003d\"#steps\"\u003edecoding operation\u003c/a\u003e.  Otherwise this method\n   should be invoked again with further input.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link CoderResult#OVERFLOW} indicates that there is\n   insufficient space in the output buffer to decode any more bytes.\n   This method should be invoked again with an output buffer that has\n   more {@linkplain Buffer#remaining remaining} characters. This is\n   typically done by draining any decoded characters from the output\n   buffer.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A {@linkplain CoderResult#malformedForLength\n   malformed-input} result indicates that a malformed-input\n   error has been detected.  The malformed bytes begin at the input\n   buffer\u0027s (possibly incremented) position; the number of malformed\n   bytes may be determined by invoking the result object\u0027s {@link\n   CoderResult#length() length} method.  This case applies only if the\n   {@linkplain #onMalformedInput malformed action} of this decoder\n   is {@link CodingErrorAction#REPORT}; otherwise the malformed input\n   will be ignored or replaced, as requested.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e An {@linkplain CoderResult#unmappableForLength\n   unmappable-character} result indicates that an\n   unmappable-character error has been detected.  The bytes that\n   decode the unmappable character begin at the input buffer\u0027s (possibly\n   incremented) position; the number of such bytes may be determined\n   by invoking the result object\u0027s {@link CoderResult#length() length}\n   method.  This case applies only if the {@linkplain #onUnmappableCharacter\n   unmappable action} of this decoder is {@link\n   CodingErrorAction#REPORT}; otherwise the unmappable character will be\n   ignored or replaced, as requested.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n In any case, if this method is to be reinvoked in the same decoding\n operation then care should be taken to preserve any bytes remaining\n in the input buffer so that they are available to the next invocation.\n\n \u003cp\u003e The \u003ctt\u003eendOfInput\u003c/tt\u003e parameter advises this method as to whether\n the invoker can provide further input beyond that contained in the given\n input buffer.  If there is a possibility of providing additional input\n then the invoker should pass \u003ctt\u003efalse\u003c/tt\u003e for this parameter; if there\n is no possibility of providing further input then the invoker should\n pass \u003ctt\u003etrue\u003c/tt\u003e.  It is not erroneous, and in fact it is quite\n common, to pass \u003ctt\u003efalse\u003c/tt\u003e in one invocation and later discover that\n no further input was actually available.  It is critical, however, that\n the final invocation of this method in a sequence of invocations always\n pass \u003ctt\u003etrue\u003c/tt\u003e so that any remaining undecoded input will be treated\n as being malformed.\n\n \u003cp\u003e This method works by invoking the {@link #decodeLoop decodeLoop}\n method, interpreting its results, handling error conditions, and\n reinvoking it as necessary.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer, java.nio.CharBuffer, boolean)","flatSignature":"(ByteBuffer, CharBuffer, boolean)","returnType":{"isPrimitive":false,"simpleName":"CoderResult","qualifiedName":"java.nio.charset.CoderResult","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"out","type":{"isPrimitive":false,"simpleName":"CharBuffer","qualifiedName":"java.nio.CharBuffer","dimension":"","elementType":{}}},{"name":"endOfInput","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flushes this decoder.\n\n \u003cp\u003e Some decoders maintain internal state and may need to write some\n final characters to the output buffer once the overall input sequence has\n been read.\n\n \u003cp\u003e Any additional output is written to the output buffer beginning at\n its current position.  At most {@link Buffer#remaining out.remaining()}\n characters will be written.  The buffer\u0027s position will be advanced\n appropriately, but its mark and limit will not be modified.\n\n \u003cp\u003e If this method completes successfully then it returns {@link\n CoderResult#UNDERFLOW}.  If there is insufficient room in the output\n buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens\n then this method must be invoked again, with an output buffer that has\n more room, in order to complete the current \u003ca href\u003d\"#steps\"\u003edecoding\n operation\u003c/a\u003e.\n\n \u003cp\u003e If this decoder has already been flushed then invoking this method\n has no effect.\n\n \u003cp\u003e This method invokes the {@link #implFlush implFlush} method to\n perform the actual flushing operation.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.CharBuffer)","flatSignature":"(CharBuffer)","returnType":{"isPrimitive":false,"simpleName":"CoderResult","qualifiedName":"java.nio.charset.CoderResult","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"CharBuffer","qualifiedName":"java.nio.CharBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"Resets this decoder, clearing any internal state.\n\n \u003cp\u003e This method resets charset-independent state and also invokes the\n {@link #implReset() implReset} method in order to perform any\n charset-specific reset actions.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CharsetDecoder","qualifiedName":"java.nio.charset.CharsetDecoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"decode","comment":"Convenience method that decodes the remaining content of a single input\n byte buffer into a newly-allocated character buffer.\n\n \u003cp\u003e This method implements an entire \u003ca href\u003d\"#steps\"\u003edecoding\n operation\u003c/a\u003e; that is, it resets this decoder, then it decodes the\n bytes in the given byte buffer, and finally it flushes this\n decoder.  This method should therefore not be invoked if a decoding\n operation is already in progress.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"CharBuffer","qualifiedName":"java.nio.CharBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAutoDetecting","comment":"Tells whether or not this decoder implements an auto-detecting charset.\n\n \u003cp\u003e The default implementation of this method always returns\n \u003ctt\u003efalse\u003c/tt\u003e; it should be overridden by auto-detecting decoders to\n return \u003ctt\u003etrue\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isCharsetDetected","comment":"Tells whether or not this decoder has yet detected a\n charset\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e If this decoder implements an auto-detecting charset then at a\n single point during a decoding operation this method may start returning\n \u003ctt\u003etrue\u003c/tt\u003e to indicate that a specific charset has been detected in\n the input byte sequence.  Once this occurs, the {@link #detectedCharset\n detectedCharset} method may be invoked to retrieve the detected charset.\n\n \u003cp\u003e That this method returns \u003ctt\u003efalse\u003c/tt\u003e does not imply that no bytes\n have yet been decoded.  Some auto-detecting decoders are capable of\n decoding some, or even all, of an input byte sequence without fixing on\n a particular charset.\n\n \u003cp\u003e The default implementation of this method always throws an {@link\n UnsupportedOperationException}; it should be overridden by\n auto-detecting decoders to return \u003ctt\u003etrue\u003c/tt\u003e once the input charset\n has been determined.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"detectedCharset","comment":"Retrieves the charset that was detected by this\n decoder\u0026nbsp;\u0026nbsp;\u003ci\u003e(optional operation)\u003c/i\u003e.\n\n \u003cp\u003e If this decoder implements an auto-detecting charset then this\n method returns the actual charset once it has been detected.  After that\n point, this method returns the same value for the duration of the\n current decoding operation.  If not enough input bytes have yet been\n read to determine the actual charset then this method throws an {@link\n IllegalStateException}.\n\n \u003cp\u003e The default implementation of this method always throws an {@link\n UnsupportedOperationException}; it should be overridden by\n auto-detecting decoders to return the appropriate value.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Charset","qualifiedName":"java.nio.charset.Charset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}