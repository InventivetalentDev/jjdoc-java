{"name":"CharsetEncoder","comment":"An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of\n bytes in a specific charset.\n\n \u003ca name\u003d\"steps\"\u003e\u003c/a\u003e\n\n \u003cp\u003e The input character sequence is provided in a character buffer or a series\n of such buffers.  The output byte sequence is written to a byte buffer\n or a series of such buffers.  An encoder should always be used by making\n the following sequence of method invocations, hereinafter referred to as an\n \u003ci\u003eencoding operation\u003c/i\u003e:\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e Reset the encoder via the {@link #reset reset} method, unless it\n   has not been used before; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Invoke the {@link #encode encode} method zero or more times, as\n   long as additional input may be available, passing \u003ctt\u003efalse\u003c/tt\u003e for the\n   \u003ctt\u003eendOfInput\u003c/tt\u003e argument and filling the input buffer and flushing the\n   output buffer between invocations; \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Invoke the {@link #encode encode} method one final time, passing\n   \u003ctt\u003etrue\u003c/tt\u003e for the \u003ctt\u003eendOfInput\u003c/tt\u003e argument; and then \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e Invoke the {@link #flush flush} method so that the encoder can\n   flush any internal state to the output buffer. \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n Each invocation of the {@link #encode encode} method will encode as many\n characters as possible from the input buffer, writing the resulting bytes\n to the output buffer.  The {@link #encode encode} method returns when more\n input is required, when there is not enough room in the output buffer, or\n when an encoding error has occurred.  In each case a {@link CoderResult}\n object is returned to describe the reason for termination.  An invoker can\n examine this object and fill the input buffer, flush the output buffer, or\n attempt to recover from an encoding error, as appropriate, and try again.\n\n \u003ca name\u003d\"ce\"\u003e\u003c/a\u003e\n\n \u003cp\u003e There are two general types of encoding errors.  If the input character\n sequence is not a legal sixteen-bit Unicode sequence then the input is considered \u003ci\u003emalformed\u003c/i\u003e.  If\n the input character sequence is legal but cannot be mapped to a valid\n byte sequence in the given charset then an \u003ci\u003eunmappable character\u003c/i\u003e has been encountered.\n\n \u003ca name\u003d\"cae\"\u003e\u003c/a\u003e\n\n \u003cp\u003e How an encoding error is handled depends upon the action requested for\n that type of error, which is described by an instance of the {@link\n CodingErrorAction} class.  The possible error actions are to {@linkplain\n CodingErrorAction#IGNORE ignore} the erroneous input, {@linkplain\n CodingErrorAction#REPORT report} the error to the invoker via\n the returned {@link CoderResult} object, or {@linkplain CodingErrorAction#REPLACE\n replace} the erroneous input with the current value of the\n replacement byte array.  The replacement\n\n\n is initially set to the encoder\u0027s default replacement, which often\n (but not always) has the initial value\u0026nbsp;\u003ctt\u003e{\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e(byte)\u0027?\u0027\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e}\u003c/tt\u003e;\n\n\n\n\n\n its value may be changed via the {@link #replaceWith(byte[])\n replaceWith} method.\n\n \u003cp\u003e The default action for malformed-input and unmappable-character errors\n is to {@linkplain CodingErrorAction#REPORT report} them.  The\n malformed-input error action may be changed via the {@link\n #onMalformedInput(CodingErrorAction) onMalformedInput} method; the\n unmappable-character action may be changed via the {@link\n #onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter} method.\n\n \u003cp\u003e This class is designed to handle many of the details of the encoding\n process, including the implementation of error actions.  An encoder for a\n specific charset, which is a concrete subclass of this class, need only\n implement the abstract {@link #encodeLoop encodeLoop} method, which\n encapsulates the basic encoding loop.  A subclass that maintains internal\n state should, additionally, override the {@link #implFlush implFlush} and\n {@link #implReset implReset} methods.\n\n \u003cp\u003e Instances of this class are not safe for use by multiple concurrent\n threads.  \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CharsetEncoder","qualifiedName":"java.nio.charset.CharsetEncoder","dimension":"","elementType":{},"package":"java.nio.charset","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"charset","comment":"Returns the charset that created this encoder.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Charset","qualifiedName":"java.nio.charset.Charset","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"replacement","comment":"Returns this encoder\u0027s replacement value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"replaceWith","comment":"Changes this encoder\u0027s replacement value.\n\n \u003cp\u003e This method invokes the {@link #implReplaceWith implReplaceWith}\n method, passing the new replacement, after checking that the new\n replacement is acceptable.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"CharsetEncoder","qualifiedName":"java.nio.charset.CharsetEncoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newReplacement","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"isLegalReplacement","comment":"Tells whether or not the given byte array is a legal replacement value\n for this encoder.\n\n \u003cp\u003e A replacement is legal if, and only if, it is a legal sequence of\n bytes in this encoder\u0027s charset; that is, it must be possible to decode\n the replacement into one or more sixteen-bit Unicode characters.\n\n \u003cp\u003e The default implementation of this method is not very efficient; it\n should generally be overridden to improve performance.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"repl","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"malformedInputAction","comment":"Returns this encoder\u0027s current action for malformed-input errors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"onMalformedInput","comment":"Changes this encoder\u0027s action for malformed-input errors.\n\n \u003cp\u003e This method invokes the {@link #implOnMalformedInput\n implOnMalformedInput} method, passing the new action.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.charset.CodingErrorAction)","flatSignature":"(CodingErrorAction)","returnType":{"isPrimitive":false,"simpleName":"CharsetEncoder","qualifiedName":"java.nio.charset.CharsetEncoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newAction","type":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unmappableCharacterAction","comment":"Returns this encoder\u0027s current action for unmappable-character errors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"onUnmappableCharacter","comment":"Changes this encoder\u0027s action for unmappable-character errors.\n\n \u003cp\u003e This method invokes the {@link #implOnUnmappableCharacter\n implOnUnmappableCharacter} method, passing the new action.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.charset.CodingErrorAction)","flatSignature":"(CodingErrorAction)","returnType":{"isPrimitive":false,"simpleName":"CharsetEncoder","qualifiedName":"java.nio.charset.CharsetEncoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newAction","type":{"isPrimitive":false,"simpleName":"CodingErrorAction","qualifiedName":"java.nio.charset.CodingErrorAction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"averageBytesPerChar","comment":"Returns the average number of bytes that will be produced for each\n character of input.  This heuristic value may be used to estimate the size\n of the output buffer required for a given input sequence.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"maxBytesPerChar","comment":"Returns the maximum number of bytes that will be produced for each\n character of input.  This value may be used to compute the worst-case size\n of the output buffer required for a given input sequence.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"encode","comment":"Encodes as many characters as possible from the given input buffer,\n writing the results to the given output buffer.\n\n \u003cp\u003e The buffers are read from, and written to, starting at their current\n positions.  At most {@link Buffer#remaining in.remaining()} characters\n will be read and at most {@link Buffer#remaining out.remaining()}\n bytes will be written.  The buffers\u0027 positions will be advanced to\n reflect the characters read and the bytes written, but their marks and\n limits will not be modified.\n\n \u003cp\u003e In addition to reading characters from the input buffer and writing\n bytes to the output buffer, this method returns a {@link CoderResult}\n object to describe its reason for termination:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link CoderResult#UNDERFLOW} indicates that as much of the\n   input buffer as possible has been encoded.  If there is no further\n   input then the invoker can proceed to the next step of the\n   \u003ca href\u003d\"#steps\"\u003eencoding operation\u003c/a\u003e.  Otherwise this method\n   should be invoked again with further input.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e {@link CoderResult#OVERFLOW} indicates that there is\n   insufficient space in the output buffer to encode any more characters.\n   This method should be invoked again with an output buffer that has\n   more {@linkplain Buffer#remaining remaining} bytes. This is\n   typically done by draining any encoded bytes from the output\n   buffer.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e A {@linkplain CoderResult#malformedForLength\n   malformed-input} result indicates that a malformed-input\n   error has been detected.  The malformed characters begin at the input\n   buffer\u0027s (possibly incremented) position; the number of malformed\n   characters may be determined by invoking the result object\u0027s {@link\n   CoderResult#length() length} method.  This case applies only if the\n   {@linkplain #onMalformedInput malformed action} of this encoder\n   is {@link CodingErrorAction#REPORT}; otherwise the malformed input\n   will be ignored or replaced, as requested.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e An {@linkplain CoderResult#unmappableForLength\n   unmappable-character} result indicates that an\n   unmappable-character error has been detected.  The characters that\n   encode the unmappable character begin at the input buffer\u0027s (possibly\n   incremented) position; the number of such characters may be determined\n   by invoking the result object\u0027s {@link CoderResult#length() length}\n   method.  This case applies only if the {@linkplain #onUnmappableCharacter\n   unmappable action} of this encoder is {@link\n   CodingErrorAction#REPORT}; otherwise the unmappable character will be\n   ignored or replaced, as requested.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n In any case, if this method is to be reinvoked in the same encoding\n operation then care should be taken to preserve any characters remaining\n in the input buffer so that they are available to the next invocation.\n\n \u003cp\u003e The \u003ctt\u003eendOfInput\u003c/tt\u003e parameter advises this method as to whether\n the invoker can provide further input beyond that contained in the given\n input buffer.  If there is a possibility of providing additional input\n then the invoker should pass \u003ctt\u003efalse\u003c/tt\u003e for this parameter; if there\n is no possibility of providing further input then the invoker should\n pass \u003ctt\u003etrue\u003c/tt\u003e.  It is not erroneous, and in fact it is quite\n common, to pass \u003ctt\u003efalse\u003c/tt\u003e in one invocation and later discover that\n no further input was actually available.  It is critical, however, that\n the final invocation of this method in a sequence of invocations always\n pass \u003ctt\u003etrue\u003c/tt\u003e so that any remaining unencoded input will be treated\n as being malformed.\n\n \u003cp\u003e This method works by invoking the {@link #encodeLoop encodeLoop}\n method, interpreting its results, handling error conditions, and\n reinvoking it as necessary.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.CharBuffer, java.nio.ByteBuffer, boolean)","flatSignature":"(CharBuffer, ByteBuffer, boolean)","returnType":{"isPrimitive":false,"simpleName":"CoderResult","qualifiedName":"java.nio.charset.CoderResult","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"CharBuffer","qualifiedName":"java.nio.CharBuffer","dimension":"","elementType":{}}},{"name":"out","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}},{"name":"endOfInput","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flushes this encoder.\n\n \u003cp\u003e Some encoders maintain internal state and may need to write some\n final bytes to the output buffer once the overall input sequence has\n been read.\n\n \u003cp\u003e Any additional output is written to the output buffer beginning at\n its current position.  At most {@link Buffer#remaining out.remaining()}\n bytes will be written.  The buffer\u0027s position will be advanced\n appropriately, but its mark and limit will not be modified.\n\n \u003cp\u003e If this method completes successfully then it returns {@link\n CoderResult#UNDERFLOW}.  If there is insufficient room in the output\n buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens\n then this method must be invoked again, with an output buffer that has\n more room, in order to complete the current \u003ca href\u003d\"#steps\"\u003eencoding\n operation\u003c/a\u003e.\n\n \u003cp\u003e If this encoder has already been flushed then invoking this method\n has no effect.\n\n \u003cp\u003e This method invokes the {@link #implFlush implFlush} method to\n perform the actual flushing operation.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"CoderResult","qualifiedName":"java.nio.charset.CoderResult","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"Resets this encoder, clearing any internal state.\n\n \u003cp\u003e This method resets charset-independent state and also invokes the\n {@link #implReset() implReset} method in order to perform any\n charset-specific reset actions.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CharsetEncoder","qualifiedName":"java.nio.charset.CharsetEncoder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"encode","comment":"Convenience method that encodes the remaining content of a single input\n character buffer into a newly-allocated byte buffer.\n\n \u003cp\u003e This method implements an entire \u003ca href\u003d\"#steps\"\u003eencoding\n operation\u003c/a\u003e; that is, it resets this encoder, then it encodes the\n characters in the given character buffer, and finally it flushes this\n encoder.  This method should therefore not be invoked if an encoding\n operation is already in progress.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.CharBuffer)","flatSignature":"(CharBuffer)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"CharBuffer","qualifiedName":"java.nio.CharBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"canEncode","comment":"Tells whether or not this encoder can encode the given character.\n\n \u003cp\u003e This method returns \u003ctt\u003efalse\u003c/tt\u003e if the given character is a\n surrogate character; such characters can be interpreted only when they\n are members of a pair consisting of a high surrogate followed by a low\n surrogate.  The {@link #canEncode(java.lang.CharSequence)\n canEncode(CharSequence)} method may be used to test whether or not a\n character sequence can be encoded.\n\n \u003cp\u003e This method may modify this encoder\u0027s state; it should therefore not\n be invoked if an \u003ca href\u003d\"#steps\"\u003eencoding operation\u003c/a\u003e is already in\n progress.\n\n \u003cp\u003e The default implementation of this method is not very efficient; it\n should generally be overridden to improve performance.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"canEncode","comment":"Tells whether or not this encoder can encode the given character\n sequence.\n\n \u003cp\u003e If this method returns \u003ctt\u003efalse\u003c/tt\u003e for a particular character\n sequence then more information about why the sequence cannot be encoded\n may be obtained by performing a full \u003ca href\u003d\"#steps\"\u003eencoding\n operation\u003c/a\u003e.\n\n \u003cp\u003e This method may modify this encoder\u0027s state; it should therefore not\n be invoked if an encoding operation is already in progress.\n\n \u003cp\u003e The default implementation of this method is not very efficient; it\n should generally be overridden to improve performance.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cs","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}