{"name":"BufferedWriter","comment":"Writes text to a character-output stream, buffering characters so as to\n provide for the efficient writing of single characters, arrays, and strings.\n\n \u003cp\u003e The buffer size may be specified, or the default size may be accepted.\n The default is large enough for most purposes.\n\n \u003cp\u003e A newLine() method is provided, which uses the platform\u0027s own notion of\n line separator as defined by the system property \u003ctt\u003eline.separator\u003c/tt\u003e.\n Not all platforms use the newline character (\u0027\\n\u0027) to terminate lines.\n Calling this method to terminate each output line is therefore preferred to\n writing a newline character directly.\n\n \u003cp\u003e In general, a Writer sends its output immediately to the underlying\n character or byte stream.  Unless prompt output is required, it is advisable\n to wrap a BufferedWriter around any Writer whose write() operations may be\n costly, such as FileWriters and OutputStreamWriters.  For example,\n\n \u003cpre\u003e\n PrintWriter out\n   \u003d new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));\n \u003c/pre\u003e\n\n will buffer the PrintWriter\u0027s output to the file.  Without buffering, each\n invocation of a print() method would cause characters to be converted into\n bytes that would then be written immediately to the file, which can be very\n inefficient.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"BufferedWriter","qualifiedName":"java.io.BufferedWriter","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.Writer","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"BufferedWriter","comment":"Creates a buffered character-output stream that uses a default-sized\n output buffer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.Writer)","flatSignature":"(Writer)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BufferedWriter","comment":"Creates a new buffered character-output stream that uses an output\n buffer of the given size.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.Writer, int)","flatSignature":"(Writer, int)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}}},{"name":"sz","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"write","comment":"Writes a single character.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a portion of an array of characters.\n\n \u003cp\u003e Ordinarily this method stores characters from the given array into\n this stream\u0027s buffer, flushing the buffer to the underlying stream as\n needed.  If the requested length is at least as large as the buffer,\n however, then this method will flush the buffer and write the characters\n directly to the underlying stream.  Thus redundant\n \u003ccode\u003eBufferedWriter\u003c/code\u003es will not copy data unnecessarily.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cbuf","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a portion of a String.\n\n \u003cp\u003e If the value of the \u003ctt\u003elen\u003c/tt\u003e parameter is negative then no\n characters are written.  This is contrary to the specification of this\n method in the {@linkplain java.io.Writer#write(java.lang.String,int,int)\n superclass}, which requires that an {@link IndexOutOfBoundsException} be\n thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int, int)","flatSignature":"(String, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newLine","comment":"Writes a line separator.  The line separator string is defined by the\n system property \u003ctt\u003eline.separator\u003c/tt\u003e, and is not necessarily a single\n newline (\u0027\\n\u0027) character.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flush","comment":"Flushes the stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}