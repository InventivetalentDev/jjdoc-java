{"name":"SequenceInputStream","comment":"A \u003ccode\u003eSequenceInputStream\u003c/code\u003e represents\n the logical concatenation of other input\n streams. It starts out with an ordered\n collection of input streams and reads from\n the first one until end of file is reached,\n whereupon it reads from the second one,\n and so on, until end of file is reached\n on the last of the contained input streams.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SequenceInputStream","qualifiedName":"java.io.SequenceInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.InputStream","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SequenceInputStream","comment":"Initializes a newly created \u003ccode\u003eSequenceInputStream\u003c/code\u003e\n by remembering the argument, which must\n be an \u003ccode\u003eEnumeration\u003c/code\u003e  that produces\n objects whose run-time type is \u003ccode\u003eInputStream\u003c/code\u003e.\n The input streams that are  produced by\n the enumeration will be read, in order,\n to provide the bytes to be read  from this\n \u003ccode\u003eSequenceInputStream\u003c/code\u003e. After\n each input stream from the enumeration\n is exhausted, it is closed by calling its\n \u003ccode\u003eclose\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Enumeration\u003c? extends java.io.InputStream\u003e)","flatSignature":"(Enumeration\u003c? extends InputStream\u003e)","parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"SequenceInputStream","comment":"Initializes a newly\n created \u003ccode\u003eSequenceInputStream\u003c/code\u003e\n by remembering the two arguments, which\n will be read in order, first \u003ccode\u003es1\u003c/code\u003e\n and then \u003ccode\u003es2\u003c/code\u003e, to provide the\n bytes to be read from this \u003ccode\u003eSequenceInputStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream, java.io.InputStream)","flatSignature":"(InputStream, InputStream)","parameters":[{"name":"s1","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}},{"name":"s2","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"available","comment":"Returns an estimate of the number of bytes that can be read (or\n skipped over) from the current underlying input stream without\n blocking by the next invocation of a method for the current\n underlying input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n \u003cp\u003e\n This method simply calls {@code available} of the current underlying\n input stream and returns the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads the next byte of data from this input stream. The byte is\n returned as an \u003ccode\u003eint\u003c/code\u003e in the range \u003ccode\u003e0\u003c/code\u003e to\n \u003ccode\u003e255\u003c/code\u003e. If no byte is available because the end of the\n stream has been reached, the value \u003ccode\u003e-1\u003c/code\u003e is returned.\n This method blocks until input data is available, the end of the\n stream is detected, or an exception is thrown.\n \u003cp\u003e\n This method\n tries to read one character from the current substream. If it\n reaches the end of the stream, it calls the \u003ccode\u003eclose\u003c/code\u003e\n method of the current substream and begins reading from the next\n substream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this input stream\n into an array of bytes.  If \u003ccode\u003elen\u003c/code\u003e is not zero, the method\n blocks until at least 1 byte of input is available; otherwise, no\n bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned.\n \u003cp\u003e\n The \u003ccode\u003eread\u003c/code\u003e method of \u003ccode\u003eSequenceInputStream\u003c/code\u003e\n tries to read the data from the current substream. If it fails to\n read any characters because the substream has reached the end of\n the stream, it calls the \u003ccode\u003eclose\u003c/code\u003e method of the current\n substream and begins reading from the next substream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"close","comment":"Closes this input stream and releases any system resources\n associated with the stream.\n A closed \u003ccode\u003eSequenceInputStream\u003c/code\u003e\n cannot  perform input operations and cannot\n be reopened.\n \u003cp\u003e\n If this stream was created\n from an enumeration, all remaining elements\n are requested from the enumeration and closed\n before the \u003ccode\u003eclose\u003c/code\u003e method returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}