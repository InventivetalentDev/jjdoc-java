{"name":"FileInputStream","comment":"A \u003ccode\u003eFileInputStream\u003c/code\u003e obtains input bytes\n from a file in a file system. What files\n are  available depends on the host environment.\n\n \u003cp\u003e\u003ccode\u003eFileInputStream\u003c/code\u003e is meant for reading streams of raw bytes\n such as image data. For reading streams of characters, consider using\n \u003ccode\u003eFileReader\u003c/code\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileInputStream","qualifiedName":"java.io.FileInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.InputStream","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"FileInputStream","comment":"Creates a \u003ccode\u003eFileInputStream\u003c/code\u003e by\n opening a connection to an actual file,\n the file named by the path name \u003ccode\u003ename\u003c/code\u003e\n in the file system.  A new \u003ccode\u003eFileDescriptor\u003c/code\u003e\n object is created to represent this file\n connection.\n \u003cp\u003e\n First, if there is a security\n manager, its \u003ccode\u003echeckRead\u003c/code\u003e method\n is called with the \u003ccode\u003ename\u003c/code\u003e argument\n as its argument.\n \u003cp\u003e\n If the named file does not exist, is a directory rather than a regular\n file, or for some other reason cannot be opened for reading then a\n \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileInputStream","comment":"Creates a \u003ccode\u003eFileInputStream\u003c/code\u003e by\n opening a connection to an actual file,\n the file named by the \u003ccode\u003eFile\u003c/code\u003e\n object \u003ccode\u003efile\u003c/code\u003e in the file system.\n A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object\n is created to represent this file connection.\n \u003cp\u003e\n First, if there is a security manager,\n its \u003ccode\u003echeckRead\u003c/code\u003e method  is called\n with the path represented by the \u003ccode\u003efile\u003c/code\u003e\n argument as its argument.\n \u003cp\u003e\n If the named file does not exist, is a directory rather than a regular\n file, or for some other reason cannot be opened for reading then a\n \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileInputStream","comment":"Creates a \u003ccode\u003eFileInputStream\u003c/code\u003e by using the file descriptor\n \u003ccode\u003efdObj\u003c/code\u003e, which represents an existing connection to an\n actual file in the file system.\n \u003cp\u003e\n If there is a security manager, its \u003ccode\u003echeckRead\u003c/code\u003e method is\n called with the file descriptor \u003ccode\u003efdObj\u003c/code\u003e as its argument to\n see if it\u0027s ok to read the file descriptor. If read access is denied\n to the file descriptor a \u003ccode\u003eSecurityException\u003c/code\u003e is thrown.\n \u003cp\u003e\n If \u003ccode\u003efdObj\u003c/code\u003e is null then a \u003ccode\u003eNullPointerException\u003c/code\u003e\n is thrown.\n \u003cp\u003e\n This constructor does not throw an exception if \u003ccode\u003efdObj\u003c/code\u003e\n is {@link java.io.FileDescriptor#valid() invalid}.\n However, if the methods are invoked on the resulting stream to attempt\n I/O on the stream, an \u003ccode\u003eIOException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.FileDescriptor)","flatSignature":"(FileDescriptor)","parameters":[{"name":"fdObj","type":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"read","comment":"Reads a byte of data from this input stream. This method blocks\n if no input is yet available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003eb.length\u003c/code\u003e bytes of data from this input\n stream into an array of bytes. This method blocks until some input\n is available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this input stream\n into an array of bytes. If \u003ccode\u003elen\u003c/code\u003e is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skip","comment":"Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from the\n input stream.\n\n \u003cp\u003eThe \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly \u003ccode\u003e0\u003c/code\u003e. If \u003ccode\u003en\u003c/code\u003e is negative, the method\n will try to skip backwards. In case the backing file does not support\n backward skip at its current position, an \u003ccode\u003eIOException\u003c/code\u003e is\n thrown. The actual number of bytes skipped is returned. If it skips\n forwards, it returns a positive value. If it skips backwards, it\n returns a negative value.\n\n \u003cp\u003eThis method may skip more bytes than what are remaining in the\n backing file. This produces no exception and the number of bytes skipped\n may include some number of bytes that were beyond the EOF of the\n backing file. Attempting to read from the stream after skipping past\n the end will result in -1 indicating the end of the file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"available","comment":"Returns an estimate of the number of remaining bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. Returns 0 when the file\n position is beyond EOF. The next invocation might be the same thread\n or another thread. A single read or skip of this many bytes will not\n block, but may read or skip fewer bytes.\n\n \u003cp\u003e In some cases, a non-blocking read (or skip) may appear to be\n blocked when it is merely slow, for example when reading large\n files over slow networks.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this file input stream and releases any system resources\n associated with the stream.\n\n \u003cp\u003e If this stream has an associated channel then the channel is closed\n as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFD","comment":"Returns the \u003ccode\u003eFileDescriptor\u003c/code\u003e\n object  that represents the connection to\n the actual file in the file system being\n used by this \u003ccode\u003eFileInputStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChannel","comment":"Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n object associated with this file input stream.\n\n \u003cp\u003e The initial {@link java.nio.channels.FileChannel#position()\n position} of the returned channel will be equal to the\n number of bytes read from the file so far.  Reading bytes from this\n stream will increment the channel\u0027s position.  Changing the channel\u0027s\n position, either explicitly or by reading, will change this stream\u0027s\n file position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}