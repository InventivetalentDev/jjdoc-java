{"name":"BufferedReader","comment":"Reads text from a character-input stream, buffering characters so as to\n provide for the efficient reading of characters, arrays, and lines.\n\n \u003cp\u003e The buffer size may be specified, or the default size may be used.  The\n default is large enough for most purposes.\n\n \u003cp\u003e In general, each read request made of a Reader causes a corresponding\n read request to be made of the underlying character or byte stream.  It is\n therefore advisable to wrap a BufferedReader around any Reader whose read()\n operations may be costly, such as FileReaders and InputStreamReaders.  For\n example,\n\n \u003cpre\u003e\n BufferedReader in\n   \u003d new BufferedReader(new FileReader(\"foo.in\"));\n \u003c/pre\u003e\n\n will buffer the input from the specified file.  Without buffering, each\n invocation of read() or readLine() could cause bytes to be read from the\n file, converted into characters, and then returned, which can be very\n inefficient.\n\n \u003cp\u003e Programs that use DataInputStreams for textual input can be localized by\n replacing each DataInputStream with an appropriate BufferedReader.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"BufferedReader","qualifiedName":"java.io.BufferedReader","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.Reader","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"BufferedReader","comment":"Creates a buffering character-input stream that uses an input buffer of\n the specified size.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.Reader, int)","flatSignature":"(Reader, int)","parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}}},{"name":"sz","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BufferedReader","comment":"Creates a buffering character-input stream that uses a default-sized\n input buffer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.Reader)","flatSignature":"(Reader)","parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"read","comment":"Reads a single character.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads characters into a portion of an array.\n\n \u003cp\u003e This method implements the general contract of the corresponding\n \u003ccode\u003e{@link Reader#read(char[], int, int) read}\u003c/code\u003e method of the\n \u003ccode\u003e{@link Reader}\u003c/code\u003e class.  As an additional convenience, it\n attempts to read as many characters as possible by repeatedly invoking\n the \u003ccode\u003eread\u003c/code\u003e method of the underlying stream.  This iterated\n \u003ccode\u003eread\u003c/code\u003e continues until one of the following conditions becomes\n true: \u003cul\u003e\n\n   \u003cli\u003e The specified number of characters have been read,\n\n   \u003cli\u003e The \u003ccode\u003eread\u003c/code\u003e method of the underlying stream returns\n   \u003ccode\u003e-1\u003c/code\u003e, indicating end-of-file, or\n\n   \u003cli\u003e The \u003ccode\u003eready\u003c/code\u003e method of the underlying stream\n   returns \u003ccode\u003efalse\u003c/code\u003e, indicating that further input requests\n   would block.\n\n \u003c/ul\u003e If the first \u003ccode\u003eread\u003c/code\u003e on the underlying stream returns\n \u003ccode\u003e-1\u003c/code\u003e to indicate end-of-file then this method returns\n \u003ccode\u003e-1\u003c/code\u003e.  Otherwise this method returns the number of characters\n actually read.\n\n \u003cp\u003e Subclasses of this class are encouraged, but not required, to\n attempt to read as many characters as possible in the same fashion.\n\n \u003cp\u003e Ordinarily this method takes characters from this stream\u0027s character\n buffer, filling it from the underlying stream as necessary.  If,\n however, the buffer is empty, the mark is not valid, and the requested\n length is at least as large as the buffer, then this method will read\n characters directly from the underlying stream into the given array.\n Thus redundant \u003ccode\u003eBufferedReader\u003c/code\u003es will not copy data\n unnecessarily.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cbuf","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"readLine","comment":"Reads a line of text.  A line is considered to be terminated by any one\n of a line feed (\u0027\\n\u0027), a carriage return (\u0027\\r\u0027), or a carriage return\n followed immediately by a linefeed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"skip","comment":"Skips characters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ready","comment":"Tells whether this stream is ready to be read.  A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"markSupported","comment":"Tells whether this stream supports the mark() operation, which it does.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"mark","comment":"Marks the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"readAheadLimit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"Resets the stream to the most recent mark.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lines","comment":"Returns a {@code Stream}, the elements of which are lines read from\n this {@code BufferedReader}.  The {@link Stream} is lazily populated,\n i.e., read only occurs during the\n \u003ca href\u003d\"../util/stream/package-summary.html#StreamOps\"\u003eterminal\n stream operation\u003c/a\u003e.\n\n \u003cp\u003e The reader must not be operated on during the execution of the\n terminal stream operation. Otherwise, the result of the terminal stream\n operation is undefined.\n\n \u003cp\u003e After execution of the terminal stream operation there are no\n guarantees that the reader will be at a specific position from which to\n read the next character or line.\n\n \u003cp\u003e If an {@link IOException} is thrown when accessing the underlying\n {@code BufferedReader}, it is wrapped in an {@link\n UncheckedIOException} which will be thrown from the {@code Stream}\n method that caused the read to take place. This method will return a\n Stream if invoked on a BufferedReader that is closed. Any operation on\n that stream that requires reading from the BufferedReader after it is\n closed, will cause an UncheckedIOException to be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.io.LineNumberReader"],"enumConstants":[]}