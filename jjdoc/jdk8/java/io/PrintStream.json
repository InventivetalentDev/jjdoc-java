{"name":"PrintStream","comment":"A \u003ccode\u003ePrintStream\u003c/code\u003e adds functionality to another output stream,\n namely the ability to print representations of various data values\n conveniently.  Two other features are provided as well.  Unlike other output\n streams, a \u003ccode\u003ePrintStream\u003c/code\u003e never throws an\n \u003ccode\u003eIOException\u003c/code\u003e; instead, exceptional situations merely set an\n internal flag that can be tested via the \u003ccode\u003echeckError\u003c/code\u003e method.\n Optionally, a \u003ccode\u003ePrintStream\u003c/code\u003e can be created so as to flush\n automatically; this means that the \u003ccode\u003eflush\u003c/code\u003e method is\n automatically invoked after a byte array is written, one of the\n \u003ccode\u003eprintln\u003c/code\u003e methods is invoked, or a newline character or byte\n (\u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e) is written.\n\n \u003cp\u003e All characters printed by a \u003ccode\u003ePrintStream\u003c/code\u003e are converted into\n bytes using the platform\u0027s default character encoding.  The \u003ccode\u003e{@link\n PrintWriter}\u003c/code\u003e class should be used in situations that require writing\n characters rather than bytes.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.FilterOutputStream","interfaces":["java.lang.Appendable","java.io.Closeable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PrintStream","comment":"Creates a new print stream.  This stream will not flush automatically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PrintStream","comment":"Creates a new print stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream, boolean)","flatSignature":"(OutputStream, boolean)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}},{"name":"autoFlush","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PrintStream","comment":"Creates a new print stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream, boolean, java.lang.String)","flatSignature":"(OutputStream, boolean, String)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}},{"name":"autoFlush","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"encoding","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PrintStream","comment":"Creates a new print stream, without automatic line flushing, with the\n specified file name.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the\n {@linkplain java.nio.charset.Charset#defaultCharset() default charset}\n for this instance of the Java virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"fileName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PrintStream","comment":"Creates a new print stream, without automatic line flushing, with the\n specified file name and charset.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the provided\n charset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"fileName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PrintStream","comment":"Creates a new print stream, without automatic line flushing, with the\n specified file.  This convenience constructor creates the necessary\n intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},\n which will encode characters using the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PrintStream","comment":"Creates a new print stream, without automatic line flushing, with the\n specified file and charset.  This convenience constructor creates\n the necessary intermediate {@link java.io.OutputStreamWriter\n OutputStreamWriter}, which will encode characters using the provided\n charset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File, java.lang.String)","flatSignature":"(File, String)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"flush","comment":"Flushes the stream.  This is done by writing any buffered output bytes to\n the underlying output stream and then flushing that stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes the stream.  This is done by flushing the stream and then closing\n the underlying output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkError","comment":"Flushes the stream and checks its error state. The internal error state\n is set to \u003ccode\u003etrue\u003c/code\u003e when the underlying output stream throws an\n \u003ccode\u003eIOException\u003c/code\u003e other than \u003ccode\u003eInterruptedIOException\u003c/code\u003e,\n and when the \u003ccode\u003esetError\u003c/code\u003e method is invoked.  If an operation\n on the underlying output stream throws an\n \u003ccode\u003eInterruptedIOException\u003c/code\u003e, then the \u003ccode\u003ePrintStream\u003c/code\u003e\n converts the exception back into an interrupt by doing:\n \u003cpre\u003e\n     Thread.currentThread().interrupt();\n \u003c/pre\u003e\n or the equivalent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"write","comment":"Writes the specified byte to this stream.  If the byte is a newline and\n automatic flushing is enabled then the \u003ccode\u003eflush\u003c/code\u003e method will be\n invoked.\n\n \u003cp\u003e Note that the byte is written as given; to write a character that\n will be translated according to the platform\u0027s default character\n encoding, use the \u003ccode\u003eprint(char)\u003c/code\u003e or \u003ccode\u003eprintln(char)\u003c/code\u003e\n methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes \u003ccode\u003elen\u003c/code\u003e bytes from the specified byte array starting at\n offset \u003ccode\u003eoff\u003c/code\u003e to this stream.  If automatic flushing is\n enabled then the \u003ccode\u003eflush\u003c/code\u003e method will be invoked.\n\n \u003cp\u003e Note that the bytes will be written as given; to write characters\n that will be translated according to the platform\u0027s default character\n encoding, use the \u003ccode\u003eprint(char)\u003c/code\u003e or \u003ccode\u003eprintln(char)\u003c/code\u003e\n methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints a boolean value.  The string produced by \u003ccode\u003e{@link\n java.lang.String#valueOf(boolean)}\u003c/code\u003e is translated into bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints a character.  The character is translated into one or more bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints an integer.  The string produced by \u003ccode\u003e{@link\n java.lang.String#valueOf(int)}\u003c/code\u003e is translated into bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints a long integer.  The string produced by \u003ccode\u003e{@link\n java.lang.String#valueOf(long)}\u003c/code\u003e is translated into bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints a floating-point number.  The string produced by \u003ccode\u003e{@link\n java.lang.String#valueOf(float)}\u003c/code\u003e is translated into bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints a double-precision floating-point number.  The string produced by\n \u003ccode\u003e{@link java.lang.String#valueOf(double)}\u003c/code\u003e is translated into\n bytes according to the platform\u0027s default character encoding, and these\n bytes are written in exactly the manner of the \u003ccode\u003e{@link\n #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints an array of characters.  The characters are converted into bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[])","flatSignature":"(char[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"print","comment":"Prints a string.  If the argument is \u003ccode\u003enull\u003c/code\u003e then the string\n \u003ccode\u003e\"null\"\u003c/code\u003e is printed.  Otherwise, the string\u0027s characters are\n converted into bytes according to the platform\u0027s default character\n encoding, and these bytes are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"print","comment":"Prints an object.  The string produced by the \u003ccode\u003e{@link\n java.lang.String#valueOf(Object)}\u003c/code\u003e method is translated into bytes\n according to the platform\u0027s default character encoding, and these bytes\n are written in exactly the manner of the\n \u003ccode\u003e{@link #write(int)}\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Terminates the current line by writing the line separator string.  The\n line separator string is defined by the system property\n \u003ccode\u003eline.separator\u003c/code\u003e, and is not necessarily a single newline\n character (\u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"println","comment":"Prints a boolean and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(boolean)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints a character and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(char)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints an integer and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(int)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints a long and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(long)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints a float and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(float)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints a double and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(double)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints an array of characters and then terminate the line.  This method\n behaves as though it invokes \u003ccode\u003e{@link #print(char[])}\u003c/code\u003e and\n then \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[])","flatSignature":"(char[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"println","comment":"Prints a String and then terminate the line.  This method behaves as\n though it invokes \u003ccode\u003e{@link #print(String)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"println","comment":"Prints an Object and then terminate the line.  This method calls\n at first String.valueOf(x) to get the printed object\u0027s string value,\n then behaves as\n though it invokes \u003ccode\u003e{@link #print(String)}\u003c/code\u003e and then\n \u003ccode\u003e{@link #println()}\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"printf","comment":"A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.printf(format,\n args)\u003c/tt\u003e behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.format(format, args) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"printf","comment":"A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.printf(l, format,\n args)\u003c/tt\u003e behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.format(l, format, args) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale, java.lang.String, java.lang.Object...)","flatSignature":"(Locale, String, Object...)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"format","comment":"Writes a formatted string to this output stream using the specified\n format string and arguments.\n\n \u003cp\u003e The locale always used is the one returned by {@link\n java.util.Locale#getDefault() Locale.getDefault()}, regardless of any\n previous invocations of other formatting methods on this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"format","comment":"Writes a formatted string to this output stream using the specified\n format string and arguments.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale, java.lang.String, java.lang.Object...)","flatSignature":"(Locale, String, Object...)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"append","comment":"Appends the specified character sequence to this output stream.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.append(csq)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.print(csq.toString()) \u003c/pre\u003e\n\n \u003cp\u003e Depending on the specification of \u003ctt\u003etoString\u003c/tt\u003e for the\n character sequence \u003ctt\u003ecsq\u003c/tt\u003e, the entire sequence may not be\n appended.  For instance, invoking then \u003ctt\u003etoString\u003c/tt\u003e method of a\n character buffer will return a subsequence whose content depends upon\n the buffer\u0027s position and limit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"csq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"append","comment":"Appends a subsequence of the specified character sequence to this output\n stream.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.append(csq, start,\n end)\u003c/tt\u003e when \u003ctt\u003ecsq\u003c/tt\u003e is not \u003ctt\u003enull\u003c/tt\u003e, behaves in\n exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.print(csq.subSequence(start, end).toString()) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int, int)","flatSignature":"(CharSequence, int, int)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"csq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"end","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"append","comment":"Appends the specified character to this output stream.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.append(c)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.print(c) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}