{"name":"BufferedInputStream","comment":"A \u003ccode\u003eBufferedInputStream\u003c/code\u003e adds\n functionality to another input stream-namely,\n the ability to buffer the input and to\n support the \u003ccode\u003emark\u003c/code\u003e and \u003ccode\u003ereset\u003c/code\u003e\n methods. When  the \u003ccode\u003eBufferedInputStream\u003c/code\u003e\n is created, an internal buffer array is\n created. As bytes  from the stream are read\n or skipped, the internal buffer is refilled\n as necessary  from the contained input stream,\n many bytes at a time. The \u003ccode\u003emark\u003c/code\u003e\n operation  remembers a point in the input\n stream and the \u003ccode\u003ereset\u003c/code\u003e operation\n causes all the  bytes read since the most\n recent \u003ccode\u003emark\u003c/code\u003e operation to be\n reread before new bytes are  taken from\n the contained input stream.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"BufferedInputStream","qualifiedName":"java.io.BufferedInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.FilterInputStream","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"BufferedInputStream","comment":"Creates a \u003ccode\u003eBufferedInputStream\u003c/code\u003e\n and saves its  argument, the input stream\n \u003ccode\u003ein\u003c/code\u003e, for later use. An internal\n buffer array is created and  stored in \u003ccode\u003ebuf\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BufferedInputStream","comment":"Creates a \u003ccode\u003eBufferedInputStream\u003c/code\u003e\n with the specified buffer size,\n and saves its  argument, the input stream\n \u003ccode\u003ein\u003c/code\u003e, for later use.  An internal\n buffer array of length  \u003ccode\u003esize\u003c/code\u003e\n is created and stored in \u003ccode\u003ebuf\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream, int)","flatSignature":"(InputStream, int)","parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"read","comment":"See\n the general contract of the \u003ccode\u003eread\u003c/code\u003e\n method of \u003ccode\u003eInputStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads bytes from this byte-input stream into the specified byte array,\n starting at the given offset.\n\n \u003cp\u003e This method implements the general contract of the corresponding\n \u003ccode\u003e{@link InputStream#read(byte[], int, int) read}\u003c/code\u003e method of\n the \u003ccode\u003e{@link InputStream}\u003c/code\u003e class.  As an additional\n convenience, it attempts to read as many bytes as possible by repeatedly\n invoking the \u003ccode\u003eread\u003c/code\u003e method of the underlying stream.  This\n iterated \u003ccode\u003eread\u003c/code\u003e continues until one of the following\n conditions becomes true: \u003cul\u003e\n\n   \u003cli\u003e The specified number of bytes have been read,\n\n   \u003cli\u003e The \u003ccode\u003eread\u003c/code\u003e method of the underlying stream returns\n   \u003ccode\u003e-1\u003c/code\u003e, indicating end-of-file, or\n\n   \u003cli\u003e The \u003ccode\u003eavailable\u003c/code\u003e method of the underlying stream\n   returns zero, indicating that further input requests would block.\n\n \u003c/ul\u003e If the first \u003ccode\u003eread\u003c/code\u003e on the underlying stream returns\n \u003ccode\u003e-1\u003c/code\u003e to indicate end-of-file then this method returns\n \u003ccode\u003e-1\u003c/code\u003e.  Otherwise this method returns the number of bytes\n actually read.\n\n \u003cp\u003e Subclasses of this class are encouraged, but not required, to\n attempt to read as many bytes as possible in the same fashion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skip","comment":"See the general contract of the \u003ccode\u003eskip\u003c/code\u003e\n method of \u003ccode\u003eInputStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"available","comment":"Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n \u003cp\u003e\n This method returns the sum of the number of bytes remaining to be read in\n the buffer (\u003ccode\u003ecount\u0026nbsp;- pos\u003c/code\u003e) and the result of calling the\n {@link java.io.FilterInputStream#in in}.available().","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"mark","comment":"See the general contract of the \u003ccode\u003emark\u003c/code\u003e\n method of \u003ccode\u003eInputStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"readlimit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"See the general contract of the \u003ccode\u003ereset\u003c/code\u003e\n method of \u003ccode\u003eInputStream\u003c/code\u003e.\n \u003cp\u003e\n If \u003ccode\u003emarkpos\u003c/code\u003e is \u003ccode\u003e-1\u003c/code\u003e\n (no mark has been set or the mark has been\n invalidated), an \u003ccode\u003eIOException\u003c/code\u003e\n is thrown. Otherwise, \u003ccode\u003epos\u003c/code\u003e is\n set equal to \u003ccode\u003emarkpos\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"markSupported","comment":"Tests if this input stream supports the \u003ccode\u003emark\u003c/code\u003e\n and \u003ccode\u003ereset\u003c/code\u003e methods. The \u003ccode\u003emarkSupported\u003c/code\u003e\n method of \u003ccode\u003eBufferedInputStream\u003c/code\u003e returns\n \u003ccode\u003etrue\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this input stream and releases any system resources\n associated with the stream.\n Once the stream has been closed, further read(), available(), reset(),\n or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}