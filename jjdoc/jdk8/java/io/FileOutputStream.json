{"name":"FileOutputStream","comment":"A file output stream is an output stream for writing data to a\n \u003ccode\u003eFile\u003c/code\u003e or to a \u003ccode\u003eFileDescriptor\u003c/code\u003e. Whether or not\n a file is available or may be created depends upon the underlying\n platform.  Some platforms, in particular, allow a file to be opened\n for writing by only one \u003ctt\u003eFileOutputStream\u003c/tt\u003e (or other\n file-writing object) at a time.  In such situations the constructors in\n this class will fail if the file involved is already open.\n\n \u003cp\u003e\u003ccode\u003eFileOutputStream\u003c/code\u003e is meant for writing streams of raw bytes\n such as image data. For writing streams of characters, consider using\n \u003ccode\u003eFileWriter\u003c/code\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileOutputStream","qualifiedName":"java.io.FileOutputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.OutputStream","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"FileOutputStream","comment":"Creates a file output stream to write to the file with the\n specified name. A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object is\n created to represent this file connection.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e\n method is called with \u003ccode\u003ename\u003c/code\u003e as its argument.\n \u003cp\u003e\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileOutputStream","comment":"Creates a file output stream to write to the file with the specified\n name.  If the second argument is \u003ccode\u003etrue\u003c/code\u003e, then\n bytes will be written to the end of the file rather than the beginning.\n A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object is created to represent this\n file connection.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e\n method is called with \u003ccode\u003ename\u003c/code\u003e as its argument.\n \u003cp\u003e\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"append","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileOutputStream","comment":"Creates a file output stream to write to the file represented by\n the specified \u003ccode\u003eFile\u003c/code\u003e object. A new\n \u003ccode\u003eFileDescriptor\u003c/code\u003e object is created to represent this\n file connection.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e\n method is called with the path represented by the \u003ccode\u003efile\u003c/code\u003e\n argument as its argument.\n \u003cp\u003e\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileOutputStream","comment":"Creates a file output stream to write to the file represented by\n the specified \u003ccode\u003eFile\u003c/code\u003e object. If the second argument is\n \u003ccode\u003etrue\u003c/code\u003e, then bytes will be written to the end of the file\n rather than the beginning. A new \u003ccode\u003eFileDescriptor\u003c/code\u003e object is\n created to represent this file connection.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e\n method is called with the path represented by the \u003ccode\u003efile\u003c/code\u003e\n argument as its argument.\n \u003cp\u003e\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a \u003ccode\u003eFileNotFoundException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File, boolean)","flatSignature":"(File, boolean)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}},{"name":"append","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileOutputStream","comment":"Creates a file output stream to write to the specified file\n descriptor, which represents an existing connection to an actual\n file in the file system.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckWrite\u003c/code\u003e\n method is called with the file descriptor \u003ccode\u003efdObj\u003c/code\u003e\n argument as its argument.\n \u003cp\u003e\n If \u003ccode\u003efdObj\u003c/code\u003e is null then a \u003ccode\u003eNullPointerException\u003c/code\u003e\n is thrown.\n \u003cp\u003e\n This constructor does not throw an exception if \u003ccode\u003efdObj\u003c/code\u003e\n is {@link java.io.FileDescriptor#valid() invalid}.\n However, if the methods are invoked on the resulting stream to attempt\n I/O on the stream, an \u003ccode\u003eIOException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.FileDescriptor)","flatSignature":"(FileDescriptor)","parameters":[{"name":"fdObj","type":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"write","comment":"Writes the specified byte to this file output stream. Implements\n the \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eOutputStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes \u003ccode\u003eb.length\u003c/code\u003e bytes from the specified byte array\n to this file output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes \u003ccode\u003elen\u003c/code\u003e bytes from the specified byte array\n starting at offset \u003ccode\u003eoff\u003c/code\u003e to this file output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"close","comment":"Closes this file output stream and releases any system resources\n associated with this stream. This file output stream may no longer\n be used for writing bytes.\n\n \u003cp\u003e If this stream has an associated channel then the channel is closed\n as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFD","comment":"Returns the file descriptor associated with this stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChannel","comment":"Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n object associated with this file output stream.\n\n \u003cp\u003e The initial {@link java.nio.channels.FileChannel#position()\n position} of the returned channel will be equal to the\n number of bytes written to the file so far unless this stream is in\n append mode, in which case it will be equal to the size of the file.\n Writing bytes to this stream will increment the channel\u0027s position\n accordingly.  Changing the channel\u0027s position, either explicitly or by\n writing, will change this stream\u0027s file position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}