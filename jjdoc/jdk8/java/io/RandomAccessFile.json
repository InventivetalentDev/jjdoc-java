{"name":"RandomAccessFile","comment":"Instances of this class support both reading and writing to a\n random access file. A random access file behaves like a large\n array of bytes stored in the file system. There is a kind of cursor,\n or index into the implied array, called the \u003cem\u003efile pointer\u003c/em\u003e;\n input operations read bytes starting at the file pointer and advance\n the file pointer past the bytes read. If the random access file is\n created in read/write mode, then output operations are also available;\n output operations write bytes starting at the file pointer and advance\n the file pointer past the bytes written. Output operations that write\n past the current end of the implied array cause the array to be\n extended. The file pointer can be read by the\n {@code getFilePointer} method and set by the {@code seek}\n method.\n \u003cp\u003e\n It is generally true of all the reading routines in this class that\n if end-of-file is reached before the desired number of bytes has been\n read, an {@code EOFException} (which is a kind of\n {@code IOException}) is thrown. If any byte cannot be read for\n any reason other than end-of-file, an {@code IOException} other\n than {@code EOFException} is thrown. In particular, an\n {@code IOException} may be thrown if the stream has been closed.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"RandomAccessFile","qualifiedName":"java.io.RandomAccessFile","dimension":"","elementType":{},"package":"java.io","superclass":"java.lang.Object","interfaces":["java.io.DataOutput","java.io.DataInput","java.io.Closeable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"RandomAccessFile","comment":"Creates a random access file stream to read from, and optionally\n to write to, a file with the specified name. A new\n {@link FileDescriptor} object is created to represent the\n connection to the file.\n\n \u003cp\u003e The \u003ctt\u003emode\u003c/tt\u003e argument specifies the access mode with which the\n file is to be opened.  The permitted values and their meanings are as\n specified for the \u003ca\n href\u003d\"#mode\"\u003e\u003ctt\u003eRandomAccessFile(File,String)\u003c/tt\u003e\u003c/a\u003e constructor.\n\n \u003cp\u003e\n If there is a security manager, its {@code checkRead} method\n is called with the {@code name} argument\n as its argument to see if read access to the file is allowed.\n If the mode allows writing, the security manager\u0027s\n {@code checkWrite} method\n is also called with the {@code name} argument\n as its argument to see if write access to the file is allowed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"mode","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"RandomAccessFile","comment":"Creates a random access file stream to read from, and optionally to\n write to, the file specified by the {@link File} argument.  A new {@link\n FileDescriptor} object is created to represent this file connection.\n\n \u003cp\u003eThe \u003ca name\u003d\"mode\"\u003e\u003ctt\u003emode\u003c/tt\u003e\u003c/a\u003e argument specifies the access mode\n in which the file is to be opened.  The permitted values and their\n meanings are:\n\n \u003ctable summary\u003d\"Access mode permitted values and meanings\"\u003e\n \u003ctr\u003e\u003cth align\u003d\"left\"\u003eValue\u003c/th\u003e\u003cth align\u003d\"left\"\u003eMeaning\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"r\"\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading only.  Invoking any of the \u003ctt\u003ewrite\u003c/tt\u003e\n     methods of the resulting object will cause an {@link\n     java.io.IOException} to be thrown. \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"rw\"\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading and writing.  If the file does not already\n     exist then an attempt will be made to create it. \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"rws\"\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading and writing, as with \u003ctt\u003e\"rw\"\u003c/tt\u003e, and also\n     require that every update to the file\u0027s content or metadata be\n     written synchronously to the underlying storage device.  \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\"rwd\"\u0026nbsp;\u0026nbsp;\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading and writing, as with \u003ctt\u003e\"rw\"\u003c/tt\u003e, and also\n     require that every update to the file\u0027s content be written\n     synchronously to the underlying storage device. \u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n\n The \u003ctt\u003e\"rws\"\u003c/tt\u003e and \u003ctt\u003e\"rwd\"\u003c/tt\u003e modes work much like the {@link\n java.nio.channels.FileChannel#force(boolean) force(boolean)} method of\n the {@link java.nio.channels.FileChannel} class, passing arguments of\n \u003ctt\u003etrue\u003c/tt\u003e and \u003ctt\u003efalse\u003c/tt\u003e, respectively, except that they always\n apply to every I/O operation and are therefore often more efficient.  If\n the file resides on a local storage device then when an invocation of a\n method of this class returns it is guaranteed that all changes made to\n the file by that invocation will have been written to that device.  This\n is useful for ensuring that critical information is not lost in the\n event of a system crash.  If the file does not reside on a local device\n then no such guarantee is made.\n\n \u003cp\u003eThe \u003ctt\u003e\"rwd\"\u003c/tt\u003e mode can be used to reduce the number of I/O\n operations performed.  Using \u003ctt\u003e\"rwd\"\u003c/tt\u003e only requires updates to the\n file\u0027s content to be written to storage; using \u003ctt\u003e\"rws\"\u003c/tt\u003e requires\n updates to both the file\u0027s content and its metadata to be written, which\n generally requires at least one more low-level I/O operation.\n\n \u003cp\u003eIf there is a security manager, its {@code checkRead} method is\n called with the pathname of the {@code file} argument as its\n argument to see if read access to the file is allowed.  If the mode\n allows writing, the security manager\u0027s {@code checkWrite} method is\n also called with the path argument to see if write access to the file is\n allowed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File, java.lang.String)","flatSignature":"(File, String)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}},{"name":"mode","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getFD","comment":"Returns the opaque file descriptor object associated with this\n stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getChannel","comment":"Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n object associated with this file.\n\n \u003cp\u003e The {@link java.nio.channels.FileChannel#position()\n position} of the returned channel will always be equal to\n this object\u0027s file-pointer offset as returned by the {@link\n #getFilePointer getFilePointer} method.  Changing this object\u0027s\n file-pointer offset, whether explicitly or by reading or writing bytes,\n will change the position of the channel, and vice versa.  Changing the\n file\u0027s length via this object will change the length seen via the file\n channel, and vice versa.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"FileChannel","qualifiedName":"java.nio.channels.FileChannel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads a byte of data from this file. The byte is returned as an\n integer in the range 0 to 255 ({@code 0x00-0x0ff}). This\n method blocks if no input is yet available.\n \u003cp\u003e\n Although {@code RandomAccessFile} is not a subclass of\n {@code InputStream}, this method behaves in exactly the same\n way as the {@link InputStream#read()} method of\n {@code InputStream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads up to {@code len} bytes of data from this file into an\n array of bytes. This method blocks until at least one byte of input\n is available.\n \u003cp\u003e\n Although {@code RandomAccessFile} is not a subclass of\n {@code InputStream}, this method behaves in exactly the\n same way as the {@link InputStream#read(byte[], int, int)} method of\n {@code InputStream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads up to {@code b.length} bytes of data from this file\n into an array of bytes. This method blocks until at least one byte\n of input is available.\n \u003cp\u003e\n Although {@code RandomAccessFile} is not a subclass of\n {@code InputStream}, this method behaves in exactly the\n same way as the {@link InputStream#read(byte[])} method of\n {@code InputStream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readFully","comment":"Reads {@code b.length} bytes from this file into the byte\n array, starting at the current file pointer. This method reads\n repeatedly from the file until the requested number of bytes are\n read. This method blocks until the requested number of bytes are\n read, the end of the stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readFully","comment":"Reads exactly {@code len} bytes from this file into the byte\n array, starting at the current file pointer. This method reads\n repeatedly from the file until the requested number of bytes are\n read. This method blocks until the requested number of bytes are\n read, the end of the stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skipBytes","comment":"Attempts to skip over {@code n} bytes of input discarding the\n skipped bytes.\n \u003cp\u003e\n\n This method may skip over some smaller number of bytes, possibly zero.\n This may result from any of a number of conditions; reaching end of\n file before {@code n} bytes have been skipped is only one\n possibility. This method never throws an {@code EOFException}.\n The actual number of bytes skipped is returned.  If {@code n}\n is negative, no bytes are skipped.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes the specified byte to this file. The write starts at\n the current file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes {@code b.length} bytes from the specified byte array\n to this file, starting at the current file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes {@code len} bytes from the specified byte array\n starting at offset {@code off} to this file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFilePointer","comment":"Returns the current offset in this file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"seek","comment":"Sets the file-pointer offset, measured from the beginning of this\n file, at which the next read or write occurs.  The offset may be\n set beyond the end of the file. Setting the offset beyond the end\n of the file does not change the file length.  The file length will\n change only by writing after the offset has been set beyond the end\n of the file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"pos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"length","comment":"Returns the length of this file.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setLength","comment":"Sets the length of this file.\n\n \u003cp\u003e If the present length of the file as returned by the\n {@code length} method is greater than the {@code newLength}\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the {@code getFilePointer} method is greater\n than {@code newLength} then after this method returns the offset\n will be equal to {@code newLength}.\n\n \u003cp\u003e If the present length of the file as returned by the\n {@code length} method is smaller than the {@code newLength}\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newLength","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"close","comment":"Closes this random access file stream and releases any system\n resources associated with the stream. A closed random access\n file cannot perform input or output operations and cannot be\n reopened.\n\n \u003cp\u003e If this file has an associated channel then the channel is closed\n as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readBoolean","comment":"Reads a {@code boolean} from this file. This method reads a\n single byte from the file, starting at the current file pointer.\n A value of {@code 0} represents\n {@code false}. Any other value represents {@code true}.\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readByte","comment":"Reads a signed eight-bit value from this file. This method reads a\n byte from the file, starting from the current file pointer.\n If the byte read is {@code b}, where\n \u003ccode\u003e0\u0026nbsp;\u0026lt;\u003d\u0026nbsp;b\u0026nbsp;\u0026lt;\u003d\u0026nbsp;255\u003c/code\u003e,\n then the result is:\n \u003cblockquote\u003e\u003cpre\u003e\n     (byte)(b)\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnsignedByte","comment":"Reads an unsigned eight-bit number from this file. This method reads\n a byte from this file, starting at the current file pointer,\n and returns that byte.\n \u003cp\u003e\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readShort","comment":"Reads a signed 16-bit number from this file. The method reads two\n bytes from this file, starting at the current file pointer.\n If the two bytes read, in order, are\n {@code b1} and {@code b2}, where each of the two values is\n between {@code 0} and {@code 255}, inclusive, then the\n result is equal to:\n \u003cblockquote\u003e\u003cpre\u003e\n     (short)((b1 \u0026lt;\u0026lt; 8) | b2)\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This method blocks until the two bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnsignedShort","comment":"Reads an unsigned 16-bit number from this file. This method reads\n two bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are\n {@code b1} and {@code b2}, where\n \u003ccode\u003e0\u0026nbsp;\u0026lt;\u003d\u0026nbsp;b1, b2\u0026nbsp;\u0026lt;\u003d\u0026nbsp;255\u003c/code\u003e,\n then the result is equal to:\n \u003cblockquote\u003e\u003cpre\u003e\n     (b1 \u0026lt;\u0026lt; 8) | b2\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This method blocks until the two bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readChar","comment":"Reads a character from this file. This method reads two\n bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are\n {@code b1} and {@code b2}, where\n \u003ccode\u003e0\u0026nbsp;\u0026lt;\u003d\u0026nbsp;b1,\u0026nbsp;b2\u0026nbsp;\u0026lt;\u003d\u0026nbsp;255\u003c/code\u003e,\n then the result is equal to:\n \u003cblockquote\u003e\u003cpre\u003e\n     (char)((b1 \u0026lt;\u0026lt; 8) | b2)\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This method blocks until the two bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readInt","comment":"Reads a signed 32-bit integer from this file. This method reads 4\n bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are {@code b1},\n {@code b2}, {@code b3}, and {@code b4}, where\n \u003ccode\u003e0\u0026nbsp;\u0026lt;\u003d\u0026nbsp;b1, b2, b3, b4\u0026nbsp;\u0026lt;\u003d\u0026nbsp;255\u003c/code\u003e,\n then the result is equal to:\n \u003cblockquote\u003e\u003cpre\u003e\n     (b1 \u0026lt;\u0026lt; 24) | (b2 \u0026lt;\u0026lt; 16) + (b3 \u0026lt;\u0026lt; 8) + b4\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This method blocks until the four bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readLong","comment":"Reads a signed 64-bit integer from this file. This method reads eight\n bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are\n {@code b1}, {@code b2}, {@code b3},\n {@code b4}, {@code b5}, {@code b6},\n {@code b7}, and {@code b8,} where:\n \u003cblockquote\u003e\u003cpre\u003e\n     0 \u0026lt;\u003d b1, b2, b3, b4, b5, b6, b7, b8 \u0026lt;\u003d255,\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n then the result is equal to:\n \u003cblockquote\u003e\u003cpre\u003e\n     ((long)b1 \u0026lt;\u0026lt; 56) + ((long)b2 \u0026lt;\u0026lt; 48)\n     + ((long)b3 \u0026lt;\u0026lt; 40) + ((long)b4 \u0026lt;\u0026lt; 32)\n     + ((long)b5 \u0026lt;\u0026lt; 24) + ((long)b6 \u0026lt;\u0026lt; 16)\n     + ((long)b7 \u0026lt;\u0026lt; 8) + b8\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n This method blocks until the eight bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readFloat","comment":"Reads a {@code float} from this file. This method reads an\n {@code int} value, starting at the current file pointer,\n as if by the {@code readInt} method\n and then converts that {@code int} to a {@code float}\n using the {@code intBitsToFloat} method in class\n {@code Float}.\n \u003cp\u003e\n This method blocks until the four bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readDouble","comment":"Reads a {@code double} from this file. This method reads a\n {@code long} value, starting at the current file pointer,\n as if by the {@code readLong} method\n and then converts that {@code long} to a {@code double}\n using the {@code longBitsToDouble} method in\n class {@code Double}.\n \u003cp\u003e\n This method blocks until the eight bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readLine","comment":"Reads the next line of text from this file.  This method successively\n reads bytes from the file, starting at the current file pointer,\n until it reaches a line terminator or the end\n of the file.  Each byte is converted into a character by taking the\n byte\u0027s value for the lower eight bits of the character and setting the\n high eight bits of the character to zero.  This method does not,\n therefore, support the full Unicode character set.\n\n \u003cp\u003e A line of text is terminated by a carriage-return character\n ({@code \u0027\\r\u0027}), a newline character ({@code \u0027\\n\u0027}), a\n carriage-return character immediately followed by a newline character,\n or the end of the file.  Line-terminating characters are discarded and\n are not included as part of the string returned.\n\n \u003cp\u003e This method blocks until a newline character is read, a carriage\n return and the byte following it are read (to see if it is a newline),\n the end of the file is reached, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUTF","comment":"Reads in a string from this file. The string has been encoded\n using a\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e\n format.\n \u003cp\u003e\n The first two bytes are read, starting from the current file\n pointer, as if by\n {@code readUnsignedShort}. This value gives the number of\n following bytes that are in the encoded string, not\n the length of the resulting string. The following bytes are then\n interpreted as bytes encoding characters in the modified UTF-8 format\n and are converted into characters.\n \u003cp\u003e\n This method blocks until all the bytes are read, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"writeBoolean","comment":"Writes a {@code boolean} to the file as a one-byte value. The\n value {@code true} is written out as the value\n {@code (byte)1}; the value {@code false} is written out\n as the value {@code (byte)0}. The write starts at\n the current position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeByte","comment":"Writes a {@code byte} to the file as a one-byte value. The\n write starts at the current position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeShort","comment":"Writes a {@code short} to the file as two bytes, high byte first.\n The write starts at the current position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeChar","comment":"Writes a {@code char} to the file as a two-byte value, high\n byte first. The write starts at the current position of the\n file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeInt","comment":"Writes an {@code int} to the file as four bytes, high byte first.\n The write starts at the current position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeLong","comment":"Writes a {@code long} to the file as eight bytes, high byte first.\n The write starts at the current position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeFloat","comment":"Converts the float argument to an {@code int} using the\n {@code floatToIntBits} method in class {@code Float},\n and then writes that {@code int} value to the file as a\n four-byte quantity, high byte first. The write starts at the\n current position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeDouble","comment":"Converts the double argument to a {@code long} using the\n {@code doubleToLongBits} method in class {@code Double},\n and then writes that {@code long} value to the file as an\n eight-byte quantity, high byte first. The write starts at the current\n position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeBytes","comment":"Writes the string to the file as a sequence of bytes. Each\n character in the string is written out, in sequence, by discarding\n its high eight bits. The write starts at the current position of\n the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeChars","comment":"Writes a string to the file as a sequence of characters. Each\n character is written to the data output stream as if by the\n {@code writeChar} method. The write starts at the current\n position of the file pointer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeUTF","comment":"Writes a string to the file using\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e\n encoding in a machine-independent manner.\n \u003cp\u003e\n First, two bytes are written to the file, starting at the\n current file pointer, as if by the\n {@code writeShort} method giving the number of bytes to\n follow. This value is the number of bytes actually written out,\n not the length of the string. Following the length, each character\n of the string is output, in sequence, using the modified UTF-8 encoding\n for each character.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}