{"name":"Console","comment":"Methods to access the character-based console device, if any, associated\n with the current Java virtual machine.\n\n \u003cp\u003e Whether a virtual machine has a console is dependent upon the\n underlying platform and also upon the manner in which the virtual\n machine is invoked.  If the virtual machine is started from an\n interactive command line without redirecting the standard input and\n output streams then its console will exist and will typically be\n connected to the keyboard and display from which the virtual machine\n was launched.  If the virtual machine is started automatically, for\n example by a background job scheduler, then it will typically not\n have a console.\n \u003cp\u003e\n If this virtual machine has a console then it is represented by a\n unique instance of this class which can be obtained by invoking the\n {@link java.lang.System#console()} method.  If no console device is\n available then an invocation of that method will return \u003ctt\u003enull\u003c/tt\u003e.\n \u003cp\u003e\n Read and write operations are synchronized to guarantee the atomic\n completion of critical operations; therefore invoking methods\n {@link #readLine()}, {@link #readPassword()}, {@link #format format()},\n {@link #printf printf()} as well as the read, format and write operations\n on the objects returned by {@link #reader()} and {@link #writer()} may\n block in multithreaded scenarios.\n \u003cp\u003e\n Invoking \u003ctt\u003eclose()\u003c/tt\u003e on the objects returned by the {@link #reader()}\n and the {@link #writer()} will not close the underlying stream of those\n objects.\n \u003cp\u003e\n The console-read methods return \u003ctt\u003enull\u003c/tt\u003e when the end of the\n console input stream is reached, for example by typing control-D on\n Unix or control-Z on Windows.  Subsequent read operations will succeed\n if additional characters are later entered on the console\u0027s input\n device.\n \u003cp\u003e\n Unless otherwise specified, passing a \u003ctt\u003enull\u003c/tt\u003e argument to any method\n in this class will cause a {@link NullPointerException} to be thrown.\n \u003cp\u003e\n \u003cb\u003eSecurity note:\u003c/b\u003e\n If an application needs to read a password or other secure data, it should\n use {@link #readPassword()} or {@link #readPassword(String, Object...)} and\n manually zero the returned character array after processing to minimize the\n lifetime of sensitive data in memory.\n\n \u003cblockquote\u003e\u003cpre\u003e{@code\n Console cons;\n char[] passwd;\n if ((cons \u003d System.console()) !\u003d null \u0026\u0026\n     (passwd \u003d cons.readPassword(\"[%s]\", \"Password:\")) !\u003d null) {\n     ...\n     java.util.Arrays.fill(passwd, \u0027 \u0027);\n }\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Console","qualifiedName":"java.io.Console","dimension":"","elementType":{},"package":"java.io","superclass":"java.lang.Object","interfaces":["java.io.Flushable"],"isAbstract":false,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"writer","comment":"Retrieves the unique {@link java.io.PrintWriter PrintWriter} object\n associated with this console.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PrintWriter","qualifiedName":"java.io.PrintWriter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reader","comment":"Retrieves the unique {@link java.io.Reader Reader} object associated\n with this console.\n \u003cp\u003e\n This method is intended to be used by sophisticated applications, for\n example, a {@link java.util.Scanner} object which utilizes the rich\n parsing/scanning functionality provided by the \u003ctt\u003eScanner\u003c/tt\u003e:\n \u003cblockquote\u003e\u003cpre\u003e\n Console con \u003d System.console();\n if (con !\u003d null) {\n     Scanner sc \u003d new Scanner(con.reader());\n     ...\n }\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n For simple applications requiring only line-oriented reading, use\n \u003ctt\u003e{@link #readLine}\u003c/tt\u003e.\n \u003cp\u003e\n The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n on the returned object will not read in characters beyond the line\n bound for each invocation, even if the destination buffer has space for\n more characters. The {@code Reader}\u0027s {@code read} methods may block if a\n line bound has not been entered or reached on the console\u0027s input device.\n A line bound is considered to be any one of a line feed (\u003ctt\u003e\u0027\\n\u0027\u003c/tt\u003e),\n a carriage return (\u003ctt\u003e\u0027\\r\u0027\u003c/tt\u003e), a carriage return followed immediately\n by a linefeed, or an end of stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"format","comment":"Writes a formatted string to this console\u0027s output stream using\n the specified format string and arguments.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"Console","qualifiedName":"java.io.Console","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fmt","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"printf","comment":"A convenience method to write a formatted string to this console\u0027s\n output stream using the specified format string and arguments.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003econ.printf(format,\n args)\u003c/tt\u003e behaves in exactly the same way as the invocation of\n \u003cpre\u003econ.format(format, args)\u003c/pre\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"Console","qualifiedName":"java.io.Console","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readLine","comment":"Provides a formatted prompt, then reads a single line of text from the\n console.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fmt","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readLine","comment":"Reads a single line of text from the console.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readPassword","comment":"Provides a formatted prompt, then reads a password or passphrase from\n the console with echoing disabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fmt","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readPassword","comment":"Reads a password or passphrase from the console with echoing disabled","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flush","comment":"Flushes the console and forces any buffered output to be written\n immediately .","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}