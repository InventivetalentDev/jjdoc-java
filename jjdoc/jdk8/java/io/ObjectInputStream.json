{"name":"ObjectInputStream","comment":"An ObjectInputStream deserializes primitive data and objects previously\n written using an ObjectOutputStream.\n\n \u003cp\u003eObjectOutputStream and ObjectInputStream can provide an application with\n persistent storage for graphs of objects when used with a FileOutputStream\n and FileInputStream respectively.  ObjectInputStream is used to recover\n those objects previously serialized. Other uses include passing objects\n between hosts using a socket stream or for marshaling and unmarshaling\n arguments and parameters in a remote communication system.\n\n \u003cp\u003eObjectInputStream ensures that the types of all objects in the graph\n created from the stream match the classes present in the Java Virtual\n Machine.  Classes are loaded as required using the standard mechanisms.\n\n \u003cp\u003eOnly objects that support the java.io.Serializable or\n java.io.Externalizable interface can be read from streams.\n\n \u003cp\u003eThe method \u003ccode\u003ereadObject\u003c/code\u003e is used to read an object from the\n stream.  Java\u0027s safe casting should be used to get the desired type.  In\n Java, strings and arrays are objects and are treated as objects during\n serialization. When read they need to be cast to the expected type.\n\n \u003cp\u003ePrimitive data types can be read from the stream using the appropriate\n method on DataInput.\n\n \u003cp\u003eThe default deserialization mechanism for objects restores the contents\n of each field to the value and type it had when it was written.  Fields\n declared as transient or static are ignored by the deserialization process.\n References to other objects cause those objects to be read from the stream\n as necessary.  Graphs of objects are restored correctly using a reference\n sharing mechanism.  New objects are always allocated when deserializing,\n which prevents existing objects from being overwritten.\n\n \u003cp\u003eReading an object is analogous to running the constructors of a new\n object.  Memory is allocated for the object and initialized to zero (NULL).\n No-arg constructors are invoked for the non-serializable classes and then\n the fields of the serializable classes are restored from the stream starting\n with the serializable class closest to java.lang.object and finishing with\n the object\u0027s most specific class.\n\n \u003cp\u003eFor example to read from a stream as written by the example in\n ObjectOutputStream:\n \u003cbr\u003e\n \u003cpre\u003e\n      FileInputStream fis \u003d new FileInputStream(\"t.tmp\");\n      ObjectInputStream ois \u003d new ObjectInputStream(fis);\n\n      int i \u003d ois.readInt();\n      String today \u003d (String) ois.readObject();\n      Date date \u003d (Date) ois.readObject();\n\n      ois.close();\n \u003c/pre\u003e\n\n \u003cp\u003eClasses control how they are serialized by implementing either the\n java.io.Serializable or java.io.Externalizable interfaces.\n\n \u003cp\u003eImplementing the Serializable interface allows object serialization to\n save and restore the entire state of the object and it allows classes to\n evolve between the time the stream is written and the time it is read.  It\n automatically traverses references between objects, saving and restoring\n entire graphs.\n\n \u003cp\u003eSerializable classes that require special handling during the\n serialization and deserialization process should implement the following\n methods:\n\n \u003cpre\u003e\n private void writeObject(java.io.ObjectOutputStream stream)\n     throws IOException;\n private void readObject(java.io.ObjectInputStream stream)\n     throws IOException, ClassNotFoundException;\n private void readObjectNoData()\n     throws ObjectStreamException;\n \u003c/pre\u003e\n\n \u003cp\u003eThe readObject method is responsible for reading and restoring the state\n of the object for its particular class using data written to the stream by\n the corresponding writeObject method.  The method does not need to concern\n itself with the state belonging to its superclasses or subclasses.  State is\n restored by reading data from the ObjectInputStream for the individual\n fields and making assignments to the appropriate fields of the object.\n Reading primitive data types is supported by DataInput.\n\n \u003cp\u003eAny attempt to read object data which exceeds the boundaries of the\n custom data written by the corresponding writeObject method will cause an\n OptionalDataException to be thrown with an eof field value of true.\n Non-object reads which exceed the end of the allotted data will reflect the\n end of data in the same way that they would indicate the end of the stream:\n bytewise reads will return -1 as the byte read or number of bytes read, and\n primitive reads will throw EOFExceptions.  If there is no corresponding\n writeObject method, then the end of default serialized data marks the end of\n the allotted data.\n\n \u003cp\u003ePrimitive and object read calls issued from within a readExternal method\n behave in the same manner--if the stream is already positioned at the end of\n data written by the corresponding writeExternal method, object reads will\n throw OptionalDataExceptions with eof set to true, bytewise reads will\n return -1, and primitive reads will throw EOFExceptions.  Note that this\n behavior does not hold for streams written with the old\n \u003ccode\u003eObjectStreamConstants.PROTOCOL_VERSION_1\u003c/code\u003e protocol, in which the\n end of data written by writeExternal methods is not demarcated, and hence\n cannot be detected.\n\n \u003cp\u003eThe readObjectNoData method is responsible for initializing the state of\n the object for its particular class in the event that the serialization\n stream does not list the given class as a superclass of the object being\n deserialized.  This may occur in cases where the receiving party uses a\n different version of the deserialized instance\u0027s class than the sending\n party, and the receiver\u0027s version extends classes that are not extended by\n the sender\u0027s version.  This may also occur if the serialization stream has\n been tampered; hence, readObjectNoData is useful for initializing\n deserialized objects properly despite a \"hostile\" or incomplete source\n stream.\n\n \u003cp\u003eSerialization does not read or assign values to the fields of any object\n that does not implement the java.io.Serializable interface.  Subclasses of\n Objects that are not serializable can be serializable. In this case the\n non-serializable class must have a no-arg constructor to allow its fields to\n be initialized.  In this case it is the responsibility of the subclass to\n save and restore the state of the non-serializable class. It is frequently\n the case that the fields of that class are accessible (public, package, or\n protected) or that there are get and set methods that can be used to restore\n the state.\n\n \u003cp\u003eAny exception that occurs while deserializing an object will be caught by\n the ObjectInputStream and abort the reading process.\n\n \u003cp\u003eImplementing the Externalizable interface allows the object to assume\n complete control over the contents and format of the object\u0027s serialized\n form.  The methods of the Externalizable interface, writeExternal and\n readExternal, are called to save and restore the objects state.  When\n implemented by a class they can write and read their own state using all of\n the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n the objects to handle any versioning that occurs.\n\n \u003cp\u003eEnum constants are deserialized differently than ordinary serializable or\n externalizable objects.  The serialized form of an enum constant consists\n solely of its name; field values of the constant are not transmitted.  To\n deserialize an enum constant, ObjectInputStream reads the constant name from\n the stream; the deserialized constant is then obtained by calling the static\n method \u003ccode\u003eEnum.valueOf(Class, String)\u003c/code\u003e with the enum constant\u0027s\n base type and the received constant name as arguments.  Like other\n serializable or externalizable objects, enum constants can function as the\n targets of back references appearing subsequently in the serialization\n stream.  The process by which enum constants are deserialized cannot be\n customized: any class-specific readObject, readObjectNoData, and readResolve\n methods defined by enum types are ignored during deserialization.\n Similarly, any serialPersistentFields or serialVersionUID field declarations\n are also ignored--all enum types have a fixed serialVersionUID of 0L.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ObjectInputStream","qualifiedName":"java.io.ObjectInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.InputStream","interfaces":["java.io.ObjectInput","java.io.ObjectStreamConstants"],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":["java.io.ObjectInputStream.GetField"],"isInnerClass":false,"constructors":[{"name":"ObjectInputStream","comment":"Creates an ObjectInputStream that reads from the specified InputStream.\n A serialization stream header is read from the stream and verified.\n This constructor will block until the corresponding ObjectOutputStream\n has written and flushed the header.\n\n \u003cp\u003eIf a security manager is installed, this constructor will check for\n the \"enableSubclassImplementation\" SerializablePermission when invoked\n directly or indirectly by the constructor of a subclass which overrides\n the ObjectInputStream.readFields or ObjectInputStream.readUnshared\n methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"readObject","comment":"Read an object from the ObjectInputStream.  The class of the object, the\n signature of the class, and the values of the non-transient and\n non-static fields of the class and all of its supertypes are read.\n Default deserializing for a class can be overridden using the writeObject\n and readObject methods.  Objects referenced by this object are read\n transitively so that a complete equivalent graph of objects is\n reconstructed by readObject.\n\n \u003cp\u003eThe root object is completely restored when all of its fields and the\n objects it references are completely restored.  At this point the object\n validation callbacks are executed in order based on their registered\n priorities. The callbacks are registered by objects (in the readObject\n special methods) as they are individually restored.\n\n \u003cp\u003eExceptions are thrown for problems with the InputStream and for\n classes that should not be deserialized.  All exceptions are fatal to\n the InputStream and leave it in an indeterminate state; it is up to the\n caller to ignore or recover the stream state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnshared","comment":"Reads an \"unshared\" object from the ObjectInputStream.  This method is\n identical to readObject, except that it prevents subsequent calls to\n readObject and readUnshared from returning additional references to the\n deserialized instance obtained via this call.  Specifically:\n \u003cul\u003e\n   \u003cli\u003eIf readUnshared is called to deserialize a back-reference (the\n       stream representation of an object which has been written\n       previously to the stream), an ObjectStreamException will be\n       thrown.\n\n   \u003cli\u003eIf readUnshared returns successfully, then any subsequent attempts\n       to deserialize back-references to the stream handle deserialized\n       by readUnshared will cause an ObjectStreamException to be thrown.\n \u003c/ul\u003e\n Deserializing an object via readUnshared invalidates the stream handle\n associated with the returned object.  Note that this in itself does not\n always guarantee that the reference returned by readUnshared is unique;\n the deserialized object may define a readResolve method which returns an\n object visible to other parties, or readUnshared may return a Class\n object or enum constant obtainable elsewhere in the stream or through\n external means. If the deserialized object defines a readResolve method\n and the invocation of that method returns an array, then readUnshared\n returns a shallow clone of that array; this guarantees that the returned\n array object is unique and cannot be obtained a second time from an\n invocation of readObject or readUnshared on the ObjectInputStream,\n even if the underlying data stream has been manipulated.\n\n \u003cp\u003eObjectInputStream subclasses which override this method can only be\n constructed in security contexts possessing the\n \"enableSubclassImplementation\" SerializablePermission; any attempt to\n instantiate such a subclass without this permission will cause a\n SecurityException to be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"defaultReadObject","comment":"Read the non-static and non-transient fields of the current class from\n this stream.  This may only be called from the readObject method of the\n class being deserialized. It will throw the NotActiveException if it is\n called otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readFields","comment":"Reads the persistent fields from the stream and makes them available by\n name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"GetField","qualifiedName":"java.io.ObjectInputStream.GetField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"registerValidation","comment":"Register an object to be validated before the graph is returned.  While\n similar to resolveObject these validations are called after the entire\n graph has been reconstituted.  Typically, a readObject method will\n register the object with the stream so that when all of the objects are\n restored a final set of validations can be performed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.ObjectInputValidation, int)","flatSignature":"(ObjectInputValidation, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"ObjectInputValidation","qualifiedName":"java.io.ObjectInputValidation","dimension":"","elementType":{}}},{"name":"prio","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads a byte of data. This method will block if no input is available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads into an array of bytes.  This method will block until some input\n is available. Consider using java.io.DataInputStream.readFully to read\n exactly \u0027length\u0027 bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"available","comment":"Returns the number of bytes that can be read without blocking.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes the input stream. Must be called to release any resources\n associated with the stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readBoolean","comment":"Reads in a boolean.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readByte","comment":"Reads an 8 bit byte.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnsignedByte","comment":"Reads an unsigned 8 bit byte.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readChar","comment":"Reads a 16 bit char.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readShort","comment":"Reads a 16 bit short.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnsignedShort","comment":"Reads an unsigned 16 bit short.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readInt","comment":"Reads a 32 bit int.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readLong","comment":"Reads a 64 bit long.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readFloat","comment":"Reads a 32 bit float.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readDouble","comment":"Reads a 64 bit double.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readFully","comment":"Reads bytes, blocking until all bytes are read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readFully","comment":"Reads bytes, blocking until all bytes are read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skipBytes","comment":"Skips bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"readLine","comment":"Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUTF","comment":"Reads a String in\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e\n format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}