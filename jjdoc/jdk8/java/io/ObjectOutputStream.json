{"name":"ObjectOutputStream","comment":"An ObjectOutputStream writes primitive data types and graphs of Java objects\n to an OutputStream.  The objects can be read (reconstituted) using an\n ObjectInputStream.  Persistent storage of objects can be accomplished by\n using a file for the stream.  If the stream is a network socket stream, the\n objects can be reconstituted on another host or in another process.\n\n \u003cp\u003eOnly objects that support the java.io.Serializable interface can be\n written to streams.  The class of each serializable object is encoded\n including the class name and signature of the class, the values of the\n object\u0027s fields and arrays, and the closure of any other objects referenced\n from the initial objects.\n\n \u003cp\u003eThe method writeObject is used to write an object to the stream.  Any\n object, including Strings and arrays, is written with writeObject. Multiple\n objects or primitives can be written to the stream.  The objects must be\n read back from the corresponding ObjectInputstream with the same types and\n in the same order as they were written.\n\n \u003cp\u003ePrimitive data types can also be written to the stream using the\n appropriate methods from DataOutput. Strings can also be written using the\n writeUTF method.\n\n \u003cp\u003eThe default serialization mechanism for an object writes the class of the\n object, the class signature, and the values of all non-transient and\n non-static fields.  References to other objects (except in transient or\n static fields) cause those objects to be written also. Multiple references\n to a single object are encoded using a reference sharing mechanism so that\n graphs of objects can be restored to the same shape as when the original was\n written.\n\n \u003cp\u003eFor example to write an object that can be read by the example in\n ObjectInputStream:\n \u003cbr\u003e\n \u003cpre\u003e\n      FileOutputStream fos \u003d new FileOutputStream(\"t.tmp\");\n      ObjectOutputStream oos \u003d new ObjectOutputStream(fos);\n\n      oos.writeInt(12345);\n      oos.writeObject(\"Today\");\n      oos.writeObject(new Date());\n\n      oos.close();\n \u003c/pre\u003e\n\n \u003cp\u003eClasses that require special handling during the serialization and\n deserialization process must implement special methods with these exact\n signatures:\n \u003cbr\u003e\n \u003cpre\u003e\n private void readObject(java.io.ObjectInputStream stream)\n     throws IOException, ClassNotFoundException;\n private void writeObject(java.io.ObjectOutputStream stream)\n     throws IOException\n private void readObjectNoData()\n     throws ObjectStreamException;\n \u003c/pre\u003e\n\n \u003cp\u003eThe writeObject method is responsible for writing the state of the object\n for its particular class so that the corresponding readObject method can\n restore it.  The method does not need to concern itself with the state\n belonging to the object\u0027s superclasses or subclasses.  State is saved by\n writing the individual fields to the ObjectOutputStream using the\n writeObject method or by using the methods for primitive data types\n supported by DataOutput.\n\n \u003cp\u003eSerialization does not write out the fields of any object that does not\n implement the java.io.Serializable interface.  Subclasses of Objects that\n are not serializable can be serializable. In this case the non-serializable\n class must have a no-arg constructor to allow its fields to be initialized.\n In this case it is the responsibility of the subclass to save and restore\n the state of the non-serializable class. It is frequently the case that the\n fields of that class are accessible (public, package, or protected) or that\n there are get and set methods that can be used to restore the state.\n\n \u003cp\u003eSerialization of an object can be prevented by implementing writeObject\n and readObject methods that throw the NotSerializableException.  The\n exception will be caught by the ObjectOutputStream and abort the\n serialization process.\n\n \u003cp\u003eImplementing the Externalizable interface allows the object to assume\n complete control over the contents and format of the object\u0027s serialized\n form.  The methods of the Externalizable interface, writeExternal and\n readExternal, are called to save and restore the objects state.  When\n implemented by a class they can write and read their own state using all of\n the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n the objects to handle any versioning that occurs.\n\n \u003cp\u003eEnum constants are serialized differently than ordinary serializable or\n externalizable objects.  The serialized form of an enum constant consists\n solely of its name; field values of the constant are not transmitted.  To\n serialize an enum constant, ObjectOutputStream writes the string returned by\n the constant\u0027s name method.  Like other serializable or externalizable\n objects, enum constants can function as the targets of back references\n appearing subsequently in the serialization stream.  The process by which\n enum constants are serialized cannot be customized; any class-specific\n writeObject and writeReplace methods defined by enum types are ignored\n during serialization.  Similarly, any serialPersistentFields or\n serialVersionUID field declarations are also ignored--all enum types have a\n fixed serialVersionUID of 0L.\n\n \u003cp\u003ePrimitive data, excluding serializable fields and externalizable data, is\n written to the ObjectOutputStream in block-data records. A block data record\n is composed of a header and data. The block data header consists of a marker\n and the number of bytes to follow the header.  Consecutive primitive data\n writes are merged into one block-data record.  The blocking factor used for\n a block-data record will be 1024 bytes.  Each block-data record will be\n filled up to 1024 bytes, or be written whenever there is a termination of\n block-data mode.  Calls to the ObjectOutputStream methods writeObject,\n defaultWriteObject and writeFields initially terminate any existing\n block-data record.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ObjectOutputStream","qualifiedName":"java.io.ObjectOutputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.OutputStream","interfaces":["java.io.ObjectOutput","java.io.ObjectStreamConstants"],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":["java.io.ObjectOutputStream.PutField"],"isInnerClass":false,"constructors":[{"name":"ObjectOutputStream","comment":"Creates an ObjectOutputStream that writes to the specified OutputStream.\n This constructor writes the serialization stream header to the\n underlying stream; callers may wish to flush the stream immediately to\n ensure that constructors for receiving ObjectInputStreams will not block\n when reading the header.\n\n \u003cp\u003eIf a security manager is installed, this constructor will check for\n the \"enableSubclassImplementation\" SerializablePermission when invoked\n directly or indirectly by the constructor of a subclass which overrides\n the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared\n methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"useProtocolVersion","comment":"Specify stream protocol version to use when writing the stream.\n\n \u003cp\u003eThis routine provides a hook to enable the current version of\n Serialization to write in a format that is backwards compatible to a\n previous version of the stream format.\n\n \u003cp\u003eEvery effort will be made to avoid introducing additional\n backwards incompatibilities; however, sometimes there is no\n other alternative.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"version","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeObject","comment":"Write the specified object to the ObjectOutputStream.  The class of the\n object, the signature of the class, and the values of the non-transient\n and non-static fields of the class and all of its supertypes are\n written.  Default serialization for a class can be overridden using the\n writeObject and the readObject methods.  Objects referenced by this\n object are written transitively so that a complete equivalent graph of\n objects can be reconstructed by an ObjectInputStream.\n\n \u003cp\u003eExceptions are thrown for problems with the OutputStream and for\n classes that should not be serialized.  All exceptions are fatal to the\n OutputStream, which is left in an indeterminate state, and it is up to\n the caller to ignore or recover the stream state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeUnshared","comment":"Writes an \"unshared\" object to the ObjectOutputStream.  This method is\n identical to writeObject, except that it always writes the given object\n as a new, unique object in the stream (as opposed to a back-reference\n pointing to a previously serialized instance).  Specifically:\n \u003cul\u003e\n   \u003cli\u003eAn object written via writeUnshared is always serialized in the\n       same manner as a newly appearing object (an object that has not\n       been written to the stream yet), regardless of whether or not the\n       object has been written previously.\n\n   \u003cli\u003eIf writeObject is used to write an object that has been previously\n       written with writeUnshared, the previous writeUnshared operation\n       is treated as if it were a write of a separate object.  In other\n       words, ObjectOutputStream will never generate back-references to\n       object data written by calls to writeUnshared.\n \u003c/ul\u003e\n While writing an object via writeUnshared does not in itself guarantee a\n unique reference to the object when it is deserialized, it allows a\n single object to be defined multiple times in a stream, so that multiple\n calls to readUnshared by the receiver will not conflict.  Note that the\n rules described above only apply to the base-level object written with\n writeUnshared, and not to any transitively referenced sub-objects in the\n object graph to be serialized.\n\n \u003cp\u003eObjectOutputStream subclasses which override this method can only be\n constructed in security contexts possessing the\n \"enableSubclassImplementation\" SerializablePermission; any attempt to\n instantiate such a subclass without this permission will cause a\n SecurityException to be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"defaultWriteObject","comment":"Write the non-static and non-transient fields of the current class to\n this stream.  This may only be called from the writeObject method of the\n class being serialized. It will throw the NotActiveException if it is\n called otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putFields","comment":"Retrieve the object used to buffer persistent fields to be written to\n the stream.  The fields will be written to the stream when writeFields\n method is called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PutField","qualifiedName":"java.io.ObjectOutputStream.PutField","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"writeFields","comment":"Write the buffered fields to the stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Reset will disregard the state of any objects already written to the\n stream.  The state is reset to be the same as a new ObjectOutputStream.\n The current point in the stream is marked as reset so the corresponding\n ObjectInputStream will be reset at the same point.  Objects previously\n written to the stream will not be referred to as already being in the\n stream.  They will be written to the stream again.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"write","comment":"Writes a byte. This method will block until the byte is actually\n written.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes an array of bytes. This method will block until the bytes are\n actually written.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes a sub array of bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buf","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flushes the stream. This will write any buffered output bytes and flush\n through to the underlying stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes the stream. This method must be called to release any resources\n associated with the stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"writeBoolean","comment":"Writes a boolean.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeByte","comment":"Writes an 8 bit byte.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeShort","comment":"Writes a 16 bit short.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeChar","comment":"Writes a 16 bit char.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeInt","comment":"Writes a 32 bit int.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeLong","comment":"Writes a 64 bit long.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeFloat","comment":"Writes a 32 bit float.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeDouble","comment":"Writes a 64 bit double.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeBytes","comment":"Writes a String as a sequence of bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeChars","comment":"Writes a String as a sequence of chars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeUTF","comment":"Primitive data write of this String in\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e\n format.  Note that there is a\n significant difference between writing a String into the stream as\n primitive data or as an Object. A String instance written by writeObject\n is written into the stream as a String initially. Future writeObject()\n calls write references to the string into the stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}