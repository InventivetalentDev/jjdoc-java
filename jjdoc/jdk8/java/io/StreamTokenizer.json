{"name":"StreamTokenizer","comment":"The {@code StreamTokenizer} class takes an input stream and\n parses it into \"tokens\", allowing the tokens to be\n read one at a time. The parsing process is controlled by a table\n and a number of flags that can be set to various states. The\n stream tokenizer can recognize identifiers, numbers, quoted\n strings, and various comment styles.\n \u003cp\u003e\n Each byte read from the input stream is regarded as a character\n in the range {@code \u0027\\u0000\u0027} through {@code \u0027\\u00FF\u0027}.\n The character value is used to look up five possible attributes of\n the character: \u003ci\u003ewhite space\u003c/i\u003e, \u003ci\u003ealphabetic\u003c/i\u003e,\n \u003ci\u003enumeric\u003c/i\u003e, \u003ci\u003estring quote\u003c/i\u003e, and \u003ci\u003ecomment character\u003c/i\u003e.\n Each character can have zero or more of these attributes.\n \u003cp\u003e\n In addition, an instance has four flags. These flags indicate:\n \u003cul\u003e\n \u003cli\u003eWhether line terminators are to be returned as tokens or treated\n     as white space that merely separates tokens.\n \u003cli\u003eWhether C-style comments are to be recognized and skipped.\n \u003cli\u003eWhether C++-style comments are to be recognized and skipped.\n \u003cli\u003eWhether the characters of identifiers are converted to lowercase.\n \u003c/ul\u003e\n \u003cp\u003e\n A typical application first constructs an instance of this class,\n sets up the syntax tables, and then repeatedly loops calling the\n {@code nextToken} method in each iteration of the loop until\n it returns the value {@code TT_EOF}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"StreamTokenizer","qualifiedName":"java.io.StreamTokenizer","dimension":"","elementType":{},"package":"java.io","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"StreamTokenizer","comment":"Creates a stream tokenizer that parses the specified input\n stream. The stream tokenizer is initialized to the following\n default state:\n \u003cul\u003e\n \u003cli\u003eAll byte values {@code \u0027A\u0027} through {@code \u0027Z\u0027},\n     {@code \u0027a\u0027} through {@code \u0027z\u0027}, and\n     {@code \u0027\\u00A0\u0027} through {@code \u0027\\u00FF\u0027} are\n     considered to be alphabetic.\n \u003cli\u003eAll byte values {@code \u0027\\u0000\u0027} through\n     {@code \u0027\\u0020\u0027} are considered to be white space.\n \u003cli\u003e{@code \u0027/\u0027} is a comment character.\n \u003cli\u003eSingle quote {@code \u0027\\\u0027\u0027} and double quote {@code \u0027\"\u0027}\n     are string quote characters.\n \u003cli\u003eNumbers are parsed.\n \u003cli\u003eEnds of lines are treated as white space, not as separate tokens.\n \u003cli\u003eC-style and C++-style comments are not recognized.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","parameters":[{"name":"is","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"StreamTokenizer","comment":"Create a tokenizer that parses the given character stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.Reader)","flatSignature":"(Reader)","parameters":[{"name":"r","type":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"ttype","comment":"After a call to the {@code nextToken} method, this field\n contains the type of the token just read. For a single character\n token, its value is the single character, converted to an integer.\n For a quoted string token, its value is the quote character.\n Otherwise, its value is one of the following:\n \u003cul\u003e\n \u003cli\u003e{@code TT_WORD} indicates that the token is a word.\n \u003cli\u003e{@code TT_NUMBER} indicates that the token is a number.\n \u003cli\u003e{@code TT_EOL} indicates that the end of line has been read.\n     The field can only have this value if the\n     {@code eolIsSignificant} method has been called with the\n     argument {@code true}.\n \u003cli\u003e{@code TT_EOF} indicates that the end of the input stream\n     has been reached.\n \u003c/ul\u003e\n \u003cp\u003e\n The initial value of this field is -4.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":false},{"name":"TT_EOF","comment":"A constant indicating that the end of the stream has been read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-1"},{"name":"TT_EOL","comment":"A constant indicating that the end of the line has been read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"},{"name":"TT_NUMBER","comment":"A constant indicating that a number token has been read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-2"},{"name":"TT_WORD","comment":"A constant indicating that a word token has been read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-3"},{"name":"sval","comment":"If the current token is a word token, this field contains a\n string giving the characters of the word token. When the current\n token is a quoted string token, this field contains the body of\n the string.\n \u003cp\u003e\n The current token is a word when the value of the\n {@code ttype} field is {@code TT_WORD}. The current token is\n a quoted string token when the value of the {@code ttype} field is\n a quote character.\n \u003cp\u003e\n The initial value of this field is null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isStatic":false},{"name":"nval","comment":"If the current token is a number, this field contains the value\n of that number. The current token is a number when the value of\n the {@code ttype} field is {@code TT_NUMBER}.\n \u003cp\u003e\n The initial value of this field is 0.0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isStatic":false}],"methods":[{"name":"resetSyntax","comment":"Resets this tokenizer\u0027s syntax table so that all characters are\n \"ordinary.\" See the {@code ordinaryChar} method\n for more information on a character being ordinary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"wordChars","comment":"Specifies that all characters \u003ci\u003ec\u003c/i\u003e in the range\n \u003ccode\u003elow\u0026nbsp;\u0026lt;\u003d\u0026nbsp;\u003ci\u003ec\u003c/i\u003e\u0026nbsp;\u0026lt;\u003d\u0026nbsp;high\u003c/code\u003e\n are word constituents. A word token consists of a word constituent\n followed by zero or more word constituents or number constituents.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"low","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hi","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"whitespaceChars","comment":"Specifies that all characters \u003ci\u003ec\u003c/i\u003e in the range\n \u003ccode\u003elow\u0026nbsp;\u0026lt;\u003d\u0026nbsp;\u003ci\u003ec\u003c/i\u003e\u0026nbsp;\u0026lt;\u003d\u0026nbsp;high\u003c/code\u003e\n are white space characters. White space characters serve only to\n separate tokens in the input stream.\n\n \u003cp\u003eAny other attribute settings for the characters in the specified\n range are cleared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"low","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hi","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ordinaryChars","comment":"Specifies that all characters \u003ci\u003ec\u003c/i\u003e in the range\n \u003ccode\u003elow\u0026nbsp;\u0026lt;\u003d\u0026nbsp;\u003ci\u003ec\u003c/i\u003e\u0026nbsp;\u0026lt;\u003d\u0026nbsp;high\u003c/code\u003e\n are \"ordinary\" in this tokenizer. See the\n {@code ordinaryChar} method for more information on a\n character being ordinary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"low","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hi","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ordinaryChar","comment":"Specifies that the character argument is \"ordinary\"\n in this tokenizer. It removes any special significance the\n character has as a comment character, word component, string\n delimiter, white space, or number character. When such a character\n is encountered by the parser, the parser treats it as a\n single-character token and sets {@code ttype} field to the\n character value.\n\n \u003cp\u003eMaking a line terminator character \"ordinary\" may interfere\n with the ability of a {@code StreamTokenizer} to count\n lines. The {@code lineno} method may no longer reflect\n the presence of such terminator characters in its line count.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"commentChar","comment":"Specified that the character argument starts a single-line\n comment. All characters from the comment character to the end of\n the line are ignored by this stream tokenizer.\n\n \u003cp\u003eAny other attribute settings for the specified character are cleared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"quoteChar","comment":"Specifies that matching pairs of this character delimit string\n constants in this tokenizer.\n \u003cp\u003e\n When the {@code nextToken} method encounters a string\n constant, the {@code ttype} field is set to the string\n delimiter and the {@code sval} field is set to the body of\n the string.\n \u003cp\u003e\n If a string quote character is encountered, then a string is\n recognized, consisting of all characters after (but not including)\n the string quote character, up to (but not including) the next\n occurrence of that same string quote character, or a line\n terminator, or end of file. The usual escape sequences such as\n {@code \"\\n\"} and {@code \"\\t\"} are recognized and\n converted to single characters as the string is parsed.\n\n \u003cp\u003eAny other attribute settings for the specified character are cleared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseNumbers","comment":"Specifies that numbers should be parsed by this tokenizer. The\n syntax table of this tokenizer is modified so that each of the twelve\n characters:\n \u003cblockquote\u003e\u003cpre\u003e\n      0 1 2 3 4 5 6 7 8 9 . -\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n has the \"numeric\" attribute.\n \u003cp\u003e\n When the parser encounters a word token that has the format of a\n double precision floating-point number, it treats the token as a\n number rather than a word, by setting the {@code ttype}\n field to the value {@code TT_NUMBER} and putting the numeric\n value of the token into the {@code nval} field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"eolIsSignificant","comment":"Determines whether or not ends of line are treated as tokens.\n If the flag argument is true, this tokenizer treats end of lines\n as tokens; the {@code nextToken} method returns\n {@code TT_EOL} and also sets the {@code ttype} field to\n this value when an end of line is read.\n \u003cp\u003e\n A line is a sequence of characters ending with either a\n carriage-return character ({@code \u0027\\r\u0027}) or a newline\n character ({@code \u0027\\n\u0027}). In addition, a carriage-return\n character followed immediately by a newline character is treated\n as a single end-of-line token.\n \u003cp\u003e\n If the {@code flag} is false, end-of-line characters are\n treated as white space and serve only to separate tokens.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"flag","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"slashStarComments","comment":"Determines whether or not the tokenizer recognizes C-style comments.\n If the flag argument is {@code true}, this stream tokenizer\n recognizes C-style comments. All text between successive\n occurrences of {@code /*} and \u003ccode\u003e*\u0026#47;\u003c/code\u003e are discarded.\n \u003cp\u003e\n If the flag argument is {@code false}, then C-style comments\n are not treated specially.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"flag","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"slashSlashComments","comment":"Determines whether or not the tokenizer recognizes C++-style comments.\n If the flag argument is {@code true}, this stream tokenizer\n recognizes C++-style comments. Any occurrence of two consecutive\n slash characters ({@code \u0027/\u0027}) is treated as the beginning of\n a comment that extends to the end of the line.\n \u003cp\u003e\n If the flag argument is {@code false}, then C++-style\n comments are not treated specially.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"flag","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lowerCaseMode","comment":"Determines whether or not word token are automatically lowercased.\n If the flag argument is {@code true}, then the value in the\n {@code sval} field is lowercased whenever a word token is\n returned (the {@code ttype} field has the\n value {@code TT_WORD} by the {@code nextToken} method\n of this tokenizer.\n \u003cp\u003e\n If the flag argument is {@code false}, then the\n {@code sval} field is not modified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fl","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextToken","comment":"Parses the next token from the input stream of this tokenizer.\n The type of the next token is returned in the {@code ttype}\n field. Additional information about the token may be in the\n {@code nval} field or the {@code sval} field of this\n tokenizer.\n \u003cp\u003e\n Typical clients of this\n class first set up the syntax tables and then sit in a loop\n calling nextToken to parse successive tokens until TT_EOF\n is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pushBack","comment":"Causes the next call to the {@code nextToken} method of this\n tokenizer to return the current value in the {@code ttype}\n field, and not to modify the value in the {@code nval} or\n {@code sval} field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lineno","comment":"Return the current line number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns the string representation of the current stream token and\n the line number it occurs on.\n\n \u003cp\u003eThe precise string returned is unspecified, although the following\n example can be considered typical:\n\n \u003cblockquote\u003e\u003cpre\u003eToken[\u0027a\u0027], line 10\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}