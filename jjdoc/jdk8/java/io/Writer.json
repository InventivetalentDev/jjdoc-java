{"name":"Writer","comment":"Abstract class for writing to character streams.  The only methods that a\n subclass must implement are write(char[], int, int), flush(), and close().\n Most subclasses, however, will override some of the methods defined here in\n order to provide higher efficiency, additional functionality, or both.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{},"package":"java.io","superclass":"java.lang.Object","interfaces":["java.lang.Appendable","java.io.Closeable","java.io.Flushable"],"isAbstract":true,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"write","comment":"Writes a single character.  The character to be written is contained in\n the 16 low-order bits of the given integer value; the 16 high-order bits\n are ignored.\n\n \u003cp\u003e Subclasses that intend to support efficient single-character output\n should override this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes an array of characters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[])","flatSignature":"(char[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cbuf","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes a portion of an array of characters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"cbuf","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes a portion of a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int, int)","flatSignature":"(String, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"append","comment":"Appends the specified character sequence to this writer.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.append(csq)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.write(csq.toString()) \u003c/pre\u003e\n\n \u003cp\u003e Depending on the specification of \u003ctt\u003etoString\u003c/tt\u003e for the\n character sequence \u003ctt\u003ecsq\u003c/tt\u003e, the entire sequence may not be\n appended. For instance, invoking the \u003ctt\u003etoString\u003c/tt\u003e method of a\n character buffer will return a subsequence whose content depends upon\n the buffer\u0027s position and limit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"csq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"append","comment":"Appends a subsequence of the specified character sequence to this writer.\n \u003ctt\u003eAppendable\u003c/tt\u003e.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.append(csq, start,\n end)\u003c/tt\u003e when \u003ctt\u003ecsq\u003c/tt\u003e is not \u003ctt\u003enull\u003c/tt\u003e behaves in exactly the\n same way as the invocation\n\n \u003cpre\u003e\n     out.write(csq.subSequence(start, end).toString()) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int, int)","flatSignature":"(CharSequence, int, int)","returnType":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"csq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"end","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"append","comment":"Appends the specified character to this writer.\n\n \u003cp\u003e An invocation of this method of the form \u003ctt\u003eout.append(c)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n\n \u003cpre\u003e\n     out.write(c) \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flushes the stream.  If the stream has saved any characters from the\n various write() methods in a buffer, write them immediately to their\n intended destination.  Then, if that destination is another character or\n byte stream, flush it.  Thus one flush() invocation will flush all the\n buffers in a chain of Writers and OutputStreams.\n\n \u003cp\u003e If the intended destination of this stream is an abstraction provided\n by the underlying operating system, for example a file, then flushing the\n stream guarantees only that bytes previously written to the stream are\n passed to the operating system for writing; it does not guarantee that\n they are actually written to a physical device such as a disk drive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes the stream, flushing it first. Once the stream has been closed,\n further write() or flush() invocations will cause an IOException to be\n thrown. Closing a previously closed stream has no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.io.StringWriter","java.io.PrintWriter","java.io.PipedWriter","java.io.OutputStreamWriter","java.io.FilterWriter","java.io.CharArrayWriter","java.io.BufferedWriter"],"enumConstants":[]}