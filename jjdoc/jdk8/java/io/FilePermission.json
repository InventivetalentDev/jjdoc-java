{"name":"FilePermission","comment":"This class represents access to a file or directory.  A FilePermission consists\n of a pathname and a set of actions valid for that pathname.\n \u003cP\u003e\n Pathname is the pathname of the file or directory granted the specified\n actions. A pathname that ends in \"/*\" (where \"/\" is\n the file separator character, \u003ccode\u003eFile.separatorChar\u003c/code\u003e) indicates\n all the files and directories contained in that directory. A pathname\n that ends with \"/-\" indicates (recursively) all files\n and subdirectories contained in that directory. A pathname consisting of\n the special token \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" matches \u003cb\u003eany\u003c/b\u003e file.\n \u003cP\u003e\n Note: A pathname consisting of a single \"*\" indicates all the files\n in the current directory, while a pathname consisting of a single \"-\"\n indicates all the files in the current directory and\n (recursively) all files and subdirectories contained in the current\n directory.\n \u003cP\u003e\n The actions to be granted are passed to the constructor in a string containing\n a list of one or more comma-separated keywords. The possible keywords are\n \"read\", \"write\", \"execute\", \"delete\", and \"readlink\". Their meaning is\n defined as follows:\n\n \u003cDL\u003e\n    \u003cDT\u003e read \u003cDD\u003e read permission\n    \u003cDT\u003e write \u003cDD\u003e write permission\n    \u003cDT\u003e execute\n    \u003cDD\u003e execute permission. Allows \u003ccode\u003eRuntime.exec\u003c/code\u003e to\n         be called. Corresponds to \u003ccode\u003eSecurityManager.checkExec\u003c/code\u003e.\n    \u003cDT\u003e delete\n    \u003cDD\u003e delete permission. Allows \u003ccode\u003eFile.delete\u003c/code\u003e to\n         be called. Corresponds to \u003ccode\u003eSecurityManager.checkDelete\u003c/code\u003e.\n    \u003cDT\u003e readlink\n    \u003cDD\u003e read link permission. Allows the target of a\n         \u003ca href\u003d\"../nio/file/package-summary.html#links\"\u003esymbolic link\u003c/a\u003e\n         to be read by invoking the {@link java.nio.file.Files#readSymbolicLink\n         readSymbolicLink } method.\n \u003c/DL\u003e\n \u003cP\u003e\n The actions string is converted to lowercase before processing.\n \u003cP\u003e\n Be careful when granting FilePermissions. Think about the implications\n of granting read and especially write access to various files and\n directories. The \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" permission with write action is\n especially dangerous. This grants permission to write to the entire\n file system. One thing this effectively allows is replacement of the\n system binary, including the JVM runtime environment.\n\n \u003cp\u003ePlease note: Code can always read a file from the same\n directory it\u0027s in (or a subdirectory of that directory); it does not\n need explicit permission to do so.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FilePermission","qualifiedName":"java.io.FilePermission","dimension":"","elementType":{},"package":"java.io","superclass":"java.security.Permission","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"FilePermission","comment":"Creates a new FilePermission object with the specified actions.\n \u003ci\u003epath\u003c/i\u003e is the pathname of a file or directory, and \u003ci\u003eactions\u003c/i\u003e\n contains a comma-separated list of the desired actions granted on the\n file or directory. Possible actions are\n \"read\", \"write\", \"execute\", \"delete\", and \"readlink\".\n\n \u003cp\u003eA pathname that ends in \"/*\" (where \"/\" is\n the file separator character, \u003ccode\u003eFile.separatorChar\u003c/code\u003e)\n indicates all the files and directories contained in that directory.\n A pathname that ends with \"/-\" indicates (recursively) all files and\n subdirectories contained in that directory. The special pathname\n \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" matches any file.\n\n \u003cp\u003eA pathname consisting of a single \"*\" indicates all the files\n in the current directory, while a pathname consisting of a single \"-\"\n indicates all the files in the current directory and\n (recursively) all files and subdirectories contained in the current\n directory.\n\n \u003cp\u003eA pathname containing an empty string represents an empty path.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"actions","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"implies","comment":"Checks if this FilePermission object \"implies\" the specified permission.\n \u003cP\u003e\n More specifically, this method returns true if:\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e is an instanceof FilePermission,\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s actions are a proper subset of this\n object\u0027s actions, and\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s pathname is implied by this object\u0027s\n      pathname. For example, \"/tmp/*\" implies \"/tmp/foo\", since\n      \"/tmp/*\" encompasses all files in the \"/tmp\" directory,\n      including the one named \"foo\".\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks two FilePermission objects for equality. Checks that \u003ci\u003eobj\u003c/i\u003e is\n a FilePermission, and has the same pathname and actions as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getActions","comment":"Returns the \"canonical string representation\" of the actions.\n That is, this method always returns present actions in the following order:\n read, write, execute, delete, readlink. For example, if this FilePermission\n object allows both write and read actions, a call to \u003ccode\u003egetActions\u003c/code\u003e\n will return the string \"read,write\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newPermissionCollection","comment":"Returns a new PermissionCollection object for storing FilePermission\n objects.\n \u003cp\u003e\n FilePermission objects must be stored in a manner that allows them\n to be inserted into the collection in any order, but that also enables the\n PermissionCollection \u003ccode\u003eimplies\u003c/code\u003e\n method to be implemented in an efficient (and consistent) manner.\n\n \u003cp\u003eFor example, if you have two FilePermissions:\n \u003cOL\u003e\n \u003cLI\u003e  \u003ccode\u003e\"/tmp/-\", \"read\"\u003c/code\u003e\n \u003cLI\u003e  \u003ccode\u003e\"/tmp/scratch/foo\", \"write\"\u003c/code\u003e\n \u003c/OL\u003e\n\n \u003cp\u003eand you are calling the \u003ccode\u003eimplies\u003c/code\u003e method with the FilePermission:\n\n \u003cpre\u003e\n   \"/tmp/scratch/foo\", \"read,write\",\n \u003c/pre\u003e\n\n then the \u003ccode\u003eimplies\u003c/code\u003e function must\n take into account both the \"/tmp/-\" and \"/tmp/scratch/foo\"\n permissions, so the effective permission is \"read,write\",\n and \u003ccode\u003eimplies\u003c/code\u003e returns true. The \"implies\" semantics for\n FilePermissions are handled properly by the PermissionCollection object\n returned by this \u003ccode\u003enewPermissionCollection\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}