{"name":"DataInputStream","comment":"A data input stream lets an application read primitive Java data\n types from an underlying input stream in a machine-independent\n way. An application uses a data output stream to write data that\n can later be read by a data input stream.\n \u003cp\u003e\n DataInputStream is not necessarily safe for multithreaded access.\n Thread safety is optional and is the responsibility of users of\n methods in this class.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DataInputStream","qualifiedName":"java.io.DataInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.FilterInputStream","interfaces":["java.io.DataInput"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DataInputStream","comment":"Creates a DataInputStream that uses the specified\n underlying InputStream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"read","comment":"Reads some number of bytes from the contained input stream and\n stores them into the buffer array \u003ccode\u003eb\u003c/code\u003e. The number of\n bytes actually read is returned as an integer. This method blocks\n until input data is available, end of file is detected, or an\n exception is thrown.\n\n \u003cp\u003eIf \u003ccode\u003eb\u003c/code\u003e is null, a \u003ccode\u003eNullPointerException\u003c/code\u003e is\n thrown. If the length of \u003ccode\u003eb\u003c/code\u003e is zero, then no bytes are\n read and \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt\n to read at least one byte. If no byte is available because the\n stream is at end of file, the value \u003ccode\u003e-1\u003c/code\u003e is returned;\n otherwise, at least one byte is read and stored into \u003ccode\u003eb\u003c/code\u003e.\n\n \u003cp\u003eThe first byte read is stored into element \u003ccode\u003eb[0]\u003c/code\u003e, the\n next one into \u003ccode\u003eb[1]\u003c/code\u003e, and so on. The number of bytes read\n is, at most, equal to the length of \u003ccode\u003eb\u003c/code\u003e. Let \u003ccode\u003ek\u003c/code\u003e\n be the number of bytes actually read; these bytes will be stored in\n elements \u003ccode\u003eb[0]\u003c/code\u003e through \u003ccode\u003eb[k-1]\u003c/code\u003e, leaving\n elements \u003ccode\u003eb[k]\u003c/code\u003e through \u003ccode\u003eb[b.length-1]\u003c/code\u003e\n unaffected.\n\n \u003cp\u003eThe \u003ccode\u003eread(b)\u003c/code\u003e method has the same effect as:\n \u003cblockquote\u003e\u003cpre\u003e\n read(b, 0, b.length)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from the contained\n input stream into an array of bytes.  An attempt is made to read\n as many as \u003ccode\u003elen\u003c/code\u003e bytes, but a smaller number may be read,\n possibly zero. The number of bytes actually read is returned as an\n integer.\n\n \u003cp\u003e This method blocks until input data is available, end of file is\n detected, or an exception is thrown.\n\n \u003cp\u003e If \u003ccode\u003elen\u003c/code\u003e is zero, then no bytes are read and\n \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at least one\n byte is read and stored into \u003ccode\u003eb\u003c/code\u003e.\n\n \u003cp\u003e The first byte read is stored into element \u003ccode\u003eb[off]\u003c/code\u003e, the\n next one into \u003ccode\u003eb[off+1]\u003c/code\u003e, and so on. The number of bytes read\n is, at most, equal to \u003ccode\u003elen\u003c/code\u003e. Let \u003ci\u003ek\u003c/i\u003e be the number of\n bytes actually read; these bytes will be stored in elements\n \u003ccode\u003eb[off]\u003c/code\u003e through \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1]\u003c/code\u003e,\n leaving elements \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e through\n \u003ccode\u003eb[off+len-1]\u003c/code\u003e unaffected.\n\n \u003cp\u003e In every case, elements \u003ccode\u003eb[0]\u003c/code\u003e through\n \u003ccode\u003eb[off]\u003c/code\u003e and elements \u003ccode\u003eb[off+len]\u003c/code\u003e through\n \u003ccode\u003eb[b.length-1]\u003c/code\u003e are unaffected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"readFully","comment":"See the general contract of the \u003ccode\u003ereadFully\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"readFully","comment":"See the general contract of the \u003ccode\u003ereadFully\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skipBytes","comment":"See the general contract of the \u003ccode\u003eskipBytes\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"readBoolean","comment":"See the general contract of the \u003ccode\u003ereadBoolean\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readByte","comment":"See the general contract of the \u003ccode\u003ereadByte\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnsignedByte","comment":"See the general contract of the \u003ccode\u003ereadUnsignedByte\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readShort","comment":"See the general contract of the \u003ccode\u003ereadShort\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUnsignedShort","comment":"See the general contract of the \u003ccode\u003ereadUnsignedShort\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readChar","comment":"See the general contract of the \u003ccode\u003ereadChar\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readInt","comment":"See the general contract of the \u003ccode\u003ereadInt\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readLong","comment":"See the general contract of the \u003ccode\u003ereadLong\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readFloat","comment":"See the general contract of the \u003ccode\u003ereadFloat\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readDouble","comment":"See the general contract of the \u003ccode\u003ereadDouble\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readLine","comment":"See the general contract of the \u003ccode\u003ereadLine\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUTF","comment":"See the general contract of the \u003ccode\u003ereadUTF\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.\n \u003cp\u003e\n Bytes\n for this operation are read from the contained\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readUTF","comment":"Reads from the\n stream \u003ccode\u003ein\u003c/code\u003e a representation\n of a Unicode  character string encoded in\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e format;\n this string of characters is then returned as a \u003ccode\u003eString\u003c/code\u003e.\n The details of the modified UTF-8 representation\n are  exactly the same as for the \u003ccode\u003ereadUTF\u003c/code\u003e\n method of \u003ccode\u003eDataInput\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.DataInput)","flatSignature":"(DataInput)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"DataInput","qualifiedName":"java.io.DataInput","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}