{"name":"InputStream","comment":"This abstract class is the superclass of all classes representing\n an input stream of bytes.\n\n \u003cp\u003e Applications that need to define a subclass of \u003ccode\u003eInputStream\u003c/code\u003e\n must always provide a method that returns the next byte of input.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.lang.Object","interfaces":["java.io.Closeable"],"isAbstract":true,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"InputStream","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"read","comment":"Reads the next byte of data from the input stream. The value byte is\n returned as an \u003ccode\u003eint\u003c/code\u003e in the range \u003ccode\u003e0\u003c/code\u003e to\n \u003ccode\u003e255\u003c/code\u003e. If no byte is available because the end of the stream\n has been reached, the value \u003ccode\u003e-1\u003c/code\u003e is returned. This method\n blocks until input data is available, the end of the stream is detected,\n or an exception is thrown.\n\n \u003cp\u003e A subclass must provide an implementation of this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads some number of bytes from the input stream and stores them into\n the buffer array \u003ccode\u003eb\u003c/code\u003e. The number of bytes actually read is\n returned as an integer.  This method blocks until input data is\n available, end of file is detected, or an exception is thrown.\n\n \u003cp\u003e If the length of \u003ccode\u003eb\u003c/code\u003e is zero, then no bytes are read and\n \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at the\n end of the file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at\n least one byte is read and stored into \u003ccode\u003eb\u003c/code\u003e.\n\n \u003cp\u003e The first byte read is stored into element \u003ccode\u003eb[0]\u003c/code\u003e, the\n next one into \u003ccode\u003eb[1]\u003c/code\u003e, and so on. The number of bytes read is,\n at most, equal to the length of \u003ccode\u003eb\u003c/code\u003e. Let \u003ci\u003ek\u003c/i\u003e be the\n number of bytes actually read; these bytes will be stored in elements\n \u003ccode\u003eb[0]\u003c/code\u003e through \u003ccode\u003eb[\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1]\u003c/code\u003e,\n leaving elements \u003ccode\u003eb[\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e through\n \u003ccode\u003eb[b.length-1]\u003c/code\u003e unaffected.\n\n \u003cp\u003e The \u003ccode\u003eread(b)\u003c/code\u003e method for class \u003ccode\u003eInputStream\u003c/code\u003e\n has the same effect as: \u003cpre\u003e\u003ccode\u003e read(b, 0, b.length) \u003c/code\u003e\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from the input stream into\n an array of bytes.  An attempt is made to read as many as\n \u003ccode\u003elen\u003c/code\u003e bytes, but a smaller number may be read.\n The number of bytes actually read is returned as an integer.\n\n \u003cp\u003e This method blocks until input data is available, end of file is\n detected, or an exception is thrown.\n\n \u003cp\u003e If \u003ccode\u003elen\u003c/code\u003e is zero, then no bytes are read and\n \u003ccode\u003e0\u003c/code\u003e is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value \u003ccode\u003e-1\u003c/code\u003e is returned; otherwise, at least one\n byte is read and stored into \u003ccode\u003eb\u003c/code\u003e.\n\n \u003cp\u003e The first byte read is stored into element \u003ccode\u003eb[off]\u003c/code\u003e, the\n next one into \u003ccode\u003eb[off+1]\u003c/code\u003e, and so on. The number of bytes read\n is, at most, equal to \u003ccode\u003elen\u003c/code\u003e. Let \u003ci\u003ek\u003c/i\u003e be the number of\n bytes actually read; these bytes will be stored in elements\n \u003ccode\u003eb[off]\u003c/code\u003e through \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1]\u003c/code\u003e,\n leaving elements \u003ccode\u003eb[off+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e through\n \u003ccode\u003eb[off+len-1]\u003c/code\u003e unaffected.\n\n \u003cp\u003e In every case, elements \u003ccode\u003eb[0]\u003c/code\u003e through\n \u003ccode\u003eb[off]\u003c/code\u003e and elements \u003ccode\u003eb[off+len]\u003c/code\u003e through\n \u003ccode\u003eb[b.length-1]\u003c/code\u003e are unaffected.\n\n \u003cp\u003e The \u003ccode\u003eread(b,\u003c/code\u003e \u003ccode\u003eoff,\u003c/code\u003e \u003ccode\u003elen)\u003c/code\u003e method\n for class \u003ccode\u003eInputStream\u003c/code\u003e simply calls the method\n \u003ccode\u003eread()\u003c/code\u003e repeatedly. If the first such call results in an\n \u003ccode\u003eIOException\u003c/code\u003e, that exception is returned from the call to\n the \u003ccode\u003eread(b,\u003c/code\u003e \u003ccode\u003eoff,\u003c/code\u003e \u003ccode\u003elen)\u003c/code\u003e method.  If\n any subsequent call to \u003ccode\u003eread()\u003c/code\u003e results in a\n \u003ccode\u003eIOException\u003c/code\u003e, the exception is caught and treated as if it\n were end of file; the bytes read up to that point are stored into\n \u003ccode\u003eb\u003c/code\u003e and the number of bytes read before the exception\n occurred is returned. The default implementation of this method blocks\n until the requested amount of input data \u003ccode\u003elen\u003c/code\u003e has been read,\n end of file is detected, or an exception is thrown. Subclasses are encouraged\n to provide a more efficient implementation of this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skip","comment":"Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from this input\n stream. The \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of reasons, end\n up skipping over some smaller number of bytes, possibly \u003ccode\u003e0\u003c/code\u003e.\n This may result from any of a number of conditions; reaching end of file\n before \u003ccode\u003en\u003c/code\u003e bytes have been skipped is only one possibility.\n The actual number of bytes skipped is returned. If {@code n} is\n negative, the {@code skip} method for class {@code InputStream} always\n returns 0, and no bytes are skipped. Subclasses may handle the negative\n value differently.\n\n \u003cp\u003e The \u003ccode\u003eskip\u003c/code\u003e method of this class creates a\n byte array and then repeatedly reads into it until \u003ccode\u003en\u003c/code\u003e bytes\n have been read or the end of the stream has been reached. Subclasses are\n encouraged to provide a more efficient implementation of this method.\n For instance, the implementation may depend on the ability to seek.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"available","comment":"Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation\n might be the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n\n \u003cp\u003e Note that while some implementations of {@code InputStream} will return\n the total number of bytes in the stream, many will not.  It is\n never correct to use the return value of this method to allocate\n a buffer intended to hold all data in this stream.\n\n \u003cp\u003e A subclass\u0027 implementation of this method may choose to throw an\n {@link IOException} if this input stream has been closed by\n invoking the {@link #close()} method.\n\n \u003cp\u003e The {@code available} method for class {@code InputStream} always\n returns {@code 0}.\n\n \u003cp\u003e This method should be overridden by subclasses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this input stream and releases any system resources associated\n with the stream.\n\n \u003cp\u003e The \u003ccode\u003eclose\u003c/code\u003e method of \u003ccode\u003eInputStream\u003c/code\u003e does\n nothing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"mark","comment":"Marks the current position in this input stream. A subsequent call to\n the \u003ccode\u003ereset\u003c/code\u003e method repositions this stream at the last marked\n position so that subsequent reads re-read the same bytes.\n\n \u003cp\u003e The \u003ccode\u003ereadlimit\u003c/code\u003e arguments tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.\n\n \u003cp\u003e The general contract of \u003ccode\u003emark\u003c/code\u003e is that, if the method\n \u003ccode\u003emarkSupported\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, the stream somehow\n remembers all the bytes read after the call to \u003ccode\u003emark\u003c/code\u003e and\n stands ready to supply those same bytes again if and whenever the method\n \u003ccode\u003ereset\u003c/code\u003e is called.  However, the stream is not required to\n remember any data at all if more than \u003ccode\u003ereadlimit\u003c/code\u003e bytes are\n read from the stream before \u003ccode\u003ereset\u003c/code\u003e is called.\n\n \u003cp\u003e Marking a closed stream should not have any effect on the stream.\n\n \u003cp\u003e The \u003ccode\u003emark\u003c/code\u003e method of \u003ccode\u003eInputStream\u003c/code\u003e does\n nothing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"readlimit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"Repositions this stream to the position at the time the\n \u003ccode\u003emark\u003c/code\u003e method was last called on this input stream.\n\n \u003cp\u003e The general contract of \u003ccode\u003ereset\u003c/code\u003e is:\n\n \u003cul\u003e\n \u003cli\u003e If the method \u003ccode\u003emarkSupported\u003c/code\u003e returns\n \u003ccode\u003etrue\u003c/code\u003e, then:\n\n     \u003cul\u003e\u003cli\u003e If the method \u003ccode\u003emark\u003c/code\u003e has not been called since\n     the stream was created, or the number of bytes read from the stream\n     since \u003ccode\u003emark\u003c/code\u003e was last called is larger than the argument\n     to \u003ccode\u003emark\u003c/code\u003e at that last call, then an\n     \u003ccode\u003eIOException\u003c/code\u003e might be thrown.\n\n     \u003cli\u003e If such an \u003ccode\u003eIOException\u003c/code\u003e is not thrown, then the\n     stream is reset to a state such that all the bytes read since the\n     most recent call to \u003ccode\u003emark\u003c/code\u003e (or since the start of the\n     file, if \u003ccode\u003emark\u003c/code\u003e has not been called) will be resupplied\n     to subsequent callers of the \u003ccode\u003eread\u003c/code\u003e method, followed by\n     any bytes that otherwise would have been the next input data as of\n     the time of the call to \u003ccode\u003ereset\u003c/code\u003e. \u003c/ul\u003e\n\n \u003cli\u003e If the method \u003ccode\u003emarkSupported\u003c/code\u003e returns\n \u003ccode\u003efalse\u003c/code\u003e, then:\n\n     \u003cul\u003e\u003cli\u003e The call to \u003ccode\u003ereset\u003c/code\u003e may throw an\n     \u003ccode\u003eIOException\u003c/code\u003e.\n\n     \u003cli\u003e If an \u003ccode\u003eIOException\u003c/code\u003e is not thrown, then the stream\n     is reset to a fixed state that depends on the particular type of the\n     input stream and how it was created. The bytes that will be supplied\n     to subsequent callers of the \u003ccode\u003eread\u003c/code\u003e method depend on the\n     particular type of the input stream. \u003c/ul\u003e\u003c/ul\u003e\n\n \u003cp\u003eThe method \u003ccode\u003ereset\u003c/code\u003e for class \u003ccode\u003eInputStream\u003c/code\u003e\n does nothing except throw an \u003ccode\u003eIOException\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"markSupported","comment":"Tests if this input stream supports the \u003ccode\u003emark\u003c/code\u003e and\n \u003ccode\u003ereset\u003c/code\u003e methods. Whether or not \u003ccode\u003emark\u003c/code\u003e and\n \u003ccode\u003ereset\u003c/code\u003e are supported is an invariant property of a\n particular input stream instance. The \u003ccode\u003emarkSupported\u003c/code\u003e method\n of \u003ccode\u003eInputStream\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.io.FilterInputStream","java.io.StringBufferInputStream","java.io.SequenceInputStream","java.io.PipedInputStream","java.io.ObjectInputStream","java.io.FileInputStream","java.io.ByteArrayInputStream"],"enumConstants":[]}