{"name":"FilterInputStream","comment":"A \u003ccode\u003eFilterInputStream\u003c/code\u003e contains\n some other input stream, which it uses as\n its  basic source of data, possibly transforming\n the data along the way or providing  additional\n functionality. The class \u003ccode\u003eFilterInputStream\u003c/code\u003e\n itself simply overrides all  methods of\n \u003ccode\u003eInputStream\u003c/code\u003e with versions that\n pass all requests to the contained  input\n stream. Subclasses of \u003ccode\u003eFilterInputStream\u003c/code\u003e\n may further override some of  these methods\n and may also provide additional methods\n and fields.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FilterInputStream","qualifiedName":"java.io.FilterInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.InputStream","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"read","comment":"Reads the next byte of data from this input stream. The value\n byte is returned as an \u003ccode\u003eint\u003c/code\u003e in the range\n \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e255\u003c/code\u003e. If no byte is available\n because the end of the stream has been reached, the value\n \u003ccode\u003e-1\u003c/code\u003e is returned. This method blocks until input data\n is available, the end of the stream is detected, or an exception\n is thrown.\n \u003cp\u003e\n This method\n simply performs \u003ccode\u003ein.read()\u003c/code\u003e and returns the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003ebyte.length\u003c/code\u003e bytes of data from this\n input stream into an array of bytes. This method blocks until some\n input is available.\n \u003cp\u003e\n This method simply performs the call\n \u003ccode\u003eread(b, 0, b.length)\u003c/code\u003e and returns\n the  result. It is important that it does\n \u003ci\u003enot\u003c/i\u003e do \u003ccode\u003ein.read(b)\u003c/code\u003e instead;\n certain subclasses of  \u003ccode\u003eFilterInputStream\u003c/code\u003e\n depend on the implementation strategy actually\n used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this input stream\n into an array of bytes. If \u003ccode\u003elen\u003c/code\u003e is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and \u003ccode\u003e0\u003c/code\u003e is returned.\n \u003cp\u003e\n This method simply performs \u003ccode\u003ein.read(b, off, len)\u003c/code\u003e\n and returns the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skip","comment":"Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from the\n input stream. The \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly \u003ccode\u003e0\u003c/code\u003e. The actual number of bytes skipped is\n returned.\n \u003cp\u003e\n This method simply performs \u003ccode\u003ein.skip(n)\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"available","comment":"Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n caller of a method for this input stream. The next caller might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n \u003cp\u003e\n This method returns the result of {@link #in in}.available().","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this input stream and releases any system resources\n associated with the stream.\n This\n method simply performs \u003ccode\u003ein.close()\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"mark","comment":"Marks the current position in this input stream. A subsequent\n call to the \u003ccode\u003ereset\u003c/code\u003e method repositions this stream at\n the last marked position so that subsequent reads re-read the same bytes.\n \u003cp\u003e\n The \u003ccode\u003ereadlimit\u003c/code\u003e argument tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.\n \u003cp\u003e\n This method simply performs \u003ccode\u003ein.mark(readlimit)\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"readlimit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"Repositions this stream to the position at the time the\n \u003ccode\u003emark\u003c/code\u003e method was last called on this input stream.\n \u003cp\u003e\n This method\n simply performs \u003ccode\u003ein.reset()\u003c/code\u003e.\n \u003cp\u003e\n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what\u0027s in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parse, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails.\n If this happens within readlimit bytes, it allows the outer\n code to reset the stream and try another parser.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"markSupported","comment":"Tests if this input stream supports the \u003ccode\u003emark\u003c/code\u003e\n and \u003ccode\u003ereset\u003c/code\u003e methods.\n This method\n simply performs \u003ccode\u003ein.markSupported()\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.DigestInputStream","java.io.PushbackInputStream","java.io.LineNumberInputStream","java.io.DataInputStream","java.io.BufferedInputStream","java.util.zip.InflaterInputStream","java.util.zip.DeflaterInputStream","java.util.zip.CheckedInputStream"],"enumConstants":[]}