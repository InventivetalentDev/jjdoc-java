{"name":"OutputStream","comment":"This abstract class is the superclass of all classes representing\n an output stream of bytes. An output stream accepts output bytes\n and sends them to some sink.\n \u003cp\u003e\n Applications that need to define a subclass of\n \u003ccode\u003eOutputStream\u003c/code\u003e must always provide at least a method\n that writes one byte of output.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.lang.Object","interfaces":["java.io.Closeable","java.io.Flushable"],"isAbstract":true,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"OutputStream","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"write","comment":"Writes the specified byte to this output stream. The general\n contract for \u003ccode\u003ewrite\u003c/code\u003e is that one byte is written\n to the output stream. The byte to be written is the eight\n low-order bits of the argument \u003ccode\u003eb\u003c/code\u003e. The 24\n high-order bits of \u003ccode\u003eb\u003c/code\u003e are ignored.\n \u003cp\u003e\n Subclasses of \u003ccode\u003eOutputStream\u003c/code\u003e must provide an\n implementation for this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes \u003ccode\u003eb.length\u003c/code\u003e bytes from the specified byte array\n to this output stream. The general contract for \u003ccode\u003ewrite(b)\u003c/code\u003e\n is that it should have exactly the same effect as the call\n \u003ccode\u003ewrite(b, 0, b.length)\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes \u003ccode\u003elen\u003c/code\u003e bytes from the specified byte array\n starting at offset \u003ccode\u003eoff\u003c/code\u003e to this output stream.\n The general contract for \u003ccode\u003ewrite(b, off, len)\u003c/code\u003e is that\n some of the bytes in the array \u003ccode\u003eb\u003c/code\u003e are written to the\n output stream in order; element \u003ccode\u003eb[off]\u003c/code\u003e is the first\n byte written and \u003ccode\u003eb[off+len-1]\u003c/code\u003e is the last byte written\n by this operation.\n \u003cp\u003e\n The \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eOutputStream\u003c/code\u003e calls\n the write method of one argument on each of the bytes to be\n written out. Subclasses are encouraged to override this method and\n provide a more efficient implementation.\n \u003cp\u003e\n If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a\n \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown.\n \u003cp\u003e\n If \u003ccode\u003eoff\u003c/code\u003e is negative, or \u003ccode\u003elen\u003c/code\u003e is negative, or\n \u003ccode\u003eoff+len\u003c/code\u003e is greater than the length of the array\n \u003ccode\u003eb\u003c/code\u003e, then an \u003ctt\u003eIndexOutOfBoundsException\u003c/tt\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flushes this output stream and forces any buffered output bytes\n to be written out. The general contract of \u003ccode\u003eflush\u003c/code\u003e is\n that calling it is an indication that, if any bytes previously\n written have been buffered by the implementation of the output\n stream, such bytes should immediately be written to their\n intended destination.\n \u003cp\u003e\n If the intended destination of this stream is an abstraction provided by\n the underlying operating system, for example a file, then flushing the\n stream guarantees only that bytes previously written to the stream are\n passed to the operating system for writing; it does not guarantee that\n they are actually written to a physical device such as a disk drive.\n \u003cp\u003e\n The \u003ccode\u003eflush\u003c/code\u003e method of \u003ccode\u003eOutputStream\u003c/code\u003e does nothing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this output stream and releases any system resources\n associated with this stream. The general contract of \u003ccode\u003eclose\u003c/code\u003e\n is that it closes the output stream. A closed stream cannot perform\n output operations and cannot be reopened.\n \u003cp\u003e\n The \u003ccode\u003eclose\u003c/code\u003e method of \u003ccode\u003eOutputStream\u003c/code\u003e does nothing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.io.FilterOutputStream","java.io.PipedOutputStream","java.io.ObjectOutputStream","java.io.FileOutputStream","java.io.ByteArrayOutputStream"],"enumConstants":[]}