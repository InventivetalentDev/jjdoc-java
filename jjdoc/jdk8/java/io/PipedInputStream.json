{"name":"PipedInputStream","comment":"A piped input stream should be connected\n to a piped output stream; the piped  input\n stream then provides whatever data bytes\n are written to the piped output  stream.\n Typically, data is read from a \u003ccode\u003ePipedInputStream\u003c/code\u003e\n object by one thread  and data is written\n to the corresponding \u003ccode\u003ePipedOutputStream\u003c/code\u003e\n by some  other thread. Attempting to use\n both objects from a single thread is not\n recommended, as it may deadlock the thread.\n The piped input stream contains a buffer,\n decoupling read operations from write operations,\n within limits.\n A pipe is said to be \u003ca name\u003d\"BROKEN\"\u003e \u003ci\u003ebroken\u003c/i\u003e \u003c/a\u003e if a\n thread that was providing data bytes to the connected\n piped output stream is no longer alive.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PipedInputStream","qualifiedName":"java.io.PipedInputStream","dimension":"","elementType":{},"package":"java.io","superclass":"java.io.InputStream","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PipedInputStream","comment":"Creates a \u003ccode\u003ePipedInputStream\u003c/code\u003e so\n that it is connected to the piped output\n stream \u003ccode\u003esrc\u003c/code\u003e. Data bytes written\n to \u003ccode\u003esrc\u003c/code\u003e will then be  available\n as input from this stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.PipedOutputStream)","flatSignature":"(PipedOutputStream)","parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"PipedOutputStream","qualifiedName":"java.io.PipedOutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PipedInputStream","comment":"Creates a \u003ccode\u003ePipedInputStream\u003c/code\u003e so that it is\n connected to the piped output stream\n \u003ccode\u003esrc\u003c/code\u003e and uses the specified pipe size for\n the pipe\u0027s buffer.\n Data bytes written to \u003ccode\u003esrc\u003c/code\u003e will then\n be available as input from this stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.PipedOutputStream, int)","flatSignature":"(PipedOutputStream, int)","parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"PipedOutputStream","qualifiedName":"java.io.PipedOutputStream","dimension":"","elementType":{}}},{"name":"pipeSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PipedInputStream","comment":"Creates a \u003ccode\u003ePipedInputStream\u003c/code\u003e so\n that it is not yet {@linkplain #connect(java.io.PipedOutputStream)\n connected}.\n It must be {@linkplain java.io.PipedOutputStream#connect(\n java.io.PipedInputStream) connected} to a\n \u003ccode\u003ePipedOutputStream\u003c/code\u003e before being used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"PipedInputStream","comment":"Creates a \u003ccode\u003ePipedInputStream\u003c/code\u003e so that it is not yet\n {@linkplain #connect(java.io.PipedOutputStream) connected} and\n uses the specified pipe size for the pipe\u0027s buffer.\n It must be {@linkplain java.io.PipedOutputStream#connect(\n java.io.PipedInputStream)\n connected} to a \u003ccode\u003ePipedOutputStream\u003c/code\u003e before being used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"pipeSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"connect","comment":"Causes this piped input stream to be connected\n to the piped  output stream \u003ccode\u003esrc\u003c/code\u003e.\n If this object is already connected to some\n other piped output  stream, an \u003ccode\u003eIOException\u003c/code\u003e\n is thrown.\n \u003cp\u003e\n If \u003ccode\u003esrc\u003c/code\u003e is an\n unconnected piped output stream and \u003ccode\u003esnk\u003c/code\u003e\n is an unconnected piped input stream, they\n may be connected by either the call:\n\n \u003cpre\u003e\u003ccode\u003esnk.connect(src)\u003c/code\u003e \u003c/pre\u003e\n \u003cp\u003e\n or the call:\n\n \u003cpre\u003e\u003ccode\u003esrc.connect(snk)\u003c/code\u003e \u003c/pre\u003e\n \u003cp\u003e\n The two calls have the same effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.PipedOutputStream)","flatSignature":"(PipedOutputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"PipedOutputStream","qualifiedName":"java.io.PipedOutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"read","comment":"Reads the next byte of data from this piped input stream. The\n value byte is returned as an \u003ccode\u003eint\u003c/code\u003e in the range\n \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e255\u003c/code\u003e.\n This method blocks until input data is available, the end of the\n stream is detected, or an exception is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"read","comment":"Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this piped input\n stream into an array of bytes. Less than \u003ccode\u003elen\u003c/code\u003e bytes\n will be read if the end of the data stream is reached or if\n \u003ccode\u003elen\u003c/code\u003e exceeds the pipe\u0027s buffer size.\n If \u003ccode\u003elen \u003c/code\u003e is zero, then no bytes are read and 0 is returned;\n otherwise, the method blocks until at least 1 byte of input is\n available, end of the stream has been detected, or an exception is\n thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"available","comment":"Returns the number of bytes that can be read from this input\n stream without blocking.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this piped input stream and releases any system resources\n associated with the stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}