{"name":"DataOutput","comment":"The \u003ccode\u003eDataOutput\u003c/code\u003e interface provides\n for converting data from any of the Java\n primitive types to a series of bytes and\n writing these bytes to a binary stream.\n There is  also a facility for converting\n a \u003ccode\u003eString\u003c/code\u003e into\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e\n format and writing the resulting series\n of bytes.\n \u003cp\u003e\n For all the methods in this interface that\n write bytes, it is generally true that if\n a byte cannot be written for any reason,\n an \u003ccode\u003eIOException\u003c/code\u003e is thrown.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"DataOutput","qualifiedName":"java.io.DataOutput","dimension":"","elementType":{},"package":"java.io","interfaces":[],"isAbstract":true,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"write","comment":"Writes to the output stream the eight\n low-order bits of the argument \u003ccode\u003eb\u003c/code\u003e.\n The 24 high-order  bits of \u003ccode\u003eb\u003c/code\u003e\n are ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"write","comment":"Writes to the output stream all the bytes in array \u003ccode\u003eb\u003c/code\u003e.\n If \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e,\n a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown.\n If \u003ccode\u003eb.length\u003c/code\u003e is zero, then\n no bytes are written. Otherwise, the byte\n \u003ccode\u003eb[0]\u003c/code\u003e is written first, then\n \u003ccode\u003eb[1]\u003c/code\u003e, and so on; the last byte\n written is \u003ccode\u003eb[b.length-1]\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"write","comment":"Writes \u003ccode\u003elen\u003c/code\u003e bytes from array\n \u003ccode\u003eb\u003c/code\u003e, in order,  to\n the output stream.  If \u003ccode\u003eb\u003c/code\u003e\n is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e\n is thrown.  If \u003ccode\u003eoff\u003c/code\u003e is negative,\n or \u003ccode\u003elen\u003c/code\u003e is negative, or \u003ccode\u003eoff+len\u003c/code\u003e\n is greater than the length of the array\n \u003ccode\u003eb\u003c/code\u003e, then an \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e\n is thrown.  If \u003ccode\u003elen\u003c/code\u003e is zero,\n then no bytes are written. Otherwise, the\n byte \u003ccode\u003eb[off]\u003c/code\u003e is written first,\n then \u003ccode\u003eb[off+1]\u003c/code\u003e, and so on; the\n last byte written is \u003ccode\u003eb[off+len-1]\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeBoolean","comment":"Writes a \u003ccode\u003eboolean\u003c/code\u003e value to this output stream.\n If the argument \u003ccode\u003ev\u003c/code\u003e\n is \u003ccode\u003etrue\u003c/code\u003e, the value \u003ccode\u003e(byte)1\u003c/code\u003e\n is written; if \u003ccode\u003ev\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e,\n the  value \u003ccode\u003e(byte)0\u003c/code\u003e is written.\n The byte written by this method may\n be read by the \u003ccode\u003ereadBoolean\u003c/code\u003e\n method of interface \u003ccode\u003eDataInput\u003c/code\u003e,\n which will then return a \u003ccode\u003eboolean\u003c/code\u003e\n equal to \u003ccode\u003ev\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeByte","comment":"Writes to the output stream the eight low-\n order bits of the argument \u003ccode\u003ev\u003c/code\u003e.\n The 24 high-order bits of \u003ccode\u003ev\u003c/code\u003e\n are ignored. (This means  that \u003ccode\u003ewriteByte\u003c/code\u003e\n does exactly the same thing as \u003ccode\u003ewrite\u003c/code\u003e\n for an integer argument.) The byte written\n by this method may be read by the \u003ccode\u003ereadByte\u003c/code\u003e\n method of interface \u003ccode\u003eDataInput\u003c/code\u003e,\n which will then return a \u003ccode\u003ebyte\u003c/code\u003e\n equal to \u003ccode\u003e(byte)v\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeShort","comment":"Writes two bytes to the output\n stream to represent the value of the argument.\n The byte values to be written, in the  order\n shown, are:\n \u003cpre\u003e{@code\n (byte)(0xff \u0026 (v \u003e\u003e 8))\n (byte)(0xff \u0026 v)\n }\u003c/pre\u003e \u003cp\u003e\n The bytes written by this method may be\n read by the \u003ccode\u003ereadShort\u003c/code\u003e method\n of interface \u003ccode\u003eDataInput\u003c/code\u003e , which\n will then return a \u003ccode\u003eshort\u003c/code\u003e equal\n to \u003ccode\u003e(short)v\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeChar","comment":"Writes a \u003ccode\u003echar\u003c/code\u003e value, which\n is comprised of two bytes, to the\n output stream.\n The byte values to be written, in the  order\n shown, are:\n \u003cpre\u003e{@code\n (byte)(0xff \u0026 (v \u003e\u003e 8))\n (byte)(0xff \u0026 v)\n }\u003c/pre\u003e\u003cp\u003e\n The bytes written by this method may be\n read by the \u003ccode\u003ereadChar\u003c/code\u003e method\n of interface \u003ccode\u003eDataInput\u003c/code\u003e , which\n will then return a \u003ccode\u003echar\u003c/code\u003e equal\n to \u003ccode\u003e(char)v\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeInt","comment":"Writes an \u003ccode\u003eint\u003c/code\u003e value, which is\n comprised of four bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n \u003cpre\u003e{@code\n (byte)(0xff \u0026 (v \u003e\u003e 24))\n (byte)(0xff \u0026 (v \u003e\u003e 16))\n (byte)(0xff \u0026 (v \u003e\u003e  8))\n (byte)(0xff \u0026 v)\n }\u003c/pre\u003e\u003cp\u003e\n The bytes written by this method may be read\n by the \u003ccode\u003ereadInt\u003c/code\u003e method of interface\n \u003ccode\u003eDataInput\u003c/code\u003e , which will then\n return an \u003ccode\u003eint\u003c/code\u003e equal to \u003ccode\u003ev\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeLong","comment":"Writes a \u003ccode\u003elong\u003c/code\u003e value, which is\n comprised of eight bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n \u003cpre\u003e{@code\n (byte)(0xff \u0026 (v \u003e\u003e 56))\n (byte)(0xff \u0026 (v \u003e\u003e 48))\n (byte)(0xff \u0026 (v \u003e\u003e 40))\n (byte)(0xff \u0026 (v \u003e\u003e 32))\n (byte)(0xff \u0026 (v \u003e\u003e 24))\n (byte)(0xff \u0026 (v \u003e\u003e 16))\n (byte)(0xff \u0026 (v \u003e\u003e  8))\n (byte)(0xff \u0026 v)\n }\u003c/pre\u003e\u003cp\u003e\n The bytes written by this method may be\n read by the \u003ccode\u003ereadLong\u003c/code\u003e method\n of interface \u003ccode\u003eDataInput\u003c/code\u003e , which\n will then return a \u003ccode\u003elong\u003c/code\u003e equal\n to \u003ccode\u003ev\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeFloat","comment":"Writes a \u003ccode\u003efloat\u003c/code\u003e value,\n which is comprised of four bytes, to the output stream.\n It does this as if it first converts this\n \u003ccode\u003efloat\u003c/code\u003e value to an \u003ccode\u003eint\u003c/code\u003e\n in exactly the manner of the \u003ccode\u003eFloat.floatToIntBits\u003c/code\u003e\n method  and then writes the \u003ccode\u003eint\u003c/code\u003e\n value in exactly the manner of the  \u003ccode\u003ewriteInt\u003c/code\u003e\n method.  The bytes written by this method\n may be read by the \u003ccode\u003ereadFloat\u003c/code\u003e\n method of interface \u003ccode\u003eDataInput\u003c/code\u003e,\n which will then return a \u003ccode\u003efloat\u003c/code\u003e\n equal to \u003ccode\u003ev\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeDouble","comment":"Writes a \u003ccode\u003edouble\u003c/code\u003e value,\n which is comprised of eight bytes, to the output stream.\n It does this as if it first converts this\n \u003ccode\u003edouble\u003c/code\u003e value to a \u003ccode\u003elong\u003c/code\u003e\n in exactly the manner of the \u003ccode\u003eDouble.doubleToLongBits\u003c/code\u003e\n method  and then writes the \u003ccode\u003elong\u003c/code\u003e\n value in exactly the manner of the  \u003ccode\u003ewriteLong\u003c/code\u003e\n method. The bytes written by this method\n may be read by the \u003ccode\u003ereadDouble\u003c/code\u003e\n method of interface \u003ccode\u003eDataInput\u003c/code\u003e,\n which will then return a \u003ccode\u003edouble\u003c/code\u003e\n equal to \u003ccode\u003ev\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"v","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeBytes","comment":"Writes a string to the output stream.\n For every character in the string\n \u003ccode\u003es\u003c/code\u003e,  taken in order, one byte\n is written to the output stream.  If\n \u003ccode\u003es\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e\n is thrown.\u003cp\u003e  If \u003ccode\u003es.length\u003c/code\u003e\n is zero, then no bytes are written. Otherwise,\n the character \u003ccode\u003es[0]\u003c/code\u003e is written\n first, then \u003ccode\u003es[1]\u003c/code\u003e, and so on;\n the last character written is \u003ccode\u003es[s.length-1]\u003c/code\u003e.\n For each character, one byte is written,\n the low-order byte, in exactly the manner\n of the \u003ccode\u003ewriteByte\u003c/code\u003e method . The\n high-order eight bits of each character\n in the string are ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeChars","comment":"Writes every character in the string \u003ccode\u003es\u003c/code\u003e,\n to the output stream, in order,\n two bytes per character. If \u003ccode\u003es\u003c/code\u003e\n is \u003ccode\u003enull\u003c/code\u003e, a \u003ccode\u003eNullPointerException\u003c/code\u003e\n is thrown.  If \u003ccode\u003es.length\u003c/code\u003e\n is zero, then no characters are written.\n Otherwise, the character \u003ccode\u003es[0]\u003c/code\u003e\n is written first, then \u003ccode\u003es[1]\u003c/code\u003e,\n and so on; the last character written is\n \u003ccode\u003es[s.length-1]\u003c/code\u003e. For each character,\n two bytes are actually written, high-order\n byte first, in exactly the manner of the\n \u003ccode\u003ewriteChar\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"writeUTF","comment":"Writes two bytes of length information\n to the output stream, followed\n by the\n \u003ca href\u003d\"DataInput.html#modified-utf-8\"\u003emodified UTF-8\u003c/a\u003e\n representation\n of  every character in the string \u003ccode\u003es\u003c/code\u003e.\n If \u003ccode\u003es\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e,\n a \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown.\n Each character in the string \u003ccode\u003es\u003c/code\u003e\n is converted to a group of one, two, or\n three bytes, depending on the value of the\n character.\u003cp\u003e\n If a character \u003ccode\u003ec\u003c/code\u003e\n is in the range \u003ccode\u003e\u0026#92;u0001\u003c/code\u003e through\n \u003ccode\u003e\u0026#92;u007f\u003c/code\u003e, it is represented\n by one byte:\n \u003cpre\u003e(byte)c \u003c/pre\u003e  \u003cp\u003e\n If a character \u003ccode\u003ec\u003c/code\u003e is \u003ccode\u003e\u0026#92;u0000\u003c/code\u003e\n or is in the range \u003ccode\u003e\u0026#92;u0080\u003c/code\u003e\n through \u003ccode\u003e\u0026#92;u07ff\u003c/code\u003e, then it is\n represented by two bytes, to be written\n in the order shown: \u003cpre\u003e{@code\n (byte)(0xc0 | (0x1f \u0026 (c \u003e\u003e 6)))\n (byte)(0x80 | (0x3f \u0026 c))\n }\u003c/pre\u003e \u003cp\u003e If a character\n \u003ccode\u003ec\u003c/code\u003e is in the range \u003ccode\u003e\u0026#92;u0800\u003c/code\u003e\n through \u003ccode\u003euffff\u003c/code\u003e, then it is\n represented by three bytes, to be written\n in the order shown: \u003cpre\u003e{@code\n (byte)(0xe0 | (0x0f \u0026 (c \u003e\u003e 12)))\n (byte)(0x80 | (0x3f \u0026 (c \u003e\u003e  6)))\n (byte)(0x80 | (0x3f \u0026 c))\n }\u003c/pre\u003e  \u003cp\u003e First,\n the total number of bytes needed to represent\n all the characters of \u003ccode\u003es\u003c/code\u003e is\n calculated. If this number is larger than\n \u003ccode\u003e65535\u003c/code\u003e, then a \u003ccode\u003eUTFDataFormatException\u003c/code\u003e\n is thrown. Otherwise, this length is written\n to the output stream in exactly the manner\n of the \u003ccode\u003ewriteShort\u003c/code\u003e method;\n after this, the one-, two-, or three-byte\n representation of each character in the\n string \u003ccode\u003es\u003c/code\u003e is written.\u003cp\u003e  The\n bytes written by this method may be read\n by the \u003ccode\u003ereadUTF\u003c/code\u003e method of interface\n \u003ccode\u003eDataInput\u003c/code\u003e , which will then\n return a \u003ccode\u003eString\u003c/code\u003e equal to \u003ccode\u003es\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.io.RandomAccessFile","java.io.ObjectOutput","java.io.DataOutputStream"],"enumConstants":[]}