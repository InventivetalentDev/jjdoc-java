{"name":"Locale.Builder","comment":"\u003ccode\u003eBuilder\u003c/code\u003e is used to build instances of \u003ccode\u003eLocale\u003c/code\u003e\n from values configured by the setters.  Unlike the \u003ccode\u003eLocale\u003c/code\u003e\n constructors, the \u003ccode\u003eBuilder\u003c/code\u003e checks if a value configured by a\n setter satisfies the syntax requirements defined by the \u003ccode\u003eLocale\u003c/code\u003e\n class.  A \u003ccode\u003eLocale\u003c/code\u003e object created by a \u003ccode\u003eBuilder\u003c/code\u003e is\n well-formed and can be transformed to a well-formed IETF BCP 47 language tag\n without losing information.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The \u003ccode\u003eLocale\u003c/code\u003e class does not provide any\n syntactic restrictions on variant, while BCP 47 requires each variant\n subtag to be 5 to 8 alphanumerics or a single numeric followed by 3\n alphanumerics.  The method \u003ccode\u003esetVariant\u003c/code\u003e throws\n \u003ccode\u003eIllformedLocaleException\u003c/code\u003e for a variant that does not satisfy\n this restriction. If it is necessary to support such a variant, use a\n Locale constructor.  However, keep in mind that a \u003ccode\u003eLocale\u003c/code\u003e\n object created this way might lose the variant information when\n transformed to a BCP 47 language tag.\n\n \u003cp\u003eThe following example shows how to create a \u003ccode\u003eLocale\u003c/code\u003e object\n with the \u003ccode\u003eBuilder\u003c/code\u003e.\n \u003cblockquote\u003e\n \u003cpre\u003e\n     Locale aLocale \u003d new Builder().setLanguage(\"sr\").setScript(\"Latn\").setRegion(\"RS\").build();\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003eBuilders can be reused; \u003ccode\u003eclear()\u003c/code\u003e resets all\n fields to their default values.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":true,"since":"1.7","innerClasses":[],"isInnerClass":true,"constructors":[{"name":"Builder","comment":"Constructs an empty Builder. The default value of all\n fields, extensions, and private use information is the\n empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"setLocale","comment":"Resets the \u003ccode\u003eBuilder\u003c/code\u003e to match the provided\n \u003ccode\u003elocale\u003c/code\u003e.  Existing state is discarded.\n\n \u003cp\u003eAll fields of the locale must be well-formed, see {@link Locale}.\n\n \u003cp\u003eLocales with any ill-formed fields cause\n \u003ccode\u003eIllformedLocaleException\u003c/code\u003e to be thrown, except for the\n following three cases which are accepted for compatibility\n reasons:\u003cul\u003e\n \u003cli\u003eLocale(\"ja\", \"JP\", \"JP\") is treated as \"ja-JP-u-ca-japanese\"\n \u003cli\u003eLocale(\"th\", \"TH\", \"TH\") is treated as \"th-TH-u-nu-thai\"\n \u003cli\u003eLocale(\"no\", \"NO\", \"NY\") is treated as \"nn-NO\"\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLanguageTag","comment":"Resets the Builder to match the provided IETF BCP 47\n language tag.  Discards the existing state.  Null and the\n empty string cause the builder to be reset, like {@link\n #clear}.  Grandfathered tags (see {@link\n Locale#forLanguageTag}) are converted to their canonical\n form before being processed.  Otherwise, the language tag\n must be well-formed (see {@link Locale}) or an exception is\n thrown (unlike \u003ccode\u003eLocale.forLanguageTag\u003c/code\u003e, which\n just discards ill-formed and following portions of the\n tag).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"languageTag","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLanguage","comment":"Sets the language.  If \u003ccode\u003elanguage\u003c/code\u003e is the empty string or\n null, the language in this \u003ccode\u003eBuilder\u003c/code\u003e is removed.  Otherwise,\n the language must be \u003ca href\u003d\"./Locale.html#def_language\"\u003ewell-formed\u003c/a\u003e\n or an exception is thrown.\n\n \u003cp\u003eThe typical language value is a two or three-letter language\n code as defined in ISO639.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"language","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setScript","comment":"Sets the script. If \u003ccode\u003escript\u003c/code\u003e is null or the empty string,\n the script in this \u003ccode\u003eBuilder\u003c/code\u003e is removed.\n Otherwise, the script must be \u003ca href\u003d\"./Locale.html#def_script\"\u003ewell-formed\u003c/a\u003e or an\n exception is thrown.\n\n \u003cp\u003eThe typical script value is a four-letter script code as defined by ISO 15924.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"script","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setRegion","comment":"Sets the region.  If region is null or the empty string, the region\n in this \u003ccode\u003eBuilder\u003c/code\u003e is removed.  Otherwise,\n the region must be \u003ca href\u003d\"./Locale.html#def_region\"\u003ewell-formed\u003c/a\u003e or an\n exception is thrown.\n\n \u003cp\u003eThe typical region value is a two-letter ISO 3166 code or a\n three-digit UN M.49 area code.\n\n \u003cp\u003eThe country value in the \u003ccode\u003eLocale\u003c/code\u003e created by the\n \u003ccode\u003eBuilder\u003c/code\u003e is always normalized to upper case.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"region","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setVariant","comment":"Sets the variant.  If variant is null or the empty string, the\n variant in this \u003ccode\u003eBuilder\u003c/code\u003e is removed.  Otherwise, it\n must consist of one or more \u003ca href\u003d\"./Locale.html#def_variant\"\u003ewell-formed\u003c/a\u003e\n subtags, or an exception is thrown.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method checks if \u003ccode\u003evariant\u003c/code\u003e\n satisfies the IETF BCP 47 variant subtag\u0027s syntax requirements,\n and normalizes the value to lowercase letters.  However,\n the \u003ccode\u003eLocale\u003c/code\u003e class does not impose any syntactic\n restriction on variant, and the variant value in\n \u003ccode\u003eLocale\u003c/code\u003e is case sensitive.  To set such a variant,\n use a Locale constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"variant","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setExtension","comment":"Sets the extension for the given key. If the value is null or the\n empty string, the extension is removed.  Otherwise, the extension\n must be \u003ca href\u003d\"./Locale.html#def_extensions\"\u003ewell-formed\u003c/a\u003e or an exception\n is thrown.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The key {@link Locale#UNICODE_LOCALE_EXTENSION\n UNICODE_LOCALE_EXTENSION} (\u0027u\u0027) is used for the Unicode locale extension.\n Setting a value for this key replaces any existing Unicode locale key/type\n pairs with those defined in the extension.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The key {@link Locale#PRIVATE_USE_EXTENSION\n PRIVATE_USE_EXTENSION} (\u0027x\u0027) is used for the private use code. To be\n well-formed, the value for this key needs only to have subtags of one to\n eight alphanumeric characters, not two to eight as in the general case.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char, java.lang.String)","flatSignature":"(char, String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setUnicodeLocaleKeyword","comment":"Sets the Unicode locale keyword type for the given key.  If the type\n is null, the Unicode keyword is removed.  Otherwise, the key must be\n non-null and both key and type must be \u003ca\n href\u003d\"./Locale.html#def_locale_extension\"\u003ewell-formed\u003c/a\u003e or an exception\n is thrown.\n\n \u003cp\u003eKeys and types are converted to lower case.\n\n \u003cp\u003e\u003cb\u003eNote\u003c/b\u003e:Setting the \u0027u\u0027 extension via {@link #setExtension}\n replaces all Unicode locale keywords with those defined in the\n extension.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addUnicodeLocaleAttribute","comment":"Adds a unicode locale attribute, if not already present, otherwise\n has no effect.  The attribute must not be null and must be \u003ca\n href\u003d\"./Locale.html#def_locale_extension\"\u003ewell-formed\u003c/a\u003e or an exception\n is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"attribute","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeUnicodeLocaleAttribute","comment":"Removes a unicode locale attribute, if present, otherwise has no\n effect.  The attribute must not be null and must be \u003ca\n href\u003d\"./Locale.html#def_locale_extension\"\u003ewell-formed\u003c/a\u003e or an exception\n is thrown.\n\n \u003cp\u003eAttribute comparision for removal is case-insensitive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"attribute","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Resets the builder to its initial, empty state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clearExtensions","comment":"Resets the extensions to their initial, empty state.\n Language, script, region and variant are unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Locale.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"build","comment":"Returns an instance of \u003ccode\u003eLocale\u003c/code\u003e created from the fields set\n on this builder.\n\n \u003cp\u003eThis applies the conversions listed in {@link Locale#forLanguageTag}\n when constructing a Locale. (Grandfathered tags are handled in\n {@link #setLanguageTag}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}