{"name":"SimpleTimeZone","comment":"\u003ccode\u003eSimpleTimeZone\u003c/code\u003e is a concrete subclass of \u003ccode\u003eTimeZone\u003c/code\u003e\n that represents a time zone for use with a Gregorian calendar.\n The class holds an offset from GMT, called \u003cem\u003eraw offset\u003c/em\u003e, and start\n and end rules for a daylight saving time schedule.  Since it only holds\n single values for each, it cannot handle historical changes in the offset\n from GMT and the daylight saving schedule, except that the {@link\n #setStartYear setStartYear} method can specify the year when the daylight\n saving time schedule starts in effect.\n \u003cp\u003e\n To construct a \u003ccode\u003eSimpleTimeZone\u003c/code\u003e with a daylight saving time\n schedule, the schedule can be described with a set of rules,\n \u003cem\u003estart-rule\u003c/em\u003e and \u003cem\u003eend-rule\u003c/em\u003e. A day when daylight saving time\n starts or ends is specified by a combination of \u003cem\u003emonth\u003c/em\u003e,\n \u003cem\u003eday-of-month\u003c/em\u003e, and \u003cem\u003eday-of-week\u003c/em\u003e values. The \u003cem\u003emonth\u003c/em\u003e\n value is represented by a Calendar {@link Calendar#MONTH MONTH} field\n value, such as {@link Calendar#MARCH}. The \u003cem\u003eday-of-week\u003c/em\u003e value is\n represented by a Calendar {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value,\n such as {@link Calendar#SUNDAY SUNDAY}. The meanings of value combinations\n are as follows.\n\n \u003cul\u003e\n \u003cli\u003e\u003cb\u003eExact day of month\u003c/b\u003e\u003cbr\u003e\n To specify an exact day of month, set the \u003cem\u003emonth\u003c/em\u003e and\n \u003cem\u003eday-of-month\u003c/em\u003e to an exact value, and \u003cem\u003eday-of-week\u003c/em\u003e to zero. For\n example, to specify March 1, set the \u003cem\u003emonth\u003c/em\u003e to {@link Calendar#MARCH\n MARCH}, \u003cem\u003eday-of-month\u003c/em\u003e to 1, and \u003cem\u003eday-of-week\u003c/em\u003e to 0.\u003c/li\u003e\n\n \u003cli\u003e\u003cb\u003eDay of week on or after day of month\u003c/b\u003e\u003cbr\u003e\n To specify a day of week on or after an exact day of month, set the\n \u003cem\u003emonth\u003c/em\u003e to an exact month value, \u003cem\u003eday-of-month\u003c/em\u003e to the day on\n or after which the rule is applied, and \u003cem\u003eday-of-week\u003c/em\u003e to a negative {@link\n Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the\n second Sunday of April, set \u003cem\u003emonth\u003c/em\u003e to {@link Calendar#APRIL APRIL},\n \u003cem\u003eday-of-month\u003c/em\u003e to 8, and \u003cem\u003eday-of-week\u003c/em\u003e to \u003ccode\u003e-\u003c/code\u003e{@link\n Calendar#SUNDAY SUNDAY}.\u003c/li\u003e\n\n \u003cli\u003e\u003cb\u003eDay of week on or before day of month\u003c/b\u003e\u003cbr\u003e\n To specify a day of the week on or before an exact day of the month, set\n \u003cem\u003eday-of-month\u003c/em\u003e and \u003cem\u003eday-of-week\u003c/em\u003e to a negative value. For\n example, to specify the last Wednesday on or before the 21st of March, set\n \u003cem\u003emonth\u003c/em\u003e to {@link Calendar#MARCH MARCH}, \u003cem\u003eday-of-month\u003c/em\u003e is -21\n and \u003cem\u003eday-of-week\u003c/em\u003e is \u003ccode\u003e-\u003c/code\u003e{@link Calendar#WEDNESDAY WEDNESDAY}. \u003c/li\u003e\n\n \u003cli\u003e\u003cb\u003eLast day-of-week of month\u003c/b\u003e\u003cbr\u003e\n To specify, the last day-of-week of the month, set \u003cem\u003eday-of-week\u003c/em\u003e to a\n {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and \u003cem\u003eday-of-month\u003c/em\u003e to\n -1. For example, to specify the last Sunday of October, set \u003cem\u003emonth\u003c/em\u003e\n to {@link Calendar#OCTOBER OCTOBER}, \u003cem\u003eday-of-week\u003c/em\u003e to {@link\n Calendar#SUNDAY SUNDAY} and \u003cem\u003eday-of-month\u003c/em\u003e to -1.  \u003c/li\u003e\n\n \u003c/ul\u003e\n The time of the day at which daylight saving time starts or ends is\n specified by a millisecond value within the day. There are three kinds of\n \u003cem\u003emode\u003c/em\u003es to specify the time: {@link #WALL_TIME}, {@link\n #STANDARD_TIME} and {@link #UTC_TIME}. For example, if daylight\n saving time ends\n at 2:00 am in the wall clock time, it can be specified by 7200000\n milliseconds in the {@link #WALL_TIME} mode. In this case, the wall clock time\n for an \u003cem\u003eend-rule\u003c/em\u003e means the same thing as the daylight time.\n \u003cp\u003e\n The following are examples of parameters for constructing time zone objects.\n \u003cpre\u003e\u003ccode\u003e\n      // Base GMT offset: -8:00\n      // DST starts:      at 2:00am in standard time\n      //                  on the first Sunday in April\n      // DST ends:        at 2:00am in daylight time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(-28800000,\n                     \"America/Los_Angeles\",\n                     Calendar.APRIL, 1, -Calendar.SUNDAY,\n                     7200000,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     7200000,\n                     3600000)\n\n      // Base GMT offset: +1:00\n      // DST starts:      at 1:00am in UTC time\n      //                  on the last Sunday in March\n      // DST ends:        at 1:00am in UTC time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(3600000,\n                     \"Europe/Paris\",\n                     Calendar.MARCH, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     3600000)\n \u003c/code\u003e\u003c/pre\u003e\n These parameter rules are also applicable to the set rule methods, such as\n \u003ccode\u003esetStartRule\u003c/code\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SimpleTimeZone","qualifiedName":"java.util.SimpleTimeZone","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.TimeZone","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SimpleTimeZone","comment":"Constructs a SimpleTimeZone with the given base time zone offset from GMT\n and time zone ID with no daylight saving time schedule.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.lang.String)","flatSignature":"(int, String)","parameters":[{"name":"rawOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"ID","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"SimpleTimeZone","comment":"Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both \u003ccode\u003estartTime\u003c/code\u003e and \u003ccode\u003eendTime\u003c/code\u003e are specified to be\n represented in the wall clock time. The amount of daylight saving is\n assumed to be 3600000 milliseconds (i.e., one hour). This constructor is\n equivalent to:\n \u003cpre\u003e\u003ccode\u003e\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    3600000)\n \u003c/code\u003e\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.lang.String, int, int, int, int, int, int, int, int)","flatSignature":"(int, String, int, int, int, int, int, int, int, int)","parameters":[{"name":"rawOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"ID","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"startMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"SimpleTimeZone","comment":"Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both \u003ccode\u003estartTime\u003c/code\u003e and \u003ccode\u003eendTime\u003c/code\u003e are assumed to be\n represented in the wall clock time. This constructor is equivalent to:\n \u003cpre\u003e\u003ccode\u003e\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    dstSavings)\n \u003c/code\u003e\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.lang.String, int, int, int, int, int, int, int, int, int)","flatSignature":"(int, String, int, int, int, int, int, int, int, int, int)","parameters":[{"name":"rawOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"ID","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"startMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dstSavings","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"SimpleTimeZone","comment":"Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n This constructor takes the full set of the start and end rules\n parameters, including modes of \u003ccode\u003estartTime\u003c/code\u003e and\n \u003ccode\u003eendTime\u003c/code\u003e. The mode specifies either {@link #WALL_TIME wall\n time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC\n time}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)","flatSignature":"(int, String, int, int, int, int, int, int, int, int, int, int, int)","parameters":[{"name":"rawOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"ID","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"startMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTimeMode","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTimeMode","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dstSavings","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"WALL_TIME","comment":"Constant for a mode of start or end time specified as wall clock\n time.  Wall clock time is standard time for the onset rule, and\n daylight time for the end rule.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"STANDARD_TIME","comment":"Constant for a mode of start or end time specified as standard time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"UTC_TIME","comment":"Constant for a mode of start or end time specified as UTC. European\n Union rules are specified as UTC time, for example.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"}],"methods":[{"name":"setStartYear","comment":"Sets the daylight saving time starting year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setStartRule","comment":"Sets the daylight saving time start rule. For example, if daylight saving\n time starts on the first Sunday in April at 2 am in local wall clock\n time, you can set the start rule by calling:\n \u003cpre\u003e\u003ccode\u003esetStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);\u003c/code\u003e\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int)","flatSignature":"(int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"startMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setStartRule","comment":"Sets the daylight saving time start rule to a fixed date within a month.\n This method is equivalent to:\n \u003cpre\u003e\u003ccode\u003esetStartRule(startMonth, startDay, 0, startTime)\u003c/code\u003e\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"startMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setStartRule","comment":"Sets the daylight saving time start rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, boolean)","flatSignature":"(int, int, int, int, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"startMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"startTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"after","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setEndRule","comment":"Sets the daylight saving time end rule. For example, if daylight saving time\n ends on the last Sunday in October at 2 am in wall clock time,\n you can set the end rule by calling:\n \u003ccode\u003esetEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);\u003c/code\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int)","flatSignature":"(int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setEndRule","comment":"Sets the daylight saving time end rule to a fixed date within a month.\n This method is equivalent to:\n \u003cpre\u003e\u003ccode\u003esetEndRule(endMonth, endDay, 0, endTime)\u003c/code\u003e\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setEndRule","comment":"Sets the daylight saving time end rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, boolean)","flatSignature":"(int, int, int, int, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"endMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endTime","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"after","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOffset","comment":"Returns the offset of this time zone from UTC at the given\n time. If daylight saving time is in effect at the given time,\n the offset value is adjusted with the amount of daylight\n saving.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOffset","comment":"Returns the difference in milliseconds between local time and\n UTC, taking into account both the raw offset and the effect of\n daylight saving, for the specified date and time.  This method\n assumes that the start and end month are distinct.  It also\n uses a default {@link GregorianCalendar} object as its\n underlying calendar, such as for determining leap years.  Do\n not use the result of this method with a calendar other than a\n default \u003ccode\u003eGregorianCalendar\u003c/code\u003e.\n\n \u003cp\u003e\u003cem\u003eNote:  In general, clients should use\n \u003ccode\u003eCalendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)\u003c/code\u003e\n instead of calling this method.\u003c/em\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"day","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"millis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRawOffset","comment":"Gets the GMT offset for this time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setRawOffset","comment":"Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offsetMillis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setDSTSavings","comment":"Sets the amount of time in milliseconds that the clock is advanced\n during daylight saving time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millisSavedDuringDST","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDSTSavings","comment":"Returns the amount of time in milliseconds that the clock is\n advanced during daylight saving time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"useDaylightTime","comment":"Queries if this time zone uses daylight saving time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"observesDaylightTime","comment":"Returns {@code true} if this {@code SimpleTimeZone} observes\n Daylight Saving Time. This method is equivalent to {@link\n #useDaylightTime()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"inDaylightTime","comment":"Queries if the given date is in daylight saving time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Returns a clone of this \u003ccode\u003eSimpleTimeZone\u003c/code\u003e instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Generates the hash code for the SimpleDateFormat object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the equality of two \u003ccode\u003eSimpleTimeZone\u003c/code\u003e objects.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasSameRules","comment":"Returns \u003ccode\u003etrue\u003c/code\u003e if this zone has the same rules and offset as another zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}