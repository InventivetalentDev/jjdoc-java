{"name":"ListIterator","comment":"An iterator for lists that allows the programmer\n to traverse the list in either direction, modify\n the list during iteration, and obtain the iterator\u0027s\n current position in the list. A {@code ListIterator}\n has no current element; its \u003cI\u003ecursor position\u003c/I\u003e always\n lies between the element that would be returned by a call\n to {@code previous()} and the element that would be\n returned by a call to {@code next()}.\n An iterator for a list of length {@code n} has {@code n+1} possible\n cursor positions, as illustrated by the carets ({@code ^}) below:\n \u003cPRE\u003e\n                      Element(0)   Element(1)   Element(2)   ... Element(n-1)\n cursor positions:  ^            ^            ^            ^                  ^\n \u003c/PRE\u003e\n Note that the {@link #remove} and {@link #set(Object)} methods are\n \u003ci\u003enot\u003c/i\u003e defined in terms of the cursor position;  they are defined to\n operate on the last element returned by a call to {@link #next} or\n {@link #previous()}.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ListIterator","qualifiedName":"java.util.ListIterator","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.Iterator"],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"hasNext","comment":"Returns {@code true} if this list iterator has more elements when\n traversing the list in the forward direction. (In other words,\n returns {@code true} if {@link #next} would return an element rather\n than throwing an exception.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"next","comment":"Returns the next element in the list and advances the cursor position.\n This method may be called repeatedly to iterate through the list,\n or intermixed with calls to {@link #previous} to go back and forth.\n (Note that alternating calls to {@code next} and {@code previous}\n will return the same element repeatedly.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasPrevious","comment":"Returns {@code true} if this list iterator has more elements when\n traversing the list in the reverse direction.  (In other words,\n returns {@code true} if {@link #previous} would return an element\n rather than throwing an exception.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"previous","comment":"Returns the previous element in the list and moves the cursor\n position backwards.  This method may be called repeatedly to\n iterate through the list backwards, or intermixed with calls to\n {@link #next} to go back and forth.  (Note that alternating calls\n to {@code next} and {@code previous} will return the same\n element repeatedly.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"nextIndex","comment":"Returns the index of the element that would be returned by a\n subsequent call to {@link #next}. (Returns list size if the list\n iterator is at the end of the list.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"previousIndex","comment":"Returns the index of the element that would be returned by a\n subsequent call to {@link #previous}. (Returns -1 if the list\n iterator is at the beginning of the list.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"remove","comment":"Removes from the list the last element that was returned by {@link\n #next} or {@link #previous} (optional operation).  This call can\n only be made once per call to {@code next} or {@code previous}.\n It can be made only if {@link #add} has not been\n called after the last call to {@code next} or {@code previous}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"set","comment":"Replaces the last element returned by {@link #next} or\n {@link #previous} with the specified element (optional operation).\n This call can be made only if neither {@link #remove} nor {@link\n #add} have been called after the last call to {@code next} or\n {@code previous}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"add","comment":"Inserts the specified element into the list (optional operation).\n The element is inserted immediately before the element that\n would be returned by {@link #next}, if any, and after the element\n that would be returned by {@link #previous}, if any.  (If the\n list contains no elements, the new element becomes the sole element\n on the list.)  The new element is inserted before the implicit\n cursor: a subsequent call to {@code next} would be unaffected, and a\n subsequent call to {@code previous} would return the new element.\n (This call increases by one the value that would be returned by a\n call to {@code nextIndex} or {@code previousIndex}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"enumConstants":[]}