{"name":"LoggingMXBean","comment":"The management interface for the logging facility. It is recommended\n to use the {@link java.lang.management.PlatformLoggingMXBean} management\n interface that implements all attributes defined in this\n {@code LoggingMXBean}.  The\n {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n ManagementFactory.getPlatformMXBean} method can be used to obtain\n the {@code PlatformLoggingMXBean} object representing the management\n interface for logging.\n\n \u003cp\u003eThere is a single global instance of the \u003ctt\u003eLoggingMXBean\u003c/tt\u003e.\n This instance is an {@link javax.management.MXBean MXBean} that\n can be obtained by calling the {@link LogManager#getLoggingMXBean}\n method or from the\n {@linkplain java.lang.management.ManagementFactory#getPlatformMBeanServer\n platform \u003ctt\u003eMBeanServer\u003c/tt\u003e}.\n \u003cp\u003e\n The {@link javax.management.ObjectName ObjectName} that uniquely identifies\n the management interface for logging within the {@code MBeanServer} is:\n \u003cpre\u003e\n    {@link LogManager#LOGGING_MXBEAN_NAME java.util.logging:type\u003dLogging}\n \u003c/pre\u003e\n \u003cp\u003e\n The instance registered in the platform {@code MBeanServer}\n is also a {@link java.lang.management.PlatformLoggingMXBean}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"LoggingMXBean","qualifiedName":"java.util.logging.LoggingMXBean","dimension":"","elementType":{},"package":"java.util.logging","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getLoggerNames","comment":"Returns the list of currently registered logger names. This method\n calls {@link LogManager#getLoggerNames} and returns a list\n of the logger names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLoggerLevel","comment":"Gets the name of the log level associated with the specified logger.\n If the specified logger does not exist, \u003ctt\u003enull\u003c/tt\u003e\n is returned.\n This method first finds the logger of the given name and\n then returns the name of the log level by calling:\n \u003cblockquote\u003e\n   {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};\n \u003c/blockquote\u003e\n\n \u003cp\u003e\n If the \u003ctt\u003eLevel\u003c/tt\u003e of the specified logger is \u003ctt\u003enull\u003c/tt\u003e,\n which means that this logger\u0027s effective level is inherited\n from its parent, an empty string will be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"loggerName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLoggerLevel","comment":"Sets the specified logger to the specified new level.\n If the \u003ctt\u003elevelName\u003c/tt\u003e is not \u003ctt\u003enull\u003c/tt\u003e, the level\n of the specified logger is set to the parsed \u003ctt\u003eLevel\u003c/tt\u003e\n matching the \u003ctt\u003elevelName\u003c/tt\u003e.\n If the \u003ctt\u003elevelName\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, the level\n of the specified logger is set to \u003ctt\u003enull\u003c/tt\u003e and\n the effective level of the logger is inherited from\n its nearest ancestor with a specific (non-null) level value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"loggerName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"levelName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getParentLoggerName","comment":"Returns the name of the parent for the specified logger.\n If the specified logger does not exist, \u003ctt\u003enull\u003c/tt\u003e is returned.\n If the specified logger is the root \u003ctt\u003eLogger\u003c/tt\u003e in the namespace,\n the result will be an empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"loggerName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}