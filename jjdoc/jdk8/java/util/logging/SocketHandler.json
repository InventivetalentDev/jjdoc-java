{"name":"SocketHandler","comment":"Simple network logging \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cp\u003e\n \u003ctt\u003eLogRecords\u003c/tt\u003e are published to a network stream connection.  By default\n the \u003ctt\u003eXMLFormatter\u003c/tt\u003e class is used for formatting.\n \u003cp\u003e\n \u003cb\u003eConfiguration:\u003c/b\u003e\n By default each \u003ctt\u003eSocketHandler\u003c/tt\u003e is initialized using the following\n \u003ctt\u003eLogManager\u003c/tt\u003e configuration properties where \u003ctt\u003e\u0026lt;handler-name\u0026gt;\u003c/tt\u003e\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \u003cul\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.level\n        specifies the default level for the \u003ctt\u003eHandler\u003c/tt\u003e\n        (defaults to \u003ctt\u003eLevel.ALL\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.filter\n        specifies the name of a \u003ctt\u003eFilter\u003c/tt\u003e class to use\n        (defaults to no \u003ctt\u003eFilter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.formatter\n        specifies the name of a \u003ctt\u003eFormatter\u003c/tt\u003e class to use\n        (defaults to \u003ctt\u003ejava.util.logging.XMLFormatter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.host\n        specifies the target host name to connect to (no default). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.port\n        specifies the target TCP port to use (no default). \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For example, the properties for {@code SocketHandler} would be:\n \u003cul\u003e\n \u003cli\u003e   java.util.logging.SocketHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   java.util.logging.SocketHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \u003cul\u003e\n \u003cli\u003e   com.foo.MyHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   com.foo.MyHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n The output IO stream is buffered, but is flushed after each\n \u003ctt\u003eLogRecord\u003c/tt\u003e is written.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SocketHandler","qualifiedName":"java.util.logging.SocketHandler","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.util.logging.StreamHandler","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SocketHandler","comment":"Create a \u003ctt\u003eSocketHandler\u003c/tt\u003e, using only \u003ctt\u003eLogManager\u003c/tt\u003e properties\n (or their defaults).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"SocketHandler","comment":"Construct a \u003ctt\u003eSocketHandler\u003c/tt\u003e using a specified host and port.\n\n The \u003ctt\u003eSocketHandler\u003c/tt\u003e is configured based on \u003ctt\u003eLogManager\u003c/tt\u003e\n properties (or their default values) except that the given target host\n and port arguments are used. If the host argument is empty, but not\n null String then the localhost is used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"close","comment":"Close this output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"publish","comment":"Format and publish a \u003ctt\u003eLogRecord\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}