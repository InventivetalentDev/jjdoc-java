{"name":"LogManager","comment":"There is a single global LogManager object that is used to\n maintain a set of shared state about Loggers and log services.\n \u003cp\u003e\n This LogManager object:\n \u003cul\u003e\n \u003cli\u003e Manages a hierarchical namespace of Logger objects.  All\n      named Loggers are stored in this namespace.\n \u003cli\u003e Manages a set of logging control properties.  These are\n      simple key-value pairs that can be used by Handlers and\n      other logging objects to configure themselves.\n \u003c/ul\u003e\n \u003cp\u003e\n The global LogManager object can be retrieved using LogManager.getLogManager().\n The LogManager object is created during class initialization and\n cannot subsequently be changed.\n \u003cp\u003e\n At startup the LogManager class is located using the\n java.util.logging.manager system property.\n \u003cp\u003e\n The LogManager defines two optional system properties that allow control over\n the initial configuration:\n \u003cul\u003e\n \u003cli\u003e\"java.util.logging.config.class\"\n \u003cli\u003e\"java.util.logging.config.file\"\n \u003c/ul\u003e\n These two properties may be specified on the command line to the \"java\"\n command, or as system property definitions passed to JNI_CreateJavaVM.\n \u003cp\u003e\n If the \"java.util.logging.config.class\" property is set, then the\n property value is treated as a class name.  The given class will be\n loaded, an object will be instantiated, and that object\u0027s constructor\n is responsible for reading in the initial configuration.  (That object\n may use other system properties to control its configuration.)  The\n alternate configuration class can use \u003ctt\u003ereadConfiguration(InputStream)\u003c/tt\u003e\n to define properties in the LogManager.\n \u003cp\u003e\n If \"java.util.logging.config.class\" property is \u003cb\u003enot\u003c/b\u003e set,\n then the \"java.util.logging.config.file\" system property can be used\n to specify a properties file (in java.util.Properties format). The\n initial logging configuration will be read from this file.\n \u003cp\u003e\n If neither of these properties is defined then the LogManager uses its\n default configuration. The default configuration is typically loaded from the\n properties file \"{@code lib/logging.properties}\" in the Java installation\n directory.\n \u003cp\u003e\n The properties for loggers and Handlers will have names starting\n with the dot-separated name for the handler or logger.\n \u003cp\u003e\n The global logging properties may include:\n \u003cul\u003e\n \u003cli\u003eA property \"handlers\".  This defines a whitespace or comma separated\n list of class names for handler classes to load and register as\n handlers on the root Logger (the Logger named \"\").  Each class\n name must be for a Handler class which has a default constructor.\n Note that these Handlers may be created lazily, when they are\n first used.\n\n \u003cli\u003eA property \"\u0026lt;logger\u0026gt;.handlers\". This defines a whitespace or\n comma separated list of class names for handlers classes to\n load and register as handlers to the specified logger. Each class\n name must be for a Handler class which has a default constructor.\n Note that these Handlers may be created lazily, when they are\n first used.\n\n \u003cli\u003eA property \"\u0026lt;logger\u0026gt;.useParentHandlers\". This defines a boolean\n value. By default every logger calls its parent in addition to\n handling the logging message itself, this often result in messages\n being handled by the root logger as well. When setting this property\n to false a Handler needs to be configured for this logger otherwise\n no logging messages are delivered.\n\n \u003cli\u003eA property \"config\".  This property is intended to allow\n arbitrary configuration code to be run.  The property defines a\n whitespace or comma separated list of class names.  A new instance will be\n created for each named class.  The default constructor of each class\n may execute arbitrary code to update the logging configuration, such as\n setting logger levels, adding handlers, adding filters, etc.\n \u003c/ul\u003e\n \u003cp\u003e\n Note that all classes loaded during LogManager configuration are\n first searched on the system class path before any user class path.\n That includes the LogManager class, any config classes, and any\n handler classes.\n \u003cp\u003e\n Loggers are organized into a naming hierarchy based on their\n dot separated names.  Thus \"a.b.c\" is a child of \"a.b\", but\n \"a.b1\" and a.b2\" are peers.\n \u003cp\u003e\n All properties whose names end with \".level\" are assumed to define\n log levels for Loggers.  Thus \"foo.level\" defines a log level for\n the logger called \"foo\" and (recursively) for any of its children\n in the naming hierarchy.  Log Levels are applied in the order they\n are defined in the properties file.  Thus level settings for child\n nodes in the tree should come after settings for their parents.\n The property name \".level\" can be used to set the level for the\n root of the tree.\n \u003cp\u003e\n All methods on the LogManager object are multi-thread safe.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LogManager","qualifiedName":"java.util.logging.LogManager","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"LOGGING_MXBEAN_NAME","comment":"String representation of the\n {@link javax.management.ObjectName} for the management interface\n for the logging facility.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isStatic":true,"constantValue":"\"java.util.logging:type\u003dLogging\""}],"methods":[{"name":"getLogManager","comment":"Returns the global LogManager object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LogManager","qualifiedName":"java.util.logging.LogManager","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"addPropertyChangeListener","comment":"Adds an event listener to be invoked when the logging\n properties are re-read. Adding multiple instances of\n the same event Listener results in multiple entries\n in the property event listener table.\n\n \u003cp\u003e\u003cb\u003eWARNING:\u003c/b\u003e This method is omitted from this class in all subset\n Profiles of Java SE that do not include the {@code java.beans} package.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.beans.PropertyChangeListener)","flatSignature":"(PropertyChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"PropertyChangeListener","qualifiedName":"java.beans.PropertyChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removePropertyChangeListener","comment":"Removes an event listener for property change events.\n If the same listener instance has been added to the listener table\n through multiple invocations of \u003cCODE\u003eaddPropertyChangeListener\u003c/CODE\u003e,\n then an equivalent number of\n \u003cCODE\u003eremovePropertyChangeListener\u003c/CODE\u003e invocations are required to remove\n all instances of that listener from the listener table.\n \u003cP\u003e\n Returns silently if the given listener is not found.\n\n \u003cp\u003e\u003cb\u003eWARNING:\u003c/b\u003e This method is omitted from this class in all subset\n Profiles of Java SE that do not include the {@code java.beans} package.\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.beans.PropertyChangeListener)","flatSignature":"(PropertyChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"PropertyChangeListener","qualifiedName":"java.beans.PropertyChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addLogger","comment":"Add a named logger.  This does nothing and returns false if a logger\n with the same name is already registered.\n \u003cp\u003e\n The Logger factory methods call this method to register each\n newly created Logger.\n \u003cp\u003e\n The application should retain its own reference to the Logger\n object to avoid it being garbage collected.  The LogManager\n may only retain a weak reference.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.Logger)","flatSignature":"(Logger)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"logger","type":{"isPrimitive":false,"simpleName":"Logger","qualifiedName":"java.util.logging.Logger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLogger","comment":"Method to find a named logger.\n \u003cp\u003e\n Note that since untrusted code may create loggers with\n arbitrary names this method should not be relied on to\n find Loggers for security sensitive logging.\n It is also important to note that the Logger associated with the\n String {@code name} may be garbage collected at any time if there\n is no strong reference to the Logger. The caller of this method\n must check the return value for null in order to properly handle\n the case where the Logger has been garbage collected.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Logger","qualifiedName":"java.util.logging.Logger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLoggerNames","comment":"Get an enumeration of known logger names.\n \u003cp\u003e\n Note:  Loggers may be added dynamically as new classes are loaded.\n This method only reports on the loggers that are currently registered.\n It is also important to note that this method only returns the name\n of a Logger, not a strong reference to the Logger itself.\n The returned String does nothing to prevent the Logger from being\n garbage collected. In particular, if the returned name is passed\n to {@code LogManager.getLogger()}, then the caller must check the\n return value from {@code LogManager.getLogger()} for null to properly\n handle the case where the Logger has been garbage collected in the\n time since its name was returned by this method.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readConfiguration","comment":"Reinitialize the logging properties and reread the logging configuration.\n \u003cp\u003e\n The same rules are used for locating the configuration properties\n as are used at startup.  So normally the logging properties will\n be re-read from the same file that was used at startup.\n \u003cP\u003e\n Any log level definitions in the new configuration file will be\n applied using Logger.setLevel(), if the target Logger exists.\n \u003cp\u003e\n A PropertyChangeEvent will be fired after the properties are read.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Reset the logging configuration.\n \u003cp\u003e\n For all named loggers, the reset operation removes and closes\n all Handlers and (except for the root logger) sets the level\n to null.  The root logger\u0027s level is set to Level.INFO.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readConfiguration","comment":"Reinitialize the logging properties and reread the logging configuration\n from the given stream, which should be in java.util.Properties format.\n A PropertyChangeEvent will be fired after the properties are read.\n \u003cp\u003e\n Any log level definitions in the new configuration file will be\n applied using Logger.setLevel(), if the target Logger exists.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ins","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProperty","comment":"Get the value of a logging property.\n The method returns null if the property is not found.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkAccess","comment":"Check that the current context is trusted to modify the logging\n configuration.  This requires LoggingPermission(\"control\").\n \u003cp\u003e\n If the check fails we throw a SecurityException, otherwise\n we return normally.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLoggingMXBean","comment":"Returns \u003ctt\u003eLoggingMXBean\u003c/tt\u003e for managing loggers.\n An alternative way to manage loggers is through the\n {@link java.lang.management.PlatformLoggingMXBean} interface\n that can be obtained by calling:\n \u003cpre\u003e\n     PlatformLoggingMXBean logging \u003d {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n         ManagementFactory.getPlatformMXBean}(PlatformLoggingMXBean.class);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LoggingMXBean","qualifiedName":"java.util.logging.LoggingMXBean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}