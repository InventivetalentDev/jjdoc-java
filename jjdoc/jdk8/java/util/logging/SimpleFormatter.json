{"name":"SimpleFormatter","comment":"Print a brief summary of the {@code LogRecord} in a human readable\n format.  The summary will typically be 1 or 2 lines.\n\n \u003cp\u003e\n \u003ca name\u003d\"formatting\"\u003e\n \u003cb\u003eConfiguration:\u003c/b\u003e\u003c/a\u003e\n The {@code SimpleFormatter} is initialized with the\n \u003ca href\u003d\"../Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n specified in the {@code java.util.logging.SimpleFormatter.format}\n property to {@linkplain #format format} the log messages.\n This property can be defined\n in the {@linkplain LogManager#getProperty logging properties}\n configuration file\n or as a system property.  If this property is set in both\n the logging properties and system properties,\n the format string specified in the system property will be used.\n If this property is not defined or the given format string\n is {@linkplain java.util.IllegalFormatException illegal},\n the default format is implementation-specific.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SimpleFormatter","qualifiedName":"java.util.logging.SimpleFormatter","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.util.logging.Formatter","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SimpleFormatter","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"format","comment":"Format the given LogRecord.\n \u003cp\u003e\n The formatting can be customized by specifying the\n \u003ca href\u003d\"../Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n in the \u003ca href\u003d\"#formatting\"\u003e\n {@code java.util.logging.SimpleFormatter.format}\u003c/a\u003e property.\n The given {@code LogRecord} will be formatted as if by calling:\n \u003cpre\u003e\n    {@link String#format String.format}(format, date, source, logger, level, message, thrown);\n \u003c/pre\u003e\n where the arguments are:\u003cbr\u003e\n \u003col\u003e\n \u003cli\u003e{@code format} - the {@link java.util.Formatter\n     java.util.Formatter} format string specified in the\n     {@code java.util.logging.SimpleFormatter.format} property\n     or the default format.\u003c/li\u003e\n \u003cli\u003e{@code date} - a {@link Date} object representing\n     {@linkplain LogRecord#getMillis event time} of the log record.\u003c/li\u003e\n \u003cli\u003e{@code source} - a string representing the caller, if available;\n     otherwise, the logger\u0027s name.\u003c/li\u003e\n \u003cli\u003e{@code logger} - the logger\u0027s name.\u003c/li\u003e\n \u003cli\u003e{@code level} - the {@linkplain Level#getLocalizedName\n     log level}.\u003c/li\u003e\n \u003cli\u003e{@code message} - the formatted log message\n     returned from the {@link Formatter#formatMessage(LogRecord)}\n     method.  It uses {@link java.text.MessageFormat java.text}\n     formatting and does not use the {@code java.util.Formatter\n     format} argument.\u003c/li\u003e\n \u003cli\u003e{@code thrown} - a string representing\n     the {@linkplain LogRecord#getThrown throwable}\n     associated with the log record and its backtrace\n     beginning with a newline character, if any;\n     otherwise, an empty string.\u003c/li\u003e\n \u003c/ol\u003e\n\n \u003cp\u003eSome example formats:\u003cbr\u003e\n \u003cul\u003e\n \u003cli\u003e {@code java.util.logging.SimpleFormatter.format\u003d\"%4$s: %5$s [%1$tc]%n\"}\n     \u003cp\u003eThis prints 1 line with the log level ({@code 4$}),\n     the log message ({@code 5$}) and the timestamp ({@code 1$}) in\n     a square bracket.\n     \u003cpre\u003e\n     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]\n     \u003c/pre\u003e\u003c/li\u003e\n \u003cli\u003e {@code java.util.logging.SimpleFormatter.format\u003d\"%1$tc %2$s%n%4$s: %5$s%6$s%n\"}\n     \u003cp\u003eThis prints 2 lines where the first line includes\n     the timestamp ({@code 1$}) and the source ({@code 2$});\n     the second line includes the log level ({@code 4$}) and\n     the log message ({@code 5$}) followed with the throwable\n     and its backtrace ({@code 6$}), if any:\n     \u003cpre\u003e\n     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal\n     SEVERE: several message with an exception\n     java.lang.IllegalArgumentException: invalid argument\n             at MyClass.mash(MyClass.java:9)\n             at MyClass.crunch(MyClass.java:6)\n             at MyClass.main(MyClass.java:3)\n     \u003c/pre\u003e\u003c/li\u003e\n \u003cli\u003e {@code java.util.logging.SimpleFormatter.format\u003d\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\"}\n      \u003cp\u003eThis prints 2 lines similar to the example above\n         with a different date/time formatting and does not print\n         the throwable and its backtrace:\n     \u003cpre\u003e\n     Mar 22, 2011 1:11:31 PM MyClass fatal\n     SEVERE: several message with an exception\n     \u003c/pre\u003e\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003eThis method can also be overridden in a subclass.\n It is recommended to use the {@link Formatter#formatMessage}\n convenience method to localize and format the message field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}