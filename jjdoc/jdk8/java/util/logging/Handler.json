{"name":"Handler","comment":"A \u003ctt\u003eHandler\u003c/tt\u003e object takes log messages from a \u003ctt\u003eLogger\u003c/tt\u003e and\n exports them.  It might for example, write them to a console\n or write them to a file, or send them to a network logging service,\n or forward them to an OS log, or whatever.\n \u003cp\u003e\n A \u003ctt\u003eHandler\u003c/tt\u003e can be disabled by doing a \u003ctt\u003esetLevel(Level.OFF)\u003c/tt\u003e\n and can  be re-enabled by doing a \u003ctt\u003esetLevel\u003c/tt\u003e with an appropriate level.\n \u003cp\u003e\n \u003ctt\u003eHandler\u003c/tt\u003e classes typically use \u003ctt\u003eLogManager\u003c/tt\u003e properties to set\n default values for the \u003ctt\u003eHandler\u003c/tt\u003e\u0027s \u003ctt\u003eFilter\u003c/tt\u003e, \u003ctt\u003eFormatter\u003c/tt\u003e,\n and \u003ctt\u003eLevel\u003c/tt\u003e.  See the specific documentation for each concrete\n \u003ctt\u003eHandler\u003c/tt\u003e class.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Handler","qualifiedName":"java.util.logging.Handler","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"publish","comment":"Publish a \u003ctt\u003eLogRecord\u003c/tt\u003e.\n \u003cp\u003e\n The logging request was made initially to a \u003ctt\u003eLogger\u003c/tt\u003e object,\n which initialized the \u003ctt\u003eLogRecord\u003c/tt\u003e and forwarded it here.\n \u003cp\u003e\n The \u003ctt\u003eHandler\u003c/tt\u003e  is responsible for formatting the message, when and\n if necessary.  The formatting should include localization.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flush any buffered output.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Close the \u003ctt\u003eHandler\u003c/tt\u003e and free all associated resources.\n \u003cp\u003e\n The close method will perform a \u003ctt\u003eflush\u003c/tt\u003e and then close the\n \u003ctt\u003eHandler\u003c/tt\u003e.   After close has been called this \u003ctt\u003eHandler\u003c/tt\u003e\n should no longer be used.  Method calls may either be silently\n ignored or may throw runtime exceptions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setFormatter","comment":"Set a \u003ctt\u003eFormatter\u003c/tt\u003e.  This \u003ctt\u003eFormatter\u003c/tt\u003e will be used\n to format \u003ctt\u003eLogRecords\u003c/tt\u003e for this \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cp\u003e\n Some \u003ctt\u003eHandlers\u003c/tt\u003e may not use \u003ctt\u003eFormatters\u003c/tt\u003e, in\n which case the \u003ctt\u003eFormatter\u003c/tt\u003e will be remembered, but not used.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.Formatter)","flatSignature":"(Formatter)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newFormatter","type":{"isPrimitive":false,"simpleName":"Formatter","qualifiedName":"java.util.logging.Formatter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFormatter","comment":"Return the \u003ctt\u003eFormatter\u003c/tt\u003e for this \u003ctt\u003eHandler\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Formatter","qualifiedName":"java.util.logging.Formatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setEncoding","comment":"Set the character encoding used by this \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cp\u003e\n The encoding should be set before any \u003ctt\u003eLogRecords\u003c/tt\u003e are written\n to the \u003ctt\u003eHandler\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"encoding","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getEncoding","comment":"Return the character encoding for this \u003ctt\u003eHandler\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setFilter","comment":"Set a \u003ctt\u003eFilter\u003c/tt\u003e to control output on this \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cP\u003e\n For each call of \u003ctt\u003epublish\u003c/tt\u003e the \u003ctt\u003eHandler\u003c/tt\u003e will call\n this \u003ctt\u003eFilter\u003c/tt\u003e (if it is non-null) to check if the\n \u003ctt\u003eLogRecord\u003c/tt\u003e should be published or discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.Filter)","flatSignature":"(Filter)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newFilter","type":{"isPrimitive":false,"simpleName":"Filter","qualifiedName":"java.util.logging.Filter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFilter","comment":"Get the current \u003ctt\u003eFilter\u003c/tt\u003e for this \u003ctt\u003eHandler\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Filter","qualifiedName":"java.util.logging.Filter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setErrorManager","comment":"Define an ErrorManager for this Handler.\n \u003cp\u003e\n The ErrorManager\u0027s \"error\" method will be invoked if any\n errors occur while using this Handler.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.ErrorManager)","flatSignature":"(ErrorManager)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"em","type":{"isPrimitive":false,"simpleName":"ErrorManager","qualifiedName":"java.util.logging.ErrorManager","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getErrorManager","comment":"Retrieves the ErrorManager for this Handler.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ErrorManager","qualifiedName":"java.util.logging.ErrorManager","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setLevel","comment":"Set the log level specifying which message levels will be\n logged by this \u003ctt\u003eHandler\u003c/tt\u003e.  Message levels lower than this\n value will be discarded.\n \u003cp\u003e\n The intention is to allow developers to turn on voluminous\n logging, but to limit the messages that are sent to certain\n \u003ctt\u003eHandlers\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.Level)","flatSignature":"(Level)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newLevel","type":{"isPrimitive":false,"simpleName":"Level","qualifiedName":"java.util.logging.Level","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLevel","comment":"Get the log level specifying which messages will be\n logged by this \u003ctt\u003eHandler\u003c/tt\u003e.  Message levels lower\n than this level will be discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Level","qualifiedName":"java.util.logging.Level","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLoggable","comment":"Check if this \u003ctt\u003eHandler\u003c/tt\u003e would actually log a given \u003ctt\u003eLogRecord\u003c/tt\u003e.\n \u003cp\u003e\n This method checks if the \u003ctt\u003eLogRecord\u003c/tt\u003e has an appropriate\n \u003ctt\u003eLevel\u003c/tt\u003e and  whether it satisfies any \u003ctt\u003eFilter\u003c/tt\u003e.  It also\n may make other \u003ctt\u003eHandler\u003c/tt\u003e specific checks that might prevent a\n handler from logging the \u003ctt\u003eLogRecord\u003c/tt\u003e. It will return false if\n the \u003ctt\u003eLogRecord\u003c/tt\u003e is null.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.logging.StreamHandler","java.util.logging.MemoryHandler"],"enumConstants":[]}