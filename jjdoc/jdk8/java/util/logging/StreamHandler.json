{"name":"StreamHandler","comment":"Stream based logging \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cp\u003e\n This is primarily intended as a base class or support class to\n be used in implementing other logging \u003ctt\u003eHandlers\u003c/tt\u003e.\n \u003cp\u003e\n \u003ctt\u003eLogRecords\u003c/tt\u003e are published to a given \u003ctt\u003ejava.io.OutputStream\u003c/tt\u003e.\n \u003cp\u003e\n \u003cb\u003eConfiguration:\u003c/b\u003e\n By default each \u003ctt\u003eStreamHandler\u003c/tt\u003e is initialized using the following\n \u003ctt\u003eLogManager\u003c/tt\u003e configuration properties where \u003ctt\u003e\u0026lt;handler-name\u0026gt;\u003c/tt\u003e\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \u003cul\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.level\n        specifies the default level for the \u003ctt\u003eHandler\u003c/tt\u003e\n        (defaults to \u003ctt\u003eLevel.INFO\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.filter\n        specifies the name of a \u003ctt\u003eFilter\u003c/tt\u003e class to use\n         (defaults to no \u003ctt\u003eFilter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.formatter\n        specifies the name of a \u003ctt\u003eFormatter\u003c/tt\u003e class to use\n        (defaults to \u003ctt\u003ejava.util.logging.SimpleFormatter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For example, the properties for {@code StreamHandler} would be:\n \u003cul\u003e\n \u003cli\u003e   java.util.logging.StreamHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   java.util.logging.StreamHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \u003cul\u003e\n \u003cli\u003e   com.foo.MyHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   com.foo.MyHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"StreamHandler","qualifiedName":"java.util.logging.StreamHandler","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.util.logging.Handler","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"StreamHandler","comment":"Create a \u003ctt\u003eStreamHandler\u003c/tt\u003e, with no current output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"StreamHandler","comment":"Create a \u003ctt\u003eStreamHandler\u003c/tt\u003e with a given \u003ctt\u003eFormatter\u003c/tt\u003e\n and output stream.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream, java.util.logging.Formatter)","flatSignature":"(OutputStream, Formatter)","parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}},{"name":"formatter","type":{"isPrimitive":false,"simpleName":"Formatter","qualifiedName":"java.util.logging.Formatter","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"setEncoding","comment":"Set (or change) the character encoding used by this \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cp\u003e\n The encoding should be set before any \u003ctt\u003eLogRecords\u003c/tt\u003e are written\n to the \u003ctt\u003eHandler\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"encoding","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"publish","comment":"Format and publish a \u003ctt\u003eLogRecord\u003c/tt\u003e.\n \u003cp\u003e\n The \u003ctt\u003eStreamHandler\u003c/tt\u003e first checks if there is an \u003ctt\u003eOutputStream\u003c/tt\u003e\n and if the given \u003ctt\u003eLogRecord\u003c/tt\u003e has at least the required log level.\n If not it silently returns.  If so, it calls any associated\n \u003ctt\u003eFilter\u003c/tt\u003e to check if the record should be published.  If so,\n it calls its \u003ctt\u003eFormatter\u003c/tt\u003e to format the record and then writes\n the result to the current output stream.\n \u003cp\u003e\n If this is the first \u003ctt\u003eLogRecord\u003c/tt\u003e to be written to a given\n \u003ctt\u003eOutputStream\u003c/tt\u003e, the \u003ctt\u003eFormatter\u003c/tt\u003e\u0027s \"head\" string is\n written to the stream before the \u003ctt\u003eLogRecord\u003c/tt\u003e is written.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLoggable","comment":"Check if this \u003ctt\u003eHandler\u003c/tt\u003e would actually log a given \u003ctt\u003eLogRecord\u003c/tt\u003e.\n \u003cp\u003e\n This method checks if the \u003ctt\u003eLogRecord\u003c/tt\u003e has an appropriate level and\n whether it satisfies any \u003ctt\u003eFilter\u003c/tt\u003e.  It will also return false if\n no output stream has been assigned yet or the LogRecord is null.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flush","comment":"Flush any buffered messages.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Close the current output stream.\n \u003cp\u003e\n The \u003ctt\u003eFormatter\u003c/tt\u003e\u0027s \"tail\" string is written to the stream before it\n is closed.  In addition, if the \u003ctt\u003eFormatter\u003c/tt\u003e\u0027s \"head\" string has not\n yet been written to the stream, it will be written before the\n \"tail\" string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.logging.SocketHandler","java.util.logging.FileHandler","java.util.logging.ConsoleHandler"],"enumConstants":[]}