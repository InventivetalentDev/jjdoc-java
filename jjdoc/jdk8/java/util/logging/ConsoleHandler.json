{"name":"ConsoleHandler","comment":"This \u003ctt\u003eHandler\u003c/tt\u003e publishes log records to \u003ctt\u003eSystem.err\u003c/tt\u003e.\n By default the \u003ctt\u003eSimpleFormatter\u003c/tt\u003e is used to generate brief summaries.\n \u003cp\u003e\n \u003cb\u003eConfiguration:\u003c/b\u003e\n By default each \u003ctt\u003eConsoleHandler\u003c/tt\u003e is initialized using the following\n \u003ctt\u003eLogManager\u003c/tt\u003e configuration properties where {@code \u003chandler-name\u003e}\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \u003cul\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.level\n        specifies the default level for the \u003ctt\u003eHandler\u003c/tt\u003e\n        (defaults to \u003ctt\u003eLevel.INFO\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.filter\n        specifies the name of a \u003ctt\u003eFilter\u003c/tt\u003e class to use\n        (defaults to no \u003ctt\u003eFilter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.formatter\n        specifies the name of a \u003ctt\u003eFormatter\u003c/tt\u003e class to use\n        (defaults to \u003ctt\u003ejava.util.logging.SimpleFormatter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For example, the properties for {@code ConsoleHandler} would be:\n \u003cul\u003e\n \u003cli\u003e   java.util.logging.ConsoleHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   java.util.logging.ConsoleHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \u003cul\u003e\n \u003cli\u003e   com.foo.MyHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   com.foo.MyHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ConsoleHandler","qualifiedName":"java.util.logging.ConsoleHandler","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.util.logging.StreamHandler","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ConsoleHandler","comment":"Create a \u003ctt\u003eConsoleHandler\u003c/tt\u003e for \u003ctt\u003eSystem.err\u003c/tt\u003e.\n \u003cp\u003e\n The \u003ctt\u003eConsoleHandler\u003c/tt\u003e is configured based on\n \u003ctt\u003eLogManager\u003c/tt\u003e properties (or their default values).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"publish","comment":"Publish a \u003ctt\u003eLogRecord\u003c/tt\u003e.\n \u003cp\u003e\n The logging request was made initially to a \u003ctt\u003eLogger\u003c/tt\u003e object,\n which initialized the \u003ctt\u003eLogRecord\u003c/tt\u003e and forwarded it here.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"close","comment":"Override \u003ctt\u003eStreamHandler.close\u003c/tt\u003e to do a flush but not\n to close the output stream.  That is, we do \u003cb\u003enot\u003c/b\u003e\n close \u003ctt\u003eSystem.err\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}