{"name":"FileHandler","comment":"Simple file logging \u003ctt\u003eHandler\u003c/tt\u003e.\n \u003cp\u003e\n The \u003ctt\u003eFileHandler\u003c/tt\u003e can either write to a specified file,\n or it can write to a rotating set of files.\n \u003cp\u003e\n For a rotating set of files, as each file reaches a given size\n limit, it is closed, rotated out, and a new file opened.\n Successively older files are named by adding \"0\", \"1\", \"2\",\n etc. into the base filename.\n \u003cp\u003e\n By default buffering is enabled in the IO libraries but each log\n record is flushed out when it is complete.\n \u003cp\u003e\n By default the \u003ctt\u003eXMLFormatter\u003c/tt\u003e class is used for formatting.\n \u003cp\u003e\n \u003cb\u003eConfiguration:\u003c/b\u003e\n By default each \u003ctt\u003eFileHandler\u003c/tt\u003e is initialized using the following\n \u003ctt\u003eLogManager\u003c/tt\u003e configuration properties where \u003ctt\u003e\u0026lt;handler-name\u0026gt;\u003c/tt\u003e\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \u003cul\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.level\n        specifies the default level for the \u003ctt\u003eHandler\u003c/tt\u003e\n        (defaults to \u003ctt\u003eLevel.ALL\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.filter\n        specifies the name of a \u003ctt\u003eFilter\u003c/tt\u003e class to use\n        (defaults to no \u003ctt\u003eFilter\u003c/tt\u003e). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.formatter\n        specifies the name of a \u003ctt\u003eFormatter\u003c/tt\u003e class to use\n        (defaults to \u003ctt\u003ejava.util.logging.XMLFormatter\u003c/tt\u003e) \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.limit\n        specifies an approximate maximum amount to write (in bytes)\n        to any one file.  If this is zero, then there is no limit.\n        (Defaults to no limit). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.count\n        specifies how many output files to cycle through (defaults to 1). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.pattern\n        specifies a pattern for generating the output file name.  See\n        below for details. (Defaults to \"%h/java%u.log\"). \u003c/li\u003e\n \u003cli\u003e   \u0026lt;handler-name\u0026gt;.append\n        specifies whether the FileHandler should append onto\n        any existing files (defaults to false). \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For example, the properties for {@code FileHandler} would be:\n \u003cul\u003e\n \u003cli\u003e   java.util.logging.FileHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   java.util.logging.FileHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \u003cul\u003e\n \u003cli\u003e   com.foo.MyHandler.level\u003dINFO \u003c/li\u003e\n \u003cli\u003e   com.foo.MyHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n A pattern consists of a string that includes the following special\n components that will be replaced at runtime:\n \u003cul\u003e\n \u003cli\u003e    \"/\"    the local pathname separator \u003c/li\u003e\n \u003cli\u003e     \"%t\"   the system temporary directory \u003c/li\u003e\n \u003cli\u003e     \"%h\"   the value of the \"user.home\" system property \u003c/li\u003e\n \u003cli\u003e     \"%g\"   the generation number to distinguish rotated logs \u003c/li\u003e\n \u003cli\u003e     \"%u\"   a unique number to resolve conflicts \u003c/li\u003e\n \u003cli\u003e     \"%%\"   translates to a single percent sign \"%\" \u003c/li\u003e\n \u003c/ul\u003e\n If no \"%g\" field has been specified and the file count is greater\n than one, then the generation number will be added to the end of\n the generated filename, after a dot.\n \u003cp\u003e\n Thus for example a pattern of \"%t/java%g.log\" with a count of 2\n would typically cause log files to be written on Solaris to\n /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they\n would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log\n \u003cp\u003e\n Generation numbers follow the sequence 0, 1, 2, etc.\n \u003cp\u003e\n Normally the \"%u\" unique field is set to 0.  However, if the \u003ctt\u003eFileHandler\u003c/tt\u003e\n tries to open the filename and finds the file is currently in use by\n another process it will increment the unique number field and try\n again.  This will be repeated until \u003ctt\u003eFileHandler\u003c/tt\u003e finds a file name that\n is  not currently in use. If there is a conflict and no \"%u\" field has\n been specified, it will be added at the end of the filename after a dot.\n (This will be after any automatically added generation number.)\n \u003cp\u003e\n Thus if three processes were all trying to log to fred%u.%g.txt then\n they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as\n the first file in their rotating sequences.\n \u003cp\u003e\n Note that the use of unique ids to avoid conflicts is only guaranteed\n to work reliably when using a local disk file system.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FileHandler","qualifiedName":"java.util.logging.FileHandler","dimension":"","elementType":{},"package":"java.util.logging","superclass":"java.util.logging.StreamHandler","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"FileHandler","comment":"Construct a default \u003ctt\u003eFileHandler\u003c/tt\u003e.  This will be configured\n entirely from \u003ctt\u003eLogManager\u003c/tt\u003e properties (or their default values).\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"FileHandler","comment":"Initialize a \u003ctt\u003eFileHandler\u003c/tt\u003e to write to the given filename.\n \u003cp\u003e\n The \u003ctt\u003eFileHandler\u003c/tt\u003e is configured based on \u003ctt\u003eLogManager\u003c/tt\u003e\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to no limit, and the file count is set to one.\n \u003cp\u003e\n There is no limit on the amount of data that may be written,\n so use this with care.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"pattern","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileHandler","comment":"Initialize a \u003ctt\u003eFileHandler\u003c/tt\u003e to write to the given filename,\n with optional append.\n \u003cp\u003e\n The \u003ctt\u003eFileHandler\u003c/tt\u003e is configured based on \u003ctt\u003eLogManager\u003c/tt\u003e\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to no limit, the file count is set to one, and the append\n mode is set to the given \u003ctt\u003eappend\u003c/tt\u003e argument.\n \u003cp\u003e\n There is no limit on the amount of data that may be written,\n so use this with care.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","parameters":[{"name":"pattern","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"append","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileHandler","comment":"Initialize a \u003ctt\u003eFileHandler\u003c/tt\u003e to write to a set of files.  When\n (approximately) the given limit has been written to one file,\n another file will be opened.  The output will cycle through a set\n of count files.\n \u003cp\u003e\n The \u003ctt\u003eFileHandler\u003c/tt\u003e is configured based on \u003ctt\u003eLogManager\u003c/tt\u003e\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to the limit argument, and the file count is set to the\n given count argument.\n \u003cp\u003e\n The count must be at least 1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int, int)","flatSignature":"(String, int, int)","parameters":[{"name":"pattern","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"limit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"FileHandler","comment":"Initialize a \u003ctt\u003eFileHandler\u003c/tt\u003e to write to a set of files\n with optional append.  When (approximately) the given limit has\n been written to one file, another file will be opened.  The\n output will cycle through a set of count files.\n \u003cp\u003e\n The \u003ctt\u003eFileHandler\u003c/tt\u003e is configured based on \u003ctt\u003eLogManager\u003c/tt\u003e\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to the limit argument, and the file count is set to the\n given count argument, and the append mode is set to the given\n \u003ctt\u003eappend\u003c/tt\u003e argument.\n \u003cp\u003e\n The count must be at least 1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int, int, boolean)","flatSignature":"(String, int, int, boolean)","parameters":[{"name":"pattern","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"limit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"append","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"publish","comment":"Format and publish a \u003ctt\u003eLogRecord\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.logging.LogRecord)","flatSignature":"(LogRecord)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"record","type":{"isPrimitive":false,"simpleName":"LogRecord","qualifiedName":"java.util.logging.LogRecord","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"close","comment":"Close all the files.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}