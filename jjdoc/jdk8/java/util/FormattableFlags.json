{"name":"FormattableFlags","comment":"FomattableFlags are passed to the {@link Formattable#formatTo\n Formattable.formatTo()} method and modify the output format for {@linkplain\n Formattable Formattables}.  Implementations of {@link Formattable} are\n responsible for interpreting and validating any flags.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"FormattableFlags","qualifiedName":"java.util.FormattableFlags","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"LEFT_JUSTIFY","comment":"Left-justifies the output.  Spaces (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) will be added\n at the end of the converted value as required to fill the minimum width\n of the field.  If this flag is not set then the output will be\n right-justified.\n\n \u003cp\u003e This flag corresponds to \u003ctt\u003e\u0027-\u0027\u003c/tt\u003e (\u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e) in\n the format specifier.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"UPPERCASE","comment":"Converts the output to upper case according to the rules of the\n {@linkplain java.util.Locale locale} given during creation of the\n \u003ctt\u003eformatter\u003c/tt\u003e argument of the {@link Formattable#formatTo\n formatTo()} method.  The output should be equivalent the following\n invocation of {@link String#toUpperCase(java.util.Locale)}\n\n \u003cpre\u003e\n     out.toUpperCase() \u003c/pre\u003e\n\n \u003cp\u003e This flag corresponds to \u003ctt\u003e\u0027S\u0027\u003c/tt\u003e (\u003ctt\u003e\u0027\u0026#92;u0053\u0027\u003c/tt\u003e) in\n the format specifier.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"ALTERNATE","comment":"Requires the output to use an alternate form.  The definition of the\n form is specified by the \u003ctt\u003eFormattable\u003c/tt\u003e.\n\n \u003cp\u003e This flag corresponds to \u003ctt\u003e\u0027#\u0027\u003c/tt\u003e (\u003ctt\u003e\u0027\u0026#92;u0023\u0027\u003c/tt\u003e) in\n the format specifier.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"}],"methods":[],"typeParameters":[],"enumConstants":[]}