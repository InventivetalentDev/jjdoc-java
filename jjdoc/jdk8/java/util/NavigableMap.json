{"name":"NavigableMap","comment":"A {@link SortedMap} extended with navigation methods returning the\n closest matches for given search targets. Methods\n {@code lowerEntry}, {@code floorEntry}, {@code ceilingEntry},\n and {@code higherEntry} return {@code Map.Entry} objects\n associated with keys respectively less than, less than or equal,\n greater than or equal, and greater than a given key, returning\n {@code null} if there is no such key.  Similarly, methods\n {@code lowerKey}, {@code floorKey}, {@code ceilingKey}, and\n {@code higherKey} return only the associated keys. All of these\n methods are designed for locating, not traversing entries.\n\n \u003cp\u003eA {@code NavigableMap} may be accessed and traversed in either\n ascending or descending key order.  The {@code descendingMap}\n method returns a view of the map with the senses of all relational\n and directional methods inverted. The performance of ascending\n operations and views is likely to be faster than that of descending\n ones.  Methods {@code subMap}, {@code headMap},\n and {@code tailMap} differ from the like-named {@code\n SortedMap} methods in accepting additional arguments describing\n whether lower and upper bounds are inclusive versus exclusive.\n Submaps of any {@code NavigableMap} must implement the {@code\n NavigableMap} interface.\n\n \u003cp\u003eThis interface additionally defines methods {@code firstEntry},\n {@code pollFirstEntry}, {@code lastEntry}, and\n {@code pollLastEntry} that return and/or remove the least and\n greatest mappings, if any exist, else returning {@code null}.\n\n \u003cp\u003eImplementations of entry-returning methods are expected to\n return {@code Map.Entry} pairs representing snapshots of mappings\n at the time they were produced, and thus generally do \u003cem\u003enot\u003c/em\u003e\n support the optional {@code Entry.setValue} method. Note however\n that it is possible to change mappings in the associated map using\n method {@code put}.\n\n \u003cp\u003eMethods\n {@link #subMap(Object, Object) subMap(K, K)},\n {@link #headMap(Object) headMap(K)}, and\n {@link #tailMap(Object) tailMap(K)}\n are specified to return {@code SortedMap} to allow existing\n implementations of {@code SortedMap} to be compatibly retrofitted to\n implement {@code NavigableMap}, but extensions and implementations\n of this interface are encouraged to override these methods to return\n {@code NavigableMap}.  Similarly,\n {@link #keySet()} can be overriden to return {@code NavigableSet}.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.SortedMap"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"lowerEntry","comment":"Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or {@code null} if there is\n no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"lowerKey","comment":"Returns the greatest key strictly less than the given key, or\n {@code null} if there is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"floorEntry","comment":"Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or {@code null} if there\n is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"floorKey","comment":"Returns the greatest key less than or equal to the given key,\n or {@code null} if there is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"ceilingEntry","comment":"Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or {@code null} if\n there is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"ceilingKey","comment":"Returns the least key greater than or equal to the given key,\n or {@code null} if there is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"higherEntry","comment":"Returns a key-value mapping associated with the least key\n strictly greater than the given key, or {@code null} if there\n is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"higherKey","comment":"Returns the least key strictly greater than the given key, or\n {@code null} if there is no such key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"firstEntry","comment":"Returns a key-value mapping associated with the least\n key in this map, or {@code null} if the map is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastEntry","comment":"Returns a key-value mapping associated with the greatest\n key in this map, or {@code null} if the map is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollFirstEntry","comment":"Removes and returns a key-value mapping associated with\n the least key in this map, or {@code null} if the map is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollLastEntry","comment":"Removes and returns a key-value mapping associated with\n the greatest key in this map, or {@code null} if the map is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingMap","comment":"Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.  If either map is\n modified while an iteration over a collection view of either map\n is in progress (except through the iterator\u0027s own {@code remove}\n operation), the results of the iteration are undefined.\n\n \u003cp\u003eThe returned map has an ordering equivalent to\n \u003ctt\u003e{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())\u003c/tt\u003e.\n The expression {@code m.descendingMap().descendingMap()} returns a\n view of {@code m} essentially equivalent to {@code m}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"navigableKeySet","comment":"Returns a {@link NavigableSet} view of the keys contained in this map.\n The set\u0027s iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress (except through the iterator\u0027s own {@code\n remove} operation), the results of the iteration are undefined.  The\n set supports element removal, which removes the corresponding mapping\n from the map, via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear} operations.\n It does not support the {@code add} or {@code addAll} operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingKeySet","comment":"Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n The set\u0027s iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress (except through the iterator\u0027s own {@code\n remove} operation), the results of the iteration are undefined.  The\n set supports element removal, which removes the corresponding mapping\n from the map, via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear} operations.\n It does not support the {@code add} or {@code addAll} operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"subMap","comment":"Returns a view of the portion of this map whose keys range from\n {@code fromKey} to {@code toKey}.  If {@code fromKey} and\n {@code toKey} are equal, the returned map is empty unless\n {@code fromInclusive} and {@code toInclusive} are both true.  The\n returned map is backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n \u003cp\u003eThe returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside of its range, or to construct a\n submap either of whose endpoints lie outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean, K, boolean)","flatSignature":"(K, boolean, K, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"fromInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"headMap","comment":"Returns a view of the portion of this map whose keys are less than (or\n equal to, if {@code inclusive} is true) {@code toKey}.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n \u003cp\u003eThe returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tailMap","comment":"Returns a view of the portion of this map whose keys are greater than (or\n equal to, if {@code inclusive} is true) {@code fromKey}.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n \u003cp\u003eThe returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subMap","comment":"{@inheritDoc}\n\n \u003cp\u003eEquivalent to {@code subMap(fromKey, true, toKey, false)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, K)","flatSignature":"(K, K)","returnType":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"headMap","comment":"{@inheritDoc}\n\n \u003cp\u003eEquivalent to {@code headMap(toKey, false)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"tailMap","comment":"{@inheritDoc}\n\n \u003cp\u003eEquivalent to {@code tailMap(fromKey, true)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"subInterfaces":["java.util.TreeMap","java.util.concurrent.ConcurrentNavigableMap"],"enumConstants":[]}