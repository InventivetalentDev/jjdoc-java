{"name":"LinkedHashMap","comment":"\u003cp\u003eHash table and linked list implementation of the \u003ctt\u003eMap\u003c/tt\u003e interface,\n with predictable iteration order.  This implementation differs from\n \u003ctt\u003eHashMap\u003c/tt\u003e in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is normally the order in which keys were inserted into the map\n (\u003ci\u003einsertion-order\u003c/i\u003e).  Note that insertion order is not affected\n if a key is \u003ci\u003ere-inserted\u003c/i\u003e into the map.  (A key \u003ctt\u003ek\u003c/tt\u003e is\n reinserted into a map \u003ctt\u003em\u003c/tt\u003e if \u003ctt\u003em.put(k, v)\u003c/tt\u003e is invoked when\n \u003ctt\u003em.containsKey(k)\u003c/tt\u003e would return \u003ctt\u003etrue\u003c/tt\u003e immediately prior to\n the invocation.)\n\n \u003cp\u003eThis implementation spares its clients from the unspecified, generally\n chaotic ordering provided by {@link HashMap} (and {@link Hashtable}),\n without incurring the increased cost associated with {@link TreeMap}.  It\n can be used to produce a copy of a map that has the same order as the\n original, regardless of the original map\u0027s implementation:\n \u003cpre\u003e\n     void foo(Map m) {\n         Map copy \u003d new LinkedHashMap(m);\n         ...\n     }\n \u003c/pre\u003e\n This technique is particularly useful if a module takes a map on input,\n copies it, and later returns results whose order is determined by that of\n the copy.  (Clients generally appreciate having things returned in the same\n order they were presented.)\n\n \u003cp\u003eA special {@link #LinkedHashMap(int,float,boolean) constructor} is\n provided to create a linked hash map whose order of iteration is the order\n in which its entries were last accessed, from least-recently accessed to\n most-recently (\u003ci\u003eaccess-order\u003c/i\u003e).  This kind of map is well-suited to\n building LRU caches.  Invoking the {@code put}, {@code putIfAbsent},\n {@code get}, {@code getOrDefault}, {@code compute}, {@code computeIfAbsent},\n {@code computeIfPresent}, or {@code merge} methods results\n in an access to the corresponding entry (assuming it exists after the\n invocation completes). The {@code replace} methods only result in an access\n of the entry if the value is replaced.  The {@code putAll} method generates one\n entry access for each mapping in the specified map, in the order that\n key-value mappings are provided by the specified map\u0027s entry set iterator.\n \u003ci\u003eNo other methods generate entry accesses.\u003c/i\u003e  In particular, operations\n on collection-views do \u003ci\u003enot\u003c/i\u003e affect the order of iteration of the\n backing map.\n\n \u003cp\u003eThe {@link #removeEldestEntry(Map.Entry)} method may be overridden to\n impose a policy for removing stale mappings automatically when new mappings\n are added to the map.\n\n \u003cp\u003eThis class provides all of the optional \u003ctt\u003eMap\u003c/tt\u003e operations, and\n permits null elements.  Like \u003ctt\u003eHashMap\u003c/tt\u003e, it provides constant-time\n performance for the basic operations (\u003ctt\u003eadd\u003c/tt\u003e, \u003ctt\u003econtains\u003c/tt\u003e and\n \u003ctt\u003eremove\u003c/tt\u003e), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of \u003ctt\u003eHashMap\u003c/tt\u003e, due to the added expense of maintaining the\n linked list, with one exception: Iteration over the collection-views\n of a \u003ctt\u003eLinkedHashMap\u003c/tt\u003e requires time proportional to the \u003ci\u003esize\u003c/i\u003e\n of the map, regardless of its capacity.  Iteration over a \u003ctt\u003eHashMap\u003c/tt\u003e\n is likely to be more expensive, requiring time proportional to its\n \u003ci\u003ecapacity\u003c/i\u003e.\n\n \u003cp\u003eA linked hash map has two parameters that affect its performance:\n \u003ci\u003einitial capacity\u003c/i\u003e and \u003ci\u003eload factor\u003c/i\u003e.  They are defined precisely\n as for \u003ctt\u003eHashMap\u003c/tt\u003e.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for \u003ctt\u003eHashMap\u003c/tt\u003e, as iteration times for this class are unaffected\n by capacity.\n\n \u003cp\u003e\u003cstrong\u003eNote that this implementation is not synchronized.\u003c/strong\u003e\n If multiple threads access a linked hash map concurrently, and at least\n one of the threads modifies the map structurally, it \u003cem\u003emust\u003c/em\u003e be\n synchronized externally.  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n {@link Collections#synchronizedMap Collections.synchronizedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map:\u003cpre\u003e\n   Map m \u003d Collections.synchronizedMap(new LinkedHashMap(...));\u003c/pre\u003e\n\n A structural modification is any operation that adds or deletes one or more\n mappings or, in the case of access-ordered linked hash maps, affects\n iteration order.  In insertion-ordered linked hash maps, merely changing\n the value associated with a key that is already contained in the map is not\n a structural modification.  \u003cstrong\u003eIn access-ordered linked hash maps,\n merely querying the map with \u003ctt\u003eget\u003c/tt\u003e is a structural modification.\n \u003c/strong\u003e)\n\n \u003cp\u003eThe iterators returned by the \u003ctt\u003eiterator\u003c/tt\u003e method of the collections\n returned by all of this class\u0027s collection view methods are\n \u003cem\u003efail-fast\u003c/em\u003e: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator\u0027s own\n \u003ctt\u003eremove\u003c/tt\u003e method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n \u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw \u003ctt\u003eConcurrentModificationException\u003c/tt\u003e on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   \u003ci\u003ethe fail-fast behavior of iterators\n should be used only to detect bugs.\u003c/i\u003e\n\n \u003cp\u003eThe spliterators returned by the spliterator method of the collections\n returned by all of this class\u0027s collection view methods are\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e,\n \u003cem\u003efail-fast\u003c/em\u003e, and additionally report {@link Spliterator#ORDERED}.\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LinkedHashMap","qualifiedName":"java.util.LinkedHashMap","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.HashMap","interfaces":["java.util.Map"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"LinkedHashMap","comment":"Constructs an empty insertion-ordered \u003ctt\u003eLinkedHashMap\u003c/tt\u003e instance\n with the specified initial capacity and load factor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float)","flatSignature":"(int, float)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"LinkedHashMap","comment":"Constructs an empty insertion-ordered \u003ctt\u003eLinkedHashMap\u003c/tt\u003e instance\n with the specified initial capacity and a default load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"LinkedHashMap","comment":"Constructs an empty insertion-ordered \u003ctt\u003eLinkedHashMap\u003c/tt\u003e instance\n with the default initial capacity (16) and load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"LinkedHashMap","comment":"Constructs an insertion-ordered \u003ctt\u003eLinkedHashMap\u003c/tt\u003e instance with\n the same mappings as the specified map.  The \u003ctt\u003eLinkedHashMap\u003c/tt\u003e\n instance is created with a default load factor (0.75) and an initial\n capacity sufficient to hold the mappings in the specified map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"LinkedHashMap","comment":"Constructs an empty \u003ctt\u003eLinkedHashMap\u003c/tt\u003e instance with the\n specified initial capacity, load factor and ordering mode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float, boolean)","flatSignature":"(int, float, boolean)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"accessOrder","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"containsValue","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this map maps one or more keys to the\n specified value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n \u003cp\u003eMore formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key\u003d\u003dnull ? k\u003d\u003dnull :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n \u003cp\u003eA return value of {@code null} does not \u003ci\u003enecessarily\u003c/i\u003e\n indicate that the map contains no mapping for the key; it\u0027s also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOrDefault","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, V)","flatSignature":"(Object, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"defaultValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"clear","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n \u003ctt\u003eIterator.remove\u003c/tt\u003e, \u003ctt\u003eSet.remove\u003c/tt\u003e,\n \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e, and \u003ctt\u003eclear\u003c/tt\u003e\n operations.  It does not support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e\n operations.\n Its {@link Spliterator} typically provides faster sequential\n performance but much poorer parallel performance than that of\n {@code HashMap}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"values","comment":"Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e,\n \u003ctt\u003eCollection.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e,\n \u003ctt\u003eretainAll\u003c/tt\u003e and \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not\n support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations.\n Its {@link Spliterator} typically provides faster sequential\n performance but much poorer parallel performance than that of\n {@code HashMap}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"entrySet","comment":"Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation, or through the\n \u003ctt\u003esetValue\u003c/tt\u003e operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e,\n \u003ctt\u003eSet.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e and\n \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not support the\n \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations.\n Its {@link Spliterator} typically provides faster sequential\n performance but much poorer parallel performance than that of\n {@code HashMap}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"function","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}