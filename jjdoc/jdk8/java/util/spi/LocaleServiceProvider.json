{"name":"LocaleServiceProvider","comment":"\u003cp\u003e\n This is the super class of all the locale sensitive service provider\n interfaces (SPIs).\n \u003cp\u003e\n Locale sensitive  service provider interfaces are interfaces that\n correspond to locale sensitive classes in the \u003ccode\u003ejava.text\u003c/code\u003e\n and \u003ccode\u003ejava.util\u003c/code\u003e packages. The interfaces enable the\n construction of locale sensitive objects and the retrieval of\n localized names for these packages. Locale sensitive factory methods\n and methods for name retrieval in the \u003ccode\u003ejava.text\u003c/code\u003e and\n \u003ccode\u003ejava.util\u003c/code\u003e packages use implementations of the provider\n interfaces to offer support for locales beyond the set of locales\n supported by the Java runtime environment itself.\n\n \u003ch3\u003ePackaging of Locale Sensitive Service Provider Implementations\u003c/h3\u003e\n Implementations of these locale sensitive services are packaged using the\n \u003ca href\u003d\"../../../../technotes/guides/extensions/index.html\"\u003eJava Extension Mechanism\u003c/a\u003e\n as installed extensions.  A provider identifies itself with a\n provider-configuration file in the resource directory META-INF/services,\n using the fully qualified provider interface class name as the file name.\n The file should contain a list of fully-qualified concrete provider class names,\n one per line. A line is terminated by any one of a line feed (\u0027\\n\u0027), a carriage\n return (\u0027\\r\u0027), or a carriage return followed immediately by a line feed. Space\n and tab characters surrounding each name, as well as blank lines, are ignored.\n The comment character is \u0027#\u0027 (\u0027#\u0027); on each line all characters following\n the first comment character are ignored. The file must be encoded in UTF-8.\n \u003cp\u003e\n If a particular concrete provider class is named in more than one configuration\n file, or is named in the same configuration file more than once, then the\n duplicates will be ignored. The configuration file naming a particular provider\n need not be in the same jar file or other distribution unit as the provider itself.\n The provider must be accessible from the same class loader that was initially\n queried to locate the configuration file; this is not necessarily the class loader\n that loaded the file.\n \u003cp\u003e\n For example, an implementation of the\n {@link java.text.spi.DateFormatProvider DateFormatProvider} class should\n take the form of a jar file which contains the file:\n \u003cpre\u003e\n META-INF/services/java.text.spi.DateFormatProvider\n \u003c/pre\u003e\n And the file \u003ccode\u003ejava.text.spi.DateFormatProvider\u003c/code\u003e should have\n a line such as:\n \u003cpre\u003e\n \u003ccode\u003ecom.foo.DateFormatProviderImpl\u003c/code\u003e\n \u003c/pre\u003e\n which is the fully qualified class name of the class implementing\n \u003ccode\u003eDateFormatProvider\u003c/code\u003e.\n \u003ch4\u003eInvocation of Locale Sensitive Services\u003c/h4\u003e\n \u003cp\u003e\n Locale sensitive factory methods and methods for name retrieval in the\n \u003ccode\u003ejava.text\u003c/code\u003e and \u003ccode\u003ejava.util\u003c/code\u003e packages invoke\n service provider methods when needed to support the requested locale.\n The methods first check whether the Java runtime environment itself\n supports the requested locale, and use its support if available.\n Otherwise, they call the {@link #isSupportedLocale(Locale) isSupportedLocale}\n methods of installed providers for the appropriate interface to find one that\n supports the requested locale. If such a provider is found, its other\n methods are called to obtain the requested object or name.  When checking\n whether a locale is supported, the \u003ca href\u003d\"../Locale.html#def_extensions\"\u003e\n locale\u0027s extensions\u003c/a\u003e are ignored by default. (If locale\u0027s extensions should\n also be checked, the {@code isSupportedLocale} method must be overridden.)\n If neither the Java runtime environment itself nor an installed provider\n supports the requested locale, the methods go through a list of candidate\n locales and repeat the availability check for each until a match is found.\n The algorithm used for creating a list of candidate locales is same as\n the one used by \u003ccode\u003eResourceBundle\u003c/code\u003e by default (see\n {@link java.util.ResourceBundle.Control#getCandidateLocales getCandidateLocales}\n for the details).  Even if a locale is resolved from the candidate list,\n methods that return requested objects or names are invoked with the original\n requested locale including {@code Locale} extensions. The Java runtime\n environment must support the root locale for all locale sensitive services in\n order to guarantee that this process terminates.\n \u003cp\u003e\n Providers of names (but not providers of other objects) are allowed to\n return null for some name requests even for locales that they claim to\n support by including them in their return value for\n \u003ccode\u003egetAvailableLocales\u003c/code\u003e. Similarly, the Java runtime\n environment itself may not have all names for all locales that it\n supports. This is because the sets of objects for which names are\n requested can be large and vary over time, so that it\u0027s not always\n feasible to cover them completely. If the Java runtime environment or a\n provider returns null instead of a name, the lookup will proceed as\n described above as if the locale was not supported.\n \u003cp\u003e\n Starting from JDK8, the search order of locale sensitive services can\n be configured by using the \"java.locale.providers\" system property.\n This system property declares the user\u0027s preferred order for looking up\n the locale sensitive services separated by a comma. It is only read at\n the Java runtime startup, so the later call to System.setProperty() won\u0027t\n affect the order.\n \u003cp\u003e\n For example, if the following is specified in the property:\n \u003cpre\u003e\n java.locale.providers\u003dSPI,JRE\n \u003c/pre\u003e\n where \"SPI\" represents the locale sensitive services implemented in the\n installed SPI providers, and \"JRE\" represents the locale sensitive services\n in the Java Runtime Environment, the locale sensitive services in the SPI\n providers are looked up first.\n \u003cp\u003e\n There are two other possible locale sensitive service providers, i.e., \"CLDR\"\n which is a provider based on Unicode Consortium\u0027s\n \u003ca href\u003d\"http://cldr.unicode.org/\"\u003eCLDR Project\u003c/a\u003e, and \"HOST\" which is a\n provider that reflects the user\u0027s custom settings in the underlying operating\n system. These two providers may not be available, depending on the Java Runtime\n Environment implementation. Specifying \"JRE,SPI\" is identical to the default\n behavior, which is compatibile with the prior releases.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LocaleServiceProvider","qualifiedName":"java.util.spi.LocaleServiceProvider","dimension":"","elementType":{},"package":"java.util.spi","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getAvailableLocales","comment":"Returns an array of all locales for which this locale service provider\n can provide localized objects or names. This information is used to\n compose {@code getAvailableLocales()} values of the locale-dependent\n services, such as {@code DateFormat.getAvailableLocales()}.\n\n \u003cp\u003eThe array returned by this method should not include two or more\n {@code Locale} objects only differing in their extensions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSupportedLocale","comment":"Returns {@code true} if the given {@code locale} is supported by\n this locale service provider. The given {@code locale} may contain\n \u003ca href\u003d\"../Locale.html#def_extensions\"\u003eextensions\u003c/a\u003e that should be\n taken into account for the support determination.\n\n \u003cp\u003eThe default implementation returns {@code true} if the given {@code locale}\n is equal to any of the available {@code Locale}s returned by\n {@link #getAvailableLocales()} with ignoring any extensions in both the\n given {@code locale} and the available locales. Concrete locale service\n provider implementations should override this method if those\n implementations are {@code Locale} extensions-aware. For example,\n {@code DecimalFormatSymbolsProvider} implementations will need to check\n extensions in the given {@code locale} to see if any numbering system is\n specified and can be supported. However, {@code CollatorProvider}\n implementations may not be affected by any particular numbering systems,\n and in that case, extensions for numbering systems should be ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.text.spi.NumberFormatProvider","java.text.spi.DecimalFormatSymbolsProvider","java.text.spi.DateFormatSymbolsProvider","java.text.spi.DateFormatProvider","java.text.spi.CollatorProvider","java.text.spi.BreakIteratorProvider","java.util.spi.TimeZoneNameProvider","java.util.spi.LocaleNameProvider","java.util.spi.CurrencyNameProvider","java.util.spi.CalendarNameProvider","java.util.spi.CalendarDataProvider"],"enumConstants":[]}