{"name":"AbstractSet","comment":"This class provides a skeletal implementation of the \u003ctt\u003eSet\u003c/tt\u003e\n interface to minimize the effort required to implement this\n interface. \u003cp\u003e\n\n The process of implementing a set by extending this class is identical\n to that of implementing a Collection by extending AbstractCollection,\n except that all of the methods and constructors in subclasses of this\n class must obey the additional constraints imposed by the \u003ctt\u003eSet\u003c/tt\u003e\n interface (for instance, the add method must not permit addition of\n multiple instances of an object to a set).\u003cp\u003e\n\n Note that this class does not override any of the implementations from\n the \u003ctt\u003eAbstractCollection\u003c/tt\u003e class.  It merely adds implementations\n for \u003ctt\u003eequals\u003c/tt\u003e and \u003ctt\u003ehashCode\u003c/tt\u003e.\u003cp\u003e\n\n This class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractSet","qualifiedName":"java.util.AbstractSet","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractCollection","interfaces":["java.util.Set"],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"equals","comment":"Compares the specified object with this set for equality.  Returns\n \u003ctt\u003etrue\u003c/tt\u003e if the given object is also a set, the two sets have\n the same size, and every member of the given set is contained in\n this set.  This ensures that the \u003ctt\u003eequals\u003c/tt\u003e method works\n properly across different implementations of the \u003ctt\u003eSet\u003c/tt\u003e\n interface.\u003cp\u003e\n\n This implementation first checks if the specified object is this\n set; if so it returns \u003ctt\u003etrue\u003c/tt\u003e.  Then, it checks if the\n specified object is a set whose size is identical to the size of\n this set; if not, it returns false.  If so, it returns\n \u003ctt\u003econtainsAll((Collection) o)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this set.  The hash code of a set is\n defined to be the sum of the hash codes of the elements in the set,\n where the hash code of a \u003ctt\u003enull\u003c/tt\u003e element is defined to be zero.\n This ensures that \u003ctt\u003es1.equals(s2)\u003c/tt\u003e implies that\n \u003ctt\u003es1.hashCode()\u003d\u003ds2.hashCode()\u003c/tt\u003e for any two sets \u003ctt\u003es1\u003c/tt\u003e\n and \u003ctt\u003es2\u003c/tt\u003e, as required by the general contract of\n {@link Object#hashCode}.\n\n \u003cp\u003eThis implementation iterates over the set, calling the\n \u003ctt\u003ehashCode\u003c/tt\u003e method on each element in the set, and adding up\n the results.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"removeAll","comment":"Removes from this set all of its elements that are contained in the\n specified collection (optional operation).  If the specified\n collection is also a set, this operation effectively modifies this\n set so that its value is the \u003ci\u003easymmetric set difference\u003c/i\u003e of\n the two sets.\n\n \u003cp\u003eThis implementation determines which is the smaller of this set\n and the specified collection, by invoking the \u003ctt\u003esize\u003c/tt\u003e\n method on each.  If this set has fewer elements, then the\n implementation iterates over this set, checking each element\n returned by the iterator in turn to see if it is contained in\n the specified collection.  If it is so contained, it is removed\n from this set with the iterator\u0027s \u003ctt\u003eremove\u003c/tt\u003e method.  If\n the specified collection has fewer elements, then the\n implementation iterates over the specified collection, removing\n from this set each element returned by the iterator, using this\n set\u0027s \u003ctt\u003eremove\u003c/tt\u003e method.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the iterator returned by the\n \u003ctt\u003eiterator\u003c/tt\u003e method does not implement the \u003ctt\u003eremove\u003c/tt\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subClasses":["java.util.TreeSet","java.util.HashSet","java.util.EnumSet","java.util.concurrent.CopyOnWriteArraySet","java.util.concurrent.ConcurrentSkipListSet"],"enumConstants":[]}