{"name":"Deque","comment":"A linear collection that supports element insertion and removal at\n both ends.  The name \u003ci\u003edeque\u003c/i\u003e is short for \"double ended queue\"\n and is usually pronounced \"deck\".  Most {@code Deque}\n implementations place no fixed limits on the number of elements\n they may contain, but this interface supports capacity-restricted\n deques as well as those with no fixed size limit.\n\n \u003cp\u003eThis interface defines methods to access the elements at both\n ends of the deque.  Methods are provided to insert, remove, and\n examine the element.  Each of these methods exists in two forms:\n one throws an exception if the operation fails, the other returns a\n special value (either {@code null} or {@code false}, depending on\n the operation).  The latter form of the insert operation is\n designed specifically for use with capacity-restricted\n {@code Deque} implementations; in most implementations, insert\n operations cannot fail.\n\n \u003cp\u003eThe twelve methods described above are summarized in the\n following table:\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eSummary of Deque methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 2\u003e \u003cb\u003eFirst Element (Head)\u003c/b\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 2\u003e \u003cb\u003eLast Element (Tail)\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eThrows exception\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eSpecial value\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eThrows exception\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eSpecial value\u003c/em\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eInsert\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#addFirst addFirst(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#offerFirst offerFirst(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#addLast addLast(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#offerLast offerLast(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eRemove\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#removeFirst removeFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#pollFirst pollFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#removeLast removeLast()}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#pollLast pollLast()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eExamine\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#getFirst getFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#peekFirst peekFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#getLast getLast()}\u003c/td\u003e\n    \u003ctd\u003e{@link Deque#peekLast peekLast()}\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eThis interface extends the {@link Queue} interface.  When a deque is\n used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are\n added at the end of the deque and removed from the beginning.  The methods\n inherited from the {@code Queue} interface are precisely equivalent to\n {@code Deque} methods as indicated in the following table:\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eComparison of Queue and Deque methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003e{@code Queue} Method\u003c/b\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003eEquivalent {@code Deque} Method\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link java.util.Queue#add add(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #addLast addLast(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link java.util.Queue#offer offer(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerLast offerLast(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link java.util.Queue#remove remove()}\u003c/td\u003e\n    \u003ctd\u003e{@link #removeFirst removeFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link java.util.Queue#poll poll()}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollFirst pollFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link java.util.Queue#element element()}\u003c/td\u003e\n    \u003ctd\u003e{@link #getFirst getFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link java.util.Queue#peek peek()}\u003c/td\u003e\n    \u003ctd\u003e{@link #peek peekFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eDeques can also be used as LIFO (Last-In-First-Out) stacks.  This\n interface should be used in preference to the legacy {@link Stack} class.\n When a deque is used as a stack, elements are pushed and popped from the\n beginning of the deque.  Stack methods are precisely equivalent to\n {@code Deque} methods as indicated in the table below:\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eComparison of Stack and Deque methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003eStack Method\u003c/b\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003eEquivalent {@code Deque} Method\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #push push(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #addFirst addFirst(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #pop pop()}\u003c/td\u003e\n    \u003ctd\u003e{@link #removeFirst removeFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #peek peek()}\u003c/td\u003e\n    \u003ctd\u003e{@link #peekFirst peekFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eNote that the {@link #peek peek} method works equally well when\n a deque is used as a queue or a stack; in either case, elements are\n drawn from the beginning of the deque.\n\n \u003cp\u003eThis interface provides two methods to remove interior\n elements, {@link #removeFirstOccurrence removeFirstOccurrence} and\n {@link #removeLastOccurrence removeLastOccurrence}.\n\n \u003cp\u003eUnlike the {@link List} interface, this interface does not\n provide support for indexed access to elements.\n\n \u003cp\u003eWhile {@code Deque} implementations are not strictly required\n to prohibit the insertion of null elements, they are strongly\n encouraged to do so.  Users of any {@code Deque} implementations\n that do allow null elements are strongly encouraged \u003ci\u003enot\u003c/i\u003e to\n take advantage of the ability to insert nulls.  This is so because\n {@code null} is used as a special return value by various methods\n to indicated that the deque is empty.\n\n \u003cp\u003e{@code Deque} implementations generally do not define\n element-based versions of the {@code equals} and {@code hashCode}\n methods, but instead inherit the identity-based versions from class\n {@code Object}.\n\n \u003cp\u003eThis interface is a member of the \u003ca\n href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e Java Collections\n Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Deque","qualifiedName":"java.util.Deque","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.Queue"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"addFirst","comment":"Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an {@code IllegalStateException} if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use method {@link #offerFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"addLast","comment":"Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an {@code IllegalStateException} if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use method {@link #offerLast}.\n\n \u003cp\u003eThis method is equivalent to {@link #add}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offerFirst","comment":"Inserts the specified element at the front of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addFirst} method,\n which can fail to insert an element only by throwing an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offerLast","comment":"Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addLast} method,\n which can fail to insert an element only by throwing an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"removeFirst","comment":"Retrieves and removes the first element of this deque.  This method\n differs from {@link #pollFirst pollFirst} only in that it throws an\n exception if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"removeLast","comment":"Retrieves and removes the last element of this deque.  This method\n differs from {@link #pollLast pollLast} only in that it throws an\n exception if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollFirst","comment":"Retrieves and removes the first element of this deque,\n or returns {@code null} if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollLast","comment":"Retrieves and removes the last element of this deque,\n or returns {@code null} if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFirst","comment":"Retrieves, but does not remove, the first element of this deque.\n\n This method differs from {@link #peekFirst peekFirst} only in that it\n throws an exception if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLast","comment":"Retrieves, but does not remove, the last element of this deque.\n This method differs from {@link #peekLast peekLast} only in that it\n throws an exception if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peekFirst","comment":"Retrieves, but does not remove, the first element of this deque,\n or returns {@code null} if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peekLast","comment":"Retrieves, but does not remove, the last element of this deque,\n or returns {@code null} if this deque is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"removeFirstOccurrence","comment":"Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e\n (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeLastOccurrence","comment":"Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e\n (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"add","comment":"Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n {@code true} upon success and throwing an\n {@code IllegalStateException} if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use {@link #offer(Object) offer}.\n\n \u003cp\u003eThis method is equivalent to {@link #addLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offer","comment":"Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n {@code true} upon success and {@code false} if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the {@link #add} method, which can fail to\n insert an element only by throwing an exception.\n\n \u003cp\u003eThis method is equivalent to {@link #offerLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #removeFirst()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n {@code null} if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #pollFirst()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"element","comment":"Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from {@link #peek peek} only in that it throws an\n exception if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #getFirst()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peek","comment":"Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns {@code null} if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #peekFirst()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"push","comment":"Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n {@code IllegalStateException} if no space is currently available.\n\n \u003cp\u003eThis method is equivalent to {@link #addFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"pop","comment":"Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n \u003cp\u003eThis method is equivalent to {@link #removeFirst()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"remove","comment":"Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e\n (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n \u003cp\u003eThis method is equivalent to {@link #removeFirstOccurrence(Object)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contains","comment":"Returns {@code true} if this deque contains the specified element.\n More formally, returns {@code true} if and only if this deque contains\n at least one element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"size","comment":"Returns the number of elements in this deque.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingIterator","comment":"Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.LinkedList","java.util.ArrayDeque","java.util.concurrent.BlockingDeque","java.util.concurrent.ConcurrentLinkedDeque"],"enumConstants":[]}