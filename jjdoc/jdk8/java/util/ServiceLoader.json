{"name":"ServiceLoader","comment":"A simple service-provider loading facility.\n\n \u003cp\u003e A \u003ci\u003eservice\u003c/i\u003e is a well-known set of interfaces and (usually\n abstract) classes.  A \u003ci\u003eservice provider\u003c/i\u003e is a specific implementation\n of a service.  The classes in a provider typically implement the interfaces\n and subclass the classes defined in the service itself.  Service providers\n can be installed in an implementation of the Java platform in the form of\n extensions, that is, jar files placed into any of the usual extension\n directories.  Providers can also be made available by adding them to the\n application\u0027s class path or by some other platform-specific means.\n\n \u003cp\u003e For the purpose of loading, a service is represented by a single type,\n that is, a single interface or abstract class.  (A concrete class can be\n used, but this is not recommended.)  A provider of a given service contains\n one or more concrete classes that extend this \u003ci\u003eservice type\u003c/i\u003e with data\n and code specific to the provider.  The \u003ci\u003eprovider class\u003c/i\u003e is typically\n not the entire provider itself but rather a proxy which contains enough\n information to decide whether the provider is able to satisfy a particular\n request together with code that can create the actual provider on demand.\n The details of provider classes tend to be highly service-specific; no\n single class or interface could possibly unify them, so no such type is\n defined here.  The only requirement enforced by this facility is that\n provider classes must have a zero-argument constructor so that they can be\n instantiated during loading.\n\n \u003cp\u003e\u003ca name\u003d\"format\"\u003e A service provider is identified by placing a\n \u003ci\u003eprovider-configuration file\u003c/i\u003e in the resource directory\n \u003ctt\u003eMETA-INF/services\u003c/tt\u003e.\u003c/a\u003e  The file\u0027s name is the fully-qualified \u003ca\n href\u003d\"../lang/ClassLoader.html#name\"\u003ebinary name\u003c/a\u003e of the service\u0027s type.\n The file contains a list of fully-qualified binary names of concrete\n provider classes, one per line.  Space and tab characters surrounding each\n name, as well as blank lines, are ignored.  The comment character is\n \u003ctt\u003e\u0027#\u0027\u003c/tt\u003e (\u003ctt\u003e\u0027\u0026#92;u0023\u0027\u003c/tt\u003e,\n \u003cfont style\u003d\"font-size:smaller;\"\u003eNUMBER SIGN\u003c/font\u003e); on\n each line all characters following the first comment character are ignored.\n The file must be encoded in UTF-8.\n\n \u003cp\u003e If a particular concrete provider class is named in more than one\n configuration file, or is named in the same configuration file more than\n once, then the duplicates are ignored.  The configuration file naming a\n particular provider need not be in the same jar file or other distribution\n unit as the provider itself.  The provider must be accessible from the same\n class loader that was initially queried to locate the configuration file;\n note that this is not necessarily the class loader from which the file was\n actually loaded.\n\n \u003cp\u003e Providers are located and instantiated lazily, that is, on demand.  A\n service loader maintains a cache of the providers that have been loaded so\n far.  Each invocation of the {@link #iterator iterator} method returns an\n iterator that first yields all of the elements of the cache, in\n instantiation order, and then lazily locates and instantiates any remaining\n providers, adding each one to the cache in turn.  The cache can be cleared\n via the {@link #reload reload} method.\n\n \u003cp\u003e Service loaders always execute in the security context of the caller.\n Trusted system code should typically invoke the methods in this class, and\n the methods of the iterators which they return, from within a privileged\n security context.\n\n \u003cp\u003e Instances of this class are not safe for use by multiple concurrent\n threads.\n\n \u003cp\u003e Unless otherwise specified, passing a \u003ctt\u003enull\u003c/tt\u003e argument to any\n method in this class will cause a {@link NullPointerException} to be thrown.\n\n\n \u003cp\u003e\u003cspan style\u003d\"font-weight: bold; padding-right: 1em\"\u003eExample\u003c/span\u003e\n Suppose we have a service type \u003ctt\u003ecom.example.CodecSet\u003c/tt\u003e which is\n intended to represent sets of encoder/decoder pairs for some protocol.  In\n this case it is an abstract class with two abstract methods:\n\n \u003cblockquote\u003e\u003cpre\u003e\n public abstract Encoder getEncoder(String encodingName);\n public abstract Decoder getDecoder(String encodingName);\u003c/pre\u003e\u003c/blockquote\u003e\n\n Each method returns an appropriate object or \u003ctt\u003enull\u003c/tt\u003e if the provider\n does not support the given encoding.  Typical providers support more than\n one encoding.\n\n \u003cp\u003e If \u003ctt\u003ecom.example.impl.StandardCodecs\u003c/tt\u003e is an implementation of the\n \u003ctt\u003eCodecSet\u003c/tt\u003e service then its jar file also contains a file named\n\n \u003cblockquote\u003e\u003cpre\u003e\n META-INF/services/com.example.CodecSet\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e This file contains the single line:\n\n \u003cblockquote\u003e\u003cpre\u003e\n com.example.impl.StandardCodecs    # Standard codecs\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The \u003ctt\u003eCodecSet\u003c/tt\u003e class creates and saves a single service instance\n at initialization:\n\n \u003cblockquote\u003e\u003cpre\u003e\n private static ServiceLoader\u0026lt;CodecSet\u0026gt; codecSetLoader\n     \u003d ServiceLoader.load(CodecSet.class);\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e To locate an encoder for a given encoding name it defines a static\n factory method which iterates through the known and available providers,\n returning only when it has located a suitable encoder or has run out of\n providers.\n\n \u003cblockquote\u003e\u003cpre\u003e\n public static Encoder getEncoder(String encodingName) {\n     for (CodecSet cp : codecSetLoader) {\n         Encoder enc \u003d cp.getEncoder(encodingName);\n         if (enc !\u003d null)\n             return enc;\n     }\n     return null;\n }\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e A \u003ctt\u003egetDecoder\u003c/tt\u003e method is defined similarly.\n\n\n \u003cp\u003e\u003cspan style\u003d\"font-weight: bold; padding-right: 1em\"\u003eUsage Note\u003c/span\u003e If\n the class path of a class loader that is used for provider loading includes\n remote network URLs then those URLs will be dereferenced in the process of\n searching for provider-configuration files.\n\n \u003cp\u003e This activity is normal, although it may cause puzzling entries to be\n created in web-server logs.  If a web server is not configured correctly,\n however, then this activity may cause the provider-loading algorithm to fail\n spuriously.\n\n \u003cp\u003e A web server should return an HTTP 404 (Not Found) response when a\n requested resource does not exist.  Sometimes, however, web servers are\n erroneously configured to return an HTTP 200 (OK) response along with a\n helpful HTML error page in such cases.  This will cause a {@link\n ServiceConfigurationError} to be thrown when this class attempts to parse\n the HTML page as a provider-configuration file.  The best solution to this\n problem is to fix the misconfigured web server to return the correct\n response code (HTTP 404) along with the HTML error page.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ServiceLoader","qualifiedName":"java.util.ServiceLoader","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.lang.Iterable"],"isAbstract":false,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"reload","comment":"Clear this loader\u0027s provider cache so that all providers will be\n reloaded.\n\n \u003cp\u003e After invoking this method, subsequent invocations of the {@link\n #iterator() iterator} method will lazily look up and instantiate\n providers from scratch, just as is done by a newly-created loader.\n\n \u003cp\u003e This method is intended for use in situations in which new providers\n can be installed into a running Java virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"iterator","comment":"Lazily loads the available providers of this loader\u0027s service.\n\n \u003cp\u003e The iterator returned by this method first yields all of the\n elements of the provider cache, in instantiation order.  It then lazily\n loads and instantiates any remaining providers, adding each one to the\n cache in turn.\n\n \u003cp\u003e To achieve laziness the actual work of parsing the available\n provider-configuration files and instantiating providers must be done by\n the iterator itself.  Its {@link java.util.Iterator#hasNext hasNext} and\n {@link java.util.Iterator#next next} methods can therefore throw a\n {@link ServiceConfigurationError} if a provider-configuration file\n violates the specified format, or if it names a provider class that\n cannot be found and instantiated, or if the result of instantiating the\n class is not assignable to the service type, or if any other kind of\n exception or error is thrown as the next provider is located and\n instantiated.  To write robust code it is only necessary to catch {@link\n ServiceConfigurationError} when using a service iterator.\n\n \u003cp\u003e If such an error is thrown then subsequent invocations of the\n iterator will make a best effort to locate and instantiate the next\n available provider, but in general such recovery cannot be guaranteed.\n\n \u003cblockquote style\u003d\"font-size: smaller; line-height: 1.2\"\u003e\u003cspan\n style\u003d\"padding-right: 1em; font-weight: bold\"\u003eDesign Note\u003c/span\u003e\n Throwing an error in these cases may seem extreme.  The rationale for\n this behavior is that a malformed provider-configuration file, like a\n malformed class file, indicates a serious problem with the way the Java\n virtual machine is configured or is being used.  As such it is\n preferable to throw an error rather than try to recover or, even worse,\n fail silently.\u003c/blockquote\u003e\n\n \u003cp\u003e The iterator returned by this method does not support removal.\n Invoking its {@link java.util.Iterator#remove() remove} method will\n cause an {@link UnsupportedOperationException} to be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"load","comment":"Creates a new service loader for the given service type and class\n loader.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cS\u003e, java.lang.ClassLoader)","flatSignature":"(Class\u003cS\u003e, ClassLoader)","returnType":{"isPrimitive":false,"simpleName":"ServiceLoader","qualifiedName":"java.util.ServiceLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"service","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}}],"typeParameters":[{"name":"S","bounds":[]}]},{"name":"load","comment":"Creates a new service loader for the given service type, using the\n current thread\u0027s {@linkplain java.lang.Thread#getContextClassLoader\n context class loader}.\n\n \u003cp\u003e An invocation of this convenience method of the form\n\n \u003cblockquote\u003e\u003cpre\u003e\n ServiceLoader.load(\u003ci\u003eservice\u003c/i\u003e)\u003c/pre\u003e\u003c/blockquote\u003e\n\n is equivalent to\n\n \u003cblockquote\u003e\u003cpre\u003e\n ServiceLoader.load(\u003ci\u003eservice\u003c/i\u003e,\n                    Thread.currentThread().getContextClassLoader())\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cS\u003e)","flatSignature":"(Class\u003cS\u003e)","returnType":{"isPrimitive":false,"simpleName":"ServiceLoader","qualifiedName":"java.util.ServiceLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"service","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"S","bounds":[]}]},{"name":"loadInstalled","comment":"Creates a new service loader for the given service type, using the\n extension class loader.\n\n \u003cp\u003e This convenience method simply locates the extension class loader,\n call it \u003ctt\u003e\u003ci\u003eextClassLoader\u003c/i\u003e\u003c/tt\u003e, and then returns\n\n \u003cblockquote\u003e\u003cpre\u003e\n ServiceLoader.load(\u003ci\u003eservice\u003c/i\u003e, \u003ci\u003eextClassLoader\u003c/i\u003e)\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e If the extension class loader cannot be found then the system class\n loader is used; if there is no system class loader then the bootstrap\n class loader is used.\n\n \u003cp\u003e This method is intended for use when only installed providers are\n desired.  The resulting service will only find and load providers that\n have been installed into the current Java virtual machine; providers on\n the application\u0027s class path will be ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cS\u003e)","flatSignature":"(Class\u003cS\u003e)","returnType":{"isPrimitive":false,"simpleName":"ServiceLoader","qualifiedName":"java.util.ServiceLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"service","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"S","bounds":[]}]},{"name":"toString","comment":"Returns a string describing this service.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"S","bounds":[]}],"enumConstants":[]}