{"name":"Calendar.Builder","comment":"{@code Calendar.Builder} is used for creating a {@code Calendar} from\n various date-time parameters.\n\n \u003cp\u003eThere are two ways to set a {@code Calendar} to a date-time value. One\n is to set the instant parameter to a millisecond offset from the \u003ca\n href\u003d\"Calendar.html#Epoch\"\u003eEpoch\u003c/a\u003e. The other is to set individual\n field parameters, such as {@link Calendar#YEAR YEAR}, to their desired\n values. These two ways can\u0027t be mixed. Trying to set both the instant and\n individual fields will cause an {@link IllegalStateException} to be\n thrown. However, it is permitted to override previous values of the\n instant or field parameters.\n\n \u003cp\u003eIf no enough field parameters are given for determining date and/or\n time, calendar specific default values are used when building a\n {@code Calendar}. For example, if the {@link Calendar#YEAR YEAR} value\n isn\u0027t given for the Gregorian calendar, 1970 will be used. If there are\n any conflicts among field parameters, the \u003ca\n href\u003d\"Calendar.html#resolution\"\u003e resolution rules\u003c/a\u003e are applied.\n Therefore, the order of field setting matters.\n\n \u003cp\u003eIn addition to the date-time parameters,\n the {@linkplain #setLocale(Locale) locale},\n {@linkplain #setTimeZone(TimeZone) time zone},\n {@linkplain #setWeekDefinition(int, int) week definition}, and\n {@linkplain #setLenient(boolean) leniency mode} parameters can be set.\n\n \u003cp\u003e\u003cb\u003eExamples\u003c/b\u003e\n \u003cp\u003eThe following are sample usages. Sample code assumes that the\n {@code Calendar} constants are statically imported.\n\n \u003cp\u003eThe following code produces a {@code Calendar} with date 2012-12-31\n (Gregorian) because Monday is the first day of a week with the \u003ca\n href\u003d\"GregorianCalendar.html#iso8601_compatible_setting\"\u003e ISO 8601\n compatible week parameters\u003c/a\u003e.\n \u003cpre\u003e\n   Calendar cal \u003d new Calendar.Builder().setCalendarType(\"iso8601\")\n                        .setWeekDate(2013, 1, MONDAY).build();\u003c/pre\u003e\n \u003cp\u003eThe following code produces a Japanese {@code Calendar} with date\n 1989-01-08 (Gregorian), assuming that the default {@link Calendar#ERA ERA}\n is \u003cem\u003eHeisei\u003c/em\u003e that started on that day.\n \u003cpre\u003e\n   Calendar cal \u003d new Calendar.Builder().setCalendarType(\"japanese\")\n                        .setFields(YEAR, 1, DAY_OF_YEAR, 1).build();\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":true,"since":"1.8","innerClasses":[],"isInnerClass":true,"constructors":[{"name":"Builder","comment":"Constructs a {@code Calendar.Builder}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"setInstant","comment":"Sets the instant parameter to the given {@code instant} value that is\n a millisecond offset from \u003ca href\u003d\"Calendar.html#Epoch\"\u003ethe\n Epoch\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"instant","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setInstant","comment":"Sets the instant parameter to the {@code instant} value given by a\n {@link Date}. This method is equivalent to a call to\n {@link #setInstant(long) setInstant(instant.getTime())}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the {@code field} parameter to the given {@code value}.\n {@code field} is an index to the {@link Calendar#fields}, such as\n {@link Calendar#DAY_OF_MONTH DAY_OF_MONTH}. Field value validation is\n not performed in this method. Any out of range values are either\n normalized in lenient mode or detected as an invalid value in\n non-lenient mode when building a {@code Calendar}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setFields","comment":"Sets field parameters to their values given by\n {@code fieldValuePairs} that are pairs of a field and its value.\n For example,\n \u003cpre\u003e\n   setFeilds(Calendar.YEAR, 2013,\n             Calendar.MONTH, Calendar.DECEMBER,\n             Calendar.DAY_OF_MONTH, 23);\u003c/pre\u003e\n is equivalent to the sequence of the following\n {@link #set(int, int) set} calls:\n \u003cpre\u003e\n   set(Calendar.YEAR, 2013)\n   .set(Calendar.MONTH, Calendar.DECEMBER)\n   .set(Calendar.DAY_OF_MONTH, 23);\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int...)","flatSignature":"(int...)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fieldValuePairs","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setDate","comment":"Sets the date field parameters to the values given by {@code year},\n {@code month}, and {@code dayOfMonth}. This method is equivalent to\n a call to:\n \u003cpre\u003e\n   setFields(Calendar.YEAR, year,\n             Calendar.MONTH, month,\n             Calendar.DAY_OF_MONTH, dayOfMonth);\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setTimeOfDay","comment":"Sets the time of day field parameters to the values given by\n {@code hourOfDay}, {@code minute}, and {@code second}. This method is\n equivalent to a call to:\n \u003cpre\u003e\n   setTimeOfDay(hourOfDay, minute, second, 0);\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hourOfDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setTimeOfDay","comment":"Sets the time of day field parameters to the values given by\n {@code hourOfDay}, {@code minute}, {@code second}, and\n {@code millis}. This method is equivalent to a call to:\n \u003cpre\u003e\n   setFields(Calendar.HOUR_OF_DAY, hourOfDay,\n             Calendar.MINUTE, minute,\n             Calendar.SECOND, second,\n             Calendar.MILLISECOND, millis);\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int)","flatSignature":"(int, int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hourOfDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"millis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setWeekDate","comment":"Sets the week-based date parameters to the values with the given\n date specifiers - week year, week of year, and day of week.\n\n \u003cp\u003eIf the specified calendar doesn\u0027t support week dates, the\n {@link #build() build} method will throw an {@link IllegalArgumentException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weekYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"weekOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setTimeZone","comment":"Sets the time zone parameter to the given {@code zone}. If no time\n zone parameter is given to this {@code Caledar.Builder}, the\n {@linkplain TimeZone#getDefault() default\n \u003ccode\u003eTimeZone\u003c/code\u003e} will be used in the {@link #build() build}\n method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLenient","comment":"Sets the lenient mode parameter to the value given by {@code lenient}.\n If no lenient parameter is given to this {@code Calendar.Builder},\n lenient mode will be used in the {@link #build() build} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"lenient","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setCalendarType","comment":"Sets the calendar type parameter to the given {@code type}. The\n calendar type given by this method has precedence over any explicit\n or implicit calendar type given by the\n {@linkplain #setLocale(Locale) locale}.\n\n \u003cp\u003eIn addition to the available calendar types returned by the\n {@link Calendar#getAvailableCalendarTypes() Calendar.getAvailableCalendarTypes}\n method, {@code \"gregorian\"} and {@code \"iso8601\"} as aliases of\n {@code \"gregory\"} can be used with this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLocale","comment":"Sets the locale parameter to the given {@code locale}. If no locale\n is given to this {@code Calendar.Builder}, the {@linkplain\n Locale#getDefault(Locale.Category) default \u003ccode\u003eLocale\u003c/code\u003e}\n for {@link Locale.Category#FORMAT} will be used.\n\n \u003cp\u003eIf no calendar type is explicitly given by a call to the\n {@link #setCalendarType(String) setCalendarType} method,\n the {@code Locale} value is used to determine what type of\n {@code Calendar} to be built.\n\n \u003cp\u003eIf no week definition parameters are explicitly given by a call to\n the {@link #setWeekDefinition(int,int) setWeekDefinition} method, the\n {@code Locale}\u0027s default values are used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setWeekDefinition","comment":"Sets the week definition parameters to the values given by\n {@code firstDayOfWeek} and {@code minimalDaysInFirstWeek} that are\n used to determine the \u003ca href\u003d\"Calendar.html#First_Week\"\u003efirst\n week\u003c/a\u003e of a year. The parameters given by this method have\n precedence over the default values given by the\n {@linkplain #setLocale(Locale) locale}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.Calendar.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"firstDayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minimalDaysInFirstWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"build","comment":"Returns a {@code Calendar} built from the parameters set by the\n setter methods. The calendar type given by the {@link #setCalendarType(String)\n setCalendarType} method or the {@linkplain #setLocale(Locale) locale} is\n used to determine what {@code Calendar} to be created. If no explicit\n calendar type is given, the locale\u0027s default calendar is created.\n\n \u003cp\u003eIf the calendar type is {@code \"iso8601\"}, the\n {@linkplain GregorianCalendar#setGregorianChange(Date) Gregorian change date}\n of a {@link GregorianCalendar} is set to {@code Date(Long.MIN_VALUE)}\n to be the \u003cem\u003eproleptic\u003c/em\u003e Gregorian calendar. Its week definition\n parameters are also set to be \u003ca\n href\u003d\"GregorianCalendar.html#iso8601_compatible_setting\"\u003ecompatible\n with the ISO 8601 standard\u003c/a\u003e. Note that the\n {@link GregorianCalendar#getCalendarType() getCalendarType} method of\n a {@code GregorianCalendar} created with {@code \"iso8601\"} returns\n {@code \"gregory\"}.\n\n \u003cp\u003eThe default values are used for locale and time zone if these\n parameters haven\u0027t been given explicitly.\n\n \u003cp\u003eAny out of range field values are either normalized in lenient\n mode or detected as an invalid value in non-lenient mode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}