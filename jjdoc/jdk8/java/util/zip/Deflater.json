{"name":"Deflater","comment":"This class provides support for general purpose compression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the \u003ca href\u003d\"package-summary.html#package_description\"\u003ejava.util.zip\n package description\u003c/a\u003e.\n\n \u003cp\u003eThe following code fragment demonstrates a trivial compression\n and decompression of a string using \u003ctt\u003eDeflater\u003c/tt\u003e and\n \u003ctt\u003eInflater\u003c/tt\u003e.\n\n \u003cblockquote\u003e\u003cpre\u003e\n try {\n     // Encode a String into bytes\n     String inputString \u003d \"blahblahblah\";\n     byte[] input \u003d inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output \u003d new byte[100];\n     Deflater compresser \u003d new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength \u003d compresser.deflate(output);\n     compresser.end();\n\n     // Decompress the bytes\n     Inflater decompresser \u003d new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result \u003d new byte[100];\n     int resultLength \u003d decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString \u003d new String(result, 0, resultLength, \"UTF-8\");\n } catch(java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Deflater","qualifiedName":"java.util.zip.Deflater","dimension":"","elementType":{},"package":"java.util.zip","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Deflater","comment":"Creates a new compressor using the specified compression level.\n If \u0027nowrap\u0027 is true then the ZLIB header and checksum fields will\n not be used in order to support the compression format used in\n both GZIP and PKZIP.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, boolean)","flatSignature":"(int, boolean)","parameters":[{"name":"level","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nowrap","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Deflater","comment":"Creates a new compressor using the specified compression level.\n Compressed data will be generated in ZLIB format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"level","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Deflater","comment":"Creates a new compressor with the default compression level.\n Compressed data will be generated in ZLIB format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[{"name":"DEFLATED","comment":"Compression method for the deflate algorithm (the only one currently\n supported).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"NO_COMPRESSION","comment":"Compression level for no compression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"BEST_SPEED","comment":"Compression level for fastest compression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"BEST_COMPRESSION","comment":"Compression level for best compression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"},{"name":"DEFAULT_COMPRESSION","comment":"Default compression level.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-1"},{"name":"FILTERED","comment":"Compression strategy best used for data consisting mostly of small\n values with a somewhat random distribution. Forces more Huffman coding\n and less string matching.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"HUFFMAN_ONLY","comment":"Compression strategy for Huffman coding only.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"DEFAULT_STRATEGY","comment":"Default compression strategy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"NO_FLUSH","comment":"Compression flush mode used to achieve best compression result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"SYNC_FLUSH","comment":"Compression flush mode used to flush out all pending output; may\n degrade compression for some compression algorithms.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"FULL_FLUSH","comment":"Compression flush mode used to flush out all pending output and\n reset the deflater. Using this mode too often can seriously degrade\n compression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"}],"methods":[{"name":"setInput","comment":"Sets input data for compression. This should be called whenever\n needsInput() returns true indicating that more input data is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setInput","comment":"Sets input data for compression. This should be called whenever\n needsInput() returns true indicating that more input data is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setDictionary","comment":"Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setDictionary","comment":"Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setStrategy","comment":"Sets the compression strategy to the specified value.\n\n \u003cp\u003e If the compression strategy is changed, the next invocation\n of {@code deflate} will compress the input available so far with\n the old strategy (and may be flushed); the new strategy will take\n effect only after that invocation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"strategy","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLevel","comment":"Sets the compression level to the specified value.\n\n \u003cp\u003e If the compression level is changed, the next invocation\n of {@code deflate} will compress the input available so far\n with the old level (and may be flushed); the new level will\n take effect only after that invocation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"level","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"needsInput","comment":"Returns true if the input data buffer is empty and setInput()\n should be called in order to provide more input.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"finish","comment":"When called, indicates that compression should end with the current\n contents of the input buffer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"finished","comment":"Returns true if the end of the compressed data output stream has\n been reached.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"deflate","comment":"Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that {@link #needsInput() needsInput} should be called\n in order to determine if more input data is required.\n\n \u003cp\u003eThis method uses {@link #NO_FLUSH} as its compression flush mode.\n An invocation of this method of the form {@code deflater.deflate(b, off, len)}\n yields the same result as the invocation of\n {@code deflater.deflate(b, off, len, Deflater.NO_FLUSH)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"deflate","comment":"Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that {@link #needsInput() needsInput} should be called\n in order to determine if more input data is required.\n\n \u003cp\u003eThis method uses {@link #NO_FLUSH} as its compression flush mode.\n An invocation of this method of the form {@code deflater.deflate(b)}\n yields the same result as the invocation of\n {@code deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"deflate","comment":"Compresses the input data and fills the specified buffer with compressed\n data. Returns actual number of bytes of data compressed.\n\n \u003cp\u003eCompression flush mode is one of the following three modes:\n\n \u003cul\u003e\n \u003cli\u003e{@link #NO_FLUSH}: allows the deflater to decide how much data\n to accumulate, before producing output, in order to achieve the best\n compression (should be used in normal use scenario). A return value\n of 0 in this flush mode indicates that {@link #needsInput()} should\n be called in order to determine if more input data is required.\n\n \u003cli\u003e{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,\n to the specified output buffer, so that an inflater that works on\n compressed data can get all input data available so far (In particular\n the {@link #needsInput()} returns {@code true} after this invocation\n if enough output space is provided). Flushing with {@link #SYNC_FLUSH}\n may degrade compression for some compression algorithms and so it\n should be used only when necessary.\n\n \u003cli\u003e{@link #FULL_FLUSH}: all pending output is flushed out as with\n {@link #SYNC_FLUSH}. The compression state is reset so that the inflater\n that works on the compressed output data can restart from this point\n if previous compressed data has been damaged or if random access is\n desired. Using {@link #FULL_FLUSH} too often can seriously degrade\n compression.\n \u003c/ul\u003e\n\n \u003cp\u003eIn the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if\n the return value is {@code len}, the space available in output\n buffer {@code b}, this method should be invoked again with the same\n {@code flush} parameter and more output space.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int, int)","flatSignature":"(byte[], int, int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"flush","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAdler","comment":"Returns the ADLER-32 value of the uncompressed data.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTotalIn","comment":"Returns the total number of uncompressed bytes input so far.\n\n \u003cp\u003eSince the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n the preferred means of obtaining this information.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBytesRead","comment":"Returns the total number of uncompressed bytes input so far.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTotalOut","comment":"Returns the total number of compressed bytes output so far.\n\n \u003cp\u003eSince the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n the preferred means of obtaining this information.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBytesWritten","comment":"Returns the total number of compressed bytes output so far.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Resets deflater so that a new set of input data can be processed.\n Keeps current compression level and strategy settings.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"end","comment":"Closes the compressor and discards any unprocessed input.\n This method should be called when the compressor is no longer\n being used, but will also be called automatically by the\n finalize() method. Once this method is called, the behavior\n of the Deflater object is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}