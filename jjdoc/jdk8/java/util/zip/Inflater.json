{"name":"Inflater","comment":"This class provides support for general purpose decompression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the \u003ca href\u003d\"package-summary.html#package_description\"\u003ejava.util.zip\n package description\u003c/a\u003e.\n\n \u003cp\u003eThe following code fragment demonstrates a trivial compression\n and decompression of a string using \u003ctt\u003eDeflater\u003c/tt\u003e and\n \u003ctt\u003eInflater\u003c/tt\u003e.\n\n \u003cblockquote\u003e\u003cpre\u003e\n try {\n     // Encode a String into bytes\n     String inputString \u003d \"blahblahblah€€\";\n     byte[] input \u003d inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output \u003d new byte[100];\n     Deflater compresser \u003d new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength \u003d compresser.deflate(output);\n\n     // Decompress the bytes\n     Inflater decompresser \u003d new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result \u003d new byte[100];\n     int resultLength \u003d decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString \u003d new String(result, 0, resultLength, \"UTF-8\");\n } catch(java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Inflater","qualifiedName":"java.util.zip.Inflater","dimension":"","elementType":{},"package":"java.util.zip","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Inflater","comment":"Creates a new decompressor. If the parameter \u0027nowrap\u0027 is true then\n the ZLIB header and checksum fields will not be used. This provides\n compatibility with the compression format used by both GZIP and PKZIP.\n \u003cp\u003e\n Note: When using the \u0027nowrap\u0027 option it is also necessary to provide\n an extra \"dummy\" byte as input. This is required by the ZLIB native\n library in order to support certain optimizations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","parameters":[{"name":"nowrap","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Inflater","comment":"Creates a new decompressor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"setInput","comment":"Sets input data for decompression. Should be called whenever\n needsInput() returns true indicating that more input data is\n required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setInput","comment":"Sets input data for decompression. Should be called whenever\n needsInput() returns true indicating that more input data is\n required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"setDictionary","comment":"Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setDictionary","comment":"Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getRemaining","comment":"Returns the total number of bytes remaining in the input buffer.\n This can be used to find out what bytes still remain in the input\n buffer after decompression has finished.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"needsInput","comment":"Returns true if no data remains in the input buffer. This can\n be used to determine if #setInput should be called in order\n to provide more input.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"needsDictionary","comment":"Returns true if a preset dictionary is needed for decompression.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"finished","comment":"Returns true if the end of the compressed data stream has been\n reached.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"inflate","comment":"Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"off","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"inflate","comment":"Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getAdler","comment":"Returns the ADLER-32 value of the uncompressed data.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTotalIn","comment":"Returns the total number of compressed bytes input so far.\n\n \u003cp\u003eSince the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n the preferred means of obtaining this information.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBytesRead","comment":"Returns the total number of compressed bytes input so far.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTotalOut","comment":"Returns the total number of uncompressed bytes output so far.\n\n \u003cp\u003eSince the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n the preferred means of obtaining this information.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBytesWritten","comment":"Returns the total number of uncompressed bytes output so far.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Resets inflater so that a new set of input data can be processed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"end","comment":"Closes the decompressor and discards any unprocessed input.\n This method should be called when the decompressor is no longer\n being used, but will also be called automatically by the finalize()\n method. Once this method is called, the behavior of the Inflater\n object is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}