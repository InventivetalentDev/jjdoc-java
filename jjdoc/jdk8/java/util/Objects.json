{"name":"Objects","comment":"This class consists of {@code static} utility methods for operating\n on objects.  These utilities include {@code null}-safe or {@code\n null}-tolerant methods for computing the hash code of an object,\n returning a string for an object, and comparing two objects.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Objects","qualifiedName":"java.util.Objects","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"equals","comment":"Returns {@code true} if the arguments are equal to each other\n and {@code false} otherwise.\n Consequently, if both arguments are {@code null}, {@code true}\n is returned and if exactly one argument is {@code null}, {@code\n false} is returned.  Otherwise, equality is determined by using\n the {@link Object#equals equals} method of the first\n argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object)","flatSignature":"(Object, Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"deepEquals","comment":"Returns {@code true} if the arguments are deeply equal to each other\n and {@code false} otherwise.\n\n Two {@code null} values are deeply equal.  If both arguments are\n arrays, the algorithm in {@link Arrays#deepEquals(Object[],\n Object[]) Arrays.deepEquals} is used to determine equality.\n Otherwise, equality is determined by using the {@link\n Object#equals equals} method of the first argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object)","flatSignature":"(Object, Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code of a non-{@code null} argument and 0 for\n a {@code null} argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hash","comment":"Generates a hash code for a sequence of input values. The hash\n code is generated as if all the input values were placed into an\n array, and that array were hashed by calling {@link\n Arrays#hashCode(Object[])}.\n\n \u003cp\u003eThis method is useful for implementing {@link\n Object#hashCode()} on objects containing multiple fields. For\n example, if an object that has three fields, {@code x}, {@code\n y}, and {@code z}, one could write:\n\n \u003cblockquote\u003e\u003cpre\u003e\n \u0026#064;Override public int hashCode() {\n     return Objects.hash(x, y, z);\n }\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cb\u003eWarning: When a single object reference is supplied, the returned\n value does not equal the hash code of that object reference.\u003c/b\u003e This\n value can be computed by calling {@link #hashCode(Object)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object...)","flatSignature":"(Object...)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"values","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"toString","comment":"Returns the result of calling {@code toString} for a non-{@code\n null} argument and {@code \"null\"} for a {@code null} argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns the result of calling {@code toString} on the first\n argument if the first argument is not {@code null} and returns\n the second argument otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.String)","flatSignature":"(Object, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"nullDefault","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compare","comment":"Returns 0 if the arguments are identical and {@code\n c.compare(a, b)} otherwise.\n Consequently, if both arguments are {@code null} 0\n is returned.\n\n \u003cp\u003eNote that if one of the arguments is {@code null}, a {@code\n NullPointerException} may or may not be thrown depending on\n what ordering policy, if any, the {@link Comparator Comparator}\n chooses to have for {@code null} values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, T, java.util.Comparator\u003c? super T\u003e)","flatSignature":"(T, T, Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"b","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"c","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"requireNonNull","comment":"Checks that the specified object reference is not {@code null}. This\n method is designed primarily for doing parameter validation in methods\n and constructors, as demonstrated below:\n \u003cblockquote\u003e\u003cpre\u003e\n public Foo(Bar bar) {\n     this.bar \u003d Objects.requireNonNull(bar);\n }\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"requireNonNull","comment":"Checks that the specified object reference is not {@code null} and\n throws a customized {@link NullPointerException} if it is. This method\n is designed primarily for doing parameter validation in methods and\n constructors with multiple parameters, as demonstrated below:\n \u003cblockquote\u003e\u003cpre\u003e\n public Foo(Bar bar, Baz baz) {\n     this.bar \u003d Objects.requireNonNull(bar, \"bar must not be null\");\n     this.baz \u003d Objects.requireNonNull(baz, \"baz must not be null\");\n }\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.lang.String)","flatSignature":"(T, String)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"message","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"isNull","comment":"Returns {@code true} if the provided reference is {@code null} otherwise\n returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nonNull","comment":"Returns {@code true} if the provided reference is non-{@code null}\n otherwise returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"requireNonNull","comment":"Checks that the specified object reference is not {@code null} and\n throws a customized {@link NullPointerException} if it is.\n\n \u003cp\u003eUnlike the method {@link #requireNonNull(Object, String)},\n this method allows creation of the message to be deferred until\n after the null check is made. While this may confer a\n performance advantage in the non-null case, when deciding to\n call this method care should be taken that the costs of\n creating the message supplier are less than the cost of just\n creating the string message directly.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.function.Supplier\u003cjava.lang.String\u003e)","flatSignature":"(T, Supplier\u003cString\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"messageSupplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[],"enumConstants":[]}