{"name":"DoubleSummaryStatistics","comment":"A state object for collecting statistics such as count, min, max, sum, and\n average.\n\n \u003cp\u003eThis class is designed to work with (though does not require)\n {@linkplain java.util.stream streams}. For example, you can compute\n summary statistics on a stream of doubles with:\n \u003cpre\u003e {@code\n DoubleSummaryStatistics stats \u003d doubleStream.collect(DoubleSummaryStatistics::new,\n                                                      DoubleSummaryStatistics::accept,\n                                                      DoubleSummaryStatistics::combine);\n }\u003c/pre\u003e\n\n \u003cp\u003e{@code DoubleSummaryStatistics} can be used as a\n {@linkplain java.util.stream.Stream#collect(Collector) reduction}\n target for a {@linkplain java.util.stream.Stream stream}. For example:\n\n \u003cpre\u003e {@code\n DoubleSummaryStatistics stats \u003d people.stream()\n     .collect(Collectors.summarizingDouble(Person::getWeight));\n}\u003c/pre\u003e\n\n This computes, in a single pass, the count of people, as well as the minimum,\n maximum, sum, and average of their weights.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DoubleSummaryStatistics","qualifiedName":"java.util.DoubleSummaryStatistics","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.util.function.DoubleConsumer"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DoubleSummaryStatistics","comment":"Construct an empty instance with zero count, zero sum,\n {@code Double.POSITIVE_INFINITY} min, {@code Double.NEGATIVE_INFINITY}\n max and zero average.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"accept","comment":"Records another value into the summary information.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"combine","comment":"Combines the state of another {@code DoubleSummaryStatistics} into this\n one.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.DoubleSummaryStatistics)","flatSignature":"(DoubleSummaryStatistics)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"DoubleSummaryStatistics","qualifiedName":"java.util.DoubleSummaryStatistics","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCount","comment":"Return the count of values recorded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSum","comment":"Returns the sum of values recorded, or zero if no values have been\n recorded.\n\n If any recorded value is a NaN or the sum is at any point a NaN\n then the sum will be NaN.\n\n \u003cp\u003e The value of a floating-point sum is a function both of the\n input values as well as the order of addition operations. The\n order of addition operations of this method is intentionally\n not defined to allow for implementation flexibility to improve\n the speed and accuracy of the computed result.\n\n In particular, this method may be implemented using compensated\n summation or other technique to reduce the error bound in the\n numerical sum compared to a simple summation of {@code double}\n values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMin","comment":"Returns the minimum recorded value, {@code Double.NaN} if any recorded\n value was NaN or {@code Double.POSITIVE_INFINITY} if no values were\n recorded. Unlike the numerical comparison operators, this method\n considers negative zero to be strictly smaller than positive zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMax","comment":"Returns the maximum recorded value, {@code Double.NaN} if any recorded\n value was NaN or {@code Double.NEGATIVE_INFINITY} if no values were\n recorded. Unlike the numerical comparison operators, this method\n considers negative zero to be strictly smaller than positive zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAverage","comment":"Returns the arithmetic mean of values recorded, or zero if no\n values have been recorded.\n\n If any recorded value is a NaN or the sum is at any point a NaN\n then the average will be code NaN.\n\n \u003cp\u003eThe average returned can vary depending upon the order in\n which values are recorded.\n\n This method may be implemented using compensated summation or\n other technique to reduce the error bound in the {@link #getSum\n numerical sum} used to compute the average.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"{@inheritDoc}\n\n Returns a non-empty string representation of this object suitable for\n debugging. The exact presentation format is unspecified and may vary\n between implementations and versions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}