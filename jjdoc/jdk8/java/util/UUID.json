{"name":"UUID","comment":"A class that represents an immutable universally unique identifier (UUID).\n A UUID represents a 128-bit value.\n\n \u003cp\u003e There exist different variants of these global identifiers.  The methods\n of this class are for manipulating the Leach-Salz variant, although the\n constructors allow the creation of any variant of UUID (described below).\n\n \u003cp\u003e The layout of a variant 2 (Leach-Salz) UUID is as follows:\n\n The most significant long consists of the following unsigned fields:\n \u003cpre\u003e\n 0xFFFFFFFF00000000 time_low\n 0x00000000FFFF0000 time_mid\n 0x000000000000F000 version\n 0x0000000000000FFF time_hi\n \u003c/pre\u003e\n The least significant long consists of the following unsigned fields:\n \u003cpre\u003e\n 0xC000000000000000 variant\n 0x3FFF000000000000 clock_seq\n 0x0000FFFFFFFFFFFF node\n \u003c/pre\u003e\n\n \u003cp\u003e The variant field contains a value which identifies the layout of the\n {@code UUID}.  The bit layout described above is valid only for a {@code\n UUID} with a variant value of 2, which indicates the Leach-Salz variant.\n\n \u003cp\u003e The version field holds a value that describes the type of this {@code\n UUID}.  There are four different basic types of UUIDs: time-based, DCE\n security, name-based, and randomly generated UUIDs.  These types have a\n version value of 1, 2, 3 and 4, respectively.\n\n \u003cp\u003e For more information including algorithms used to create {@code UUID}s,\n see \u003ca href\u003d\"http://www.ietf.org/rfc/rfc4122.txt\"\u003e \u003ci\u003eRFC\u0026nbsp;4122: A\n Universally Unique IDentifier (UUID) URN Namespace\u003c/i\u003e\u003c/a\u003e, section 4.2\n \u0026quot;Algorithms for Creating a Time-Based UUID\u0026quot;.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"UUID","qualifiedName":"java.util.UUID","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"UUID","comment":"Constructs a new {@code UUID} using the specified data.  {@code\n mostSigBits} is used for the most significant 64 bits of the {@code\n UUID} and {@code leastSigBits} becomes the least significant 64 bits of\n the {@code UUID}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","parameters":[{"name":"mostSigBits","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"leastSigBits","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"randomUUID","comment":"Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n\n The {@code UUID} is generated using a cryptographically strong pseudo\n random number generator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"UUID","qualifiedName":"java.util.UUID","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"nameUUIDFromBytes","comment":"Static factory to retrieve a type 3 (name based) {@code UUID} based on\n the specified byte array.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"UUID","qualifiedName":"java.util.UUID","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"fromString","comment":"Creates a {@code UUID} from the string standard representation as\n described in the {@link #toString} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"UUID","qualifiedName":"java.util.UUID","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLeastSignificantBits","comment":"Returns the least significant 64 bits of this UUID\u0027s 128 bit value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMostSignificantBits","comment":"Returns the most significant 64 bits of this UUID\u0027s 128 bit value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"version","comment":"The version number associated with this {@code UUID}.  The version\n number describes how this {@code UUID} was generated.\n\n The version number has the following meaning:\n \u003cul\u003e\n \u003cli\u003e1    Time-based UUID\n \u003cli\u003e2    DCE security UUID\n \u003cli\u003e3    Name-based UUID\n \u003cli\u003e4    Randomly generated UUID\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"variant","comment":"The variant number associated with this {@code UUID}.  The variant\n number describes the layout of the {@code UUID}.\n\n The variant number has the following meaning:\n \u003cul\u003e\n \u003cli\u003e0    Reserved for NCS backward compatibility\n \u003cli\u003e2    \u003ca href\u003d\"http://www.ietf.org/rfc/rfc4122.txt\"\u003eIETF\u0026nbsp;RFC\u0026nbsp;4122\u003c/a\u003e\n (Leach-Salz), used by this class\n \u003cli\u003e6    Reserved, Microsoft Corporation backward compatibility\n \u003cli\u003e7    Reserved for future definition\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"timestamp","comment":"The timestamp value associated with this UUID.\n\n \u003cp\u003e The 60 bit timestamp value is constructed from the time_low,\n time_mid, and time_hi fields of this {@code UUID}.  The resulting\n timestamp is measured in 100-nanosecond units since midnight,\n October 15, 1582 UTC.\n\n \u003cp\u003e The timestamp value is only meaningful in a time-based UUID, which\n has version type 1.  If this {@code UUID} is not a time-based UUID then\n this method throws UnsupportedOperationException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clockSequence","comment":"The clock sequence value associated with this UUID.\n\n \u003cp\u003e The 14 bit clock sequence value is constructed from the clock\n sequence field of this UUID.  The clock sequence field is used to\n guarantee temporal uniqueness in a time-based UUID.\n\n \u003cp\u003e The {@code clockSequence} value is only meaningful in a time-based\n UUID, which has version type 1.  If this UUID is not a time-based UUID\n then this method throws UnsupportedOperationException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"node","comment":"The node value associated with this UUID.\n\n \u003cp\u003e The 48 bit node value is constructed from the node field of this\n UUID.  This field is intended to hold the IEEE 802 address of the machine\n that generated this UUID to guarantee spatial uniqueness.\n\n \u003cp\u003e The node value is only meaningful in a time-based UUID, which has\n version type 1.  If this UUID is not a time-based UUID then this method\n throws UnsupportedOperationException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing this {@code UUID}.\n\n \u003cp\u003e The UUID string representation is as described by this BNF:\n \u003cblockquote\u003e\u003cpre\u003e\n {@code\n UUID                   \u003d \u003ctime_low\u003e \"-\" \u003ctime_mid\u003e \"-\"\n                          \u003ctime_high_and_version\u003e \"-\"\n                          \u003cvariant_and_sequence\u003e \"-\"\n                          \u003cnode\u003e\n time_low               \u003d 4*\u003chexOctet\u003e\n time_mid               \u003d 2*\u003chexOctet\u003e\n time_high_and_version  \u003d 2*\u003chexOctet\u003e\n variant_and_sequence   \u003d 2*\u003chexOctet\u003e\n node                   \u003d 6*\u003chexOctet\u003e\n hexOctet               \u003d \u003chexDigit\u003e\u003chexDigit\u003e\n hexDigit               \u003d\n       \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n       | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n       | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this {@code UUID}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object to the specified object.  The result is {@code\n true} if and only if the argument is not {@code null}, is a {@code UUID}\n object, has the same variant, and contains the same value, bit for bit,\n as this {@code UUID}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this UUID with the specified UUID.\n\n \u003cp\u003e The first of two UUIDs is greater than the second if the most\n significant field in which the UUIDs differ is greater for the first\n UUID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.UUID)","flatSignature":"(UUID)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"UUID","qualifiedName":"java.util.UUID","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}