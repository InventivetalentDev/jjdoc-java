{"name":"AbstractQueue","comment":"This class provides skeletal implementations of some {@link Queue}\n operations. The implementations in this class are appropriate when\n the base implementation does \u003cem\u003enot\u003c/em\u003e allow \u003ctt\u003enull\u003c/tt\u003e\n elements.  Methods {@link #add add}, {@link #remove remove}, and\n {@link #element element} are based on {@link #offer offer}, {@link\n #poll poll}, and {@link #peek peek}, respectively, but throw\n exceptions instead of indicating failure via \u003ctt\u003efalse\u003c/tt\u003e or\n \u003ctt\u003enull\u003c/tt\u003e returns.\n\n \u003cp\u003eA \u003ctt\u003eQueue\u003c/tt\u003e implementation that extends this class must\n minimally define a method {@link Queue#offer} which does not permit\n insertion of \u003ctt\u003enull\u003c/tt\u003e elements, along with methods {@link\n Queue#peek}, {@link Queue#poll}, {@link Collection#size}, and\n {@link Collection#iterator}.  Typically, additional methods will be\n overridden as well.  If these requirements cannot be met, consider\n instead subclassing {@link AbstractCollection}.\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractQueue","qualifiedName":"java.util.AbstractQueue","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractCollection","interfaces":["java.util.Queue"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"add","comment":"Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n \u003ctt\u003etrue\u003c/tt\u003e upon success and throwing an \u003ctt\u003eIllegalStateException\u003c/tt\u003e\n if no space is currently available.\n\n \u003cp\u003eThis implementation returns \u003ctt\u003etrue\u003c/tt\u003e if \u003ctt\u003eoffer\u003c/tt\u003e succeeds,\n else throws an \u003ctt\u003eIllegalStateException\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Retrieves and removes the head of this queue.  This method differs\n from {@link #poll poll} only in that it throws an exception if this\n queue is empty.\n\n \u003cp\u003eThis implementation returns the result of \u003ctt\u003epoll\u003c/tt\u003e\n unless the queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"element","comment":"Retrieves, but does not remove, the head of this queue.  This method\n differs from {@link #peek peek} only in that it throws an exception if\n this queue is empty.\n\n \u003cp\u003eThis implementation returns the result of \u003ctt\u003epeek\u003c/tt\u003e\n unless the queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clear","comment":"Removes all of the elements from this queue.\n The queue will be empty after this call returns.\n\n \u003cp\u003eThis implementation repeatedly invokes {@link #poll poll} until it\n returns \u003ctt\u003enull\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addAll","comment":"Adds all of the elements in the specified collection to this\n queue.  Attempts to addAll of a queue to itself result in\n \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n\n \u003cp\u003eThis implementation iterates over the specified collection,\n and adds each element returned by the iterator to this\n queue, in turn.  A runtime exception encountered while\n trying to add an element (including, in particular, a\n \u003ctt\u003enull\u003c/tt\u003e element) may result in only some of the elements\n having been successfully added when the associated exception is\n thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subClasses":["java.util.PriorityQueue","java.util.concurrent.SynchronousQueue","java.util.concurrent.PriorityBlockingQueue","java.util.concurrent.LinkedTransferQueue","java.util.concurrent.LinkedBlockingQueue","java.util.concurrent.LinkedBlockingDeque","java.util.concurrent.DelayQueue","java.util.concurrent.ConcurrentLinkedQueue","java.util.concurrent.ArrayBlockingQueue"],"enumConstants":[]}