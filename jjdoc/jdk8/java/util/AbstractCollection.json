{"name":"AbstractCollection","comment":"This class provides a skeletal implementation of the \u003ctt\u003eCollection\u003c/tt\u003e\n interface, to minimize the effort required to implement this interface. \u003cp\u003e\n\n To implement an unmodifiable collection, the programmer needs only to\n extend this class and provide implementations for the \u003ctt\u003eiterator\u003c/tt\u003e and\n \u003ctt\u003esize\u003c/tt\u003e methods.  (The iterator returned by the \u003ctt\u003eiterator\u003c/tt\u003e\n method must implement \u003ctt\u003ehasNext\u003c/tt\u003e and \u003ctt\u003enext\u003c/tt\u003e.)\u003cp\u003e\n\n To implement a modifiable collection, the programmer must additionally\n override this class\u0027s \u003ctt\u003eadd\u003c/tt\u003e method (which otherwise throws an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e), and the iterator returned by the\n \u003ctt\u003eiterator\u003c/tt\u003e method must additionally implement its \u003ctt\u003eremove\u003c/tt\u003e\n method.\u003cp\u003e\n\n The programmer should generally provide a void (no argument) and\n \u003ctt\u003eCollection\u003c/tt\u003e constructor, as per the recommendation in the\n \u003ctt\u003eCollection\u003c/tt\u003e interface specification.\u003cp\u003e\n\n The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if\n the collection being implemented admits a more efficient implementation.\u003cp\u003e\n\n This class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractCollection","qualifiedName":"java.util.AbstractCollection","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.util.Collection"],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"iterator","comment":"Returns an iterator over the elements contained in this collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation returns \u003ctt\u003esize() \u003d\u003d 0\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over the elements in the collection,\n checking each element in turn for equality with the specified element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toArray","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation returns an array containing all the elements\n returned by this collection\u0027s iterator, in the same order, stored in\n consecutive elements of the array, starting with index {@code 0}.\n The length of the returned array is equal to the number of elements\n returned by the iterator, even if the size of this collection changes\n during iteration, as might happen if the collection permits\n concurrent modification during iteration.  The {@code size} method is\n called only as an optimization hint; the correct result is returned\n even if the iterator returns a different number of elements.\n\n \u003cp\u003eThis method is equivalent to:\n\n  \u003cpre\u003e {@code\n List\u003cE\u003e list \u003d new ArrayList\u003cE\u003e(size());\n for (E e : this)\n     list.add(e);\n return list.toArray();\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation returns an array containing all the elements\n returned by this collection\u0027s iterator in the same order, stored in\n consecutive elements of the array, starting with index {@code 0}.\n If the number of elements returned by the iterator is too large to\n fit into the specified array, then the elements are returned in a\n newly allocated array with length equal to the number of elements\n returned by the iterator, even if the size of this collection\n changes during iteration, as might happen if the collection permits\n concurrent modification during iteration.  The {@code size} method is\n called only as an optimization hint; the correct result is returned\n even if the iterator returns a different number of elements.\n\n \u003cp\u003eThis method is equivalent to:\n\n  \u003cpre\u003e {@code\n List\u003cE\u003e list \u003d new ArrayList\u003cE\u003e(size());\n for (E e : this)\n     list.add(e);\n return list.toArray(a);\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"add","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation always throws an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over the collection looking for the\n specified element.  If it finds the element, it removes the element\n from the collection using the iterator\u0027s remove method.\n\n \u003cp\u003eNote that this implementation throws an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the iterator returned by this\n collection\u0027s iterator method does not implement the \u003ctt\u003eremove\u003c/tt\u003e\n method and this collection contains the specified object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsAll","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over the specified collection,\n checking each element returned by the iterator in turn to see\n if it\u0027s contained in this collection.  If all elements are so\n contained \u003ctt\u003etrue\u003c/tt\u003e is returned, otherwise \u003ctt\u003efalse\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over the specified collection, and adds\n each object returned by the iterator to this collection, in turn.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e unless \u003ctt\u003eadd\u003c/tt\u003e is\n overridden (assuming the specified collection is non-empty).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeAll","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over this collection, checking each\n element returned by the iterator in turn to see if it\u0027s contained\n in the specified collection.  If it\u0027s so contained, it\u0027s removed from\n this collection with the iterator\u0027s \u003ctt\u003eremove\u003c/tt\u003e method.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the iterator returned by the\n \u003ctt\u003eiterator\u003c/tt\u003e method does not implement the \u003ctt\u003eremove\u003c/tt\u003e method\n and this collection contains one or more elements in common with the\n specified collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"retainAll","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over this collection, checking each\n element returned by the iterator in turn to see if it\u0027s contained\n in the specified collection.  If it\u0027s not so contained, it\u0027s removed\n from this collection with the iterator\u0027s \u003ctt\u003eremove\u003c/tt\u003e method.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the iterator returned by the\n \u003ctt\u003eiterator\u003c/tt\u003e method does not implement the \u003ctt\u003eremove\u003c/tt\u003e method\n and this collection contains one or more elements not present in the\n specified collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"{@inheritDoc}\n\n \u003cp\u003eThis implementation iterates over this collection, removing each\n element using the \u003ctt\u003eIterator.remove\u003c/tt\u003e operation.  Most\n implementations will probably choose to override this method for\n efficiency.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the iterator returned by this\n collection\u0027s \u003ctt\u003eiterator\u003c/tt\u003e method does not implement the\n \u003ctt\u003eremove\u003c/tt\u003e method and this collection is non-empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this collection.  The string\n representation consists of a list of the collection\u0027s elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\u003ctt\u003e\"[]\"\u003c/tt\u003e).  Adjacent elements are separated by the characters\n \u003ctt\u003e\", \"\u003c/tt\u003e (comma and space).  Elements are converted to strings as\n by {@link String#valueOf(Object)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subClasses":["java.util.AbstractList","java.util.AbstractSet","java.util.AbstractQueue","java.util.ArrayDeque","java.util.concurrent.ConcurrentLinkedDeque"],"enumConstants":[]}