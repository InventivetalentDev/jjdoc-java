{"name":"LongStream","comment":"A sequence of primitive long-valued elements supporting sequential and parallel\n aggregate operations.  This is the {@code long} primitive specialization of\n {@link Stream}.\n\n \u003cp\u003eThe following example illustrates an aggregate operation using\n {@link Stream} and {@link LongStream}, computing the sum of the weights of the\n red widgets:\n\n \u003cpre\u003e{@code\n     long sum \u003d widgets.stream()\n                       .filter(w -\u003e w.getColor() \u003d\u003d RED)\n                       .mapToLong(w -\u003e w.getWeight())\n                       .sum();\n }\u003c/pre\u003e\n\n See the class documentation for {@link Stream} and the package documentation\n for \u003ca href\u003d\"package-summary.html\"\u003ejava.util.stream\u003c/a\u003e for additional\n specification of streams, stream operations, stream pipelines, and\n parallelism.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{},"package":"java.util.stream","interfaces":["java.util.stream.BaseStream"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":["java.util.stream.LongStream.Builder"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"filter","comment":"Returns a stream consisting of the elements of this stream that match\n the given predicate.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongPredicate)","flatSignature":"(LongPredicate)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"LongPredicate","qualifiedName":"java.util.function.LongPredicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"map","comment":"Returns a stream consisting of the results of applying the given\n function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongUnaryOperator)","flatSignature":"(LongUnaryOperator)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"LongUnaryOperator","qualifiedName":"java.util.function.LongUnaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapToObj","comment":"Returns an object-valued {@code Stream} consisting of the results of\n applying the given function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003e\n     intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongFunction\u003c? extends U\u003e)","flatSignature":"(LongFunction\u003c? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"LongFunction","qualifiedName":"java.util.function.LongFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"mapToInt","comment":"Returns an {@code IntStream} consisting of the results of applying the\n given function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongToIntFunction)","flatSignature":"(LongToIntFunction)","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"LongToIntFunction","qualifiedName":"java.util.function.LongToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapToDouble","comment":"Returns a {@code DoubleStream} consisting of the results of applying the\n given function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongToDoubleFunction)","flatSignature":"(LongToDoubleFunction)","returnType":{"isPrimitive":false,"simpleName":"DoubleStream","qualifiedName":"java.util.stream.DoubleStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"LongToDoubleFunction","qualifiedName":"java.util.function.LongToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flatMap","comment":"Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.  Each mapped stream is\n {@link java.util.stream.BaseStream#close() closed} after its contents\n have been placed into this stream.  (If a mapped stream is {@code null}\n an empty stream is used, instead.)\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongFunction\u003c? extends java.util.stream.LongStream\u003e)","flatSignature":"(LongFunction\u003c? extends LongStream\u003e)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"LongFunction","qualifiedName":"java.util.function.LongFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"distinct","comment":"Returns a stream consisting of the distinct elements of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sorted","comment":"Returns a stream consisting of the elements of this stream in sorted\n order.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peek","comment":"Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.\n\n \u003cp\u003eFor parallel stream pipelines, the action may be called at\n whatever time and in whatever thread the element is made available by the\n upstream operation.  If the action modifies shared state,\n it is responsible for providing the required synchronization.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongConsumer)","flatSignature":"(LongConsumer)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"LongConsumer","qualifiedName":"java.util.function.LongConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"limit","comment":"Returns a stream consisting of the elements of this stream, truncated\n to be no longer than {@code maxSize} in length.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n stateful intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"maxSize","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skip","comment":"Returns a stream consisting of the remaining elements of this stream\n after discarding the first {@code n} elements of the stream.\n If this stream contains fewer than {@code n} elements then an\n empty stream will be returned.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEach","comment":"Performs an action for each element of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.\n\n \u003cp\u003eFor parallel stream pipelines, this operation does \u003cem\u003enot\u003c/em\u003e\n guarantee to respect the encounter order of the stream, as doing so\n would sacrifice the benefit of parallelism.  For any given element, the\n action may be performed at whatever time and in whatever thread the\n library chooses.  If the action accesses shared state, it is\n responsible for providing the required synchronization.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongConsumer)","flatSignature":"(LongConsumer)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"LongConsumer","qualifiedName":"java.util.function.LongConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachOrdered","comment":"Performs an action for each element of this stream, guaranteeing that\n each element is processed in encounter order for streams that have a\n defined encounter order.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongConsumer)","flatSignature":"(LongConsumer)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"LongConsumer","qualifiedName":"java.util.function.LongConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing the elements of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reduce","comment":"Performs a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e on the\n elements of this stream, using the provided identity value and an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e\n accumulation function, and returns the reduced value.  This is equivalent\n to:\n \u003cpre\u003e{@code\n     long result \u003d identity;\n     for (long element : this stream)\n         result \u003d accumulator.applyAsLong(result, element)\n     return result;\n }\u003c/pre\u003e\n\n but is not constrained to execute sequentially.\n\n \u003cp\u003eThe {@code identity} value must be an identity for the accumulator\n function. This means that for all {@code x},\n {@code accumulator.apply(identity, x)} is equal to {@code x}.\n The {@code accumulator} function must be an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e function.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.LongBinaryOperator)","flatSignature":"(long, LongBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"identity","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"op","type":{"isPrimitive":false,"simpleName":"LongBinaryOperator","qualifiedName":"java.util.function.LongBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduce","comment":"Performs a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e on the\n elements of this stream, using an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e accumulation\n function, and returns an {@code OptionalLong} describing the reduced value,\n if any. This is equivalent to:\n \u003cpre\u003e{@code\n     boolean foundAny \u003d false;\n     long result \u003d null;\n     for (long element : this stream) {\n         if (!foundAny) {\n             foundAny \u003d true;\n             result \u003d element;\n         }\n         else\n             result \u003d accumulator.applyAsLong(result, element);\n     }\n     return foundAny ? OptionalLong.of(result) : OptionalLong.empty();\n }\u003c/pre\u003e\n\n but is not constrained to execute sequentially.\n\n \u003cp\u003eThe {@code accumulator} function must be an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e function.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongBinaryOperator)","flatSignature":"(LongBinaryOperator)","returnType":{"isPrimitive":false,"simpleName":"OptionalLong","qualifiedName":"java.util.OptionalLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"op","type":{"isPrimitive":false,"simpleName":"LongBinaryOperator","qualifiedName":"java.util.function.LongBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"collect","comment":"Performs a \u003ca href\u003d\"package-summary.html#MutableReduction\"\u003emutable\n reduction\u003c/a\u003e operation on the elements of this stream.  A mutable\n reduction is one in which the reduced value is a mutable result container,\n such as an {@code ArrayList}, and elements are incorporated by updating\n the state of the result rather than by replacing the result.  This\n produces a result equivalent to:\n \u003cpre\u003e{@code\n     R result \u003d supplier.get();\n     for (long element : this stream)\n         accumulator.accept(result, element);\n     return result;\n }\u003c/pre\u003e\n\n \u003cp\u003eLike {@link #reduce(long, LongBinaryOperator)}, {@code collect} operations\n can be parallelized without requiring additional synchronization.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003cR\u003e, java.util.function.ObjLongConsumer\u003cR\u003e, java.util.function.BiConsumer\u003cR, R\u003e)","flatSignature":"(Supplier\u003cR\u003e, ObjLongConsumer\u003cR\u003e, BiConsumer\u003cR, R\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"ObjLongConsumer","qualifiedName":"java.util.function.ObjLongConsumer","dimension":"","elementType":{}}},{"name":"combiner","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"sum","comment":"Returns the sum of elements in this stream.  This is a special case\n of a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e\n and is equivalent to:\n \u003cpre\u003e{@code\n     return reduce(0, Long::sum);\n }\u003c/pre\u003e\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"min","comment":"Returns an {@code OptionalLong} describing the minimum element of this\n stream, or an empty optional if this stream is empty.  This is a special\n case of a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e\n and is equivalent to:\n \u003cpre\u003e{@code\n     return reduce(Long::min);\n }\u003c/pre\u003e\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OptionalLong","qualifiedName":"java.util.OptionalLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"max","comment":"Returns an {@code OptionalLong} describing the maximum element of this\n stream, or an empty optional if this stream is empty.  This is a special\n case of a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e\n and is equivalent to:\n \u003cpre\u003e{@code\n     return reduce(Long::max);\n }\u003c/pre\u003e\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OptionalLong","qualifiedName":"java.util.OptionalLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"count","comment":"Returns the count of elements in this stream.  This is a special case of\n a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e and is\n equivalent to:\n \u003cpre\u003e{@code\n     return map(e -\u003e 1L).sum();\n }\u003c/pre\u003e\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"average","comment":"Returns an {@code OptionalDouble} describing the arithmetic mean of elements of\n this stream, or an empty optional if this stream is empty.  This is a\n special case of a\n \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OptionalDouble","qualifiedName":"java.util.OptionalDouble","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"summaryStatistics","comment":"Returns a {@code LongSummaryStatistics} describing various summary data\n about the elements of this stream.  This is a special case of a\n \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongSummaryStatistics","qualifiedName":"java.util.LongSummaryStatistics","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"anyMatch","comment":"Returns whether any elements of this stream match the provided\n predicate.  May not evaluate the predicate on all elements if not\n necessary for determining the result.  If the stream is empty then\n {@code false} is returned and the predicate is not evaluated.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongPredicate)","flatSignature":"(LongPredicate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"LongPredicate","qualifiedName":"java.util.function.LongPredicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"allMatch","comment":"Returns whether all elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongPredicate)","flatSignature":"(LongPredicate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"LongPredicate","qualifiedName":"java.util.function.LongPredicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"noneMatch","comment":"Returns whether no elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongPredicate)","flatSignature":"(LongPredicate)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"LongPredicate","qualifiedName":"java.util.function.LongPredicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findFirst","comment":"Returns an {@link OptionalLong} describing the first element of this\n stream, or an empty {@code OptionalLong} if the stream is empty.  If the\n stream has no encounter order, then any element may be returned.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OptionalLong","qualifiedName":"java.util.OptionalLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"findAny","comment":"Returns an {@link OptionalLong} describing some element of the stream, or\n an empty {@code OptionalLong} if the stream is empty.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.\n\n \u003cp\u003eThe behavior of this operation is explicitly nondeterministic; it is\n free to select any element in the stream.  This is to allow for maximal\n performance in parallel operations; the cost is that multiple invocations\n on the same source may not return the same result.  (If a stable result\n is desired, use {@link #findFirst()} instead.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OptionalLong","qualifiedName":"java.util.OptionalLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"asDoubleStream","comment":"Returns a {@code DoubleStream} consisting of the elements of this stream,\n converted to {@code double}.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DoubleStream","qualifiedName":"java.util.stream.DoubleStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"boxed","comment":"Returns a {@code Stream} consisting of the elements of this stream,\n each boxed to a {@code Long}.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sequential","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parallel","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"iterator","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.PrimitiveIterator.OfLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"builder","comment":"Returns a builder for a {@code LongStream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.stream.LongStream.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"empty","comment":"Returns an empty sequential {@code LongStream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"of","comment":"Returns a sequential {@code LongStream} containing a single element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"t","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"of","comment":"Returns a sequential ordered stream whose elements are the specified values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long...)","flatSignature":"(long...)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"values","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"iterate","comment":"Returns an infinite sequential ordered {@code LongStream} produced by iterative\n application of a function {@code f} to an initial element {@code seed},\n producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n {@code f(f(seed))}, etc.\n\n \u003cp\u003eThe first element (position {@code 0}) in the {@code LongStream} will\n be the provided {@code seed}.  For {@code n \u003e 0}, the element at position\n {@code n}, will be the result of applying the function {@code f} to the\n element at position {@code n - 1}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.LongUnaryOperator)","flatSignature":"(long, LongUnaryOperator)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seed","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"f","type":{"isPrimitive":false,"simpleName":"LongUnaryOperator","qualifiedName":"java.util.function.LongUnaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"generate","comment":"Returns an infinite sequential unordered stream where each element is\n generated by the provided {@code LongSupplier}.  This is suitable for\n generating constant streams, streams of random elements, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.LongSupplier)","flatSignature":"(LongSupplier)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"LongSupplier","qualifiedName":"java.util.function.LongSupplier","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"range","comment":"Returns a sequential ordered {@code LongStream} from {@code startInclusive}\n (inclusive) to {@code endExclusive} (exclusive) by an incremental step of\n {@code 1}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"startInclusive","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"endExclusive","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"rangeClosed","comment":"Returns a sequential ordered {@code LongStream} from {@code startInclusive}\n (inclusive) to {@code endInclusive} (inclusive) by an incremental step of\n {@code 1}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"startInclusive","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"endInclusive","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"concat","comment":"Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.  The resulting stream is ordered if both\n of the input streams are ordered, and parallel if either of the input\n streams is parallel.  When the resulting stream is closed, the close\n handlers for both input streams are invoked.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.stream.LongStream, java.util.stream.LongStream)","flatSignature":"(LongStream, LongStream)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}