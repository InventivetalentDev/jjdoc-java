{"name":"Stream","comment":"A sequence of elements supporting sequential and parallel aggregate\n operations.  The following example illustrates an aggregate operation using\n {@link Stream} and {@link IntStream}:\n\n \u003cpre\u003e{@code\n     int sum \u003d widgets.stream()\n                      .filter(w -\u003e w.getColor() \u003d\u003d RED)\n                      .mapToInt(w -\u003e w.getWeight())\n                      .sum();\n }\u003c/pre\u003e\n\n In this example, {@code widgets} is a {@code Collection\u003cWidget\u003e}.  We create\n a stream of {@code Widget} objects via {@link Collection#stream Collection.stream()},\n filter it to produce a stream containing only the red widgets, and then\n transform it into a stream of {@code int} values representing the weight of\n each red widget. Then this stream is summed to produce a total weight.\n\n \u003cp\u003eIn addition to {@code Stream}, which is a stream of object references,\n there are primitive specializations for {@link IntStream}, {@link LongStream},\n and {@link DoubleStream}, all of which are referred to as \"streams\" and\n conform to the characteristics and restrictions described here.\n\n \u003cp\u003eTo perform a computation, stream\n \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eoperations\u003c/a\u003e are composed into a\n \u003cem\u003estream pipeline\u003c/em\u003e.  A stream pipeline consists of a source (which\n might be an array, a collection, a generator function, an I/O channel,\n etc), zero or more \u003cem\u003eintermediate operations\u003c/em\u003e (which transform a\n stream into another stream, such as {@link Stream#filter(Predicate)}), and a\n \u003cem\u003eterminal operation\u003c/em\u003e (which produces a result or side-effect, such\n as {@link Stream#count()} or {@link Stream#forEach(Consumer)}).\n Streams are lazy; computation on the source data is only performed when the\n terminal operation is initiated, and source elements are consumed only\n as needed.\n\n \u003cp\u003eCollections and streams, while bearing some superficial similarities,\n have different goals.  Collections are primarily concerned with the efficient\n management of, and access to, their elements.  By contrast, streams do not\n provide a means to directly access or manipulate their elements, and are\n instead concerned with declaratively describing their source and the\n computational operations which will be performed in aggregate on that source.\n However, if the provided stream operations do not offer the desired\n functionality, the {@link #iterator()} and {@link #spliterator()} operations\n can be used to perform a controlled traversal.\n\n \u003cp\u003eA stream pipeline, like the \"widgets\" example above, can be viewed as\n a \u003cem\u003equery\u003c/em\u003e on the stream source.  Unless the source was explicitly\n designed for concurrent modification (such as a {@link ConcurrentHashMap}),\n unpredictable or erroneous behavior may result from modifying the stream\n source while it is being queried.\n\n \u003cp\u003eMost stream operations accept parameters that describe user-specified\n behavior, such as the lambda expression {@code w -\u003e w.getWeight()} passed to\n {@code mapToInt} in the example above.  To preserve correct behavior,\n these \u003cem\u003ebehavioral parameters\u003c/em\u003e:\n \u003cul\u003e\n \u003cli\u003emust be \u003ca href\u003d\"package-summary.html#NonInterference\"\u003enon-interfering\u003c/a\u003e\n (they do not modify the stream source); and\u003c/li\u003e\n \u003cli\u003ein most cases must be \u003ca href\u003d\"package-summary.html#Statelessness\"\u003estateless\u003c/a\u003e\n (their result should not depend on any state that might change during execution\n of the stream pipeline).\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eSuch parameters are always instances of a\n \u003ca href\u003d\"../function/package-summary.html\"\u003efunctional interface\u003c/a\u003e such\n as {@link java.util.function.Function}, and are often lambda expressions or\n method references.  Unless otherwise specified these parameters must be\n \u003cem\u003enon-null\u003c/em\u003e.\n\n \u003cp\u003eA stream should be operated on (invoking an intermediate or terminal stream\n operation) only once.  This rules out, for example, \"forked\" streams, where\n the same source feeds two or more pipelines, or multiple traversals of the\n same stream.  A stream implementation may throw {@link IllegalStateException}\n if it detects that the stream is being reused. However, since some stream\n operations may return their receiver rather than a new stream object, it may\n not be possible to detect reuse in all cases.\n\n \u003cp\u003eStreams have a {@link #close()} method and implement {@link AutoCloseable},\n but nearly all stream instances do not actually need to be closed after use.\n Generally, only streams whose source is an IO channel (such as those returned\n by {@link Files#lines(Path, Charset)}) will require closing.  Most streams\n are backed by collections, arrays, or generating functions, which require no\n special resource management.  (If a stream does require closing, it can be\n declared as a resource in a {@code try}-with-resources statement.)\n\n \u003cp\u003eStream pipelines may execute either sequentially or in\n \u003ca href\u003d\"package-summary.html#Parallelism\"\u003eparallel\u003c/a\u003e.  This\n execution mode is a property of the stream.  Streams are created\n with an initial choice of sequential or parallel execution.  (For example,\n {@link Collection#stream() Collection.stream()} creates a sequential stream,\n and {@link Collection#parallelStream() Collection.parallelStream()} creates\n a parallel one.)  This choice of execution mode may be modified by the\n {@link #sequential()} or {@link #parallel()} methods, and may be queried with\n the {@link #isParallel()} method.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{},"package":"java.util.stream","interfaces":["java.util.stream.BaseStream"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":["java.util.stream.Stream.Builder"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"filter","comment":"Returns a stream consisting of the elements of this stream that match\n the given predicate.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super T\u003e)","flatSignature":"(Predicate\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"map","comment":"Returns a stream consisting of the results of applying the given\n function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends R\u003e)","flatSignature":"(Function\u003c? super T, ? extends R\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"mapToInt","comment":"Returns an {@code IntStream} consisting of the results of applying the\n given function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003e\n     intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToIntFunction\u003c? super T\u003e)","flatSignature":"(ToIntFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapToLong","comment":"Returns a {@code LongStream} consisting of the results of applying the\n given function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToLongFunction\u003c? super T\u003e)","flatSignature":"(ToLongFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapToDouble","comment":"Returns a {@code DoubleStream} consisting of the results of applying the\n given function to the elements of this stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToDoubleFunction\u003c? super T\u003e)","flatSignature":"(ToDoubleFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"DoubleStream","qualifiedName":"java.util.stream.DoubleStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flatMap","comment":"Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.  Each mapped stream is\n {@link java.util.stream.BaseStream#close() closed} after its contents\n have been placed into this stream.  (If a mapped stream is {@code null}\n an empty stream is used, instead.)\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.stream.Stream\u003c? extends R\u003e\u003e)","flatSignature":"(Function\u003c? super T, ? extends Stream\u003c? extends R\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"flatMapToInt","comment":"Returns an {@code IntStream} consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.  Each mapped\n stream is {@link java.util.stream.BaseStream#close() closed} after its\n contents have been placed into this stream.  (If a mapped stream is\n {@code null} an empty stream is used, instead.)\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.stream.IntStream\u003e)","flatSignature":"(Function\u003c? super T, ? extends IntStream\u003e)","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flatMapToLong","comment":"Returns an {@code LongStream} consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.  Each mapped\n stream is {@link java.util.stream.BaseStream#close() closed} after its\n contents have been placed into this stream.  (If a mapped stream is\n {@code null} an empty stream is used, instead.)\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.stream.LongStream\u003e)","flatSignature":"(Function\u003c? super T, ? extends LongStream\u003e)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flatMapToDouble","comment":"Returns an {@code DoubleStream} consisting of the results of replacing\n each element of this stream with the contents of a mapped stream produced\n by applying the provided mapping function to each element.  Each mapped\n stream is {@link java.util.stream.BaseStream#close() closed} after its\n contents have placed been into this stream.  (If a mapped stream is\n {@code null} an empty stream is used, instead.)\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.stream.DoubleStream\u003e)","flatSignature":"(Function\u003c? super T, ? extends DoubleStream\u003e)","returnType":{"isPrimitive":false,"simpleName":"DoubleStream","qualifiedName":"java.util.stream.DoubleStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"distinct","comment":"Returns a stream consisting of the distinct elements (according to\n {@link Object#equals(Object)}) of this stream.\n\n \u003cp\u003eFor ordered streams, the selection of distinct elements is stable\n (for duplicated elements, the element appearing first in the encounter\n order is preserved.)  For unordered streams, no stability guarantees\n are made.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sorted","comment":"Returns a stream consisting of the elements of this stream, sorted\n according to natural order.  If the elements of this stream are not\n {@code Comparable}, a {@code java.lang.ClassCastException} may be thrown\n when the terminal operation is executed.\n\n \u003cp\u003eFor ordered streams, the sort is stable.  For unordered streams, no\n stability guarantees are made.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sorted","comment":"Returns a stream consisting of the elements of this stream, sorted\n according to the provided {@code Comparator}.\n\n \u003cp\u003eFor ordered streams, the sort is stable.  For unordered streams, no\n stability guarantees are made.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"peek","comment":"Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.\n\n \u003cp\u003eFor parallel stream pipelines, the action may be called at\n whatever time and in whatever thread the element is made available by the\n upstream operation.  If the action modifies shared state,\n it is responsible for providing the required synchronization.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"limit","comment":"Returns a stream consisting of the elements of this stream, truncated\n to be no longer than {@code maxSize} in length.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n stateful intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"maxSize","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"skip","comment":"Returns a stream consisting of the remaining elements of this stream\n after discarding the first {@code n} elements of the stream.\n If this stream contains fewer than {@code n} elements then an\n empty stream will be returned.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003estateful\n intermediate operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEach","comment":"Performs an action for each element of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.\n\n \u003cp\u003eThe behavior of this operation is explicitly nondeterministic.\n For parallel stream pipelines, this operation does \u003cem\u003enot\u003c/em\u003e\n guarantee to respect the encounter order of the stream, as doing so\n would sacrifice the benefit of parallelism.  For any given element, the\n action may be performed at whatever time and in whatever thread the\n library chooses.  If the action accesses shared state, it is\n responsible for providing the required synchronization.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachOrdered","comment":"Performs an action for each element of this stream, in the encounter\n order of the stream if the stream has a defined encounter order.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.\n\n \u003cp\u003eThis operation processes the elements one at a time, in encounter\n order if one exists.  Performing the action for one element\n \u003ca href\u003d\"../concurrent/package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappens-before\u003c/i\u003e\u003c/a\u003e\n performing the action for subsequent elements, but for any given element,\n the action may be performed in whatever thread the library chooses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing the elements of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing the elements of this stream, using the\n provided {@code generator} function to allocate the returned array, as\n well as any additional arrays that might be required for a partitioned\n execution or for resizing.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.IntFunction\u003cA[]\u003e)","flatSignature":"(IntFunction\u003cA[]\u003e)","returnType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":[]}},"typeVariable":{"name":"A","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"generator","type":{"isPrimitive":false,"simpleName":"IntFunction","qualifiedName":"java.util.function.IntFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":[]}]},{"name":"reduce","comment":"Performs a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e on the\n elements of this stream, using the provided identity value and an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e\n accumulation function, and returns the reduced value.  This is equivalent\n to:\n \u003cpre\u003e{@code\n     T result \u003d identity;\n     for (T element : this stream)\n         result \u003d accumulator.apply(result, element)\n     return result;\n }\u003c/pre\u003e\n\n but is not constrained to execute sequentially.\n\n \u003cp\u003eThe {@code identity} value must be an identity for the accumulator\n function. This means that for all {@code t},\n {@code accumulator.apply(identity, t)} is equal to {@code t}.\n The {@code accumulator} function must be an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e function.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.function.BinaryOperator\u003cT\u003e)","flatSignature":"(T, BinaryOperator\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"identity","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduce","comment":"Performs a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e on the\n elements of this stream, using an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e accumulation\n function, and returns an {@code Optional} describing the reduced value,\n if any. This is equivalent to:\n \u003cpre\u003e{@code\n     boolean foundAny \u003d false;\n     T result \u003d null;\n     for (T element : this stream) {\n         if (!foundAny) {\n             foundAny \u003d true;\n             result \u003d element;\n         }\n         else\n             result \u003d accumulator.apply(result, element);\n     }\n     return foundAny ? Optional.of(result) : Optional.empty();\n }\u003c/pre\u003e\n\n but is not constrained to execute sequentially.\n\n \u003cp\u003eThe {@code accumulator} function must be an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociative\u003c/a\u003e function.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BinaryOperator\u003cT\u003e)","flatSignature":"(BinaryOperator\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Optional","qualifiedName":"java.util.Optional","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduce","comment":"Performs a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e on the\n elements of this stream, using the provided identity, accumulation and\n combining functions.  This is equivalent to:\n \u003cpre\u003e{@code\n     U result \u003d identity;\n     for (T element : this stream)\n         result \u003d accumulator.apply(result, element)\n     return result;\n }\u003c/pre\u003e\n\n but is not constrained to execute sequentially.\n\n \u003cp\u003eThe {@code identity} value must be an identity for the combiner\n function.  This means that for all {@code u}, {@code combiner(identity, u)}\n is equal to {@code u}.  Additionally, the {@code combiner} function\n must be compatible with the {@code accumulator} function; for all\n {@code u} and {@code t}, the following must hold:\n \u003cpre\u003e{@code\n     combiner.apply(u, accumulator.apply(identity, t)) \u003d\u003d accumulator.apply(u, t)\n }\u003c/pre\u003e\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(U, java.util.function.BiFunction\u003cU, ? super T, U\u003e, java.util.function.BinaryOperator\u003cU\u003e)","flatSignature":"(U, BiFunction\u003cU, ? super T, U\u003e, BinaryOperator\u003cU\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"identity","type":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}}},{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}},{"name":"combiner","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"collect","comment":"Performs a \u003ca href\u003d\"package-summary.html#MutableReduction\"\u003emutable\n reduction\u003c/a\u003e operation on the elements of this stream.  A mutable\n reduction is one in which the reduced value is a mutable result container,\n such as an {@code ArrayList}, and elements are incorporated by updating\n the state of the result rather than by replacing the result.  This\n produces a result equivalent to:\n \u003cpre\u003e{@code\n     R result \u003d supplier.get();\n     for (T element : this stream)\n         accumulator.accept(result, element);\n     return result;\n }\u003c/pre\u003e\n\n \u003cp\u003eLike {@link #reduce(Object, BinaryOperator)}, {@code collect} operations\n can be parallelized without requiring additional synchronization.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003cR\u003e, java.util.function.BiConsumer\u003cR, ? super T\u003e, java.util.function.BiConsumer\u003cR, R\u003e)","flatSignature":"(Supplier\u003cR\u003e, BiConsumer\u003cR, ? super T\u003e, BiConsumer\u003cR, R\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}},{"name":"combiner","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]}]},{"name":"collect","comment":"Performs a \u003ca href\u003d\"package-summary.html#MutableReduction\"\u003emutable\n reduction\u003c/a\u003e operation on the elements of this stream using a\n {@code Collector}.  A {@code Collector}\n encapsulates the functions used as arguments to\n {@link #collect(Supplier, BiConsumer, BiConsumer)}, allowing for reuse of\n collection strategies and composition of collect operations such as\n multiple-level grouping or partitioning.\n\n \u003cp\u003eIf the stream is parallel, and the {@code Collector}\n is {@link Collector.Characteristics#CONCURRENT concurrent}, and\n either the stream is unordered or the collector is\n {@link Collector.Characteristics#UNORDERED unordered},\n then a concurrent reduction will be performed (see {@link Collector} for\n details on concurrent reduction.)\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.\n\n \u003cp\u003eWhen executed in parallel, multiple intermediate results may be\n instantiated, populated, and merged so as to maintain isolation of\n mutable data structures.  Therefore, even when executed in parallel\n with non-thread-safe data structures (such as {@code ArrayList}), no\n additional synchronization is needed for a parallel reduction.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.stream.Collector\u003c? super T, A, R\u003e)","flatSignature":"(Collector\u003c? super T, A, R\u003e)","returnType":{"isPrimitive":false,"simpleName":"R","qualifiedName":"R","dimension":"","elementType":{},"typeVariable":{"name":"R","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"collector","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"R","bounds":[]},{"name":"A","bounds":[]}]},{"name":"min","comment":"Returns the minimum element of this stream according to the provided\n {@code Comparator}.  This is a special case of a\n \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Optional","qualifiedName":"java.util.Optional","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the maximum element of this stream according to the provided\n {@code Comparator}.  This is a special case of a\n \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Optional","qualifiedName":"java.util.Optional","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"count","comment":"Returns the count of elements in this stream.  This is a special case of\n a \u003ca href\u003d\"package-summary.html#Reduction\"\u003ereduction\u003c/a\u003e and is\n equivalent to:\n \u003cpre\u003e{@code\n     return mapToLong(e -\u003e 1L).sum();\n }\u003c/pre\u003e\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"anyMatch","comment":"Returns whether any elements of this stream match the provided\n predicate.  May not evaluate the predicate on all elements if not\n necessary for determining the result.  If the stream is empty then\n {@code false} is returned and the predicate is not evaluated.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super T\u003e)","flatSignature":"(Predicate\u003c? super T\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"allMatch","comment":"Returns whether all elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super T\u003e)","flatSignature":"(Predicate\u003c? super T\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"noneMatch","comment":"Returns whether no elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super T\u003e)","flatSignature":"(Predicate\u003c? super T\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findFirst","comment":"Returns an {@link Optional} describing the first element of this stream,\n or an empty {@code Optional} if the stream is empty.  If the stream has\n no encounter order, then any element may be returned.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Optional","qualifiedName":"java.util.Optional","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"findAny","comment":"Returns an {@link Optional} describing some element of the stream, or an\n empty {@code Optional} if the stream is empty.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eshort-circuiting\n terminal operation\u003c/a\u003e.\n\n \u003cp\u003eThe behavior of this operation is explicitly nondeterministic; it is\n free to select any element in the stream.  This is to allow for maximal\n performance in parallel operations; the cost is that multiple invocations\n on the same source may not return the same result.  (If a stable result\n is desired, use {@link #findFirst()} instead.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Optional","qualifiedName":"java.util.Optional","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"builder","comment":"Returns a builder for a {@code Stream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Builder","qualifiedName":"java.util.stream.Stream.Builder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"empty","comment":"Returns an empty sequential {@code Stream}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"of","comment":"Returns a sequential {@code Stream} containing a single element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"t","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"of","comment":"Returns a sequential ordered stream whose elements are the specified values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T...)","flatSignature":"(T...)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"values","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"iterate","comment":"Returns an infinite sequential ordered {@code Stream} produced by iterative\n application of a function {@code f} to an initial element {@code seed},\n producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n {@code f(f(seed))}, etc.\n\n \u003cp\u003eThe first element (position {@code 0}) in the {@code Stream} will be\n the provided {@code seed}.  For {@code n \u003e 0}, the element at position\n {@code n}, will be the result of applying the function {@code f} to the\n element at position {@code n - 1}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.function.UnaryOperator\u003cT\u003e)","flatSignature":"(T, UnaryOperator\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seed","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"f","type":{"isPrimitive":false,"simpleName":"UnaryOperator","qualifiedName":"java.util.function.UnaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"generate","comment":"Returns an infinite sequential unordered stream where each element is\n generated by the provided {@code Supplier}.  This is suitable for\n generating constant streams, streams of random elements, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003cT\u003e)","flatSignature":"(Supplier\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"concat","comment":"Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.  The resulting stream is ordered if both\n of the input streams are ordered, and parallel if either of the input\n streams is parallel.  When the resulting stream is closed, the close\n handlers for both input streams are invoked.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.stream.Stream\u003c? extends T\u003e, java.util.stream.Stream\u003c? extends T\u003e)","flatSignature":"(Stream\u003c? extends T\u003e, Stream\u003c? extends T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[{"name":"T","bounds":[]}],"enumConstants":[]}