{"name":"Collectors","comment":"Implementations of {@link Collector} that implement various useful reduction\n operations, such as accumulating elements into collections, summarizing\n elements according to various criteria, etc.\n\n \u003cp\u003eThe following are examples of using the predefined collectors to perform\n common mutable reduction tasks:\n\n \u003cpre\u003e{@code\n     // Accumulate names into a List\n     List\u003cString\u003e list \u003d people.stream().map(Person::getName).collect(Collectors.toList());\n\n     // Accumulate names into a TreeSet\n     Set\u003cString\u003e set \u003d people.stream().map(Person::getName).collect(Collectors.toCollection(TreeSet::new));\n\n     // Convert elements to strings and concatenate them, separated by commas\n     String joined \u003d things.stream()\n                           .map(Object::toString)\n                           .collect(Collectors.joining(\", \"));\n\n     // Compute sum of salaries of employee\n     int total \u003d employees.stream()\n                          .collect(Collectors.summingInt(Employee::getSalary)));\n\n     // Group employees by department\n     Map\u003cDepartment, List\u003cEmployee\u003e\u003e byDept\n         \u003d employees.stream()\n                    .collect(Collectors.groupingBy(Employee::getDepartment));\n\n     // Compute sum of salaries by department\n     Map\u003cDepartment, Integer\u003e totalByDept\n         \u003d employees.stream()\n                    .collect(Collectors.groupingBy(Employee::getDepartment,\n                                                   Collectors.summingInt(Employee::getSalary)));\n\n     // Partition students into passing and failing\n     Map\u003cBoolean, List\u003cStudent\u003e\u003e passingFailing \u003d\n         students.stream()\n                 .collect(Collectors.partitioningBy(s -\u003e s.getGrade() \u003e\u003d PASS_THRESHOLD));\n\n }\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Collectors","qualifiedName":"java.util.stream.Collectors","dimension":"","elementType":{},"package":"java.util.stream","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"toCollection","comment":"Returns a {@code Collector} that accumulates the input elements into a\n new {@code Collection}, in encounter order.  The {@code Collection} is\n created by the provided factory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003cC\u003e)","flatSignature":"(Supplier\u003cC\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"collectionFactory","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"C","bounds":["java.util.Collection"]}]},{"name":"toList","comment":"Returns a {@code Collector} that accumulates the input elements into a\n new {@code List}. There are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code List} returned; if more\n control over the returned {@code List} is required, use {@link #toCollection(Supplier)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"toSet","comment":"Returns a {@code Collector} that accumulates the input elements into a\n new {@code Set}. There are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code Set} returned; if more\n control over the returned {@code Set} is required, use\n {@link #toCollection(Supplier)}.\n\n \u003cp\u003eThis is an {@link Collector.Characteristics#UNORDERED unordered}\n Collector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"joining","comment":"Returns a {@code Collector} that concatenates the input elements into a\n {@code String}, in encounter order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"joining","comment":"Returns a {@code Collector} that concatenates the input elements,\n separated by the specified delimiter, in encounter order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"delimiter","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"joining","comment":"Returns a {@code Collector} that concatenates the input elements,\n separated by the specified delimiter, with the specified prefix and\n suffix, in encounter order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)","flatSignature":"(CharSequence, CharSequence, CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"delimiter","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"prefix","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"suffix","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapping","comment":"Adapts a {@code Collector} accepting elements of type {@code U} to one\n accepting elements of type {@code T} by applying a mapping function to\n each input element before accumulation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.stream.Collector\u003c? super U, A, R\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e, Collector\u003c? super U, A, R\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"U","bounds":[]},{"name":"A","bounds":[]},{"name":"R","bounds":[]}]},{"name":"collectingAndThen","comment":"Adapts a {@code Collector} to perform an additional finishing\n transformation.  For example, one could adapt the {@link #toList()}\n collector to always produce an immutable list with:\n \u003cpre\u003e{@code\n     List\u003cString\u003e people\n         \u003d people.stream().collect(collectingAndThen(toList(), Collections::unmodifiableList));\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.stream.Collector\u003cT, A, R\u003e, java.util.function.Function\u003cR, RR\u003e)","flatSignature":"(Collector\u003cT, A, R\u003e, Function\u003cR, RR\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}},{"name":"finisher","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"A","bounds":[]},{"name":"R","bounds":[]},{"name":"RR","bounds":[]}]},{"name":"counting","comment":"Returns a {@code Collector} accepting elements of type {@code T} that\n counts the number of input elements.  If no elements are present, the\n result is 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"minBy","comment":"Returns a {@code Collector} that produces the minimal element according\n to a given {@code Comparator}, described as an {@code Optional\u003cT\u003e}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"maxBy","comment":"Returns a {@code Collector} that produces the maximal element according\n to a given {@code Comparator}, described as an {@code Optional\u003cT\u003e}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"summingInt","comment":"Returns a {@code Collector} that produces the sum of a integer-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToIntFunction\u003c? super T\u003e)","flatSignature":"(ToIntFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"summingLong","comment":"Returns a {@code Collector} that produces the sum of a long-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToLongFunction\u003c? super T\u003e)","flatSignature":"(ToLongFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"summingDouble","comment":"Returns a {@code Collector} that produces the sum of a double-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.\n\n \u003cp\u003eThe sum returned can vary depending upon the order in which\n values are recorded, due to accumulated rounding error in\n addition of values of differing magnitudes. Values sorted by increasing\n absolute magnitude tend to yield more accurate results.  If any recorded\n value is a {@code NaN} or the sum is at any point a {@code NaN} then the\n sum will be {@code NaN}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToDoubleFunction\u003c? super T\u003e)","flatSignature":"(ToDoubleFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"averagingInt","comment":"Returns a {@code Collector} that produces the arithmetic mean of an integer-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToIntFunction\u003c? super T\u003e)","flatSignature":"(ToIntFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"averagingLong","comment":"Returns a {@code Collector} that produces the arithmetic mean of a long-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToLongFunction\u003c? super T\u003e)","flatSignature":"(ToLongFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"averagingDouble","comment":"Returns a {@code Collector} that produces the arithmetic mean of a double-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.\n\n \u003cp\u003eThe average returned can vary depending upon the order in which\n values are recorded, due to accumulated rounding error in\n addition of values of differing magnitudes. Values sorted by increasing\n absolute magnitude tend to yield more accurate results.  If any recorded\n value is a {@code NaN} or the sum is at any point a {@code NaN} then the\n average will be {@code NaN}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToDoubleFunction\u003c? super T\u003e)","flatSignature":"(ToDoubleFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"reducing","comment":"Returns a {@code Collector} which performs a reduction of its\n input elements under a specified {@code BinaryOperator} using the\n provided identity.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.function.BinaryOperator\u003cT\u003e)","flatSignature":"(T, BinaryOperator\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"identity","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"op","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"reducing","comment":"Returns a {@code Collector} which performs a reduction of its\n input elements under a specified {@code BinaryOperator}.  The result\n is described as an {@code Optional\u003cT\u003e}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BinaryOperator\u003cT\u003e)","flatSignature":"(BinaryOperator\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"op","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"reducing","comment":"Returns a {@code Collector} which performs a reduction of its\n input elements under a specified mapping function and\n {@code BinaryOperator}. This is a generalization of\n {@link #reducing(Object, BinaryOperator)} which allows a transformation\n of the elements before reduction.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(U, java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.function.BinaryOperator\u003cU\u003e)","flatSignature":"(U, Function\u003c? super T, ? extends U\u003e, BinaryOperator\u003cU\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"identity","type":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}}},{"name":"mapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"op","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"U","bounds":[]}]},{"name":"groupingBy","comment":"Returns a {@code Collector} implementing a \"group by\" operation on\n input elements of type {@code T}, grouping elements according to a\n classification function, and returning the results in a {@code Map}.\n\n \u003cp\u003eThe classification function maps elements to some key type {@code K}.\n The collector produces a {@code Map\u003cK, List\u003cT\u003e\u003e} whose keys are the\n values resulting from applying the classification function to the input\n elements, and whose corresponding values are {@code List}s containing the\n input elements which map to the associated key under the classification\n function.\n\n \u003cp\u003eThere are no guarantees on the type, mutability, serializability, or\n thread-safety of the {@code Map} or {@code List} objects returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"classifier","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]}]},{"name":"groupingBy","comment":"Returns a {@code Collector} implementing a cascaded \"group by\" operation\n on input elements of type {@code T}, grouping elements according to a\n classification function, and then performing a reduction operation on\n the values associated with a given key using the specified downstream\n {@code Collector}.\n\n \u003cp\u003eThe classification function maps elements to some key type {@code K}.\n The downstream collector operates on elements of type {@code T} and\n produces a result of type {@code D}. The resulting collector produces a\n {@code Map\u003cK, D\u003e}.\n\n \u003cp\u003eThere are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code Map} returned.\n\n \u003cp\u003eFor example, to compute the set of last names of people in each city:\n \u003cpre\u003e{@code\n     Map\u003cCity, Set\u003cString\u003e\u003e namesByCity\n         \u003d people.stream().collect(groupingBy(Person::getCity,\n                                              mapping(Person::getLastName, toSet())));\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.stream.Collector\u003c? super T, A, D\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Collector\u003c? super T, A, D\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"classifier","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"A","bounds":[]},{"name":"D","bounds":[]}]},{"name":"groupingBy","comment":"Returns a {@code Collector} implementing a cascaded \"group by\" operation\n on input elements of type {@code T}, grouping elements according to a\n classification function, and then performing a reduction operation on\n the values associated with a given key using the specified downstream\n {@code Collector}.  The {@code Map} produced by the Collector is created\n with the supplied factory function.\n\n \u003cp\u003eThe classification function maps elements to some key type {@code K}.\n The downstream collector operates on elements of type {@code T} and\n produces a result of type {@code D}. The resulting collector produces a\n {@code Map\u003cK, D\u003e}.\n\n \u003cp\u003eFor example, to compute the set of last names of people in each city,\n where the city names are sorted:\n \u003cpre\u003e{@code\n     Map\u003cCity, Set\u003cString\u003e\u003e namesByCity\n         \u003d people.stream().collect(groupingBy(Person::getCity, TreeMap::new,\n                                              mapping(Person::getLastName, toSet())));\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Supplier\u003cM\u003e, java.util.stream.Collector\u003c? super T, A, D\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Supplier\u003cM\u003e, Collector\u003c? super T, A, D\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"classifier","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"mapFactory","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"D","bounds":[]},{"name":"A","bounds":[]},{"name":"M","bounds":["java.util.Map"]}]},{"name":"groupingByConcurrent","comment":"Returns a concurrent {@code Collector} implementing a \"group by\"\n operation on input elements of type {@code T}, grouping elements\n according to a classification function.\n\n \u003cp\u003eThis is a {@link Collector.Characteristics#CONCURRENT concurrent} and\n {@link Collector.Characteristics#UNORDERED unordered} Collector.\n\n \u003cp\u003eThe classification function maps elements to some key type {@code K}.\n The collector produces a {@code ConcurrentMap\u003cK, List\u003cT\u003e\u003e} whose keys are the\n values resulting from applying the classification function to the input\n elements, and whose corresponding values are {@code List}s containing the\n input elements which map to the associated key under the classification\n function.\n\n \u003cp\u003eThere are no guarantees on the type, mutability, or serializability\n of the {@code Map} or {@code List} objects returned, or of the\n thread-safety of the {@code List} objects returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"classifier","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]}]},{"name":"groupingByConcurrent","comment":"Returns a concurrent {@code Collector} implementing a cascaded \"group by\"\n operation on input elements of type {@code T}, grouping elements\n according to a classification function, and then performing a reduction\n operation on the values associated with a given key using the specified\n downstream {@code Collector}.\n\n \u003cp\u003eThis is a {@link Collector.Characteristics#CONCURRENT concurrent} and\n {@link Collector.Characteristics#UNORDERED unordered} Collector.\n\n \u003cp\u003eThe classification function maps elements to some key type {@code K}.\n The downstream collector operates on elements of type {@code T} and\n produces a result of type {@code D}. The resulting collector produces a\n {@code Map\u003cK, D\u003e}.\n\n \u003cp\u003eFor example, to compute the set of last names of people in each city,\n where the city names are sorted:\n \u003cpre\u003e{@code\n     ConcurrentMap\u003cCity, Set\u003cString\u003e\u003e namesByCity\n         \u003d people.stream().collect(groupingByConcurrent(Person::getCity,\n                                                        mapping(Person::getLastName, toSet())));\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.stream.Collector\u003c? super T, A, D\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Collector\u003c? super T, A, D\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"classifier","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"A","bounds":[]},{"name":"D","bounds":[]}]},{"name":"groupingByConcurrent","comment":"Returns a concurrent {@code Collector} implementing a cascaded \"group by\"\n operation on input elements of type {@code T}, grouping elements\n according to a classification function, and then performing a reduction\n operation on the values associated with a given key using the specified\n downstream {@code Collector}.  The {@code ConcurrentMap} produced by the\n Collector is created with the supplied factory function.\n\n \u003cp\u003eThis is a {@link Collector.Characteristics#CONCURRENT concurrent} and\n {@link Collector.Characteristics#UNORDERED unordered} Collector.\n\n \u003cp\u003eThe classification function maps elements to some key type {@code K}.\n The downstream collector operates on elements of type {@code T} and\n produces a result of type {@code D}. The resulting collector produces a\n {@code Map\u003cK, D\u003e}.\n\n \u003cp\u003eFor example, to compute the set of last names of people in each city,\n where the city names are sorted:\n \u003cpre\u003e{@code\n     ConcurrentMap\u003cCity, Set\u003cString\u003e\u003e namesByCity\n         \u003d people.stream().collect(groupingBy(Person::getCity, ConcurrentSkipListMap::new,\n                                              mapping(Person::getLastName, toSet())));\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Supplier\u003cM\u003e, java.util.stream.Collector\u003c? super T, A, D\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Supplier\u003cM\u003e, Collector\u003c? super T, A, D\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"classifier","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"mapFactory","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"A","bounds":[]},{"name":"D","bounds":[]},{"name":"M","bounds":["java.util.concurrent.ConcurrentMap"]}]},{"name":"partitioningBy","comment":"Returns a {@code Collector} which partitions the input elements according\n to a {@code Predicate}, and organizes them into a\n {@code Map\u003cBoolean, List\u003cT\u003e\u003e}.\n\n There are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code Map} returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super T\u003e)","flatSignature":"(Predicate\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"partitioningBy","comment":"Returns a {@code Collector} which partitions the input elements according\n to a {@code Predicate}, reduces the values in each partition according to\n another {@code Collector}, and organizes them into a\n {@code Map\u003cBoolean, D\u003e} whose values are the result of the downstream\n reduction.\n\n \u003cp\u003eThere are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code Map} returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super T\u003e, java.util.stream.Collector\u003c? super T, A, D\u003e)","flatSignature":"(Predicate\u003c? super T\u003e, Collector\u003c? super T, A, D\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"predicate","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}},{"name":"downstream","type":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"D","bounds":[]},{"name":"A","bounds":[]}]},{"name":"toMap","comment":"Returns a {@code Collector} that accumulates elements into a\n {@code Map} whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n \u003cp\u003eIf the mapped keys contains duplicates (according to\n {@link Object#equals(Object)}), an {@code IllegalStateException} is\n thrown when the collection operation is performed.  If the mapped keys\n may have duplicates, use {@link #toMap(Function, Function, BinaryOperator)}\n instead.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Function\u003c? super T, ? extends U\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Function\u003c? super T, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"valueMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"U","bounds":[]}]},{"name":"toMap","comment":"Returns a {@code Collector} that accumulates elements into a\n {@code Map} whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n \u003cp\u003eIf the mapped\n keys contains duplicates (according to {@link Object#equals(Object)}),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.function.BinaryOperator\u003cU\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Function\u003c? super T, ? extends U\u003e, BinaryOperator\u003cU\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"valueMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"mergeFunction","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"U","bounds":[]}]},{"name":"toMap","comment":"Returns a {@code Collector} that accumulates elements into a\n {@code Map} whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n \u003cp\u003eIf the mapped\n keys contains duplicates (according to {@link Object#equals(Object)}),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.  The {@code Map}\n is created by a provided supplier function.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.function.BinaryOperator\u003cU\u003e, java.util.function.Supplier\u003cM\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Function\u003c? super T, ? extends U\u003e, BinaryOperator\u003cU\u003e, Supplier\u003cM\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"valueMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"mergeFunction","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}},{"name":"mapSupplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"U","bounds":[]},{"name":"M","bounds":["java.util.Map"]}]},{"name":"toConcurrentMap","comment":"Returns a concurrent {@code Collector} that accumulates elements into a\n {@code ConcurrentMap} whose keys and values are the result of applying\n the provided mapping functions to the input elements.\n\n \u003cp\u003eIf the mapped keys contains duplicates (according to\n {@link Object#equals(Object)}), an {@code IllegalStateException} is\n thrown when the collection operation is performed.  If the mapped keys\n may have duplicates, use\n {@link #toConcurrentMap(Function, Function, BinaryOperator)} instead.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Function\u003c? super T, ? extends U\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Function\u003c? super T, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"valueMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"U","bounds":[]}]},{"name":"toConcurrentMap","comment":"Returns a concurrent {@code Collector} that accumulates elements into a\n {@code ConcurrentMap} whose keys and values are the result of applying\n the provided mapping functions to the input elements.\n\n \u003cp\u003eIf the mapped keys contains duplicates (according to {@link Object#equals(Object)}),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.function.BinaryOperator\u003cU\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Function\u003c? super T, ? extends U\u003e, BinaryOperator\u003cU\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"valueMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"mergeFunction","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"U","bounds":[]}]},{"name":"toConcurrentMap","comment":"Returns a concurrent {@code Collector} that accumulates elements into a\n {@code ConcurrentMap} whose keys and values are the result of applying\n the provided mapping functions to the input elements.\n\n \u003cp\u003eIf the mapped keys contains duplicates (according to {@link Object#equals(Object)}),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.  The\n {@code ConcurrentMap} is created by a provided supplier function.\n\n \u003cp\u003eThis is a {@link Collector.Characteristics#CONCURRENT concurrent} and\n {@link Collector.Characteristics#UNORDERED unordered} Collector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends K\u003e, java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.function.BinaryOperator\u003cU\u003e, java.util.function.Supplier\u003cM\u003e)","flatSignature":"(Function\u003c? super T, ? extends K\u003e, Function\u003c? super T, ? extends U\u003e, BinaryOperator\u003cU\u003e, Supplier\u003cM\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"valueMapper","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"mergeFunction","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}},{"name":"mapSupplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"K","bounds":[]},{"name":"U","bounds":[]},{"name":"M","bounds":["java.util.concurrent.ConcurrentMap"]}]},{"name":"summarizingInt","comment":"Returns a {@code Collector} which applies an {@code int}-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToIntFunction\u003c? super T\u003e)","flatSignature":"(ToIntFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"summarizingLong","comment":"Returns a {@code Collector} which applies an {@code long}-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToLongFunction\u003c? super T\u003e)","flatSignature":"(ToLongFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"summarizingDouble","comment":"Returns a {@code Collector} which applies an {@code double}-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToDoubleFunction\u003c? super T\u003e)","flatSignature":"(ToDoubleFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"mapper","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[],"enumConstants":[]}