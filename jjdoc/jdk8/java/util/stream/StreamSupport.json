{"name":"StreamSupport","comment":"Low-level utility methods for creating and manipulating streams.\n\n \u003cp\u003eThis class is mostly for library writers presenting stream views\n of data structures; most static stream methods intended for end users are in\n the various {@code Stream} classes.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"StreamSupport","qualifiedName":"java.util.stream.StreamSupport","dimension":"","elementType":{},"package":"java.util.stream","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"stream","comment":"Creates a new sequential or parallel {@code Stream} from a\n {@code Spliterator}.\n\n \u003cp\u003eThe spliterator is only traversed, split, or queried for estimated\n size after the terminal operation of the stream pipeline commences.\n\n \u003cp\u003eIt is strongly recommended the spliterator report a characteristic of\n {@code IMMUTABLE} or {@code CONCURRENT}, or be\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e.  Otherwise,\n {@link #stream(java.util.function.Supplier, int, boolean)} should be used\n to reduce the scope of potential interference with the source.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator\u003cT\u003e, boolean)","flatSignature":"(Spliterator\u003cT\u003e, boolean)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"stream","comment":"Creates a new sequential or parallel {@code Stream} from a\n {@code Supplier} of {@code Spliterator}.\n\n \u003cp\u003eThe {@link Supplier#get()} method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n \u003cp\u003eFor spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e, it is likely\n more efficient to use {@link #stream(java.util.Spliterator, boolean)}\n instead.\n \u003cp\u003eThe use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003c? extends java.util.Spliterator\u003cT\u003e\u003e, int, boolean)","flatSignature":"(Supplier\u003c? extends Spliterator\u003cT\u003e\u003e, int, boolean)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"intStream","comment":"Creates a new sequential or parallel {@code IntStream} from a\n {@code Spliterator.OfInt}.\n\n \u003cp\u003eThe spliterator is only traversed, split, or queried for estimated size\n after the terminal operation of the stream pipeline commences.\n\n \u003cp\u003eIt is strongly recommended the spliterator report a characteristic of\n {@code IMMUTABLE} or {@code CONCURRENT}, or be\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e.  Otherwise,\n {@link #intStream(java.util.function.Supplier, int, boolean)} should be\n used to reduce the scope of potential interference with the source.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator.OfInt, boolean)","flatSignature":"(Spliterator.OfInt, boolean)","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"intStream","comment":"Creates a new sequential or parallel {@code IntStream} from a\n {@code Supplier} of {@code Spliterator.OfInt}.\n\n \u003cp\u003eThe {@link Supplier#get()} method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n \u003cp\u003eFor spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e, it is likely\n more efficient to use {@link #intStream(java.util.Spliterator.OfInt, boolean)}\n instead.\n \u003cp\u003eThe use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003c? extends java.util.Spliterator.OfInt\u003e, int, boolean)","flatSignature":"(Supplier\u003c? extends Spliterator.OfInt\u003e, int, boolean)","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"longStream","comment":"Creates a new sequential or parallel {@code LongStream} from a\n {@code Spliterator.OfLong}.\n\n \u003cp\u003eThe spliterator is only traversed, split, or queried for estimated\n size after the terminal operation of the stream pipeline commences.\n\n \u003cp\u003eIt is strongly recommended the spliterator report a characteristic of\n {@code IMMUTABLE} or {@code CONCURRENT}, or be\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e.  Otherwise,\n {@link #longStream(java.util.function.Supplier, int, boolean)} should be\n used to reduce the scope of potential interference with the source.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator.OfLong, boolean)","flatSignature":"(Spliterator.OfLong, boolean)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"longStream","comment":"Creates a new sequential or parallel {@code LongStream} from a\n {@code Supplier} of {@code Spliterator.OfLong}.\n\n \u003cp\u003eThe {@link Supplier#get()} method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n \u003cp\u003eFor spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e, it is likely\n more efficient to use {@link #longStream(java.util.Spliterator.OfLong, boolean)}\n instead.\n \u003cp\u003eThe use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003c? extends java.util.Spliterator.OfLong\u003e, int, boolean)","flatSignature":"(Supplier\u003c? extends Spliterator.OfLong\u003e, int, boolean)","returnType":{"isPrimitive":false,"simpleName":"LongStream","qualifiedName":"java.util.stream.LongStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"doubleStream","comment":"Creates a new sequential or parallel {@code DoubleStream} from a\n {@code Spliterator.OfDouble}.\n\n \u003cp\u003eThe spliterator is only traversed, split, or queried for estimated size\n after the terminal operation of the stream pipeline commences.\n\n \u003cp\u003eIt is strongly recommended the spliterator report a characteristic of\n {@code IMMUTABLE} or {@code CONCURRENT}, or be\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e.  Otherwise,\n {@link #doubleStream(java.util.function.Supplier, int, boolean)} should\n be used to reduce the scope of potential interference with the source.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator.OfDouble, boolean)","flatSignature":"(Spliterator.OfDouble, boolean)","returnType":{"isPrimitive":false,"simpleName":"DoubleStream","qualifiedName":"java.util.stream.DoubleStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"doubleStream","comment":"Creates a new sequential or parallel {@code DoubleStream} from a\n {@code Supplier} of {@code Spliterator.OfDouble}.\n\n \u003cp\u003eThe {@link Supplier#get()} method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n \u003cp\u003eFor spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n \u003ca href\u003d\"../Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e, it is likely\n more efficient to use {@link #doubleStream(java.util.Spliterator.OfDouble, boolean)}\n instead.\n \u003cp\u003eThe use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n \u003ca href\u003d\"package-summary.html#NonInterference\"\u003eNon-Interference\u003c/a\u003e for\n more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003c? extends java.util.Spliterator.OfDouble\u003e, int, boolean)","flatSignature":"(Supplier\u003c? extends Spliterator.OfDouble\u003e, int, boolean)","returnType":{"isPrimitive":false,"simpleName":"DoubleStream","qualifiedName":"java.util.stream.DoubleStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"parallel","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}