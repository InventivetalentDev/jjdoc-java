{"name":"Collector","comment":"A \u003ca href\u003d\"package-summary.html#Reduction\"\u003emutable reduction operation\u003c/a\u003e that\n accumulates input elements into a mutable result container, optionally transforming\n the accumulated result into a final representation after all input elements\n have been processed.  Reduction operations can be performed either sequentially\n or in parallel.\n\n \u003cp\u003eExamples of mutable reduction operations include:\n accumulating elements into a {@code Collection}; concatenating\n strings using a {@code StringBuilder}; computing summary information about\n elements such as sum, min, max, or average; computing \"pivot table\" summaries\n such as \"maximum valued transaction by seller\", etc.  The class {@link Collectors}\n provides implementations of many common mutable reductions.\n\n \u003cp\u003eA {@code Collector} is specified by four functions that work together to\n accumulate entries into a mutable result container, and optionally perform\n a final transform on the result.  They are: \u003cul\u003e\n     \u003cli\u003ecreation of a new result container ({@link #supplier()})\u003c/li\u003e\n     \u003cli\u003eincorporating a new data element into a result container ({@link #accumulator()})\u003c/li\u003e\n     \u003cli\u003ecombining two result containers into one ({@link #combiner()})\u003c/li\u003e\n     \u003cli\u003eperforming an optional final transform on the container ({@link #finisher()})\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eCollectors also have a set of characteristics, such as\n {@link Characteristics#CONCURRENT}, that provide hints that can be used by a\n reduction implementation to provide better performance.\n\n \u003cp\u003eA sequential implementation of a reduction using a collector would\n create a single result container using the supplier function, and invoke the\n accumulator function once for each input element.  A parallel implementation\n would partition the input, create a result container for each partition,\n accumulate the contents of each partition into a subresult for that partition,\n and then use the combiner function to merge the subresults into a combined\n result.\n\n \u003cp\u003eTo ensure that sequential and parallel executions produce equivalent\n results, the collector functions must satisfy an \u003cem\u003eidentity\u003c/em\u003e and an\n \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociativity\u003c/a\u003e constraints.\n\n \u003cp\u003eThe identity constraint says that for any partially accumulated result,\n combining it with an empty result container must produce an equivalent\n result.  That is, for a partially accumulated result {@code a} that is the\n result of any series of accumulator and combiner invocations, {@code a} must\n be equivalent to {@code combiner.apply(a, supplier.get())}.\n\n \u003cp\u003eThe associativity constraint says that splitting the computation must\n produce an equivalent result.  That is, for any input elements {@code t1}\n and {@code t2}, the results {@code r1} and {@code r2} in the computation\n below must be equivalent:\n \u003cpre\u003e{@code\n     A a1 \u003d supplier.get();\n     accumulator.accept(a1, t1);\n     accumulator.accept(a1, t2);\n     R r1 \u003d finisher.apply(a1);  // result without splitting\n\n     A a2 \u003d supplier.get();\n     accumulator.accept(a2, t1);\n     A a3 \u003d supplier.get();\n     accumulator.accept(a3, t2);\n     R r2 \u003d finisher.apply(combiner.apply(a2, a3));  // result with splitting\n } \u003c/pre\u003e\n\n \u003cp\u003eFor collectors that do not have the {@code UNORDERED} characteristic,\n two accumulated results {@code a1} and {@code a2} are equivalent if\n {@code finisher.apply(a1).equals(finisher.apply(a2))}.  For unordered\n collectors, equivalence is relaxed to allow for non-equality related to\n differences in order.  (For example, an unordered collector that accumulated\n elements to a {@code List} would consider two lists equivalent if they\n contained the same elements, ignoring order.)\n\n \u003cp\u003eLibraries that implement reduction based on {@code Collector}, such as\n {@link Stream#collect(Collector)}, must adhere to the following constraints:\n \u003cul\u003e\n     \u003cli\u003eThe first argument passed to the accumulator function, both\n     arguments passed to the combiner function, and the argument passed to the\n     finisher function must be the result of a previous invocation of the\n     result supplier, accumulator, or combiner functions.\u003c/li\u003e\n     \u003cli\u003eThe implementation should not do anything with the result of any of\n     the result supplier, accumulator, or combiner functions other than to\n     pass them again to the accumulator, combiner, or finisher functions,\n     or return them to the caller of the reduction operation.\u003c/li\u003e\n     \u003cli\u003eIf a result is passed to the combiner or finisher\n     function, and the same object is not returned from that function, it is\n     never used again.\u003c/li\u003e\n     \u003cli\u003eOnce a result is passed to the combiner or finisher function, it\n     is never passed to the accumulator function again.\u003c/li\u003e\n     \u003cli\u003eFor non-concurrent collectors, any result returned from the result\n     supplier, accumulator, or combiner functions must be serially\n     thread-confined.  This enables collection to occur in parallel without\n     the {@code Collector} needing to implement any additional synchronization.\n     The reduction implementation must manage that the input is properly\n     partitioned, that partitions are processed in isolation, and combining\n     happens only after accumulation is complete.\u003c/li\u003e\n     \u003cli\u003eFor concurrent collectors, an implementation is free to (but not\n     required to) implement reduction concurrently.  A concurrent reduction\n     is one where the accumulator function is called concurrently from\n     multiple threads, using the same concurrently-modifiable result container,\n     rather than keeping the result isolated during accumulation.\n     A concurrent reduction should only be applied if the collector has the\n     {@link Characteristics#UNORDERED} characteristics or if the\n     originating data is unordered.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eIn addition to the predefined implementations in {@link Collectors}, the\n static factory methods {@link #of(Supplier, BiConsumer, BinaryOperator, Characteristics...)}\n can be used to construct collectors.  For example, you could create a collector\n that accumulates widgets into a {@code TreeSet} with:\n\n \u003cpre\u003e{@code\n     Collector\u003cWidget, ?, TreeSet\u003cWidget\u003e\u003e intoSet \u003d\n         Collector.of(TreeSet::new, TreeSet::add,\n                      (left, right) -\u003e { left.addAll(right); return left; });\n }\u003c/pre\u003e\n\n (This behavior is also implemented by the predefined collector\n {@link Collectors#toCollection(Supplier)}).","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{},"package":"java.util.stream","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":["java.util.stream.Collector.Characteristics"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"supplier","comment":"A function that creates and returns a new mutable result container.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"accumulator","comment":"A function that folds a value into a mutable result container.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"combiner","comment":"A function that accepts two partial results and merges them.  The\n combiner function may fold state from one argument into the other and\n return that, or may return a new result container.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"finisher","comment":"Perform the final transformation from the intermediate accumulation type\n {@code A} to the final result type {@code R}.\n\n \u003cp\u003eIf the characteristic {@code IDENTITY_TRANSFORM} is\n set, this function may be presumed to be an identity transform with an\n unchecked cast from {@code A} to {@code R}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"characteristics","comment":"Returns a {@code Set} of {@code Collector.Characteristics} indicating\n the characteristics of this Collector.  This set should be immutable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"of","comment":"Returns a new {@code Collector} described by the given {@code supplier},\n {@code accumulator}, and {@code combiner} functions.  The resulting\n {@code Collector} has the {@code Collector.Characteristics.IDENTITY_FINISH}\n characteristic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003cR\u003e, java.util.function.BiConsumer\u003cR, T\u003e, java.util.function.BinaryOperator\u003cR\u003e, java.util.stream.Collector.Characteristics...)","flatSignature":"(Supplier\u003cR\u003e, BiConsumer\u003cR, T\u003e, BinaryOperator\u003cR\u003e, Collector.Characteristics...)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}},{"name":"combiner","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":false,"simpleName":"Characteristics","qualifiedName":"java.util.stream.Collector.Characteristics","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Characteristics","qualifiedName":"java.util.stream.Collector.Characteristics","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"R","bounds":[]}]},{"name":"of","comment":"Returns a new {@code Collector} described by the given {@code supplier},\n {@code accumulator}, {@code combiner}, and {@code finisher} functions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003cA\u003e, java.util.function.BiConsumer\u003cA, T\u003e, java.util.function.BinaryOperator\u003cA\u003e, java.util.function.Function\u003cA, R\u003e, java.util.stream.Collector.Characteristics...)","flatSignature":"(Supplier\u003cA\u003e, BiConsumer\u003cA, T\u003e, BinaryOperator\u003cA\u003e, Function\u003cA, R\u003e, Collector.Characteristics...)","returnType":{"isPrimitive":false,"simpleName":"Collector","qualifiedName":"java.util.stream.Collector","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}},{"name":"accumulator","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}},{"name":"combiner","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}},{"name":"finisher","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":false,"simpleName":"Characteristics","qualifiedName":"java.util.stream.Collector.Characteristics","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Characteristics","qualifiedName":"java.util.stream.Collector.Characteristics","dimension":"","elementType":{}}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"A","bounds":[]},{"name":"R","bounds":[]}]}],"typeParameters":[{"name":"T","bounds":[]},{"name":"A","bounds":[]},{"name":"R","bounds":[]}],"enumConstants":[]}