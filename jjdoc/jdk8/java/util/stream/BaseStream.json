{"name":"BaseStream","comment":"Base interface for streams, which are sequences of elements supporting\n sequential and parallel aggregate operations.  The following example\n illustrates an aggregate operation using the stream types {@link Stream}\n and {@link IntStream}, computing the sum of the weights of the red widgets:\n\n \u003cpre\u003e{@code\n     int sum \u003d widgets.stream()\n                      .filter(w -\u003e w.getColor() \u003d\u003d RED)\n                      .mapToInt(w -\u003e w.getWeight())\n                      .sum();\n }\u003c/pre\u003e\n\n See the class documentation for {@link Stream} and the package documentation\n for \u003ca href\u003d\"package-summary.html\"\u003ejava.util.stream\u003c/a\u003e for additional\n specification of streams, stream operations, stream pipelines, and\n parallelism, which governs the behavior of all stream types.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"BaseStream","qualifiedName":"java.util.stream.BaseStream","dimension":"","elementType":{},"package":"java.util.stream","interfaces":["java.lang.AutoCloseable"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"iterator","comment":"Returns an iterator for the elements of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Returns a spliterator for the elements of this stream.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eterminal\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isParallel","comment":"Returns whether this stream, if a terminal operation were to be executed,\n would execute in parallel.  Calling this method after invoking an\n terminal stream operation method may yield unpredictable results.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sequential","comment":"Returns an equivalent stream that is sequential.  May return\n itself, either because the stream was already sequential, or because\n the underlying stream state was modified to be sequential.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"S","qualifiedName":"S","dimension":"","elementType":{},"typeVariable":{"name":"S","bounds":["java.util.stream.BaseStream"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parallel","comment":"Returns an equivalent stream that is parallel.  May return\n itself, either because the stream was already parallel, or because\n the underlying stream state was modified to be parallel.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"S","qualifiedName":"S","dimension":"","elementType":{},"typeVariable":{"name":"S","bounds":["java.util.stream.BaseStream"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"unordered","comment":"Returns an equivalent stream that is\n \u003ca href\u003d\"package-summary.html#Ordering\"\u003eunordered\u003c/a\u003e.  May return\n itself, either because the stream was already unordered, or because\n the underlying stream state was modified to be unordered.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"S","qualifiedName":"S","dimension":"","elementType":{},"typeVariable":{"name":"S","bounds":["java.util.stream.BaseStream"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"onClose","comment":"Returns an equivalent stream with an additional close handler.  Close\n handlers are run when the {@link #close()} method\n is called on the stream, and are executed in the order they were\n added.  All close handlers are run, even if earlier close handlers throw\n exceptions.  If any close handler throws an exception, the first\n exception thrown will be relayed to the caller of {@code close()}, with\n any remaining exceptions added to that exception as suppressed exceptions\n (unless one of the remaining exceptions is the same exception as the\n first exception, since an exception cannot suppress itself.)  May\n return itself.\n\n \u003cp\u003eThis is an \u003ca href\u003d\"package-summary.html#StreamOps\"\u003eintermediate\n operation\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"S","qualifiedName":"S","dimension":"","elementType":{},"typeVariable":{"name":"S","bounds":["java.util.stream.BaseStream"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"closeHandler","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"close","comment":"Closes this stream, causing all close handlers for this stream pipeline\n to be called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]},{"name":"S","bounds":["java.util.stream.BaseStream"]}],"subInterfaces":["java.util.stream.Stream","java.util.stream.LongStream","java.util.stream.IntStream","java.util.stream.DoubleStream"],"enumConstants":[]}