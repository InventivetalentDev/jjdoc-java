{"name":"Calendar","comment":"The \u003ccode\u003eCalendar\u003c/code\u003e class is an abstract class that provides methods\n for converting between a specific instant in time and a set of {@link\n #fields calendar fields} such as \u003ccode\u003eYEAR\u003c/code\u003e, \u003ccode\u003eMONTH\u003c/code\u003e,\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e, \u003ccode\u003eHOUR\u003c/code\u003e, and so on, and for\n manipulating the calendar fields, such as getting the date of the next\n week. An instant in time can be represented by a millisecond value that is\n an offset from the \u003ca name\u003d\"Epoch\"\u003e\u003cem\u003eEpoch\u003c/em\u003e\u003c/a\u003e, January 1, 1970\n 00:00:00.000 GMT (Gregorian).\n\n \u003cp\u003eThe class also provides additional fields and methods for\n implementing a concrete calendar system outside the package. Those\n fields and methods are defined as \u003ccode\u003eprotected\u003c/code\u003e.\n\n \u003cp\u003e\n Like other locale-sensitive classes, \u003ccode\u003eCalendar\u003c/code\u003e provides a\n class method, \u003ccode\u003egetInstance\u003c/code\u003e, for getting a generally useful\n object of this type. \u003ccode\u003eCalendar\u003c/code\u003e\u0027s \u003ccode\u003egetInstance\u003c/code\u003e method\n returns a \u003ccode\u003eCalendar\u003c/code\u003e object whose\n calendar fields have been initialized with the current date and time:\n \u003cblockquote\u003e\n \u003cpre\u003e\n     Calendar rightNow \u003d Calendar.getInstance();\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003eA \u003ccode\u003eCalendar\u003c/code\u003e object can produce all the calendar field values\n needed to implement the date-time formatting for a particular language and\n calendar style (for example, Japanese-Gregorian, Japanese-Traditional).\n \u003ccode\u003eCalendar\u003c/code\u003e defines the range of values returned by\n certain calendar fields, as well as their meaning.  For example,\n the first month of the calendar system has value \u003ccode\u003eMONTH \u003d\u003d\n JANUARY\u003c/code\u003e for all calendars.  Other values are defined by the\n concrete subclass, such as \u003ccode\u003eERA\u003c/code\u003e.  See individual field\n documentation and subclass documentation for details.\n\n \u003ch3\u003eGetting and Setting Calendar Field Values\u003c/h3\u003e\n\n \u003cp\u003eThe calendar field values can be set by calling the \u003ccode\u003eset\u003c/code\u003e\n methods. Any field values set in a \u003ccode\u003eCalendar\u003c/code\u003e will not be\n interpreted until it needs to calculate its time value (milliseconds from\n the Epoch) or values of the calendar fields. Calling the\n \u003ccode\u003eget\u003c/code\u003e, \u003ccode\u003egetTimeInMillis\u003c/code\u003e, \u003ccode\u003egetTime\u003c/code\u003e,\n \u003ccode\u003eadd\u003c/code\u003e and \u003ccode\u003eroll\u003c/code\u003e involves such calculation.\n\n \u003ch4\u003eLeniency\u003c/h4\u003e\n\n \u003cp\u003e\u003ccode\u003eCalendar\u003c/code\u003e has two modes for interpreting the calendar\n fields, \u003cem\u003elenient\u003c/em\u003e and \u003cem\u003enon-lenient\u003c/em\u003e.  When a\n \u003ccode\u003eCalendar\u003c/code\u003e is in lenient mode, it accepts a wider range of\n calendar field values than it produces.  When a \u003ccode\u003eCalendar\u003c/code\u003e\n recomputes calendar field values for return by \u003ccode\u003eget()\u003c/code\u003e, all of\n the calendar fields are normalized. For example, a lenient\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e interprets \u003ccode\u003eMONTH \u003d\u003d JANUARY\u003c/code\u003e,\n \u003ccode\u003eDAY_OF_MONTH \u003d\u003d 32\u003c/code\u003e as February 1.\n\n \u003cp\u003eWhen a \u003ccode\u003eCalendar\u003c/code\u003e is in non-lenient mode, it throws an\n exception if there is any inconsistency in its calendar fields. For\n example, a \u003ccode\u003eGregorianCalendar\u003c/code\u003e always produces\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e values between 1 and the length of the month. A\n non-lenient \u003ccode\u003eGregorianCalendar\u003c/code\u003e throws an exception upon\n calculating its time or calendar field values if any out-of-range field\n value has been set.\n\n \u003ch4\u003e\u003ca name\u003d\"first_week\"\u003eFirst Week\u003c/a\u003e\u003c/h4\u003e\n\n \u003ccode\u003eCalendar\u003c/code\u003e defines a locale-specific seven day week using two\n parameters: the first day of the week and the minimal days in first week\n (from 1 to 7).  These numbers are taken from the locale resource data when a\n \u003ccode\u003eCalendar\u003c/code\u003e is constructed.  They may also be specified explicitly\n through the methods for setting their values.\n\n \u003cp\u003eWhen setting or getting the \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e or\n \u003ccode\u003eWEEK_OF_YEAR\u003c/code\u003e fields, \u003ccode\u003eCalendar\u003c/code\u003e must determine the\n first week of the month or year as a reference point.  The first week of a\n month or year is defined as the earliest seven day period beginning on\n \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e and containing at least\n \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e days of that month or year.  Weeks\n numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow\n it.  Note that the normalized numbering returned by \u003ccode\u003eget()\u003c/code\u003e may be\n different.  For example, a specific \u003ccode\u003eCalendar\u003c/code\u003e subclass may\n designate the week before week 1 of a year as week \u003ccode\u003e\u003ci\u003en\u003c/i\u003e\u003c/code\u003e of\n the previous year.\n\n \u003ch4\u003eCalendar Fields Resolution\u003c/h4\u003e\n\n When computing a date and time from the calendar fields, there\n may be insufficient information for the computation (such as only\n year and month with no day of month), or there may be inconsistent\n information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15,\n 1996 is actually a Monday). \u003ccode\u003eCalendar\u003c/code\u003e will resolve\n calendar field values to determine the date and time in the\n following way.\n\n \u003cp\u003e\u003ca name\u003d\"resolution\"\u003eIf there is any conflict in calendar field values,\n \u003ccode\u003eCalendar\u003c/code\u003e gives priorities to calendar fields that have been set\n more recently.\u003c/a\u003e The following are the default combinations of the\n calendar fields. The most recent combination, as determined by the\n most recently set single field, will be used.\n\n \u003cp\u003e\u003ca name\u003d\"date_resolution\"\u003eFor the date fields\u003c/a\u003e:\n \u003cblockquote\u003e\n \u003cpre\u003e\n YEAR + MONTH + DAY_OF_MONTH\n YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK\n YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK\n YEAR + DAY_OF_YEAR\n YEAR + DAY_OF_WEEK + WEEK_OF_YEAR\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003ca name\u003d\"time_resolution\"\u003eFor the time of day fields\u003c/a\u003e:\n \u003cblockquote\u003e\n \u003cpre\u003e\n HOUR_OF_DAY\n AM_PM + HOUR\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003eIf there are any calendar fields whose values haven\u0027t been set in the selected\n field combination, \u003ccode\u003eCalendar\u003c/code\u003e uses their default values. The default\n value of each field may vary by concrete calendar systems. For example, in\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e, the default of a field is the same as that\n of the start of the Epoch: i.e., \u003ccode\u003eYEAR \u003d 1970\u003c/code\u003e, \u003ccode\u003eMONTH \u003d\n JANUARY\u003c/code\u003e, \u003ccode\u003eDAY_OF_MONTH \u003d 1\u003c/code\u003e, etc.\n\n \u003cp\u003e\n \u003cstrong\u003eNote:\u003c/strong\u003e There are certain possible ambiguities in\n interpretation of certain singular times, which are resolved in the\n following ways:\n \u003col\u003e\n     \u003cli\u003e 23:59 is the last minute of the day and 00:00 is the first\n          minute of the next day. Thus, 23:59 on Dec 31, 1999 \u0026lt; 00:00 on\n          Jan 1, 2000 \u0026lt; 00:01 on Jan 1, 2000.\n\n     \u003cli\u003e Although historically not precise, midnight also belongs to \"am\",\n          and noon belongs to \"pm\", so on the same day,\n          12:00 am (midnight) \u0026lt; 12:01 am, and 12:00 pm (noon) \u0026lt; 12:01 pm\n \u003c/ol\u003e\n\n \u003cp\u003e\n The date or time format strings are not part of the definition of a\n calendar, as those must be modifiable or overridable by the user at\n runtime. Use {@link DateFormat}\n to format dates.\n\n \u003ch4\u003eField Manipulation\u003c/h4\u003e\n\n The calendar fields can be changed using three methods:\n \u003ccode\u003eset()\u003c/code\u003e, \u003ccode\u003eadd()\u003c/code\u003e, and \u003ccode\u003eroll()\u003c/code\u003e.\n\n \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eset(f, value)\u003c/code\u003e\u003c/strong\u003e changes calendar field\n \u003ccode\u003ef\u003c/code\u003e to \u003ccode\u003evalue\u003c/code\u003e.  In addition, it sets an\n internal member variable to indicate that calendar field \u003ccode\u003ef\u003c/code\u003e has\n been changed. Although calendar field \u003ccode\u003ef\u003c/code\u003e is changed immediately,\n the calendar\u0027s time value in milliseconds is not recomputed until the next call to\n \u003ccode\u003eget()\u003c/code\u003e, \u003ccode\u003egetTime()\u003c/code\u003e, \u003ccode\u003egetTimeInMillis()\u003c/code\u003e,\n \u003ccode\u003eadd()\u003c/code\u003e, or \u003ccode\u003eroll()\u003c/code\u003e is made. Thus, multiple calls to\n \u003ccode\u003eset()\u003c/code\u003e do not trigger multiple, unnecessary\n computations. As a result of changing a calendar field using\n \u003ccode\u003eset()\u003c/code\u003e, other calendar fields may also change, depending on the\n calendar field, the calendar field value, and the calendar system. In addition,\n \u003ccode\u003eget(f)\u003c/code\u003e will not necessarily return \u003ccode\u003evalue\u003c/code\u003e set by\n the call to the \u003ccode\u003eset\u003c/code\u003e method\n after the calendar fields have been recomputed. The specifics are determined by\n the concrete calendar class.\u003c/p\u003e\n\n \u003cp\u003e\u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n originally set to August 31, 1999. Calling \u003ccode\u003eset(Calendar.MONTH,\n Calendar.SEPTEMBER)\u003c/code\u003e sets the date to September 31,\n 1999. This is a temporary internal representation that resolves to\n October 1, 1999 if \u003ccode\u003egetTime()\u003c/code\u003eis then called. However, a\n call to \u003ccode\u003eset(Calendar.DAY_OF_MONTH, 30)\u003c/code\u003e before the call to\n \u003ccode\u003egetTime()\u003c/code\u003e sets the date to September 30, 1999, since\n no recomputation occurs after \u003ccode\u003eset()\u003c/code\u003e itself.\u003c/p\u003e\n\n \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eadd(f, delta)\u003c/code\u003e\u003c/strong\u003e adds \u003ccode\u003edelta\u003c/code\u003e\n to field \u003ccode\u003ef\u003c/code\u003e.  This is equivalent to calling \u003ccode\u003eset(f,\n get(f) + delta)\u003c/code\u003e with two adjustments:\u003c/p\u003e\n\n \u003cblockquote\u003e\n   \u003cp\u003e\u003cstrong\u003eAdd rule 1\u003c/strong\u003e. The value of field \u003ccode\u003ef\u003c/code\u003e\n   after the call minus the value of field \u003ccode\u003ef\u003c/code\u003e before the\n   call is \u003ccode\u003edelta\u003c/code\u003e, modulo any overflow that has occurred in\n   field \u003ccode\u003ef\u003c/code\u003e. Overflow occurs when a field value exceeds its\n   range and, as a result, the next larger field is incremented or\n   decremented and the field value is adjusted back into its range.\u003c/p\u003e\n\n   \u003cp\u003e\u003cstrong\u003eAdd rule 2\u003c/strong\u003e. If a smaller field is expected to be\n   invariant, but it is impossible for it to be equal to its\n   prior value because of changes in its minimum or maximum after field\n   \u003ccode\u003ef\u003c/code\u003e is changed or other constraints, such as time zone\n   offset changes, then its value is adjusted to be as close\n   as possible to its expected value. A smaller field represents a\n   smaller unit of time. \u003ccode\u003eHOUR\u003c/code\u003e is a smaller field than\n   \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e. No adjustment is made to smaller fields\n   that are not expected to be invariant. The calendar system\n   determines what fields are expected to be invariant.\u003c/p\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003eIn addition, unlike \u003ccode\u003eset()\u003c/code\u003e, \u003ccode\u003eadd()\u003c/code\u003e forces\n an immediate recomputation of the calendar\u0027s milliseconds and all\n fields.\u003c/p\u003e\n\n \u003cp\u003e\u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n originally set to August 31, 1999. Calling \u003ccode\u003eadd(Calendar.MONTH,\n 13)\u003c/code\u003e sets the calendar to September 30, 2000. \u003cstrong\u003eAdd rule\n 1\u003c/strong\u003e sets the \u003ccode\u003eMONTH\u003c/code\u003e field to September, since\n adding 13 months to August gives September of the next year. Since\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e cannot be 31 in September in a\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e, \u003cstrong\u003eadd rule 2\u003c/strong\u003e sets the\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e to 30, the closest possible value. Although\n it is a smaller field, \u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e is not adjusted by\n rule 2, since it is expected to change when the month changes in a\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e.\u003c/p\u003e\n\n \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eroll(f, delta)\u003c/code\u003e\u003c/strong\u003e adds\n \u003ccode\u003edelta\u003c/code\u003e to field \u003ccode\u003ef\u003c/code\u003e without changing larger\n fields. This is equivalent to calling \u003ccode\u003eadd(f, delta)\u003c/code\u003e with\n the following adjustment:\u003c/p\u003e\n\n \u003cblockquote\u003e\n   \u003cp\u003e\u003cstrong\u003eRoll rule\u003c/strong\u003e. Larger fields are unchanged after the\n   call. A larger field represents a larger unit of\n   time. \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e is a larger field than\n   \u003ccode\u003eHOUR\u003c/code\u003e.\u003c/p\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e\u003cem\u003eExample\u003c/em\u003e: See {@link java.util.GregorianCalendar#roll(int, int)}.\n\n \u003cp\u003e\u003cstrong\u003eUsage model\u003c/strong\u003e. To motivate the behavior of\n \u003ccode\u003eadd()\u003c/code\u003e and \u003ccode\u003eroll()\u003c/code\u003e, consider a user interface\n component with increment and decrement buttons for the month, day, and\n year, and an underlying \u003ccode\u003eGregorianCalendar\u003c/code\u003e. If the\n interface reads January 31, 1999 and the user presses the month\n increment button, what should it read? If the underlying\n implementation uses \u003ccode\u003eset()\u003c/code\u003e, it might read March 3, 1999. A\n better result would be February 28, 1999. Furthermore, if the user\n presses the month increment button again, it should read March 31,\n 1999, not March 28, 1999. By saving the original date and using either\n \u003ccode\u003eadd()\u003c/code\u003e or \u003ccode\u003eroll()\u003c/code\u003e, depending on whether larger\n fields should be affected, the user interface can behave as most users\n will intuitively expect.\u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Cloneable","java.lang.Comparable"],"isAbstract":true,"isStatic":false,"since":"JDK1.1","innerClasses":["java.util.Calendar.Builder"],"isInnerClass":false,"constructors":[],"fields":[{"name":"ERA","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n era, e.g., AD or BC in the Julian calendar. This is a calendar-specific\n value; see subclass documentation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"YEAR","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n year. This is a calendar-specific value; see subclass documentation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"MONTH","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n month. This is a calendar-specific value. The first month of\n the year in the Gregorian and Julian calendars is\n \u003ccode\u003eJANUARY\u003c/code\u003e which is 0; the last depends on the number\n of months in a year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"WEEK_OF_YEAR","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n week number within the current year.  The first week of the year, as\n defined by \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e and\n \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e, has value 1.  Subclasses define\n the value of \u003ccode\u003eWEEK_OF_YEAR\u003c/code\u003e for days before the first week of\n the year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"WEEK_OF_MONTH","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n week number within the current month.  The first week of the month, as\n defined by \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e and\n \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e, has value 1.  Subclasses define\n the value of \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e for days before the first week of\n the month.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"DATE","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n day of the month. This is a synonym for \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e.\n The first day of the month has value 1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"DAY_OF_MONTH","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n day of the month. This is a synonym for \u003ccode\u003eDATE\u003c/code\u003e.\n The first day of the month has value 1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"DAY_OF_YEAR","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the day\n number within the current year.  The first day of the year has value 1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"DAY_OF_WEEK","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the day\n of the week.  This field takes values \u003ccode\u003eSUNDAY\u003c/code\u003e,\n \u003ccode\u003eMONDAY\u003c/code\u003e, \u003ccode\u003eTUESDAY\u003c/code\u003e, \u003ccode\u003eWEDNESDAY\u003c/code\u003e,\n \u003ccode\u003eTHURSDAY\u003c/code\u003e, \u003ccode\u003eFRIDAY\u003c/code\u003e, and \u003ccode\u003eSATURDAY\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"DAY_OF_WEEK_IN_MONTH","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n ordinal number of the day of the week within the current month. Together\n with the \u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e field, this uniquely specifies a day\n within a month.  Unlike \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e and\n \u003ccode\u003eWEEK_OF_YEAR\u003c/code\u003e, this field\u0027s value does \u003cem\u003enot\u003c/em\u003e depend on\n \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e or\n \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e.  \u003ccode\u003eDAY_OF_MONTH 1\u003c/code\u003e\n through \u003ccode\u003e7\u003c/code\u003e always correspond to \u003ccode\u003eDAY_OF_WEEK_IN_MONTH\n 1\u003c/code\u003e; \u003ccode\u003e8\u003c/code\u003e through \u003ccode\u003e14\u003c/code\u003e correspond to\n \u003ccode\u003eDAY_OF_WEEK_IN_MONTH 2\u003c/code\u003e, and so on.\n \u003ccode\u003eDAY_OF_WEEK_IN_MONTH 0\u003c/code\u003e indicates the week before\n \u003ccode\u003eDAY_OF_WEEK_IN_MONTH 1\u003c/code\u003e.  Negative values count back from the\n end of the month, so the last Sunday of a month is specified as\n \u003ccode\u003eDAY_OF_WEEK \u003d SUNDAY, DAY_OF_WEEK_IN_MONTH \u003d -1\u003c/code\u003e.  Because\n negative values count backward they will usually be aligned differently\n within the month than positive values.  For example, if a month has 31\n days, \u003ccode\u003eDAY_OF_WEEK_IN_MONTH -1\u003c/code\u003e will overlap\n \u003ccode\u003eDAY_OF_WEEK_IN_MONTH 5\u003c/code\u003e and the end of \u003ccode\u003e4\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"AM_PM","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating\n whether the \u003ccode\u003eHOUR\u003c/code\u003e is before or after noon.\n E.g., at 10:04:15.250 PM the \u003ccode\u003eAM_PM\u003c/code\u003e is \u003ccode\u003ePM\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"},{"name":"HOUR","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n hour of the morning or afternoon. \u003ccode\u003eHOUR\u003c/code\u003e is used for the\n 12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.\n E.g., at 10:04:15.250 PM the \u003ccode\u003eHOUR\u003c/code\u003e is 10.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"},{"name":"HOUR_OF_DAY","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n hour of the day. \u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e is used for the 24-hour clock.\n E.g., at 10:04:15.250 PM the \u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e is 22.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"11"},{"name":"MINUTE","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n minute within the hour.\n E.g., at 10:04:15.250 PM the \u003ccode\u003eMINUTE\u003c/code\u003e is 4.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"12"},{"name":"SECOND","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n second within the minute.\n E.g., at 10:04:15.250 PM the \u003ccode\u003eSECOND\u003c/code\u003e is 15.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"13"},{"name":"MILLISECOND","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n millisecond within the second.\n E.g., at 10:04:15.250 PM the \u003ccode\u003eMILLISECOND\u003c/code\u003e is 250.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"14"},{"name":"ZONE_OFFSET","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e\n indicating the raw offset from GMT in milliseconds.\n \u003cp\u003e\n This field reflects the correct GMT offset value of the time\n zone of this \u003ccode\u003eCalendar\u003c/code\u003e if the\n \u003ccode\u003eTimeZone\u003c/code\u003e implementation subclass supports\n historical GMT offset changes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"15"},{"name":"DST_OFFSET","comment":"Field number for \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e indicating the\n daylight saving offset in milliseconds.\n \u003cp\u003e\n This field reflects the correct daylight saving offset value of\n the time zone of this \u003ccode\u003eCalendar\u003c/code\u003e if the\n \u003ccode\u003eTimeZone\u003c/code\u003e implementation subclass supports\n historical Daylight Saving Time schedule changes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"FIELD_COUNT","comment":"The number of distinct fields recognized by \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e.\n Field numbers range from \u003ccode\u003e0..FIELD_COUNT-1\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"17"},{"name":"SUNDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Sunday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"MONDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Monday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"TUESDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Tuesday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"WEDNESDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Wednesday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"THURSDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Thursday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"FRIDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Friday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"SATURDAY","comment":"Value of the {@link #DAY_OF_WEEK} field indicating\n Saturday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"JANUARY","comment":"Value of the {@link #MONTH} field indicating the\n first month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"FEBRUARY","comment":"Value of the {@link #MONTH} field indicating the\n second month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"MARCH","comment":"Value of the {@link #MONTH} field indicating the\n third month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"APRIL","comment":"Value of the {@link #MONTH} field indicating the\n fourth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"MAY","comment":"Value of the {@link #MONTH} field indicating the\n fifth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"JUNE","comment":"Value of the {@link #MONTH} field indicating the\n sixth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"JULY","comment":"Value of the {@link #MONTH} field indicating the\n seventh month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"AUGUST","comment":"Value of the {@link #MONTH} field indicating the\n eighth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"SEPTEMBER","comment":"Value of the {@link #MONTH} field indicating the\n ninth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"OCTOBER","comment":"Value of the {@link #MONTH} field indicating the\n tenth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"},{"name":"NOVEMBER","comment":"Value of the {@link #MONTH} field indicating the\n eleventh month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"},{"name":"DECEMBER","comment":"Value of the {@link #MONTH} field indicating the\n twelfth month of the year in the Gregorian and Julian calendars.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"11"},{"name":"UNDECIMBER","comment":"Value of the {@link #MONTH} field indicating the\n thirteenth month of the year. Although \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n does not use this value, lunar calendars do.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"12"},{"name":"AM","comment":"Value of the {@link #AM_PM} field indicating the\n period of the day from midnight to just before noon.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"PM","comment":"Value of the {@link #AM_PM} field indicating the\n period of the day from noon to just before midnight.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"ALL_STYLES","comment":"A style specifier for {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating names in all styles, such as\n \"January\" and \"Jan\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"SHORT","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} equivalent to {@link #SHORT_FORMAT}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"LONG","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} equivalent to {@link #LONG_FORMAT}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"NARROW_FORMAT","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a narrow name used for format. Narrow names\n are typically single character strings, such as \"M\" for Monday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"NARROW_STANDALONE","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a narrow name independently. Narrow names\n are typically single character strings, such as \"M\" for Monday.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32772"},{"name":"SHORT_FORMAT","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a short name used for format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"LONG_FORMAT","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a long name used for format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"SHORT_STANDALONE","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a short name used independently,\n such as a month abbreviation as calendar headers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32769"},{"name":"LONG_STANDALONE","comment":"A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a long name used independently,\n such as a month name as calendar headers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32770"}],"methods":[{"name":"getInstance","comment":"Gets a calendar using the default time zone and locale. The\n \u003ccode\u003eCalendar\u003c/code\u003e returned is based on the current time\n in the default time zone with the default\n {@link Locale.Category#FORMAT FORMAT} locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Gets a calendar using the specified time zone and default locale.\n The \u003ccode\u003eCalendar\u003c/code\u003e returned is based on the current time\n in the given time zone with the default\n {@link Locale.Category#FORMAT FORMAT} locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Gets a calendar using the default time zone and specified locale.\n The \u003ccode\u003eCalendar\u003c/code\u003e returned is based on the current time\n in the default time zone with the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Gets a calendar with the specified time zone and locale.\n The \u003ccode\u003eCalendar\u003c/code\u003e returned is based on the current time\n in the given time zone with the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone, java.util.Locale)","flatSignature":"(TimeZone, Locale)","returnType":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}},{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAvailableLocales","comment":"Returns an array of all locales for which the \u003ccode\u003egetInstance\u003c/code\u003e\n methods of this class can return localized instances.\n The array returned must contain at least a \u003ccode\u003eLocale\u003c/code\u003e\n instance equal to {@link java.util.Locale#US Locale.US}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getTime","comment":"Returns a \u003ccode\u003eDate\u003c/code\u003e object representing this\n \u003ccode\u003eCalendar\u003c/code\u003e\u0027s time value (millisecond offset from the \u003ca\n href\u003d\"#Epoch\"\u003eEpoch\u003c/a\u003e\").","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTime","comment":"Sets this Calendar\u0027s time with the given \u003ccode\u003eDate\u003c/code\u003e.\n \u003cp\u003e\n Note: Calling \u003ccode\u003esetTime()\u003c/code\u003e with\n \u003ccode\u003eDate(Long.MAX_VALUE)\u003c/code\u003e or \u003ccode\u003eDate(Long.MIN_VALUE)\u003c/code\u003e\n may yield incorrect field values from \u003ccode\u003eget()\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeInMillis","comment":"Returns this Calendar\u0027s time value in milliseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTimeInMillis","comment":"Sets this Calendar\u0027s current time from the given long value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the value of the given calendar field. In lenient mode,\n all calendar fields are normalized. In non-lenient mode, all\n calendar fields are validated and this method throws an\n exception if any calendar fields have out-of-range values. The\n normalization and validation are handled by the\n {@link #complete()} method, which process is calendar\n system dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the given calendar field to the given value. The value is not\n interpreted by this method regardless of the leniency mode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the values for the calendar fields \u003ccode\u003eYEAR\u003c/code\u003e,\n \u003ccode\u003eMONTH\u003c/code\u003e, and \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e.\n Previous values of other calendar fields are retained.  If this is not desired,\n call {@link #clear()} first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the values for the calendar fields \u003ccode\u003eYEAR\u003c/code\u003e,\n \u003ccode\u003eMONTH\u003c/code\u003e, \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e,\n \u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e, and \u003ccode\u003eMINUTE\u003c/code\u003e.\n Previous values of other fields are retained.  If this is not desired,\n call {@link #clear()} first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int)","flatSignature":"(int, int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hourOfDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the values for the fields \u003ccode\u003eYEAR\u003c/code\u003e, \u003ccode\u003eMONTH\u003c/code\u003e,\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e, \u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e, \u003ccode\u003eMINUTE\u003c/code\u003e, and\n \u003ccode\u003eSECOND\u003c/code\u003e.\n Previous values of other fields are retained.  If this is not desired,\n call {@link #clear()} first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hourOfDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Sets all the calendar field values and the time value\n (millisecond offset from the \u003ca href\u003d\"#Epoch\"\u003eEpoch\u003c/a\u003e) of\n this \u003ccode\u003eCalendar\u003c/code\u003e undefined. This means that {@link\n #isSet(int) isSet()} will return \u003ccode\u003efalse\u003c/code\u003e for all the\n calendar fields, and the date and time calculations will treat\n the fields as if they had never been set. A\n \u003ccode\u003eCalendar\u003c/code\u003e implementation class may use its specific\n default field values for date/time calculations. For example,\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e uses 1970 if the\n \u003ccode\u003eYEAR\u003c/code\u003e field value is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clear","comment":"Sets the given calendar field value and the time value\n (millisecond offset from the \u003ca href\u003d\"#Epoch\"\u003eEpoch\u003c/a\u003e) of\n this \u003ccode\u003eCalendar\u003c/code\u003e undefined. This means that {@link\n #isSet(int) isSet(field)} will return \u003ccode\u003efalse\u003c/code\u003e, and\n the date and time calculations will treat the field as if it\n had never been set. A \u003ccode\u003eCalendar\u003c/code\u003e implementation\n class may use the field\u0027s specific default value for date and\n time calculations.\n\n \u003cp\u003eThe {@link #HOUR_OF_DAY}, {@link #HOUR} and {@link #AM_PM}\n fields are handled independently and the \u003ca\n href\u003d\"#time_resolution\"\u003ethe resolution rule for the time of\n day\u003c/a\u003e is applied. Clearing one of the fields doesn\u0027t reset\n the hour of day value of this \u003ccode\u003eCalendar\u003c/code\u003e. Use {@link\n #set(int,int) set(Calendar.HOUR_OF_DAY, 0)} to reset the hour\n value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSet","comment":"Determines if the given calendar field has a value set,\n including cases that the value has been set by internal fields\n calculations triggered by a \u003ccode\u003eget\u003c/code\u003e method call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns the string representation of the calendar\n \u003ccode\u003efield\u003c/code\u003e value in the given \u003ccode\u003estyle\u003c/code\u003e and\n \u003ccode\u003elocale\u003c/code\u003e.  If no string representation is\n applicable, \u003ccode\u003enull\u003c/code\u003e is returned. This method calls\n {@link Calendar#get(int) get(field)} to get the calendar\n \u003ccode\u003efield\u003c/code\u003e value if the string representation is\n applicable to the given calendar \u003ccode\u003efield\u003c/code\u003e.\n\n \u003cp\u003eFor example, if this \u003ccode\u003eCalendar\u003c/code\u003e is a\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e and its date is 2005-01-01, then\n the string representation of the {@link #MONTH} field would be\n \"January\" in the long style in an English locale or \"Jan\" in\n the short style. However, no string representation would be\n available for the {@link #DAY_OF_MONTH} field, and this method\n would return \u003ccode\u003enull\u003c/code\u003e.\n\n \u003cp\u003eThe default implementation supports the calendar fields for\n which a {@link DateFormatSymbols} has names in the given\n \u003ccode\u003elocale\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, java.util.Locale)","flatSignature":"(int, int, Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayNames","comment":"Returns a {@code Map} containing all names of the calendar\n {@code field} in the given {@code style} and\n {@code locale} and their corresponding field values. For\n example, if this {@code Calendar} is a {@link\n GregorianCalendar}, the returned map would contain \"Jan\" to\n {@link #JANUARY}, \"Feb\" to {@link #FEBRUARY}, and so on, in the\n {@linkplain #SHORT short} style in an English locale.\n\n \u003cp\u003eNarrow names may not be unique due to use of single characters,\n such as \"S\" for Sunday and Saturday. In that case narrow names are not\n included in the returned {@code Map}.\n\n \u003cp\u003eThe values of other calendar fields may be taken into\n account to determine a set of display names. For example, if\n this {@code Calendar} is a lunisolar calendar system and\n the year value given by the {@link #YEAR} field has a leap\n month, this method would return month names containing the leap\n month name, and month names are mapped to their values specific\n for the year.\n\n \u003cp\u003eThe default implementation supports display names contained in\n a {@link DateFormatSymbols}. For example, if {@code field}\n is {@link #MONTH} and {@code style} is {@link\n #ALL_STYLES}, this method returns a {@code Map} containing\n all strings returned by {@link DateFormatSymbols#getShortMonths()}\n and {@link DateFormatSymbols#getMonths()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, java.util.Locale)","flatSignature":"(int, int, Locale)","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAvailableCalendarTypes","comment":"Returns an unmodifiable {@code Set} containing all calendar types\n supported by {@code Calendar} in the runtime environment. The available\n calendar types can be used for the \u003ca\n href\u003d\"Locale.html#def_locale_extension\"\u003eUnicode locale extensions\u003c/a\u003e.\n The {@code Set} returned contains at least {@code \"gregory\"}. The\n calendar types don\u0027t include aliases, such as {@code \"gregorian\"} for\n {@code \"gregory\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getCalendarType","comment":"Returns the calendar type of this {@code Calendar}. Calendar types are\n defined by the \u003cem\u003eUnicode Locale Data Markup Language (LDML)\u003c/em\u003e\n specification.\n\n \u003cp\u003eThe default implementation of this method returns the class name of\n this {@code Calendar} instance. Any subclasses that implement\n LDML-defined calendar systems should override this method to return\n appropriate calendar types.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this \u003ccode\u003eCalendar\u003c/code\u003e to the specified\n \u003ccode\u003eObject\u003c/code\u003e.  The result is \u003ccode\u003etrue\u003c/code\u003e if and only if\n the argument is a \u003ccode\u003eCalendar\u003c/code\u003e object of the same calendar\n system that represents the same time value (millisecond offset from the\n \u003ca href\u003d\"#Epoch\"\u003eEpoch\u003c/a\u003e) under the same\n \u003ccode\u003eCalendar\u003c/code\u003e parameters as this object.\n\n \u003cp\u003eThe \u003ccode\u003eCalendar\u003c/code\u003e parameters are the values represented\n by the \u003ccode\u003eisLenient\u003c/code\u003e, \u003ccode\u003egetFirstDayOfWeek\u003c/code\u003e,\n \u003ccode\u003egetMinimalDaysInFirstWeek\u003c/code\u003e and \u003ccode\u003egetTimeZone\u003c/code\u003e\n methods. If there is any difference in those parameters\n between the two \u003ccode\u003eCalendar\u003c/code\u003es, this method returns\n \u003ccode\u003efalse\u003c/code\u003e.\n\n \u003cp\u003eUse the {@link #compareTo(Calendar) compareTo} method to\n compare only the time values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this calendar.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"before","comment":"Returns whether this \u003ccode\u003eCalendar\u003c/code\u003e represents a time\n before the time represented by the specified\n \u003ccode\u003eObject\u003c/code\u003e. This method is equivalent to:\n \u003cpre\u003e{@code\n         compareTo(when) \u003c 0\n }\u003c/pre\u003e\n if and only if \u003ccode\u003ewhen\u003c/code\u003e is a \u003ccode\u003eCalendar\u003c/code\u003e\n instance. Otherwise, the method returns \u003ccode\u003efalse\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"when","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"after","comment":"Returns whether this \u003ccode\u003eCalendar\u003c/code\u003e represents a time\n after the time represented by the specified\n \u003ccode\u003eObject\u003c/code\u003e. This method is equivalent to:\n \u003cpre\u003e{@code\n         compareTo(when) \u003e 0\n }\u003c/pre\u003e\n if and only if \u003ccode\u003ewhen\u003c/code\u003e is a \u003ccode\u003eCalendar\u003c/code\u003e\n instance. Otherwise, the method returns \u003ccode\u003efalse\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"when","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares the time values (millisecond offsets from the \u003ca\n href\u003d\"#Epoch\"\u003eEpoch\u003c/a\u003e) represented by two\n \u003ccode\u003eCalendar\u003c/code\u003e objects.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Calendar)","flatSignature":"(Calendar)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherCalendar","type":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"add","comment":"Adds or subtracts the specified amount of time to the given calendar field,\n based on the calendar\u0027s rules. For example, to subtract 5 days from\n the current time of the calendar, you can achieve it by calling:\n \u003cp\u003e\u003ccode\u003eadd(Calendar.DAY_OF_MONTH, -5)\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"amount","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"roll","comment":"Adds or subtracts (up/down) a single unit of time on the given time\n field without changing larger fields. For example, to roll the current\n date up by one day, you can achieve it by calling:\n \u003cp\u003eroll(Calendar.DATE, true).\n When rolling on the year or Calendar.YEAR field, it will roll the year\n value in the range between 1 and the value returned by calling\n \u003ccode\u003egetMaximum(Calendar.YEAR)\u003c/code\u003e.\n When rolling on the month or Calendar.MONTH field, other fields like\n date might conflict and, need to be changed. For instance,\n rolling the month on the date 01/31/96 will result in 02/29/96.\n When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will\n roll the hour value in the range between 0 and 23, which is zero-based.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, boolean)","flatSignature":"(int, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"up","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"roll","comment":"Adds the specified (signed) amount to the specified calendar field\n without changing larger fields.  A negative amount means to roll\n down.\n\n \u003cp\u003eNOTE:  This default implementation on \u003ccode\u003eCalendar\u003c/code\u003e just repeatedly calls the\n version of {@link #roll(int,boolean) roll()} that rolls by one unit.  This may not\n always do the right thing.  For example, if the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field is 31,\n rolling through February will leave it set to 28.  The \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n version of this function takes care of this problem.  Other subclasses\n should also provide overrides of this function that do the right thing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"amount","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setTimeZone","comment":"Sets the time zone with the given time zone value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeZone","comment":"Gets the time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setLenient","comment":"Specifies whether or not date/time interpretation is to be lenient.  With\n lenient interpretation, a date such as \"February 942, 1996\" will be\n treated as being equivalent to the 941st day after February 1, 1996.\n With strict (non-lenient) interpretation, such dates will cause an exception to be\n thrown. The default is lenient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"lenient","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLenient","comment":"Tells whether date/time interpretation is to be lenient.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setFirstDayOfWeek","comment":"Sets what the first day of the week is; e.g., \u003ccode\u003eSUNDAY\u003c/code\u003e in the U.S.,\n \u003ccode\u003eMONDAY\u003c/code\u003e in France.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFirstDayOfWeek","comment":"Gets what the first day of the week is; e.g., \u003ccode\u003eSUNDAY\u003c/code\u003e in the U.S.,\n \u003ccode\u003eMONDAY\u003c/code\u003e in France.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMinimalDaysInFirstWeek","comment":"Sets what the minimal days required in the first week of the year are;\n For example, if the first week is defined as one that contains the first\n day of the first month of a year, call this method with value 1. If it\n must be a full week, use value 7.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMinimalDaysInFirstWeek","comment":"Gets what the minimal days required in the first week of the year are;\n e.g., if the first week is defined as one that contains the first day\n of the first month of a year, this method returns 1. If\n the minimal days required must be a full week, this method\n returns 7.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isWeekDateSupported","comment":"Returns whether this {@code Calendar} supports week dates.\n\n \u003cp\u003eThe default implementation of this method returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWeekYear","comment":"Returns the week year represented by this {@code Calendar}. The\n week year is in sync with the week cycle. The {@linkplain\n #getFirstDayOfWeek() first day of the first week} is the first\n day of the week year.\n\n \u003cp\u003eThe default implementation of this method throws an\n {@link UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setWeekDate","comment":"Sets the date of this {@code Calendar} with the the given date\n specifiers - week year, week of year, and day of week.\n\n \u003cp\u003eUnlike the {@code set} method, all of the calendar fields\n and {@code time} values are calculated upon return.\n\n \u003cp\u003eIf {@code weekOfYear} is out of the valid week-of-year range\n in {@code weekYear}, the {@code weekYear} and {@code\n weekOfYear} values are adjusted in lenient mode, or an {@code\n IllegalArgumentException} is thrown in non-lenient mode.\n\n \u003cp\u003eThe default implementation of this method throws an\n {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weekYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"weekOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWeeksInWeekYear","comment":"Returns the number of weeks in the week year represented by this\n {@code Calendar}.\n\n \u003cp\u003eThe default implementation of this method throws an\n {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMinimum","comment":"Returns the minimum value for the given calendar field of this\n \u003ccode\u003eCalendar\u003c/code\u003e instance. The minimum value is defined as\n the smallest value returned by the {@link #get(int) get} method\n for any possible time value.  The minimum value depends on\n calendar system specific parameters of the instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMaximum","comment":"Returns the maximum value for the given calendar field of this\n \u003ccode\u003eCalendar\u003c/code\u003e instance. The maximum value is defined as\n the largest value returned by the {@link #get(int) get} method\n for any possible time value. The maximum value depends on\n calendar system specific parameters of the instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getGreatestMinimum","comment":"Returns the highest minimum value for the given calendar field\n of this \u003ccode\u003eCalendar\u003c/code\u003e instance. The highest minimum\n value is defined as the largest value returned by {@link\n #getActualMinimum(int)} for any possible time value. The\n greatest minimum value depends on calendar system specific\n parameters of the instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLeastMaximum","comment":"Returns the lowest maximum value for the given calendar field\n of this \u003ccode\u003eCalendar\u003c/code\u003e instance. The lowest maximum\n value is defined as the smallest value returned by {@link\n #getActualMaximum(int)} for any possible time value. The least\n maximum value depends on calendar system specific parameters of\n the instance. For example, a \u003ccode\u003eCalendar\u003c/code\u003e for the\n Gregorian calendar system returns 28 for the\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field, because the 28th is the last\n day of the shortest month of this calendar, February in a\n common year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getActualMinimum","comment":"Returns the minimum value that the specified calendar field\n could have, given the time value of this \u003ccode\u003eCalendar\u003c/code\u003e.\n\n \u003cp\u003eThe default implementation of this method uses an iterative\n algorithm to determine the actual minimum value for the\n calendar field. Subclasses should, if possible, override this\n with a more efficient implementation - in many cases, they can\n simply return \u003ccode\u003egetMinimum()\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getActualMaximum","comment":"Returns the maximum value that the specified calendar field\n could have, given the time value of this\n \u003ccode\u003eCalendar\u003c/code\u003e. For example, the actual maximum value of\n the \u003ccode\u003eMONTH\u003c/code\u003e field is 12 in some years, and 13 in\n other years in the Hebrew calendar system.\n\n \u003cp\u003eThe default implementation of this method uses an iterative\n algorithm to determine the actual maximum value for the\n calendar field. Subclasses should, if possible, override this\n with a more efficient implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Creates and returns a copy of this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Return a string representation of this calendar. This method\n is intended to be used only for debugging purposes, and the\n format of the returned string may vary between implementations.\n The returned string may be empty but may not be \u003ccode\u003enull\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toInstant","comment":"Converts this object to an {@link Instant}.\n \u003cp\u003e\n The conversion creates an {@code Instant} that represents the\n same point on the time-line as this {@code Calendar}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.GregorianCalendar"],"enumConstants":[]}