{"name":"WeakHashMap","comment":"Hash table based implementation of the \u003ctt\u003eMap\u003c/tt\u003e interface, with\n \u003cem\u003eweak keys\u003c/em\u003e.\n An entry in a \u003ctt\u003eWeakHashMap\u003c/tt\u003e will automatically be removed when\n its key is no longer in ordinary use.  More precisely, the presence of a\n mapping for a given key will not prevent the key from being discarded by the\n garbage collector, that is, made finalizable, finalized, and then reclaimed.\n When a key has been discarded its entry is effectively removed from the map,\n so this class behaves somewhat differently from other \u003ctt\u003eMap\u003c/tt\u003e\n implementations.\n\n \u003cp\u003e Both null values and the null key are supported. This class has\n performance characteristics similar to those of the \u003ctt\u003eHashMap\u003c/tt\u003e\n class, and has the same efficiency parameters of \u003cem\u003einitial capacity\u003c/em\u003e\n and \u003cem\u003eload factor\u003c/em\u003e.\n\n \u003cp\u003e Like most collection classes, this class is not synchronized.\n A synchronized \u003ctt\u003eWeakHashMap\u003c/tt\u003e may be constructed using the\n {@link Collections#synchronizedMap Collections.synchronizedMap}\n method.\n\n \u003cp\u003e This class is intended primarily for use with key objects whose\n \u003ctt\u003eequals\u003c/tt\u003e methods test for object identity using the\n \u003ctt\u003e\u003d\u003d\u003c/tt\u003e operator.  Once such a key is discarded it can never be\n recreated, so it is impossible to do a lookup of that key in a\n \u003ctt\u003eWeakHashMap\u003c/tt\u003e at some later time and be surprised that its entry\n has been removed.  This class will work perfectly well with key objects\n whose \u003ctt\u003eequals\u003c/tt\u003e methods are not based upon object identity, such\n as \u003ctt\u003eString\u003c/tt\u003e instances.  With such recreatable key objects,\n however, the automatic removal of \u003ctt\u003eWeakHashMap\u003c/tt\u003e entries whose\n keys have been discarded may prove to be confusing.\n\n \u003cp\u003e The behavior of the \u003ctt\u003eWeakHashMap\u003c/tt\u003e class depends in part upon\n the actions of the garbage collector, so several familiar (though not\n required) \u003ctt\u003eMap\u003c/tt\u003e invariants do not hold for this class.  Because\n the garbage collector may discard keys at any time, a\n \u003ctt\u003eWeakHashMap\u003c/tt\u003e may behave as though an unknown thread is silently\n removing entries.  In particular, even if you synchronize on a\n \u003ctt\u003eWeakHashMap\u003c/tt\u003e instance and invoke none of its mutator methods, it\n is possible for the \u003ctt\u003esize\u003c/tt\u003e method to return smaller values over\n time, for the \u003ctt\u003eisEmpty\u003c/tt\u003e method to return \u003ctt\u003efalse\u003c/tt\u003e and\n then \u003ctt\u003etrue\u003c/tt\u003e, for the \u003ctt\u003econtainsKey\u003c/tt\u003e method to return\n \u003ctt\u003etrue\u003c/tt\u003e and later \u003ctt\u003efalse\u003c/tt\u003e for a given key, for the\n \u003ctt\u003eget\u003c/tt\u003e method to return a value for a given key but later return\n \u003ctt\u003enull\u003c/tt\u003e, for the \u003ctt\u003eput\u003c/tt\u003e method to return\n \u003ctt\u003enull\u003c/tt\u003e and the \u003ctt\u003eremove\u003c/tt\u003e method to return\n \u003ctt\u003efalse\u003c/tt\u003e for a key that previously appeared to be in the map, and\n for successive examinations of the key set, the value collection, and\n the entry set to yield successively smaller numbers of elements.\n\n \u003cp\u003e Each key object in a \u003ctt\u003eWeakHashMap\u003c/tt\u003e is stored indirectly as\n the referent of a weak reference.  Therefore a key will automatically be\n removed only after the weak references to it, both inside and outside of the\n map, have been cleared by the garbage collector.\n\n \u003cp\u003e \u003cstrong\u003eImplementation note:\u003c/strong\u003e The value objects in a\n \u003ctt\u003eWeakHashMap\u003c/tt\u003e are held by ordinary strong references.  Thus care\n should be taken to ensure that value objects do not strongly refer to their\n own keys, either directly or indirectly, since that will prevent the keys\n from being discarded.  Note that a value object may refer indirectly to its\n key via the \u003ctt\u003eWeakHashMap\u003c/tt\u003e itself; that is, a value object may\n strongly refer to some other key object whose associated value object, in\n turn, strongly refers to the key of the first value object.  If the values\n in the map do not rely on the map holding strong references to them, one way\n to deal with this is to wrap values themselves within\n \u003ctt\u003eWeakReferences\u003c/tt\u003e before\n inserting, as in: \u003ctt\u003em.put(key, new WeakReference(value))\u003c/tt\u003e,\n and then unwrapping upon each \u003ctt\u003eget\u003c/tt\u003e.\n\n \u003cp\u003eThe iterators returned by the \u003ctt\u003eiterator\u003c/tt\u003e method of the collections\n returned by all of this class\u0027s \"collection view methods\" are\n \u003ci\u003efail-fast\u003c/i\u003e: if the map is structurally modified at any time after the\n iterator is created, in any way except through the iterator\u0027s own\n \u003ctt\u003eremove\u003c/tt\u003e method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n \u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw \u003ctt\u003eConcurrentModificationException\u003c/tt\u003e on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  \u003ci\u003ethe fail-fast behavior of iterators\n should be used only to detect bugs.\u003c/i\u003e\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"WeakHashMap","qualifiedName":"java.util.WeakHashMap","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractMap","interfaces":["java.util.Map"],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"WeakHashMap","comment":"Constructs a new, empty \u003ctt\u003eWeakHashMap\u003c/tt\u003e with the given initial\n capacity and the given load factor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float)","flatSignature":"(int, float)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"WeakHashMap","comment":"Constructs a new, empty \u003ctt\u003eWeakHashMap\u003c/tt\u003e with the given initial\n capacity and the default load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"WeakHashMap","comment":"Constructs a new, empty \u003ctt\u003eWeakHashMap\u003c/tt\u003e with the default initial\n capacity (16) and load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"WeakHashMap","comment":"Constructs a new \u003ctt\u003eWeakHashMap\u003c/tt\u003e with the same mappings as the\n specified map.  The \u003ctt\u003eWeakHashMap\u003c/tt\u003e is created with the default\n load factor (0.75) and an initial capacity sufficient to hold the\n mappings in the specified map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"size","comment":"Returns the number of key-value mappings in this map.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this map contains no key-value mappings.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n \u003cp\u003eMore formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key\u003d\u003dnull ? k\u003d\u003dnull :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n \u003cp\u003eA return value of {@code null} does not \u003ci\u003enecessarily\u003c/i\u003e\n indicate that the map contains no mapping for the key; it\u0027s also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsKey","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this map contains a mapping for the\n specified key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for this key, the old\n value is replaced.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"putAll","comment":"Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for any\n of the keys currently in the specified map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the mapping for a key from this weak hash map if it is present.\n More formally, if this map contains a mapping from key \u003ctt\u003ek\u003c/tt\u003e to\n value \u003ctt\u003ev\u003c/tt\u003e such that \u003ccode\u003e(key\u003d\u003dnull ?  k\u003d\u003dnull :\n key.equals(k))\u003c/code\u003e, that mapping is removed.  (The map can contain\n at most one such mapping.)\n\n \u003cp\u003eReturns the value to which this map previously associated the key,\n or \u003ctt\u003enull\u003c/tt\u003e if the map contained no mapping for the key.  A\n return value of \u003ctt\u003enull\u003c/tt\u003e does not \u003ci\u003enecessarily\u003c/i\u003e indicate\n that the map contained no mapping for the key; it\u0027s also possible\n that the map explicitly mapped the key to \u003ctt\u003enull\u003c/tt\u003e.\n\n \u003cp\u003eThe map will not contain a mapping for the specified key once the\n call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the mappings from this map.\n The map will be empty after this call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"containsValue","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this map maps one or more keys to the\n specified value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n \u003ctt\u003eIterator.remove\u003c/tt\u003e, \u003ctt\u003eSet.remove\u003c/tt\u003e,\n \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e, and \u003ctt\u003eclear\u003c/tt\u003e\n operations.  It does not support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e\n operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"values","comment":"Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e,\n \u003ctt\u003eCollection.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e,\n \u003ctt\u003eretainAll\u003c/tt\u003e and \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not\n support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"entrySet","comment":"Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation, or through the\n \u003ctt\u003esetValue\u003c/tt\u003e operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e,\n \u003ctt\u003eSet.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e and\n \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not support the\n \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"function","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}