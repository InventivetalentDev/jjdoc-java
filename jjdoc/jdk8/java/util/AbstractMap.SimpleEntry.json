{"name":"AbstractMap.SimpleEntry","comment":"An Entry maintaining a key and a value.  The value may be\n changed using the \u003ctt\u003esetValue\u003c/tt\u003e method.  This class\n facilitates the process of building custom map\n implementations. For example, it may be convenient to return\n arrays of \u003ctt\u003eSimpleEntry\u003c/tt\u003e instances in method\n \u003ctt\u003eMap.entrySet().toArray\u003c/tt\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SimpleEntry","qualifiedName":"java.util.AbstractMap.SimpleEntry","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.util.Map.Entry","java.io.Serializable"],"isAbstract":false,"isStatic":true,"since":"1.6","innerClasses":[],"isInnerClass":true,"constructors":[{"name":"SimpleEntry","comment":"Creates an entry representing a mapping from the specified\n key to the specified value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"SimpleEntry","comment":"Creates an entry representing the same mapping as the\n specified entry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map.Entry\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map.Entry\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"entry","type":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getKey","comment":"Returns the key corresponding to this entry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getValue","comment":"Returns the value corresponding to this entry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setValue","comment":"Replaces the value corresponding to this entry with the specified\n value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(V)","flatSignature":"(V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this entry for equality.\n Returns {@code true} if the given object is also a map entry and\n the two entries represent the same mapping.  More formally, two\n entries {@code e1} and {@code e2} represent the same mapping\n if\u003cpre\u003e\n   (e1.getKey()\u003d\u003dnull ?\n    e2.getKey()\u003d\u003dnull :\n    e1.getKey().equals(e2.getKey()))\n   \u0026amp;\u0026amp;\n   (e1.getValue()\u003d\u003dnull ?\n    e2.getValue()\u003d\u003dnull :\n    e1.getValue().equals(e2.getValue()))\u003c/pre\u003e\n This ensures that the {@code equals} method works properly across\n different implementations of the {@code Map.Entry} interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this map entry.  The hash code\n of a map entry {@code e} is defined to be: \u003cpre\u003e\n   (e.getKey()\u003d\u003dnull   ? 0 : e.getKey().hashCode()) ^\n   (e.getValue()\u003d\u003dnull ? 0 : e.getValue().hashCode())\u003c/pre\u003e\n This ensures that {@code e1.equals(e2)} implies that\n {@code e1.hashCode()\u003d\u003de2.hashCode()} for any two Entries\n {@code e1} and {@code e2}, as required by the general\n contract of {@link Object#hashCode}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a String representation of this map entry.  This\n implementation returns the string representation of this\n entry\u0027s key followed by the equals character (\"\u003ctt\u003e\u003d\u003c/tt\u003e\")\n followed by the string representation of this entry\u0027s value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}