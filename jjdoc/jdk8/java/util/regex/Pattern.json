{"name":"Pattern","comment":"A compiled representation of a regular expression.\n\n \u003cp\u003e A regular expression, specified as a string, must first be compiled into\n an instance of this class.  The resulting pattern can then be used to create\n a {@link Matcher} object that can match arbitrary {@linkplain\n java.lang.CharSequence character sequences} against the regular\n expression.  All of the state involved in performing a match resides in the\n matcher, so many matchers can share the same pattern.\n\n \u003cp\u003e A typical invocation sequence is thus\n\n \u003cblockquote\u003e\u003cpre\u003e\n Pattern p \u003d Pattern.{@link #compile compile}(\"a*b\");\n Matcher m \u003d p.{@link #matcher matcher}(\"aaaaab\");\n boolean b \u003d m.{@link Matcher#matches matches}();\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e A {@link #matches matches} method is defined by this class as a\n convenience for when a regular expression is used just once.  This method\n compiles an expression and matches an input sequence against it in a single\n invocation.  The statement\n\n \u003cblockquote\u003e\u003cpre\u003e\n boolean b \u003d Pattern.matches(\"a*b\", \"aaaaab\");\u003c/pre\u003e\u003c/blockquote\u003e\n\n is equivalent to the three statements above, though for repeated matches it\n is less efficient since it does not allow the compiled pattern to be reused.\n\n \u003cp\u003e Instances of this class are immutable and are safe for use by multiple\n concurrent threads.  Instances of the {@link Matcher} class are not safe for\n such use.\n\n\n \u003ch3\u003e\u003ca name\u003d\"sum\"\u003eSummary of regular-expression constructs\u003c/a\u003e\u003c/h3\u003e\n\n \u003ctable border\u003d\"0\" cellpadding\u003d\"1\" cellspacing\u003d\"0\"\n  summary\u003d\"Regular expression constructs, and what they match\"\u003e\n\n \u003ctr align\u003d\"left\"\u003e\n \u003cth align\u003d\"left\" id\u003d\"construct\"\u003eConstruct\u003c/th\u003e\n \u003cth align\u003d\"left\" id\u003d\"matches\"\u003eMatches\u003c/th\u003e\n \u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"characters\"\u003eCharacters\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character \u003ci\u003ex\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\\\\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe backslash character\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\0\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character with octal value \u003ctt\u003e0\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\n         (0\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;7)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\0\u003c/tt\u003e\u003ci\u003enn\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character with octal value \u003ctt\u003e0\u003c/tt\u003e\u003ci\u003enn\u003c/i\u003e\n         (0\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;7)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\0\u003c/tt\u003e\u003ci\u003emnn\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character with octal value \u003ctt\u003e0\u003c/tt\u003e\u003ci\u003emnn\u003c/i\u003e\n         (0\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003em\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;3,\n         0\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ctt\u003e\u0026lt;\u003d\u003c/tt\u003e\u0026nbsp;7)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\x\u003c/tt\u003e\u003ci\u003ehh\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character with hexadecimal\u0026nbsp;value\u0026nbsp;\u003ctt\u003e0x\u003c/tt\u003e\u003ci\u003ehh\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\u0026#92;u\u003c/tt\u003e\u003ci\u003ehhhh\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character with hexadecimal\u0026nbsp;value\u0026nbsp;\u003ctt\u003e0x\u003c/tt\u003e\u003ci\u003ehhhh\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\u0026#92;x\u003c/tt\u003e\u003ci\u003e{h...h}\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe character with hexadecimal\u0026nbsp;value\u0026nbsp;\u003ctt\u003e0x\u003c/tt\u003e\u003ci\u003eh...h\u003c/i\u003e\n         ({@link java.lang.Character#MIN_CODE_POINT Character.MIN_CODE_POINT}\n         \u0026nbsp;\u0026lt;\u003d\u0026nbsp;\u003ctt\u003e0x\u003c/tt\u003e\u003ci\u003eh...h\u003c/i\u003e\u0026nbsp;\u0026lt;\u003d\u0026nbsp;\n          {@link java.lang.Character#MAX_CODE_POINT Character.MAX_CODE_POINT})\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"matches\"\u003e\u003ctt\u003e\\t\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe tab character (\u003ctt\u003e\u0027\u0026#92;u0009\u0027\u003c/tt\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\n\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe newline (line feed) character (\u003ctt\u003e\u0027\u0026#92;u000A\u0027\u003c/tt\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\r\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe carriage-return character (\u003ctt\u003e\u0027\u0026#92;u000D\u0027\u003c/tt\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\f\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe form-feed character (\u003ctt\u003e\u0027\u0026#92;u000C\u0027\u003c/tt\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\a\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe alert (bell) character (\u003ctt\u003e\u0027\u0026#92;u0007\u0027\u003c/tt\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\e\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe escape character (\u003ctt\u003e\u0027\u0026#92;u001B\u0027\u003c/tt\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct characters\"\u003e\u003ctt\u003e\\c\u003c/tt\u003e\u003ci\u003ex\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe control character corresponding to \u003ci\u003ex\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"classes\"\u003eCharacter classes\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [abc]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e{@code a}, {@code b}, or {@code c} (simple class)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [^abc]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAny character except {@code a}, {@code b}, or {@code c} (negation)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [a-zA-Z]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e{@code a} through {@code z}\n         or {@code A} through {@code Z}, inclusive (range)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [a-d[m-p]]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e{@code a} through {@code d},\n      or {@code m} through {@code p}: {@code [a-dm-p]} (union)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [a-z\u0026\u0026[def]]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e{@code d}, {@code e}, or {@code f} (intersection)\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [a-z\u0026\u0026[^bc]]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e{@code a} through {@code z},\n         except for {@code b} and {@code c}: {@code [ad-z]} (subtraction)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct classes\"\u003e{@code [a-z\u0026\u0026[^m-p]]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e{@code a} through {@code z},\n          and not {@code m} through {@code p}: {@code [a-lq-z]}(subtraction)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"predef\"\u003ePredefined character classes\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e.\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAny character (may or may not match \u003ca href\u003d\"#lt\"\u003eline terminators\u003c/a\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\d\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA digit: \u003ctt\u003e[0-9]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\D\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA non-digit: \u003ctt\u003e[^0-9]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\h\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA horizontal whitespace character:\n     \u003ctt\u003e[ \\t\\xA0\u0026#92;u1680\u0026#92;u180e\u0026#92;u2000-\u0026#92;u200a\u0026#92;u202f\u0026#92;u205f\u0026#92;u3000]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\H\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA non-horizontal whitespace character: \u003ctt\u003e[^\\h]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\s\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA whitespace character: \u003ctt\u003e[ \\t\\n\\x0B\\f\\r]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\S\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA non-whitespace character: \u003ctt\u003e[^\\s]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\v\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA vertical whitespace character: \u003ctt\u003e[\\n\\x0B\\f\\r\\x85\u0026#92;u2028\u0026#92;u2029]\u003c/tt\u003e\n     \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\V\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA non-vertical whitespace character: \u003ctt\u003e[^\\v]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\w\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA word character: \u003ctt\u003e[a-zA-Z_0-9]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct predef\"\u003e\u003ctt\u003e\\W\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA non-word character: \u003ctt\u003e[^\\w]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"posix\"\u003e\u003cb\u003ePOSIX character classes (US-ASCII only)\u003c/b\u003e\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Lower}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA lower-case alphabetic character: {@code [a-z]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Upper}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAn upper-case alphabetic character:{@code [A-Z]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{ASCII}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAll ASCII:{@code [\\x00-\\x7F]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Alpha}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAn alphabetic character:{@code [\\p{Lower}\\p{Upper}]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Digit}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA decimal digit: {@code [0-9]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Alnum}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAn alphanumeric character:{@code [\\p{Alpha}\\p{Digit}]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Punct}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003ePunctuation: One of {@code !\"#$%\u0026\u0027()*+,-./:;\u003c\u003d\u003e?@[\\]^_`{|}~}\u003c/td\u003e\u003c/tr\u003e\n     \u003c!-- {@code [\\!\"#\\$%\u0026\u0027\\(\\)\\*\\+,\\-\\./:;\\\u003c\u003d\\\u003e\\?@\\[\\\\\\]\\^_`\\{\\|\\}~]}\n          {@code [\\X21-\\X2F\\X31-\\X40\\X5B-\\X60\\X7B-\\X7E]} --\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Graph}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA visible character: {@code [\\p{Alnum}\\p{Punct}]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Print}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA printable character: {@code [\\p{Graph}\\x20]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Blank}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA space or a tab: {@code [ \\t]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Cntrl}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA control character: {@code [\\x00-\\x1F\\x7F]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{XDigit}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA hexadecimal digit: {@code [0-9a-fA-F]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct posix\"\u003e{@code \\p{Space}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA whitespace character: {@code [ \\t\\n\\x0B\\f\\r]}\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\"\u003ejava.lang.Character classes (simple \u003ca href\u003d\"#jcc\"\u003ejava character type\u003c/a\u003e)\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\\p{javaLowerCase}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eEquivalent to java.lang.Character.isLowerCase()\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\\p{javaUpperCase}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eEquivalent to java.lang.Character.isUpperCase()\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\\p{javaWhitespace}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eEquivalent to java.lang.Character.isWhitespace()\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e\u003ctt\u003e\\p{javaMirrored}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eEquivalent to java.lang.Character.isMirrored()\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"unicode\"\u003eClasses for Unicode scripts, blocks, categories and binary properties\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code \\p{IsLatin}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA Latin\u0026nbsp;script character (\u003ca href\u003d\"#usc\"\u003escript\u003c/a\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code \\p{InGreek}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA character in the Greek\u0026nbsp;block (\u003ca href\u003d\"#ubc\"\u003eblock\u003c/a\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code \\p{Lu}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAn uppercase letter (\u003ca href\u003d\"#ucc\"\u003ecategory\u003c/a\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code \\p{IsAlphabetic}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAn alphabetic character (\u003ca href\u003d\"#ubpc\"\u003ebinary property\u003c/a\u003e)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code \\p{Sc}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA currency symbol\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code \\P{InGreek}}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAny character except one in the Greek block (negation)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct unicode\"\u003e{@code [\\p{L}\u0026\u0026[^\\p{Lu}]]}\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAny letter except an uppercase letter (subtraction)\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"bounds\"\u003eBoundary matchers\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e^\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe beginning of a line\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e$\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe end of a line\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e\\b\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA word boundary\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e\\B\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eA non-word boundary\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e\\A\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe beginning of the input\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e\\G\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe end of the previous match\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e\\Z\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe end of the input but for the final\n         \u003ca href\u003d\"#lt\"\u003eterminator\u003c/a\u003e, if\u0026nbsp;any\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct bounds\"\u003e\u003ctt\u003e\\z\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eThe end of the input\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"lineending\"\u003eLinebreak matcher\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct lineending\"\u003e\u003ctt\u003e\\R\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eAny Unicode linebreak sequence, is equivalent to\n     \u003ctt\u003e\u0026#92;u000D\u0026#92;u000A|[\u0026#92;u000A\u0026#92;u000B\u0026#92;u000C\u0026#92;u000D\u0026#92;u0085\u0026#92;u2028\u0026#92;u2029]\n     \u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"greedy\"\u003eGreedy quantifiers\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct greedy\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e?\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, once or not at all\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct greedy\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e*\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, zero or more times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct greedy\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e+\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, one or more times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct greedy\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, exactly \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct greedy\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e,}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct greedy\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e,\u003c/tt\u003e\u003ci\u003em\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e but not more than \u003ci\u003em\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"reluc\"\u003eReluctant quantifiers\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct reluc\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e??\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, once or not at all\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct reluc\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e*?\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, zero or more times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct reluc\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e+?\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, one or more times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct reluc\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e}?\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, exactly \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct reluc\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e,}?\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct reluc\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e,\u003c/tt\u003e\u003ci\u003em\u003c/i\u003e\u003ctt\u003e}?\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e but not more than \u003ci\u003em\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"poss\"\u003ePossessive quantifiers\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct poss\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e?+\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, once or not at all\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct poss\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e*+\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, zero or more times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct poss\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e++\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, one or more times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct poss\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e}+\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, exactly \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct poss\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e,}+\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct poss\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e,\u003c/tt\u003e\u003ci\u003em\u003c/i\u003e\u003ctt\u003e}+\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e but not more than \u003ci\u003em\u003c/i\u003e times\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"logical\"\u003eLogical operators\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct logical\"\u003e\u003ci\u003eXY\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e followed by \u003ci\u003eY\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct logical\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e|\u003c/tt\u003e\u003ci\u003eY\u003c/i\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eEither \u003ci\u003eX\u003c/i\u003e or \u003ci\u003eY\u003c/i\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct logical\"\u003e\u003ctt\u003e(\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eX, as a \u003ca href\u003d\"#cg\"\u003ecapturing group\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"backref\"\u003eBack references\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"bottom\" headers\u003d\"construct backref\"\u003e\u003ctt\u003e\\\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003c/td\u003e\n     \u003ctd valign\u003d\"bottom\" headers\u003d\"matches\"\u003eWhatever the \u003ci\u003en\u003c/i\u003e\u003csup\u003eth\u003c/sup\u003e\n     \u003ca href\u003d\"#cg\"\u003ecapturing group\u003c/a\u003e matched\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"bottom\" headers\u003d\"construct backref\"\u003e\u003ctt\u003e\\\u003c/tt\u003e\u003ci\u003ek\u003c/i\u003e\u0026lt;\u003ci\u003ename\u003c/i\u003e\u0026gt;\u003c/td\u003e\n     \u003ctd valign\u003d\"bottom\" headers\u003d\"matches\"\u003eWhatever the\n     \u003ca href\u003d\"#groupname\"\u003enamed-capturing group\u003c/a\u003e \"name\" matched\u003c/td\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"quot\"\u003eQuotation\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct quot\"\u003e\u003ctt\u003e\\\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eNothing, but quotes the following character\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct quot\"\u003e\u003ctt\u003e\\Q\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eNothing, but quotes all characters until \u003ctt\u003e\\E\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct quot\"\u003e\u003ctt\u003e\\E\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eNothing, but ends quoting started by \u003ctt\u003e\\Q\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n     \u003c!-- Metachars: !$()*+.\u003c\u003e?[\\]^{|} --\u003e\n\n \u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003c/tr\u003e\n \u003ctr align\u003d\"left\"\u003e\u003cth colspan\u003d\"2\" id\u003d\"special\"\u003eSpecial constructs (named-capturing and non-capturing)\u003c/th\u003e\u003c/tr\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?\u0026lt;\u003ca href\u003d\"#groupname\"\u003ename\u003c/a\u003e\u0026gt;\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, as a named-capturing group\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?:\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, as a non-capturing group\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?idmsuxU-idmsuxU)\u0026nbsp;\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003eNothing, but turns match flags \u003ca href\u003d\"#CASE_INSENSITIVE\"\u003ei\u003c/a\u003e\n \u003ca href\u003d\"#UNIX_LINES\"\u003ed\u003c/a\u003e \u003ca href\u003d\"#MULTILINE\"\u003em\u003c/a\u003e \u003ca href\u003d\"#DOTALL\"\u003es\u003c/a\u003e\n \u003ca href\u003d\"#UNICODE_CASE\"\u003eu\u003c/a\u003e \u003ca href\u003d\"#COMMENTS\"\u003ex\u003c/a\u003e \u003ca href\u003d\"#UNICODE_CHARACTER_CLASS\"\u003eU\u003c/a\u003e\n on - off\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?idmsux-idmsux:\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u0026nbsp;\u0026nbsp;\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, as a \u003ca href\u003d\"#cg\"\u003enon-capturing group\u003c/a\u003e with the\n         given flags \u003ca href\u003d\"#CASE_INSENSITIVE\"\u003ei\u003c/a\u003e \u003ca href\u003d\"#UNIX_LINES\"\u003ed\u003c/a\u003e\n \u003ca href\u003d\"#MULTILINE\"\u003em\u003c/a\u003e \u003ca href\u003d\"#DOTALL\"\u003es\u003c/a\u003e \u003ca href\u003d\"#UNICODE_CASE\"\u003eu\u003c/a \u003e\n \u003ca href\u003d\"#COMMENTS\"\u003ex\u003c/a\u003e on - off\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?\u003d\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width positive lookahead\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?!\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width negative lookahead\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?\u0026lt;\u003d\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width positive lookbehind\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?\u0026lt;!\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width negative lookbehind\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd valign\u003d\"top\" headers\u003d\"construct special\"\u003e\u003ctt\u003e(?\u0026gt;\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd headers\u003d\"matches\"\u003e\u003ci\u003eX\u003c/i\u003e, as an independent, non-capturing group\u003c/td\u003e\u003c/tr\u003e\n\n \u003c/table\u003e\n\n \u003chr\u003e\n\n\n \u003ch3\u003e\u003ca name\u003d\"bs\"\u003eBackslashes, escapes, and quoting\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e The backslash character (\u003ctt\u003e\u0027\\\u0027\u003c/tt\u003e) serves to introduce escaped\n constructs, as defined in the table above, as well as to quote characters\n that otherwise would be interpreted as unescaped constructs.  Thus the\n expression \u003ctt\u003e\\\\\u003c/tt\u003e matches a single backslash and \u003ctt\u003e\\{\u003c/tt\u003e matches a\n left brace.\n\n \u003cp\u003e It is an error to use a backslash prior to any alphabetic character that\n does not denote an escaped construct; these are reserved for future\n extensions to the regular-expression language.  A backslash may be used\n prior to a non-alphabetic character regardless of whether that character is\n part of an unescaped construct.\n\n \u003cp\u003e Backslashes within string literals in Java source code are interpreted\n as required by\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e\n as either Unicode escapes (section 3.3) or other character escapes (section 3.10.6)\n It is therefore necessary to double backslashes in string\n literals that represent regular expressions to protect them from\n interpretation by the Java bytecode compiler.  The string literal\n \u003ctt\u003e\"\u0026#92;b\"\u003c/tt\u003e, for example, matches a single backspace character when\n interpreted as a regular expression, while \u003ctt\u003e\"\u0026#92;\u0026#92;b\"\u003c/tt\u003e matches a\n word boundary.  The string literal \u003ctt\u003e\"\u0026#92;(hello\u0026#92;)\"\u003c/tt\u003e is illegal\n and leads to a compile-time error; in order to match the string\n \u003ctt\u003e(hello)\u003c/tt\u003e the string literal \u003ctt\u003e\"\u0026#92;\u0026#92;(hello\u0026#92;\u0026#92;)\"\u003c/tt\u003e\n must be used.\n\n \u003ch3\u003e\u003ca name\u003d\"cc\"\u003eCharacter Classes\u003c/a\u003e\u003c/h3\u003e\n\n    \u003cp\u003e Character classes may appear within other character classes, and\n    may be composed by the union operator (implicit) and the intersection\n    operator (\u003ctt\u003e\u0026amp;\u0026amp;\u003c/tt\u003e).\n    The union operator denotes a class that contains every character that is\n    in at least one of its operand classes.  The intersection operator\n    denotes a class that contains every character that is in both of its\n    operand classes.\n\n    \u003cp\u003e The precedence of character-class operators is as follows, from\n    highest to lowest:\n\n    \u003cblockquote\u003e\u003ctable border\u003d\"0\" cellpadding\u003d\"1\" cellspacing\u003d\"0\"\n                 summary\u003d\"Precedence of character class operators.\"\u003e\n      \u003ctr\u003e\u003cth\u003e1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n        \u003ctd\u003eLiteral escape\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/td\u003e\n        \u003ctd\u003e\u003ctt\u003e\\x\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n     \u003ctr\u003e\u003cth\u003e2\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n        \u003ctd\u003eGrouping\u003c/td\u003e\n        \u003ctd\u003e\u003ctt\u003e[...]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n     \u003ctr\u003e\u003cth\u003e3\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n        \u003ctd\u003eRange\u003c/td\u003e\n        \u003ctd\u003e\u003ctt\u003ea-z\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n      \u003ctr\u003e\u003cth\u003e4\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n        \u003ctd\u003eUnion\u003c/td\u003e\n        \u003ctd\u003e\u003ctt\u003e[a-e][i-u]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n      \u003ctr\u003e\u003cth\u003e5\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n        \u003ctd\u003eIntersection\u003c/td\u003e\n        \u003ctd\u003e{@code [a-z\u0026\u0026[aeiou]]}\u003c/td\u003e\u003c/tr\u003e\n    \u003c/table\u003e\u003c/blockquote\u003e\n\n    \u003cp\u003e Note that a different set of metacharacters are in effect inside\n    a character class than outside a character class. For instance, the\n    regular expression \u003ctt\u003e.\u003c/tt\u003e loses its special meaning inside a\n    character class, while the expression \u003ctt\u003e-\u003c/tt\u003e becomes a range\n    forming metacharacter.\n\n \u003ch3\u003e\u003ca name\u003d\"lt\"\u003eLine terminators\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e A \u003ci\u003eline terminator\u003c/i\u003e is a one- or two-character sequence that marks\n the end of a line of the input character sequence.  The following are\n recognized as line terminators:\n\n \u003cul\u003e\n\n   \u003cli\u003e A newline (line feed) character\u0026nbsp;(\u003ctt\u003e\u0027\\n\u0027\u003c/tt\u003e),\n\n   \u003cli\u003e A carriage-return character followed immediately by a newline\n   character\u0026nbsp;(\u003ctt\u003e\"\\r\\n\"\u003c/tt\u003e),\n\n   \u003cli\u003e A standalone carriage-return character\u0026nbsp;(\u003ctt\u003e\u0027\\r\u0027\u003c/tt\u003e),\n\n   \u003cli\u003e A next-line character\u0026nbsp;(\u003ctt\u003e\u0027\u0026#92;u0085\u0027\u003c/tt\u003e),\n\n   \u003cli\u003e A line-separator character\u0026nbsp;(\u003ctt\u003e\u0027\u0026#92;u2028\u0027\u003c/tt\u003e), or\n\n   \u003cli\u003e A paragraph-separator character\u0026nbsp;(\u003ctt\u003e\u0027\u0026#92;u2029\u003c/tt\u003e).\n\n \u003c/ul\u003e\n \u003cp\u003eIf {@link #UNIX_LINES} mode is activated, then the only line terminators\n recognized are newline characters.\n\n \u003cp\u003e The regular expression \u003ctt\u003e.\u003c/tt\u003e matches any character except a line\n terminator unless the {@link #DOTALL} flag is specified.\n\n \u003cp\u003e By default, the regular expressions \u003ctt\u003e^\u003c/tt\u003e and \u003ctt\u003e$\u003c/tt\u003e ignore\n line terminators and only match at the beginning and the end, respectively,\n of the entire input sequence. If {@link #MULTILINE} mode is activated then\n \u003ctt\u003e^\u003c/tt\u003e matches at the beginning of input and after any line terminator\n except at the end of input. When in {@link #MULTILINE} mode \u003ctt\u003e$\u003c/tt\u003e\n matches just before a line terminator or the end of the input sequence.\n\n \u003ch3\u003e\u003ca name\u003d\"cg\"\u003eGroups and capturing\u003c/a\u003e\u003c/h3\u003e\n\n \u003ch4\u003e\u003ca name\u003d\"gnumber\"\u003eGroup number\u003c/a\u003e\u003c/h4\u003e\n \u003cp\u003e Capturing groups are numbered by counting their opening parentheses from\n left to right.  In the expression \u003ctt\u003e((A)(B(C)))\u003c/tt\u003e, for example, there\n are four such groups: \u003c/p\u003e\n\n \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0 summary\u003d\"Capturing group numberings\"\u003e\n \u003ctr\u003e\u003cth\u003e1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n     \u003ctd\u003e\u003ctt\u003e((A)(B(C)))\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e2\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n     \u003ctd\u003e\u003ctt\u003e(A)\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e3\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n     \u003ctd\u003e\u003ctt\u003e(B(C))\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003cth\u003e4\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/th\u003e\n     \u003ctd\u003e\u003ctt\u003e(C)\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e Group zero always stands for the entire expression.\n\n \u003cp\u003e Capturing groups are so named because, during a match, each subsequence\n of the input sequence that matches such a group is saved.  The captured\n subsequence may be used later in the expression, via a back reference, and\n may also be retrieved from the matcher once the match operation is complete.\n\n \u003ch4\u003e\u003ca name\u003d\"groupname\"\u003eGroup name\u003c/a\u003e\u003c/h4\u003e\n \u003cp\u003eA capturing group can also be assigned a \"name\", a \u003ctt\u003enamed-capturing group\u003c/tt\u003e,\n and then be back-referenced later by the \"name\". Group names are composed of\n the following characters. The first character must be a \u003ctt\u003eletter\u003c/tt\u003e.\n\n \u003cul\u003e\n   \u003cli\u003e The uppercase letters \u003ctt\u003e\u0027A\u0027\u003c/tt\u003e through \u003ctt\u003e\u0027Z\u0027\u003c/tt\u003e\n        (\u003ctt\u003e\u0027\u0026#92;u0041\u0027\u003c/tt\u003e\u0026nbsp;through\u0026nbsp;\u003ctt\u003e\u0027\u0026#92;u005a\u0027\u003c/tt\u003e),\n   \u003cli\u003e The lowercase letters \u003ctt\u003e\u0027a\u0027\u003c/tt\u003e through \u003ctt\u003e\u0027z\u0027\u003c/tt\u003e\n        (\u003ctt\u003e\u0027\u0026#92;u0061\u0027\u003c/tt\u003e\u0026nbsp;through\u0026nbsp;\u003ctt\u003e\u0027\u0026#92;u007a\u0027\u003c/tt\u003e),\n   \u003cli\u003e The digits \u003ctt\u003e\u00270\u0027\u003c/tt\u003e through \u003ctt\u003e\u00279\u0027\u003c/tt\u003e\n        (\u003ctt\u003e\u0027\u0026#92;u0030\u0027\u003c/tt\u003e\u0026nbsp;through\u0026nbsp;\u003ctt\u003e\u0027\u0026#92;u0039\u0027\u003c/tt\u003e),\n \u003c/ul\u003e\n\n \u003cp\u003e A \u003ctt\u003enamed-capturing group\u003c/tt\u003e is still numbered as described in\n \u003ca href\u003d\"#gnumber\"\u003eGroup number\u003c/a\u003e.\n\n \u003cp\u003e The captured input associated with a group is always the subsequence\n that the group most recently matched.  If a group is evaluated a second time\n because of quantification then its previously-captured value, if any, will\n be retained if the second evaluation fails.  Matching the string\n \u003ctt\u003e\"aba\"\u003c/tt\u003e against the expression \u003ctt\u003e(a(b)?)+\u003c/tt\u003e, for example, leaves\n group two set to \u003ctt\u003e\"b\"\u003c/tt\u003e.  All captured input is discarded at the\n beginning of each match.\n\n \u003cp\u003e Groups beginning with \u003ctt\u003e(?\u003c/tt\u003e are either pure, \u003ci\u003enon-capturing\u003c/i\u003e groups\n that do not capture text and do not count towards the group total, or\n \u003ci\u003enamed-capturing\u003c/i\u003e group.\n\n \u003ch3\u003e Unicode support \u003c/h3\u003e\n\n \u003cp\u003e This class is in conformance with Level 1 of \u003ca\n href\u003d\"http://www.unicode.org/reports/tr18/\"\u003e\u003ci\u003eUnicode Technical\n Standard #18: Unicode Regular Expression\u003c/i\u003e\u003c/a\u003e, plus RL2.1\n Canonical Equivalents.\n \u003cp\u003e\n \u003cb\u003eUnicode escape sequences\u003c/b\u003e such as \u003ctt\u003e\u0026#92;u2014\u003c/tt\u003e in Java source code\n are processed as described in section 3.3 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n Such escape sequences are also implemented directly by the regular-expression\n parser so that Unicode escapes can be used in expressions that are read from\n files or from the keyboard.  Thus the strings \u003ctt\u003e\"\u0026#92;u2014\"\u003c/tt\u003e and\n \u003ctt\u003e\"\\\\u2014\"\u003c/tt\u003e, while not equal, compile into the same pattern, which\n matches the character with hexadecimal value \u003ctt\u003e0x2014\u003c/tt\u003e.\n \u003cp\u003e\n A Unicode character can also be represented in a regular-expression by\n using its \u003cb\u003eHex notation\u003c/b\u003e(hexadecimal code point value) directly as described in construct\n \u003ctt\u003e\u0026#92;x{...}\u003c/tt\u003e, for example a supplementary character U+2011F\n can be specified as \u003ctt\u003e\u0026#92;x{2011F}\u003c/tt\u003e, instead of two consecutive\n Unicode escape sequences of the surrogate pair\n \u003ctt\u003e\u0026#92;uD840\u003c/tt\u003e\u003ctt\u003e\u0026#92;uDD1F\u003c/tt\u003e.\n \u003cp\u003e\n Unicode scripts, blocks, categories and binary properties are written with\n the \u003ctt\u003e\\p\u003c/tt\u003e and \u003ctt\u003e\\P\u003c/tt\u003e constructs as in Perl.\n \u003ctt\u003e\\p{\u003c/tt\u003e\u003ci\u003eprop\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e matches if\n the input has the property \u003ci\u003eprop\u003c/i\u003e, while \u003ctt\u003e\\P{\u003c/tt\u003e\u003ci\u003eprop\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e\n does not match if the input has that property.\n \u003cp\u003e\n Scripts, blocks, categories and binary properties can be used both inside\n and outside of a character class.\n\n \u003cp\u003e\n \u003cb\u003e\u003ca name\u003d\"usc\"\u003eScripts\u003c/a\u003e\u003c/b\u003e are specified either with the prefix {@code Is}, as in\n {@code IsHiragana}, or by using  the {@code script} keyword (or its short\n form {@code sc})as in {@code script\u003dHiragana} or {@code sc\u003dHiragana}.\n \u003cp\u003e\n The script names supported by \u003ccode\u003ePattern\u003c/code\u003e are the valid script names\n accepted and defined by\n {@link java.lang.Character.UnicodeScript#forName(String) UnicodeScript.forName}.\n\n \u003cp\u003e\n \u003cb\u003e\u003ca name\u003d\"ubc\"\u003eBlocks\u003c/a\u003e\u003c/b\u003e are specified with the prefix {@code In}, as in\n {@code InMongolian}, or by using the keyword {@code block} (or its short\n form {@code blk}) as in {@code block\u003dMongolian} or {@code blk\u003dMongolian}.\n \u003cp\u003e\n The block names supported by \u003ccode\u003ePattern\u003c/code\u003e are the valid block names\n accepted and defined by\n {@link java.lang.Character.UnicodeBlock#forName(String) UnicodeBlock.forName}.\n \u003cp\u003e\n\n \u003cb\u003e\u003ca name\u003d\"ucc\"\u003eCategories\u003c/a\u003e\u003c/b\u003e may be specified with the optional prefix {@code Is}:\n Both {@code \\p{L}} and {@code \\p{IsL}} denote the category of Unicode\n letters. Same as scripts and blocks, categories can also be specified\n by using the keyword {@code general_category} (or its short form\n {@code gc}) as in {@code general_category\u003dLu} or {@code gc\u003dLu}.\n \u003cp\u003e\n The supported categories are those of\n \u003ca href\u003d\"http://www.unicode.org/unicode/standard/standard.html\"\u003e\n \u003ci\u003eThe Unicode Standard\u003c/i\u003e\u003c/a\u003e in the version specified by the\n {@link java.lang.Character Character} class. The category names are those\n defined in the Standard, both normative and informative.\n \u003cp\u003e\n\n \u003cb\u003e\u003ca name\u003d\"ubpc\"\u003eBinary properties\u003c/a\u003e\u003c/b\u003e are specified with the prefix {@code Is}, as in\n {@code IsAlphabetic}. The supported binary properties by \u003ccode\u003ePattern\u003c/code\u003e\n are\n \u003cul\u003e\n   \u003cli\u003e Alphabetic\n   \u003cli\u003e Ideographic\n   \u003cli\u003e Letter\n   \u003cli\u003e Lowercase\n   \u003cli\u003e Uppercase\n   \u003cli\u003e Titlecase\n   \u003cli\u003e Punctuation\n   \u003cLi\u003e Control\n   \u003cli\u003e White_Space\n   \u003cli\u003e Digit\n   \u003cli\u003e Hex_Digit\n   \u003cli\u003e Join_Control\n   \u003cli\u003e Noncharacter_Code_Point\n   \u003cli\u003e Assigned\n \u003c/ul\u003e\n \u003cp\u003e\n The following \u003cb\u003ePredefined Character classes\u003c/b\u003e and \u003cb\u003ePOSIX character classes\u003c/b\u003e\n are in conformance with the recommendation of \u003ci\u003eAnnex C: Compatibility Properties\u003c/i\u003e\n of \u003ca href\u003d\"http://www.unicode.org/reports/tr18/\"\u003e\u003ci\u003eUnicode Regular Expression\n \u003c/i\u003e\u003c/a\u003e, when {@link #UNICODE_CHARACTER_CLASS} flag is specified.\n\n \u003ctable border\u003d\"0\" cellpadding\u003d\"1\" cellspacing\u003d\"0\"\n  summary\u003d\"predefined and posix character classes in Unicode mode\"\u003e\n \u003ctr align\u003d\"left\"\u003e\n \u003cth align\u003d\"left\" id\u003d\"predef_classes\"\u003eClasses\u003c/th\u003e\n \u003cth align\u003d\"left\" id\u003d\"predef_matches\"\u003eMatches\u003c/th\u003e\n\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Lower}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA lowercase character:\u003ctt\u003e\\p{IsLowercase}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Upper}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eAn uppercase character:\u003ctt\u003e\\p{IsUppercase}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{ASCII}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eAll ASCII:\u003ctt\u003e[\\x00-\\x7F]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Alpha}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eAn alphabetic character:\u003ctt\u003e\\p{IsAlphabetic}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Digit}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA decimal digit character:\u003ctt\u003ep{IsDigit}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Alnum}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eAn alphanumeric character:\u003ctt\u003e[\\p{IsAlphabetic}\\p{IsDigit}]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Punct}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA punctuation character:\u003ctt\u003ep{IsPunctuation}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Graph}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA visible character: \u003ctt\u003e[^\\p{IsWhite_Space}\\p{gc\u003dCc}\\p{gc\u003dCs}\\p{gc\u003dCn}]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Print}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA printable character: {@code [\\p{Graph}\\p{Blank}\u0026\u0026[^\\p{Cntrl}]]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Blank}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA space or a tab: {@code [\\p{IsWhite_Space}\u0026\u0026[^\\p{gc\u003dZl}\\p{gc\u003dZp}\\x0a\\x0b\\x0c\\x0d\\x85]]}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Cntrl}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA control character: \u003ctt\u003e\\p{gc\u003dCc}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{XDigit}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA hexadecimal digit: \u003ctt\u003e[\\p{gc\u003dNd}\\p{IsHex_Digit}]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\p{Space}\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA whitespace character:\u003ctt\u003e\\p{IsWhite_Space}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\d\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA digit: \u003ctt\u003e\\p{IsDigit}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\D\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA non-digit: \u003ctt\u003e[^\\d]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\s\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA whitespace character: \u003ctt\u003e\\p{IsWhite_Space}\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\S\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA non-whitespace character: \u003ctt\u003e[^\\s]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\w\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA word character: \u003ctt\u003e[\\p{Alpha}\\p{gc\u003dMn}\\p{gc\u003dMe}\\p{gc\u003dMc}\\p{Digit}\\p{gc\u003dPc}\\p{IsJoin_Control}]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ctt\u003e\\W\u003c/tt\u003e\u003c/td\u003e\n     \u003ctd\u003eA non-word character: \u003ctt\u003e[^\\w]\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n \u003ca name\u003d\"jcc\"\u003e\n Categories that behave like the java.lang.Character\n boolean is\u003ci\u003emethodname\u003c/i\u003e methods (except for the deprecated ones) are\n available through the same \u003ctt\u003e\\p{\u003c/tt\u003e\u003ci\u003eprop\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e syntax where\n the specified property has the name \u003ctt\u003ejava\u003ci\u003emethodname\u003c/i\u003e\u003c/tt\u003e\u003c/a\u003e.\n\n \u003ch3\u003e Comparison to Perl 5 \u003c/h3\u003e\n\n \u003cp\u003eThe \u003ccode\u003ePattern\u003c/code\u003e engine performs traditional NFA-based matching\n with ordered alternation as occurs in Perl 5.\n\n \u003cp\u003e Perl constructs not supported by this class: \u003c/p\u003e\n\n \u003cul\u003e\n    \u003cli\u003e\u003cp\u003e Predefined character classes (Unicode character)\n    \u003cp\u003e\u003ctt\u003e\\X\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/tt\u003eMatch Unicode\n    \u003ca href\u003d\"http://www.unicode.org/reports/tr18/#Default_Grapheme_Clusters\"\u003e\n    \u003ci\u003eextended grapheme cluster\u003c/i\u003e\u003c/a\u003e\n    \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e The backreference constructs, \u003ctt\u003e\\g{\u003c/tt\u003e\u003ci\u003en\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e for\n    the \u003ci\u003en\u003c/i\u003e\u003csup\u003eth\u003c/sup\u003e\u003ca href\u003d\"#cg\"\u003ecapturing group\u003c/a\u003e and\n    \u003ctt\u003e\\g{\u003c/tt\u003e\u003ci\u003ename\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e for\n    \u003ca href\u003d\"#groupname\"\u003enamed-capturing group\u003c/a\u003e.\n    \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e The named character construct, \u003ctt\u003e\\N{\u003c/tt\u003e\u003ci\u003ename\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e\n    for a Unicode character by its name.\n    \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e The conditional constructs\n    \u003ctt\u003e(?(\u003c/tt\u003e\u003ci\u003econdition\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e and\n    \u003ctt\u003e(?(\u003c/tt\u003e\u003ci\u003econdition\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e\u003ci\u003eX\u003c/i\u003e\u003ctt\u003e|\u003c/tt\u003e\u003ci\u003eY\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e,\n    \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e The embedded code constructs \u003ctt\u003e(?{\u003c/tt\u003e\u003ci\u003ecode\u003c/i\u003e\u003ctt\u003e})\u003c/tt\u003e\n    and \u003ctt\u003e(??{\u003c/tt\u003e\u003ci\u003ecode\u003c/i\u003e\u003ctt\u003e})\u003c/tt\u003e,\u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e The embedded comment syntax \u003ctt\u003e(?#comment)\u003c/tt\u003e, and \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e The preprocessing operations \u003ctt\u003e\\l\u003c/tt\u003e \u003ctt\u003e\u0026#92;u\u003c/tt\u003e,\n    \u003ctt\u003e\\L\u003c/tt\u003e, and \u003ctt\u003e\\U\u003c/tt\u003e.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e Constructs supported by this class but not by Perl: \u003c/p\u003e\n\n \u003cul\u003e\n\n    \u003cli\u003e\u003cp\u003e Character-class union and intersection as described\n    \u003ca href\u003d\"#cc\"\u003eabove\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e Notable differences from Perl: \u003c/p\u003e\n\n \u003cul\u003e\n\n    \u003cli\u003e\u003cp\u003e In Perl, \u003ctt\u003e\\1\u003c/tt\u003e through \u003ctt\u003e\\9\u003c/tt\u003e are always interpreted\n    as back references; a backslash-escaped number greater than \u003ctt\u003e9\u003c/tt\u003e is\n    treated as a back reference if at least that many subexpressions exist,\n    otherwise it is interpreted, if possible, as an octal escape.  In this\n    class octal escapes must always begin with a zero. In this class,\n    \u003ctt\u003e\\1\u003c/tt\u003e through \u003ctt\u003e\\9\u003c/tt\u003e are always interpreted as back\n    references, and a larger number is accepted as a back reference if at\n    least that many subexpressions exist at that point in the regular\n    expression, otherwise the parser will drop digits until the number is\n    smaller or equal to the existing number of groups or it is one digit.\n    \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e Perl uses the \u003ctt\u003eg\u003c/tt\u003e flag to request a match that resumes\n    where the last match left off.  This functionality is provided implicitly\n    by the {@link Matcher} class: Repeated invocations of the {@link\n    Matcher#find find} method will resume where the last match left off,\n    unless the matcher is reset.  \u003c/p\u003e\u003c/li\u003e\n\n    \u003cli\u003e\u003cp\u003e In Perl, embedded flags at the top level of an expression affect\n    the whole expression.  In this class, embedded flags always take effect\n    at the point at which they appear, whether they are at the top level or\n    within a group; in the latter case, flags are restored at the end of the\n    group just as in Perl.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n\n \u003cp\u003e For a more precise description of the behavior of regular expression\n constructs, please see \u003ca href\u003d\"http://www.oreilly.com/catalog/regex3/\"\u003e\n \u003ci\u003eMastering Regular Expressions, 3nd Edition\u003c/i\u003e, Jeffrey E. F. Friedl,\n O\u0027Reilly and Associates, 2006.\u003c/a\u003e\n \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Pattern","qualifiedName":"java.util.regex.Pattern","dimension":"","elementType":{},"package":"java.util.regex","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"UNIX_LINES","comment":"Enables Unix lines mode.\n\n \u003cp\u003e In this mode, only the \u003ctt\u003e\u0027\\n\u0027\u003c/tt\u003e line terminator is recognized\n in the behavior of \u003ctt\u003e.\u003c/tt\u003e, \u003ctt\u003e^\u003c/tt\u003e, and \u003ctt\u003e$\u003c/tt\u003e.\n\n \u003cp\u003e Unix lines mode can also be enabled via the embedded flag\n expression\u0026nbsp;\u003ctt\u003e(?d)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"CASE_INSENSITIVE","comment":"Enables case-insensitive matching.\n\n \u003cp\u003e By default, case-insensitive matching assumes that only characters\n in the US-ASCII charset are being matched.  Unicode-aware\n case-insensitive matching can be enabled by specifying the {@link\n #UNICODE_CASE} flag in conjunction with this flag.\n\n \u003cp\u003e Case-insensitive matching can also be enabled via the embedded flag\n expression\u0026nbsp;\u003ctt\u003e(?i)\u003c/tt\u003e.\n\n \u003cp\u003e Specifying this flag may impose a slight performance penalty.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"COMMENTS","comment":"Permits whitespace and comments in pattern.\n\n \u003cp\u003e In this mode, whitespace is ignored, and embedded comments starting\n with \u003ctt\u003e#\u003c/tt\u003e are ignored until the end of a line.\n\n \u003cp\u003e Comments mode can also be enabled via the embedded flag\n expression\u0026nbsp;\u003ctt\u003e(?x)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"MULTILINE","comment":"Enables multiline mode.\n\n \u003cp\u003e In multiline mode the expressions \u003ctt\u003e^\u003c/tt\u003e and \u003ctt\u003e$\u003c/tt\u003e match\n just after or just before, respectively, a line terminator or the end of\n the input sequence.  By default these expressions only match at the\n beginning and the end of the entire input sequence.\n\n \u003cp\u003e Multiline mode can also be enabled via the embedded flag\n expression\u0026nbsp;\u003ctt\u003e(?m)\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"LITERAL","comment":"Enables literal parsing of the pattern.\n\n \u003cp\u003e When this flag is specified then the input string that specifies\n the pattern is treated as a sequence of literal characters.\n Metacharacters or escape sequences in the input sequence will be\n given no special meaning.\n\n \u003cp\u003eThe flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on\n matching when used in conjunction with this flag. The other flags\n become superfluous.\n\n \u003cp\u003e There is no embedded flag character for enabling literal parsing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"DOTALL","comment":"Enables dotall mode.\n\n \u003cp\u003e In dotall mode, the expression \u003ctt\u003e.\u003c/tt\u003e matches any character,\n including a line terminator.  By default this expression does not match\n line terminators.\n\n \u003cp\u003e Dotall mode can also be enabled via the embedded flag\n expression\u0026nbsp;\u003ctt\u003e(?s)\u003c/tt\u003e.  (The \u003ctt\u003es\u003c/tt\u003e is a mnemonic for\n \"single-line\" mode, which is what this is called in Perl.)  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32"},{"name":"UNICODE_CASE","comment":"Enables Unicode-aware case folding.\n\n \u003cp\u003e When this flag is specified then case-insensitive matching, when\n enabled by the {@link #CASE_INSENSITIVE} flag, is done in a manner\n consistent with the Unicode Standard.  By default, case-insensitive\n matching assumes that only characters in the US-ASCII charset are being\n matched.\n\n \u003cp\u003e Unicode-aware case folding can also be enabled via the embedded flag\n expression\u0026nbsp;\u003ctt\u003e(?u)\u003c/tt\u003e.\n\n \u003cp\u003e Specifying this flag may impose a performance penalty.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"64"},{"name":"CANON_EQ","comment":"Enables canonical equivalence.\n\n \u003cp\u003e When this flag is specified then two characters will be considered\n to match if, and only if, their full canonical decompositions match.\n The expression \u003ctt\u003e\"a\u0026#92;u030A\"\u003c/tt\u003e, for example, will match the\n string \u003ctt\u003e\"\u0026#92;u00E5\"\u003c/tt\u003e when this flag is specified.  By default,\n matching does not take canonical equivalence into account.\n\n \u003cp\u003e There is no embedded flag character for enabling canonical\n equivalence.\n\n \u003cp\u003e Specifying this flag may impose a performance penalty.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"128"},{"name":"UNICODE_CHARACTER_CLASS","comment":"Enables the Unicode version of \u003ci\u003ePredefined character classes\u003c/i\u003e and\n \u003ci\u003ePOSIX character classes\u003c/i\u003e.\n\n \u003cp\u003e When this flag is specified then the (US-ASCII only)\n \u003ci\u003ePredefined character classes\u003c/i\u003e and \u003ci\u003ePOSIX character classes\u003c/i\u003e\n are in conformance with\n \u003ca href\u003d\"http://www.unicode.org/reports/tr18/\"\u003e\u003ci\u003eUnicode Technical\n Standard #18: Unicode Regular Expression\u003c/i\u003e\u003c/a\u003e\n \u003ci\u003eAnnex C: Compatibility Properties\u003c/i\u003e.\n \u003cp\u003e\n The UNICODE_CHARACTER_CLASS mode can also be enabled via the embedded\n flag expression\u0026nbsp;\u003ctt\u003e(?U)\u003c/tt\u003e.\n \u003cp\u003e\n The flag implies UNICODE_CASE, that is, it enables Unicode-aware case\n folding.\n \u003cp\u003e\n Specifying this flag may impose a performance penalty.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"256"}],"methods":[{"name":"compile","comment":"Compiles the given regular expression into a pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Pattern","qualifiedName":"java.util.regex.Pattern","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compile","comment":"Compiles the given regular expression into a pattern with the given\n flags.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"Pattern","qualifiedName":"java.util.regex.Pattern","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"flags","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"pattern","comment":"Returns the regular expression from which this pattern was compiled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"\u003cp\u003eReturns the string representation of this pattern. This\n is the regular expression from which this pattern was\n compiled.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"matcher","comment":"Creates a matcher that will match the given input against this pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flags","comment":"Returns this pattern\u0027s match flags.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"matches","comment":"Compiles the given regular expression and attempts to match the given\n input against it.\n\n \u003cp\u003e An invocation of this convenience method of the form\n\n \u003cblockquote\u003e\u003cpre\u003e\n Pattern.matches(regex, input);\u003c/pre\u003e\u003c/blockquote\u003e\n\n behaves in exactly the same way as the expression\n\n \u003cblockquote\u003e\u003cpre\u003e\n Pattern.compile(regex).matcher(input).matches()\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e If a pattern is to be used multiple times, compiling it once and reusing\n it will be more efficient than invoking this method each time.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.CharSequence)","flatSignature":"(String, CharSequence)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"input","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"split","comment":"Splits the given input sequence around matches of this pattern.\n\n \u003cp\u003e The array returned by this method contains each substring of the\n input sequence that is terminated by another subsequence that matches\n this pattern or is terminated by the end of the input sequence.  The\n substrings in the array are in the order in which they occur in the\n input. If this pattern does not match any subsequence of the input then\n the resulting array has just one element, namely the input sequence in\n string form.\n\n \u003cp\u003e When there is a positive-width match at the beginning of the input\n sequence then an empty leading substring is included at the beginning\n of the resulting array. A zero-width match at the beginning however\n never produces such empty leading substring.\n\n \u003cp\u003e The \u003ctt\u003elimit\u003c/tt\u003e parameter controls the number of times the\n pattern is applied and therefore affects the length of the resulting\n array.  If the limit \u003ci\u003en\u003c/i\u003e is greater than zero then the pattern\n will be applied at most \u003ci\u003en\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s\n length will be no greater than \u003ci\u003en\u003c/i\u003e, and the array\u0027s last entry\n will contain all input beyond the last matched delimiter.  If \u003ci\u003en\u003c/i\u003e\n is non-positive then the pattern will be applied as many times as\n possible and the array can have any length.  If \u003ci\u003en\u003c/i\u003e is zero then\n the pattern will be applied as many times as possible, the array can\n have any length, and trailing empty strings will be discarded.\n\n \u003cp\u003e The input \u003ctt\u003e\"boo:and:foo\"\u003c/tt\u003e, for example, yields the following\n results with these parameters:\n\n \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0\n              summary\u003d\"Split examples showing regex, limit, and result\"\u003e\n \u003ctr\u003e\u003cth align\u003d\"left\"\u003e\u003ci\u003eRegex\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e\n     \u003cth align\u003d\"left\"\u003e\u003ci\u003eLimit\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e\n     \u003cth align\u003d\"left\"\u003e\u003ci\u003eResult\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e2\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and:foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e5\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e5\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\", \"\", \"\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\", \"\", \"\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e0\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int)","flatSignature":"(CharSequence, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"limit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"split","comment":"Splits the given input sequence around matches of this pattern.\n\n \u003cp\u003e This method works as if by invoking the two-argument {@link\n #split(java.lang.CharSequence, int) split} method with the given input\n sequence and a limit argument of zero.  Trailing empty strings are\n therefore not included in the resulting array. \u003c/p\u003e\n\n \u003cp\u003e The input \u003ctt\u003e\"boo:and:foo\"\u003c/tt\u003e, for example, yields the following\n results with these expressions:\n\n \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0\n              summary\u003d\"Split examples showing regex and result\"\u003e\n \u003ctr\u003e\u003cth align\u003d\"left\"\u003e\u003ci\u003eRegex\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/i\u003e\u003c/th\u003e\n     \u003cth align\u003d\"left\"\u003e\u003ci\u003eResult\u003c/i\u003e\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"boo\", \"and\", \"foo\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd\u003e\u003ctt\u003e{ \"b\", \"\", \":and:f\" }\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"quote","comment":"Returns a literal pattern \u003ccode\u003eString\u003c/code\u003e for the specified\n \u003ccode\u003eString\u003c/code\u003e.\n\n \u003cp\u003eThis method produces a \u003ccode\u003eString\u003c/code\u003e that can be used to\n create a \u003ccode\u003ePattern\u003c/code\u003e that would match the string\n \u003ccode\u003es\u003c/code\u003e as if it were a literal pattern.\u003c/p\u003e Metacharacters\n or escape sequences in the input sequence will be given no special\n meaning.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asPredicate","comment":"Creates a predicate which can be used to match a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"splitAsStream","comment":"Creates a stream from the given input sequence around matches of this\n pattern.\n\n \u003cp\u003e The stream returned by this method contains each substring of the\n input sequence that is terminated by another subsequence that matches\n this pattern or is terminated by the end of the input sequence.  The\n substrings in the stream are in the order in which they occur in the\n input. Trailing empty strings will be discarded and not encountered in\n the stream.\n\n \u003cp\u003e If this pattern does not match any subsequence of the input then\n the resulting stream has just one element, namely the input sequence in\n string form.\n\n \u003cp\u003e When there is a positive-width match at the beginning of the input\n sequence then an empty leading substring is included at the beginning\n of the stream. A zero-width match at the beginning however never produces\n such empty leading substring.\n\n \u003cp\u003e If the input sequence is mutable, it must remain constant during the\n execution of the terminal stream operation.  Otherwise, the result of the\n terminal stream operation is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}