{"name":"MatchResult","comment":"The result of a match operation.\n\n \u003cp\u003eThis interface contains query methods used to determine the\n results of a match against a regular expression. The match boundaries,\n groups and group boundaries can be seen but not modified through\n a \u003ccode\u003eMatchResult\u003c/code\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"MatchResult","qualifiedName":"java.util.regex.MatchResult","dimension":"","elementType":{},"package":"java.util.regex","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"start","comment":"Returns the start index of the match.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"start","comment":"Returns the start index of the subsequence captured by the given group\n during this match.\n\n \u003cp\u003e \u003ca href\u003d\"Pattern.html#cg\"\u003eCapturing groups\u003c/a\u003e are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression \u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(0)\u003c/tt\u003e is equivalent to\n \u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart()\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"end","comment":"Returns the offset after the last character matched.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"end","comment":"Returns the offset after the last character of the subsequence\n captured by the given group during this match.\n\n \u003cp\u003e \u003ca href\u003d\"Pattern.html#cg\"\u003eCapturing groups\u003c/a\u003e are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression \u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend(0)\u003c/tt\u003e is equivalent to\n \u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend()\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"group","comment":"Returns the input subsequence matched by the previous match.\n\n \u003cp\u003e For a matcher \u003ci\u003em\u003c/i\u003e with input sequence \u003ci\u003es\u003c/i\u003e,\n the expressions \u003ci\u003em.\u003c/i\u003e\u003ctt\u003egroup()\u003c/tt\u003e and\n \u003ci\u003es.\u003c/i\u003e\u003ctt\u003esubstring(\u003c/tt\u003e\u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(),\u003c/tt\u003e\u0026nbsp;\u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend())\u003c/tt\u003e\n are equivalent.  \u003c/p\u003e\n\n \u003cp\u003e Note that some patterns, for example \u003ctt\u003ea*\u003c/tt\u003e, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"group","comment":"Returns the input subsequence captured by the given group during the\n previous match operation.\n\n \u003cp\u003e For a matcher \u003ci\u003em\u003c/i\u003e, input sequence \u003ci\u003es\u003c/i\u003e, and group index\n \u003ci\u003eg\u003c/i\u003e, the expressions \u003ci\u003em.\u003c/i\u003e\u003ctt\u003egroup(\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e and\n \u003ci\u003es.\u003c/i\u003e\u003ctt\u003esubstring(\u003c/tt\u003e\u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\u003ctt\u003e),\u003c/tt\u003e\u0026nbsp;\u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend(\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\u003ctt\u003e))\u003c/tt\u003e\n are equivalent.  \u003c/p\u003e\n\n \u003cp\u003e \u003ca href\u003d\"Pattern.html#cg\"\u003eCapturing groups\u003c/a\u003e are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression \u003ctt\u003em.group(0)\u003c/tt\u003e is equivalent to \u003ctt\u003em.group()\u003c/tt\u003e.\n \u003c/p\u003e\n\n \u003cp\u003e If the match was successful but the group specified failed to match\n any part of the input sequence, then \u003ctt\u003enull\u003c/tt\u003e is returned. Note\n that some groups, for example \u003ctt\u003e(a*)\u003c/tt\u003e, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"groupCount","comment":"Returns the number of capturing groups in this match result\u0027s pattern.\n\n \u003cp\u003e Group zero denotes the entire pattern by convention. It is not\n included in this count.\n\n \u003cp\u003e Any non-negative integer smaller than or equal to the value\n returned by this method is guaranteed to be a valid group index for\n this matcher.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.util.regex.Matcher"],"enumConstants":[]}