{"name":"Matcher","comment":"An engine that performs match operations on a {@linkplain java.lang.CharSequence\n character sequence} by interpreting a {@link Pattern}.\n\n \u003cp\u003e A matcher is created from a pattern by invoking the pattern\u0027s {@link\n Pattern#matcher matcher} method.  Once created, a matcher can be used to\n perform three different kinds of match operations:\n\n \u003cul\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #matches matches} method attempts to match the entire\n   input sequence against the pattern.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #lookingAt lookingAt} method attempts to match the\n   input sequence, starting at the beginning, against the pattern.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e The {@link #find find} method scans the input sequence looking for\n   the next subsequence that matches the pattern.  \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e Each of these methods returns a boolean indicating success or failure.\n More information about a successful match can be obtained by querying the\n state of the matcher.\n\n \u003cp\u003e A matcher finds matches in a subset of its input called the\n \u003ci\u003eregion\u003c/i\u003e. By default, the region contains all of the matcher\u0027s input.\n The region can be modified via the{@link #region region} method and queried\n via the {@link #regionStart regionStart} and {@link #regionEnd regionEnd}\n methods. The way that the region boundaries interact with some pattern\n constructs can be changed. See {@link #useAnchoringBounds\n useAnchoringBounds} and {@link #useTransparentBounds useTransparentBounds}\n for more details.\n\n \u003cp\u003e This class also defines methods for replacing matched subsequences with\n new strings whose contents can, if desired, be computed from the match\n result.  The {@link #appendReplacement appendReplacement} and {@link\n #appendTail appendTail} methods can be used in tandem in order to collect\n the result into an existing string buffer, or the more convenient {@link\n #replaceAll replaceAll} method can be used to create a string in which every\n matching subsequence in the input sequence is replaced.\n\n \u003cp\u003e The explicit state of a matcher includes the start and end indices of\n the most recent successful match.  It also includes the start and end\n indices of the input subsequence captured by each \u003ca\n href\u003d\"Pattern.html#cg\"\u003ecapturing group\u003c/a\u003e in the pattern as well as a total\n count of such subsequences.  As a convenience, methods are also provided for\n returning these captured subsequences in string form.\n\n \u003cp\u003e The explicit state of a matcher is initially undefined; attempting to\n query any part of it before a successful match will cause an {@link\n IllegalStateException} to be thrown.  The explicit state of a matcher is\n recomputed by every match operation.\n\n \u003cp\u003e The implicit state of a matcher includes the input character sequence as\n well as the \u003ci\u003eappend position\u003c/i\u003e, which is initially zero and is updated\n by the {@link #appendReplacement appendReplacement} method.\n\n \u003cp\u003e A matcher may be reset explicitly by invoking its {@link #reset()}\n method or, if a new input sequence is desired, its {@link\n #reset(java.lang.CharSequence) reset(CharSequence)} method.  Resetting a\n matcher discards its explicit state information and sets the append position\n to zero.\n\n \u003cp\u003e Instances of this class are not safe for use by multiple concurrent\n threads. \u003c/p\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{},"package":"java.util.regex","superclass":"java.lang.Object","interfaces":["java.util.regex.MatchResult"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"pattern","comment":"Returns the pattern that is interpreted by this matcher.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Pattern","qualifiedName":"java.util.regex.Pattern","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toMatchResult","comment":"Returns the match state of this matcher as a {@link MatchResult}.\n The result is unaffected by subsequent operations performed upon this\n matcher.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MatchResult","qualifiedName":"java.util.regex.MatchResult","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"usePattern","comment":"Changes the \u003ctt\u003ePattern\u003c/tt\u003e that this \u003ctt\u003eMatcher\u003c/tt\u003e uses to\n find matches with.\n\n \u003cp\u003e This method causes this matcher to lose information\n about the groups of the last match that occurred. The\n matcher\u0027s position in the input is maintained and its\n last append position is unaffected.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.regex.Pattern)","flatSignature":"(Pattern)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newPattern","type":{"isPrimitive":false,"simpleName":"Pattern","qualifiedName":"java.util.regex.Pattern","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reset","comment":"Resets this matcher.\n\n \u003cp\u003e Resetting a matcher discards all of its explicit state information\n and sets its append position to zero. The matcher\u0027s region is set to the\n default region, which is its entire character sequence. The anchoring\n and transparency of this matcher\u0027s region boundaries are unaffected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Resets this matcher with a new input sequence.\n\n \u003cp\u003e Resetting a matcher discards all of its explicit state information\n and sets its append position to zero.  The matcher\u0027s region is set to\n the default region, which is its entire character sequence.  The\n anchoring and transparency of this matcher\u0027s region boundaries are\n unaffected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"input","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"start","comment":"Returns the start index of the previous match.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"start","comment":"Returns the start index of the subsequence captured by the given group\n during the previous match operation.\n\n \u003cp\u003e \u003ca href\u003d\"Pattern.html#cg\"\u003eCapturing groups\u003c/a\u003e are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression \u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(0)\u003c/tt\u003e is equivalent to\n \u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart()\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"start","comment":"Returns the start index of the subsequence captured by the given\n \u003ca href\u003d\"Pattern.html#groupname\"\u003enamed-capturing group\u003c/a\u003e during the\n previous match operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"end","comment":"Returns the offset after the last character matched.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"end","comment":"Returns the offset after the last character of the subsequence\n captured by the given group during the previous match operation.\n\n \u003cp\u003e \u003ca href\u003d\"Pattern.html#cg\"\u003eCapturing groups\u003c/a\u003e are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression \u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend(0)\u003c/tt\u003e is equivalent to\n \u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend()\u003c/tt\u003e.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"end","comment":"Returns the offset after the last character of the subsequence\n captured by the given \u003ca href\u003d\"Pattern.html#groupname\"\u003enamed-capturing\n group\u003c/a\u003e during the previous match operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"group","comment":"Returns the input subsequence matched by the previous match.\n\n \u003cp\u003e For a matcher \u003ci\u003em\u003c/i\u003e with input sequence \u003ci\u003es\u003c/i\u003e,\n the expressions \u003ci\u003em.\u003c/i\u003e\u003ctt\u003egroup()\u003c/tt\u003e and\n \u003ci\u003es.\u003c/i\u003e\u003ctt\u003esubstring(\u003c/tt\u003e\u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(),\u003c/tt\u003e\u0026nbsp;\u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend())\u003c/tt\u003e\n are equivalent.  \u003c/p\u003e\n\n \u003cp\u003e Note that some patterns, for example \u003ctt\u003ea*\u003c/tt\u003e, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"group","comment":"Returns the input subsequence captured by the given group during the\n previous match operation.\n\n \u003cp\u003e For a matcher \u003ci\u003em\u003c/i\u003e, input sequence \u003ci\u003es\u003c/i\u003e, and group index\n \u003ci\u003eg\u003c/i\u003e, the expressions \u003ci\u003em.\u003c/i\u003e\u003ctt\u003egroup(\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e and\n \u003ci\u003es.\u003c/i\u003e\u003ctt\u003esubstring(\u003c/tt\u003e\u003ci\u003em.\u003c/i\u003e\u003ctt\u003estart(\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\u003ctt\u003e),\u003c/tt\u003e\u0026nbsp;\u003ci\u003em.\u003c/i\u003e\u003ctt\u003eend(\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\u003ctt\u003e))\u003c/tt\u003e\n are equivalent.  \u003c/p\u003e\n\n \u003cp\u003e \u003ca href\u003d\"Pattern.html#cg\"\u003eCapturing groups\u003c/a\u003e are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression \u003ctt\u003em.group(0)\u003c/tt\u003e is equivalent to \u003ctt\u003em.group()\u003c/tt\u003e.\n \u003c/p\u003e\n\n \u003cp\u003e If the match was successful but the group specified failed to match\n any part of the input sequence, then \u003ctt\u003enull\u003c/tt\u003e is returned. Note\n that some groups, for example \u003ctt\u003e(a*)\u003c/tt\u003e, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"group","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"group","comment":"Returns the input subsequence captured by the given\n \u003ca href\u003d\"Pattern.html#groupname\"\u003enamed-capturing group\u003c/a\u003e during the previous\n match operation.\n\n \u003cp\u003e If the match was successful but the group specified failed to match\n any part of the input sequence, then \u003ctt\u003enull\u003c/tt\u003e is returned. Note\n that some groups, for example \u003ctt\u003e(a*)\u003c/tt\u003e, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"groupCount","comment":"Returns the number of capturing groups in this matcher\u0027s pattern.\n\n \u003cp\u003e Group zero denotes the entire pattern by convention. It is not\n included in this count.\n\n \u003cp\u003e Any non-negative integer smaller than or equal to the value\n returned by this method is guaranteed to be a valid group index for\n this matcher.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"matches","comment":"Attempts to match the entire region against the pattern.\n\n \u003cp\u003e If the match succeeds then more information can be obtained via the\n \u003ctt\u003estart\u003c/tt\u003e, \u003ctt\u003eend\u003c/tt\u003e, and \u003ctt\u003egroup\u003c/tt\u003e methods.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"find","comment":"Attempts to find the next subsequence of the input sequence that matches\n the pattern.\n\n \u003cp\u003e This method starts at the beginning of this matcher\u0027s region, or, if\n a previous invocation of the method was successful and the matcher has\n not since been reset, at the first character not matched by the previous\n match.\n\n \u003cp\u003e If the match succeeds then more information can be obtained via the\n \u003ctt\u003estart\u003c/tt\u003e, \u003ctt\u003eend\u003c/tt\u003e, and \u003ctt\u003egroup\u003c/tt\u003e methods.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"find","comment":"Resets this matcher and then attempts to find the next subsequence of\n the input sequence that matches the pattern, starting at the specified\n index.\n\n \u003cp\u003e If the match succeeds then more information can be obtained via the\n \u003ctt\u003estart\u003c/tt\u003e, \u003ctt\u003eend\u003c/tt\u003e, and \u003ctt\u003egroup\u003c/tt\u003e methods, and subsequent\n invocations of the {@link #find()} method will start at the first\n character not matched by this match.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lookingAt","comment":"Attempts to match the input sequence, starting at the beginning of the\n region, against the pattern.\n\n \u003cp\u003e Like the {@link #matches matches} method, this method always starts\n at the beginning of the region; unlike that method, it does not\n require that the entire region be matched.\n\n \u003cp\u003e If the match succeeds then more information can be obtained via the\n \u003ctt\u003estart\u003c/tt\u003e, \u003ctt\u003eend\u003c/tt\u003e, and \u003ctt\u003egroup\u003c/tt\u003e methods.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"quoteReplacement","comment":"Returns a literal replacement \u003ccode\u003eString\u003c/code\u003e for the specified\n \u003ccode\u003eString\u003c/code\u003e.\n\n This method produces a \u003ccode\u003eString\u003c/code\u003e that will work\n as a literal replacement \u003ccode\u003es\u003c/code\u003e in the\n \u003ccode\u003eappendReplacement\u003c/code\u003e method of the {@link Matcher} class.\n The \u003ccode\u003eString\u003c/code\u003e produced will match the sequence of characters\n in \u003ccode\u003es\u003c/code\u003e treated as a literal sequence. Slashes (\u0027\\\u0027) and\n dollar signs (\u0027$\u0027) will be given no special meaning.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"appendReplacement","comment":"Implements a non-terminal append-and-replace step.\n\n \u003cp\u003e This method performs the following actions: \u003c/p\u003e\n\n \u003col\u003e\n\n   \u003cli\u003e\u003cp\u003e It reads characters from the input sequence, starting at the\n   append position, and appends them to the given string buffer.  It\n   stops after reading the last character preceding the previous match,\n   that is, the character at index {@link\n   #start()}\u0026nbsp;\u003ctt\u003e-\u003c/tt\u003e\u0026nbsp;\u003ctt\u003e1\u003c/tt\u003e.  \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e It appends the given replacement string to the string buffer.\n   \u003c/p\u003e\u003c/li\u003e\n\n   \u003cli\u003e\u003cp\u003e It sets the append position of this matcher to the index of\n   the last character matched, plus one, that is, to {@link #end()}.\n   \u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e The replacement string may contain references to subsequences\n captured during the previous match: Each occurrence of\n \u003ctt\u003e${\u003c/tt\u003e\u003ci\u003ename\u003c/i\u003e\u003ctt\u003e}\u003c/tt\u003e or \u003ctt\u003e$\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e\n will be replaced by the result of evaluating the corresponding\n {@link #group(String) group(name)} or {@link #group(int) group(g)}\n respectively. For  \u003ctt\u003e$\u003c/tt\u003e\u003ci\u003eg\u003c/i\u003e,\n the first number after the \u003ctt\u003e$\u003c/tt\u003e is always treated as part of\n the group reference. Subsequent numbers are incorporated into g if\n they would form a legal group reference. Only the numerals \u00270\u0027\n through \u00279\u0027 are considered as potential components of the group\n reference. If the second group matched the string \u003ctt\u003e\"foo\"\u003c/tt\u003e, for\n example, then passing the replacement string \u003ctt\u003e\"$2bar\"\u003c/tt\u003e would\n cause \u003ctt\u003e\"foobar\"\u003c/tt\u003e to be appended to the string buffer. A dollar\n sign (\u003ctt\u003e$\u003c/tt\u003e) may be included as a literal in the replacement\n string by preceding it with a backslash (\u003ctt\u003e\\$\u003c/tt\u003e).\n\n \u003cp\u003e Note that backslashes (\u003ctt\u003e\\\u003c/tt\u003e) and dollar signs (\u003ctt\u003e$\u003c/tt\u003e) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n \u003cp\u003e This method is intended to be used in a loop together with the\n {@link #appendTail appendTail} and {@link #find find} methods.  The\n following code, for example, writes \u003ctt\u003eone dog two dogs in the\n yard\u003c/tt\u003e to the standard-output stream: \u003c/p\u003e\n\n \u003cblockquote\u003e\u003cpre\u003e\n Pattern p \u003d Pattern.compile(\"cat\");\n Matcher m \u003d p.matcher(\"one cat two cats in the yard\");\n StringBuffer sb \u003d new StringBuffer();\n while (m.find()) {\n     m.appendReplacement(sb, \"dog\");\n }\n m.appendTail(sb);\n System.out.println(sb.toString());\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.StringBuffer, java.lang.String)","flatSignature":"(StringBuffer, String)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"sb","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"replacement","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"appendTail","comment":"Implements a terminal append-and-replace step.\n\n \u003cp\u003e This method reads characters from the input sequence, starting at\n the append position, and appends them to the given string buffer.  It is\n intended to be invoked after one or more invocations of the {@link\n #appendReplacement appendReplacement} method in order to copy the\n remainder of the input sequence.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.StringBuffer)","flatSignature":"(StringBuffer)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"sb","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"Replaces every subsequence of the input sequence that matches the\n pattern with the given replacement string.\n\n \u003cp\u003e This method first resets this matcher.  It then scans the input\n sequence looking for matches of the pattern.  Characters that are not\n part of any match are appended directly to the result string; each match\n is replaced in the result by the replacement string.  The replacement\n string may contain references to captured subsequences as in the {@link\n #appendReplacement appendReplacement} method.\n\n \u003cp\u003e Note that backslashes (\u003ctt\u003e\\\u003c/tt\u003e) and dollar signs (\u003ctt\u003e$\u003c/tt\u003e) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n \u003cp\u003e Given the regular expression \u003ctt\u003ea*b\u003c/tt\u003e, the input\n \u003ctt\u003e\"aabfooaabfooabfoob\"\u003c/tt\u003e, and the replacement string\n \u003ctt\u003e\"-\"\u003c/tt\u003e, an invocation of this method on a matcher for that\n expression would yield the string \u003ctt\u003e\"-foo-foo-foo-\"\u003c/tt\u003e.\n\n \u003cp\u003e Invoking this method changes this matcher\u0027s state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"replacement","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceFirst","comment":"Replaces the first subsequence of the input sequence that matches the\n pattern with the given replacement string.\n\n \u003cp\u003e This method first resets this matcher.  It then scans the input\n sequence looking for a match of the pattern.  Characters that are not\n part of the match are appended directly to the result string; the match\n is replaced in the result by the replacement string.  The replacement\n string may contain references to captured subsequences as in the {@link\n #appendReplacement appendReplacement} method.\n\n \u003cp\u003eNote that backslashes (\u003ctt\u003e\\\u003c/tt\u003e) and dollar signs (\u003ctt\u003e$\u003c/tt\u003e) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n \u003cp\u003e Given the regular expression \u003ctt\u003edog\u003c/tt\u003e, the input\n \u003ctt\u003e\"zzzdogzzzdogzzz\"\u003c/tt\u003e, and the replacement string\n \u003ctt\u003e\"cat\"\u003c/tt\u003e, an invocation of this method on a matcher for that\n expression would yield the string \u003ctt\u003e\"zzzcatzzzdogzzz\"\u003c/tt\u003e.  \u003c/p\u003e\n\n \u003cp\u003e Invoking this method changes this matcher\u0027s state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"replacement","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"region","comment":"Sets the limits of this matcher\u0027s region. The region is the part of the\n input sequence that will be searched to find a match. Invoking this\n method resets the matcher, and then sets the region to start at the\n index specified by the \u003ccode\u003estart\u003c/code\u003e parameter and end at the\n index specified by the \u003ccode\u003eend\u003c/code\u003e parameter.\n\n \u003cp\u003eDepending on the transparency and anchoring being used (see\n {@link #useTransparentBounds useTransparentBounds} and\n {@link #useAnchoringBounds useAnchoringBounds}), certain constructs such\n as anchors may behave differently at or around the boundaries of the\n region.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"end","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"regionStart","comment":"Reports the start index of this matcher\u0027s region. The\n searches this matcher conducts are limited to finding matches\n within {@link #regionStart regionStart} (inclusive) and\n {@link #regionEnd regionEnd} (exclusive).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"regionEnd","comment":"Reports the end index (exclusive) of this matcher\u0027s region.\n The searches this matcher conducts are limited to finding matches\n within {@link #regionStart regionStart} (inclusive) and\n {@link #regionEnd regionEnd} (exclusive).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasTransparentBounds","comment":"Queries the transparency of region bounds for this matcher.\n\n \u003cp\u003e This method returns \u003ctt\u003etrue\u003c/tt\u003e if this matcher uses\n \u003ci\u003etransparent\u003c/i\u003e bounds, \u003ctt\u003efalse\u003c/tt\u003e if it uses \u003ci\u003eopaque\u003c/i\u003e\n bounds.\n\n \u003cp\u003e See {@link #useTransparentBounds useTransparentBounds} for a\n description of transparent and opaque bounds.\n\n \u003cp\u003e By default, a matcher uses opaque region boundaries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"useTransparentBounds","comment":"Sets the transparency of region bounds for this matcher.\n\n \u003cp\u003e Invoking this method with an argument of \u003ctt\u003etrue\u003c/tt\u003e will set this\n matcher to use \u003ci\u003etransparent\u003c/i\u003e bounds. If the boolean\n argument is \u003ctt\u003efalse\u003c/tt\u003e, then \u003ci\u003eopaque\u003c/i\u003e bounds will be used.\n\n \u003cp\u003e Using transparent bounds, the boundaries of this\n matcher\u0027s region are transparent to lookahead, lookbehind,\n and boundary matching constructs. Those constructs can see beyond the\n boundaries of the region to see if a match is appropriate.\n\n \u003cp\u003e Using opaque bounds, the boundaries of this matcher\u0027s\n region are opaque to lookahead, lookbehind, and boundary matching\n constructs that may try to see beyond them. Those constructs cannot\n look past the boundaries so they will fail to match anything outside\n of the region.\n\n \u003cp\u003e By default, a matcher uses opaque bounds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasAnchoringBounds","comment":"Queries the anchoring of region bounds for this matcher.\n\n \u003cp\u003e This method returns \u003ctt\u003etrue\u003c/tt\u003e if this matcher uses\n \u003ci\u003eanchoring\u003c/i\u003e bounds, \u003ctt\u003efalse\u003c/tt\u003e otherwise.\n\n \u003cp\u003e See {@link #useAnchoringBounds useAnchoringBounds} for a\n description of anchoring bounds.\n\n \u003cp\u003e By default, a matcher uses anchoring region boundaries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"useAnchoringBounds","comment":"Sets the anchoring of region bounds for this matcher.\n\n \u003cp\u003e Invoking this method with an argument of \u003ctt\u003etrue\u003c/tt\u003e will set this\n matcher to use \u003ci\u003eanchoring\u003c/i\u003e bounds. If the boolean\n argument is \u003ctt\u003efalse\u003c/tt\u003e, then \u003ci\u003enon-anchoring\u003c/i\u003e bounds will be\n used.\n\n \u003cp\u003e Using anchoring bounds, the boundaries of this\n matcher\u0027s region match anchors such as ^ and $.\n\n \u003cp\u003e Without anchoring bounds, the boundaries of this\n matcher\u0027s region will not match anchors such as ^ and $.\n\n \u003cp\u003e By default, a matcher uses anchoring region boundaries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"Matcher","qualifiedName":"java.util.regex.Matcher","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"\u003cp\u003eReturns the string representation of this matcher. The\n string representation of a \u003ccode\u003eMatcher\u003c/code\u003e contains information\n that may be useful for debugging. The exact format is unspecified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hitEnd","comment":"\u003cp\u003eReturns true if the end of input was hit by the search engine in\n the last match operation performed by this matcher.\n\n \u003cp\u003eWhen this method returns true, then it is possible that more input\n would have changed the result of the last search.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"requireEnd","comment":"\u003cp\u003eReturns true if more input could change a positive match into a\n negative one.\n\n \u003cp\u003eIf this method returns true, and a match was found, then more\n input could cause the match to be lost. If this method returns false\n and a match was found, then more input might change the match but the\n match won\u0027t be lost. If a match was not found, then requireEnd has no\n meaning.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}