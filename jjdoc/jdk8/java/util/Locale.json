{"name":"Locale","comment":"A \u003ccode\u003eLocale\u003c/code\u003e object represents a specific geographical, political,\n or cultural region. An operation that requires a \u003ccode\u003eLocale\u003c/code\u003e to perform\n its task is called \u003cem\u003elocale-sensitive\u003c/em\u003e and uses the \u003ccode\u003eLocale\u003c/code\u003e\n to tailor information for the user. For example, displaying a number\n is a locale-sensitive operation\u0026mdash; the number should be formatted\n according to the customs and conventions of the user\u0027s native country,\n region, or culture.\n\n \u003cp\u003e The {@code Locale} class implements IETF BCP 47 which is composed of\n \u003ca href\u003d\"http://tools.ietf.org/html/rfc4647\"\u003eRFC 4647 \"Matching of Language\n Tags\"\u003c/a\u003e and \u003ca href\u003d\"http://tools.ietf.org/html/rfc5646\"\u003eRFC 5646 \"Tags\n for Identifying Languages\"\u003c/a\u003e with support for the LDML (UTS#35, \"Unicode\n Locale Data Markup Language\") BCP 47-compatible extensions for locale data\n exchange.\n\n \u003cp\u003e A \u003ccode\u003eLocale\u003c/code\u003e object logically consists of the fields\n described below.\n\n \u003cdl\u003e\n   \u003cdt\u003e\u003ca name\u003d\"def_language\"\u003e\u003cb\u003elanguage\u003c/b\u003e\u003c/a\u003e\u003c/dt\u003e\n\n   \u003cdd\u003eISO 639 alpha-2 or alpha-3 language code, or registered\n   language subtags up to 8 alpha letters (for future enhancements).\n   When a language has both an alpha-2 code and an alpha-3 code, the\n   alpha-2 code must be used.  You can find a full list of valid\n   language codes in the IANA Language Subtag Registry (search for\n   \"Type: language\").  The language field is case insensitive, but\n   \u003ccode\u003eLocale\u003c/code\u003e always canonicalizes to lower case.\u003c/dd\u003e\n\n   \u003cdd\u003eWell-formed language values have the form\n   \u003ccode\u003e[a-zA-Z]{2,8}\u003c/code\u003e.  Note that this is not the the full\n   BCP47 language production, since it excludes extlang.  They are\n   not needed since modern three-letter language codes replace\n   them.\u003c/dd\u003e\n\n   \u003cdd\u003eExample: \"en\" (English), \"ja\" (Japanese), \"kok\" (Konkani)\u003c/dd\u003e\n\n   \u003cdt\u003e\u003ca name\u003d\"def_script\"\u003e\u003cb\u003escript\u003c/b\u003e\u003c/a\u003e\u003c/dt\u003e\n\n   \u003cdd\u003eISO 15924 alpha-4 script code.  You can find a full list of\n   valid script codes in the IANA Language Subtag Registry (search\n   for \"Type: script\").  The script field is case insensitive, but\n   \u003ccode\u003eLocale\u003c/code\u003e always canonicalizes to title case (the first\n   letter is upper case and the rest of the letters are lower\n   case).\u003c/dd\u003e\n\n   \u003cdd\u003eWell-formed script values have the form\n   \u003ccode\u003e[a-zA-Z]{4}\u003c/code\u003e\u003c/dd\u003e\n\n   \u003cdd\u003eExample: \"Latn\" (Latin), \"Cyrl\" (Cyrillic)\u003c/dd\u003e\n\n   \u003cdt\u003e\u003ca name\u003d\"def_region\"\u003e\u003cb\u003ecountry (region)\u003c/b\u003e\u003c/a\u003e\u003c/dt\u003e\n\n   \u003cdd\u003eISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.\n   You can find a full list of valid country and region codes in the\n   IANA Language Subtag Registry (search for \"Type: region\").  The\n   country (region) field is case insensitive, but\n   \u003ccode\u003eLocale\u003c/code\u003e always canonicalizes to upper case.\u003c/dd\u003e\n\n   \u003cdd\u003eWell-formed country/region values have\n   the form \u003ccode\u003e[a-zA-Z]{2} | [0-9]{3}\u003c/code\u003e\u003c/dd\u003e\n\n   \u003cdd\u003eExample: \"US\" (United States), \"FR\" (France), \"029\"\n   (Caribbean)\u003c/dd\u003e\n\n   \u003cdt\u003e\u003ca name\u003d\"def_variant\"\u003e\u003cb\u003evariant\u003c/b\u003e\u003c/a\u003e\u003c/dt\u003e\n\n   \u003cdd\u003eAny arbitrary value used to indicate a variation of a\n   \u003ccode\u003eLocale\u003c/code\u003e.  Where there are two or more variant values\n   each indicating its own semantics, these values should be ordered\n   by importance, with most important first, separated by\n   underscore(\u0027_\u0027).  The variant field is case sensitive.\u003c/dd\u003e\n\n   \u003cdd\u003eNote: IETF BCP 47 places syntactic restrictions on variant\n   subtags.  Also BCP 47 subtags are strictly used to indicate\n   additional variations that define a language or its dialects that\n   are not covered by any combinations of language, script and\n   region subtags.  You can find a full list of valid variant codes\n   in the IANA Language Subtag Registry (search for \"Type: variant\").\n\n   \u003cp\u003eHowever, the variant field in \u003ccode\u003eLocale\u003c/code\u003e has\n   historically been used for any kind of variation, not just\n   language variations.  For example, some supported variants\n   available in Java SE Runtime Environments indicate alternative\n   cultural behaviors such as calendar type or number script.  In\n   BCP 47 this kind of information, which does not identify the\n   language, is supported by extension subtags or private use\n   subtags.\u003c/dd\u003e\n\n   \u003cdd\u003eWell-formed variant values have the form \u003ccode\u003eSUBTAG\n   ((\u0027_\u0027|\u0027-\u0027) SUBTAG)*\u003c/code\u003e where \u003ccode\u003eSUBTAG \u003d\n   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}\u003c/code\u003e. (Note: BCP 47 only\n   uses hyphen (\u0027-\u0027) as a delimiter, this is more lenient).\u003c/dd\u003e\n\n   \u003cdd\u003eExample: \"polyton\" (Polytonic Greek), \"POSIX\"\u003c/dd\u003e\n\n   \u003cdt\u003e\u003ca name\u003d\"def_extensions\"\u003e\u003cb\u003eextensions\u003c/b\u003e\u003c/a\u003e\u003c/dt\u003e\n\n   \u003cdd\u003eA map from single character keys to string values, indicating\n   extensions apart from language identification.  The extensions in\n   \u003ccode\u003eLocale\u003c/code\u003e implement the semantics and syntax of BCP 47\n   extension subtags and private use subtags. The extensions are\n   case insensitive, but \u003ccode\u003eLocale\u003c/code\u003e canonicalizes all\n   extension keys and values to lower case. Note that extensions\n   cannot have empty values.\u003c/dd\u003e\n\n   \u003cdd\u003eWell-formed keys are single characters from the set\n   \u003ccode\u003e[0-9a-zA-Z]\u003c/code\u003e.  Well-formed values have the form\n   \u003ccode\u003eSUBTAG (\u0027-\u0027 SUBTAG)*\u003c/code\u003e where for the key \u0027x\u0027\n   \u003ccode\u003eSUBTAG \u003d [0-9a-zA-Z]{1,8}\u003c/code\u003e and for other keys\n   \u003ccode\u003eSUBTAG \u003d [0-9a-zA-Z]{2,8}\u003c/code\u003e (that is, \u0027x\u0027 allows\n   single-character subtags).\u003c/dd\u003e\n\n   \u003cdd\u003eExample: key\u003d\"u\"/value\u003d\"ca-japanese\" (Japanese Calendar),\n   key\u003d\"x\"/value\u003d\"java-1-7\"\u003c/dd\u003e\n \u003c/dl\u003e\n\n \u003cb\u003eNote:\u003c/b\u003e Although BCP 47 requires field values to be registered\n in the IANA Language Subtag Registry, the \u003ccode\u003eLocale\u003c/code\u003e class\n does not provide any validation features.  The \u003ccode\u003eBuilder\u003c/code\u003e\n only checks if an individual field satisfies the syntactic\n requirement (is well-formed), but does not validate the value\n itself.  See {@link Builder} for details.\n\n \u003ch3\u003e\u003ca name\u003d\"def_locale_extension\"\u003eUnicode locale/language extension\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003eUTS#35, \"Unicode Locale Data Markup Language\" defines optional\n attributes and keywords to override or refine the default behavior\n associated with a locale.  A keyword is represented by a pair of\n key and type.  For example, \"nu-thai\" indicates that Thai local\n digits (value:\"thai\") should be used for formatting numbers\n (key:\"nu\").\n\n \u003cp\u003eThe keywords are mapped to a BCP 47 extension value using the\n extension key \u0027u\u0027 ({@link #UNICODE_LOCALE_EXTENSION}).  The above\n example, \"nu-thai\", becomes the extension \"u-nu-thai\".code\n\n \u003cp\u003eThus, when a \u003ccode\u003eLocale\u003c/code\u003e object contains Unicode locale\n attributes and keywords,\n \u003ccode\u003egetExtension(UNICODE_LOCALE_EXTENSION)\u003c/code\u003e will return a\n String representing this information, for example, \"nu-thai\".  The\n \u003ccode\u003eLocale\u003c/code\u003e class also provides {@link\n #getUnicodeLocaleAttributes}, {@link #getUnicodeLocaleKeys}, and\n {@link #getUnicodeLocaleType} which allow you to access Unicode\n locale attributes and key/type pairs directly.  When represented as\n a string, the Unicode Locale Extension lists attributes\n alphabetically, followed by key/type sequences with keys listed\n alphabetically (the order of subtags comprising a key\u0027s type is\n fixed when the type is defined)\n\n \u003cp\u003eA well-formed locale key has the form\n \u003ccode\u003e[0-9a-zA-Z]{2}\u003c/code\u003e.  A well-formed locale type has the\n form \u003ccode\u003e\"\" | [0-9a-zA-Z]{3,8} (\u0027-\u0027 [0-9a-zA-Z]{3,8})*\u003c/code\u003e (it\n can be empty, or a series of subtags 3-8 alphanums in length).  A\n well-formed locale attribute has the form\n \u003ccode\u003e[0-9a-zA-Z]{3,8}\u003c/code\u003e (it is a single subtag with the same\n form as a locale type subtag).\n\n \u003cp\u003eThe Unicode locale extension specifies optional behavior in\n locale-sensitive services.  Although the LDML specification defines\n various keys and values, actual locale-sensitive service\n implementations in a Java Runtime Environment might not support any\n particular Unicode locale attributes or key/type pairs.\n\n \u003ch4\u003eCreating a Locale\u003c/h4\u003e\n\n \u003cp\u003eThere are several different ways to create a \u003ccode\u003eLocale\u003c/code\u003e\n object.\n\n \u003ch5\u003eBuilder\u003c/h5\u003e\n\n \u003cp\u003eUsing {@link Builder} you can construct a \u003ccode\u003eLocale\u003c/code\u003e object\n that conforms to BCP 47 syntax.\n\n \u003ch5\u003eConstructors\u003c/h5\u003e\n\n \u003cp\u003eThe \u003ccode\u003eLocale\u003c/code\u003e class provides three constructors:\n \u003cblockquote\u003e\n \u003cpre\u003e\n     {@link #Locale(String language)}\n     {@link #Locale(String language, String country)}\n     {@link #Locale(String language, String country, String variant)}\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n These constructors allow you to create a \u003ccode\u003eLocale\u003c/code\u003e object\n with language, country and variant, but you cannot specify\n script or extensions.\n\n \u003ch5\u003eFactory Methods\u003c/h5\u003e\n\n \u003cp\u003eThe method {@link #forLanguageTag} creates a \u003ccode\u003eLocale\u003c/code\u003e\n object for a well-formed BCP 47 language tag.\n\n \u003ch5\u003eLocale Constants\u003c/h5\u003e\n\n \u003cp\u003eThe \u003ccode\u003eLocale\u003c/code\u003e class provides a number of convenient constants\n that you can use to create \u003ccode\u003eLocale\u003c/code\u003e objects for commonly used\n locales. For example, the following creates a \u003ccode\u003eLocale\u003c/code\u003e object\n for the United States:\n \u003cblockquote\u003e\n \u003cpre\u003e\n     Locale.US\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003ch4\u003e\u003ca name\u003d\"LocaleMatching\"\u003eLocale Matching\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003eIf an application or a system is internationalized and provides localized\n resources for multiple locales, it sometimes needs to find one or more\n locales (or language tags) which meet each user\u0027s specific preferences. Note\n that a term \"language tag\" is used interchangeably with \"locale\" in this\n locale matching documentation.\n\n \u003cp\u003eIn order to do matching a user\u0027s preferred locales to a set of language\n tags, \u003ca href\u003d\"http://tools.ietf.org/html/rfc4647\"\u003eRFC 4647 Matching of\n Language Tags\u003c/a\u003e defines two mechanisms: filtering and lookup.\n \u003cem\u003eFiltering\u003c/em\u003e is used to get all matching locales, whereas\n \u003cem\u003elookup\u003c/em\u003e is to choose the best matching locale.\n Matching is done case-insensitively. These matching mechanisms are described\n in the following sections.\n\n \u003cp\u003eA user\u0027s preference is called a \u003cem\u003eLanguage Priority List\u003c/em\u003e and is\n expressed as a list of language ranges. There are syntactically two types of\n language ranges: basic and extended. See\n {@link Locale.LanguageRange Locale.LanguageRange} for details.\n\n \u003ch5\u003eFiltering\u003c/h5\u003e\n\n \u003cp\u003eThe filtering operation returns all matching language tags. It is defined\n in RFC 4647 as follows:\n \"In filtering, each language range represents the least specific language\n tag (that is, the language tag with fewest number of subtags) that is an\n acceptable match. All of the language tags in the matching set of tags will\n have an equal or greater number of subtags than the language range. Every\n non-wildcard subtag in the language range will appear in every one of the\n matching language tags.\"\n\n \u003cp\u003eThere are two types of filtering: filtering for basic language ranges\n (called \"basic filtering\") and filtering for extended language ranges\n (called \"extended filtering\"). They may return different results by what\n kind of language ranges are included in the given Language Priority List.\n {@link Locale.FilteringMode} is a parameter to specify how filtering should\n be done.\n\n \u003ch5\u003eLookup\u003c/h5\u003e\n\n \u003cp\u003eThe lookup operation returns the best matching language tags. It is\n defined in RFC 4647 as follows:\n \"By contrast with filtering, each language range represents the most\n specific tag that is an acceptable match.  The first matching tag found,\n according to the user\u0027s priority, is considered the closest match and is the\n item returned.\"\n\n \u003cp\u003eFor example, if a Language Priority List consists of two language ranges,\n {@code \"zh-Hant-TW\"} and {@code \"en-US\"}, in prioritized order, lookup\n method progressively searches the language tags below in order to find the\n best matching language tag.\n \u003cblockquote\u003e\n \u003cpre\u003e\n    1. zh-Hant-TW\n    2. zh-Hant\n    3. zh\n    4. en-US\n    5. en\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n If there is a language tag which matches completely to a language range\n above, the language tag is returned.\n\n \u003cp\u003e{@code \"*\"} is the special language range, and it is ignored in lookup.\n\n \u003cp\u003eIf multiple language tags match as a result of the subtag {@code \u0027*\u0027}\n included in a language range, the first matching language tag returned by\n an {@link Iterator} over a {@link Collection} of language tags is treated as\n the best matching one.\n\n \u003ch4\u003eUse of Locale\u003c/h4\u003e\n\n \u003cp\u003eOnce you\u0027ve created a \u003ccode\u003eLocale\u003c/code\u003e you can query it for information\n about itself. Use \u003ccode\u003egetCountry\u003c/code\u003e to get the country (or region)\n code and \u003ccode\u003egetLanguage\u003c/code\u003e to get the language code.\n You can use \u003ccode\u003egetDisplayCountry\u003c/code\u003e to get the\n name of the country suitable for displaying to the user. Similarly,\n you can use \u003ccode\u003egetDisplayLanguage\u003c/code\u003e to get the name of\n the language suitable for displaying to the user. Interestingly,\n the \u003ccode\u003egetDisplayXXX\u003c/code\u003e methods are themselves locale-sensitive\n and have two versions: one that uses the default\n {@link Locale.Category#DISPLAY DISPLAY} locale and one\n that uses the locale specified as an argument.\n\n \u003cp\u003eThe Java Platform provides a number of classes that perform locale-sensitive\n operations. For example, the \u003ccode\u003eNumberFormat\u003c/code\u003e class formats\n numbers, currency, and percentages in a locale-sensitive manner. Classes\n such as \u003ccode\u003eNumberFormat\u003c/code\u003e have several convenience methods\n for creating a default object of that type. For example, the\n \u003ccode\u003eNumberFormat\u003c/code\u003e class provides these three convenience methods\n for creating a default \u003ccode\u003eNumberFormat\u003c/code\u003e object:\n \u003cblockquote\u003e\n \u003cpre\u003e\n     NumberFormat.getInstance()\n     NumberFormat.getCurrencyInstance()\n     NumberFormat.getPercentInstance()\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n Each of these methods has two variants; one with an explicit locale\n and one without; the latter uses the default\n {@link Locale.Category#FORMAT FORMAT} locale:\n \u003cblockquote\u003e\n \u003cpre\u003e\n     NumberFormat.getInstance(myLocale)\n     NumberFormat.getCurrencyInstance(myLocale)\n     NumberFormat.getPercentInstance(myLocale)\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n A \u003ccode\u003eLocale\u003c/code\u003e is the mechanism for identifying the kind of object\n (\u003ccode\u003eNumberFormat\u003c/code\u003e) that you would like to get. The locale is\n \u003cSTRONG\u003ejust\u003c/STRONG\u003e a mechanism for identifying objects,\n \u003cSTRONG\u003enot\u003c/STRONG\u003e a container for the objects themselves.\n\n \u003ch4\u003eCompatibility\u003c/h4\u003e\n\n \u003cp\u003eIn order to maintain compatibility with existing usage, Locale\u0027s\n constructors retain their behavior prior to the Java Runtime\n Environment version 1.7.  The same is largely true for the\n \u003ccode\u003etoString\u003c/code\u003e method. Thus Locale objects can continue to\n be used as they were. In particular, clients who parse the output\n of toString into language, country, and variant fields can continue\n to do so (although this is strongly discouraged), although the\n variant field will have additional information in it if script or\n extensions are present.\n\n \u003cp\u003eIn addition, BCP 47 imposes syntax restrictions that are not\n imposed by Locale\u0027s constructors. This means that conversions\n between some Locales and BCP 47 language tags cannot be made without\n losing information. Thus \u003ccode\u003etoLanguageTag\u003c/code\u003e cannot\n represent the state of locales whose language, country, or variant\n do not conform to BCP 47.\n\n \u003cp\u003eBecause of these issues, it is recommended that clients migrate\n away from constructing non-conforming locales and use the\n \u003ccode\u003eforLanguageTag\u003c/code\u003e and \u003ccode\u003eLocale.Builder\u003c/code\u003e APIs instead.\n Clients desiring a string representation of the complete locale can\n then always rely on \u003ccode\u003etoLanguageTag\u003c/code\u003e for this purpose.\n\n \u003ch5\u003e\u003ca name\u003d\"special_cases_constructor\"\u003eSpecial cases\u003c/a\u003e\u003c/h5\u003e\n\n \u003cp\u003eFor compatibility reasons, two\n non-conforming locales are treated as special cases.  These are\n \u003cb\u003e\u003ctt\u003eja_JP_JP\u003c/tt\u003e\u003c/b\u003e and \u003cb\u003e\u003ctt\u003eth_TH_TH\u003c/tt\u003e\u003c/b\u003e. These are ill-formed\n in BCP 47 since the variants are too short. To ease migration to BCP 47,\n these are treated specially during construction.  These two cases (and only\n these) cause a constructor to generate an extension, all other values behave\n exactly as they did prior to Java 7.\n\n \u003cp\u003eJava has used \u003ctt\u003eja_JP_JP\u003c/tt\u003e to represent Japanese as used in\n Japan together with the Japanese Imperial calendar. This is now\n representable using a Unicode locale extension, by specifying the\n Unicode locale key \u003ctt\u003eca\u003c/tt\u003e (for \"calendar\") and type\n \u003ctt\u003ejapanese\u003c/tt\u003e. When the Locale constructor is called with the\n arguments \"ja\", \"JP\", \"JP\", the extension \"u-ca-japanese\" is\n automatically added.\n\n \u003cp\u003eJava has used \u003ctt\u003eth_TH_TH\u003c/tt\u003e to represent Thai as used in\n Thailand together with Thai digits. This is also now representable using\n a Unicode locale extension, by specifying the Unicode locale key\n \u003ctt\u003enu\u003c/tt\u003e (for \"number\") and value \u003ctt\u003ethai\u003c/tt\u003e. When the Locale\n constructor is called with the arguments \"th\", \"TH\", \"TH\", the\n extension \"u-nu-thai\" is automatically added.\n\n \u003ch5\u003eSerialization\u003c/h5\u003e\n\n \u003cp\u003eDuring serialization, writeObject writes all fields to the output\n stream, including extensions.\n\n \u003cp\u003eDuring deserialization, readResolve adds extensions as described\n in \u003ca href\u003d\"#special_cases_constructor\"\u003eSpecial Cases\u003c/a\u003e, only\n for the two cases th_TH_TH and ja_JP_JP.\n\n \u003ch5\u003eLegacy language codes\u003c/h5\u003e\n\n \u003cp\u003eLocale\u0027s constructor has always converted three language codes to\n their earlier, obsoleted forms: \u003ctt\u003ehe\u003c/tt\u003e maps to \u003ctt\u003eiw\u003c/tt\u003e,\n \u003ctt\u003eyi\u003c/tt\u003e maps to \u003ctt\u003eji\u003c/tt\u003e, and \u003ctt\u003eid\u003c/tt\u003e maps to\n \u003ctt\u003ein\u003c/tt\u003e.  This continues to be the case, in order to not break\n backwards compatibility.\n\n \u003cp\u003eThe APIs added in 1.7 map between the old and new language codes,\n maintaining the old codes internal to Locale (so that\n \u003ccode\u003egetLanguage\u003c/code\u003e and \u003ccode\u003etoString\u003c/code\u003e reflect the old\n code), but using the new codes in the BCP 47 language tag APIs (so\n that \u003ccode\u003etoLanguageTag\u003c/code\u003e reflects the new one). This\n preserves the equivalence between Locales no matter which code or\n API is used to construct them. Java\u0027s default resource bundle\n lookup mechanism also implements this mapping, so that resources\n can be named using either convention, see {@link ResourceBundle.Control}.\n\n \u003ch5\u003eThree-letter language/country(region) codes\u003c/h5\u003e\n\n \u003cp\u003eThe Locale constructors have always specified that the language\n and the country param be two characters in length, although in\n practice they have accepted any length.  The specification has now\n been relaxed to allow language codes of two to eight characters and\n country (region) codes of two to three characters, and in\n particular, three-letter language codes and three-digit region\n codes as specified in the IANA Language Subtag Registry.  For\n compatibility, the implementation still does not impose a length\n constraint.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.1","innerClasses":["java.util.Locale.Category","java.util.Locale.Builder","java.util.Locale.FilteringMode","java.util.Locale.LanguageRange"],"isInnerClass":false,"constructors":[{"name":"Locale","comment":"Construct a locale from language, country and variant.\n This constructor normalizes the language value to lowercase and\n the country value to uppercase.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eISO 639 is not a stable standard; some of the language codes it defines\n (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n API on Locale will return only the OLD codes.\n \u003cli\u003eFor backward compatibility reasons, this constructor does not make\n any syntactic checks on the input.\n \u003cli\u003eThe two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially,\n see \u003ca href\u003d\"#special_cases_constructor\"\u003eSpecial Cases\u003c/a\u003e for more information.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String)","parameters":[{"name":"language","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"country","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"variant","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Locale","comment":"Construct a locale from language and country.\n This constructor normalizes the language value to lowercase and\n the country value to uppercase.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eISO 639 is not a stable standard; some of the language codes it defines\n (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n API on Locale will return only the OLD codes.\n \u003cli\u003eFor backward compatibility reasons, this constructor does not make\n any syntactic checks on the input.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"language","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"country","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Locale","comment":"Construct a locale from a language code.\n This constructor normalizes the language value to lowercase.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eISO 639 is not a stable standard; some of the language codes it defines\n (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n API on Locale will return only the OLD codes.\n \u003cli\u003eFor backward compatibility reasons, this constructor does not make\n any syntactic checks on the input.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"language","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"ENGLISH","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"FRENCH","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"GERMAN","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"ITALIAN","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"JAPANESE","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"KOREAN","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"CHINESE","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"SIMPLIFIED_CHINESE","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"TRADITIONAL_CHINESE","comment":"Useful constant for language.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"FRANCE","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"GERMANY","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"ITALY","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"JAPAN","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"KOREA","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"CHINA","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"PRC","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"TAIWAN","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"UK","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"US","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"CANADA","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"CANADA_FRENCH","comment":"Useful constant for country.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"ROOT","comment":"Useful constant for the root locale.  The root locale is the locale whose\n language, country, and variant are empty (\"\") strings.  This is regarded\n as the base locale of all locales, and is used as the language/country\n neutral locale for the locale sensitive operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isStatic":true},{"name":"PRIVATE_USE_EXTENSION","comment":"The key for the private use extension (\u0027x\u0027).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"120"},{"name":"UNICODE_LOCALE_EXTENSION","comment":"The key for Unicode locale extension (\u0027u\u0027).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"117"}],"methods":[{"name":"getDefault","comment":"Gets the current value of the default locale for this instance\n of the Java Virtual Machine.\n \u003cp\u003e\n The Java Virtual Machine sets the default locale during startup\n based on the host environment. It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n It can be changed using the\n {@link #setDefault(java.util.Locale) setDefault} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getDefault","comment":"Gets the current value of the default locale for the specified Category\n for this instance of the Java Virtual Machine.\n \u003cp\u003e\n The Java Virtual Machine sets the default locale during startup based\n on the host environment. It is used by many locale-sensitive methods\n if no locale is explicitly specified. It can be changed using the\n setDefault(Locale.Category, Locale) method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale.Category)","flatSignature":"(Locale.Category)","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"category","type":{"isPrimitive":false,"simpleName":"Category","qualifiedName":"java.util.Locale.Category","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setDefault","comment":"Sets the default locale for this instance of the Java Virtual Machine.\n This does not affect the host locale.\n \u003cp\u003e\n If there is a security manager, its \u003ccode\u003echeckPermission\u003c/code\u003e\n method is called with a \u003ccode\u003ePropertyPermission(\"user.language\", \"write\")\u003c/code\u003e\n permission before the default locale is changed.\n \u003cp\u003e\n The Java Virtual Machine sets the default locale during startup\n based on the host environment. It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n \u003cp\u003e\n Since changing the default locale may affect many different areas\n of functionality, this method should only be used if the caller\n is prepared to reinitialize locale-sensitive code running\n within the same Java Virtual Machine.\n \u003cp\u003e\n By setting the default locale with this method, all of the default\n locales for each Category are also set to the specified default locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"newLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setDefault","comment":"Sets the default locale for the specified Category for this instance\n of the Java Virtual Machine. This does not affect the host locale.\n \u003cp\u003e\n If there is a security manager, its checkPermission method is called\n with a PropertyPermission(\"user.language\", \"write\") permission before\n the default locale is changed.\n \u003cp\u003e\n The Java Virtual Machine sets the default locale during startup based\n on the host environment. It is used by many locale-sensitive methods\n if no locale is explicitly specified.\n \u003cp\u003e\n Since changing the default locale may affect many different areas of\n functionality, this method should only be used if the caller is\n prepared to reinitialize locale-sensitive code running within the\n same Java Virtual Machine.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale.Category, java.util.Locale)","flatSignature":"(Locale.Category, Locale)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"category","type":{"isPrimitive":false,"simpleName":"Category","qualifiedName":"java.util.Locale.Category","dimension":"","elementType":{}}},{"name":"newLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAvailableLocales","comment":"Returns an array of all installed locales.\n The returned array represents the union of locales supported\n by the Java runtime environment and by installed\n {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider}\n implementations.  It must contain at least a \u003ccode\u003eLocale\u003c/code\u003e\n instance equal to {@link java.util.Locale#US Locale.US}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getISOCountries","comment":"Returns a list of all 2-letter country codes defined in ISO 3166.\n Can be used to create Locales.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e The \u003ccode\u003eLocale\u003c/code\u003e class also supports other codes for\n country (region), such as 3-letter numeric UN M.49 area codes.\n Therefore, the list returned by this method does not contain ALL valid\n codes that can be used to create Locales.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getISOLanguages","comment":"Returns a list of all 2-letter language codes defined in ISO 639.\n Can be used to create Locales.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eISO 639 is not a stable standard\u0026mdash; some languages\u0027 codes have changed.\n The list this function returns includes both the new and the old codes for the\n languages whose codes have changed.\n \u003cli\u003eThe \u003ccode\u003eLocale\u003c/code\u003e class also supports language codes up to\n 8 characters in length.  Therefore, the list returned by this method does\n not contain ALL valid codes that can be used to create Locales.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getLanguage","comment":"Returns the language code of this Locale.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e ISO 639 is not a stable standard\u0026mdash; some languages\u0027 codes have changed.\n Locale\u0027s constructor recognizes both the new and the old codes for the languages\n whose codes have changed, but this function always returns the old code.  If you\n want to check for a specific language whose code has changed, don\u0027t do\n \u003cpre\u003e\n if (locale.getLanguage().equals(\"he\")) // BAD!\n    ...\n \u003c/pre\u003e\n Instead, do\n \u003cpre\u003e\n if (locale.getLanguage().equals(new Locale(\"he\").getLanguage()))\n    ...\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getScript","comment":"Returns the script for this locale, which should\n either be the empty string or an ISO 15924 4-letter script\n code. The first letter is uppercase and the rest are\n lowercase, for example, \u0027Latn\u0027, \u0027Cyrl\u0027.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCountry","comment":"Returns the country/region code for this locale, which should\n either be the empty string, an uppercase ISO 3166 2-letter code,\n or a UN M.49 3-digit code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getVariant","comment":"Returns the variant code for this locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasExtensions","comment":"Returns {@code true} if this {@code Locale} has any \u003ca href\u003d\"#def_extensions\"\u003e\n extensions\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"stripExtensions","comment":"Returns a copy of this {@code Locale} with no \u003ca href\u003d\"#def_extensions\"\u003e\n extensions\u003c/a\u003e. If this {@code Locale} has no extensions, this {@code Locale}\n is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExtension","comment":"Returns the extension (or private use) value associated with\n the specified key, or null if there is no extension\n associated with the key. To be well-formed, the key must be one\n of \u003ccode\u003e[0-9A-Za-z]\u003c/code\u003e. Keys are case-insensitive, so\n for example \u0027z\u0027 and \u0027Z\u0027 represent the same extension.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getExtensionKeys","comment":"Returns the set of extension keys associated with this locale, or the\n empty set if it has no extensions. The returned set is unmodifiable.\n The keys will all be lower-case.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUnicodeLocaleAttributes","comment":"Returns the set of unicode locale attributes associated with\n this locale, or the empty set if it has no attributes. The\n returned set is unmodifiable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUnicodeLocaleType","comment":"Returns the Unicode locale type associated with the specified Unicode locale key\n for this locale. Returns the empty string for keys that are defined with no type.\n Returns null if the key is not defined. Keys are case-insensitive. The key must\n be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is\n thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getUnicodeLocaleKeys","comment":"Returns the set of Unicode locale keys defined by this locale, or the empty set if\n this locale has none.  The returned set is immutable.  Keys are all lower case.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this \u003ccode\u003eLocale\u003c/code\u003e\n object, consisting of language, country, variant, script,\n and extensions as below:\n \u003cblockquote\u003e\n language + \"_\" + country + \"_\" + (variant + \"_#\" | \"#\") + script + \"-\" + extensions\n \u003c/blockquote\u003e\n\n Language is always lower case, country is always upper case, script is always title\n case, and extensions are always lower case.  Extensions and private use subtags\n will be in canonical order as explained in {@link #toLanguageTag}.\n\n \u003cp\u003eWhen the locale has neither script nor extensions, the result is the same as in\n Java 6 and prior.\n\n \u003cp\u003eIf both the language and country fields are missing, this function will return\n the empty string, even if the variant, script, or extensions field is present (you\n can\u0027t have a locale with just a variant, the variant must accompany a well-formed\n language or country code).\n\n \u003cp\u003eIf script or extensions are present and variant is missing, no underscore is\n added before the \"#\".\n\n \u003cp\u003eThis behavior is designed to support debugging and to be compatible with\n previous uses of \u003ccode\u003etoString\u003c/code\u003e that expected language, country, and variant\n fields only.  To represent a Locale as a String for interchange purposes, use\n {@link #toLanguageTag}.\n\n \u003cp\u003eExamples: \u003cul\u003e\n \u003cli\u003e\u003ctt\u003een\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003ede_DE\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003e_GB\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003een_US_WIN\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003ede__POSIX\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003ezh_CN_#Hans\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003ezh_TW_#Hant-x-java\u003c/tt\u003e\u003c/li\u003e\n \u003cli\u003e\u003ctt\u003eth_TH_TH_#u-nu-thai\u003c/tt\u003e\u003c/li\u003e\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLanguageTag","comment":"Returns a well-formed IETF BCP 47 language tag representing\n this locale.\n\n \u003cp\u003eIf this \u003ccode\u003eLocale\u003c/code\u003e has a language, country, or\n variant that does not satisfy the IETF BCP 47 language tag\n syntax requirements, this method handles these fields as\n described below:\n\n \u003cp\u003e\u003cb\u003eLanguage:\u003c/b\u003e If language is empty, or not \u003ca\n href\u003d\"#def_language\" \u003ewell-formed\u003c/a\u003e (for example \"a\" or\n \"e2\"), it will be emitted as \"und\" (Undetermined).\n\n \u003cp\u003e\u003cb\u003eCountry:\u003c/b\u003e If country is not \u003ca\n href\u003d\"#def_region\"\u003ewell-formed\u003c/a\u003e (for example \"12\" or \"USA\"),\n it will be omitted.\n\n \u003cp\u003e\u003cb\u003eVariant:\u003c/b\u003e If variant \u003cb\u003eis\u003c/b\u003e \u003ca\n href\u003d\"#def_variant\"\u003ewell-formed\u003c/a\u003e, each sub-segment\n (delimited by \u0027-\u0027 or \u0027_\u0027) is emitted as a subtag.  Otherwise:\n \u003cul\u003e\n\n \u003cli\u003eif all sub-segments match \u003ccode\u003e[0-9a-zA-Z]{1,8}\u003c/code\u003e\n (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first\n ill-formed sub-segment and all following will be appended to\n the private use subtag.  The first appended subtag will be\n \"lvariant\", followed by the sub-segments in order, separated by\n hyphen. For example, \"x-lvariant-WIN\",\n \"Oracle-x-lvariant-JDK-Standard-Edition\".\n\n \u003cli\u003eif any sub-segment does not match\n \u003ccode\u003e[0-9a-zA-Z]{1,8}\u003c/code\u003e, the variant will be truncated\n and the problematic sub-segment and all following sub-segments\n will be omitted.  If the remainder is non-empty, it will be\n emitted as a private use subtag as above (even if the remainder\n turns out to be well-formed).  For example,\n \"Solaris_isjustthecoolestthing\" is emitted as\n \"x-lvariant-Solaris\", not as \"solaris\".\u003c/li\u003e\u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eSpecial Conversions:\u003c/b\u003e Java supports some old locale\n representations, including deprecated ISO language codes,\n for compatibility. This method performs the following\n conversions:\n \u003cul\u003e\n\n \u003cli\u003eDeprecated ISO language codes \"iw\", \"ji\", and \"in\" are\n converted to \"he\", \"yi\", and \"id\", respectively.\n\n \u003cli\u003eA locale with language \"no\", country \"NO\", and variant\n \"NY\", representing Norwegian Nynorsk (Norway), is converted\n to a language tag \"nn-NO\".\u003c/li\u003e\u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e Although the language tag created by this\n method is well-formed (satisfies the syntax requirements\n defined by the IETF BCP 47 specification), it is not\n necessarily a valid BCP 47 language tag.  For example,\n \u003cpre\u003e\n   new Locale(\"xx\", \"YY\").toLanguageTag();\u003c/pre\u003e\n\n will return \"xx-YY\", but the language subtag \"xx\" and the\n region subtag \"YY\" are invalid because they are not registered\n in the IANA Language Subtag Registry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"forLanguageTag","comment":"Returns a locale for the specified IETF BCP 47 language tag string.\n\n \u003cp\u003eIf the specified language tag contains any ill-formed subtags,\n the first such subtag and all following subtags are ignored.  Compare\n to {@link Locale.Builder#setLanguageTag} which throws an exception\n in this case.\n\n \u003cp\u003eThe following \u003cb\u003econversions\u003c/b\u003e are performed:\u003cul\u003e\n\n \u003cli\u003eThe language code \"und\" is mapped to language \"\".\n\n \u003cli\u003eThe language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\",\n \"ji\", and \"in\" respectively. (This is the same canonicalization\n that\u0027s done in Locale\u0027s constructors.)\n\n \u003cli\u003eThe portion of a private use subtag prefixed by \"lvariant\",\n if any, is removed and appended to the variant field in the\n result locale (without case normalization).  If it is then\n empty, the private use subtag is discarded:\n\n \u003cpre\u003e\n     Locale loc;\n     loc \u003d Locale.forLanguageTag(\"en-US-x-lvariant-POSIX\");\n     loc.getVariant(); // returns \"POSIX\"\n     loc.getExtension(\u0027x\u0027); // returns null\n\n     loc \u003d Locale.forLanguageTag(\"de-POSIX-x-URP-lvariant-Abc-Def\");\n     loc.getVariant(); // returns \"POSIX_Abc_Def\"\n     loc.getExtension(\u0027x\u0027); // returns \"urp\"\n \u003c/pre\u003e\n\n \u003cli\u003eWhen the languageTag argument contains an extlang subtag,\n the first such subtag is used as the language, and the primary\n language subtag and other extlang subtags are ignored:\n\n \u003cpre\u003e\n     Locale.forLanguageTag(\"ar-aao\").getLanguage(); // returns \"aao\"\n     Locale.forLanguageTag(\"en-abc-def-us\").toString(); // returns \"abc_US\"\n \u003c/pre\u003e\n\n \u003cli\u003eCase is normalized except for variant tags, which are left\n unchanged.  Language is normalized to lower case, script to\n title case, country to upper case, and extensions to lower\n case.\n\n \u003cli\u003eIf, after processing, the locale would exactly match either\n ja_JP_JP or th_TH_TH with no extensions, the appropriate\n extensions are added as though the constructor had been called:\n\n \u003cpre\u003e\n    Locale.forLanguageTag(\"ja-JP-x-lvariant-JP\").toLanguageTag();\n    // returns \"ja-JP-u-ca-japanese-x-lvariant-JP\"\n    Locale.forLanguageTag(\"th-TH-x-lvariant-TH\").toLanguageTag();\n    // returns \"th-TH-u-nu-thai-x-lvariant-TH\"\n \u003c/pre\u003e\u003c/ul\u003e\n\n \u003cp\u003eThis implements the \u0027Language-Tag\u0027 production of BCP47, and\n so supports grandfathered (regular and irregular) as well as\n private use language tags.  Stand alone private use tags are\n represented as empty language and extension \u0027x-whatever\u0027,\n and grandfathered tags are converted to their canonical replacements\n where they exist.\n\n \u003cp\u003eGrandfathered tags with canonical replacements are as follows:\n\n \u003ctable summary\u003d\"Grandfathered tags with canonical replacements\"\u003e\n \u003ctbody align\u003d\"center\"\u003e\n \u003ctr\u003e\u003cth\u003egrandfathered tag\u003c/th\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003cth\u003emodern replacement\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eart-lojban\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003ejbo\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-ami\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003eami\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-bnn\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003ebnn\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-hak\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003ehak\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-klingon\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003etlh\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-lux\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003elb\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-navajo\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003env\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-pwn\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003epwn\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-tao\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003etao\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-tay\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003etay\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-tsu\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003etsu\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eno-bok\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003enb\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eno-nyn\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003enn\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003esgn-BE-FR\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003esfb\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003esgn-BE-NL\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003evgt\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003esgn-CH-DE\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003esgg\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ezh-guoyu\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003ecmn\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ezh-hakka\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003ehak\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ezh-min-nan\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003enan\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ezh-xiang\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003ehsn\u003c/td\u003e\u003c/tr\u003e\n \u003c/tbody\u003e\n \u003c/table\u003e\n\n \u003cp\u003eGrandfathered tags with no modern replacement will be\n converted as follows:\n\n \u003ctable summary\u003d\"Grandfathered tags with no modern replacement\"\u003e\n \u003ctbody align\u003d\"center\"\u003e\n \u003ctr\u003e\u003cth\u003egrandfathered tag\u003c/th\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003cth\u003econverts to\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ecel-gaulish\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003extg-x-cel-gaulish\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003een-GB-oed\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003een-GB-x-oed\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-default\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003een-x-i-default\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-enochian\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003eund-x-i-enochian\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ei-mingo\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003esee-x-i-mingo\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003ezh-min\u003c/td\u003e\u003ctd\u003e\u0026nbsp;\u003c/td\u003e\u003ctd\u003enan-x-zh-min\u003c/td\u003e\u003c/tr\u003e\n \u003c/tbody\u003e\n \u003c/table\u003e\n\n \u003cp\u003eFor a list of all grandfathered tags, see the\n IANA Language Subtag Registry (search for \"Type: grandfathered\").\n\n \u003cp\u003e\u003cb\u003eNote\u003c/b\u003e: there is no guarantee that \u003ccode\u003etoLanguageTag\u003c/code\u003e\n and \u003ccode\u003eforLanguageTag\u003c/code\u003e will round-trip.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"languageTag","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getISO3Language","comment":"Returns a three-letter abbreviation of this locale\u0027s language.\n If the language matches an ISO 639-1 two-letter code, the\n corresponding ISO 639-2/T three-letter lowercase code is\n returned.  The ISO 639-2 language codes can be found on-line,\n see \"Codes for the Representation of Names of Languages Part 2:\n Alpha-3 Code\".  If the locale specifies a three-letter\n language, the language is returned as is.  If the locale does\n not specify a language the empty string is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getISO3Country","comment":"Returns a three-letter abbreviation for this locale\u0027s country.\n If the country matches an ISO 3166-1 alpha-2 code, the\n corresponding ISO 3166-1 alpha-3 uppercase code is returned.\n If the locale doesn\u0027t specify a country, this will be the empty\n string.\n\n \u003cp\u003eThe ISO 3166-1 codes can be found on-line.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayLanguage","comment":"Returns a name for the locale\u0027s language that is appropriate for display to the\n user.\n If possible, the name returned will be localized for the default\n {@link Locale.Category#DISPLAY DISPLAY} locale.\n For example, if the locale is fr_FR and the default\n {@link Locale.Category#DISPLAY DISPLAY} locale\n is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and\n the default {@link Locale.Category#DISPLAY DISPLAY} locale is fr_FR,\n getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized for the default\n {@link Locale.Category#DISPLAY DISPLAY} locale,\n (say, we don\u0027t have a Japanese name for Croatian),\n this function falls back on the English name, and uses the ISO code as a last-resort\n value.  If the locale doesn\u0027t specify a language, this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayLanguage","comment":"Returns a name for the locale\u0027s language that is appropriate for display to the\n user.\n If possible, the name returned will be localized according to inLocale.\n For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized according to inLocale,\n (say, we don\u0027t have a Japanese name for Croatian),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  If the locale doesn\u0027t specify a language,\n this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayScript","comment":"Returns a name for the the locale\u0027s script that is appropriate for display to\n the user. If possible, the name will be localized for the default\n {@link Locale.Category#DISPLAY DISPLAY} locale.  Returns\n the empty string if this locale doesn\u0027t specify a script code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayScript","comment":"Returns a name for the locale\u0027s script that is appropriate\n for display to the user. If possible, the name will be\n localized for the given locale. Returns the empty string if\n this locale doesn\u0027t specify a script code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayCountry","comment":"Returns a name for the locale\u0027s country that is appropriate for display to the\n user.\n If possible, the name returned will be localized for the default\n {@link Locale.Category#DISPLAY DISPLAY} locale.\n For example, if the locale is fr_FR and the default\n {@link Locale.Category#DISPLAY DISPLAY} locale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n the default {@link Locale.Category#DISPLAY DISPLAY} locale is fr_FR,\n getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized for the default\n {@link Locale.Category#DISPLAY DISPLAY} locale,\n (say, we don\u0027t have a Japanese name for Croatia),\n this function falls back on the English name, and uses the ISO code as a last-resort\n value.  If the locale doesn\u0027t specify a country, this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayCountry","comment":"Returns a name for the locale\u0027s country that is appropriate for display to the\n user.\n If possible, the name returned will be localized according to inLocale.\n For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized according to inLocale.\n (say, we don\u0027t have a Japanese name for Croatia),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  If the locale doesn\u0027t specify a country,\n this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayVariant","comment":"Returns a name for the locale\u0027s variant code that is appropriate for display to the\n user.  If possible, the name will be localized for the default\n {@link Locale.Category#DISPLAY DISPLAY} locale.  If the locale\n doesn\u0027t specify a variant code, this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayVariant","comment":"Returns a name for the locale\u0027s variant code that is appropriate for display to the\n user.  If possible, the name will be localized for inLocale.  If the locale\n doesn\u0027t specify a variant code, this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns a name for the locale that is appropriate for display to the\n user. This will be the values returned by getDisplayLanguage(),\n getDisplayScript(), getDisplayCountry(), and getDisplayVariant() assembled\n into a single string. The the non-empty values are used in order,\n with the second and subsequent names in parentheses.  For example:\n \u003cblockquote\u003e\n language (script, country, variant)\u003cbr\u003e\n language (country)\u003cbr\u003e\n language (variant)\u003cbr\u003e\n script (country)\u003cbr\u003e\n country\u003cbr\u003e\n \u003c/blockquote\u003e\n depending on which fields are specified in the locale.  If the\n language, script, country, and variant fields are all empty,\n this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns a name for the locale that is appropriate for display\n to the user.  This will be the values returned by\n getDisplayLanguage(), getDisplayScript(),getDisplayCountry(),\n and getDisplayVariant() assembled into a single string.\n The non-empty values are used in order,\n with the second and subsequent names in parentheses.  For example:\n \u003cblockquote\u003e\n language (script, country, variant)\u003cbr\u003e\n language (country)\u003cbr\u003e\n language (variant)\u003cbr\u003e\n script (country)\u003cbr\u003e\n country\u003cbr\u003e\n \u003c/blockquote\u003e\n depending on which fields are specified in the locale.  If the\n language, script, country, and variant fields are all empty,\n this function returns the empty string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Overrides Cloneable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Override hashCode.\n Since Locales are often used in hashtables, caches the value\n for speed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Returns true if this Locale is equal to another object.  A Locale is\n deemed equal to another Locale with identical language, script, country,\n variant and extensions, and unequal to all other objects.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"filter","comment":"Returns a list of matching {@code Locale} instances using the filtering\n mechanism defined in RFC 4647.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Collection\u003cjava.util.Locale\u003e, java.util.Locale.FilteringMode)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Collection\u003cLocale\u003e, Locale.FilteringMode)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"locales","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}},{"name":"mode","type":{"isPrimitive":false,"simpleName":"FilteringMode","qualifiedName":"java.util.Locale.FilteringMode","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"filter","comment":"Returns a list of matching {@code Locale} instances using the filtering\n mechanism defined in RFC 4647. This is equivalent to\n {@link #filter(List, Collection, FilteringMode)} when {@code mode} is\n {@link FilteringMode#AUTOSELECT_FILTERING}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Collection\u003cjava.util.Locale\u003e)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Collection\u003cLocale\u003e)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"locales","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"filterTags","comment":"Returns a list of matching languages tags using the basic filtering\n mechanism defined in RFC 4647.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Collection\u003cjava.lang.String\u003e, java.util.Locale.FilteringMode)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Collection\u003cString\u003e, Locale.FilteringMode)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"tags","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}},{"name":"mode","type":{"isPrimitive":false,"simpleName":"FilteringMode","qualifiedName":"java.util.Locale.FilteringMode","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"filterTags","comment":"Returns a list of matching languages tags using the basic filtering\n mechanism defined in RFC 4647. This is equivalent to\n {@link #filterTags(List, Collection, FilteringMode)} when {@code mode}\n is {@link FilteringMode#AUTOSELECT_FILTERING}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Collection\u003cjava.lang.String\u003e)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Collection\u003cString\u003e)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"tags","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lookup","comment":"Returns a {@code Locale} instance for the best-matching language\n tag using the lookup mechanism defined in RFC 4647.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Collection\u003cjava.util.Locale\u003e)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Collection\u003cLocale\u003e)","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"locales","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lookupTag","comment":"Returns the best-matching language tag using the lookup mechanism\n defined in RFC 4647.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Collection\u003cjava.lang.String\u003e)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Collection\u003cString\u003e)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"tags","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}