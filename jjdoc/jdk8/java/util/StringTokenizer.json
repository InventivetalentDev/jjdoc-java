{"name":"StringTokenizer","comment":"The string tokenizer class allows an application to break a\n string into tokens. The tokenization method is much simpler than\n the one used by the \u003ccode\u003eStreamTokenizer\u003c/code\u003e class. The\n \u003ccode\u003eStringTokenizer\u003c/code\u003e methods do not distinguish among\n identifiers, numbers, and quoted strings, nor do they recognize\n and skip comments.\n \u003cp\u003e\n The set of delimiters (the characters that separate tokens) may\n be specified either at creation time or on a per-token basis.\n \u003cp\u003e\n An instance of \u003ccode\u003eStringTokenizer\u003c/code\u003e behaves in one of two\n ways, depending on whether it was created with the\n \u003ccode\u003ereturnDelims\u003c/code\u003e flag having the value \u003ccode\u003etrue\u003c/code\u003e\n or \u003ccode\u003efalse\u003c/code\u003e:\n \u003cul\u003e\n \u003cli\u003eIf the flag is \u003ccode\u003efalse\u003c/code\u003e, delimiter characters serve to\n     separate tokens. A token is a maximal sequence of consecutive\n     characters that are not delimiters.\n \u003cli\u003eIf the flag is \u003ccode\u003etrue\u003c/code\u003e, delimiter characters are themselves\n     considered to be tokens. A token is thus either one delimiter\n     character, or a maximal sequence of consecutive characters that are\n     not delimiters.\n \u003c/ul\u003e\u003cp\u003e\n A \u003ctt\u003eStringTokenizer\u003c/tt\u003e object internally maintains a current\n position within the string to be tokenized. Some operations advance this\n current position past the characters processed.\u003cp\u003e\n A token is returned by taking a substring of the string that was used to\n create the \u003ctt\u003eStringTokenizer\u003c/tt\u003e object.\n \u003cp\u003e\n The following is one example of the use of the tokenizer. The code:\n \u003cblockquote\u003e\u003cpre\u003e\n     StringTokenizer st \u003d new StringTokenizer(\"this is a test\");\n     while (st.hasMoreTokens()) {\n         System.out.println(st.nextToken());\n     }\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n prints the following output:\n \u003cblockquote\u003e\u003cpre\u003e\n     this\n     is\n     a\n     test\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e\n \u003ctt\u003eStringTokenizer\u003c/tt\u003e is a legacy class that is retained for\n compatibility reasons although its use is discouraged in new code. It is\n recommended that anyone seeking this functionality use the \u003ctt\u003esplit\u003c/tt\u003e\n method of \u003ctt\u003eString\u003c/tt\u003e or the java.util.regex package instead.\n \u003cp\u003e\n The following example illustrates how the \u003ctt\u003eString.split\u003c/tt\u003e\n method can be used to break up a string into its basic tokens:\n \u003cblockquote\u003e\u003cpre\u003e\n     String[] result \u003d \"this is a test\".split(\"\\\\s\");\n     for (int x\u003d0; x\u0026lt;result.length; x++)\n         System.out.println(result[x]);\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n prints the following output:\n \u003cblockquote\u003e\u003cpre\u003e\n     this\n     is\n     a\n     test\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"StringTokenizer","qualifiedName":"java.util.StringTokenizer","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.util.Enumeration"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"StringTokenizer","comment":"Constructs a string tokenizer for the specified string. All\n characters in the \u003ccode\u003edelim\u003c/code\u003e argument are the delimiters\n for separating tokens.\n \u003cp\u003e\n If the \u003ccode\u003ereturnDelims\u003c/code\u003e flag is \u003ccode\u003etrue\u003c/code\u003e, then\n the delimiter characters are also returned as tokens. Each\n delimiter is returned as a string of length one. If the flag is\n \u003ccode\u003efalse\u003c/code\u003e, the delimiter characters are skipped and only\n serve as separators between tokens.\n \u003cp\u003e\n Note that if \u003ctt\u003edelim\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting \u003ctt\u003eStringTokenizer\u003c/tt\u003e may result in a\n \u003ctt\u003eNullPointerException\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, boolean)","flatSignature":"(String, String, boolean)","parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"delim","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"returnDelims","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"StringTokenizer","comment":"Constructs a string tokenizer for the specified string. The\n characters in the \u003ccode\u003edelim\u003c/code\u003e argument are the delimiters\n for separating tokens. Delimiter characters themselves will not\n be treated as tokens.\n \u003cp\u003e\n Note that if \u003ctt\u003edelim\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting \u003ctt\u003eStringTokenizer\u003c/tt\u003e may result in a\n \u003ctt\u003eNullPointerException\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"delim","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"StringTokenizer","comment":"Constructs a string tokenizer for the specified string. The\n tokenizer uses the default delimiter set, which is\n \u003ccode\u003e\"\u0026nbsp;\u0026#92;t\u0026#92;n\u0026#92;r\u0026#92;f\"\u003c/code\u003e: the space character,\n the tab character, the newline character, the carriage-return character,\n and the form-feed character. Delimiter characters themselves will\n not be treated as tokens.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"hasMoreTokens","comment":"Tests if there are more tokens available from this tokenizer\u0027s string.\n If this method returns \u003ctt\u003etrue\u003c/tt\u003e, then a subsequent call to\n \u003ctt\u003enextToken\u003c/tt\u003e with no argument will successfully return a token.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"nextToken","comment":"Returns the next token from this string tokenizer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"nextToken","comment":"Returns the next token in this string tokenizer\u0027s string. First,\n the set of characters considered to be delimiters by this\n \u003ctt\u003eStringTokenizer\u003c/tt\u003e object is changed to be the characters in\n the string \u003ctt\u003edelim\u003c/tt\u003e. Then the next token in the string\n after the current position is returned. The current position is\n advanced beyond the recognized token.  The new delimiter set\n remains the default after this call.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"delim","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasMoreElements","comment":"Returns the same value as the \u003ccode\u003ehasMoreTokens\u003c/code\u003e\n method. It exists so that this class can implement the\n \u003ccode\u003eEnumeration\u003c/code\u003e interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"nextElement","comment":"Returns the same value as the \u003ccode\u003enextToken\u003c/code\u003e method,\n except that its declared return value is \u003ccode\u003eObject\u003c/code\u003e rather than\n \u003ccode\u003eString\u003c/code\u003e. It exists so that this class can implement the\n \u003ccode\u003eEnumeration\u003c/code\u003e interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"countTokens","comment":"Calculates the number of times that this tokenizer\u0027s\n \u003ccode\u003enextToken\u003c/code\u003e method can be called before it generates an\n exception. The current position is not advanced.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}