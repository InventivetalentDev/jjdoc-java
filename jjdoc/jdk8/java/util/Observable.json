{"name":"Observable","comment":"This class represents an observable object, or \"data\"\n in the model-view paradigm. It can be subclassed to represent an\n object that the application wants to have observed.\n \u003cp\u003e\n An observable object can have one or more observers. An observer\n may be any object that implements interface \u003ctt\u003eObserver\u003c/tt\u003e. After an\n observable instance changes, an application calling the\n \u003ccode\u003eObservable\u003c/code\u003e\u0027s \u003ccode\u003enotifyObservers\u003c/code\u003e method\n causes all of its observers to be notified of the change by a call\n to their \u003ccode\u003eupdate\u003c/code\u003e method.\n \u003cp\u003e\n The order in which notifications will be delivered is unspecified.\n The default implementation provided in the Observable class will\n notify Observers in the order in which they registered interest, but\n subclasses may change this order, use no guaranteed order, deliver\n notifications on separate threads, or may guarantee that their\n subclass follows this order, as they choose.\n \u003cp\u003e\n Note that this notification mechanism has nothing to do with threads\n and is completely separate from the \u003ctt\u003ewait\u003c/tt\u003e and \u003ctt\u003enotify\u003c/tt\u003e\n mechanism of class \u003ctt\u003eObject\u003c/tt\u003e.\n \u003cp\u003e\n When an observable object is newly created, its set of observers is\n empty. Two observers are considered the same if and only if the\n \u003ctt\u003eequals\u003c/tt\u003e method returns true for them.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Observable","qualifiedName":"java.util.Observable","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Observable","comment":"Construct an Observable with zero Observers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"addObserver","comment":"Adds an observer to the set of observers for this object, provided\n that it is not the same as some observer already in the set.\n The order in which notifications will be delivered to multiple\n observers is not specified. See the class comment.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Observer)","flatSignature":"(Observer)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Observer","qualifiedName":"java.util.Observer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"deleteObserver","comment":"Deletes an observer from the set of observers of this object.\n Passing \u003cCODE\u003enull\u003c/CODE\u003e to this method will have no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Observer)","flatSignature":"(Observer)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Observer","qualifiedName":"java.util.Observer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"notifyObservers","comment":"If this object has changed, as indicated by the\n \u003ccode\u003ehasChanged\u003c/code\u003e method, then notify all of its observers\n and then call the \u003ccode\u003eclearChanged\u003c/code\u003e method to\n indicate that this object has no longer changed.\n \u003cp\u003e\n Each observer has its \u003ccode\u003eupdate\u003c/code\u003e method called with two\n arguments: this observable object and \u003ccode\u003enull\u003c/code\u003e. In other\n words, this method is equivalent to:\n \u003cblockquote\u003e\u003ctt\u003e\n notifyObservers(null)\u003c/tt\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"notifyObservers","comment":"If this object has changed, as indicated by the\n \u003ccode\u003ehasChanged\u003c/code\u003e method, then notify all of its observers\n and then call the \u003ccode\u003eclearChanged\u003c/code\u003e method to indicate\n that this object has no longer changed.\n \u003cp\u003e\n Each observer has its \u003ccode\u003eupdate\u003c/code\u003e method called with two\n arguments: this observable object and the \u003ccode\u003earg\u003c/code\u003e argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"deleteObservers","comment":"Clears the observer list so that this object no longer has any observers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasChanged","comment":"Tests if this object has changed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"countObservers","comment":"Returns the number of observers of this \u003ctt\u003eObservable\u003c/tt\u003e object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}