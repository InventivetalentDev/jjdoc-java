{"name":"Vector","comment":"The {@code Vector} class implements a growable array of\n objects. Like an array, it contains components that can be\n accessed using an integer index. However, the size of a\n {@code Vector} can grow or shrink as needed to accommodate\n adding and removing items after the {@code Vector} has been created.\n\n \u003cp\u003eEach vector tries to optimize storage management by maintaining a\n {@code capacity} and a {@code capacityIncrement}. The\n {@code capacity} is always at least as large as the vector\n size; it is usually larger because as components are added to the\n vector, the vector\u0027s storage increases in chunks the size of\n {@code capacityIncrement}. An application can increase the\n capacity of a vector before inserting a large number of\n components; this reduces the amount of incremental reallocation.\n\n \u003cp\u003e\u003ca name\u003d\"fail-fast\"\u003e\n The iterators returned by this class\u0027s {@link #iterator() iterator} and\n {@link #listIterator(int) listIterator} methods are \u003cem\u003efail-fast\u003c/em\u003e\u003c/a\u003e:\n if the vector is structurally modified at any time after the iterator is\n created, in any way except through the iterator\u0027s own\n {@link ListIterator#remove() remove} or\n {@link ListIterator#add(Object) add} methods, the iterator will throw a\n {@link ConcurrentModificationException}.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.  The {@link Enumeration Enumerations} returned by\n the {@link #elements() elements} method are \u003cem\u003enot\u003c/em\u003e fail-fast.\n\n \u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  \u003ci\u003ethe fail-fast behavior of iterators\n should be used only to detect bugs.\u003c/i\u003e\n\n \u003cp\u003eAs of the Java 2 platform v1.2, this class was retrofitted to\n implement the {@link List} interface, making it a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.  Unlike the new collection\n implementations, {@code Vector} is synchronized.  If a thread-safe\n implementation is not needed, it is recommended to use {@link\n ArrayList} in place of {@code Vector}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Vector","qualifiedName":"java.util.Vector","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractList","interfaces":["java.util.List","java.util.RandomAccess","java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Vector","comment":"Constructs an empty vector with the specified initial capacity and\n capacity increment.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"capacityIncrement","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Vector","comment":"Constructs an empty vector with the specified initial capacity and\n with its capacity increment equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Vector","comment":"Constructs an empty vector so that its internal data array\n has size {@code 10} and its standard capacity increment is\n zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Vector","comment":"Constructs a vector containing the elements of the specified\n collection, in the order they are returned by the collection\u0027s\n iterator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"copyInto","comment":"Copies the components of this vector into the specified array.\n The item at index {@code k} in this vector is copied into\n component {@code k} of {@code anArray}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object[])","flatSignature":"(Object[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anArray","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"trimToSize","comment":"Trims the capacity of this vector to be the vector\u0027s current\n size. If the capacity of this vector is larger than its current\n size, then the capacity is changed to equal the size by replacing\n its internal data array, kept in the field {@code elementData},\n with a smaller one. An application can use this operation to\n minimize the storage of a vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"ensureCapacity","comment":"Increases the capacity of this vector, if necessary, to ensure\n that it can hold at least the number of components specified by\n the minimum capacity argument.\n\n \u003cp\u003eIf the current capacity of this vector is less than\n {@code minCapacity}, then its capacity is increased by replacing its\n internal data array, kept in the field {@code elementData}, with a\n larger one.  The size of the new data array will be the old size plus\n {@code capacityIncrement}, unless the value of\n {@code capacityIncrement} is less than or equal to zero, in which case\n the new capacity will be twice the old capacity; but if this new size\n is still smaller than {@code minCapacity}, then the new capacity will\n be {@code minCapacity}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setSize","comment":"Sets the size of this vector. If the new size is greater than the\n current size, new {@code null} items are added to the end of\n the vector. If the new size is less than the current size, all\n components at index {@code newSize} and greater are discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"capacity","comment":"Returns the current capacity of this vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"Returns the number of components in this vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Tests if this vector has no components.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"elements","comment":"Returns an enumeration of the components of this vector. The\n returned {@code Enumeration} object will generate all items in\n this vector. The first item generated is the item at index {@code 0},\n then the item at index {@code 1}, and so on.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"Returns {@code true} if this vector contains the specified element.\n More formally, returns {@code true} if and only if this vector\n contains at least one element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"indexOf","comment":"Returns the index of the first occurrence of the specified element\n in this vector, or -1 if this vector does not contain the element.\n More formally, returns the lowest index {@code i} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;get(i)\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(get(i)))\u003c/tt\u003e,\n or -1 if there is no such index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"indexOf","comment":"Returns the index of the first occurrence of the specified element in\n this vector, searching forwards from {@code index}, or returns -1 if\n the element is not found.\n More formally, returns the lowest index {@code i} such that\n \u003ctt\u003e(i\u0026nbsp;\u0026gt;\u003d\u0026nbsp;index\u0026nbsp;\u0026amp;\u0026amp;\u0026nbsp;(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;get(i)\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(get(i))))\u003c/tt\u003e,\n or -1 if there is no such index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, int)","flatSignature":"(Object, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lastIndexOf","comment":"Returns the index of the last occurrence of the specified element\n in this vector, or -1 if this vector does not contain the element.\n More formally, returns the highest index {@code i} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;get(i)\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(get(i)))\u003c/tt\u003e,\n or -1 if there is no such index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lastIndexOf","comment":"Returns the index of the last occurrence of the specified element in\n this vector, searching backwards from {@code index}, or returns -1 if\n the element is not found.\n More formally, returns the highest index {@code i} such that\n \u003ctt\u003e(i\u0026nbsp;\u0026lt;\u003d\u0026nbsp;index\u0026nbsp;\u0026amp;\u0026amp;\u0026nbsp;(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;get(i)\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(get(i))))\u003c/tt\u003e,\n or -1 if there is no such index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, int)","flatSignature":"(Object, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"elementAt","comment":"Returns the component at the specified index.\n\n \u003cp\u003eThis method is identical in functionality to the {@link #get(int)}\n method (which is part of the {@link List} interface).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"firstElement","comment":"Returns the first component (the item at index {@code 0}) of\n this vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastElement","comment":"Returns the last component of the vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setElementAt","comment":"Sets the component at the specified {@code index} of this\n vector to be the specified object. The previous component at that\n position is discarded.\n\n \u003cp\u003eThe index must be a value greater than or equal to {@code 0}\n and less than the current size of the vector.\n\n \u003cp\u003eThis method is identical in functionality to the\n {@link #set(int, Object) set(int, E)}\n method (which is part of the {@link List} interface). Note that the\n {@code set} method reverses the order of the parameters, to more closely\n match array usage.  Note also that the {@code set} method returns the\n old value that was stored at the specified position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, int)","flatSignature":"(E, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeElementAt","comment":"Deletes the component at the specified index. Each component in\n this vector with an index greater or equal to the specified\n {@code index} is shifted downward to have an index one\n smaller than the value it had previously. The size of this vector\n is decreased by {@code 1}.\n\n \u003cp\u003eThe index must be a value greater than or equal to {@code 0}\n and less than the current size of the vector.\n\n \u003cp\u003eThis method is identical in functionality to the {@link #remove(int)}\n method (which is part of the {@link List} interface).  Note that the\n {@code remove} method returns the old value that was stored at the\n specified position.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"insertElementAt","comment":"Inserts the specified object as a component in this vector at the\n specified {@code index}. Each component in this vector with\n an index greater or equal to the specified {@code index} is\n shifted upward to have an index one greater than the value it had\n previously.\n\n \u003cp\u003eThe index must be a value greater than or equal to {@code 0}\n and less than or equal to the current size of the vector. (If the\n index is equal to the current size of the vector, the new element\n is appended to the Vector.)\n\n \u003cp\u003eThis method is identical in functionality to the\n {@link #add(int, Object) add(int, E)}\n method (which is part of the {@link List} interface).  Note that the\n {@code add} method reverses the order of the parameters, to more closely\n match array usage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, int)","flatSignature":"(E, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addElement","comment":"Adds the specified component to the end of this vector,\n increasing its size by one. The capacity of this vector is\n increased if its size becomes greater than its capacity.\n\n \u003cp\u003eThis method is identical in functionality to the\n {@link #add(Object) add(E)}\n method (which is part of the {@link List} interface).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"removeElement","comment":"Removes the first (lowest-indexed) occurrence of the argument\n from this vector. If the object is found in this vector, each\n component in the vector with an index greater or equal to the\n object\u0027s index is shifted downward to have an index one smaller\n than the value it had previously.\n\n \u003cp\u003eThis method is identical in functionality to the\n {@link #remove(Object)} method (which is part of the\n {@link List} interface).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeAllElements","comment":"Removes all components from this vector and sets its size to zero.\n\n \u003cp\u003eThis method is identical in functionality to the {@link #clear}\n method (which is part of the {@link List} interface).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clone","comment":"Returns a clone of this vector. The copy will contain a\n reference to a clone of the internal data array, not a reference\n to the original internal data array of this {@code Vector} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this Vector\n in the correct order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this Vector in the\n correct order; the runtime type of the returned array is that of the\n specified array.  If the Vector fits in the specified array, it is\n returned therein.  Otherwise, a new array is allocated with the runtime\n type of the specified array and the size of this Vector.\n\n \u003cp\u003eIf the Vector fits in the specified array with room to spare\n (i.e., the array has more elements than the Vector),\n the element in the array immediately following the end of the\n Vector is set to null.  (This is useful in determining the length\n of the Vector \u003cem\u003eonly\u003c/em\u003e if the caller knows that the Vector\n does not contain any null elements.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"get","comment":"Returns the element at the specified position in this Vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Replaces the element at the specified position in this Vector with the\n specified element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, E)","flatSignature":"(int, E)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"element","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"add","comment":"Appends the specified element to the end of this Vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the first occurrence of the specified element in this Vector\n If the Vector does not contain the element, it is unchanged.  More\n formally, removes the element with the lowest index i such that\n {@code (o\u003d\u003dnull ? get(i)\u003d\u003dnull : o.equals(get(i)))} (if such\n an element exists).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"add","comment":"Inserts the specified element at the specified position in this Vector.\n Shifts the element currently at that position (if any) and any\n subsequent elements to the right (adds one to their indices).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, E)","flatSignature":"(int, E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"element","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the element at the specified position in this Vector.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the Vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the elements from this Vector.  The Vector will\n be empty after this call returns (unless it throws an exception).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"containsAll","comment":"Returns true if this Vector contains all of the elements in the\n specified Collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Appends all of the elements in the specified Collection to the end of\n this Vector, in the order that they are returned by the specified\n Collection\u0027s Iterator.  The behavior of this operation is undefined if\n the specified Collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified Collection is this Vector, and this Vector is nonempty.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeAll","comment":"Removes from this Vector all of its elements that are contained in the\n specified Collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"retainAll","comment":"Retains only the elements in this Vector that are contained in the\n specified Collection.  In other words, removes from this Vector all\n of its elements that are not contained in the specified Collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Inserts all of the elements in the specified Collection into this\n Vector at the specified position.  Shifts the element currently at\n that position (if any) and any subsequent elements to the right\n (increases their indices).  The new elements will appear in the Vector\n in the order that they are returned by the specified Collection\u0027s\n iterator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.Collection\u003c? extends E\u003e)","flatSignature":"(int, Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares the specified Object with this Vector for equality.  Returns\n true if and only if the specified Object is also a List, both Lists\n have the same size, and all corresponding pairs of elements in the two\n Lists are \u003cem\u003eequal\u003c/em\u003e.  (Two elements {@code e1} and\n {@code e2} are \u003cem\u003eequal\u003c/em\u003e if {@code (e1\u003d\u003dnull ? e2\u003d\u003dnull :\n e1.equals(e2))}.)  In other words, two Lists are defined to be\n equal if they contain the same elements in the same order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this Vector.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this Vector, containing\n the String representation of each element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"subList","comment":"Returns a view of the portion of this List between fromIndex,\n inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are\n equal, the returned List is empty.)  The returned List is backed by this\n List, so changes in the returned List are reflected in this List, and\n vice-versa.  The returned List supports all of the optional List\n operations supported by this List.\n\n \u003cp\u003eThis method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a List can be used as a range operation by operating on a subList view\n instead of a whole List.  For example, the following idiom\n removes a range of elements from a List:\n \u003cpre\u003e\n      list.subList(from, to).clear();\n \u003c/pre\u003e\n Similar idioms may be constructed for indexOf and lastIndexOf,\n and all of the algorithms in the Collections class can be applied to\n a subList.\n\n \u003cp\u003eThe semantics of the List returned by this method become undefined if\n the backing list (i.e., this List) is \u003ci\u003estructurally modified\u003c/i\u003e in\n any way other than via the returned List.  (Structural modifications are\n those that change the size of the List, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"listIterator","comment":"Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to {@link ListIterator#next next}.\n An initial call to {@link ListIterator#previous previous} would\n return the element with the specified index minus one.\n\n \u003cp\u003eThe returned list iterator is \u003ca href\u003d\"#fail-fast\"\u003e\u003ci\u003efail-fast\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ListIterator","qualifiedName":"java.util.ListIterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"listIterator","comment":"Returns a list iterator over the elements in this list (in proper\n sequence).\n\n \u003cp\u003eThe returned list iterator is \u003ca href\u003d\"#fail-fast\"\u003e\u003ci\u003efail-fast\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ListIterator","qualifiedName":"java.util.ListIterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this list in proper sequence.\n\n \u003cp\u003eThe returned iterator is \u003ca href\u003d\"#fail-fast\"\u003e\u003ci\u003efail-fast\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super E\u003e)","flatSignature":"(Consumer\u003c? super E\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeIf","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super E\u003e)","flatSignature":"(Predicate\u003c? super E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"filter","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.UnaryOperator\u003cE\u003e)","flatSignature":"(UnaryOperator\u003cE\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"operator","type":{"isPrimitive":false,"simpleName":"UnaryOperator","qualifiedName":"java.util.function.UnaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sort","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super E\u003e)","flatSignature":"(Comparator\u003c? super E\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e\n and \u003cem\u003efail-fast\u003c/em\u003e {@link Spliterator} over the elements in this\n list.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#SIZED},\n {@link Spliterator#SUBSIZED}, and {@link Spliterator#ORDERED}.\n Overriding implementations should document the reporting of additional\n characteristic values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subClasses":["java.util.Stack"],"enumConstants":[]}