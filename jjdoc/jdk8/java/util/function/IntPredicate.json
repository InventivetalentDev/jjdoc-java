{"name":"IntPredicate","comment":"Represents a predicate (boolean-valued function) of one {@code int}-valued\n argument. This is the {@code int}-consuming primitive type specialization of\n {@link Predicate}.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html\"\u003efunctional interface\u003c/a\u003e\n whose functional method is {@link #test(int)}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"IntPredicate","qualifiedName":"java.util.function.IntPredicate","dimension":"","elementType":{},"package":"java.util.function","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"test","comment":"Evaluates this predicate on the given argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"and","comment":"Returns a composed predicate that represents a short-circuiting logical\n AND of this predicate and another.  When evaluating the composed\n predicate, if this predicate is {@code false}, then the {@code other}\n predicate is not evaluated.\n\n \u003cp\u003eAny exceptions thrown during evaluation of either predicate are relayed\n to the caller; if evaluation of this predicate throws an exception, the\n {@code other} predicate will not be evaluated.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.IntPredicate)","flatSignature":"(IntPredicate)","returnType":{"isPrimitive":false,"simpleName":"IntPredicate","qualifiedName":"java.util.function.IntPredicate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"IntPredicate","qualifiedName":"java.util.function.IntPredicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"negate","comment":"Returns a predicate that represents the logical negation of this\n predicate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IntPredicate","qualifiedName":"java.util.function.IntPredicate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"or","comment":"Returns a composed predicate that represents a short-circuiting logical\n OR of this predicate and another.  When evaluating the composed\n predicate, if this predicate is {@code true}, then the {@code other}\n predicate is not evaluated.\n\n \u003cp\u003eAny exceptions thrown during evaluation of either predicate are relayed\n to the caller; if evaluation of this predicate throws an exception, the\n {@code other} predicate will not be evaluated.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.IntPredicate)","flatSignature":"(IntPredicate)","returnType":{"isPrimitive":false,"simpleName":"IntPredicate","qualifiedName":"java.util.function.IntPredicate","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"IntPredicate","qualifiedName":"java.util.function.IntPredicate","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}