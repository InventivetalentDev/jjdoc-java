{"name":"IntBinaryOperator","comment":"Represents an operation upon two {@code int}-valued operands and producing an\n {@code int}-valued result.   This is the primitive type specialization of\n {@link BinaryOperator} for {@code int}.\n\n \u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html\"\u003efunctional interface\u003c/a\u003e\n whose functional method is {@link #applyAsInt(int, int)}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"IntBinaryOperator","qualifiedName":"java.util.function.IntBinaryOperator","dimension":"","elementType":{},"package":"java.util.function","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"applyAsInt","comment":"Applies this operator to the given operands.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"left","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"right","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}