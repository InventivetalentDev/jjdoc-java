{"name":"ResourceBundle","comment":"Resource bundles contain locale-specific objects.  When your program needs a\n locale-specific resource, a \u003ccode\u003eString\u003c/code\u003e for example, your program can\n load it from the resource bundle that is appropriate for the current user\u0027s\n locale. In this way, you can write program code that is largely independent\n of the user\u0027s locale isolating most, if not all, of the locale-specific\n information in resource bundles.\n\n \u003cp\u003e\n This allows you to write programs that can:\n \u003cUL\u003e\n \u003cLI\u003e be easily localized, or translated, into different languages\n \u003cLI\u003e handle multiple locales at once\n \u003cLI\u003e be easily modified later to support even more locales\n \u003c/UL\u003e\n\n \u003cP\u003e\n Resource bundles belong to families whose members share a common base\n name, but whose names also have additional components that identify\n their locales. For example, the base name of a family of resource\n bundles might be \"MyResources\". The family should have a default\n resource bundle which simply has the same name as its family -\n \"MyResources\" - and will be used as the bundle of last resort if a\n specific locale is not supported. The family can then provide as\n many locale-specific members as needed, for example a German one\n named \"MyResources_de\".\n\n \u003cP\u003e\n Each resource bundle in a family contains the same items, but the items have\n been translated for the locale represented by that resource bundle.\n For example, both \"MyResources\" and \"MyResources_de\" may have a\n \u003ccode\u003eString\u003c/code\u003e that\u0027s used on a button for canceling operations.\n In \"MyResources\" the \u003ccode\u003eString\u003c/code\u003e may contain \"Cancel\" and in\n \"MyResources_de\" it may contain \"Abbrechen\".\n\n \u003cP\u003e\n If there are different resources for different countries, you\n can make specializations: for example, \"MyResources_de_CH\" contains objects for\n the German language (de) in Switzerland (CH). If you want to only\n modify some of the resources\n in the specialization, you can do so.\n\n \u003cP\u003e\n When your program needs a locale-specific object, it loads\n the \u003ccode\u003eResourceBundle\u003c/code\u003e class using the\n {@link #getBundle(java.lang.String, java.util.Locale) getBundle}\n method:\n \u003cblockquote\u003e\n \u003cpre\u003e\n ResourceBundle myResources \u003d\n      ResourceBundle.getBundle(\"MyResources\", currentLocale);\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cP\u003e\n Resource bundles contain key/value pairs. The keys uniquely\n identify a locale-specific object in the bundle. Here\u0027s an\n example of a \u003ccode\u003eListResourceBundle\u003c/code\u003e that contains\n two key/value pairs:\n \u003cblockquote\u003e\n \u003cpre\u003e\n public class MyResources extends ListResourceBundle {\n     protected Object[][] getContents() {\n         return new Object[][] {\n             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., \"OK\")\n             {\"OkKey\", \"OK\"},\n             {\"CancelKey\", \"Cancel\"},\n             // END OF MATERIAL TO LOCALIZE\n        };\n     }\n }\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n Keys are always \u003ccode\u003eString\u003c/code\u003es.\n In this example, the keys are \"OkKey\" and \"CancelKey\".\n In the above example, the values\n are also \u003ccode\u003eString\u003c/code\u003es--\"OK\" and \"Cancel\"--but\n they don\u0027t have to be. The values can be any type of object.\n\n \u003cP\u003e\n You retrieve an object from resource bundle using the appropriate\n getter method. Because \"OkKey\" and \"CancelKey\"\n are both strings, you would use \u003ccode\u003egetString\u003c/code\u003e to retrieve them:\n \u003cblockquote\u003e\n \u003cpre\u003e\n button1 \u003d new Button(myResources.getString(\"OkKey\"));\n button2 \u003d new Button(myResources.getString(\"CancelKey\"));\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n The getter methods all require the key as an argument and return\n the object if found. If the object is not found, the getter method\n throws a \u003ccode\u003eMissingResourceException\u003c/code\u003e.\n\n \u003cP\u003e\n Besides \u003ccode\u003egetString\u003c/code\u003e, \u003ccode\u003eResourceBundle\u003c/code\u003e also provides\n a method for getting string arrays, \u003ccode\u003egetStringArray\u003c/code\u003e,\n as well as a generic \u003ccode\u003egetObject\u003c/code\u003e method for any other\n type of object. When using \u003ccode\u003egetObject\u003c/code\u003e, you\u0027ll\n have to cast the result to the appropriate type. For example:\n \u003cblockquote\u003e\n \u003cpre\u003e\n int[] myIntegers \u003d (int[]) myResources.getObject(\"intList\");\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cP\u003e\n The Java Platform provides two subclasses of \u003ccode\u003eResourceBundle\u003c/code\u003e,\n \u003ccode\u003eListResourceBundle\u003c/code\u003e and \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e,\n that provide a fairly simple way to create resources.\n As you saw briefly in a previous example, \u003ccode\u003eListResourceBundle\u003c/code\u003e\n manages its resource as a list of key/value pairs.\n \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e uses a properties file to manage\n its resources.\n\n \u003cp\u003e\n If \u003ccode\u003eListResourceBundle\u003c/code\u003e or \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e\n do not suit your needs, you can write your own \u003ccode\u003eResourceBundle\u003c/code\u003e\n subclass.  Your subclasses must override two methods: \u003ccode\u003ehandleGetObject\u003c/code\u003e\n and \u003ccode\u003egetKeys()\u003c/code\u003e.\n\n \u003cp\u003e\n The implementation of a {@code ResourceBundle} subclass must be thread-safe\n if it\u0027s simultaneously used by multiple threads. The default implementations\n of the non-abstract methods in this class, and the methods in the direct\n known concrete subclasses {@code ListResourceBundle} and\n {@code PropertyResourceBundle} are thread-safe.\n\n \u003ch3\u003eResourceBundle.Control\u003c/h3\u003e\n\n The {@link ResourceBundle.Control} class provides information necessary\n to perform the bundle loading process by the \u003ccode\u003egetBundle\u003c/code\u003e\n factory methods that take a \u003ccode\u003eResourceBundle.Control\u003c/code\u003e\n instance. You can implement your own subclass in order to enable\n non-standard resource bundle formats, change the search strategy, or\n define caching parameters. Refer to the descriptions of the class and the\n {@link #getBundle(String, Locale, ClassLoader, Control) getBundle}\n factory method for details.\n\n \u003cp\u003e\u003ca name\u003d\"modify_default_behavior\"\u003eFor the {@code getBundle} factory\u003c/a\u003e\n methods that take no {@link Control} instance, their \u003ca\n href\u003d\"#default_behavior\"\u003e default behavior\u003c/a\u003e of resource bundle loading\n can be modified with \u003cem\u003einstalled\u003c/em\u003e {@link\n ResourceBundleControlProvider} implementations. Any installed providers are\n detected at the {@code ResourceBundle} class loading time. If any of the\n providers provides a {@link Control} for the given base name, that {@link\n Control} will be used instead of the default {@link Control}. If there is\n more than one service provider installed for supporting the same base name,\n the first one returned from {@link ServiceLoader} will be used.\n\n \u003ch3\u003eCache Management\u003c/h3\u003e\n\n Resource bundle instances created by the \u003ccode\u003egetBundle\u003c/code\u003e factory\n methods are cached by default, and the factory methods return the same\n resource bundle instance multiple times if it has been\n cached. \u003ccode\u003egetBundle\u003c/code\u003e clients may clear the cache, manage the\n lifetime of cached resource bundle instances using time-to-live values,\n or specify not to cache resource bundle instances. Refer to the\n descriptions of the {@linkplain #getBundle(String, Locale, ClassLoader,\n Control) \u003ccode\u003egetBundle\u003c/code\u003e factory method}, {@link\n #clearCache(ClassLoader) clearCache}, {@link\n Control#getTimeToLive(String, Locale)\n ResourceBundle.Control.getTimeToLive}, and {@link\n Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle,\n long) ResourceBundle.Control.needsReload} for details.\n\n \u003ch3\u003eExample\u003c/h3\u003e\n\n The following is a very simple example of a \u003ccode\u003eResourceBundle\u003c/code\u003e\n subclass, \u003ccode\u003eMyResources\u003c/code\u003e, that manages two resources (for a larger number of\n resources you would probably use a \u003ccode\u003eMap\u003c/code\u003e).\n Notice that you don\u0027t need to supply a value if\n a \"parent-level\" \u003ccode\u003eResourceBundle\u003c/code\u003e handles the same\n key with the same value (as for the okKey below).\n \u003cblockquote\u003e\n \u003cpre\u003e\n // default (English language, United States)\n public class MyResources extends ResourceBundle {\n     public Object handleGetObject(String key) {\n         if (key.equals(\"okKey\")) return \"Ok\";\n         if (key.equals(\"cancelKey\")) return \"Cancel\";\n         return null;\n     }\n\n     public Enumeration\u0026lt;String\u0026gt; getKeys() {\n         return Collections.enumeration(keySet());\n     }\n\n     // Overrides handleKeySet() so that the getKeys() implementation\n     // can rely on the keySet() value.\n     protected Set\u0026lt;String\u0026gt; handleKeySet() {\n         return new HashSet\u0026lt;String\u0026gt;(Arrays.asList(\"okKey\", \"cancelKey\"));\n     }\n }\n\n // German language\n public class MyResources_de extends MyResources {\n     public Object handleGetObject(String key) {\n         // don\u0027t need okKey, since parent level handles it.\n         if (key.equals(\"cancelKey\")) return \"Abbrechen\";\n         return null;\n     }\n\n     protected Set\u0026lt;String\u0026gt; handleKeySet() {\n         return new HashSet\u0026lt;String\u0026gt;(Arrays.asList(\"cancelKey\"));\n     }\n }\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n You do not have to restrict yourself to using a single family of\n \u003ccode\u003eResourceBundle\u003c/code\u003es. For example, you could have a set of bundles for\n exception messages, \u003ccode\u003eExceptionResources\u003c/code\u003e\n (\u003ccode\u003eExceptionResources_fr\u003c/code\u003e, \u003ccode\u003eExceptionResources_de\u003c/code\u003e, ...),\n and one for widgets, \u003ccode\u003eWidgetResource\u003c/code\u003e (\u003ccode\u003eWidgetResources_fr\u003c/code\u003e,\n \u003ccode\u003eWidgetResources_de\u003c/code\u003e, ...); breaking up the resources however you like.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"JDK1.1","innerClasses":["java.util.ResourceBundle.Control"],"isInnerClass":false,"constructors":[{"name":"ResourceBundle","comment":"Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"getBaseBundleName","comment":"Returns the base name of this bundle, if known, or {@code null} if unknown.\n\n If not null, then this is the value of the {@code baseName} parameter\n that was passed to the {@code ResourceBundle.getBundle(...)} method\n when the resource bundle was loaded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getString","comment":"Gets a string for the given key from this resource bundle or one of its parents.\n Calling this method is equivalent to calling\n \u003cblockquote\u003e\n \u003ccode\u003e(String) {@link #getObject(java.lang.String) getObject}(key)\u003c/code\u003e.\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getStringArray","comment":"Gets a string array for the given key from this resource bundle or one of its parents.\n Calling this method is equivalent to calling\n \u003cblockquote\u003e\n \u003ccode\u003e(String[]) {@link #getObject(java.lang.String) getObject}(key)\u003c/code\u003e.\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getObject","comment":"Gets an object for the given key from this resource bundle or one of its parents.\n This method first tries to obtain the object from this resource bundle using\n {@link #handleGetObject(java.lang.String) handleGetObject}.\n If not successful, and the parent resource bundle is not null,\n it calls the parent\u0027s \u003ccode\u003egetObject\u003c/code\u003e method.\n If still not successful, it throws a MissingResourceException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLocale","comment":"Returns the locale of this resource bundle. This method can be used after a\n call to getBundle() to determine whether the resource bundle returned really\n corresponds to the requested locale or is a fallback.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBundle","comment":"Gets a resource bundle using the specified base name, the default locale,\n and the caller\u0027s class loader. Calling this method is equivalent to calling\n \u003cblockquote\u003e\n \u003ccode\u003egetBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())\u003c/code\u003e,\n \u003c/blockquote\u003e\n except that \u003ccode\u003egetClassLoader()\u003c/code\u003e is run with the security\n privileges of \u003ccode\u003eResourceBundle\u003c/code\u003e.\n See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBundle","comment":"Returns a resource bundle using the specified base name, the\n default locale and the specified control. Calling this method\n is equivalent to calling\n \u003cpre\u003e\n getBundle(baseName, Locale.getDefault(),\n           this.getClass().getClassLoader(), control),\n \u003c/pre\u003e\n except that \u003ccode\u003egetClassLoader()\u003c/code\u003e is run with the security\n privileges of \u003ccode\u003eResourceBundle\u003c/code\u003e.  See {@link\n #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n complete description of the resource bundle loading process with a\n \u003ccode\u003eResourceBundle.Control\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.ResourceBundle.Control)","flatSignature":"(String, ResourceBundle.Control)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"control","type":{"isPrimitive":false,"simpleName":"Control","qualifiedName":"java.util.ResourceBundle.Control","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBundle","comment":"Gets a resource bundle using the specified base name and locale,\n and the caller\u0027s class loader. Calling this method is equivalent to calling\n \u003cblockquote\u003e\n \u003ccode\u003egetBundle(baseName, locale, this.getClass().getClassLoader())\u003c/code\u003e,\n \u003c/blockquote\u003e\n except that \u003ccode\u003egetClassLoader()\u003c/code\u003e is run with the security\n privileges of \u003ccode\u003eResourceBundle\u003c/code\u003e.\n See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale)","flatSignature":"(String, Locale)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBundle","comment":"Returns a resource bundle using the specified base name, target\n locale and control, and the caller\u0027s class loader. Calling this\n method is equivalent to calling\n \u003cpre\u003e\n getBundle(baseName, targetLocale, this.getClass().getClassLoader(),\n           control),\n \u003c/pre\u003e\n except that \u003ccode\u003egetClassLoader()\u003c/code\u003e is run with the security\n privileges of \u003ccode\u003eResourceBundle\u003c/code\u003e.  See {@link\n #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n complete description of the resource bundle loading process with a\n \u003ccode\u003eResourceBundle.Control\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale, java.util.ResourceBundle.Control)","flatSignature":"(String, Locale, ResourceBundle.Control)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"targetLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"control","type":{"isPrimitive":false,"simpleName":"Control","qualifiedName":"java.util.ResourceBundle.Control","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBundle","comment":"Gets a resource bundle using the specified base name, locale, and class\n loader.\n\n \u003cp\u003eThis method behaves the same as calling\n {@link #getBundle(String, Locale, ClassLoader, Control)} passing a\n default instance of {@link Control} unless another {@link Control} is\n provided with the {@link ResourceBundleControlProvider} SPI. Refer to the\n description of \u003ca href\u003d\"#modify_default_behavior\"\u003emodifying the default\n behavior\u003c/a\u003e.\n\n \u003cp\u003e\u003ca name\u003d\"default_behavior\"\u003eThe following describes the default\n behavior\u003c/a\u003e.\n\n \u003cp\u003e\u003ccode\u003egetBundle\u003c/code\u003e uses the base name, the specified locale, and\n the default locale (obtained from {@link java.util.Locale#getDefault()\n Locale.getDefault}) to generate a sequence of \u003ca\n name\u003d\"candidates\"\u003e\u003cem\u003ecandidate bundle names\u003c/em\u003e\u003c/a\u003e.  If the specified\n locale\u0027s language, script, country, and variant are all empty strings,\n then the base name is the only candidate bundle name.  Otherwise, a list\n of candidate locales is generated from the attribute values of the\n specified locale (language, script, country and variant) and appended to\n the base name.  Typically, this will look like the following:\n\n \u003cpre\u003e\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country\n     baseName + \"_\" + language + \"_\" + script\n     baseName + \"_\" + language + \"_\" + country + \"_\" + variant\n     baseName + \"_\" + language + \"_\" + country\n     baseName + \"_\" + language\n \u003c/pre\u003e\n\n \u003cp\u003eCandidate bundle names where the final component is an empty string\n are omitted, along with the underscore.  For example, if country is an\n empty string, the second and the fifth candidate bundle names above\n would be omitted.  Also, if script is an empty string, the candidate names\n including script are omitted.  For example, a locale with language \"de\"\n and variant \"JAVA\" will produce candidate names with base name\n \"MyResource\" below.\n\n \u003cpre\u003e\n     MyResource_de__JAVA\n     MyResource_de\n \u003c/pre\u003e\n\n In the case that the variant contains one or more underscores (\u0027_\u0027), a\n sequence of bundle names generated by truncating the last underscore and\n the part following it is inserted after a candidate bundle name with the\n original variant.  For example, for a locale with language \"en\", script\n \"Latn, country \"US\" and variant \"WINDOWS_VISTA\", and bundle base name\n \"MyResource\", the list of candidate bundle names below is generated:\n\n \u003cpre\u003e\n MyResource_en_Latn_US_WINDOWS_VISTA\n MyResource_en_Latn_US_WINDOWS\n MyResource_en_Latn_US\n MyResource_en_Latn\n MyResource_en_US_WINDOWS_VISTA\n MyResource_en_US_WINDOWS\n MyResource_en_US\n MyResource_en\n \u003c/pre\u003e\n\n \u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e For some \u003ccode\u003eLocale\u003c/code\u003es, the list of\n candidate bundle names contains extra names, or the order of bundle names\n is slightly modified.  See the description of the default implementation\n of {@link Control#getCandidateLocales(String, Locale)\n getCandidateLocales} for details.\u003c/blockquote\u003e\n\n \u003cp\u003e\u003ccode\u003egetBundle\u003c/code\u003e then iterates over the candidate bundle names\n to find the first one for which it can \u003cem\u003einstantiate\u003c/em\u003e an actual\n resource bundle. It uses the default controls\u0027 {@link Control#getFormats\n getFormats} method, which generates two bundle names for each generated\n name, the first a class name and the second a properties file name. For\n each candidate bundle name, it attempts to create a resource bundle:\n\n \u003cul\u003e\u003cli\u003eFirst, it attempts to load a class using the generated class name.\n If such a class can be found and loaded using the specified class\n loader, is assignment compatible with ResourceBundle, is accessible from\n ResourceBundle, and can be instantiated, \u003ccode\u003egetBundle\u003c/code\u003e creates a\n new instance of this class and uses it as the \u003cem\u003eresult resource\n bundle\u003c/em\u003e.\n\n \u003cli\u003eOtherwise, \u003ccode\u003egetBundle\u003c/code\u003e attempts to locate a property\n resource file using the generated properties file name.  It generates a\n path name from the candidate bundle name by replacing all \".\" characters\n with \"/\" and appending the string \".properties\".  It attempts to find a\n \"resource\" with this name using {@link\n java.lang.ClassLoader#getResource(java.lang.String)\n ClassLoader.getResource}.  (Note that a \"resource\" in the sense of\n \u003ccode\u003egetResource\u003c/code\u003e has nothing to do with the contents of a\n resource bundle, it is just a container of data, such as a file.)  If it\n finds a \"resource\", it attempts to create a new {@link\n PropertyResourceBundle} instance from its contents.  If successful, this\n instance becomes the \u003cem\u003eresult resource bundle\u003c/em\u003e.  \u003c/ul\u003e\n\n \u003cp\u003eThis continues until a result resource bundle is instantiated or the\n list of candidate bundle names is exhausted.  If no matching resource\n bundle is found, the default control\u0027s {@link Control#getFallbackLocale\n getFallbackLocale} method is called, which returns the current default\n locale.  A new sequence of candidate locale names is generated using this\n locale and and searched again, as above.\n\n \u003cp\u003eIf still no result bundle is found, the base name alone is looked up. If\n this still fails, a \u003ccode\u003eMissingResourceException\u003c/code\u003e is thrown.\n\n \u003cp\u003e\u003ca name\u003d\"parent_chain\"\u003e Once a result resource bundle has been found,\n its \u003cem\u003eparent chain\u003c/em\u003e is instantiated\u003c/a\u003e.  If the result bundle already\n has a parent (perhaps because it was returned from a cache) the chain is\n complete.\n\n \u003cp\u003eOtherwise, \u003ccode\u003egetBundle\u003c/code\u003e examines the remainder of the\n candidate locale list that was used during the pass that generated the\n result resource bundle.  (As before, candidate bundle names where the\n final component is an empty string are omitted.)  When it comes to the\n end of the candidate list, it tries the plain bundle name.  With each of the\n candidate bundle names it attempts to instantiate a resource bundle (first\n looking for a class and then a properties file, as described above).\n\n \u003cp\u003eWhenever it succeeds, it calls the previously instantiated resource\n bundle\u0027s {@link #setParent(java.util.ResourceBundle) setParent} method\n with the new resource bundle.  This continues until the list of names\n is exhausted or the current bundle already has a non-null parent.\n\n \u003cp\u003eOnce the parent chain is complete, the bundle is returned.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e \u003ccode\u003egetBundle\u003c/code\u003e caches instantiated resource\n bundles and might return the same resource bundle instance multiple times.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003eThe \u003ccode\u003ebaseName\u003c/code\u003e argument should be a fully\n qualified class name. However, for compatibility with earlier versions,\n Sun\u0027s Java SE Runtime Environments do not verify this, and so it is\n possible to access \u003ccode\u003ePropertyResourceBundle\u003c/code\u003es by specifying a\n path name (using \"/\") instead of a fully qualified class name (using\n \".\").\n\n \u003cp\u003e\u003ca name\u003d\"default_behavior_example\"\u003e\n \u003cstrong\u003eExample:\u003c/strong\u003e\u003c/a\u003e\n \u003cp\u003e\n The following class and property files are provided:\n \u003cpre\u003e\n     MyResources.class\n     MyResources.properties\n     MyResources_fr.properties\n     MyResources_fr_CH.class\n     MyResources_fr_CH.properties\n     MyResources_en.properties\n     MyResources_es_ES.class\n \u003c/pre\u003e\n\n The contents of all files are valid (that is, public non-abstract\n subclasses of \u003ccode\u003eResourceBundle\u003c/code\u003e for the \".class\" files,\n syntactically correct \".properties\" files).  The default locale is\n \u003ccode\u003eLocale(\"en\", \"GB\")\u003c/code\u003e.\n\n \u003cp\u003eCalling \u003ccode\u003egetBundle\u003c/code\u003e with the locale arguments below will\n instantiate resource bundles as follows:\n\n \u003ctable summary\u003d\"getBundle() locale to resource bundle mapping\"\u003e\n \u003ctr\u003e\u003ctd\u003eLocale(\"fr\", \"CH\")\u003c/td\u003e\u003ctd\u003eMyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eLocale(\"fr\", \"FR\")\u003c/td\u003e\u003ctd\u003eMyResources_fr.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eLocale(\"de\", \"DE\")\u003c/td\u003e\u003ctd\u003eMyResources_en.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eLocale(\"en\", \"US\")\u003c/td\u003e\u003ctd\u003eMyResources_en.properties, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003eLocale(\"es\", \"ES\")\u003c/td\u003e\u003ctd\u003eMyResources_es_ES.class, parent MyResources.class\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eThe file MyResources_fr_CH.properties is never used because it is\n hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties\n is also hidden by MyResources.class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale, java.lang.ClassLoader)","flatSignature":"(String, Locale, ClassLoader)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBundle","comment":"Returns a resource bundle using the specified base name, target\n locale, class loader and control. Unlike the {@linkplain\n #getBundle(String, Locale, ClassLoader) \u003ccode\u003egetBundle\u003c/code\u003e\n factory methods with no \u003ccode\u003econtrol\u003c/code\u003e argument}, the given\n \u003ccode\u003econtrol\u003c/code\u003e specifies how to locate and instantiate resource\n bundles. Conceptually, the bundle loading process with the given\n \u003ccode\u003econtrol\u003c/code\u003e is performed in the following steps.\n\n \u003col\u003e\n \u003cli\u003eThis factory method looks up the resource bundle in the cache for\n the specified \u003ccode\u003ebaseName\u003c/code\u003e, \u003ccode\u003etargetLocale\u003c/code\u003e and\n \u003ccode\u003eloader\u003c/code\u003e.  If the requested resource bundle instance is\n found in the cache and the time-to-live periods of the instance and\n all of its parent instances have not expired, the instance is returned\n to the caller. Otherwise, this factory method proceeds with the\n loading process below.\u003c/li\u003e\n\n \u003cli\u003eThe {@link ResourceBundle.Control#getFormats(String)\n control.getFormats} method is called to get resource bundle formats\n to produce bundle or resource names. The strings\n \u003ccode\u003e\"java.class\"\u003c/code\u003e and \u003ccode\u003e\"java.properties\"\u003c/code\u003e\n designate class-based and {@linkplain PropertyResourceBundle\n property}-based resource bundles, respectively. Other strings\n starting with \u003ccode\u003e\"java.\"\u003c/code\u003e are reserved for future extensions\n and must not be used for application-defined formats. Other strings\n designate application-defined formats.\u003c/li\u003e\n\n \u003cli\u003eThe {@link ResourceBundle.Control#getCandidateLocales(String,\n Locale) control.getCandidateLocales} method is called with the target\n locale to get a list of \u003cem\u003ecandidate \u003ccode\u003eLocale\u003c/code\u003es\u003c/em\u003e for\n which resource bundles are searched.\u003c/li\u003e\n\n \u003cli\u003eThe {@link ResourceBundle.Control#newBundle(String, Locale,\n String, ClassLoader, boolean) control.newBundle} method is called to\n instantiate a \u003ccode\u003eResourceBundle\u003c/code\u003e for the base bundle name, a\n candidate locale, and a format. (Refer to the note on the cache\n lookup below.) This step is iterated over all combinations of the\n candidate locales and formats until the \u003ccode\u003enewBundle\u003c/code\u003e method\n returns a \u003ccode\u003eResourceBundle\u003c/code\u003e instance or the iteration has\n used up all the combinations. For example, if the candidate locales\n are \u003ccode\u003eLocale(\"de\", \"DE\")\u003c/code\u003e, \u003ccode\u003eLocale(\"de\")\u003c/code\u003e and\n \u003ccode\u003eLocale(\"\")\u003c/code\u003e and the formats are \u003ccode\u003e\"java.class\"\u003c/code\u003e\n and \u003ccode\u003e\"java.properties\"\u003c/code\u003e, then the following is the\n sequence of locale-format combinations to be used to call\n \u003ccode\u003econtrol.newBundle\u003c/code\u003e.\n\n \u003ctable style\u003d\"width: 50%; text-align: left; margin-left: 40px;\"\n  border\u003d\"0\" cellpadding\u003d\"2\" cellspacing\u003d\"2\" summary\u003d\"locale-format combinations for newBundle\"\u003e\n \u003ctbody\u003e\n \u003ctr\u003e\n \u003ctd\n style\u003d\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003cbr\u003e\n \u003c/td\u003e\n \u003ctd\n style\u003d\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\"\u003e\u003ccode\u003eformat\u003c/code\u003e\u003cbr\u003e\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003eLocale(\"de\", \"DE\")\u003c/code\u003e\u003cbr\u003e\n \u003c/td\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003ejava.class\u003c/code\u003e\u003cbr\u003e\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003eLocale(\"de\", \"DE\")\u003c/code\u003e\u003c/td\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003ejava.properties\u003c/code\u003e\u003cbr\u003e\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003eLocale(\"de\")\u003c/code\u003e\u003c/td\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003ejava.class\u003c/code\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003eLocale(\"de\")\u003c/code\u003e\u003c/td\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003ejava.properties\u003c/code\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003eLocale(\"\")\u003c/code\u003e\u003cbr\u003e\n \u003c/td\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003ejava.class\u003c/code\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003eLocale(\"\")\u003c/code\u003e\u003c/td\u003e\n \u003ctd style\u003d\"vertical-align: top; width: 50%;\"\u003e\u003ccode\u003ejava.properties\u003c/code\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/tbody\u003e\n \u003c/table\u003e\n \u003c/li\u003e\n\n \u003cli\u003eIf the previous step has found no resource bundle, proceed to\n Step 6. If a bundle has been found that is a base bundle (a bundle\n for \u003ccode\u003eLocale(\"\")\u003c/code\u003e), and the candidate locale list only contained\n \u003ccode\u003eLocale(\"\")\u003c/code\u003e, return the bundle to the caller. If a bundle\n has been found that is a base bundle, but the candidate locale list\n contained locales other than Locale(\"\"), put the bundle on hold and\n proceed to Step 6. If a bundle has been found that is not a base\n bundle, proceed to Step 7.\u003c/li\u003e\n\n \u003cli\u003eThe {@link ResourceBundle.Control#getFallbackLocale(String,\n Locale) control.getFallbackLocale} method is called to get a fallback\n locale (alternative to the current target locale) to try further\n finding a resource bundle. If the method returns a non-null locale,\n it becomes the next target locale and the loading process starts over\n from Step 3. Otherwise, if a base bundle was found and put on hold in\n a previous Step 5, it is returned to the caller now. Otherwise, a\n MissingResourceException is thrown.\u003c/li\u003e\n\n \u003cli\u003eAt this point, we have found a resource bundle that\u0027s not the\n base bundle. If this bundle set its parent during its instantiation,\n it is returned to the caller. Otherwise, its \u003ca\n href\u003d\"./ResourceBundle.html#parent_chain\"\u003eparent chain\u003c/a\u003e is\n instantiated based on the list of candidate locales from which it was\n found. Finally, the bundle is returned to the caller.\u003c/li\u003e\n \u003c/ol\u003e\n\n \u003cp\u003eDuring the resource bundle loading process above, this factory\n method looks up the cache before calling the {@link\n Control#newBundle(String, Locale, String, ClassLoader, boolean)\n control.newBundle} method.  If the time-to-live period of the\n resource bundle found in the cache has expired, the factory method\n calls the {@link ResourceBundle.Control#needsReload(String, Locale,\n String, ClassLoader, ResourceBundle, long) control.needsReload}\n method to determine whether the resource bundle needs to be reloaded.\n If reloading is required, the factory method calls\n \u003ccode\u003econtrol.newBundle\u003c/code\u003e to reload the resource bundle.  If\n \u003ccode\u003econtrol.newBundle\u003c/code\u003e returns \u003ccode\u003enull\u003c/code\u003e, the factory\n method puts a dummy resource bundle in the cache as a mark of\n nonexistent resource bundles in order to avoid lookup overhead for\n subsequent requests. Such dummy resource bundles are under the same\n expiration control as specified by \u003ccode\u003econtrol\u003c/code\u003e.\n\n \u003cp\u003eAll resource bundles loaded are cached by default. Refer to\n {@link Control#getTimeToLive(String,Locale)\n control.getTimeToLive} for details.\n\n \u003cp\u003eThe following is an example of the bundle loading process with the\n default \u003ccode\u003eResourceBundle.Control\u003c/code\u003e implementation.\n\n \u003cp\u003eConditions:\n \u003cul\u003e\n \u003cli\u003eBase bundle name: \u003ccode\u003efoo.bar.Messages\u003c/code\u003e\n \u003cli\u003eRequested \u003ccode\u003eLocale\u003c/code\u003e: {@link Locale#ITALY}\u003c/li\u003e\n \u003cli\u003eDefault \u003ccode\u003eLocale\u003c/code\u003e: {@link Locale#FRENCH}\u003c/li\u003e\n \u003cli\u003eAvailable resource bundles:\n \u003ccode\u003efoo/bar/Messages_fr.properties\u003c/code\u003e and\n \u003ccode\u003efoo/bar/Messages.properties\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eFirst, \u003ccode\u003egetBundle\u003c/code\u003e tries loading a resource bundle in\n the following sequence.\n\n \u003cul\u003e\n \u003cli\u003eclass \u003ccode\u003efoo.bar.Messages_it_IT\u003c/code\u003e\n \u003cli\u003efile \u003ccode\u003efoo/bar/Messages_it_IT.properties\u003c/code\u003e\n \u003cli\u003eclass \u003ccode\u003efoo.bar.Messages_it\u003c/code\u003e\u003c/li\u003e\n \u003cli\u003efile \u003ccode\u003efoo/bar/Messages_it.properties\u003c/code\u003e\u003c/li\u003e\n \u003cli\u003eclass \u003ccode\u003efoo.bar.Messages\u003c/code\u003e\u003c/li\u003e\n \u003cli\u003efile \u003ccode\u003efoo/bar/Messages.properties\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eAt this point, \u003ccode\u003egetBundle\u003c/code\u003e finds\n \u003ccode\u003efoo/bar/Messages.properties\u003c/code\u003e, which is put on hold\n because it\u0027s the base bundle.  \u003ccode\u003egetBundle\u003c/code\u003e calls {@link\n Control#getFallbackLocale(String, Locale)\n control.getFallbackLocale(\"foo.bar.Messages\", Locale.ITALY)} which\n returns \u003ccode\u003eLocale.FRENCH\u003c/code\u003e. Next, \u003ccode\u003egetBundle\u003c/code\u003e\n tries loading a bundle in the following sequence.\n\n \u003cul\u003e\n \u003cli\u003eclass \u003ccode\u003efoo.bar.Messages_fr\u003c/code\u003e\u003c/li\u003e\n \u003cli\u003efile \u003ccode\u003efoo/bar/Messages_fr.properties\u003c/code\u003e\u003c/li\u003e\n \u003cli\u003eclass \u003ccode\u003efoo.bar.Messages\u003c/code\u003e\u003c/li\u003e\n \u003cli\u003efile \u003ccode\u003efoo/bar/Messages.properties\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003e\u003ccode\u003egetBundle\u003c/code\u003e finds\n \u003ccode\u003efoo/bar/Messages_fr.properties\u003c/code\u003e and creates a\n \u003ccode\u003eResourceBundle\u003c/code\u003e instance. Then, \u003ccode\u003egetBundle\u003c/code\u003e\n sets up its parent chain from the list of the candidate locales.  Only\n \u003ccode\u003efoo/bar/Messages.properties\u003c/code\u003e is found in the list and\n \u003ccode\u003egetBundle\u003c/code\u003e creates a \u003ccode\u003eResourceBundle\u003c/code\u003e instance\n that becomes the parent of the instance for\n \u003ccode\u003efoo/bar/Messages_fr.properties\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle.Control)","flatSignature":"(String, Locale, ClassLoader, ResourceBundle.Control)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"targetLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}},{"name":"control","type":{"isPrimitive":false,"simpleName":"Control","qualifiedName":"java.util.ResourceBundle.Control","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clearCache","comment":"Removes all resource bundles from the cache that have been loaded\n using the caller\u0027s class loader.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"clearCache","comment":"Removes all resource bundles from the cache that have been loaded\n using the given class loader.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.ClassLoader)","flatSignature":"(ClassLoader)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getKeys","comment":"Returns an enumeration of the keys.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"containsKey","comment":"Determines whether the given \u003ccode\u003ekey\u003c/code\u003e is contained in\n this \u003ccode\u003eResourceBundle\u003c/code\u003e or its parent bundles.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"keySet","comment":"Returns a \u003ccode\u003eSet\u003c/code\u003e of all keys contained in this\n \u003ccode\u003eResourceBundle\u003c/code\u003e and its parent bundles.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.PropertyResourceBundle","java.util.ListResourceBundle"],"enumConstants":[]}