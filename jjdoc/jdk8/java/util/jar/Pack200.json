{"name":"Pack200","comment":"Transforms a JAR file to or from a packed stream in Pack200 format.\n Please refer to Network Transfer Format JSR 200 Specification at\n \u003ca href\u003dhttp://jcp.org/aboutJava/communityprocess/review/jsr200/index.html\u003ehttp://jcp.org/aboutJava/communityprocess/review/jsr200/index.html\u003c/a\u003e\n \u003cp\u003e\n Typically the packer engine is used by application developers\n to deploy or host JAR files on a website.\n The unpacker  engine is used by deployment applications to\n transform the byte-stream back to JAR format.\n \u003cp\u003e\n Here is an example using  packer and unpacker:\n \u003cpre\u003e{@code\n    import java.util.jar.Pack200;\n    import java.util.jar.Pack200.*;\n    ...\n    // Create the Packer object\n    Packer packer \u003d Pack200.newPacker();\n\n    // Initialize the state by setting the desired properties\n    Map p \u003d packer.properties();\n    // take more time choosing codings for better compression\n    p.put(Packer.EFFORT, \"7\");  // default is \"5\"\n    // use largest-possible archive segments (\u003e10% better compression).\n    p.put(Packer.SEGMENT_LIMIT, \"-1\");\n    // reorder files for better compression.\n    p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);\n    // smear modification times to a single value.\n    p.put(Packer.MODIFICATION_TIME, Packer.LATEST);\n    // ignore all JAR deflation requests,\n    // transmitting a single request to use \"store\" mode.\n    p.put(Packer.DEFLATE_HINT, Packer.FALSE);\n    // discard debug attributes\n    p.put(Packer.CODE_ATTRIBUTE_PFX+\"LineNumberTable\", Packer.STRIP);\n    // throw an error if an attribute is unrecognized\n    p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);\n    // pass one class file uncompressed:\n    p.put(Packer.PASS_FILE_PFX+0, \"mutants/Rogue.class\");\n    try {\n        JarFile jarFile \u003d new JarFile(\"/tmp/testref.jar\");\n        FileOutputStream fos \u003d new FileOutputStream(\"/tmp/test.pack\");\n        // Call the packer\n        packer.pack(jarFile, fos);\n        jarFile.close();\n        fos.close();\n\n        File f \u003d new File(\"/tmp/test.pack\");\n        FileOutputStream fostream \u003d new FileOutputStream(\"/tmp/test.jar\");\n        JarOutputStream jostream \u003d new JarOutputStream(fostream);\n        Unpacker unpacker \u003d Pack200.newUnpacker();\n        // Call the unpacker\n        unpacker.unpack(f, jostream);\n        // Must explicitly close the output.\n        jostream.close();\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n    }\n }\u003c/pre\u003e\n \u003cp\u003e\n A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.\n The deployment applications can use \"Accept-Encoding\u003dpack200-gzip\". This\n indicates to the server that the client application desires a version of\n the file encoded with Pack200 and further compressed with gzip. Please\n refer to  \u003ca href\u003d\"{@docRoot}/../technotes/guides/deployment/deployment-guide/pack200.html\"\u003eJava Deployment Guide\u003c/a\u003e for more details and\n techniques.\n \u003cp\u003e\n Unless otherwise noted, passing a \u003ctt\u003enull\u003c/tt\u003e argument to a constructor or\n method in this class will cause a {@link NullPointerException} to be thrown.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Pack200","qualifiedName":"java.util.jar.Pack200","dimension":"","elementType":{},"package":"java.util.jar","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":["java.util.jar.Pack200.Packer","java.util.jar.Pack200.Unpacker"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"newPacker","comment":"Obtain new instance of a class that implements Packer.\n \u003cul\u003e\n \u003cli\u003e\u003cp\u003eIf the system property \u003ctt\u003ejava.util.jar.Pack200.Packer\u003c/tt\u003e\n is defined, then the value is taken to be the fully-qualified name\n of a concrete implementation class, which must implement Packer.\n This class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.\u003c/p\u003e\u003c/li\u003e\n\n \u003cli\u003e\u003cp\u003eIf an implementation has not been specified with the system\n property, then the system-default implementation class is instantiated,\n and the result is returned.\u003c/p\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eNote:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n packer engines, or else serialize use of one engine with a lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Packer","qualifiedName":"java.util.jar.Pack200.Packer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"newUnpacker","comment":"Obtain new instance of a class that implements Unpacker.\n \u003cul\u003e\n \u003cli\u003e\u003cp\u003eIf the system property \u003ctt\u003ejava.util.jar.Pack200.Unpacker\u003c/tt\u003e\n is defined, then the value is taken to be the fully-qualified\n name of a concrete implementation class, which must implement Unpacker.\n The class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.\u003c/p\u003e\u003c/li\u003e\n\n \u003cli\u003e\u003cp\u003eIf an implementation has not been specified with the\n system property, then the system-default implementation class\n is instantiated, and the result is returned.\u003c/p\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eNote:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n unpacker engines, or else serialize use of one engine with a lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Unpacker","qualifiedName":"java.util.jar.Pack200.Unpacker","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}