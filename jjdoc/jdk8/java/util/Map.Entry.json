{"name":"Map.Entry","comment":"A map entry (key-value pair).  The \u003ctt\u003eMap.entrySet\u003c/tt\u003e method returns\n a collection-view of the map, whose elements are of this class.  The\n \u003ci\u003eonly\u003c/i\u003e way to obtain a reference to a map entry is from the\n iterator of this collection-view.  These \u003ctt\u003eMap.Entry\u003c/tt\u003e objects are\n valid \u003ci\u003eonly\u003c/i\u003e for the duration of the iteration; more formally,\n the behavior of a map entry is undefined if the backing map has been\n modified after the entry was returned by the iterator, except through\n the \u003ctt\u003esetValue\u003c/tt\u003e operation on the map entry.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{},"package":"java.util","interfaces":[],"isAbstract":true,"isStatic":true,"since":"1.2","innerClasses":[],"isInnerClass":true,"constructors":[],"fields":[],"methods":[{"name":"getKey","comment":"Returns the key corresponding to this entry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getValue","comment":"Returns the value corresponding to this entry.  If the mapping\n has been removed from the backing map (by the iterator\u0027s\n \u003ctt\u003eremove\u003c/tt\u003e operation), the results of this call are undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setValue","comment":"Replaces the value corresponding to this entry with the specified\n value (optional operation).  (Writes through to the map.)  The\n behavior of this call is undefined if the mapping has already been\n removed from the map (by the iterator\u0027s \u003ctt\u003eremove\u003c/tt\u003e operation).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(V)","flatSignature":"(V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this entry for equality.\n Returns \u003ctt\u003etrue\u003c/tt\u003e if the given object is also a map entry and\n the two entries represent the same mapping.  More formally, two\n entries \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e represent the same mapping\n if\u003cpre\u003e\n     (e1.getKey()\u003d\u003dnull ?\n      e2.getKey()\u003d\u003dnull : e1.getKey().equals(e2.getKey()))  \u0026amp;\u0026amp;\n     (e1.getValue()\u003d\u003dnull ?\n      e2.getValue()\u003d\u003dnull : e1.getValue().equals(e2.getValue()))\n \u003c/pre\u003e\n This ensures that the \u003ctt\u003eequals\u003c/tt\u003e method works properly across\n different implementations of the \u003ctt\u003eMap.Entry\u003c/tt\u003e interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this map entry.  The hash code\n of a map entry \u003ctt\u003ee\u003c/tt\u003e is defined to be: \u003cpre\u003e\n     (e.getKey()\u003d\u003dnull   ? 0 : e.getKey().hashCode()) ^\n     (e.getValue()\u003d\u003dnull ? 0 : e.getValue().hashCode())\n \u003c/pre\u003e\n This ensures that \u003ctt\u003ee1.equals(e2)\u003c/tt\u003e implies that\n \u003ctt\u003ee1.hashCode()\u003d\u003de2.hashCode()\u003c/tt\u003e for any two Entries\n \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e, as required by the general\n contract of \u003ctt\u003eObject.hashCode\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"comparingByKey","comment":"Returns a comparator that compares {@link Map.Entry} in natural order on key.\n\n \u003cp\u003eThe returned comparator is serializable and throws {@link\n NullPointerException} when comparing an entry with a null key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"K","bounds":["java.lang.Comparable"]},{"name":"V","bounds":[]}]},{"name":"comparingByValue","comment":"Returns a comparator that compares {@link Map.Entry} in natural order on value.\n\n \u003cp\u003eThe returned comparator is serializable and throws {@link\n NullPointerException} when comparing an entry with null values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":["java.lang.Comparable"]}]},{"name":"comparingByKey","comment":"Returns a comparator that compares {@link Map.Entry} by key using the given\n {@link Comparator}.\n\n \u003cp\u003eThe returned comparator is serializable if the specified comparator\n is also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super K\u003e)","flatSignature":"(Comparator\u003c? super K\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"cmp","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}]},{"name":"comparingByValue","comment":"Returns a comparator that compares {@link Map.Entry} by value using the given\n {@link Comparator}.\n\n \u003cp\u003eThe returned comparator is serializable if the specified comparator\n is also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super V\u003e)","flatSignature":"(Comparator\u003c? super V\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"cmp","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"subInterfaces":["java.util.AbstractMap.SimpleEntry","java.util.AbstractMap.SimpleImmutableEntry"],"enumConstants":[]}