{"name":"Executors","comment":"Factory and utility methods for {@link Executor}, {@link\n ExecutorService}, {@link ScheduledExecutorService}, {@link\n ThreadFactory}, and {@link Callable} classes defined in this\n package. This class supports the following kinds of methods:\n\n \u003cul\u003e\n   \u003cli\u003e Methods that create and return an {@link ExecutorService}\n        set up with commonly useful configuration settings.\n   \u003cli\u003e Methods that create and return a {@link ScheduledExecutorService}\n        set up with commonly useful configuration settings.\n   \u003cli\u003e Methods that create and return a \"wrapped\" ExecutorService, that\n        disables reconfiguration by making implementation-specific methods\n        inaccessible.\n   \u003cli\u003e Methods that create and return a {@link ThreadFactory}\n        that sets newly created threads to a known state.\n   \u003cli\u003e Methods that create and return a {@link Callable}\n        out of other closure-like forms, so they can be used\n        in execution methods requiring {@code Callable}.\n \u003c/ul\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Executors","qualifiedName":"java.util.concurrent.Executors","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"newFixedThreadPool","comment":"Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue.  At any point, at most\n {@code nThreads} threads will be active processing tasks.\n If additional tasks are submitted when all threads are active,\n they will wait in the queue until a thread is available.\n If any thread terminates due to a failure during execution\n prior to shutdown, a new one will take its place if needed to\n execute subsequent tasks.  The threads in the pool will exist\n until it is explicitly {@link ExecutorService#shutdown shutdown}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nThreads","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newWorkStealingPool","comment":"Creates a thread pool that maintains enough threads to support\n the given parallelism level, and may use multiple queues to\n reduce contention. The parallelism level corresponds to the\n maximum number of threads actively engaged in, or available to\n engage in, task processing. The actual number of threads may\n grow and shrink dynamically. A work-stealing pool makes no\n guarantees about the order in which submitted tasks are\n executed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"parallelism","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newWorkStealingPool","comment":"Creates a work-stealing thread pool using all\n {@link Runtime#availableProcessors available processors}\n as its target parallelism level.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"newFixedThreadPool","comment":"Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue, using the provided\n ThreadFactory to create new threads when needed.  At any point,\n at most {@code nThreads} threads will be active processing\n tasks.  If additional tasks are submitted when all threads are\n active, they will wait in the queue until a thread is\n available.  If any thread terminates due to a failure during\n execution prior to shutdown, a new one will take its place if\n needed to execute subsequent tasks.  The threads in the pool will\n exist until it is explicitly {@link ExecutorService#shutdown\n shutdown}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.ThreadFactory)","flatSignature":"(int, ThreadFactory)","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nThreads","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newSingleThreadExecutor","comment":"Creates an Executor that uses a single worker thread operating\n off an unbounded queue. (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n {@code newFixedThreadPool(1)} the returned executor is\n guaranteed not to be reconfigurable to use additional threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"newSingleThreadExecutor","comment":"Creates an Executor that uses a single worker thread operating\n off an unbounded queue, and uses the provided ThreadFactory to\n create a new thread when needed. Unlike the otherwise\n equivalent {@code newFixedThreadPool(1, threadFactory)} the\n returned executor is guaranteed not to be reconfigurable to use\n additional threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ThreadFactory)","flatSignature":"(ThreadFactory)","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newCachedThreadPool","comment":"Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available.  These pools will typically improve the performance\n of programs that execute many short-lived asynchronous tasks.\n Calls to {@code execute} will reuse previously constructed\n threads if available. If no existing thread is available, a new\n thread will be created and added to the pool. Threads that have\n not been used for sixty seconds are terminated and removed from\n the cache. Thus, a pool that remains idle for long enough will\n not consume any resources. Note that pools with similar\n properties but different details (for example, timeout parameters)\n may be created using {@link ThreadPoolExecutor} constructors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"newCachedThreadPool","comment":"Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available, and uses the provided\n ThreadFactory to create new threads when needed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ThreadFactory)","flatSignature":"(ThreadFactory)","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newSingleThreadScheduledExecutor","comment":"Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.\n (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n {@code newScheduledThreadPool(1)} the returned executor is\n guaranteed not to be reconfigurable to use additional threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"newSingleThreadScheduledExecutor","comment":"Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.  (Note\n however that if this single thread terminates due to a failure\n during execution prior to shutdown, a new one will take its\n place if needed to execute subsequent tasks.)  Tasks are\n guaranteed to execute sequentially, and no more than one task\n will be active at any given time. Unlike the otherwise\n equivalent {@code newScheduledThreadPool(1, threadFactory)}\n the returned executor is guaranteed not to be reconfigurable to\n use additional threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ThreadFactory)","flatSignature":"(ThreadFactory)","returnType":{"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newScheduledThreadPool","comment":"Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"corePoolSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newScheduledThreadPool","comment":"Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.ThreadFactory)","flatSignature":"(int, ThreadFactory)","returnType":{"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"corePoolSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unconfigurableExecutorService","comment":"Returns an object that delegates all defined {@link\n ExecutorService} methods to the given executor, but not any\n other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ExecutorService)","flatSignature":"(ExecutorService)","returnType":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"executor","type":{"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unconfigurableScheduledExecutorService","comment":"Returns an object that delegates all defined {@link\n ScheduledExecutorService} methods to the given executor, but\n not any other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ScheduledExecutorService)","flatSignature":"(ScheduledExecutorService)","returnType":{"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"executor","type":{"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"defaultThreadFactory","comment":"Returns a default thread factory used to create new threads.\n This factory creates all new threads used by an Executor in the\n same {@link ThreadGroup}. If there is a {@link\n java.lang.SecurityManager}, it uses the group of {@link\n System#getSecurityManager}, else the group of the thread\n invoking this {@code defaultThreadFactory} method. Each new\n thread is created as a non-daemon thread with priority set to\n the smaller of {@code Thread.NORM_PRIORITY} and the maximum\n priority permitted in the thread group.  New threads have names\n accessible via {@link Thread#getName} of\n \u003cem\u003epool-N-thread-M\u003c/em\u003e, where \u003cem\u003eN\u003c/em\u003e is the sequence\n number of this factory, and \u003cem\u003eM\u003c/em\u003e is the sequence number\n of the thread created by this factory.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"privilegedThreadFactory","comment":"Returns a thread factory used to create new threads that\n have the same permissions as the current thread.\n This factory creates threads with the same settings as {@link\n Executors#defaultThreadFactory}, additionally setting the\n AccessControlContext and contextClassLoader of new threads to\n be the same as the thread invoking this\n {@code privilegedThreadFactory} method.  A new\n {@code privilegedThreadFactory} can be created within an\n {@link AccessController#doPrivileged AccessController.doPrivileged}\n action setting the current thread\u0027s access control context to\n create threads with the selected permission settings holding\n within that action.\n\n \u003cp\u003eNote that while tasks running within such threads will have\n the same access control and class loader settings as the\n current thread, they need not have the same {@link\n java.lang.ThreadLocal} or {@link\n java.lang.InheritableThreadLocal} values. If necessary,\n particular values of thread locals can be set or reset before\n any task runs in {@link ThreadPoolExecutor} subclasses using\n {@link ThreadPoolExecutor#beforeExecute(Thread, Runnable)}.\n Also, if it is necessary to initialize worker threads to have\n the same InheritableThreadLocal settings as some other\n designated thread, you can create a custom ThreadFactory in\n which that thread waits for and services requests to create\n others that will inherit its values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"callable","comment":"Returns a {@link Callable} object that, when\n called, runs the given task and returns the given result.  This\n can be useful when applying methods requiring a\n {@code Callable} to an otherwise resultless action.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, T)","flatSignature":"(Runnable, T)","returnType":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"callable","comment":"Returns a {@link Callable} object that, when\n called, runs the given task and returns {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"callable","comment":"Returns a {@link Callable} object that, when\n called, runs the given privileged action and returns its result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedAction\u003c?\u003e)","flatSignature":"(PrivilegedAction\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedAction","qualifiedName":"java.security.PrivilegedAction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"callable","comment":"Returns a {@link Callable} object that, when\n called, runs the given privileged exception action and returns\n its result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.PrivilegedExceptionAction\u003c?\u003e)","flatSignature":"(PrivilegedExceptionAction\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"PrivilegedExceptionAction","qualifiedName":"java.security.PrivilegedExceptionAction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"privilegedCallable","comment":"Returns a {@link Callable} object that will, when called,\n execute the given {@code callable} under the current access\n control context. This method should normally be invoked within\n an {@link AccessController#doPrivileged AccessController.doPrivileged}\n action to create callables that will, if possible, execute\n under the selected permission settings holding within that\n action; or if not possible, throw an associated {@link\n AccessControlException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cT\u003e)","flatSignature":"(Callable\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"callable","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"privilegedCallableUsingCurrentClassLoader","comment":"Returns a {@link Callable} object that will, when called,\n execute the given {@code callable} under the current access\n control context, with the current context class loader as the\n context class loader. This method should normally be invoked\n within an\n {@link AccessController#doPrivileged AccessController.doPrivileged}\n action to create callables that will, if possible, execute\n under the selected permission settings holding within that\n action; or if not possible, throw an associated {@link\n AccessControlException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cT\u003e)","flatSignature":"(Callable\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"callable","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[],"enumConstants":[]}