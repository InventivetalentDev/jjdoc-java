{"name":"RecursiveTask","comment":"A recursive result-bearing {@link ForkJoinTask}.\n\n \u003cp\u003eFor a classic example, here is a task computing Fibonacci numbers:\n\n  \u003cpre\u003e {@code\n class Fibonacci extends RecursiveTask\u003cInteger\u003e {\n   final int n;\n   Fibonacci(int n) { this.n \u003d n; }\n   Integer compute() {\n     if (n \u003c\u003d 1)\n       return n;\n     Fibonacci f1 \u003d new Fibonacci(n - 1);\n     f1.fork();\n     Fibonacci f2 \u003d new Fibonacci(n - 2);\n     return f2.compute() + f1.join();\n   }\n }}\u003c/pre\u003e\n\n However, besides being a dumb way to compute Fibonacci functions\n (there is a simple fast linear algorithm that you\u0027d use in\n practice), this is likely to perform poorly because the smallest\n subtasks are too small to be worthwhile splitting up. Instead, as\n is the case for nearly all fork/join applications, you\u0027d pick some\n minimum granularity size (for example 10 here) for which you always\n sequentially solve rather than subdividing.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"RecursiveTask","qualifiedName":"java.util.concurrent.RecursiveTask","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.concurrent.ForkJoinTask","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"RecursiveTask","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"getRawResult","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"V","bounds":[]}],"enumConstants":[]}