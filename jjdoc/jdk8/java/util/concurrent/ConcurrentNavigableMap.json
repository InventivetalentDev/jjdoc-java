{"name":"ConcurrentNavigableMap","comment":"A {@link ConcurrentMap} supporting {@link NavigableMap} operations,\n and recursively so for its navigable sub-maps.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":["java.util.concurrent.ConcurrentMap","java.util.NavigableMap"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"subMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean, K, boolean)","flatSignature":"(K, boolean, K, boolean)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"fromInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"headMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tailMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, K)","flatSignature":"(K, K)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"headMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"tailMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"descendingMap","comment":"Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.\n\n \u003cp\u003eThe returned map has an ordering equivalent to\n {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.\n The expression {@code m.descendingMap().descendingMap()} returns a\n view of {@code m} essentially equivalent to {@code m}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"navigableKeySet","comment":"Returns a {@link NavigableSet} view of the keys contained in this map.\n The set\u0027s iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link NavigableSet} view of the keys contained in this map.\n The set\u0027s iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThis method is equivalent to method {@code navigableKeySet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingKeySet","comment":"Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n The set\u0027s iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"subInterfaces":["java.util.concurrent.ConcurrentSkipListMap"],"enumConstants":[]}