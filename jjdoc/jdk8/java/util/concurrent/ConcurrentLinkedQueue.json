{"name":"ConcurrentLinkedQueue","comment":"An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The \u003cem\u003ehead\u003c/em\u003e of the queue is that element that has been on the\n queue the longest time.\n The \u003cem\u003etail\u003c/em\u003e of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n A {@code ConcurrentLinkedQueue} is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of {@code null} elements.\n\n \u003cp\u003eThis implementation employs an efficient \u003cem\u003enon-blocking\u003c/em\u003e\n algorithm based on one described in \u003ca\n href\u003d\"http://www.cs.rochester.edu/u/michael/PODC96.html\"\u003e Simple,\n Fast, and Practical Non-Blocking and Blocking Concurrent Queue\n Algorithms\u003c/a\u003e by Maged M. Michael and Michael L. Scott.\n\n \u003cp\u003eIterators are \u003ci\u003eweakly consistent\u003c/i\u003e, returning elements\n reflecting the state of the queue at some point at or since the\n creation of the iterator.  They do \u003cem\u003enot\u003c/em\u003e throw {@link\n java.util.ConcurrentModificationException}, and may proceed concurrently\n with other operations.  Elements contained in the queue since the creation\n of the iterator will be returned exactly once.\n\n \u003cp\u003eBeware that, unlike in most collections, the {@code size} method\n is \u003cem\u003eNOT\u003c/em\u003e a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code addAll},\n {@code removeAll}, {@code retainAll}, {@code containsAll},\n {@code equals}, and {@code toArray} are \u003cem\u003enot\u003c/em\u003e guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an {@code addAll} operation might view only some\n of the added elements.\n\n \u003cp\u003eThis class and its iterator implement all of the \u003cem\u003eoptional\u003c/em\u003e\n methods of the {@link Queue} and {@link Iterator} interfaces.\n\n \u003cp\u003eMemory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code ConcurrentLinkedQueue}\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n actions subsequent to the access or removal of that element from\n the {@code ConcurrentLinkedQueue} in another thread.\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ConcurrentLinkedQueue","qualifiedName":"java.util.concurrent.ConcurrentLinkedQueue","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.AbstractQueue","interfaces":["java.util.Queue","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ConcurrentLinkedQueue","comment":"Creates a {@code ConcurrentLinkedQueue} that is initially empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ConcurrentLinkedQueue","comment":"Creates a {@code ConcurrentLinkedQueue}\n initially containing the elements of the given collection,\n added in traversal order of the collection\u0027s iterator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"add","comment":"Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n {@link IllegalStateException} or return {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offer","comment":"Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"poll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peek","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns {@code true} if this queue contains no elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"Returns the number of elements in this queue.  If this queue\n contains more than {@code Integer.MAX_VALUE} elements, returns\n {@code Integer.MAX_VALUE}.\n\n \u003cp\u003eBeware that, unlike in most collections, this method is\n \u003cem\u003eNOT\u003c/em\u003e a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.\n Additionally, if elements are added or removed during execution\n of this method, the returned result may be inaccurate.  Thus,\n this method is typically not very useful in concurrent\n applications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remove","comment":"Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Appends all of the elements in the specified collection to the end of\n this queue, in the order that they are returned by the specified\n collection\u0027s iterator.  Attempts to {@code addAll} of a queue to\n itself result in {@code IllegalArgumentException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n \u003cp\u003eThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \u003cp\u003eThis method acts as bridge between array-based and collection-based\n APIs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n \u003cp\u003eIf this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.\n\n \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \u003cp\u003eSuppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n  \u003cpre\u003e {@code String[] y \u003d x.toArray(new String[0]);}\u003c/pre\u003e\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"iterator","comment":"Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n \u003cp\u003eThe returned iterator is\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Returns a {@link Spliterator} over the elements in this queue.\n\n \u003cp\u003eThe returned spliterator is\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#CONCURRENT},\n {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"enumConstants":[]}