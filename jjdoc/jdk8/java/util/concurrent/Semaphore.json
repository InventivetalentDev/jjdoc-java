{"name":"Semaphore","comment":"A counting semaphore.  Conceptually, a semaphore maintains a set of\n permits.  Each {@link #acquire} blocks if necessary until a permit is\n available, and then takes it.  Each {@link #release} adds a permit,\n potentially releasing a blocking acquirer.\n However, no actual permit objects are used; the {@code Semaphore} just\n keeps a count of the number available and acts accordingly.\n\n \u003cp\u003eSemaphores are often used to restrict the number of threads than can\n access some (physical or logical) resource. For example, here is\n a class that uses a semaphore to control access to a pool of items:\n  \u003cpre\u003e {@code\n class Pool {\n   private static final int MAX_AVAILABLE \u003d 100;\n   private final Semaphore available \u003d new Semaphore(MAX_AVAILABLE, true);\n\n   public Object getItem() throws InterruptedException {\n     available.acquire();\n     return getNextAvailableItem();\n   }\n\n   public void putItem(Object x) {\n     if (markAsUnused(x))\n       available.release();\n   }\n\n   // Not a particularly efficient data structure; just for demo\n\n   protected Object[] items \u003d ... whatever kinds of items being managed\n   protected boolean[] used \u003d new boolean[MAX_AVAILABLE];\n\n   protected synchronized Object getNextAvailableItem() {\n     for (int i \u003d 0; i \u003c MAX_AVAILABLE; ++i) {\n       if (!used[i]) {\n          used[i] \u003d true;\n          return items[i];\n       }\n     }\n     return null; // not reached\n   }\n\n   protected synchronized boolean markAsUnused(Object item) {\n     for (int i \u003d 0; i \u003c MAX_AVAILABLE; ++i) {\n       if (item \u003d\u003d items[i]) {\n          if (used[i]) {\n            used[i] \u003d false;\n            return true;\n          } else\n            return false;\n       }\n     }\n     return false;\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eBefore obtaining an item each thread must acquire a permit from\n the semaphore, guaranteeing that an item is available for use. When\n the thread has finished with the item it is returned back to the\n pool and a permit is returned to the semaphore, allowing another\n thread to acquire that item.  Note that no synchronization lock is\n held when {@link #acquire} is called as that would prevent an item\n from being returned to the pool.  The semaphore encapsulates the\n synchronization needed to restrict access to the pool, separately\n from any synchronization needed to maintain the consistency of the\n pool itself.\n\n \u003cp\u003eA semaphore initialized to one, and which is used such that it\n only has at most one permit available, can serve as a mutual\n exclusion lock.  This is more commonly known as a \u003cem\u003ebinary\n semaphore\u003c/em\u003e, because it only has two states: one permit\n available, or zero permits available.  When used in this way, the\n binary semaphore has the property (unlike many {@link java.util.concurrent.locks.Lock}\n implementations), that the \u0026quot;lock\u0026quot; can be released by a\n thread other than the owner (as semaphores have no notion of\n ownership).  This can be useful in some specialized contexts, such\n as deadlock recovery.\n\n \u003cp\u003e The constructor for this class optionally accepts a\n \u003cem\u003efairness\u003c/em\u003e parameter. When set false, this class makes no\n guarantees about the order in which threads acquire permits. In\n particular, \u003cem\u003ebarging\u003c/em\u003e is permitted, that is, a thread\n invoking {@link #acquire} can be allocated a permit ahead of a\n thread that has been waiting - logically the new thread places itself at\n the head of the queue of waiting threads. When fairness is set true, the\n semaphore guarantees that threads invoking any of the {@link\n #acquire() acquire} methods are selected to obtain permits in the order in\n which their invocation of those methods was processed\n (first-in-first-out; FIFO). Note that FIFO ordering necessarily\n applies to specific internal points of execution within these\n methods.  So, it is possible for one thread to invoke\n {@code acquire} before another, but reach the ordering point after\n the other, and similarly upon return from the method.\n Also note that the untimed {@link #tryAcquire() tryAcquire} methods do not\n honor the fairness setting, but will take any permits that are\n available.\n\n \u003cp\u003eGenerally, semaphores used to control resource access should be\n initialized as fair, to ensure that no thread is starved out from\n accessing a resource. When using semaphores for other kinds of\n synchronization control, the throughput advantages of non-fair\n ordering often outweigh fairness considerations.\n\n \u003cp\u003eThis class also provides convenience methods to {@link\n #acquire(int) acquire} and {@link #release(int) release} multiple\n permits at a time.  Beware of the increased risk of indefinite\n postponement when these methods are used without fairness set true.\n\n \u003cp\u003eMemory consistency effects: Actions in a thread prior to calling\n a \"release\" method such as {@code release()}\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n actions following a successful \"acquire\" method such as {@code acquire()}\n in another thread.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Semaphore","qualifiedName":"java.util.concurrent.Semaphore","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Semaphore","comment":"Creates a {@code Semaphore} with the given number of\n permits and nonfair fairness setting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Semaphore","comment":"Creates a {@code Semaphore} with the given number of\n permits and the given fairness setting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, boolean)","flatSignature":"(int, boolean)","parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"fair","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"acquire","comment":"Acquires a permit from this semaphore, blocking until one is\n available, or the thread is {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n \u003cp\u003eIf no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n \u003c/ul\u003e\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting\n for a permit,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"acquireUninterruptibly","comment":"Acquires a permit from this semaphore, blocking until one is\n available.\n\n \u003cp\u003eAcquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n \u003cp\u003eIf no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit.\n\n \u003cp\u003eIf the current thread is {@linkplain Thread#interrupt interrupted}\n while waiting for a permit then it will continue to wait, but the\n time at which the thread is assigned a permit may change compared to\n the time it would have received the permit had no interruption\n occurred.  When the thread does return from this method its interrupt\n status will be set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryAcquire","comment":"Acquires a permit from this semaphore, only if one is available at the\n time of invocation.\n\n \u003cp\u003eAcquires a permit, if one is available and returns immediately,\n with the value {@code true},\n reducing the number of available permits by one.\n\n \u003cp\u003eIf no permit is available then this method will return\n immediately with the value {@code false}.\n\n \u003cp\u003eEven when this semaphore has been set to use a\n fair ordering policy, a call to {@code tryAcquire()} \u003cem\u003ewill\u003c/em\u003e\n immediately acquire a permit if one is available, whether or not\n other threads are currently waiting.\n This \u0026quot;barging\u0026quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting, then use\n {@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryAcquire","comment":"Acquires a permit from this semaphore, if one becomes available\n within the given waiting time and the current thread has not\n been {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires a permit, if one is available and returns immediately,\n with the value {@code true},\n reducing the number of available permits by one.\n\n \u003cp\u003eIf no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of three things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n \u003cli\u003eThe specified waiting time elapses.\n \u003c/ul\u003e\n\n \u003cp\u003eIf a permit is acquired then the value {@code true} is returned.\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting\n to acquire a permit,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"release","comment":"Releases a permit, returning it to the semaphore.\n\n \u003cp\u003eReleases a permit, increasing the number of available permits by\n one.  If any threads are trying to acquire a permit, then one is\n selected and given the permit that was just released.  That thread\n is (re)enabled for thread scheduling purposes.\n\n \u003cp\u003eThere is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link #acquire}.\n Correct usage of a semaphore is established by programming convention\n in the application.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"acquire","comment":"Acquires the given number of permits from this semaphore,\n blocking until all are available,\n or the thread is {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount.\n\n \u003cp\u003eIf insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n \u003c/ul\u003e\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting\n for a permit,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n Any permits that were to be assigned to this thread are instead\n assigned to other threads trying to acquire permits, as if\n permits had been made available by a call to {@link #release()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireUninterruptibly","comment":"Acquires the given number of permits from this semaphore,\n blocking until all are available.\n\n \u003cp\u003eAcquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount.\n\n \u003cp\u003eIf insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request.\n\n \u003cp\u003eIf the current thread is {@linkplain Thread#interrupt interrupted}\n while waiting for permits then it will continue to wait and its\n position in the queue is not affected.  When the thread does return\n from this method its interrupt status will be set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryAcquire","comment":"Acquires the given number of permits from this semaphore, only\n if all are available at the time of invocation.\n\n \u003cp\u003eAcquires the given number of permits, if they are available, and\n returns immediately, with the value {@code true},\n reducing the number of available permits by the given amount.\n\n \u003cp\u003eIf insufficient permits are available then this method will return\n immediately with the value {@code false} and the number of available\n permits is unchanged.\n\n \u003cp\u003eEven when this semaphore has been set to use a fair ordering\n policy, a call to {@code tryAcquire} \u003cem\u003ewill\u003c/em\u003e\n immediately acquire a permit if one is available, whether or\n not other threads are currently waiting.  This\n \u0026quot;barging\u0026quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to\n honor the fairness setting, then use {@link #tryAcquire(int,\n long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryAcquire","comment":"Acquires the given number of permits from this semaphore, if all\n become available within the given waiting time and the current\n thread has not been {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the given number of permits, if they are available and\n returns immediately, with the value {@code true},\n reducing the number of available permits by the given amount.\n\n \u003cp\u003eIf insufficient permits are available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n \u003cli\u003eThe specified waiting time elapses.\n \u003c/ul\u003e\n\n \u003cp\u003eIf the permits are acquired then the value {@code true} is returned.\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting\n to acquire the permits,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n Any permits that were to be assigned to this thread, are instead\n assigned to other threads trying to acquire permits, as if\n the permits had been made available by a call to {@link #release()}.\n\n \u003cp\u003eIf the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.  Any permits that were to be assigned to this\n thread, are instead assigned to other threads trying to acquire\n permits, as if the permits had been made available by a call to\n {@link #release()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, long, java.util.concurrent.TimeUnit)","flatSignature":"(int, long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"release","comment":"Releases the given number of permits, returning them to the semaphore.\n\n \u003cp\u003eReleases the given number of permits, increasing the number of\n available permits by that amount.\n If any threads are trying to acquire permits, then one\n is selected and given the permits that were just released.\n If the number of available permits satisfies that thread\u0027s request\n then that thread is (re)enabled for thread scheduling purposes;\n otherwise the thread will wait until sufficient permits are available.\n If there are still permits available\n after this thread\u0027s request has been satisfied, then those permits\n are assigned in turn to other threads trying to acquire permits.\n\n \u003cp\u003eThere is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link Semaphore#acquire acquire}.\n Correct usage of a semaphore is established by programming convention\n in the application.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"permits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"availablePermits","comment":"Returns the current number of permits available in this semaphore.\n\n \u003cp\u003eThis method is typically used for debugging and testing purposes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"drainPermits","comment":"Acquires and returns all permits that are immediately available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isFair","comment":"Returns {@code true} if this semaphore has fairness set true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasQueuedThreads","comment":"Queries whether any threads are waiting to acquire. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire.  This method is designed primarily for use in\n monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueueLength","comment":"Returns an estimate of the number of threads waiting to acquire.\n The value is only an estimate because the number of threads may\n change dynamically while this method traverses internal data\n structures.  This method is designed for use in monitoring of the\n system state, not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this semaphore, as well as its state.\n The state, in brackets, includes the String {@code \"Permits \u003d\"}\n followed by the number of permits.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}