{"name":"ForkJoinTask","comment":"Abstract base class for tasks that run within a {@link ForkJoinPool}.\n A {@code ForkJoinTask} is a thread-like entity that is much\n lighter weight than a normal thread.  Huge numbers of tasks and\n subtasks may be hosted by a small number of actual threads in a\n ForkJoinPool, at the price of some usage limitations.\n\n \u003cp\u003eA \"main\" {@code ForkJoinTask} begins execution when it is\n explicitly submitted to a {@link ForkJoinPool}, or, if not already\n engaged in a ForkJoin computation, commenced in the {@link\n ForkJoinPool#commonPool()} via {@link #fork}, {@link #invoke}, or\n related methods.  Once started, it will usually in turn start other\n subtasks.  As indicated by the name of this class, many programs\n using {@code ForkJoinTask} employ only methods {@link #fork} and\n {@link #join}, or derivatives such as {@link\n #invokeAll(ForkJoinTask...) invokeAll}.  However, this class also\n provides a number of other methods that can come into play in\n advanced usages, as well as extension mechanics that allow support\n of new forms of fork/join processing.\n\n \u003cp\u003eA {@code ForkJoinTask} is a lightweight form of {@link Future}.\n The efficiency of {@code ForkJoinTask}s stems from a set of\n restrictions (that are only partially statically enforceable)\n reflecting their main use as computational tasks calculating pure\n functions or operating on purely isolated objects.  The primary\n coordination mechanisms are {@link #fork}, that arranges\n asynchronous execution, and {@link #join}, that doesn\u0027t proceed\n until the task\u0027s result has been computed.  Computations should\n ideally avoid {@code synchronized} methods or blocks, and should\n minimize other blocking synchronization apart from joining other\n tasks or using synchronizers such as Phasers that are advertised to\n cooperate with fork/join scheduling. Subdividable tasks should also\n not perform blocking I/O, and should ideally access variables that\n are completely independent of those accessed by other running\n tasks. These guidelines are loosely enforced by not permitting\n checked exceptions such as {@code IOExceptions} to be\n thrown. However, computations may still encounter unchecked\n exceptions, that are rethrown to callers attempting to join\n them. These exceptions may additionally include {@link\n RejectedExecutionException} stemming from internal resource\n exhaustion, such as failure to allocate internal task\n queues. Rethrown exceptions behave in the same way as regular\n exceptions, but, when possible, contain stack traces (as displayed\n for example using {@code ex.printStackTrace()}) of both the thread\n that initiated the computation as well as the thread actually\n encountering the exception; minimally only the latter.\n\n \u003cp\u003eIt is possible to define and use ForkJoinTasks that may block,\n but doing do requires three further considerations: (1) Completion\n of few if any \u003cem\u003eother\u003c/em\u003e tasks should be dependent on a task\n that blocks on external synchronization or I/O. Event-style async\n tasks that are never joined (for example, those subclassing {@link\n CountedCompleter}) often fall into this category.  (2) To minimize\n resource impact, tasks should be small; ideally performing only the\n (possibly) blocking action. (3) Unless the {@link\n ForkJoinPool.ManagedBlocker} API is used, or the number of possibly\n blocked tasks is known to be less than the pool\u0027s {@link\n ForkJoinPool#getParallelism} level, the pool cannot guarantee that\n enough threads will be available to ensure progress or good\n performance.\n\n \u003cp\u003eThe primary method for awaiting completion and extracting\n results of a task is {@link #join}, but there are several variants:\n The {@link Future#get} methods support interruptible and/or timed\n waits for completion and report results using {@code Future}\n conventions. Method {@link #invoke} is semantically\n equivalent to {@code fork(); join()} but always attempts to begin\n execution in the current thread. The \"\u003cem\u003equiet\u003c/em\u003e\" forms of\n these methods do not extract results or report exceptions. These\n may be useful when a set of tasks are being executed, and you need\n to delay processing of results or exceptions until all complete.\n Method {@code invokeAll} (available in multiple versions)\n performs the most common form of parallel invocation: forking a set\n of tasks and joining them all.\n\n \u003cp\u003eIn the most typical usages, a fork-join pair act like a call\n (fork) and return (join) from a parallel recursive function. As is\n the case with other forms of recursive calls, returns (joins)\n should be performed innermost-first. For example, {@code a.fork();\n b.fork(); b.join(); a.join();} is likely to be substantially more\n efficient than joining {@code a} before {@code b}.\n\n \u003cp\u003eThe execution status of tasks may be queried at several levels\n of detail: {@link #isDone} is true if a task completed in any way\n (including the case where a task was cancelled without executing);\n {@link #isCompletedNormally} is true if a task completed without\n cancellation or encountering an exception; {@link #isCancelled} is\n true if the task was cancelled (in which case {@link #getException}\n returns a {@link java.util.concurrent.CancellationException}); and\n {@link #isCompletedAbnormally} is true if a task was either\n cancelled or encountered an exception, in which case {@link\n #getException} will return either the encountered exception or\n {@link java.util.concurrent.CancellationException}.\n\n \u003cp\u003eThe ForkJoinTask class is not usually directly subclassed.\n Instead, you subclass one of the abstract classes that support a\n particular style of fork/join processing, typically {@link\n RecursiveAction} for most computations that do not return results,\n {@link RecursiveTask} for those that do, and {@link\n CountedCompleter} for those in which completed actions trigger\n other actions.  Normally, a concrete ForkJoinTask subclass declares\n fields comprising its parameters, established in a constructor, and\n then defines a {@code compute} method that somehow uses the control\n methods supplied by this base class.\n\n \u003cp\u003eMethod {@link #join} and its variants are appropriate for use\n only when completion dependencies are acyclic; that is, the\n parallel computation can be described as a directed acyclic graph\n (DAG). Otherwise, executions may encounter a form of deadlock as\n tasks cyclically wait for each other.  However, this framework\n supports other methods and techniques (for example the use of\n {@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that\n may be of use in constructing custom subclasses for problems that\n are not statically structured as DAGs. To support such usages, a\n ForkJoinTask may be atomically \u003cem\u003etagged\u003c/em\u003e with a {@code short}\n value using {@link #setForkJoinTaskTag} or {@link\n #compareAndSetForkJoinTaskTag} and checked using {@link\n #getForkJoinTaskTag}. The ForkJoinTask implementation does not use\n these {@code protected} methods or tags for any purpose, but they\n may be of use in the construction of specialized subclasses.  For\n example, parallel graph traversals can use the supplied methods to\n avoid revisiting nodes/tasks that have already been processed.\n (Method names for tagging are bulky in part to encourage definition\n of methods that reflect their usage patterns.)\n\n \u003cp\u003eMost base support methods are {@code final}, to prevent\n overriding of implementations that are intrinsically tied to the\n underlying lightweight task scheduling framework.  Developers\n creating new basic styles of fork/join processing should minimally\n implement {@code protected} methods {@link #exec}, {@link\n #setRawResult}, and {@link #getRawResult}, while also introducing\n an abstract computational method that can be implemented in its\n subclasses, possibly relying on other {@code protected} methods\n provided by this class.\n\n \u003cp\u003eForkJoinTasks should perform relatively small amounts of\n computation. Large tasks should be split into smaller subtasks,\n usually via recursive decomposition. As a very rough rule of thumb,\n a task should perform more than 100 and less than 10000 basic\n computational steps, and should avoid indefinite looping. If tasks\n are too big, then parallelism cannot improve throughput. If too\n small, then memory and internal task maintenance overhead may\n overwhelm processing.\n\n \u003cp\u003eThis class provides {@code adapt} methods for {@link Runnable}\n and {@link Callable}, that may be of use when mixing execution of\n {@code ForkJoinTasks} with other kinds of tasks. When all tasks are\n of this form, consider using a pool constructed in \u003cem\u003easyncMode\u003c/em\u003e.\n\n \u003cp\u003eForkJoinTasks are {@code Serializable}, which enables them to be\n used in extensions such as remote execution frameworks. It is\n sensible to serialize tasks only before or after, but not during,\n execution. Serialization is not relied on during execution itself.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.lang.Object","interfaces":["java.util.concurrent.Future","java.io.Serializable"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ForkJoinTask","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"fork","comment":"Arranges to asynchronously execute this task in the pool the\n current task is running in, if applicable, or using the {@link\n ForkJoinPool#commonPool()} if not {@link #inForkJoinPool}.  While\n it is not necessarily enforced, it is a usage error to fork a\n task more than once unless it has completed and been\n reinitialized.  Subsequent modifications to the state of this\n task or any data it operates on are not necessarily\n consistently observable by any thread other than the one\n executing it unless preceded by a call to {@link #join} or\n related methods, or a call to {@link #isDone} returning {@code\n true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"join","comment":"Returns the result of the computation when it {@link #isDone is\n done}.  This method differs from {@link #get()} in that\n abnormal completion results in {@code RuntimeException} or\n {@code Error}, not {@code ExecutionException}, and that\n interrupts of the calling thread do \u003cem\u003enot\u003c/em\u003e cause the\n method to abruptly return by throwing {@code\n InterruptedException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"invoke","comment":"Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)\n {@code RuntimeException} or {@code Error} if the underlying\n computation did so.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"invokeAll","comment":"Forks the given tasks, returning when {@code isDone} holds for\n each task or an (unchecked) exception is encountered, in which\n case the exception is rethrown. If more than one task\n encounters an exception, then this method throws any one of\n these exceptions. If any task encounters an exception, the\n other may be cancelled. However, the execution status of\n individual tasks is not guaranteed upon exceptional return. The\n status of each task may be obtained using {@link\n #getException()} and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ForkJoinTask\u003c?\u003e, java.util.concurrent.ForkJoinTask\u003c?\u003e)","flatSignature":"(ForkJoinTask\u003c?\u003e, ForkJoinTask\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"t1","type":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}}},{"name":"t2","type":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"invokeAll","comment":"Forks the given tasks, returning when {@code isDone} holds for\n each task or an (unchecked) exception is encountered, in which\n case the exception is rethrown. If more than one task\n encounters an exception, then this method throws any one of\n these exceptions. If any task encounters an exception, others\n may be cancelled. However, the execution status of individual\n tasks is not guaranteed upon exceptional return. The status of\n each task may be obtained using {@link #getException()} and\n related methods to check if they have been cancelled, completed\n normally or exceptionally, or left unprocessed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ForkJoinTask\u003c?\u003e...)","flatSignature":"(ForkJoinTask\u003c?\u003e...)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"invokeAll","comment":"Forks all tasks in the specified collection, returning when\n {@code isDone} holds for each task or an (unchecked) exception\n is encountered, in which case the exception is rethrown. If\n more than one task encounters an exception, then this method\n throws any one of these exceptions. If any task encounters an\n exception, others may be cancelled. However, the execution\n status of individual tasks is not guaranteed upon exceptional\n return. The status of each task may be obtained using {@link\n #getException()} and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003cT\u003e)","flatSignature":"(Collection\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.util.concurrent.ForkJoinTask"]}]},{"name":"cancel","comment":"Attempts to cancel execution of this task. This attempt will\n fail if the task has already completed or could not be\n cancelled for some other reason. If successful, and this task\n has not started when {@code cancel} is called, execution of\n this task is suppressed. After this method returns\n successfully, unless there is an intervening call to {@link\n #reinitialize}, subsequent calls to {@link #isCancelled},\n {@link #isDone}, and {@code cancel} will return {@code true}\n and calls to {@link #join} and related methods will result in\n {@code CancellationException}.\n\n \u003cp\u003eThis method may be overridden in subclasses, but if so, must\n still ensure that these properties hold. In particular, the\n {@code cancel} method itself must not throw exceptions.\n\n \u003cp\u003eThis method is designed to be invoked by \u003cem\u003eother\u003c/em\u003e\n tasks. To terminate the current task, you can just return or\n throw an unchecked exception from its computation method, or\n invoke {@link #completeExceptionally(Throwable)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"mayInterruptIfRunning","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isDone","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isCancelled","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isCompletedAbnormally","comment":"Returns {@code true} if this task threw an exception or was cancelled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isCompletedNormally","comment":"Returns {@code true} if this task completed without throwing an\n exception and was not cancelled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getException","comment":"Returns the exception thrown by the base computation, or a\n {@code CancellationException} if cancelled, or {@code null} if\n none or if the method has not yet completed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Throwable","qualifiedName":"java.lang.Throwable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"completeExceptionally","comment":"Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon\n {@code join} and related operations. This method may be used\n to induce exceptions in asynchronous tasks, or to force\n completion of tasks that would not otherwise complete.  Its use\n in other situations is discouraged.  This method is\n overridable, but overridden versions must invoke {@code super}\n implementation to maintain guarantees.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Throwable)","flatSignature":"(Throwable)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ex","type":{"isPrimitive":false,"simpleName":"Throwable","qualifiedName":"java.lang.Throwable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"complete","comment":"Completes this task, and if not already aborted or cancelled,\n returning the given value as the result of subsequent\n invocations of {@code join} and related operations. This method\n may be used to provide results for asynchronous tasks, or to\n provide alternative handling for tasks that would not otherwise\n complete normally. Its use in other situations is\n discouraged. This method is overridable, but overridden\n versions must invoke {@code super} implementation to maintain\n guarantees.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(V)","flatSignature":"(V)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"quietlyComplete","comment":"Completes this task normally without setting a value. The most\n recent value established by {@link #setRawResult} (or {@code\n null} by default) will be returned as the result of subsequent\n invocations of {@code join} and related operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Waits if necessary for the computation to complete, and then\n retrieves its result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"quietlyJoin","comment":"Joins this task, without returning its result or throwing its\n exception. This method may be useful when processing\n collections of tasks when some have been cancelled or otherwise\n known to have aborted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"quietlyInvoke","comment":"Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"helpQuiesce","comment":"Possibly executes tasks until the pool hosting the current task\n {@link ForkJoinPool#isQuiescent is quiescent}. This method may\n be of use in designs in which many tasks are forked, but none\n are explicitly joined, instead executing them until all are\n processed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"reinitialize","comment":"Resets the internal bookkeeping state of this task, allowing a\n subsequent {@code fork}. This method allows repeated reuse of\n this task, but only if reuse occurs when this task has either\n never been forked, or has been forked, then completed and all\n outstanding joins of this task have also completed. Effects\n under any other usage conditions are not guaranteed.\n This method may be useful when executing\n pre-constructed trees of subtasks in loops.\n\n \u003cp\u003eUpon completion of this method, {@code isDone()} reports\n {@code false}, and {@code getException()} reports {@code\n null}. However, the value returned by {@code getRawResult} is\n unaffected. To clear this value, you can invoke {@code\n setRawResult(null)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPool","comment":"Returns the pool hosting the current task execution, or null\n if this task is executing outside of any ForkJoinPool.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ForkJoinPool","qualifiedName":"java.util.concurrent.ForkJoinPool","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"inForkJoinPool","comment":"Returns {@code true} if the current thread is a {@link\n ForkJoinWorkerThread} executing as a ForkJoinPool computation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"tryUnfork","comment":"Tries to unschedule this task for execution. This method will\n typically (but is not guaranteed to) succeed if this task is\n the most recently forked task by the current thread, and has\n not commenced executing in another thread.  This method may be\n useful when arranging alternative local processing of tasks\n that could have been, but were not, stolen.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueuedTaskCount","comment":"Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. This\n value may be useful for heuristic decisions about whether to\n fork other tasks.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getSurplusQueuedTaskCount","comment":"Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other worker\n threads that might steal them, or zero if this thread is not\n operating in a ForkJoinPool. This value may be useful for\n heuristic decisions about whether to fork other tasks. In many\n usages of ForkJoinTasks, at steady state, each worker should\n aim to maintain a small constant surplus (for example, 3) of\n tasks, and to process computations locally if this threshold is\n exceeded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getRawResult","comment":"Returns the result that would be returned by {@link #join}, even\n if this task completed abnormally, or {@code null} if this task\n is not known to have been completed.  This method is designed\n to aid debugging, as well as to support extensions. Its use in\n any other context is discouraged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getForkJoinTaskTag","comment":"Returns the tag for this task.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setForkJoinTaskTag","comment":"Atomically sets the tag value for this task.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"tag","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareAndSetForkJoinTaskTag","comment":"Atomically conditionally sets the tag value for this task.\n Among other applications, tags can be used as visit markers\n in tasks operating on graphs, as in methods that check: {@code\n if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))}\n before processing, otherwise exiting because the node has\n already been visited.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short, short)","flatSignature":"(short, short)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}},{"name":"tag","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"adapt","comment":"Returns a new {@code ForkJoinTask} that performs the {@code run}\n method of the given {@code Runnable} as its action, and returns\n a null result upon {@link #join}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"runnable","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"adapt","comment":"Returns a new {@code ForkJoinTask} that performs the {@code run}\n method of the given {@code Runnable} as its action, and returns\n the given result upon {@link #join}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, T)","flatSignature":"(Runnable, T)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"runnable","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"adapt","comment":"Returns a new {@code ForkJoinTask} that performs the {@code call}\n method of the given {@code Callable} as its action, and returns\n its result upon {@link #join}, translating any checked exceptions\n encountered into {@code RuntimeException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003c? extends T\u003e)","flatSignature":"(Callable\u003c? extends T\u003e)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"callable","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[{"name":"V","bounds":[]}],"subClasses":["java.util.concurrent.RecursiveTask","java.util.concurrent.RecursiveAction","java.util.concurrent.CountedCompleter"],"enumConstants":[]}