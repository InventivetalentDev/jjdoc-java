{"name":"CompletionService","comment":"A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed tasks.  Producers\n {@code submit} tasks for execution. Consumers {@code take}\n completed tasks and process their results in the order they\n complete.  A {@code CompletionService} can for example be used to\n manage asynchronous I/O, in which tasks that perform reads are\n submitted in one part of a program or system, and then acted upon\n in a different part of the program when the reads complete,\n possibly in a different order than they were requested.\n\n \u003cp\u003eTypically, a {@code CompletionService} relies on a separate\n {@link Executor} to actually execute the tasks, in which case the\n {@code CompletionService} only manages an internal completion\n queue. The {@link ExecutorCompletionService} class provides an\n implementation of this approach.\n\n \u003cp\u003eMemory consistency effects: Actions in a thread prior to\n submitting a task to a {@code CompletionService}\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n actions taken by that task, which in turn \u003ci\u003ehappen-before\u003c/i\u003e\n actions following a successful return from the corresponding {@code take()}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"CompletionService","qualifiedName":"java.util.concurrent.CompletionService","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"submit","comment":"Submits a value-returning task for execution and returns a Future\n representing the pending results of the task.  Upon completion,\n this task may be taken or polled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cV\u003e)","flatSignature":"(Callable\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"submit","comment":"Submits a Runnable task for execution and returns a Future\n representing that task.  Upon completion, this task may be\n taken or polled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, V)","flatSignature":"(Runnable, V)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"take","comment":"Retrieves and removes the Future representing the next\n completed task, waiting if none are yet present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"Retrieves and removes the Future representing the next\n completed task, or {@code null} if none are present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait\n time if none are yet present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"V","bounds":[]}],"subInterfaces":["java.util.concurrent.ExecutorCompletionService"],"enumConstants":[]}