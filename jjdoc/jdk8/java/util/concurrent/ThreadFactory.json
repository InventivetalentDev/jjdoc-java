{"name":"ThreadFactory","comment":"An object that creates new threads on demand.  Using thread factories\n removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},\n enabling applications to use special thread subclasses, priorities, etc.\n\n \u003cp\u003e\n The simplest implementation of this interface is just:\n  \u003cpre\u003e {@code\n class SimpleThreadFactory implements ThreadFactory {\n   public Thread newThread(Runnable r) {\n     return new Thread(r);\n   }\n }}\u003c/pre\u003e\n\n The {@link Executors#defaultThreadFactory} method provides a more\n useful simple implementation, that sets the created thread context\n to known values before returning it.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"newThread","comment":"Constructs a new {@code Thread}.  Implementations may also initialize\n priority, name, daemon status, {@code ThreadGroup}, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"r","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}