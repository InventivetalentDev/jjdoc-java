{"name":"ExecutorCompletionService","comment":"A {@link CompletionService} that uses a supplied {@link Executor}\n to execute tasks.  This class arranges that submitted tasks are,\n upon completion, placed on a queue accessible using {@code take}.\n The class is lightweight enough to be suitable for transient use\n when processing groups of tasks.\n\n \u003cp\u003e\n\n \u003cb\u003eUsage Examples.\u003c/b\u003e\n\n Suppose you have a set of solvers for a certain problem, each\n returning a value of some type {@code Result}, and would like to\n run them concurrently, processing the results of each of them that\n return a non-null value, in some method {@code use(Result r)}. You\n could write this as:\n\n \u003cpre\u003e {@code\n void solve(Executor e,\n            Collection\u003cCallable\u003cResult\u003e\u003e solvers)\n     throws InterruptedException, ExecutionException {\n     CompletionService\u003cResult\u003e ecs\n         \u003d new ExecutorCompletionService\u003cResult\u003e(e);\n     for (Callable\u003cResult\u003e s : solvers)\n         ecs.submit(s);\n     int n \u003d solvers.size();\n     for (int i \u003d 0; i \u003c n; ++i) {\n         Result r \u003d ecs.take().get();\n         if (r !\u003d null)\n             use(r);\n     }\n }}\u003c/pre\u003e\n\n Suppose instead that you would like to use the first non-null result\n of the set of tasks, ignoring any that encounter exceptions,\n and cancelling all other tasks when the first one is ready:\n\n \u003cpre\u003e {@code\n void solve(Executor e,\n            Collection\u003cCallable\u003cResult\u003e\u003e solvers)\n     throws InterruptedException {\n     CompletionService\u003cResult\u003e ecs\n         \u003d new ExecutorCompletionService\u003cResult\u003e(e);\n     int n \u003d solvers.size();\n     List\u003cFuture\u003cResult\u003e\u003e futures\n         \u003d new ArrayList\u003cFuture\u003cResult\u003e\u003e(n);\n     Result result \u003d null;\n     try {\n         for (Callable\u003cResult\u003e s : solvers)\n             futures.add(ecs.submit(s));\n         for (int i \u003d 0; i \u003c n; ++i) {\n             try {\n                 Result r \u003d ecs.take().get();\n                 if (r !\u003d null) {\n                     result \u003d r;\n                     break;\n                 }\n             } catch (ExecutionException ignore) {}\n         }\n     }\n     finally {\n         for (Future\u003cResult\u003e f : futures)\n             f.cancel(true);\n     }\n\n     if (result !\u003d null)\n         use(result);\n }}\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ExecutorCompletionService","qualifiedName":"java.util.concurrent.ExecutorCompletionService","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.lang.Object","interfaces":["java.util.concurrent.CompletionService"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ExecutorCompletionService","comment":"Creates an ExecutorCompletionService using the supplied\n executor for base task execution and a\n {@link LinkedBlockingQueue} as a completion queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Executor)","flatSignature":"(Executor)","parameters":[{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ExecutorCompletionService","comment":"Creates an ExecutorCompletionService using the supplied\n executor for base task execution and the supplied queue as its\n completion queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue\u003cjava.util.concurrent.Future\u003cV\u003e\u003e)","flatSignature":"(Executor, BlockingQueue\u003cFuture\u003cV\u003e\u003e)","parameters":[{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}},{"name":"completionQueue","type":{"isPrimitive":false,"simpleName":"BlockingQueue","qualifiedName":"java.util.concurrent.BlockingQueue","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cV\u003e)","flatSignature":"(Callable\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, V)","flatSignature":"(Runnable, V)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"take","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"V","bounds":[]}],"enumConstants":[]}