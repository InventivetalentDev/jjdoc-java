{"name":"CopyOnWriteArraySet","comment":"A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}\n for all of its operations.  Thus, it shares the same basic properties:\n \u003cul\u003e\n  \u003cli\u003eIt is best suited for applications in which set sizes generally\n       stay small, read-only operations\n       vastly outnumber mutative operations, and you need\n       to prevent interference among threads during traversal.\n  \u003cli\u003eIt is thread-safe.\n  \u003cli\u003eMutative operations ({@code add}, {@code set}, {@code remove}, etc.)\n      are expensive since they usually entail copying the entire underlying\n      array.\n  \u003cli\u003eIterators do not support the mutative {@code remove} operation.\n  \u003cli\u003eTraversal via iterators is fast and cannot encounter\n      interference from other threads. Iterators rely on\n      unchanging snapshots of the array at the time the iterators were\n      constructed.\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eSample Usage.\u003c/b\u003e The following code sketch uses a\n copy-on-write set to maintain a set of Handler objects that\n perform some action upon state updates.\n\n  \u003cpre\u003e {@code\n class Handler { void handle(); ... }\n\n class X {\n   private final CopyOnWriteArraySet\u003cHandler\u003e handlers\n     \u003d new CopyOnWriteArraySet\u003cHandler\u003e();\n   public void addHandler(Handler h) { handlers.add(h); }\n\n   private long internalState;\n   private synchronized void changeState() { internalState \u003d ...; }\n\n   public void update() {\n     changeState();\n     for (Handler handler : handlers)\n       handler.handle();\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CopyOnWriteArraySet","qualifiedName":"java.util.concurrent.CopyOnWriteArraySet","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.AbstractSet","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"CopyOnWriteArraySet","comment":"Creates an empty set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"CopyOnWriteArraySet","comment":"Creates a set containing all of the elements of the specified\n collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"size","comment":"Returns the number of elements in this set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns {@code true} if this set contains no elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"Returns {@code true} if this set contains the specified element.\n More formally, returns {@code true} if and only if this set\n contains an element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this set.\n If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the\n elements in the same order.\n\n \u003cp\u003eThe returned array will be \"safe\" in that no references to it\n are maintained by this set.  (In other words, this method must\n allocate a new array even if this set is backed by an array).\n The caller is thus free to modify the returned array.\n\n \u003cp\u003eThis method acts as bridge between array-based and collection-based\n APIs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this set; the\n runtime type of the returned array is that of the specified array.\n If the set fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this set.\n\n \u003cp\u003eIf this set fits in the specified array with room to spare\n (i.e., the array has more elements than this set), the element in\n the array immediately following the end of the set is set to\n {@code null}.  (This is useful in determining the length of this\n set \u003ci\u003eonly\u003c/i\u003e if the caller knows that this set does not contain\n any null elements.)\n\n \u003cp\u003eIf this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements\n in the same order.\n\n \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \u003cp\u003eSuppose {@code x} is a set known to contain only strings.\n The following code can be used to dump the set into a newly allocated\n array of {@code String}:\n\n  \u003cpre\u003e {@code String[] y \u003d x.toArray(new String[0]);}\u003c/pre\u003e\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"clear","comment":"Removes all of the elements from this set.\n The set will be empty after this call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"remove","comment":"Removes the specified element from this set if it is present.\n More formally, removes an element {@code e} such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e,\n if this set contains such an element.  Returns {@code true} if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"add","comment":"Adds the specified element to this set if it is not already present.\n More formally, adds the specified element {@code e} to this set if\n the set contains no element {@code e2} such that\n \u003ctt\u003e(e\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e2\u003d\u003dnull\u0026nbsp;:\u0026nbsp;e.equals(e2))\u003c/tt\u003e.\n If this set already contains the element, the call leaves the set\n unchanged and returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"containsAll","comment":"Returns {@code true} if this set contains all of the elements of the\n specified collection.  If the specified collection is also a set, this\n method returns {@code true} if it is a \u003ci\u003esubset\u003c/i\u003e of this set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Adds all of the elements in the specified collection to this set if\n they\u0027re not already present.  If the specified collection is also a\n set, the {@code addAll} operation effectively modifies this set so\n that its value is the \u003ci\u003eunion\u003c/i\u003e of the two sets.  The behavior of\n this operation is undefined if the specified collection is modified\n while the operation is in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeAll","comment":"Removes from this set all of its elements that are contained in the\n specified collection.  If the specified collection is also a set,\n this operation effectively modifies this set so that its value is the\n \u003ci\u003easymmetric set difference\u003c/i\u003e of the two sets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"retainAll","comment":"Retains only the elements in this set that are contained in the\n specified collection.  In other words, removes from this set all of\n its elements that are not contained in the specified collection.  If\n the specified collection is also a set, this operation effectively\n modifies this set so that its value is the \u003ci\u003eintersection\u003c/i\u003e of the\n two sets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements contained in this set\n in the order in which these elements were added.\n\n \u003cp\u003eThe returned iterator provides a snapshot of the state of the set\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does \u003cem\u003eNOT\u003c/em\u003e support the\n {@code remove} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this set for equality.\n Returns {@code true} if the specified object is the same object\n as this object, or if it is also a {@link Set} and the elements\n returned by an {@linkplain Set#iterator() iterator} over the\n specified set are the same as the elements returned by an\n iterator over this set.  More formally, the two iterators are\n considered to return the same elements if they return the same\n number of elements and for every element {@code e1} returned by\n the iterator over the specified set, there is an element\n {@code e2} returned by the iterator over this set such that\n {@code (e1\u003d\u003dnull ? e2\u003d\u003dnull : e1.equals(e2))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeIf","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super E\u003e)","flatSignature":"(Predicate\u003c? super E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"filter","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super E\u003e)","flatSignature":"(Consumer\u003c? super E\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Returns a {@link Spliterator} over the elements in this set in the order\n in which these elements were added.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#IMMUTABLE},\n {@link Spliterator#DISTINCT}, {@link Spliterator#SIZED}, and\n {@link Spliterator#SUBSIZED}.\n\n \u003cp\u003eThe spliterator provides a snapshot of the state of the set\n when the spliterator was constructed. No synchronization is needed while\n operating on the spliterator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"enumConstants":[]}