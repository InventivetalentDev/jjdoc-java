{"name":"CountedCompleter","comment":"A {@link ForkJoinTask} with a completion action performed when\n triggered and there are no remaining pending actions.\n CountedCompleters are in general more robust in the\n presence of subtask stalls and blockage than are other forms of\n ForkJoinTasks, but are less intuitive to program.  Uses of\n CountedCompleter are similar to those of other completion based\n components (such as {@link java.nio.channels.CompletionHandler})\n except that multiple \u003cem\u003epending\u003c/em\u003e completions may be necessary\n to trigger the completion action {@link #onCompletion(CountedCompleter)},\n not just one.\n Unless initialized otherwise, the {@linkplain #getPendingCount pending\n count} starts at zero, but may be (atomically) changed using\n methods {@link #setPendingCount}, {@link #addToPendingCount}, and\n {@link #compareAndSetPendingCount}. Upon invocation of {@link\n #tryComplete}, if the pending action count is nonzero, it is\n decremented; otherwise, the completion action is performed, and if\n this completer itself has a completer, the process is continued\n with its completer.  As is the case with related synchronization\n components such as {@link java.util.concurrent.Phaser Phaser} and\n {@link java.util.concurrent.Semaphore Semaphore}, these methods\n affect only internal counts; they do not establish any further\n internal bookkeeping. In particular, the identities of pending\n tasks are not maintained. As illustrated below, you can create\n subclasses that do record some or all pending tasks or their\n results when needed.  As illustrated below, utility methods\n supporting customization of completion traversals are also\n provided. However, because CountedCompleters provide only basic\n synchronization mechanisms, it may be useful to create further\n abstract subclasses that maintain linkages, fields, and additional\n support methods appropriate for a set of related usages.\n\n \u003cp\u003eA concrete CountedCompleter class must define method {@link\n #compute}, that should in most cases (as illustrated below), invoke\n {@code tryComplete()} once before returning. The class may also\n optionally override method {@link #onCompletion(CountedCompleter)}\n to perform an action upon normal completion, and method\n {@link #onExceptionalCompletion(Throwable, CountedCompleter)} to\n perform an action upon any exception.\n\n \u003cp\u003eCountedCompleters most often do not bear results, in which case\n they are normally declared as {@code CountedCompleter\u003cVoid\u003e}, and\n will always return {@code null} as a result value.  In other cases,\n you should override method {@link #getRawResult} to provide a\n result from {@code join(), invoke()}, and related methods.  In\n general, this method should return the value of a field (or a\n function of one or more fields) of the CountedCompleter object that\n holds the result upon completion. Method {@link #setRawResult} by\n default plays no role in CountedCompleters.  It is possible, but\n rarely applicable, to override this method to maintain other\n objects or fields holding result data.\n\n \u003cp\u003eA CountedCompleter that does not itself have a completer (i.e.,\n one for which {@link #getCompleter} returns {@code null}) can be\n used as a regular ForkJoinTask with this added functionality.\n However, any completer that in turn has another completer serves\n only as an internal helper for other computations, so its own task\n status (as reported in methods such as {@link ForkJoinTask#isDone})\n is arbitrary; this status changes only upon explicit invocations of\n {@link #complete}, {@link ForkJoinTask#cancel},\n {@link ForkJoinTask#completeExceptionally(Throwable)} or upon\n exceptional completion of method {@code compute}. Upon any\n exceptional completion, the exception may be relayed to a task\u0027s\n completer (and its completer, and so on), if one exists and it has\n not otherwise already completed. Similarly, cancelling an internal\n CountedCompleter has only a local effect on that completer, so is\n not often useful.\n\n \u003cp\u003e\u003cb\u003eSample Usages.\u003c/b\u003e\n\n \u003cp\u003e\u003cb\u003eParallel recursive decomposition.\u003c/b\u003e CountedCompleters may\n be arranged in trees similar to those often used with {@link\n RecursiveAction}s, although the constructions involved in setting\n them up typically vary. Here, the completer of each task is its\n parent in the computation tree. Even though they entail a bit more\n bookkeeping, CountedCompleters may be better choices when applying\n a possibly time-consuming operation (that cannot be further\n subdivided) to each element of an array or collection; especially\n when the operation takes a significantly different amount of time\n to complete for some elements than others, either because of\n intrinsic variation (for example I/O) or auxiliary effects such as\n garbage collection.  Because CountedCompleters provide their own\n continuations, other threads need not block waiting to perform\n them.\n\n \u003cp\u003eFor example, here is an initial version of a class that uses\n divide-by-two recursive decomposition to divide work into single\n pieces (leaf tasks). Even when work is split into individual calls,\n tree-based techniques are usually preferable to directly forking\n leaf tasks, because they reduce inter-thread communication and\n improve load balancing. In the recursive case, the second of each\n pair of subtasks to finish triggers completion of its parent\n (because no result combination is performed, the default no-op\n implementation of method {@code onCompletion} is not overridden).\n A static utility method sets up the base task and invokes it\n (here, implicitly using the {@link ForkJoinPool#commonPool()}).\n\n \u003cpre\u003e {@code\n class MyOperation\u003cE\u003e { void apply(E e) { ... }  }\n\n class ForEach\u003cE\u003e extends CountedCompleter\u003cVoid\u003e {\n\n   public static \u003cE\u003e void forEach(E[] array, MyOperation\u003cE\u003e op) {\n     new ForEach\u003cE\u003e(null, array, op, 0, array.length).invoke();\n   }\n\n   final E[] array; final MyOperation\u003cE\u003e op; final int lo, hi;\n   ForEach(CountedCompleter\u003c?\u003e p, E[] array, MyOperation\u003cE\u003e op, int lo, int hi) {\n     super(p);\n     this.array \u003d array; this.op \u003d op; this.lo \u003d lo; this.hi \u003d hi;\n   }\n\n   public void compute() { // version 1\n     if (hi - lo \u003e\u003d 2) {\n       int mid \u003d (lo + hi) \u003e\u003e\u003e 1;\n       setPendingCount(2); // must set pending count before fork\n       new ForEach(this, array, op, mid, hi).fork(); // right child\n       new ForEach(this, array, op, lo, mid).fork(); // left child\n     }\n     else if (hi \u003e lo)\n       op.apply(array[lo]);\n     tryComplete();\n   }\n }}\u003c/pre\u003e\n\n This design can be improved by noticing that in the recursive case,\n the task has nothing to do after forking its right task, so can\n directly invoke its left task before returning. (This is an analog\n of tail recursion removal.)  Also, because the task returns upon\n executing its left task (rather than falling through to invoke\n {@code tryComplete}) the pending count is set to one:\n\n \u003cpre\u003e {@code\n class ForEach\u003cE\u003e ...\n   public void compute() { // version 2\n     if (hi - lo \u003e\u003d 2) {\n       int mid \u003d (lo + hi) \u003e\u003e\u003e 1;\n       setPendingCount(1); // only one pending\n       new ForEach(this, array, op, mid, hi).fork(); // right child\n       new ForEach(this, array, op, lo, mid).compute(); // direct invoke\n     }\n     else {\n       if (hi \u003e lo)\n         op.apply(array[lo]);\n       tryComplete();\n     }\n   }\n }\u003c/pre\u003e\n\n As a further improvement, notice that the left task need not even exist.\n Instead of creating a new one, we can iterate using the original task,\n and add a pending count for each fork.  Additionally, because no task\n in this tree implements an {@link #onCompletion(CountedCompleter)} method,\n {@code tryComplete()} can be replaced with {@link #propagateCompletion}.\n\n \u003cpre\u003e {@code\n class ForEach\u003cE\u003e ...\n   public void compute() { // version 3\n     int l \u003d lo,  h \u003d hi;\n     while (h - l \u003e\u003d 2) {\n       int mid \u003d (l + h) \u003e\u003e\u003e 1;\n       addToPendingCount(1);\n       new ForEach(this, array, op, mid, h).fork(); // right child\n       h \u003d mid;\n     }\n     if (h \u003e l)\n       op.apply(array[l]);\n     propagateCompletion();\n   }\n }\u003c/pre\u003e\n\n Additional improvements of such classes might entail precomputing\n pending counts so that they can be established in constructors,\n specializing classes for leaf steps, subdividing by say, four,\n instead of two per iteration, and using an adaptive threshold\n instead of always subdividing down to single elements.\n\n \u003cp\u003e\u003cb\u003eSearching.\u003c/b\u003e A tree of CountedCompleters can search for a\n value or property in different parts of a data structure, and\n report a result in an {@link\n java.util.concurrent.atomic.AtomicReference AtomicReference} as\n soon as one is found. The others can poll the result to avoid\n unnecessary work. (You could additionally {@linkplain #cancel\n cancel} other tasks, but it is usually simpler and more efficient\n to just let them notice that the result is set and if so skip\n further processing.)  Illustrating again with an array using full\n partitioning (again, in practice, leaf tasks will almost always\n process more than one element):\n\n \u003cpre\u003e {@code\n class Searcher\u003cE\u003e extends CountedCompleter\u003cE\u003e {\n   final E[] array; final AtomicReference\u003cE\u003e result; final int lo, hi;\n   Searcher(CountedCompleter\u003c?\u003e p, E[] array, AtomicReference\u003cE\u003e result, int lo, int hi) {\n     super(p);\n     this.array \u003d array; this.result \u003d result; this.lo \u003d lo; this.hi \u003d hi;\n   }\n   public E getRawResult() { return result.get(); }\n   public void compute() { // similar to ForEach version 3\n     int l \u003d lo,  h \u003d hi;\n     while (result.get() \u003d\u003d null \u0026\u0026 h \u003e\u003d l) {\n       if (h - l \u003e\u003d 2) {\n         int mid \u003d (l + h) \u003e\u003e\u003e 1;\n         addToPendingCount(1);\n         new Searcher(this, array, result, mid, h).fork();\n         h \u003d mid;\n       }\n       else {\n         E x \u003d array[l];\n         if (matches(x) \u0026\u0026 result.compareAndSet(null, x))\n           quietlyCompleteRoot(); // root task is now joinable\n         break;\n       }\n     }\n     tryComplete(); // normally complete whether or not found\n   }\n   boolean matches(E e) { ... } // return true if found\n\n   public static \u003cE\u003e E search(E[] array) {\n       return new Searcher\u003cE\u003e(null, array, new AtomicReference\u003cE\u003e(), 0, array.length).invoke();\n   }\n }}\u003c/pre\u003e\n\n In this example, as well as others in which tasks have no other\n effects except to compareAndSet a common result, the trailing\n unconditional invocation of {@code tryComplete} could be made\n conditional ({@code if (result.get() \u003d\u003d null) tryComplete();})\n because no further bookkeeping is required to manage completions\n once the root task completes.\n\n \u003cp\u003e\u003cb\u003eRecording subtasks.\u003c/b\u003e CountedCompleter tasks that combine\n results of multiple subtasks usually need to access these results\n in method {@link #onCompletion(CountedCompleter)}. As illustrated in the following\n class (that performs a simplified form of map-reduce where mappings\n and reductions are all of type {@code E}), one way to do this in\n divide and conquer designs is to have each subtask record its\n sibling, so that it can be accessed in method {@code onCompletion}.\n This technique applies to reductions in which the order of\n combining left and right results does not matter; ordered\n reductions require explicit left/right designations.  Variants of\n other streamlinings seen in the above examples may also apply.\n\n \u003cpre\u003e {@code\n class MyMapper\u003cE\u003e { E apply(E v) {  ...  } }\n class MyReducer\u003cE\u003e { E apply(E x, E y) {  ...  } }\n class MapReducer\u003cE\u003e extends CountedCompleter\u003cE\u003e {\n   final E[] array; final MyMapper\u003cE\u003e mapper;\n   final MyReducer\u003cE\u003e reducer; final int lo, hi;\n   MapReducer\u003cE\u003e sibling;\n   E result;\n   MapReducer(CountedCompleter\u003c?\u003e p, E[] array, MyMapper\u003cE\u003e mapper,\n              MyReducer\u003cE\u003e reducer, int lo, int hi) {\n     super(p);\n     this.array \u003d array; this.mapper \u003d mapper;\n     this.reducer \u003d reducer; this.lo \u003d lo; this.hi \u003d hi;\n   }\n   public void compute() {\n     if (hi - lo \u003e\u003d 2) {\n       int mid \u003d (lo + hi) \u003e\u003e\u003e 1;\n       MapReducer\u003cE\u003e left \u003d new MapReducer(this, array, mapper, reducer, lo, mid);\n       MapReducer\u003cE\u003e right \u003d new MapReducer(this, array, mapper, reducer, mid, hi);\n       left.sibling \u003d right;\n       right.sibling \u003d left;\n       setPendingCount(1); // only right is pending\n       right.fork();\n       left.compute();     // directly execute left\n     }\n     else {\n       if (hi \u003e lo)\n           result \u003d mapper.apply(array[lo]);\n       tryComplete();\n     }\n   }\n   public void onCompletion(CountedCompleter\u003c?\u003e caller) {\n     if (caller !\u003d this) {\n       MapReducer\u003cE\u003e child \u003d (MapReducer\u003cE\u003e)caller;\n       MapReducer\u003cE\u003e sib \u003d child.sibling;\n       if (sib \u003d\u003d null || sib.result \u003d\u003d null)\n         result \u003d child.result;\n       else\n         result \u003d reducer.apply(child.result, sib.result);\n     }\n   }\n   public E getRawResult() { return result; }\n\n   public static \u003cE\u003e E mapReduce(E[] array, MyMapper\u003cE\u003e mapper, MyReducer\u003cE\u003e reducer) {\n     return new MapReducer\u003cE\u003e(null, array, mapper, reducer,\n                              0, array.length).invoke();\n   }\n }}\u003c/pre\u003e\n\n Here, method {@code onCompletion} takes a form common to many\n completion designs that combine results. This callback-style method\n is triggered once per task, in either of the two different contexts\n in which the pending count is, or becomes, zero: (1) by a task\n itself, if its pending count is zero upon invocation of {@code\n tryComplete}, or (2) by any of its subtasks when they complete and\n decrement the pending count to zero. The {@code caller} argument\n distinguishes cases.  Most often, when the caller is {@code this},\n no action is necessary. Otherwise the caller argument can be used\n (usually via a cast) to supply a value (and/or links to other\n values) to be combined.  Assuming proper use of pending counts, the\n actions inside {@code onCompletion} occur (once) upon completion of\n a task and its subtasks. No additional synchronization is required\n within this method to ensure thread safety of accesses to fields of\n this task or other completed tasks.\n\n \u003cp\u003e\u003cb\u003eCompletion Traversals\u003c/b\u003e. If using {@code onCompletion} to\n process completions is inapplicable or inconvenient, you can use\n methods {@link #firstComplete} and {@link #nextComplete} to create\n custom traversals.  For example, to define a MapReducer that only\n splits out right-hand tasks in the form of the third ForEach\n example, the completions must cooperatively reduce along\n unexhausted subtask links, which can be done as follows:\n\n \u003cpre\u003e {@code\n class MapReducer\u003cE\u003e extends CountedCompleter\u003cE\u003e { // version 2\n   final E[] array; final MyMapper\u003cE\u003e mapper;\n   final MyReducer\u003cE\u003e reducer; final int lo, hi;\n   MapReducer\u003cE\u003e forks, next; // record subtask forks in list\n   E result;\n   MapReducer(CountedCompleter\u003c?\u003e p, E[] array, MyMapper\u003cE\u003e mapper,\n              MyReducer\u003cE\u003e reducer, int lo, int hi, MapReducer\u003cE\u003e next) {\n     super(p);\n     this.array \u003d array; this.mapper \u003d mapper;\n     this.reducer \u003d reducer; this.lo \u003d lo; this.hi \u003d hi;\n     this.next \u003d next;\n   }\n   public void compute() {\n     int l \u003d lo,  h \u003d hi;\n     while (h - l \u003e\u003d 2) {\n       int mid \u003d (l + h) \u003e\u003e\u003e 1;\n       addToPendingCount(1);\n       (forks \u003d new MapReducer(this, array, mapper, reducer, mid, h, forks)).fork();\n       h \u003d mid;\n     }\n     if (h \u003e l)\n       result \u003d mapper.apply(array[l]);\n     // process completions by reducing along and advancing subtask links\n     for (CountedCompleter\u003c?\u003e c \u003d firstComplete(); c !\u003d null; c \u003d c.nextComplete()) {\n       for (MapReducer t \u003d (MapReducer)c, s \u003d t.forks;  s !\u003d null; s \u003d t.forks \u003d s.next)\n         t.result \u003d reducer.apply(t.result, s.result);\n     }\n   }\n   public E getRawResult() { return result; }\n\n   public static \u003cE\u003e E mapReduce(E[] array, MyMapper\u003cE\u003e mapper, MyReducer\u003cE\u003e reducer) {\n     return new MapReducer\u003cE\u003e(null, array, mapper, reducer,\n                              0, array.length, null).invoke();\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003e\u003cb\u003eTriggers.\u003c/b\u003e Some CountedCompleters are themselves never\n forked, but instead serve as bits of plumbing in other designs;\n including those in which the completion of one or more async tasks\n triggers another async task. For example:\n\n \u003cpre\u003e {@code\n class HeaderBuilder extends CountedCompleter\u003c...\u003e { ... }\n class BodyBuilder extends CountedCompleter\u003c...\u003e { ... }\n class PacketSender extends CountedCompleter\u003c...\u003e {\n   PacketSender(...) { super(null, 1); ... } // trigger on second completion\n   public void compute() { } // never called\n   public void onCompletion(CountedCompleter\u003c?\u003e caller) { sendPacket(); }\n }\n // sample use:\n PacketSender p \u003d new PacketSender();\n new HeaderBuilder(p, ...).fork();\n new BodyBuilder(p, ...).fork();\n }\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.concurrent.ForkJoinTask","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"compute","comment":"The main computation performed by this task.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"onCompletion","comment":"Performs an action when method {@link #tryComplete} is invoked\n and the pending count is zero, or when the unconditional\n method {@link #complete} is invoked.  By default, this method\n does nothing. You can distinguish cases by checking the\n identity of the given caller argument. If not equal to {@code\n this}, then it is typically a subtask that may contain results\n (and/or links to other results) to combine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CountedCompleter\u003c?\u003e)","flatSignature":"(CountedCompleter\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"caller","type":{"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"onExceptionalCompletion","comment":"Performs an action when method {@link\n #completeExceptionally(Throwable)} is invoked or method {@link\n #compute} throws an exception, and this task has not already\n otherwise completed normally. On entry to this method, this task\n {@link ForkJoinTask#isCompletedAbnormally}.  The return value\n of this method controls further propagation: If {@code true}\n and this task has a completer that has not completed, then that\n completer is also completed exceptionally, with the same\n exception as this completer.  The default implementation of\n this method does nothing except return {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Throwable, java.util.concurrent.CountedCompleter\u003c?\u003e)","flatSignature":"(Throwable, CountedCompleter\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ex","type":{"isPrimitive":false,"simpleName":"Throwable","qualifiedName":"java.lang.Throwable","dimension":"","elementType":{}}},{"name":"caller","type":{"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCompleter","comment":"Returns the completer established in this task\u0027s constructor,\n or {@code null} if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPendingCount","comment":"Returns the current pending count.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPendingCount","comment":"Sets the pending count to the given value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addToPendingCount","comment":"Adds (atomically) the given value to the pending count.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"delta","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareAndSetPendingCount","comment":"Sets (atomically) the pending count to the given count only if\n it currently holds the given expected value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"expected","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decrementPendingCountUnlessZero","comment":"If the pending count is nonzero, (atomically) decrements it.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRoot","comment":"Returns the root of the current computation; i.e., this\n task if it has no completer, else its completer\u0027s root.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryComplete","comment":"If the pending count is nonzero, decrements the count;\n otherwise invokes {@link #onCompletion(CountedCompleter)}\n and then similarly tries to complete this task\u0027s completer,\n if one exists, else marks this task as complete.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"propagateCompletion","comment":"Equivalent to {@link #tryComplete} but does not invoke {@link\n #onCompletion(CountedCompleter)} along the completion path:\n If the pending count is nonzero, decrements the count;\n otherwise, similarly tries to complete this task\u0027s completer, if\n one exists, else marks this task as complete. This method may be\n useful in cases where {@code onCompletion} should not, or need\n not, be invoked for each completer in a computation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"complete","comment":"Regardless of pending count, invokes\n {@link #onCompletion(CountedCompleter)}, marks this task as\n complete and further triggers {@link #tryComplete} on this\n task\u0027s completer, if one exists.  The given rawResult is\n used as an argument to {@link #setRawResult} before invoking\n {@link #onCompletion(CountedCompleter)} or marking this task\n as complete; its value is meaningful only for classes\n overriding {@code setRawResult}.  This method does not modify\n the pending count.\n\n \u003cp\u003eThis method may be useful when forcing completion as soon as\n any one (versus all) of several subtask results are obtained.\n However, in the common (and recommended) case in which {@code\n setRawResult} is not overridden, this effect can be obtained\n more simply using {@code quietlyCompleteRoot();}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"rawResult","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"firstComplete","comment":"If this task\u0027s pending count is zero, returns this task;\n otherwise decrements its pending count and returns {@code\n null}. This method is designed to be used with {@link\n #nextComplete} in completion traversal loops.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"nextComplete","comment":"If this task does not have a completer, invokes {@link\n ForkJoinTask#quietlyComplete} and returns {@code null}.  Or, if\n the completer\u0027s pending count is non-zero, decrements that\n pending count and returns {@code null}.  Otherwise, returns the\n completer.  This method can be used as part of a completion\n traversal loop for homogeneous task hierarchies:\n\n \u003cpre\u003e {@code\n for (CountedCompleter\u003c?\u003e c \u003d firstComplete();\n      c !\u003d null;\n      c \u003d c.nextComplete()) {\n   // ... process c ...\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CountedCompleter","qualifiedName":"java.util.concurrent.CountedCompleter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"quietlyCompleteRoot","comment":"Equivalent to {@code getRoot().quietlyComplete()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"helpComplete","comment":"If this task has not completed, attempts to process at most the\n given number of other unprocessed tasks for which this task is\n on the completion path, if any are known to exist.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"maxTasks","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRawResult","comment":"Returns the result of the computation. By default\n returns {@code null}, which is appropriate for {@code Void}\n actions, but in other cases should be overridden, almost\n always to return a field or function of a field that\n holds the result upon completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"enumConstants":[]}