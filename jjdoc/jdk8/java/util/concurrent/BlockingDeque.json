{"name":"BlockingDeque","comment":"A {@link Deque} that additionally supports blocking operations that wait\n for the deque to become non-empty when retrieving an element, and wait for\n space to become available in the deque when storing an element.\n\n \u003cp\u003e{@code BlockingDeque} methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n {@code null} or {@code false}, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eSummary of BlockingDeque methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 5\u003e \u003cb\u003eFirst Element (Head)\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eThrows exception\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eSpecial value\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eBlocks\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eTimes out\u003c/em\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eInsert\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link #addFirst addFirst(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerFirst(Object) offerFirst(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #putFirst putFirst(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eRemove\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link #removeFirst removeFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollFirst pollFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link #takeFirst takeFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eExamine\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link #getFirst getFirst()}\u003c/td\u003e\n    \u003ctd\u003e{@link #peekFirst peekFirst()}\u003c/td\u003e\n    \u003ctd\u003e\u003cem\u003enot applicable\u003c/em\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003cem\u003enot applicable\u003c/em\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 5\u003e \u003cb\u003eLast Element (Tail)\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eThrows exception\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eSpecial value\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eBlocks\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eTimes out\u003c/em\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eInsert\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link #addLast addLast(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerLast(Object) offerLast(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #putLast putLast(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eRemove\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link #removeLast() removeLast()}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollLast() pollLast()}\u003c/td\u003e\n    \u003ctd\u003e{@link #takeLast takeLast()}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollLast(long, TimeUnit) pollLast(time, unit)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eExamine\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link #getLast getLast()}\u003c/td\u003e\n    \u003ctd\u003e{@link #peekLast peekLast()}\u003c/td\u003e\n    \u003ctd\u003e\u003cem\u003enot applicable\u003c/em\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003cem\u003enot applicable\u003c/em\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eLike any {@link BlockingQueue}, a {@code BlockingDeque} is thread safe,\n does not permit null elements, and may (or may not) be\n capacity-constrained.\n\n \u003cp\u003eA {@code BlockingDeque} implementation may be used directly as a FIFO\n {@code BlockingQueue}. The methods inherited from the\n {@code BlockingQueue} interface are precisely equivalent to\n {@code BlockingDeque} methods as indicated in the following table:\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eComparison of BlockingQueue and BlockingDeque methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003e{@code BlockingQueue} Method\u003c/b\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003eEquivalent {@code BlockingDeque} Method\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 2\u003e \u003cb\u003eInsert\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #add(Object) add(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #addLast(Object) addLast(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #offer(Object) offer(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerLast(Object) offerLast(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #put(Object) put(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link #putLast(Object) putLast(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}\u003c/td\u003e\n    \u003ctd\u003e{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 2\u003e \u003cb\u003eRemove\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #remove() remove()}\u003c/td\u003e\n    \u003ctd\u003e{@link #removeFirst() removeFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #poll() poll()}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollFirst() pollFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #take() take()}\u003c/td\u003e\n    \u003ctd\u003e{@link #takeFirst() takeFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #poll(long, TimeUnit) poll(time, unit)}\u003c/td\u003e\n    \u003ctd\u003e{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd ALIGN\u003dCENTER COLSPAN \u003d 2\u003e \u003cb\u003eExamine\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #element() element()}\u003c/td\u003e\n    \u003ctd\u003e{@link #getFirst() getFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{@link #peek() peek()}\u003c/td\u003e\n    \u003ctd\u003e{@link #peekFirst() peekFirst()}\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eMemory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code BlockingDeque}\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n actions subsequent to the access or removal of that element from\n the {@code BlockingDeque} in another thread.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"BlockingDeque","qualifiedName":"java.util.concurrent.BlockingDeque","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":["java.util.concurrent.BlockingQueue","java.util.Deque"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"addFirst","comment":"Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an {@code IllegalStateException} if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use {@link #offerFirst(Object) offerFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"addLast","comment":"Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an {@code IllegalStateException} if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use {@link #offerLast(Object) offerLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offerFirst","comment":"Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning {@code true} upon success and {@code false} if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the {@link #addFirst(Object) addFirst} method, which can\n fail to insert an element only by throwing an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offerLast","comment":"Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning {@code true} upon success and {@code false} if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the {@link #addLast(Object) addLast} method, which can\n fail to insert an element only by throwing an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"putFirst","comment":"Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"putLast","comment":"Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offerFirst","comment":"Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, long, java.util.concurrent.TimeUnit)","flatSignature":"(E, long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"offerLast","comment":"Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, long, java.util.concurrent.TimeUnit)","flatSignature":"(E, long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"takeFirst","comment":"Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"takeLast","comment":"Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollFirst","comment":"Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"pollLast","comment":"Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeFirstOccurrence","comment":"Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeLastOccurrence","comment":"Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"add","comment":"Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n {@code true} upon success and throwing an\n {@code IllegalStateException} if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use {@link #offer(Object) offer}.\n\n \u003cp\u003eThis method is equivalent to {@link #addLast(Object) addLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offer","comment":"Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n {@code true} upon success and {@code false} if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the {@link #add} method, which can fail to\n insert an element only by throwing an exception.\n\n \u003cp\u003eThis method is equivalent to {@link #offerLast(Object) offerLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"put","comment":"Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting if necessary for\n space to become available.\n\n \u003cp\u003eThis method is equivalent to {@link #putLast(Object) putLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offer","comment":"Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting up to the\n specified wait time if necessary for space to become available.\n\n \u003cp\u003eThis method is equivalent to\n {@link #offerLast(Object,long,TimeUnit) offerLast}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, long, java.util.concurrent.TimeUnit)","flatSignature":"(E, long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remove","comment":"Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from {@link #poll poll} only in that it\n throws an exception if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #removeFirst() removeFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n {@code null} if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #pollFirst()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"take","comment":"Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting if\n necessary until an element becomes available.\n\n \u003cp\u003eThis method is equivalent to {@link #takeFirst() takeFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting up to the\n specified wait time if necessary for an element to become available.\n\n \u003cp\u003eThis method is equivalent to\n {@link #pollFirst(long,TimeUnit) pollFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"element","comment":"Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from {@link #peek peek} only in that it throws an\n exception if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #getFirst() getFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peek","comment":"Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns {@code null} if this deque is empty.\n\n \u003cp\u003eThis method is equivalent to {@link #peekFirst() peekFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"remove","comment":"Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n \u003cp\u003eThis method is equivalent to\n {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contains","comment":"Returns {@code true} if this deque contains the specified element.\n More formally, returns {@code true} if and only if this deque contains\n at least one element {@code e} such that {@code o.equals(e)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"size","comment":"Returns the number of elements in this deque.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"push","comment":"Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n {@code IllegalStateException} if no space is currently available.\n\n \u003cp\u003eThis method is equivalent to {@link #addFirst(Object) addFirst}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.concurrent.LinkedBlockingDeque"],"enumConstants":[]}