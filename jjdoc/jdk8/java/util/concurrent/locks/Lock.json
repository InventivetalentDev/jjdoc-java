{"name":"Lock","comment":"{@code Lock} implementations provide more extensive locking\n operations than can be obtained using {@code synchronized} methods\n and statements.  They allow more flexible structuring, may have\n quite different properties, and may support multiple associated\n {@link Condition} objects.\n\n \u003cp\u003eA lock is a tool for controlling access to a shared resource by\n multiple threads. Commonly, a lock provides exclusive access to a\n shared resource: only one thread at a time can acquire the lock and\n all access to the shared resource requires that the lock be\n acquired first. However, some locks may allow concurrent access to\n a shared resource, such as the read lock of a {@link ReadWriteLock}.\n\n \u003cp\u003eThe use of {@code synchronized} methods or statements provides\n access to the implicit monitor lock associated with every object, but\n forces all lock acquisition and release to occur in a block-structured way:\n when multiple locks are acquired they must be released in the opposite\n order, and all locks must be released in the same lexical scope in which\n they were acquired.\n\n \u003cp\u003eWhile the scoping mechanism for {@code synchronized} methods\n and statements makes it much easier to program with monitor locks,\n and helps avoid many common programming errors involving locks,\n there are occasions where you need to work with locks in a more\n flexible way. For example, some algorithms for traversing\n concurrently accessed data structures require the use of\n \u0026quot;hand-over-hand\u0026quot; or \u0026quot;chain locking\u0026quot;: you\n acquire the lock of node A, then node B, then release A and acquire\n C, then release B and acquire D and so on.  Implementations of the\n {@code Lock} interface enable the use of such techniques by\n allowing a lock to be acquired and released in different scopes,\n and allowing multiple locks to be acquired and released in any\n order.\n\n \u003cp\u003eWith this increased flexibility comes additional\n responsibility. The absence of block-structured locking removes the\n automatic release of locks that occurs with {@code synchronized}\n methods and statements. In most cases, the following idiom\n should be used:\n\n  \u003cpre\u003e {@code\n Lock l \u003d ...;\n l.lock();\n try {\n   // access the resource protected by this lock\n } finally {\n   l.unlock();\n }}\u003c/pre\u003e\n\n When locking and unlocking occur in different scopes, care must be\n taken to ensure that all code that is executed while the lock is\n held is protected by try-finally or try-catch to ensure that the\n lock is released when necessary.\n\n \u003cp\u003e{@code Lock} implementations provide additional functionality\n over the use of {@code synchronized} methods and statements by\n providing a non-blocking attempt to acquire a lock ({@link\n #tryLock()}), an attempt to acquire the lock that can be\n interrupted ({@link #lockInterruptibly}, and an attempt to acquire\n the lock that can timeout ({@link #tryLock(long, TimeUnit)}).\n\n \u003cp\u003eA {@code Lock} class can also provide behavior and semantics\n that is quite different from that of the implicit monitor lock,\n such as guaranteed ordering, non-reentrant usage, or deadlock\n detection. If an implementation provides such specialized semantics\n then the implementation must document those semantics.\n\n \u003cp\u003eNote that {@code Lock} instances are just normal objects and can\n themselves be used as the target in a {@code synchronized} statement.\n Acquiring the\n monitor lock of a {@code Lock} instance has no specified relationship\n with invoking any of the {@link #lock} methods of that instance.\n It is recommended that to avoid confusion you never use {@code Lock}\n instances in this way, except within their own implementation.\n\n \u003cp\u003eExcept where noted, passing a {@code null} value for any\n parameter will result in a {@link NullPointerException} being\n thrown.\n\n \u003ch3\u003eMemory Synchronization\u003c/h3\u003e\n\n \u003cp\u003eAll {@code Lock} implementations \u003cem\u003emust\u003c/em\u003e enforce the same\n memory synchronization semantics as provided by the built-in monitor\n lock, as described in\n \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4\"\u003e\n The Java Language Specification (17.4 Memory Model)\u003c/a\u003e:\n \u003cul\u003e\n \u003cli\u003eA successful {@code lock} operation has the same memory\n synchronization effects as a successful \u003cem\u003eLock\u003c/em\u003e action.\n \u003cli\u003eA successful {@code unlock} operation has the same\n memory synchronization effects as a successful \u003cem\u003eUnlock\u003c/em\u003e action.\n \u003c/ul\u003e\n\n Unsuccessful locking and unlocking operations, and reentrant\n locking/unlocking operations, do not require any memory\n synchronization effects.\n\n \u003ch3\u003eImplementation Considerations\u003c/h3\u003e\n\n \u003cp\u003eThe three forms of lock acquisition (interruptible,\n non-interruptible, and timed) may differ in their performance\n characteristics, ordering guarantees, or other implementation\n qualities.  Further, the ability to interrupt the \u003cem\u003eongoing\u003c/em\u003e\n acquisition of a lock may not be available in a given {@code Lock}\n class.  Consequently, an implementation is not required to define\n exactly the same guarantees or semantics for all three forms of\n lock acquisition, nor is it required to support interruption of an\n ongoing lock acquisition.  An implementation is required to clearly\n document the semantics and guarantees provided by each of the\n locking methods. It must also obey the interruption semantics as\n defined in this interface, to the extent that interruption of lock\n acquisition is supported: which is either totally, or only on\n method entry.\n\n \u003cp\u003eAs interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action may have unblocked\n the thread. An implementation should document this behavior.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Lock","qualifiedName":"java.util.concurrent.locks.Lock","dimension":"","elementType":{},"package":"java.util.concurrent.locks","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"lock","comment":"Acquires the lock.\n\n \u003cp\u003eIf the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until the\n lock has been acquired.\n\n \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e\n\n \u003cp\u003eA {@code Lock} implementation may be able to detect erroneous use\n of the lock, such as an invocation that would cause deadlock, and\n may throw an (unchecked) exception in such circumstances.  The\n circumstances and the exception type must be documented by that\n {@code Lock} implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lockInterruptibly","comment":"Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the lock if it is available and returns immediately.\n\n \u003cp\u003eIf the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n\n \u003cul\u003e\n \u003cli\u003eThe lock is acquired by the current thread; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of lock acquisition is supported.\n \u003c/ul\u003e\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while acquiring the\n lock, and interruption of lock acquisition is supported,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e\n\n \u003cp\u003eThe ability to interrupt a lock acquisition in some\n implementations may not be possible, and if possible may be an\n expensive operation.  The programmer should be aware that this\n may be the case. An implementation should document when this is\n the case.\n\n \u003cp\u003eAn implementation can favor responding to an interrupt over\n normal method return.\n\n \u003cp\u003eA {@code Lock} implementation may be able to detect\n erroneous use of the lock, such as an invocation that would\n cause deadlock, and may throw an (unchecked) exception in such\n circumstances.  The circumstances and the exception type must\n be documented by that {@code Lock} implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the lock only if it is free at the time of invocation.\n\n \u003cp\u003eAcquires the lock if it is available and returns immediately\n with the value {@code true}.\n If the lock is not available then this method will return\n immediately with the value {@code false}.\n\n \u003cp\u003eA typical usage idiom for this method would be:\n  \u003cpre\u003e {@code\n Lock lock \u003d ...;\n if (lock.tryLock()) {\n   try {\n     // manipulate protected state\n   } finally {\n     lock.unlock();\n   }\n } else {\n   // perform alternative actions\n }}\u003c/pre\u003e\n\n This usage ensures that the lock is unlocked if it was acquired, and\n doesn\u0027t try to unlock if the lock was not acquired.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the lock if it is free within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eIf the lock is available this method returns immediately\n with the value {@code true}.\n If the lock is not available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n \u003cul\u003e\n \u003cli\u003eThe lock is acquired by the current thread; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of lock acquisition is supported; or\n \u003cli\u003eThe specified waiting time elapses\n \u003c/ul\u003e\n\n \u003cp\u003eIf the lock is acquired then the value {@code true} is returned.\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while acquiring\n the lock, and interruption of lock acquisition is supported,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then the value {@code false}\n is returned.\n If the time is\n less than or equal to zero, the method will not wait at all.\n\n \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e\n\n \u003cp\u003eThe ability to interrupt a lock acquisition in some implementations\n may not be possible, and if possible may\n be an expensive operation.\n The programmer should be aware that this may be the case. An\n implementation should document when this is the case.\n\n \u003cp\u003eAn implementation can favor responding to an interrupt over normal\n method return, or reporting a timeout.\n\n \u003cp\u003eA {@code Lock} implementation may be able to detect\n erroneous use of the lock, such as an invocation that would cause\n deadlock, and may throw an (unchecked) exception in such circumstances.\n The circumstances and the exception type must be documented by that\n {@code Lock} implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"time","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unlock","comment":"Releases the lock.\n\n \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e\n\n \u003cp\u003eA {@code Lock} implementation will usually impose\n restrictions on which thread can release a lock (typically only the\n holder of the lock can release it) and may throw\n an (unchecked) exception if the restriction is violated.\n Any restrictions and the exception\n type must be documented by that {@code Lock} implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newCondition","comment":"Returns a new {@link Condition} instance that is bound to this\n {@code Lock} instance.\n\n \u003cp\u003eBefore waiting on the condition the lock must be held by the\n current thread.\n A call to {@link Condition#await()} will atomically release the lock\n before waiting and re-acquire the lock before the wait returns.\n\n \u003cp\u003e\u003cb\u003eImplementation Considerations\u003c/b\u003e\n\n \u003cp\u003eThe exact operation of the {@link Condition} instance depends on\n the {@code Lock} implementation and must be documented by that\n implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","java.util.concurrent.locks.ReentrantLock"],"enumConstants":[]}