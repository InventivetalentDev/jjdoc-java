{"name":"AbstractQueuedLongSynchronizer","comment":"A version of {@link AbstractQueuedSynchronizer} in\n which synchronization state is maintained as a {@code long}.\n This class has exactly the same structure, properties, and methods\n as {@code AbstractQueuedSynchronizer} with the exception\n that all state-related parameters and results are defined\n as {@code long} rather than {@code int}. This class\n may be useful when creating synchronizers such as\n multilevel locks and barriers that require\n 64 bits of state.\n\n \u003cp\u003eSee {@link AbstractQueuedSynchronizer} for usage\n notes and examples.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractQueuedLongSynchronizer","qualifiedName":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.util.concurrent.locks.AbstractOwnableSynchronizer","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":["java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"acquire","comment":"Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once {@link #tryAcquire},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquire} until success.  This method can be used\n to implement method {@link Lock#lock}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireInterruptibly","comment":"Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once {@link #tryAcquire}, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking {@link #tryAcquire}\n until success or the thread is interrupted.  This method can be\n used to implement method {@link Lock#lockInterruptibly}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryAcquireNanos","comment":"Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquire}, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n {@link #tryAcquire} until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method {@link Lock#tryLock(long, TimeUnit)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanosTimeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"release","comment":"Releases in exclusive mode.  Implemented by unblocking one or\n more threads if {@link #tryRelease} returns true.\n This method can be used to implement method {@link Lock#unlock}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireShared","comment":"Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once {@link #tryAcquireShared},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquireShared} until success.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireSharedInterruptibly","comment":"Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n {@link #tryAcquireShared}, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryAcquireSharedNanos","comment":"Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquireShared}, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted or the timeout elapses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanosTimeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"releaseShared","comment":"Releases in shared mode.  Implemented by unblocking one or more\n threads if {@link #tryReleaseShared} returns true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasQueuedThreads","comment":"Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n \u003cp\u003eIn this implementation, this operation returns in\n constant time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasContended","comment":"Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.\n\n \u003cp\u003eIn this implementation, this operation returns in\n constant time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFirstQueuedThread","comment":"Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.\n\n \u003cp\u003eIn this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isQueued","comment":"Returns true if the given thread is currently queued.\n\n \u003cp\u003eThis implementation traverses the queue to determine\n presence of the given thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"thread","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasQueuedPredecessors","comment":"Queries whether any threads have been waiting to acquire longer\n than the current thread.\n\n \u003cp\u003eAn invocation of this method is equivalent to (but may be\n more efficient than):\n  \u003cpre\u003e {@code\n getFirstQueuedThread() !\u003d Thread.currentThread() \u0026\u0026\n hasQueuedThreads()}\u003c/pre\u003e\n\n \u003cp\u003eNote that because cancellations due to interrupts and\n timeouts may occur at any time, a {@code true} return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned {@code false},\n due to the queue being empty.\n\n \u003cp\u003eThis method is designed to be used by a fair synchronizer to\n avoid \u003ca href\u003d\"AbstractQueuedSynchronizer.html#barging\"\u003ebarging\u003c/a\u003e.\n Such a synchronizer\u0027s {@link #tryAcquire} method should return\n {@code false}, and its {@link #tryAcquireShared} method should\n return a negative value, if this method returns {@code true}\n (unless this is a reentrant acquire).  For example, the {@code\n tryAcquire} method for a fair, reentrant, exclusive mode\n synchronizer might look like this:\n\n  \u003cpre\u003e {@code\n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueueLength","comment":"Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization\n control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueuedThreads","comment":"Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExclusiveQueuedThreads","comment":"Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to an exclusive acquire.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSharedQueuedThreads","comment":"Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to a shared acquire.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code \"State \u003d\"}\n followed by the current value of {@link #getState}, and either\n {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"owns","comment":"Queries whether the given ConditionObject\n uses this synchronizer as its lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedLongSynchronizer.ConditionObject)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasWaiters","comment":"Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a {@code true} return\n does not guarantee that a future {@code signal} will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedLongSynchronizer.ConditionObject)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWaitQueueLength","comment":"Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring of the\n system state, not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedLongSynchronizer.ConditionObject)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWaitingThreads","comment":"Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedLongSynchronizer.ConditionObject)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}