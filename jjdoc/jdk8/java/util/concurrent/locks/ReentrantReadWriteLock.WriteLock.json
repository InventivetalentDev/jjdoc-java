{"name":"ReentrantReadWriteLock.WriteLock","comment":"The lock returned by method {@link ReentrantReadWriteLock#writeLock}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"WriteLock","qualifiedName":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":["java.util.concurrent.locks.Lock","java.io.Serializable"],"isAbstract":false,"isStatic":true,"innerClasses":[],"isInnerClass":true,"constructors":[],"fields":[],"methods":[{"name":"lock","comment":"Acquires the write lock.\n\n \u003cp\u003eAcquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.\n\n \u003cp\u003eIf the current thread already holds the write lock then the\n hold count is incremented by one and the method returns\n immediately.\n\n \u003cp\u003eIf the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until the write lock has been acquired, at which\n time the write lock hold count is set to one.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lockInterruptibly","comment":"Acquires the write lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.\n\n \u003cp\u003eIf the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n immediately.\n\n \u003cp\u003eIf the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of two things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eThe write lock is acquired by the current thread; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n\n \u003c/ul\u003e\n\n \u003cp\u003eIf the write lock is acquired by the current thread then the\n lock hold count is set to one.\n\n \u003cp\u003eIf the current thread:\n\n \u003cul\u003e\n\n \u003cli\u003ehas its interrupted status set on entry to this method;\n or\n\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,\n\n \u003c/ul\u003e\n\n then {@link InterruptedException} is thrown and the current\n thread\u0027s interrupted status is cleared.\n\n \u003cp\u003eIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the write lock only if it is not held by another thread\n at the time of invocation.\n\n \u003cp\u003eAcquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. Even when this lock has\n been set to use a fair ordering policy, a call to\n {@code tryLock()} \u003cem\u003ewill\u003c/em\u003e immediately acquire the\n lock if it is available, whether or not other threads are\n currently waiting for the write lock.  This \u0026quot;barging\u0026quot;\n behavior can be useful in certain circumstances, even\n though it breaks fairness. If you want to honor the\n fairness setting for this lock, then use {@link\n #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n \u003cp\u003eIf the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.\n\n \u003cp\u003eIf the lock is held by another thread then this method\n will return immediately with the value {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the write lock if it is not held by another thread\n within the given waiting time and the current thread has\n not been {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. If this lock has been\n set to use a fair ordering policy then an available lock\n \u003cem\u003ewill not\u003c/em\u003e be acquired if any other threads are\n waiting for the write lock. This is in contrast to the {@link\n #tryLock()} method. If you want a timed {@code tryLock}\n that does permit barging on a fair lock then combine the\n timed and un-timed forms together:\n\n  \u003cpre\u003e {@code\n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }}\u003c/pre\u003e\n\n \u003cp\u003eIf the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.\n\n \u003cp\u003eIf the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of three things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eThe write lock is acquired by the current thread; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe specified waiting time elapses\n\n \u003c/ul\u003e\n\n \u003cp\u003eIf the write lock is acquired then the value {@code true} is\n returned and the write lock hold count is set to one.\n\n \u003cp\u003eIf the current thread:\n\n \u003cul\u003e\n\n \u003cli\u003ehas its interrupted status set on entry to this method;\n or\n\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,\n\n \u003c/ul\u003e\n\n then {@link InterruptedException} is thrown and the current\n thread\u0027s interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n \u003cp\u003eIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unlock","comment":"Attempts to release this lock.\n\n \u003cp\u003eIf the current thread is the holder of this lock then\n the hold count is decremented. If the hold count is now\n zero then the lock is released.  If the current thread is\n not the holder of this lock then {@link\n IllegalMonitorStateException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newCondition","comment":"Returns a {@link Condition} instance for use with this\n {@link Lock} instance.\n \u003cp\u003eThe returned {@link Condition} instance supports the same\n usages as do the {@link Object} monitor methods ({@link\n Object#wait() wait}, {@link Object#notify notify}, and {@link\n Object#notifyAll notifyAll}) when used with the built-in\n monitor lock.\n\n \u003cul\u003e\n\n \u003cli\u003eIf this write lock is not held when any {@link\n Condition} method is called then an {@link\n IllegalMonitorStateException} is thrown.  (Read locks are\n held independently of write locks, so are not checked or\n affected. However it is essentially always an error to\n invoke a condition waiting method when the current thread\n has also acquired read locks, since other threads that\n could unblock it will not be able to acquire the write\n lock.)\n\n \u003cli\u003eWhen the condition {@linkplain Condition#await() waiting}\n methods are called the write lock is released and, before\n they return, the write lock is reacquired and the lock hold\n count restored to what it was when the method was called.\n\n \u003cli\u003eIf a thread is {@linkplain Thread#interrupt interrupted} while\n waiting then the wait will terminate, an {@link\n InterruptedException} will be thrown, and the thread\u0027s\n interrupted status will be cleared.\n\n \u003cli\u003e Waiting threads are signalled in FIFO order.\n\n \u003cli\u003eThe ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for \u003cem\u003efair\u003c/em\u003e locks favors those threads that have been\n waiting the longest.\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets includes either the String\n {@code \"Unlocked\"} or the String {@code \"Locked by\"}\n followed by the {@linkplain Thread#getName name} of the owning thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isHeldByCurrentThread","comment":"Queries if this write lock is held by the current thread.\n Identical in effect to {@link\n ReentrantReadWriteLock#isWriteLockedByCurrentThread}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHoldCount","comment":"Queries the number of holds on this write lock by the current\n thread.  A thread has a hold on a lock for each lock action\n that is not matched by an unlock action.  Identical in effect\n to {@link ReentrantReadWriteLock#getWriteHoldCount}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}