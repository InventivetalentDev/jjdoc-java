{"name":"LockSupport","comment":"Basic thread blocking primitives for creating locks and other\n synchronization classes.\n\n \u003cp\u003eThis class associates, with each thread that uses it, a permit\n (in the sense of the {@link java.util.concurrent.Semaphore\n Semaphore} class). A call to {@code park} will return immediately\n if the permit is available, consuming it in the process; otherwise\n it \u003cem\u003emay\u003c/em\u003e block.  A call to {@code unpark} makes the permit\n available, if it was not already available. (Unlike with Semaphores\n though, permits do not accumulate. There is at most one.)\n\n \u003cp\u003eMethods {@code park} and {@code unpark} provide efficient\n means of blocking and unblocking threads that do not encounter the\n problems that cause the deprecated methods {@code Thread.suspend}\n and {@code Thread.resume} to be unusable for such purposes: Races\n between one thread invoking {@code park} and another thread trying\n to {@code unpark} it will preserve liveness, due to the\n permit. Additionally, {@code park} will return if the caller\u0027s\n thread was interrupted, and timeout versions are supported. The\n {@code park} method may also return at any other time, for \"no\n reason\", so in general must be invoked within a loop that rechecks\n conditions upon return. In this sense {@code park} serves as an\n optimization of a \"busy wait\" that does not waste as much time\n spinning, but must be paired with an {@code unpark} to be\n effective.\n\n \u003cp\u003eThe three forms of {@code park} each also support a\n {@code blocker} object parameter. This object is recorded while\n the thread is blocked to permit monitoring and diagnostic tools to\n identify the reasons that threads are blocked. (Such tools may\n access blockers using method {@link #getBlocker(Thread)}.)\n The use of these forms rather than the original forms without this\n parameter is strongly encouraged. The normal argument to supply as\n a {@code blocker} within a lock implementation is {@code this}.\n\n \u003cp\u003eThese methods are designed to be used as tools for creating\n higher-level synchronization utilities, and are not in themselves\n useful for most concurrency control applications.  The {@code park}\n method is designed for use only in constructions of the form:\n\n  \u003cpre\u003e {@code\n while (!canProceed()) { ... LockSupport.park(this); }}\u003c/pre\u003e\n\n where neither {@code canProceed} nor any other actions prior to the\n call to {@code park} entail locking or blocking.  Because only one\n permit is associated with each thread, any intermediary uses of\n {@code park} could interfere with its intended effects.\n\n \u003cp\u003e\u003cb\u003eSample Usage.\u003c/b\u003e Here is a sketch of a first-in-first-out\n non-reentrant lock class:\n  \u003cpre\u003e {@code\n class FIFOMutex {\n   private final AtomicBoolean locked \u003d new AtomicBoolean(false);\n   private final Queue\u003cThread\u003e waiters\n     \u003d new ConcurrentLinkedQueue\u003cThread\u003e();\n\n   public void lock() {\n     boolean wasInterrupted \u003d false;\n     Thread current \u003d Thread.currentThread();\n     waiters.add(current);\n\n     // Block while not first in queue or cannot acquire lock\n     while (waiters.peek() !\u003d current ||\n            !locked.compareAndSet(false, true)) {\n       LockSupport.park(this);\n       if (Thread.interrupted()) // ignore interrupts while waiting\n         wasInterrupted \u003d true;\n     }\n\n     waiters.remove();\n     if (wasInterrupted)          // reassert interrupt status on exit\n       current.interrupt();\n   }\n\n   public void unlock() {\n     locked.set(false);\n     LockSupport.unpark(waiters.peek());\n   }\n }}\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LockSupport","qualifiedName":"java.util.concurrent.locks.LockSupport","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"unpark","comment":"Makes available the permit for the given thread, if it\n was not already available.  If the thread was blocked on\n {@code park} then it will unblock.  Otherwise, its next call\n to {@code park} is guaranteed not to block. This operation\n is not guaranteed to have any effect at all if the given\n thread has not been started.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"thread","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"park","comment":"Disables the current thread for thread scheduling purposes unless the\n permit is available.\n\n \u003cp\u003eIf the permit is available then it is consumed and the call returns\n immediately; otherwise\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe call spuriously (that is, for no reason) returns.\n \u003c/ul\u003e\n\n \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"blocker","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parkNanos","comment":"Disables the current thread for thread scheduling purposes, for up to\n the specified waiting time, unless the permit is available.\n\n \u003cp\u003eIf the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe specified waiting time elapses; or\n\n \u003cli\u003eThe call spuriously (that is, for no reason) returns.\n \u003c/ul\u003e\n\n \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the elapsed time\n upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, long)","flatSignature":"(Object, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"blocker","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parkUntil","comment":"Disables the current thread for thread scheduling purposes, until\n the specified deadline, unless the permit is available.\n\n \u003cp\u003eIf the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts} the\n current thread; or\n\n \u003cli\u003eThe specified deadline passes; or\n\n \u003cli\u003eThe call spuriously (that is, for no reason) returns.\n \u003c/ul\u003e\n\n \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the current time\n upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, long)","flatSignature":"(Object, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"blocker","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"deadline","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBlocker","comment":"Returns the blocker object supplied to the most recent\n invocation of a park method that has not yet unblocked, or null\n if not blocked.  The value returned is just a momentary\n snapshot -- the thread may have since unblocked or blocked on a\n different blocker object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"t","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"park","comment":"Disables the current thread for thread scheduling purposes unless the\n permit is available.\n\n \u003cp\u003eIf the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of three\n things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eSome other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe call spuriously (that is, for no reason) returns.\n \u003c/ul\u003e\n\n \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"parkNanos","comment":"Disables the current thread for thread scheduling purposes, for up to\n the specified waiting time, unless the permit is available.\n\n \u003cp\u003eIf the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe specified waiting time elapses; or\n\n \u003cli\u003eThe call spuriously (that is, for no reason) returns.\n \u003c/ul\u003e\n\n \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the elapsed time\n upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nanos","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parkUntil","comment":"Disables the current thread for thread scheduling purposes, until\n the specified deadline, unless the permit is available.\n\n \u003cp\u003eIf the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe specified deadline passes; or\n\n \u003cli\u003eThe call spuriously (that is, for no reason) returns.\n \u003c/ul\u003e\n\n \u003cp\u003eThis method does \u003cem\u003enot\u003c/em\u003e report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the current time\n upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"deadline","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}