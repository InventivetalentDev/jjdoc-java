{"name":"AbstractOwnableSynchronizer","comment":"A synchronizer that may be exclusively owned by a thread.  This\n class provides a basis for creating locks and related synchronizers\n that may entail a notion of ownership.  The\n {@code AbstractOwnableSynchronizer} class itself does not manage or\n use this information. However, subclasses and tools may use\n appropriately maintained values to help control and monitor access\n and provide diagnostics.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractOwnableSynchronizer","qualifiedName":"java.util.concurrent.locks.AbstractOwnableSynchronizer","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[],"typeParameters":[],"subClasses":["java.util.concurrent.locks.AbstractQueuedSynchronizer","java.util.concurrent.locks.AbstractQueuedLongSynchronizer"],"enumConstants":[]}