{"name":"ReentrantLock","comment":"A reentrant mutual exclusion {@link Lock} with the same basic\n behavior and semantics as the implicit monitor lock accessed using\n {@code synchronized} methods and statements, but with extended\n capabilities.\n\n \u003cp\u003eA {@code ReentrantLock} is \u003cem\u003eowned\u003c/em\u003e by the thread last\n successfully locking, but not yet unlocking it. A thread invoking\n {@code lock} will return, successfully acquiring the lock, when\n the lock is not owned by another thread. The method will return\n immediately if the current thread already owns the lock. This can\n be checked using methods {@link #isHeldByCurrentThread}, and {@link\n #getHoldCount}.\n\n \u003cp\u003eThe constructor for this class accepts an optional\n \u003cem\u003efairness\u003c/em\u003e parameter.  When set {@code true}, under\n contention, locks favor granting access to the longest-waiting\n thread.  Otherwise this lock does not guarantee any particular\n access order.  Programs using fair locks accessed by many threads\n may display lower overall throughput (i.e., are slower; often much\n slower) than those using the default setting, but have smaller\n variances in times to obtain locks and guarantee lack of\n starvation. Note however, that fairness of locks does not guarantee\n fairness of thread scheduling. Thus, one of many threads using a\n fair lock may obtain it multiple times in succession while other\n active threads are not progressing and not currently holding the\n lock.\n Also note that the untimed {@link #tryLock()} method does not\n honor the fairness setting. It will succeed if the lock\n is available even if other threads are waiting.\n\n \u003cp\u003eIt is recommended practice to \u003cem\u003ealways\u003c/em\u003e immediately\n follow a call to {@code lock} with a {@code try} block, most\n typically in a before/after construction such as:\n\n  \u003cpre\u003e {@code\n class X {\n   private final ReentrantLock lock \u003d new ReentrantLock();\n   // ...\n\n   public void m() {\n     lock.lock();  // block until condition holds\n     try {\n       // ... method body\n     } finally {\n       lock.unlock()\n     }\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eIn addition to implementing the {@link Lock} interface, this\n class defines a number of {@code public} and {@code protected}\n methods for inspecting the state of the lock.  Some of these\n methods are only useful for instrumentation and monitoring.\n\n \u003cp\u003eSerialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized.\n\n \u003cp\u003eThis lock supports a maximum of 2147483647 recursive locks by\n the same thread. Attempts to exceed this limit result in\n {@link Error} throws from locking methods.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ReentrantLock","qualifiedName":"java.util.concurrent.locks.ReentrantLock","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":["java.util.concurrent.locks.Lock","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ReentrantLock","comment":"Creates an instance of {@code ReentrantLock}.\n This is equivalent to using {@code ReentrantLock(false)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ReentrantLock","comment":"Creates an instance of {@code ReentrantLock} with the\n given fairness policy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","parameters":[{"name":"fair","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"lock","comment":"Acquires the lock.\n\n \u003cp\u003eAcquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n \u003cp\u003eIf the current thread already holds the lock then the hold\n count is incremented by one and the method returns immediately.\n\n \u003cp\u003eIf the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until the lock has been acquired,\n at which time the lock hold count is set to one.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lockInterruptibly","comment":"Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n \u003cp\u003eIf the current thread already holds this lock then the hold count\n is incremented by one and the method returns immediately.\n\n \u003cp\u003eIf the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eThe lock is acquired by the current thread; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts} the\n current thread.\n\n \u003c/ul\u003e\n\n \u003cp\u003eIf the lock is acquired by the current thread then the lock hold\n count is set to one.\n\n \u003cp\u003eIf the current thread:\n\n \u003cul\u003e\n\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while acquiring\n the lock,\n\n \u003c/ul\u003e\n\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003eIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the lock only if it is not held by another thread at the time\n of invocation.\n\n \u003cp\u003eAcquires the lock if it is not held by another thread and\n returns immediately with the value {@code true}, setting the\n lock hold count to one. Even when this lock has been set to use a\n fair ordering policy, a call to {@code tryLock()} \u003cem\u003ewill\u003c/em\u003e\n immediately acquire the lock if it is available, whether or not\n other threads are currently waiting for the lock.\n This \u0026quot;barging\u0026quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting for this lock, then use\n {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n \u003cp\u003eIf the current thread already holds this lock then the hold\n count is incremented by one and the method returns {@code true}.\n\n \u003cp\u003eIf the lock is held by another thread then this method will return\n immediately with the value {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the lock if it is not held by another thread within the given\n waiting time and the current thread has not been\n {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the lock if it is not held by another thread and returns\n immediately with the value {@code true}, setting the lock hold count\n to one. If this lock has been set to use a fair ordering policy then\n an available lock \u003cem\u003ewill not\u003c/em\u003e be acquired if any other threads\n are waiting for the lock. This is in contrast to the {@link #tryLock()}\n method. If you want a timed {@code tryLock} that does permit barging on\n a fair lock then combine the timed and un-timed forms together:\n\n  \u003cpre\u003e {@code\n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }}\u003c/pre\u003e\n\n \u003cp\u003eIf the current thread\n already holds this lock then the hold count is incremented by one and\n the method returns {@code true}.\n\n \u003cp\u003eIf the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eThe lock is acquired by the current thread; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe specified waiting time elapses\n\n \u003c/ul\u003e\n\n \u003cp\u003eIf the lock is acquired then the value {@code true} is returned and\n the lock hold count is set to one.\n\n \u003cp\u003eIf the current thread:\n\n \u003cul\u003e\n\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while\n acquiring the lock,\n\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n\n \u003cp\u003eIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock, and\n over reporting the elapse of the waiting time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unlock","comment":"Attempts to release this lock.\n\n \u003cp\u003eIf the current thread is the holder of this lock then the hold\n count is decremented.  If the hold count is now zero then the lock\n is released.  If the current thread is not the holder of this\n lock then {@link IllegalMonitorStateException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newCondition","comment":"Returns a {@link Condition} instance for use with this\n {@link Lock} instance.\n\n \u003cp\u003eThe returned {@link Condition} instance supports the same\n usages as do the {@link Object} monitor methods ({@link\n Object#wait() wait}, {@link Object#notify notify}, and {@link\n Object#notifyAll notifyAll}) when used with the built-in\n monitor lock.\n\n \u003cul\u003e\n\n \u003cli\u003eIf this lock is not held when any of the {@link Condition}\n {@linkplain Condition#await() waiting} or {@linkplain\n Condition#signal signalling} methods are called, then an {@link\n IllegalMonitorStateException} is thrown.\n\n \u003cli\u003eWhen the condition {@linkplain Condition#await() waiting}\n methods are called the lock is released and, before they\n return, the lock is reacquired and the lock hold count restored\n to what it was when the method was called.\n\n \u003cli\u003eIf a thread is {@linkplain Thread#interrupt interrupted}\n while waiting then the wait will terminate, an {@link\n InterruptedException} will be thrown, and the thread\u0027s\n interrupted status will be cleared.\n\n \u003cli\u003e Waiting threads are signalled in FIFO order.\n\n \u003cli\u003eThe ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for \u003cem\u003efair\u003c/em\u003e locks favors those threads that have been\n waiting the longest.\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHoldCount","comment":"Queries the number of holds on this lock by the current thread.\n\n \u003cp\u003eA thread has a hold on a lock for each lock action that is not\n matched by an unlock action.\n\n \u003cp\u003eThe hold count information is typically only used for testing and\n debugging purposes. For example, if a certain section of code should\n not be entered with the lock already held then we can assert that\n fact:\n\n  \u003cpre\u003e {@code\n class X {\n   ReentrantLock lock \u003d new ReentrantLock();\n   // ...\n   public void m() {\n     assert lock.getHoldCount() \u003d\u003d 0;\n     lock.lock();\n     try {\n       // ... method body\n     } finally {\n       lock.unlock();\n     }\n   }\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isHeldByCurrentThread","comment":"Queries if this lock is held by the current thread.\n\n \u003cp\u003eAnalogous to the {@link Thread#holdsLock(Object)} method for\n built-in monitor locks, this method is typically used for\n debugging and testing. For example, a method that should only be\n called while a lock is held can assert that this is the case:\n\n  \u003cpre\u003e {@code\n class X {\n   ReentrantLock lock \u003d new ReentrantLock();\n   // ...\n\n   public void m() {\n       assert lock.isHeldByCurrentThread();\n       // ... method body\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eIt can also be used to ensure that a reentrant lock is used\n in a non-reentrant manner, for example:\n\n  \u003cpre\u003e {@code\n class X {\n   ReentrantLock lock \u003d new ReentrantLock();\n   // ...\n\n   public void m() {\n       assert !lock.isHeldByCurrentThread();\n       lock.lock();\n       try {\n           // ... method body\n       } finally {\n           lock.unlock();\n       }\n   }\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLocked","comment":"Queries if this lock is held by any thread. This method is\n designed for use in monitoring of the system state,\n not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isFair","comment":"Returns {@code true} if this lock has fairness set true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasQueuedThreads","comment":"Queries whether any threads are waiting to acquire this lock. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire this lock.  This method is designed primarily for use in\n monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasQueuedThread","comment":"Queries whether the given thread is waiting to acquire this\n lock. Note that because cancellations may occur at any time, a\n {@code true} return does not guarantee that this thread\n will ever acquire this lock.  This method is designed primarily for use\n in monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"thread","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getQueueLength","comment":"Returns an estimate of the number of threads waiting to\n acquire this lock.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring of the system state, not for synchronization\n control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasWaiters","comment":"Queries whether any threads are waiting on the given condition\n associated with this lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.Condition)","flatSignature":"(Condition)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWaitQueueLength","comment":"Returns an estimate of the number of threads waiting on the\n given condition associated with this lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.Condition)","flatSignature":"(Condition)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes either the String {@code \"Unlocked\"}\n or the String {@code \"Locked by\"} followed by the\n {@linkplain Thread#getName name} of the owning thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}