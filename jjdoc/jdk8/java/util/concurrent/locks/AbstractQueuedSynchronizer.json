{"name":"AbstractQueuedSynchronizer","comment":"Provides a framework for implementing blocking locks and related\n synchronizers (semaphores, events, etc) that rely on\n first-in-first-out (FIFO) wait queues.  This class is designed to\n be a useful basis for most kinds of synchronizers that rely on a\n single atomic {@code int} value to represent state. Subclasses\n must define the protected methods that change this state, and which\n define what that state means in terms of this object being acquired\n or released.  Given these, the other methods in this class carry\n out all queuing and blocking mechanics. Subclasses can maintain\n other state fields, but only the atomically updated {@code int}\n value manipulated using methods {@link #getState}, {@link\n #setState} and {@link #compareAndSetState} is tracked with respect\n to synchronization.\n\n \u003cp\u003eSubclasses should be defined as non-public internal helper\n classes that are used to implement the synchronization properties\n of their enclosing class.  Class\n {@code AbstractQueuedSynchronizer} does not implement any\n synchronization interface.  Instead it defines methods such as\n {@link #acquireInterruptibly} that can be invoked as\n appropriate by concrete locks and related synchronizers to\n implement their public methods.\n\n \u003cp\u003eThis class supports either or both a default \u003cem\u003eexclusive\u003c/em\u003e\n mode and a \u003cem\u003eshared\u003c/em\u003e mode. When acquired in exclusive mode,\n attempted acquires by other threads cannot succeed. Shared mode\n acquires by multiple threads may (but need not) succeed. This class\n does not \u0026quot;understand\u0026quot; these differences except in the\n mechanical sense that when a shared mode acquire succeeds, the next\n waiting thread (if one exists) must also determine whether it can\n acquire as well. Threads waiting in the different modes share the\n same FIFO queue. Usually, implementation subclasses support only\n one of these modes, but both can come into play for example in a\n {@link ReadWriteLock}. Subclasses that support only exclusive or\n only shared modes need not define the methods supporting the unused mode.\n\n \u003cp\u003eThis class defines a nested {@link ConditionObject} class that\n can be used as a {@link Condition} implementation by subclasses\n supporting exclusive mode for which method {@link\n #isHeldExclusively} reports whether synchronization is exclusively\n held with respect to the current thread, method {@link #release}\n invoked with the current {@link #getState} value fully releases\n this object, and {@link #acquire}, given this saved state value,\n eventually restores this object to its previous acquired state.  No\n {@code AbstractQueuedSynchronizer} method otherwise creates such a\n condition, so if this constraint cannot be met, do not use it.  The\n behavior of {@link ConditionObject} depends of course on the\n semantics of its synchronizer implementation.\n\n \u003cp\u003eThis class provides inspection, instrumentation, and monitoring\n methods for the internal queue, as well as similar methods for\n condition objects. These can be exported as desired into classes\n using an {@code AbstractQueuedSynchronizer} for their\n synchronization mechanics.\n\n \u003cp\u003eSerialization of this class stores only the underlying atomic\n integer maintaining state, so deserialized objects have empty\n thread queues. Typical subclasses requiring serializability will\n define a {@code readObject} method that restores this to a known\n initial state upon deserialization.\n\n \u003ch3\u003eUsage\u003c/h3\u003e\n\n \u003cp\u003eTo use this class as the basis of a synchronizer, redefine the\n following methods, as applicable, by inspecting and/or modifying\n the synchronization state using {@link #getState}, {@link\n #setState} and/or {@link #compareAndSetState}:\n\n \u003cul\u003e\n \u003cli\u003e {@link #tryAcquire}\n \u003cli\u003e {@link #tryRelease}\n \u003cli\u003e {@link #tryAcquireShared}\n \u003cli\u003e {@link #tryReleaseShared}\n \u003cli\u003e {@link #isHeldExclusively}\n \u003c/ul\u003e\n\n Each of these methods by default throws {@link\n UnsupportedOperationException}.  Implementations of these methods\n must be internally thread-safe, and should in general be short and\n not block. Defining these methods is the \u003cem\u003eonly\u003c/em\u003e supported\n means of using this class. All other methods are declared\n {@code final} because they cannot be independently varied.\n\n \u003cp\u003eYou may also find the inherited methods from {@link\n AbstractOwnableSynchronizer} useful to keep track of the thread\n owning an exclusive synchronizer.  You are encouraged to use them\n -- this enables monitoring and diagnostic tools to assist users in\n determining which threads hold locks.\n\n \u003cp\u003eEven though this class is based on an internal FIFO queue, it\n does not automatically enforce FIFO acquisition policies.  The core\n of exclusive synchronization takes the form:\n\n \u003cpre\u003e\n Acquire:\n     while (!tryAcquire(arg)) {\n        \u003cem\u003eenqueue thread if it is not already queued\u003c/em\u003e;\n        \u003cem\u003epossibly block current thread\u003c/em\u003e;\n     }\n\n Release:\n     if (tryRelease(arg))\n        \u003cem\u003eunblock the first queued thread\u003c/em\u003e;\n \u003c/pre\u003e\n\n (Shared mode is similar but may involve cascading signals.)\n\n \u003cp id\u003d\"barging\"\u003eBecause checks in acquire are invoked before\n enqueuing, a newly acquiring thread may \u003cem\u003ebarge\u003c/em\u003e ahead of\n others that are blocked and queued.  However, you can, if desired,\n define {@code tryAcquire} and/or {@code tryAcquireShared} to\n disable barging by internally invoking one or more of the inspection\n methods, thereby providing a \u003cem\u003efair\u003c/em\u003e FIFO acquisition order.\n In particular, most fair synchronizers can define {@code tryAcquire}\n to return {@code false} if {@link #hasQueuedPredecessors} (a method\n specifically designed to be used by fair synchronizers) returns\n {@code true}.  Other variations are possible.\n\n \u003cp\u003eThroughput and scalability are generally highest for the\n default barging (also known as \u003cem\u003egreedy\u003c/em\u003e,\n \u003cem\u003erenouncement\u003c/em\u003e, and \u003cem\u003econvoy-avoidance\u003c/em\u003e) strategy.\n While this is not guaranteed to be fair or starvation-free, earlier\n queued threads are allowed to recontend before later queued\n threads, and each recontention has an unbiased chance to succeed\n against incoming threads.  Also, while acquires do not\n \u0026quot;spin\u0026quot; in the usual sense, they may perform multiple\n invocations of {@code tryAcquire} interspersed with other\n computations before blocking.  This gives most of the benefits of\n spins when exclusive synchronization is only briefly held, without\n most of the liabilities when it isn\u0027t. If so desired, you can\n augment this by preceding calls to acquire methods with\n \"fast-path\" checks, possibly prechecking {@link #hasContended}\n and/or {@link #hasQueuedThreads} to only do so if the synchronizer\n is likely not to be contended.\n\n \u003cp\u003eThis class provides an efficient and scalable basis for\n synchronization in part by specializing its range of use to\n synchronizers that can rely on {@code int} state, acquire, and\n release parameters, and an internal FIFO wait queue. When this does\n not suffice, you can build synchronizers from a lower level using\n {@link java.util.concurrent.atomic atomic} classes, your own custom\n {@link java.util.Queue} classes, and {@link LockSupport} blocking\n support.\n\n \u003ch3\u003eUsage Examples\u003c/h3\u003e\n\n \u003cp\u003eHere is a non-reentrant mutual exclusion lock class that uses\n the value zero to represent the unlocked state, and one to\n represent the locked state. While a non-reentrant lock\n does not strictly require recording of the current owner\n thread, this class does so anyway to make usage easier to monitor.\n It also supports conditions and exposes\n one of the instrumentation methods:\n\n  \u003cpre\u003e {@code\n class Mutex implements Lock, java.io.Serializable {\n\n   // Our internal helper class\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // Reports whether in locked state\n     protected boolean isHeldExclusively() {\n       return getState() \u003d\u003d 1;\n     }\n\n     // Acquires the lock if state is zero\n     public boolean tryAcquire(int acquires) {\n       assert acquires \u003d\u003d 1; // Otherwise unused\n       if (compareAndSetState(0, 1)) {\n         setExclusiveOwnerThread(Thread.currentThread());\n         return true;\n       }\n       return false;\n     }\n\n     // Releases the lock by setting state to zero\n     protected boolean tryRelease(int releases) {\n       assert releases \u003d\u003d 1; // Otherwise unused\n       if (getState() \u003d\u003d 0) throw new IllegalMonitorStateException();\n       setExclusiveOwnerThread(null);\n       setState(0);\n       return true;\n     }\n\n     // Provides a Condition\n     Condition newCondition() { return new ConditionObject(); }\n\n     // Deserializes properly\n     private void readObject(ObjectInputStream s)\n         throws IOException, ClassNotFoundException {\n       s.defaultReadObject();\n       setState(0); // reset to unlocked state\n     }\n   }\n\n   // The sync object does all the hard work. We just forward to it.\n   private final Sync sync \u003d new Sync();\n\n   public void lock()                { sync.acquire(1); }\n   public boolean tryLock()          { return sync.tryAcquire(1); }\n   public void unlock()              { sync.release(1); }\n   public Condition newCondition()   { return sync.newCondition(); }\n   public boolean isLocked()         { return sync.isHeldExclusively(); }\n   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eHere is a latch class that is like a\n {@link java.util.concurrent.CountDownLatch CountDownLatch}\n except that it only requires a single {@code signal} to\n fire. Because a latch is non-exclusive, it uses the {@code shared}\n acquire and release methods.\n\n  \u003cpre\u003e {@code\n class BooleanLatch {\n\n   private static class Sync extends AbstractQueuedSynchronizer {\n     boolean isSignalled() { return getState() !\u003d 0; }\n\n     protected int tryAcquireShared(int ignore) {\n       return isSignalled() ? 1 : -1;\n     }\n\n     protected boolean tryReleaseShared(int ignore) {\n       setState(1);\n       return true;\n     }\n   }\n\n   private final Sync sync \u003d new Sync();\n   public boolean isSignalled() { return sync.isSignalled(); }\n   public void signal()         { sync.releaseShared(1); }\n   public void await() throws InterruptedException {\n     sync.acquireSharedInterruptibly(1);\n   }\n }}\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractQueuedSynchronizer","qualifiedName":"java.util.concurrent.locks.AbstractQueuedSynchronizer","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.util.concurrent.locks.AbstractOwnableSynchronizer","interfaces":["java.io.Serializable"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":["java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"acquire","comment":"Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once {@link #tryAcquire},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquire} until success.  This method can be used\n to implement method {@link Lock#lock}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireInterruptibly","comment":"Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once {@link #tryAcquire}, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking {@link #tryAcquire}\n until success or the thread is interrupted.  This method can be\n used to implement method {@link Lock#lockInterruptibly}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryAcquireNanos","comment":"Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquire}, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n {@link #tryAcquire} until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method {@link Lock#tryLock(long, TimeUnit)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, long)","flatSignature":"(int, long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanosTimeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"release","comment":"Releases in exclusive mode.  Implemented by unblocking one or\n more threads if {@link #tryRelease} returns true.\n This method can be used to implement method {@link Lock#unlock}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireShared","comment":"Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once {@link #tryAcquireShared},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquireShared} until success.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acquireSharedInterruptibly","comment":"Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n {@link #tryAcquireShared}, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tryAcquireSharedNanos","comment":"Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquireShared}, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted or the timeout elapses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, long)","flatSignature":"(int, long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nanosTimeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"releaseShared","comment":"Releases in shared mode.  Implemented by unblocking one or more\n threads if {@link #tryReleaseShared} returns true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arg","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasQueuedThreads","comment":"Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n \u003cp\u003eIn this implementation, this operation returns in\n constant time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasContended","comment":"Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.\n\n \u003cp\u003eIn this implementation, this operation returns in\n constant time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFirstQueuedThread","comment":"Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.\n\n \u003cp\u003eIn this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isQueued","comment":"Returns true if the given thread is currently queued.\n\n \u003cp\u003eThis implementation traverses the queue to determine\n presence of the given thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"thread","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasQueuedPredecessors","comment":"Queries whether any threads have been waiting to acquire longer\n than the current thread.\n\n \u003cp\u003eAn invocation of this method is equivalent to (but may be\n more efficient than):\n  \u003cpre\u003e {@code\n getFirstQueuedThread() !\u003d Thread.currentThread() \u0026\u0026\n hasQueuedThreads()}\u003c/pre\u003e\n\n \u003cp\u003eNote that because cancellations due to interrupts and\n timeouts may occur at any time, a {@code true} return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned {@code false},\n due to the queue being empty.\n\n \u003cp\u003eThis method is designed to be used by a fair synchronizer to\n avoid \u003ca href\u003d\"AbstractQueuedSynchronizer#barging\"\u003ebarging\u003c/a\u003e.\n Such a synchronizer\u0027s {@link #tryAcquire} method should return\n {@code false}, and its {@link #tryAcquireShared} method should\n return a negative value, if this method returns {@code true}\n (unless this is a reentrant acquire).  For example, the {@code\n tryAcquire} method for a fair, reentrant, exclusive mode\n synchronizer might look like this:\n\n  \u003cpre\u003e {@code\n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueueLength","comment":"Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization\n control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueuedThreads","comment":"Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExclusiveQueuedThreads","comment":"Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to an exclusive acquire.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSharedQueuedThreads","comment":"Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to a shared acquire.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code \"State \u003d\"}\n followed by the current value of {@link #getState}, and either\n {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"owns","comment":"Queries whether the given ConditionObject\n uses this synchronizer as its lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedSynchronizer.ConditionObject)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasWaiters","comment":"Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a {@code true} return\n does not guarantee that a future {@code signal} will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedSynchronizer.ConditionObject)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWaitQueueLength","comment":"Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring of the\n system state, not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedSynchronizer.ConditionObject)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWaitingThreads","comment":"Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)","flatSignature":"(AbstractQueuedSynchronizer.ConditionObject)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}