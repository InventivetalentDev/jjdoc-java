{"name":"ReentrantReadWriteLock","comment":"An implementation of {@link ReadWriteLock} supporting similar\n semantics to {@link ReentrantLock}.\n \u003cp\u003eThis class has the following properties:\n\n \u003cul\u003e\n \u003cli\u003e\u003cb\u003eAcquisition order\u003c/b\u003e\n\n \u003cp\u003eThis class does not impose a reader or writer preference\n ordering for lock access.  However, it does support an optional\n \u003cem\u003efairness\u003c/em\u003e policy.\n\n \u003cdl\u003e\n \u003cdt\u003e\u003cb\u003e\u003ci\u003eNon-fair mode (default)\u003c/i\u003e\u003c/b\u003e\n \u003cdd\u003eWhen constructed as non-fair (the default), the order of entry\n to the read and write lock is unspecified, subject to reentrancy\n constraints.  A nonfair lock that is continuously contended may\n indefinitely postpone one or more reader or writer threads, but\n will normally have higher throughput than a fair lock.\n\n \u003cdt\u003e\u003cb\u003e\u003ci\u003eFair mode\u003c/i\u003e\u003c/b\u003e\n \u003cdd\u003eWhen constructed as fair, threads contend for entry using an\n approximately arrival-order policy. When the currently held lock\n is released, either the longest-waiting single writer thread will\n be assigned the write lock, or if there is a group of reader threads\n waiting longer than all waiting writer threads, that group will be\n assigned the read lock.\n\n \u003cp\u003eA thread that tries to acquire a fair read lock (non-reentrantly)\n will block if either the write lock is held, or there is a waiting\n writer thread. The thread will not acquire the read lock until\n after the oldest currently waiting writer thread has acquired and\n released the write lock. Of course, if a waiting writer abandons\n its wait, leaving one or more reader threads as the longest waiters\n in the queue with the write lock free, then those readers will be\n assigned the read lock.\n\n \u003cp\u003eA thread that tries to acquire a fair write lock (non-reentrantly)\n will block unless both the read lock and write lock are free (which\n implies there are no waiting threads).  (Note that the non-blocking\n {@link ReadLock#tryLock()} and {@link WriteLock#tryLock()} methods\n do not honor this fair setting and will immediately acquire the lock\n if it is possible, regardless of waiting threads.)\n \u003cp\u003e\n \u003c/dl\u003e\n\n \u003cli\u003e\u003cb\u003eReentrancy\u003c/b\u003e\n\n \u003cp\u003eThis lock allows both readers and writers to reacquire read or\n write locks in the style of a {@link ReentrantLock}. Non-reentrant\n readers are not allowed until all write locks held by the writing\n thread have been released.\n\n \u003cp\u003eAdditionally, a writer can acquire the read lock, but not\n vice-versa.  Among other applications, reentrancy can be useful\n when write locks are held during calls or callbacks to methods that\n perform reads under read locks.  If a reader tries to acquire the\n write lock it will never succeed.\n\n \u003cli\u003e\u003cb\u003eLock downgrading\u003c/b\u003e\n \u003cp\u003eReentrancy also allows downgrading from the write lock to a read lock,\n by acquiring the write lock, then the read lock and then releasing the\n write lock. However, upgrading from a read lock to the write lock is\n \u003cb\u003enot\u003c/b\u003e possible.\n\n \u003cli\u003e\u003cb\u003eInterruption of lock acquisition\u003c/b\u003e\n \u003cp\u003eThe read lock and write lock both support interruption during lock\n acquisition.\n\n \u003cli\u003e\u003cb\u003e{@link Condition} support\u003c/b\u003e\n \u003cp\u003eThe write lock provides a {@link Condition} implementation that\n behaves in the same way, with respect to the write lock, as the\n {@link Condition} implementation provided by\n {@link ReentrantLock#newCondition} does for {@link ReentrantLock}.\n This {@link Condition} can, of course, only be used with the write lock.\n\n \u003cp\u003eThe read lock does not support a {@link Condition} and\n {@code readLock().newCondition()} throws\n {@code UnsupportedOperationException}.\n\n \u003cli\u003e\u003cb\u003eInstrumentation\u003c/b\u003e\n \u003cp\u003eThis class supports methods to determine whether locks\n are held or contended. These methods are designed for monitoring\n system state, not for synchronization control.\n \u003c/ul\u003e\n\n \u003cp\u003eSerialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized.\n\n \u003cp\u003e\u003cb\u003eSample usages\u003c/b\u003e. Here is a code sketch showing how to perform\n lock downgrading after updating a cache (exception handling is\n particularly tricky when handling multiple locks in a non-nested\n fashion):\n\n \u003cpre\u003e {@code\n class CachedData {\n   Object data;\n   volatile boolean cacheValid;\n   final ReentrantReadWriteLock rwl \u003d new ReentrantReadWriteLock();\n\n   void processCachedData() {\n     rwl.readLock().lock();\n     if (!cacheValid) {\n       // Must release read lock before acquiring write lock\n       rwl.readLock().unlock();\n       rwl.writeLock().lock();\n       try {\n         // Recheck state because another thread might have\n         // acquired write lock and changed state before we did.\n         if (!cacheValid) {\n           data \u003d ...\n           cacheValid \u003d true;\n         }\n         // Downgrade by acquiring read lock before releasing write lock\n         rwl.readLock().lock();\n       } finally {\n         rwl.writeLock().unlock(); // Unlock write, still hold read\n       }\n     }\n\n     try {\n       use(data);\n     } finally {\n       rwl.readLock().unlock();\n     }\n   }\n }}\u003c/pre\u003e\n\n ReentrantReadWriteLocks can be used to improve concurrency in some\n uses of some kinds of Collections. This is typically worthwhile\n only when the collections are expected to be large, accessed by\n more reader threads than writer threads, and entail operations with\n overhead that outweighs synchronization overhead. For example, here\n is a class using a TreeMap that is expected to be large and\n concurrently accessed.\n\n  \u003cpre\u003e {@code\n class RWDictionary {\n   private final Map\u003cString, Data\u003e m \u003d new TreeMap\u003cString, Data\u003e();\n   private final ReentrantReadWriteLock rwl \u003d new ReentrantReadWriteLock();\n   private final Lock r \u003d rwl.readLock();\n   private final Lock w \u003d rwl.writeLock();\n\n   public Data get(String key) {\n     r.lock();\n     try { return m.get(key); }\n     finally { r.unlock(); }\n   }\n   public String[] allKeys() {\n     r.lock();\n     try { return m.keySet().toArray(); }\n     finally { r.unlock(); }\n   }\n   public Data put(String key, Data value) {\n     w.lock();\n     try { return m.put(key, value); }\n     finally { w.unlock(); }\n   }\n   public void clear() {\n     w.lock();\n     try { m.clear(); }\n     finally { w.unlock(); }\n   }\n }}\u003c/pre\u003e\n\n \u003ch3\u003eImplementation Notes\u003c/h3\u003e\n\n \u003cp\u003eThis lock supports a maximum of 65535 recursive write locks\n and 65535 read locks. Attempts to exceed these limits result in\n {@link Error} throws from locking methods.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ReentrantReadWriteLock","qualifiedName":"java.util.concurrent.locks.ReentrantReadWriteLock","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":["java.util.concurrent.locks.ReadWriteLock","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":["java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock"],"isInnerClass":false,"constructors":[{"name":"ReentrantReadWriteLock","comment":"Creates a new {@code ReentrantReadWriteLock} with\n default (nonfair) ordering properties.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ReentrantReadWriteLock","comment":"Creates a new {@code ReentrantReadWriteLock} with\n the given fairness policy.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","parameters":[{"name":"fair","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"writeLock","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"WriteLock","qualifiedName":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"readLock","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ReadLock","qualifiedName":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isFair","comment":"Returns {@code true} if this lock has fairness set true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getReadLockCount","comment":"Queries the number of read locks held for this lock. This\n method is designed for use in monitoring system state, not for\n synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isWriteLocked","comment":"Queries if the write lock is held by any thread. This method is\n designed for use in monitoring system state, not for\n synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isWriteLockedByCurrentThread","comment":"Queries if the write lock is held by the current thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWriteHoldCount","comment":"Queries the number of reentrant write holds on this lock by the\n current thread.  A writer thread has a hold on a lock for\n each lock action that is not matched by an unlock action.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getReadHoldCount","comment":"Queries the number of reentrant read holds on this lock by the\n current thread.  A reader thread has a hold on a lock for\n each lock action that is not matched by an unlock action.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasQueuedThreads","comment":"Queries whether any threads are waiting to acquire the read or\n write lock. Note that because cancellations may occur at any\n time, a {@code true} return does not guarantee that any other\n thread will ever acquire a lock.  This method is designed\n primarily for use in monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasQueuedThread","comment":"Queries whether the given thread is waiting to acquire either\n the read or write lock. Note that because cancellations may\n occur at any time, a {@code true} return does not guarantee\n that this thread will ever acquire a lock.  This method is\n designed primarily for use in monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"thread","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getQueueLength","comment":"Returns an estimate of the number of threads waiting to acquire\n either the read or write lock.  The value is only an estimate\n because the number of threads may change dynamically while this\n method traverses internal data structures.  This method is\n designed for use in monitoring of the system state, not for\n synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasWaiters","comment":"Queries whether any threads are waiting on the given condition\n associated with the write lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.Condition)","flatSignature":"(Condition)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWaitQueueLength","comment":"Returns an estimate of the number of threads waiting on the\n given condition associated with the write lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.locks.Condition)","flatSignature":"(Condition)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"condition","type":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code \"Write locks \u003d\"}\n followed by the number of reentrantly held write locks, and the\n String {@code \"Read locks \u003d\"} followed by the number of held\n read locks.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}