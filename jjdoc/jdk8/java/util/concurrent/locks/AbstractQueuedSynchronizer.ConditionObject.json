{"name":"AbstractQueuedSynchronizer.ConditionObject","comment":"Condition implementation for a {@link\n AbstractQueuedSynchronizer} serving as the basis of a {@link\n Lock} implementation.\n\n \u003cp\u003eMethod documentation for this class describes mechanics,\n not behavioral specifications from the point of view of Lock\n and Condition users. Exported versions of this class will in\n general need to be accompanied by documentation describing\n condition semantics that rely on those of the associated\n {@code AbstractQueuedSynchronizer}.\n\n \u003cp\u003eThis class is Serializable, but all fields are transient,\n so deserialized conditions have no waiters.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ConditionObject","qualifiedName":"java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":["java.util.concurrent.locks.Condition","java.io.Serializable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":true,"constructors":[{"name":"ConditionObject","comment":"Creates a new {@code ConditionObject} instance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"signal","comment":"Moves the longest-waiting thread, if one exists, from the\n wait queue for this condition to the wait queue for the\n owning lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"signalAll","comment":"Moves all threads from the wait queue for this condition to\n the wait queue for the owning lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"awaitUninterruptibly","comment":"Implements uninterruptible condition wait.\n \u003col\u003e\n \u003cli\u003e Save lock state returned by {@link #getState}.\n \u003cli\u003e Invoke {@link #release} with saved state as argument,\n      throwing IllegalMonitorStateException if it fails.\n \u003cli\u003e Block until signalled.\n \u003cli\u003e Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n \u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"await","comment":"Implements interruptible condition wait.\n \u003col\u003e\n \u003cli\u003e If current thread is interrupted, throw InterruptedException.\n \u003cli\u003e Save lock state returned by {@link #getState}.\n \u003cli\u003e Invoke {@link #release} with saved state as argument,\n      throwing IllegalMonitorStateException if it fails.\n \u003cli\u003e Block until signalled or interrupted.\n \u003cli\u003e Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n \u003cli\u003e If interrupted while blocked in step 4, throw InterruptedException.\n \u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"awaitNanos","comment":"Implements timed condition wait.\n \u003col\u003e\n \u003cli\u003e If current thread is interrupted, throw InterruptedException.\n \u003cli\u003e Save lock state returned by {@link #getState}.\n \u003cli\u003e Invoke {@link #release} with saved state as argument,\n      throwing IllegalMonitorStateException if it fails.\n \u003cli\u003e Block until signalled, interrupted, or timed out.\n \u003cli\u003e Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n \u003cli\u003e If interrupted while blocked in step 4, throw InterruptedException.\n \u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nanosTimeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"awaitUntil","comment":"Implements absolute timed condition wait.\n \u003col\u003e\n \u003cli\u003e If current thread is interrupted, throw InterruptedException.\n \u003cli\u003e Save lock state returned by {@link #getState}.\n \u003cli\u003e Invoke {@link #release} with saved state as argument,\n      throwing IllegalMonitorStateException if it fails.\n \u003cli\u003e Block until signalled, interrupted, or timed out.\n \u003cli\u003e Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n \u003cli\u003e If interrupted while blocked in step 4, throw InterruptedException.\n \u003cli\u003e If timed out while blocked in step 4, return false, else true.\n \u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"deadline","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"await","comment":"Implements timed condition wait.\n \u003col\u003e\n \u003cli\u003e If current thread is interrupted, throw InterruptedException.\n \u003cli\u003e Save lock state returned by {@link #getState}.\n \u003cli\u003e Invoke {@link #release} with saved state as argument,\n      throwing IllegalMonitorStateException if it fails.\n \u003cli\u003e Block until signalled, interrupted, or timed out.\n \u003cli\u003e Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n \u003cli\u003e If interrupted while blocked in step 4, throw InterruptedException.\n \u003cli\u003e If timed out while blocked in step 4, return false, else true.\n \u003c/ol\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"time","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}