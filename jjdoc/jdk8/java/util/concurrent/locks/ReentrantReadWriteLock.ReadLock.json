{"name":"ReentrantReadWriteLock.ReadLock","comment":"The lock returned by method {@link ReentrantReadWriteLock#readLock}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ReadLock","qualifiedName":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","dimension":"","elementType":{},"package":"java.util.concurrent.locks","superclass":"java.lang.Object","interfaces":["java.util.concurrent.locks.Lock","java.io.Serializable"],"isAbstract":false,"isStatic":true,"innerClasses":[],"isInnerClass":true,"constructors":[],"fields":[],"methods":[{"name":"lock","comment":"Acquires the read lock.\n\n \u003cp\u003eAcquires the read lock if the write lock is not held by\n another thread and returns immediately.\n\n \u003cp\u003eIf the write lock is held by another thread then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until the read lock has been acquired.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lockInterruptibly","comment":"Acquires the read lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eAcquires the read lock if the write lock is not held\n by another thread and returns immediately.\n\n \u003cp\u003eIf the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eThe read lock is acquired by the current thread; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n\n \u003c/ul\u003e\n\n \u003cp\u003eIf the current thread:\n\n \u003cul\u003e\n\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,\n\n \u003c/ul\u003e\n\n then {@link InterruptedException} is thrown and the current\n thread\u0027s interrupted status is cleared.\n\n \u003cp\u003eIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the read lock only if the write lock is not held by\n another thread at the time of invocation.\n\n \u003cp\u003eAcquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. Even when this lock has been set to use a\n fair ordering policy, a call to {@code tryLock()}\n \u003cem\u003ewill\u003c/em\u003e immediately acquire the read lock if it is\n available, whether or not other threads are currently\n waiting for the read lock.  This \u0026quot;barging\u0026quot; behavior\n can be useful in certain circumstances, even though it\n breaks fairness. If you want to honor the fairness setting\n for this lock, then use {@link #tryLock(long, TimeUnit)\n tryLock(0, TimeUnit.SECONDS) } which is almost equivalent\n (it also detects interruption).\n\n \u003cp\u003eIf the write lock is held by another thread then\n this method will return immediately with the value\n {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"tryLock","comment":"Acquires the read lock if the write lock is not held by\n another thread within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt\n interrupted}.\n\n \u003cp\u003eAcquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. If this lock has been set to use a fair\n ordering policy then an available lock \u003cem\u003ewill not\u003c/em\u003e be\n acquired if any other threads are waiting for the\n lock. This is in contrast to the {@link #tryLock()}\n method. If you want a timed {@code tryLock} that does\n permit barging on a fair lock then combine the timed and\n un-timed forms together:\n\n  \u003cpre\u003e {@code\n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }}\u003c/pre\u003e\n\n \u003cp\u003eIf the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n \u003cul\u003e\n\n \u003cli\u003eThe read lock is acquired by the current thread; or\n\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n \u003cli\u003eThe specified waiting time elapses.\n\n \u003c/ul\u003e\n\n \u003cp\u003eIf the read lock is acquired then the value {@code true} is\n returned.\n\n \u003cp\u003eIf the current thread:\n\n \u003cul\u003e\n\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,\n\n \u003c/ul\u003e then {@link InterruptedException} is thrown and the\n current thread\u0027s interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n \u003cp\u003eIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unlock","comment":"Attempts to release this lock.\n\n \u003cp\u003eIf the number of readers is now zero then the lock\n is made available for write lock attempts.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newCondition","comment":"Throws {@code UnsupportedOperationException} because\n {@code ReadLocks} do not support conditions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Condition","qualifiedName":"java.util.concurrent.locks.Condition","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code \"Read locks \u003d\"}\n followed by the number of held read locks.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}