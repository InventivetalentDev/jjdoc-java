{"name":"ForkJoinPool","comment":"An {@link ExecutorService} for running {@link ForkJoinTask}s.\n A {@code ForkJoinPool} provides the entry point for submissions\n from non-{@code ForkJoinTask} clients, as well as management and\n monitoring operations.\n\n \u003cp\u003eA {@code ForkJoinPool} differs from other kinds of {@link\n ExecutorService} mainly by virtue of employing\n \u003cem\u003ework-stealing\u003c/em\u003e: all threads in the pool attempt to find and\n execute tasks submitted to the pool and/or created by other active\n tasks (eventually blocking waiting for work if none exist). This\n enables efficient processing when most tasks spawn other subtasks\n (as do most {@code ForkJoinTask}s), as well as when many small\n tasks are submitted to the pool from external clients.  Especially\n when setting \u003cem\u003easyncMode\u003c/em\u003e to true in constructors, {@code\n ForkJoinPool}s may also be appropriate for use with event-style\n tasks that are never joined.\n\n \u003cp\u003eA static {@link #commonPool()} is available and appropriate for\n most applications. The common pool is used by any ForkJoinTask that\n is not explicitly submitted to a specified pool. Using the common\n pool normally reduces resource usage (its threads are slowly\n reclaimed during periods of non-use, and reinstated upon subsequent\n use).\n\n \u003cp\u003eFor applications that require separate or custom pools, a {@code\n ForkJoinPool} may be constructed with a given target parallelism\n level; by default, equal to the number of available processors.\n The pool attempts to maintain enough active (or available) threads\n by dynamically adding, suspending, or resuming internal worker\n threads, even if some tasks are stalled waiting to join others.\n However, no such adjustments are guaranteed in the face of blocked\n I/O or other unmanaged synchronization. The nested {@link\n ManagedBlocker} interface enables extension of the kinds of\n synchronization accommodated.\n\n \u003cp\u003eIn addition to execution and lifecycle control methods, this\n class provides status check methods (for example\n {@link #getStealCount}) that are intended to aid in developing,\n tuning, and monitoring fork/join applications. Also, method\n {@link #toString} returns indications of pool state in a\n convenient form for informal monitoring.\n\n \u003cp\u003eAs is the case with other ExecutorServices, there are three\n main task execution methods summarized in the following table.\n These are designed to be used primarily by clients not already\n engaged in fork/join computations in the current pool.  The main\n forms of these methods accept instances of {@code ForkJoinTask},\n but overloaded forms also allow mixed execution of plain {@code\n Runnable}- or {@code Callable}- based activities as well.  However,\n tasks that are already executing in a pool should normally instead\n use the within-computation forms listed in the table unless using\n async event-style tasks that are not usually joined, in which case\n there is little difference among choice of methods.\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eSummary of task execution methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003eCall from non-fork/join clients\u003c/b\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e \u003cb\u003eCall from within fork/join computations\u003c/b\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e \u003cb\u003eArrange async execution\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e {@link #execute(ForkJoinTask)}\u003c/td\u003e\n    \u003ctd\u003e {@link ForkJoinTask#fork}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e \u003cb\u003eAwait and obtain result\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e {@link #invoke(ForkJoinTask)}\u003c/td\u003e\n    \u003ctd\u003e {@link ForkJoinTask#invoke}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e \u003cb\u003eArrange exec and obtain Future\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e {@link #submit(ForkJoinTask)}\u003c/td\u003e\n    \u003ctd\u003e {@link ForkJoinTask#fork} (ForkJoinTasks \u003cem\u003eare\u003c/em\u003e Futures)\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eThe common pool is by default constructed with default\n parameters, but these may be controlled by setting three\n {@linkplain System#getProperty system properties}:\n \u003cul\u003e\n \u003cli\u003e{@code java.util.concurrent.ForkJoinPool.common.parallelism}\n - the parallelism level, a non-negative integer\n \u003cli\u003e{@code java.util.concurrent.ForkJoinPool.common.threadFactory}\n - the class name of a {@link ForkJoinWorkerThreadFactory}\n \u003cli\u003e{@code java.util.concurrent.ForkJoinPool.common.exceptionHandler}\n - the class name of a {@link UncaughtExceptionHandler}\n \u003c/ul\u003e\n If a {@link SecurityManager} is present and no factory is\n specified, then the default pool uses a factory supplying\n threads that have no {@link Permissions} enabled.\n The system class loader is used to load these classes.\n Upon any error in establishing these settings, default parameters\n are used. It is possible to disable or limit the use of threads in\n the common pool by setting the parallelism property to zero, and/or\n using a factory that may return {@code null}. However doing so may\n cause unjoined tasks to never be executed.\n\n \u003cp\u003e\u003cb\u003eImplementation notes\u003c/b\u003e: This implementation restricts the\n maximum number of running threads to 32767. Attempts to create\n pools with greater than the maximum number result in\n {@code IllegalArgumentException}.\n\n \u003cp\u003eThis implementation rejects submitted tasks (that is, by throwing\n {@link RejectedExecutionException}) only when the pool is shut down\n or internal resources have been exhausted.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ForkJoinPool","qualifiedName":"java.util.concurrent.ForkJoinPool","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.concurrent.AbstractExecutorService","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.7","innerClasses":["java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory","java.util.concurrent.ForkJoinPool.ManagedBlocker"],"isInnerClass":false,"constructors":[{"name":"ForkJoinPool","comment":"Creates a {@code ForkJoinPool} with parallelism equal to {@link\n java.lang.Runtime#availableProcessors}, using the {@linkplain\n #defaultForkJoinWorkerThreadFactory default thread factory},\n no UncaughtExceptionHandler, and non-async LIFO processing mode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ForkJoinPool","comment":"Creates a {@code ForkJoinPool} with the indicated parallelism\n level, the {@linkplain\n #defaultForkJoinWorkerThreadFactory default thread factory},\n no UncaughtExceptionHandler, and non-async LIFO processing mode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"parallelism","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ForkJoinPool","comment":"Creates a {@code ForkJoinPool} with the given parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory, java.lang.Thread.UncaughtExceptionHandler, boolean)","flatSignature":"(int, ForkJoinPool.ForkJoinWorkerThreadFactory, Thread.UncaughtExceptionHandler, boolean)","parameters":[{"name":"parallelism","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"factory","type":{"isPrimitive":false,"simpleName":"ForkJoinWorkerThreadFactory","qualifiedName":"java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory","dimension":"","elementType":{}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"UncaughtExceptionHandler","qualifiedName":"java.lang.Thread.UncaughtExceptionHandler","dimension":"","elementType":{}}},{"name":"asyncMode","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"defaultForkJoinWorkerThreadFactory","comment":"Creates a new ForkJoinWorkerThread. This factory is used unless\n overridden in ForkJoinPool constructors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"ForkJoinWorkerThreadFactory","qualifiedName":"java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"commonPool","comment":"Returns the common pool instance. This pool is statically\n constructed; its run state is unaffected by attempts to {@link\n #shutdown} or {@link #shutdownNow}. However this pool and any\n ongoing processing are automatically terminated upon program\n {@link System#exit}.  Any program that relies on asynchronous\n task processing to complete before program termination should\n invoke {@code commonPool().}{@link #awaitQuiescence awaitQuiescence},\n before exit.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ForkJoinPool","qualifiedName":"java.util.concurrent.ForkJoinPool","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"invoke","comment":"Performs the given task, returning its result upon completion.\n If the computation encounters an unchecked Exception or Error,\n it is rethrown as the outcome of this invocation.  Rethrown\n exceptions behave in the same way as regular exceptions, but,\n when possible, contain stack traces (as displayed for example\n using {@code ex.printStackTrace()}) of both the current thread\n as well as the thread actually encountering the exception;\n minimally only the latter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ForkJoinTask\u003cT\u003e)","flatSignature":"(ForkJoinTask\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"execute","comment":"Arranges for (asynchronous) execution of the given task.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ForkJoinTask\u003c?\u003e)","flatSignature":"(ForkJoinTask\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"execute","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"submit","comment":"Submits a ForkJoinTask for execution.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ForkJoinTask\u003cT\u003e)","flatSignature":"(ForkJoinTask\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cT\u003e)","flatSignature":"(Callable\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, T)","flatSignature":"(Runnable, T)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"ForkJoinTask","qualifiedName":"java.util.concurrent.ForkJoinTask","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"invokeAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends java.util.concurrent.Callable\u003cT\u003e\u003e)","flatSignature":"(Collection\u003c? extends Callable\u003cT\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"getFactory","comment":"Returns the factory used for constructing new workers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ForkJoinWorkerThreadFactory","qualifiedName":"java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUncaughtExceptionHandler","comment":"Returns the handler for internal worker threads that terminate\n due to unrecoverable errors encountered while executing tasks.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"UncaughtExceptionHandler","qualifiedName":"java.lang.Thread.UncaughtExceptionHandler","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParallelism","comment":"Returns the targeted parallelism level of this pool.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCommonPoolParallelism","comment":"Returns the targeted parallelism level of the common pool.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getPoolSize","comment":"Returns the number of worker threads that have started but not\n yet terminated.  The result returned by this method may differ\n from {@link #getParallelism} when threads are created to\n maintain parallelism when others are cooperatively blocked.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAsyncMode","comment":"Returns {@code true} if this pool uses local first-in-first-out\n scheduling mode for forked tasks that are never joined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRunningThreadCount","comment":"Returns an estimate of the number of worker threads that are\n not blocked waiting to join tasks or for other managed\n synchronization. This method may overestimate the\n number of running threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getActiveThreadCount","comment":"Returns an estimate of the number of threads that are currently\n stealing or executing tasks. This method may overestimate the\n number of active threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isQuiescent","comment":"Returns {@code true} if all worker threads are currently idle.\n An idle worker is one that cannot obtain a task to execute\n because none are available to steal from other threads, and\n there are no pending submissions to the pool. This method is\n conservative; it might not return {@code true} immediately upon\n idleness of all threads, but will eventually become true if\n threads remain inactive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getStealCount","comment":"Returns an estimate of the total number of tasks stolen from\n one thread\u0027s work queue by another. The reported value\n underestimates the actual total number of steals when the pool\n is not quiescent. This value may be useful for monitoring and\n tuning fork/join programs: in general, steal counts should be\n high enough to keep threads busy, but low enough to avoid\n overhead and contention across threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueuedTaskCount","comment":"Returns an estimate of the total number of tasks currently held\n in queues by worker threads (but not including tasks submitted\n to the pool that have not begun executing). This value is only\n an approximation, obtained by iterating across all threads in\n the pool. This method may be useful for tuning task\n granularities.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueuedSubmissionCount","comment":"Returns an estimate of the number of tasks submitted to this\n pool that have not yet begun executing.  This method may take\n time proportional to the number of submissions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasQueuedSubmissions","comment":"Returns {@code true} if there are any tasks submitted to this\n pool that have not yet begun executing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string identifying this pool, as well as its state,\n including indications of run state, parallelism level, and\n worker and task counts.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdown","comment":"Possibly initiates an orderly shutdown in which previously\n submitted tasks are executed, but no new tasks will be\n accepted. Invocation has no effect on execution state if this\n is the {@link #commonPool()}, and no additional effect if\n already shut down.  Tasks that are in the process of being\n submitted concurrently during the course of this method may or\n may not be rejected.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownNow","comment":"Possibly attempts to cancel and/or stop all tasks, and reject\n all subsequently submitted tasks.  Invocation has no effect on\n execution state if this is the {@link #commonPool()}, and no\n additional effect if already shut down. Otherwise, tasks that\n are in the process of being submitted or executed concurrently\n during the course of this method may or may not be\n rejected. This method cancels both existing and unexecuted\n tasks, in order to permit termination in the presence of task\n dependencies. So the method always returns an empty list\n (unlike the case for some other Executors).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isTerminated","comment":"Returns {@code true} if all tasks have completed following shut down.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isTerminating","comment":"Returns {@code true} if the process of termination has\n commenced but not yet completed.  This method may be useful for\n debugging. A return of {@code true} reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, or are waiting for I/O,\n causing this executor not to properly terminate. (See the\n advisory notes for class {@link ForkJoinTask} stating that\n tasks should not normally entail blocking operations.  But if\n they do, they must abort them on interrupt.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isShutdown","comment":"Returns {@code true} if this pool has been shut down.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"awaitTermination","comment":"Blocks until all tasks have completed execution after a\n shutdown request, or the timeout occurs, or the current thread\n is interrupted, whichever happens first. Because the {@link\n #commonPool()} never terminates until program shutdown, when\n applied to the common pool, this method is equivalent to {@link\n #awaitQuiescence(long, TimeUnit)} but always returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"awaitQuiescence","comment":"If called by a ForkJoinTask operating in this pool, equivalent\n in effect to {@link ForkJoinTask#helpQuiesce}. Otherwise,\n waits and/or attempts to assist performing tasks until this\n pool {@link #isQuiescent} or the indicated timeout elapses.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"managedBlock","comment":"Runs the given possibly blocking task.  When {@linkplain\n ForkJoinTask#inForkJoinPool() running in a ForkJoinPool}, this\n method possibly arranges for a spare thread to be activated if\n necessary to ensure sufficient parallelism while the current\n thread is blocked in {@link ManagedBlocker#block blocker.block()}.\n\n \u003cp\u003eThis method repeatedly calls {@code blocker.isReleasable()} and\n {@code blocker.block()} until either method returns {@code true}.\n Every call to {@code blocker.block()} is preceded by a call to\n {@code blocker.isReleasable()} that returned {@code false}.\n\n \u003cp\u003eIf not running in a ForkJoinPool, this method is\n behaviorally equivalent to\n  \u003cpre\u003e {@code\n while (!blocker.isReleasable())\n   if (blocker.block())\n     break;}\u003c/pre\u003e\n\n If running in a ForkJoinPool, the pool may first be expanded to\n ensure sufficient parallelism available during the call to\n {@code blocker.block()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.ForkJoinPool.ManagedBlocker)","flatSignature":"(ForkJoinPool.ManagedBlocker)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"blocker","type":{"isPrimitive":false,"simpleName":"ManagedBlocker","qualifiedName":"java.util.concurrent.ForkJoinPool.ManagedBlocker","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}