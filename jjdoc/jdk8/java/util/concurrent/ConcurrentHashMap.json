{"name":"ConcurrentHashMap","comment":"A hash table supporting full concurrency of retrievals and\n high expected concurrency for updates. This class obeys the\n same functional specification as {@link java.util.Hashtable}, and\n includes versions of methods corresponding to each method of\n {@code Hashtable}. However, even though all operations are\n thread-safe, retrieval operations do \u003cem\u003enot\u003c/em\u003e entail locking,\n and there is \u003cem\u003enot\u003c/em\u003e any support for locking the entire table\n in a way that prevents all access.  This class is fully\n interoperable with {@code Hashtable} in programs that rely on its\n thread safety but not on its synchronization details.\n\n \u003cp\u003eRetrieval operations (including {@code get}) generally do not\n block, so may overlap with update operations (including {@code put}\n and {@code remove}). Retrievals reflect the results of the most\n recently \u003cem\u003ecompleted\u003c/em\u003e update operations holding upon their\n onset. (More formally, an update operation for a given key bears a\n \u003cem\u003ehappens-before\u003c/em\u003e relation with any (non-null) retrieval for\n that key reporting the updated value.)  For aggregate operations\n such as {@code putAll} and {@code clear}, concurrent retrievals may\n reflect insertion or removal of only some entries.  Similarly,\n Iterators, Spliterators and Enumerations return elements reflecting the\n state of the hash table at some point at or since the creation of the\n iterator/enumeration.  They do \u003cem\u003enot\u003c/em\u003e throw {@link\n java.util.ConcurrentModificationException ConcurrentModificationException}.\n However, iterators are designed to be used by only one thread at a time.\n Bear in mind that the results of aggregate status methods including\n {@code size}, {@code isEmpty}, and {@code containsValue} are typically\n useful only when a map is not undergoing concurrent updates in other threads.\n Otherwise the results of these methods reflect transient states\n that may be adequate for monitoring or estimation purposes, but not\n for program control.\n\n \u003cp\u003eThe table is dynamically expanded when there are too many\n collisions (i.e., keys that have distinct hash codes but fall into\n the same slot modulo the table size), with the expected average\n effect of maintaining roughly two bins per mapping (corresponding\n to a 0.75 load factor threshold for resizing). There may be much\n variance around this average as mappings are added and removed, but\n overall, this maintains a commonly accepted time/space tradeoff for\n hash tables.  However, resizing this or any other kind of hash\n table may be a relatively slow operation. When possible, it is a\n good idea to provide a size estimate as an optional {@code\n initialCapacity} constructor argument. An additional optional\n {@code loadFactor} constructor argument provides a further means of\n customizing initial table capacity by specifying the table density\n to be used in calculating the amount of space to allocate for the\n given number of elements.  Also, for compatibility with previous\n versions of this class, constructors may optionally specify an\n expected {@code concurrencyLevel} as an additional hint for\n internal sizing.  Note that using many keys with exactly the same\n {@code hashCode()} is a sure way to slow down performance of any\n hash table. To ameliorate impact, when keys are {@link Comparable},\n this class may use comparison order among keys to help break ties.\n\n \u003cp\u003eA {@link Set} projection of a ConcurrentHashMap may be created\n (using {@link #newKeySet()} or {@link #newKeySet(int)}), or viewed\n (using {@link #keySet(Object)} when only keys are of interest, and the\n mapped values are (perhaps transiently) not used or all take the\n same mapping value.\n\n \u003cp\u003eA ConcurrentHashMap can be used as scalable frequency map (a\n form of histogram or multiset) by using {@link\n java.util.concurrent.atomic.LongAdder} values and initializing via\n {@link #computeIfAbsent computeIfAbsent}. For example, to add a count\n to a {@code ConcurrentHashMap\u003cString,LongAdder\u003e freqs}, you can use\n {@code freqs.computeIfAbsent(k -\u003e new LongAdder()).increment();}\n\n \u003cp\u003eThis class and its views and iterators implement all of the\n \u003cem\u003eoptional\u003c/em\u003e methods of the {@link Map} and {@link Iterator}\n interfaces.\n\n \u003cp\u003eLike {@link Hashtable} but unlike {@link HashMap}, this class\n does \u003cem\u003enot\u003c/em\u003e allow {@code null} to be used as a key or value.\n\n \u003cp\u003eConcurrentHashMaps support a set of sequential and parallel bulk\n operations that, unlike most {@link Stream} methods, are designed\n to be safely, and often sensibly, applied even with maps that are\n being concurrently updated by other threads; for example, when\n computing a snapshot summary of the values in a shared registry.\n There are three kinds of operation, each with four forms, accepting\n functions with Keys, Values, Entries, and (Key, Value) arguments\n and/or return values. Because the elements of a ConcurrentHashMap\n are not ordered in any particular way, and may be processed in\n different orders in different parallel executions, the correctness\n of supplied functions should not depend on any ordering, or on any\n other objects or values that may transiently change while\n computation is in progress; and except for forEach actions, should\n ideally be side-effect-free. Bulk operations on {@link java.util.Map.Entry}\n objects do not support method {@code setValue}.\n\n \u003cul\u003e\n \u003cli\u003e forEach: Perform a given action on each element.\n A variant form applies a given transformation on each element\n before performing the action.\u003c/li\u003e\n\n \u003cli\u003e search: Return the first available non-null result of\n applying a given function on each element; skipping further\n search when a result is found.\u003c/li\u003e\n\n \u003cli\u003e reduce: Accumulate each element.  The supplied reduction\n function cannot rely on ordering (more formally, it should be\n both associative and commutative).  There are five variants:\n\n \u003cul\u003e\n\n \u003cli\u003e Plain reductions. (There is not a form of this method for\n (key, value) function arguments since there is no corresponding\n return type.)\u003c/li\u003e\n\n \u003cli\u003e Mapped reductions that accumulate the results of a given\n function applied to each element.\u003c/li\u003e\n\n \u003cli\u003e Reductions to scalar doubles, longs, and ints, using a\n given basis value.\u003c/li\u003e\n\n \u003c/ul\u003e\n \u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eThese bulk operations accept a {@code parallelismThreshold}\n argument. Methods proceed sequentially if the current map size is\n estimated to be less than the given threshold. Using a value of\n {@code Long.MAX_VALUE} suppresses all parallelism.  Using a value\n of {@code 1} results in maximal parallelism by partitioning into\n enough subtasks to fully utilize the {@link\n ForkJoinPool#commonPool()} that is used for all parallel\n computations. Normally, you would initially choose one of these\n extreme values, and then measure performance of using in-between\n values that trade off overhead versus throughput.\n\n \u003cp\u003eThe concurrency properties of bulk operations follow\n from those of ConcurrentHashMap: Any non-null result returned\n from {@code get(key)} and related access methods bears a\n happens-before relation with the associated insertion or\n update.  The result of any bulk operation reflects the\n composition of these per-element relations (but is not\n necessarily atomic with respect to the map as a whole unless it\n is somehow known to be quiescent).  Conversely, because keys\n and values in the map are never null, null serves as a reliable\n atomic indicator of the current lack of any result.  To\n maintain this property, null serves as an implicit basis for\n all non-scalar reduction operations. For the double, long, and\n int versions, the basis should be one that, when combined with\n any other value, returns that other value (more formally, it\n should be the identity element for the reduction). Most common\n reductions have these properties; for example, computing a sum\n with basis 0 or a minimum with basis MAX_VALUE.\n\n \u003cp\u003eSearch and transformation functions provided as arguments\n should similarly return null to indicate the lack of any result\n (in which case it is not used). In the case of mapped\n reductions, this also enables transformations to serve as\n filters, returning null (or, in the case of primitive\n specializations, the identity basis) if the element should not\n be combined. You can create compound transformations and\n filterings by composing them yourself under this \"null means\n there is nothing there now\" rule before using them in search or\n reduce operations.\n\n \u003cp\u003eMethods accepting and/or returning Entry arguments maintain\n key-value associations. They may be useful for example when\n finding the key for the greatest value. Note that \"plain\" Entry\n arguments can be supplied using {@code new\n AbstractMap.SimpleEntry(k,v)}.\n\n \u003cp\u003eBulk operations may complete abruptly, throwing an\n exception encountered in the application of a supplied\n function. Bear in mind when handling such exceptions that other\n concurrently executing functions could also have thrown\n exceptions, or would have done so if the first exception had\n not occurred.\n\n \u003cp\u003eSpeedups for parallel compared to sequential forms are common\n but not guaranteed.  Parallel operations involving brief functions\n on small maps may execute more slowly than sequential forms if the\n underlying work to parallelize the computation is more expensive\n than the computation itself.  Similarly, parallelization may not\n lead to much actual parallelism if all processors are busy\n performing unrelated tasks.\n\n \u003cp\u003eAll arguments to all task methods must be non-null.\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ConcurrentHashMap","qualifiedName":"java.util.concurrent.ConcurrentHashMap","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.AbstractMap","interfaces":["java.util.concurrent.ConcurrentMap","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":["java.util.concurrent.ConcurrentHashMap.KeySetView"],"isInnerClass":false,"constructors":[{"name":"ConcurrentHashMap","comment":"Creates a new, empty map with the default initial table size (16).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ConcurrentHashMap","comment":"Creates a new, empty map with an initial table size\n accommodating the specified number of elements without the need\n to dynamically resize.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentHashMap","comment":"Creates a new map with the same mappings as the given map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentHashMap","comment":"Creates a new, empty map with an initial table size based on\n the given number of elements ({@code initialCapacity}) and\n initial table density ({@code loadFactor}).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float)","flatSignature":"(int, float)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentHashMap","comment":"Creates a new, empty map with an initial table size based on\n the given number of elements ({@code initialCapacity}), table\n density ({@code loadFactor}), and number of concurrently\n updating threads ({@code concurrencyLevel}).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float, int)","flatSignature":"(int, float, int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"concurrencyLevel","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"size","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n \u003cp\u003eMore formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key.equals(k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsKey","comment":"Tests if the specified object is a key in this table.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsValue","comment":"Returns {@code true} if this map maps one or more keys to the\n specified value. Note: This method may require a full traversal\n of the map, and is much slower than method {@code containsKey}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Maps the specified key to the specified value in this table.\n Neither the key nor the value can be null.\n\n \u003cp\u003eThe value can be retrieved by calling the {@code get} method\n with a key that is equal to the original key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"putAll","comment":"Copies all of the mappings from the specified map to this one.\n These mappings replace any mappings that this map had for any of the\n keys currently in the specified map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the key (and its corresponding value) from this map.\n This method does nothing if the key is not in the map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the mappings from this map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa. The set supports element\n removal, which removes the corresponding mapping from this map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or\n {@code addAll} operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThe view\u0027s {@code spliterator} reports {@link Spliterator#CONCURRENT},\n {@link Spliterator#DISTINCT}, and {@link Spliterator#NONNULL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"KeySetView","qualifiedName":"java.util.concurrent.ConcurrentHashMap.KeySetView","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"values","comment":"Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from this map, via the {@code Iterator.remove},\n {@code Collection.remove}, {@code removeAll},\n {@code retainAll}, and {@code clear} operations.  It does not\n support the {@code add} or {@code addAll} operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThe view\u0027s {@code spliterator} reports {@link Spliterator#CONCURRENT}\n and {@link Spliterator#NONNULL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"entrySet","comment":"Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThe view\u0027s {@code spliterator} reports {@link Spliterator#CONCURRENT},\n {@link Spliterator#DISTINCT}, and {@link Spliterator#NONNULL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this {@link Map}, i.e.,\n the sum of, for each key-value pair in the map,\n {@code key.hashCode() ^ value.hashCode()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this map.  The string\n representation consists of a list of key-value mappings (in no\n particular order) enclosed in braces (\"{@code {}}\").  Adjacent\n mappings are separated by the characters {@code \", \"} (comma\n and space).  Each key-value mapping is rendered as the key\n followed by an equals sign (\"{@code \u003d}\") followed by the\n associated value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this map for equality.\n Returns {@code true} if the given object is a map with the same\n mappings as this map.  This operation may return misleading\n results if either map is concurrently modified during execution\n of this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putIfAbsent","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object)","flatSignature":"(Object, Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replace","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, V)","flatSignature":"(K, V, V)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"oldValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"replace","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"getOrDefault","comment":"Returns the value to which the specified key is mapped, or the\n given default value if this map contains no mapping for the\n key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, V)","flatSignature":"(Object, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"defaultValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"function","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"computeIfAbsent","comment":"If the specified key is not already associated with a value,\n attempts to compute its value using the given mapping function\n and enters it into this map unless {@code null}.  The entire\n method invocation is performed atomically, so the function is\n applied at most once per key.  Some attempted update operations\n on this map by other threads may be blocked while computation\n is in progress, so the computation should be short and simple,\n and must not attempt to update any other mappings of this map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.Function\u003c? super K, ? extends V\u003e)","flatSignature":"(K, Function\u003c? super K, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"mappingFunction","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"computeIfPresent","comment":"If the value for the specified key is present, attempts to\n compute a new mapping given the key and its current mapped\n value.  The entire method invocation is performed atomically.\n Some attempted update operations on this map by other threads\n may be blocked while computation is in progress, so the\n computation should be short and simple, and must not attempt to\n update any other mappings of this map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(K, BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compute","comment":"Attempts to compute a mapping for the specified key and its\n current mapped value (or {@code null} if there is no current\n mapping). The entire method invocation is performed atomically.\n Some attempted update operations on this map by other threads\n may be blocked while computation is in progress, so the\n computation should be short and simple, and must not attempt to\n update any other mappings of this Map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(K, BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"merge","comment":"If the specified key is not already associated with a\n (non-null) value, associates it with the given value.\n Otherwise, replaces the value with the results of the given\n remapping function, or removes if {@code null}. The entire\n method invocation is performed atomically.  Some attempted\n update operations on this map by other threads may be blocked\n while computation is in progress, so the computation should be\n short and simple, and must not attempt to update any other\n mappings of this Map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, java.util.function.BiFunction\u003c? super V, ? super V, ? extends V\u003e)","flatSignature":"(K, V, BiFunction\u003c? super V, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contains","comment":"Legacy method testing if some key maps into the specified value\n in this table.  This method is identical in functionality to\n {@link #containsValue(Object)}, and exists solely to ensure\n full compatibility with class {@link java.util.Hashtable},\n which supported this method prior to introduction of the\n Java Collections framework.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"keys","comment":"Returns an enumeration of the keys in this table.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"elements","comment":"Returns an enumeration of the values in this table.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"mappingCount","comment":"Returns the number of mappings. This method should be used\n instead of {@link #size} because a ConcurrentHashMap may\n contain more mappings than can be represented as an int. The\n value returned is an estimate; the actual count may differ if\n there are concurrent insertions or removals.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newKeySet","comment":"Creates a new {@link Set} backed by a ConcurrentHashMap\n from the given type to {@code Boolean.TRUE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"KeySetView","qualifiedName":"java.util.concurrent.ConcurrentHashMap.KeySetView","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"K","bounds":[]}]},{"name":"newKeySet","comment":"Creates a new {@link Set} backed by a ConcurrentHashMap\n from the given type to {@code Boolean.TRUE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"KeySetView","qualifiedName":"java.util.concurrent.ConcurrentHashMap.KeySetView","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[{"name":"K","bounds":[]}]},{"name":"keySet","comment":"Returns a {@link Set} view of the keys in this map, using the\n given common mapped value for any additions (i.e., {@link\n Collection#add} and {@link Collection#addAll(Collection)}).\n This is of course only appropriate if it is acceptable to use\n the same value for all additions from this view.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(V)","flatSignature":"(V)","returnType":{"isPrimitive":false,"simpleName":"KeySetView","qualifiedName":"java.util.concurrent.ConcurrentHashMap.KeySetView","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"mappedValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"forEach","comment":"Performs the given action for each (key, value).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(long, BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEach","comment":"Performs the given action for each non-null transformation\n of each (key, value).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiFunction\u003c? super K, ? super V, ? extends U\u003e, java.util.function.Consumer\u003c? super U\u003e)","flatSignature":"(long, BiFunction\u003c? super K, ? super V, ? extends U\u003e, Consumer\u003c? super U\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"search","comment":"Returns a non-null result from applying the given search\n function on each (key, value), or null if none.  Upon\n success, further element processing is suppressed and the\n results of any other parallel invocations of the search\n function are ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiFunction\u003c? super K, ? super V, ? extends U\u003e)","flatSignature":"(long, BiFunction\u003c? super K, ? super V, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"searchFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduce","comment":"Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, or null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiFunction\u003c? super K, ? super V, ? extends U\u003e, java.util.function.BiFunction\u003c? super U, ? super U, ? extends U\u003e)","flatSignature":"(long, BiFunction\u003c? super K, ? super V, ? extends U\u003e, BiFunction\u003c? super U, ? super U, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceToDouble","comment":"Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToDoubleBiFunction\u003c? super K, ? super V\u003e, double, java.util.function.DoubleBinaryOperator)","flatSignature":"(long, ToDoubleBiFunction\u003c? super K, ? super V\u003e, double, DoubleBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToDoubleBiFunction","qualifiedName":"java.util.function.ToDoubleBiFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"DoubleBinaryOperator","qualifiedName":"java.util.function.DoubleBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceToLong","comment":"Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToLongBiFunction\u003c? super K, ? super V\u003e, long, java.util.function.LongBinaryOperator)","flatSignature":"(long, ToLongBiFunction\u003c? super K, ? super V\u003e, long, LongBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToLongBiFunction","qualifiedName":"java.util.function.ToLongBiFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"LongBinaryOperator","qualifiedName":"java.util.function.LongBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceToInt","comment":"Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToIntBiFunction\u003c? super K, ? super V\u003e, int, java.util.function.IntBinaryOperator)","flatSignature":"(long, ToIntBiFunction\u003c? super K, ? super V\u003e, int, IntBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToIntBiFunction","qualifiedName":"java.util.function.ToIntBiFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"IntBinaryOperator","qualifiedName":"java.util.function.IntBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachKey","comment":"Performs the given action for each key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Consumer\u003c? super K\u003e)","flatSignature":"(long, Consumer\u003c? super K\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachKey","comment":"Performs the given action for each non-null transformation\n of each key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003c? super K, ? extends U\u003e, java.util.function.Consumer\u003c? super U\u003e)","flatSignature":"(long, Function\u003c? super K, ? extends U\u003e, Consumer\u003c? super U\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"searchKeys","comment":"Returns a non-null result from applying the given search\n function on each key, or null if none. Upon success,\n further element processing is suppressed and the results of\n any other parallel invocations of the search function are\n ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003c? super K, ? extends U\u003e)","flatSignature":"(long, Function\u003c? super K, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"searchFunction","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceKeys","comment":"Returns the result of accumulating all keys using the given\n reducer to combine values, or null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiFunction\u003c? super K, ? super K, ? extends K\u003e)","flatSignature":"(long, BiFunction\u003c? super K, ? super K, ? extends K\u003e)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceKeys","comment":"Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, or\n null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003c? super K, ? extends U\u003e, java.util.function.BiFunction\u003c? super U, ? super U, ? extends U\u003e)","flatSignature":"(long, Function\u003c? super K, ? extends U\u003e, BiFunction\u003c? super U, ? super U, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceKeysToDouble","comment":"Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, and\n the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToDoubleFunction\u003c? super K\u003e, double, java.util.function.DoubleBinaryOperator)","flatSignature":"(long, ToDoubleFunction\u003c? super K\u003e, double, DoubleBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"DoubleBinaryOperator","qualifiedName":"java.util.function.DoubleBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceKeysToLong","comment":"Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, and\n the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToLongFunction\u003c? super K\u003e, long, java.util.function.LongBinaryOperator)","flatSignature":"(long, ToLongFunction\u003c? super K\u003e, long, LongBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"LongBinaryOperator","qualifiedName":"java.util.function.LongBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceKeysToInt","comment":"Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, and\n the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToIntFunction\u003c? super K\u003e, int, java.util.function.IntBinaryOperator)","flatSignature":"(long, ToIntFunction\u003c? super K\u003e, int, IntBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"IntBinaryOperator","qualifiedName":"java.util.function.IntBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachValue","comment":"Performs the given action for each value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Consumer\u003c? super V\u003e)","flatSignature":"(long, Consumer\u003c? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachValue","comment":"Performs the given action for each non-null transformation\n of each value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003c? super V, ? extends U\u003e, java.util.function.Consumer\u003c? super U\u003e)","flatSignature":"(long, Function\u003c? super V, ? extends U\u003e, Consumer\u003c? super U\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"searchValues","comment":"Returns a non-null result from applying the given search\n function on each value, or null if none.  Upon success,\n further element processing is suppressed and the results of\n any other parallel invocations of the search function are\n ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003c? super V, ? extends U\u003e)","flatSignature":"(long, Function\u003c? super V, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"searchFunction","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceValues","comment":"Returns the result of accumulating all values using the\n given reducer to combine values, or null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiFunction\u003c? super V, ? super V, ? extends V\u003e)","flatSignature":"(long, BiFunction\u003c? super V, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceValues","comment":"Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values, or\n null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003c? super V, ? extends U\u003e, java.util.function.BiFunction\u003c? super U, ? super U, ? extends U\u003e)","flatSignature":"(long, Function\u003c? super V, ? extends U\u003e, BiFunction\u003c? super U, ? super U, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceValuesToDouble","comment":"Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values,\n and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToDoubleFunction\u003c? super V\u003e, double, java.util.function.DoubleBinaryOperator)","flatSignature":"(long, ToDoubleFunction\u003c? super V\u003e, double, DoubleBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"DoubleBinaryOperator","qualifiedName":"java.util.function.DoubleBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceValuesToLong","comment":"Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values,\n and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToLongFunction\u003c? super V\u003e, long, java.util.function.LongBinaryOperator)","flatSignature":"(long, ToLongFunction\u003c? super V\u003e, long, LongBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"LongBinaryOperator","qualifiedName":"java.util.function.LongBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceValuesToInt","comment":"Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values,\n and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToIntFunction\u003c? super V\u003e, int, java.util.function.IntBinaryOperator)","flatSignature":"(long, ToIntFunction\u003c? super V\u003e, int, IntBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"IntBinaryOperator","qualifiedName":"java.util.function.IntBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachEntry","comment":"Performs the given action for each entry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Consumer\u003c? super java.util.Map.Entry\u003cK, V\u003e\u003e)","flatSignature":"(long, Consumer\u003c? super Map.Entry\u003cK, V\u003e\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forEachEntry","comment":"Performs the given action for each non-null transformation\n of each entry.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003cjava.util.Map.Entry\u003cK, V\u003e, ? extends U\u003e, java.util.function.Consumer\u003c? super U\u003e)","flatSignature":"(long, Function\u003cMap.Entry\u003cK, V\u003e, ? extends U\u003e, Consumer\u003c? super U\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"searchEntries","comment":"Returns a non-null result from applying the given search\n function on each entry, or null if none.  Upon success,\n further element processing is suppressed and the results of\n any other parallel invocations of the search function are\n ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003cjava.util.Map.Entry\u003cK, V\u003e, ? extends U\u003e)","flatSignature":"(long, Function\u003cMap.Entry\u003cK, V\u003e, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"searchFunction","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceEntries","comment":"Returns the result of accumulating all entries using the\n given reducer to combine values, or null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.BiFunction\u003cjava.util.Map.Entry\u003cK, V\u003e, java.util.Map.Entry\u003cK, V\u003e, ? extends java.util.Map.Entry\u003cK, V\u003e\u003e)","flatSignature":"(long, BiFunction\u003cMap.Entry\u003cK, V\u003e, Map.Entry\u003cK, V\u003e, ? extends Map.Entry\u003cK, V\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceEntries","comment":"Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n or null if none.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.Function\u003cjava.util.Map.Entry\u003cK, V\u003e, ? extends U\u003e, java.util.function.BiFunction\u003c? super U, ? super U, ? extends U\u003e)","flatSignature":"(long, Function\u003cMap.Entry\u003cK, V\u003e, ? extends U\u003e, BiFunction\u003c? super U, ? super U, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"U","qualifiedName":"U","dimension":"","elementType":{},"typeVariable":{"name":"U","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"reduceEntriesToDouble","comment":"Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToDoubleFunction\u003cjava.util.Map.Entry\u003cK, V\u003e\u003e, double, java.util.function.DoubleBinaryOperator)","flatSignature":"(long, ToDoubleFunction\u003cMap.Entry\u003cK, V\u003e\u003e, double, DoubleBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"DoubleBinaryOperator","qualifiedName":"java.util.function.DoubleBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceEntriesToLong","comment":"Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToLongFunction\u003cjava.util.Map.Entry\u003cK, V\u003e\u003e, long, java.util.function.LongBinaryOperator)","flatSignature":"(long, ToLongFunction\u003cMap.Entry\u003cK, V\u003e\u003e, long, LongBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"LongBinaryOperator","qualifiedName":"java.util.function.LongBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reduceEntriesToInt","comment":"Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n and the given basis as an identity value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.function.ToIntFunction\u003cjava.util.Map.Entry\u003cK, V\u003e\u003e, int, java.util.function.IntBinaryOperator)","flatSignature":"(long, ToIntFunction\u003cMap.Entry\u003cK, V\u003e\u003e, int, IntBinaryOperator)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parallelismThreshold","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"transformer","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}},{"name":"basis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"reducer","type":{"isPrimitive":false,"simpleName":"IntBinaryOperator","qualifiedName":"java.util.function.IntBinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}