{"name":"ScheduledThreadPoolExecutor","comment":"A {@link ThreadPoolExecutor} that can additionally schedule\n commands to run after a given delay, or to execute\n periodically. This class is preferable to {@link java.util.Timer}\n when multiple worker threads are needed, or when the additional\n flexibility or capabilities of {@link ThreadPoolExecutor} (which\n this class extends) are required.\n\n \u003cp\u003eDelayed tasks execute no sooner than they are enabled, but\n without any real-time guarantees about when, after they are\n enabled, they will commence. Tasks scheduled for exactly the same\n execution time are enabled in first-in-first-out (FIFO) order of\n submission.\n\n \u003cp\u003eWhen a submitted task is cancelled before it is run, execution\n is suppressed. By default, such a cancelled task is not\n automatically removed from the work queue until its delay\n elapses. While this enables further inspection and monitoring, it\n may also cause unbounded retention of cancelled tasks. To avoid\n this, set {@link #setRemoveOnCancelPolicy} to {@code true}, which\n causes tasks to be immediately removed from the work queue at\n time of cancellation.\n\n \u003cp\u003eSuccessive executions of a task scheduled via\n {@code scheduleAtFixedRate} or\n {@code scheduleWithFixedDelay} do not overlap. While different\n executions may be performed by different threads, the effects of\n prior executions \u003ca\n href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n those of subsequent ones.\n\n \u003cp\u003eWhile this class inherits from {@link ThreadPoolExecutor}, a few\n of the inherited tuning methods are not useful for it. In\n particular, because it acts as a fixed-sized pool using\n {@code corePoolSize} threads and an unbounded queue, adjustments\n to {@code maximumPoolSize} have no useful effect. Additionally, it\n is almost never a good idea to set {@code corePoolSize} to zero or\n use {@code allowCoreThreadTimeOut} because this may leave the pool\n without threads to handle tasks once they become eligible to run.\n\n \u003cp\u003e\u003cb\u003eExtension notes:\u003c/b\u003e This class overrides the\n {@link ThreadPoolExecutor#execute(Runnable) execute} and\n {@link AbstractExecutorService#submit(Runnable) submit}\n methods to generate internal {@link ScheduledFuture} objects to\n control per-task delays and scheduling.  To preserve\n functionality, any further overrides of these methods in\n subclasses must invoke superclass versions, which effectively\n disables additional task customization.  However, this class\n provides alternative protected extension method\n {@code decorateTask} (one version each for {@code Runnable} and\n {@code Callable}) that can be used to customize the concrete task\n types used to execute commands entered via {@code execute},\n {@code submit}, {@code schedule}, {@code scheduleAtFixedRate},\n and {@code scheduleWithFixedDelay}.  By default, a\n {@code ScheduledThreadPoolExecutor} uses a task type extending\n {@link FutureTask}. However, this may be modified or replaced using\n subclasses of the form:\n\n  \u003cpre\u003e {@code\n public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {\n\n   static class CustomTask\u003cV\u003e implements RunnableScheduledFuture\u003cV\u003e { ... }\n\n   protected \u003cV\u003e RunnableScheduledFuture\u003cV\u003e decorateTask(\n                Runnable r, RunnableScheduledFuture\u003cV\u003e task) {\n       return new CustomTask\u003cV\u003e(r, task);\n   }\n\n   protected \u003cV\u003e RunnableScheduledFuture\u003cV\u003e decorateTask(\n                Callable\u003cV\u003e c, RunnableScheduledFuture\u003cV\u003e task) {\n       return new CustomTask\u003cV\u003e(c, task);\n   }\n   // ... add constructors, etc.\n }}\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ScheduledThreadPoolExecutor","qualifiedName":"java.util.concurrent.ScheduledThreadPoolExecutor","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.concurrent.ThreadPoolExecutor","interfaces":["java.util.concurrent.ScheduledExecutorService"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ScheduledThreadPoolExecutor","comment":"Creates a new {@code ScheduledThreadPoolExecutor} with the\n given core pool size.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"corePoolSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ScheduledThreadPoolExecutor","comment":"Creates a new {@code ScheduledThreadPoolExecutor} with the\n given initial parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.ThreadFactory)","flatSignature":"(int, ThreadFactory)","parameters":[{"name":"corePoolSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ScheduledThreadPoolExecutor","comment":"Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.RejectedExecutionHandler)","flatSignature":"(int, RejectedExecutionHandler)","parameters":[{"name":"corePoolSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"RejectedExecutionHandler","qualifiedName":"java.util.concurrent.RejectedExecutionHandler","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ScheduledThreadPoolExecutor","comment":"Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)","flatSignature":"(int, ThreadFactory, RejectedExecutionHandler)","parameters":[{"name":"corePoolSize","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"threadFactory","type":{"isPrimitive":false,"simpleName":"ThreadFactory","qualifiedName":"java.util.concurrent.ThreadFactory","dimension":"","elementType":{}}},{"name":"handler","type":{"isPrimitive":false,"simpleName":"RejectedExecutionHandler","qualifiedName":"java.util.concurrent.RejectedExecutionHandler","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"schedule","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, long, java.util.concurrent.TimeUnit)","flatSignature":"(Runnable, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"schedule","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cV\u003e, long, java.util.concurrent.TimeUnit)","flatSignature":"(Callable\u003cV\u003e, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"callable","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[{"name":"V","bounds":[]}]},{"name":"scheduleAtFixedRate","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)","flatSignature":"(Runnable, long, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"initialDelay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"period","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"scheduleWithFixedDelay","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)","flatSignature":"(Runnable, long, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"initialDelay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"execute","comment":"Executes {@code command} with zero required delay.\n This has effect equivalent to\n {@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}.\n Note that inspections of the queue and of the list returned by\n {@code shutdownNow} will access the zero-delayed\n {@link ScheduledFuture}, not the {@code command} itself.\n\n \u003cp\u003eA consequence of the use of {@code ScheduledFuture} objects is\n that {@link ThreadPoolExecutor#afterExecute afterExecute} is always\n called with a null second {@code Throwable} argument, even if the\n {@code command} terminated abruptly.  Instead, the {@code Throwable}\n thrown by such a task can be obtained via {@link Future#get}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, T)","flatSignature":"(Runnable, T)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"submit","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cT\u003e)","flatSignature":"(Callable\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"setContinueExistingPeriodicTasksAfterShutdownPolicy","comment":"Sets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow} or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getContinueExistingPeriodicTasksAfterShutdownPolicy","comment":"Gets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow} or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setExecuteExistingDelayedTasksAfterShutdownPolicy","comment":"Sets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow}, or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getExecuteExistingDelayedTasksAfterShutdownPolicy","comment":"Gets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow}, or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setRemoveOnCancelPolicy","comment":"Sets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRemoveOnCancelPolicy","comment":"Gets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdown","comment":"Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n \u003cp\u003eThis method does not wait for previously submitted tasks to\n complete execution.  Use {@link #awaitTermination awaitTermination}\n to do that.\n\n \u003cp\u003eIf the {@code ExecuteExistingDelayedTasksAfterShutdownPolicy}\n has been set {@code false}, existing delayed tasks whose delays\n have not yet elapsed are cancelled.  And unless the {@code\n ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set\n {@code true}, future executions of existing periodic tasks will\n be cancelled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownNow","comment":"Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution.\n\n \u003cp\u003eThis method does not wait for actively executing tasks to\n terminate.  Use {@link #awaitTermination awaitTermination} to\n do that.\n\n \u003cp\u003eThere are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n cancels tasks via {@link Thread#interrupt}, so any task that\n fails to respond to interrupts may never terminate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getQueue","comment":"Returns the task queue used by this executor.  Each element of\n this queue is a {@link ScheduledFuture}, including those\n tasks submitted using {@code execute} which are for scheduling\n purposes used as the basis of a zero-delay\n {@code ScheduledFuture}.  Iteration over this queue is\n \u003cem\u003enot\u003c/em\u003e guaranteed to traverse tasks in the order in\n which they will execute.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BlockingQueue","qualifiedName":"java.util.concurrent.BlockingQueue","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}