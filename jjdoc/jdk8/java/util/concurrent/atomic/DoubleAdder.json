{"name":"DoubleAdder","comment":"One or more variables that together maintain an initially zero\n {@code double} sum.  When updates (method {@link #add}) are\n contended across threads, the set of variables may grow dynamically\n to reduce contention.  Method {@link #sum} (or, equivalently {@link\n #doubleValue}) returns the current total combined across the\n variables maintaining the sum. The order of accumulation within or\n across threads is not guaranteed. Thus, this class may not be\n applicable if numerical stability is required, especially when\n combining values of substantially different orders of magnitude.\n\n \u003cp\u003eThis class is usually preferable to alternatives when multiple\n threads update a common value that is used for purposes such as\n summary statistics that are frequently updated but less frequently\n read.\n\n \u003cp\u003eThis class extends {@link Number}, but does \u003cem\u003enot\u003c/em\u003e define\n methods such as {@code equals}, {@code hashCode} and {@code\n compareTo} because instances are expected to be mutated, and so are\n not useful as collection keys.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DoubleAdder","qualifiedName":"java.util.concurrent.atomic.DoubleAdder","dimension":"","elementType":{},"package":"java.util.concurrent.atomic","superclass":"java.util.concurrent.atomic.Striped64","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DoubleAdder","comment":"Creates a new adder with initial sum of zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"add","comment":"Adds the given value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sum","comment":"Returns the current sum.  The returned value is \u003cem\u003eNOT\u003c/em\u003e an\n atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the sum is being calculated might not be\n incorporated.  Also, because floating-point arithmetic is not\n strictly associative, the returned result need not be identical\n to the value that would be obtained in a sequential series of\n updates to a single variable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Resets variables maintaining the sum to zero.  This method may\n be a useful alternative to creating a new adder, but is only\n effective if there are no concurrent updates.  Because this\n method is intrinsically racy, it should only be used when it is\n known that no threads are concurrently updating.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sumThenReset","comment":"Equivalent in effect to {@link #sum} followed by {@link\n #reset}. This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n \u003cem\u003enot\u003c/em\u003e guaranteed to be the final value occurring before\n the reset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns the String representation of the {@link #sum}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"doubleValue","comment":"Equivalent to {@link #sum}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValue","comment":"Returns the {@link #sum} as a {@code long} after a\n narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValue","comment":"Returns the {@link #sum} as an {@code int} after a\n narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"floatValue","comment":"Returns the {@link #sum} as a {@code float}\n after a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}