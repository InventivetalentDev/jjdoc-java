{"name":"DoubleAccumulator","comment":"One or more variables that together maintain a running {@code double}\n value updated using a supplied function.  When updates (method\n {@link #accumulate}) are contended across threads, the set of variables\n may grow dynamically to reduce contention.  Method {@link #get}\n (or, equivalently, {@link #doubleValue}) returns the current value\n across the variables maintaining updates.\n\n \u003cp\u003eThis class is usually preferable to alternatives when multiple\n threads update a common value that is used for purposes such as\n summary statistics that are frequently updated but less frequently\n read.\n\n \u003cp\u003eThe supplied accumulator function should be side-effect-free,\n since it may be re-applied when attempted updates fail due to\n contention among threads. The function is applied with the current\n value as its first argument, and the given update as the second\n argument.  For example, to maintain a running maximum value, you\n could supply {@code Double::max} along with {@code\n Double.NEGATIVE_INFINITY} as the identity. The order of\n accumulation within or across threads is not guaranteed. Thus, this\n class may not be applicable if numerical stability is required,\n especially when combining values of substantially different orders\n of magnitude.\n\n \u003cp\u003eClass {@link DoubleAdder} provides analogs of the functionality\n of this class for the common special case of maintaining sums.  The\n call {@code new DoubleAdder()} is equivalent to {@code new\n DoubleAccumulator((x, y) -\u003e x + y, 0.0)}.\n\n \u003cp\u003eThis class extends {@link Number}, but does \u003cem\u003enot\u003c/em\u003e define\n methods such as {@code equals}, {@code hashCode} and {@code\n compareTo} because instances are expected to be mutated, and so are\n not useful as collection keys.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DoubleAccumulator","qualifiedName":"java.util.concurrent.atomic.DoubleAccumulator","dimension":"","elementType":{},"package":"java.util.concurrent.atomic","superclass":"java.util.concurrent.atomic.Striped64","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DoubleAccumulator","comment":"Creates a new instance using the given accumulator function\n and identity element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.function.DoubleBinaryOperator, double)","flatSignature":"(DoubleBinaryOperator, double)","parameters":[{"name":"accumulatorFunction","type":{"isPrimitive":false,"simpleName":"DoubleBinaryOperator","qualifiedName":"java.util.function.DoubleBinaryOperator","dimension":"","elementType":{}}},{"name":"identity","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"accumulate","comment":"Updates with the given value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the current value.  The returned value is \u003cem\u003eNOT\u003c/em\u003e\n an atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the value is being calculated might not be\n incorporated.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reset","comment":"Resets variables maintaining updates to the identity value.\n This method may be a useful alternative to creating a new\n updater, but is only effective if there are no concurrent\n updates.  Because this method is intrinsically racy, it should\n only be used when it is known that no threads are concurrently\n updating.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThenReset","comment":"Equivalent in effect to {@link #get} followed by {@link\n #reset}. This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n \u003cem\u003enot\u003c/em\u003e guaranteed to be the final value occurring before\n the reset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns the String representation of the current value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"doubleValue","comment":"Equivalent to {@link #get}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValue","comment":"Returns the {@linkplain #get current value} as a {@code long}\n after a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValue","comment":"Returns the {@linkplain #get current value} as an {@code int}\n after a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"floatValue","comment":"Returns the {@linkplain #get current value} as a {@code float}\n after a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}