{"name":"AtomicReferenceFieldUpdater","comment":"A reflection-based utility that enables atomic updates to\n designated {@code volatile} reference fields of designated\n classes.  This class is designed for use in atomic data structures\n in which several reference fields of the same node are\n independently subject to atomic updates. For example, a tree node\n might be declared as\n\n \u003cpre\u003e {@code\n class Node {\n   private volatile Node left, right;\n\n   private static final AtomicReferenceFieldUpdater\u003cNode, Node\u003e leftUpdater \u003d\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");\n   private static AtomicReferenceFieldUpdater\u003cNode, Node\u003e rightUpdater \u003d\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");\n\n   Node getLeft() { return left; }\n   boolean compareAndSetLeft(Node expect, Node update) {\n     return leftUpdater.compareAndSet(this, expect, update);\n   }\n   // ... and so on\n }}\u003c/pre\u003e\n\n \u003cp\u003eNote that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AtomicReferenceFieldUpdater","qualifiedName":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","dimension":"","elementType":{},"package":"java.util.concurrent.atomic","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"newUpdater","comment":"Creates and returns an updater for objects with the given field.\n The Class arguments are needed to check that reflective types and\n generic types match.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cU\u003e, java.lang.Class\u003cW\u003e, java.lang.String)","flatSignature":"(Class\u003cU\u003e, Class\u003cW\u003e, String)","returnType":{"isPrimitive":false,"simpleName":"AtomicReferenceFieldUpdater","qualifiedName":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"tclass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"vclass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"fieldName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]},{"name":"W","bounds":[]}]},{"name":"compareAndSet","comment":"Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code \u003d\u003d} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V, V)","flatSignature":"(T, V, V)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"expect","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"update","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"weakCompareAndSet","comment":"Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code \u003d\u003d} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n \u003cp\u003e\u003ca href\u003d\"package-summary.html#weakCompareAndSet\"\u003eMay fail\n spuriously and does not provide ordering guarantees\u003c/a\u003e, so is\n only rarely an appropriate alternative to {@code compareAndSet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V, V)","flatSignature":"(T, V, V)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"expect","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"update","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"set","comment":"Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V)","flatSignature":"(T, V)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"lazySet","comment":"Eventually sets the field of the given object managed by this\n updater to the given updated value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V)","flatSignature":"(T, V)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"get","comment":"Gets the current value held in the field of the given object managed\n by this updater.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"getAndSet","comment":"Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V)","flatSignature":"(T, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"getAndUpdate","comment":"Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the previous\n value. The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.function.UnaryOperator\u003cV\u003e)","flatSignature":"(T, UnaryOperator\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"updateFunction","type":{"isPrimitive":false,"simpleName":"UnaryOperator","qualifiedName":"java.util.function.UnaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"updateAndGet","comment":"Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the updated\n value. The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.util.function.UnaryOperator\u003cV\u003e)","flatSignature":"(T, UnaryOperator\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"updateFunction","type":{"isPrimitive":false,"simpleName":"UnaryOperator","qualifiedName":"java.util.function.UnaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAndAccumulate","comment":"Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.  The\n function is applied with the current value as its first argument,\n and the given update as the second argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V, java.util.function.BinaryOperator\u003cV\u003e)","flatSignature":"(T, V, BinaryOperator\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"x","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"accumulatorFunction","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"accumulateAndGet","comment":"Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.  The\n function is applied with the current value as its first argument,\n and the given update as the second argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, V, java.util.function.BinaryOperator\u003cV\u003e)","flatSignature":"(T, V, BinaryOperator\u003cV\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"x","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"accumulatorFunction","type":{"isPrimitive":false,"simpleName":"BinaryOperator","qualifiedName":"java.util.function.BinaryOperator","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}