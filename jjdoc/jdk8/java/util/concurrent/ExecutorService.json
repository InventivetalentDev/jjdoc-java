{"name":"ExecutorService","comment":"An {@link Executor} that provides methods to manage termination and\n methods that can produce a {@link Future} for tracking progress of\n one or more asynchronous tasks.\n\n \u003cp\u003eAn {@code ExecutorService} can be shut down, which will cause\n it to reject new tasks.  Two different methods are provided for\n shutting down an {@code ExecutorService}. The {@link #shutdown}\n method will allow previously submitted tasks to execute before\n terminating, while the {@link #shutdownNow} method prevents waiting\n tasks from starting and attempts to stop currently executing tasks.\n Upon termination, an executor has no tasks actively executing, no\n tasks awaiting execution, and no new tasks can be submitted.  An\n unused {@code ExecutorService} should be shut down to allow\n reclamation of its resources.\n\n \u003cp\u003eMethod {@code submit} extends base method {@link\n Executor#execute(Runnable)} by creating and returning a {@link Future}\n that can be used to cancel execution and/or wait for completion.\n Methods {@code invokeAny} and {@code invokeAll} perform the most\n commonly useful forms of bulk execution, executing a collection of\n tasks and then waiting for at least one, or all, to\n complete. (Class {@link ExecutorCompletionService} can be used to\n write customized variants of these methods.)\n\n \u003cp\u003eThe {@link Executors} class provides factory methods for the\n executor services provided in this package.\n\n \u003ch3\u003eUsage Examples\u003c/h3\u003e\n\n Here is a sketch of a network service in which threads in a thread\n pool service incoming requests. It uses the preconfigured {@link\n Executors#newFixedThreadPool} factory method:\n\n  \u003cpre\u003e {@code\n class NetworkService implements Runnable {\n   private final ServerSocket serverSocket;\n   private final ExecutorService pool;\n\n   public NetworkService(int port, int poolSize)\n       throws IOException {\n     serverSocket \u003d new ServerSocket(port);\n     pool \u003d Executors.newFixedThreadPool(poolSize);\n   }\n\n   public void run() { // run the service\n     try {\n       for (;;) {\n         pool.execute(new Handler(serverSocket.accept()));\n       }\n     } catch (IOException ex) {\n       pool.shutdown();\n     }\n   }\n }\n\n class Handler implements Runnable {\n   private final Socket socket;\n   Handler(Socket socket) { this.socket \u003d socket; }\n   public void run() {\n     // read and service request on socket\n   }\n }}\u003c/pre\u003e\n\n The following method shuts down an {@code ExecutorService} in two phases,\n first by calling {@code shutdown} to reject incoming tasks, and then\n calling {@code shutdownNow}, if necessary, to cancel any lingering tasks:\n\n  \u003cpre\u003e {@code\n void shutdownAndAwaitTermination(ExecutorService pool) {\n   pool.shutdown(); // Disable new tasks from being submitted\n   try {\n     // Wait a while for existing tasks to terminate\n     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {\n       pool.shutdownNow(); // Cancel currently executing tasks\n       // Wait a while for tasks to respond to being cancelled\n       if (!pool.awaitTermination(60, TimeUnit.SECONDS))\n           System.err.println(\"Pool did not terminate\");\n     }\n   } catch (InterruptedException ie) {\n     // (Re-)Cancel if current thread also interrupted\n     pool.shutdownNow();\n     // Preserve interrupt status\n     Thread.currentThread().interrupt();\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eMemory consistency effects: Actions in a thread prior to the\n submission of a {@code Runnable} or {@code Callable} task to an\n {@code ExecutorService}\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n any actions taken by that task, which in turn \u003ci\u003ehappen-before\u003c/i\u003e the\n result is retrieved via {@code Future.get()}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ExecutorService","qualifiedName":"java.util.concurrent.ExecutorService","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":["java.util.concurrent.Executor"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"shutdown","comment":"Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n \u003cp\u003eThis method does not wait for previously submitted tasks to\n complete execution.  Use {@link #awaitTermination awaitTermination}\n to do that.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shutdownNow","comment":"Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution.\n\n \u003cp\u003eThis method does not wait for actively executing tasks to\n terminate.  Use {@link #awaitTermination awaitTermination} to\n do that.\n\n \u003cp\u003eThere are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  For example, typical\n implementations will cancel via {@link Thread#interrupt}, so any\n task that fails to respond to interrupts may never terminate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isShutdown","comment":"Returns {@code true} if this executor has been shut down.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isTerminated","comment":"Returns {@code true} if all tasks have completed following shut down.\n Note that {@code isTerminated} is never {@code true} unless\n either {@code shutdown} or {@code shutdownNow} was called first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"awaitTermination","comment":"Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thread is\n interrupted, whichever happens first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"submit","comment":"Submits a value-returning task for execution and returns a\n Future representing the pending results of the task. The\n Future\u0027s {@code get} method will return the task\u0027s result upon\n successful completion.\n\n \u003cp\u003e\n If you would like to immediately block waiting\n for a task, you can use constructions of the form\n {@code result \u003d exec.submit(aCallable).get();}\n\n \u003cp\u003eNote: The {@link Executors} class includes a set of methods\n that can convert some other common closure-like objects,\n for example, {@link java.security.PrivilegedAction} to\n {@link Callable} form so they can be submitted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cT\u003e)","flatSignature":"(Callable\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"submit","comment":"Submits a Runnable task for execution and returns a Future\n representing that task. The Future\u0027s {@code get} method will\n return the given result upon successful completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, T)","flatSignature":"(Runnable, T)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"result","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"submit","comment":"Submits a Runnable task for execution and returns a Future\n representing that task. The Future\u0027s {@code get} method will\n return {@code null} upon \u003cem\u003esuccessful\u003c/em\u003e completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"invokeAll","comment":"Executes the given tasks, returning a list of Futures holding\n their status and results when all complete.\n {@link Future#isDone} is {@code true} for each\n element of the returned list.\n Note that a \u003cem\u003ecompleted\u003c/em\u003e task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends java.util.concurrent.Callable\u003cT\u003e\u003e)","flatSignature":"(Collection\u003c? extends Callable\u003cT\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"invokeAll","comment":"Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the timeout expires, whichever happens first.\n {@link Future#isDone} is {@code true} for each\n element of the returned list.\n Upon return, tasks that have not completed are cancelled.\n Note that a \u003cem\u003ecompleted\u003c/em\u003e task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends java.util.concurrent.Callable\u003cT\u003e\u003e, long, java.util.concurrent.TimeUnit)","flatSignature":"(Collection\u003c? extends Callable\u003cT\u003e\u003e, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"invokeAny","comment":"Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do. Upon normal or exceptional return,\n tasks that have not completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends java.util.concurrent.Callable\u003cT\u003e\u003e)","flatSignature":"(Collection\u003c? extends Callable\u003cT\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"invokeAny","comment":"Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do before the given timeout elapses.\n Upon normal or exceptional return, tasks that have not\n completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends java.util.concurrent.Callable\u003cT\u003e\u003e, long, java.util.concurrent.TimeUnit)","flatSignature":"(Collection\u003c? extends Callable\u003cT\u003e\u003e, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"tasks","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[],"subInterfaces":["java.util.concurrent.ScheduledExecutorService","java.util.concurrent.AbstractExecutorService"],"enumConstants":[]}