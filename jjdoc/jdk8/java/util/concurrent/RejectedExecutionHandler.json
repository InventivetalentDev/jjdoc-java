{"name":"RejectedExecutionHandler","comment":"A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"RejectedExecutionHandler","qualifiedName":"java.util.concurrent.RejectedExecutionHandler","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"rejectedExecution","comment":"Method that may be invoked by a {@link ThreadPoolExecutor} when\n {@link ThreadPoolExecutor#execute execute} cannot accept a\n task.  This may occur when no more threads or queue slots are\n available because their bounds would be exceeded, or upon\n shutdown of the Executor.\n\n \u003cp\u003eIn the absence of other alternatives, the method may throw\n an unchecked {@link RejectedExecutionException}, which will be\n propagated to the caller of {@code execute}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)","flatSignature":"(Runnable, ThreadPoolExecutor)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"r","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"ThreadPoolExecutor","qualifiedName":"java.util.concurrent.ThreadPoolExecutor","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy","java.util.concurrent.ThreadPoolExecutor.AbortPolicy","java.util.concurrent.ThreadPoolExecutor.DiscardPolicy","java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy"],"enumConstants":[]}