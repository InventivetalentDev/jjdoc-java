{"name":"ConcurrentSkipListMap","comment":"A scalable concurrent {@link ConcurrentNavigableMap} implementation.\n The map is sorted according to the {@linkplain Comparable natural\n ordering} of its keys, or by a {@link Comparator} provided at map\n creation time, depending on which constructor is used.\n\n \u003cp\u003eThis class implements a concurrent variant of \u003ca\n href\u003d\"http://en.wikipedia.org/wiki/Skip_list\" target\u003d\"_top\"\u003eSkipLists\u003c/a\u003e\n providing expected average \u003ci\u003elog(n)\u003c/i\u003e time cost for the\n {@code containsKey}, {@code get}, {@code put} and\n {@code remove} operations and their variants.  Insertion, removal,\n update, and access operations safely execute concurrently by\n multiple threads.\n\n \u003cp\u003eIterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eAscending key ordered views and their iterators are faster than\n descending ones.\n\n \u003cp\u003eAll {@code Map.Entry} pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do \u003cem\u003enot\u003c/em\u003e support the {@code Entry.setValue}\n method. (Note however that it is possible to change mappings in the\n associated map using {@code put}, {@code putIfAbsent}, or\n {@code replace}, depending on exactly which effect you need.)\n\n \u003cp\u003eBeware that, unlike in most collections, the {@code size}\n method is \u003cem\u003enot\u003c/em\u003e a constant-time operation. Because of the\n asynchronous nature of these maps, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code putAll}, {@code equals},\n {@code toArray}, {@code containsValue}, and {@code clear} are\n \u003cem\u003enot\u003c/em\u003e guaranteed to be performed atomically. For example, an\n iterator operating concurrently with a {@code putAll} operation\n might view only some of the added elements.\n\n \u003cp\u003eThis class and its views and iterators implement all of the\n \u003cem\u003eoptional\u003c/em\u003e methods of the {@link Map} and {@link Iterator}\n interfaces. Like most other concurrent collections, this class does\n \u003cem\u003enot\u003c/em\u003e permit the use of {@code null} keys or values because some\n null return values cannot be reliably distinguished from the absence of\n elements.\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ConcurrentSkipListMap","qualifiedName":"java.util.concurrent.ConcurrentSkipListMap","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.util.AbstractMap","interfaces":["java.util.concurrent.ConcurrentNavigableMap","java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ConcurrentSkipListMap","comment":"Constructs a new, empty map, sorted according to the\n {@linkplain Comparable natural ordering} of the keys.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ConcurrentSkipListMap","comment":"Constructs a new, empty map, sorted according to the specified\n comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super K\u003e)","flatSignature":"(Comparator\u003c? super K\u003e)","parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentSkipListMap","comment":"Constructs a new map containing the same mappings as the given map,\n sorted according to the {@linkplain Comparable natural ordering} of\n the keys.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentSkipListMap","comment":"Constructs a new map containing the same mappings and using the\n same ordering as the specified sorted map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.SortedMap\u003cK, ? extends V\u003e)","flatSignature":"(SortedMap\u003cK, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"clone","comment":"Returns a shallow copy of this {@code ConcurrentSkipListMap}\n instance. (The keys and values themselves are not cloned.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ConcurrentSkipListMap","qualifiedName":"java.util.concurrent.ConcurrentSkipListMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"containsKey","comment":"Returns {@code true} if this map contains a mapping for the specified\n key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n \u003cp\u003eMore formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key} compares\n equal to {@code k} according to the map\u0027s ordering, then this\n method returns {@code v}; otherwise it returns {@code null}.\n (There can be at most one such mapping.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOrDefault","comment":"Returns the value to which the specified key is mapped,\n or the given defaultValue if this map contains no mapping for the key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, V)","flatSignature":"(Object, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"defaultValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"put","comment":"Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the mapping for the specified key from this map if present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsValue","comment":"Returns {@code true} if this map maps one or more keys to the\n specified value.  This operation requires time linear in the\n map size. Additionally, it is possible for the map to change\n during execution of this method, in which case the returned\n result may be inaccurate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"size","comment":"Returns the number of key-value mappings in this map.  If this map\n contains more than {@code Integer.MAX_VALUE} elements, it\n returns {@code Integer.MAX_VALUE}.\n\n \u003cp\u003eBeware that, unlike in most collections, this method is\n \u003cem\u003eNOT\u003c/em\u003e a constant-time operation. Because of the\n asynchronous nature of these maps, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns {@code true} if this map contains no key-value mappings.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clear","comment":"Removes all of the mappings from this map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"computeIfAbsent","comment":"If the specified key is not already associated with a value,\n attempts to compute its value using the given mapping function\n and enters it into this map unless {@code null}.  The function\n is \u003cem\u003eNOT\u003c/em\u003e guaranteed to be applied once atomically only\n if the value is not present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.Function\u003c? super K, ? extends V\u003e)","flatSignature":"(K, Function\u003c? super K, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"mappingFunction","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"computeIfPresent","comment":"If the value for the specified key is present, attempts to\n compute a new mapping given the key and its current mapped\n value. The function is \u003cem\u003eNOT\u003c/em\u003e guaranteed to be applied\n once atomically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(K, BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compute","comment":"Attempts to compute a mapping for the specified key and its\n current mapped value (or {@code null} if there is no current\n mapping). The function is \u003cem\u003eNOT\u003c/em\u003e guaranteed to be applied\n once atomically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(K, BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"merge","comment":"If the specified key is not already associated with a value,\n associates it with the given value.  Otherwise, replaces the\n value with the results of the given remapping function, or\n removes if {@code null}. The function is \u003cem\u003eNOT\u003c/em\u003e\n guaranteed to be applied once atomically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, java.util.function.BiFunction\u003c? super V, ? super V, ? extends V\u003e)","flatSignature":"(K, V, BiFunction\u003c? super V, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link NavigableSet} view of the keys contained in this map.\n\n \u003cp\u003eThe set\u0027s iterator returns the keys in ascending order.\n The set\u0027s spliterator additionally reports {@link Spliterator#CONCURRENT},\n {@link Spliterator#NONNULL}, {@link Spliterator#SORTED} and\n {@link Spliterator#ORDERED}, with an encounter order that is ascending\n key order.  The spliterator\u0027s comparator (see\n {@link java.util.Spliterator#getComparator()}) is {@code null} if\n the map\u0027s comparator (see {@link #comparator()}) is {@code null}.\n Otherwise, the spliterator\u0027s comparator is the same as or imposes the\n same total ordering as the map\u0027s comparator.\n\n \u003cp\u003eThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThis method is equivalent to method {@code navigableKeySet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"navigableKeySet","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"values","comment":"Returns a {@link Collection} view of the values contained in this map.\n \u003cp\u003eThe collection\u0027s iterator returns the values in ascending order\n of the corresponding keys. The collections\u0027s spliterator additionally\n reports {@link Spliterator#CONCURRENT}, {@link Spliterator#NONNULL} and\n {@link Spliterator#ORDERED}, with an encounter order that is ascending\n order of the corresponding keys.\n\n \u003cp\u003eThe collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Collection.remove}, {@code removeAll},\n {@code retainAll} and {@code clear} operations.  It does not\n support the {@code add} or {@code addAll} operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"entrySet","comment":"Returns a {@link Set} view of the mappings contained in this map.\n\n \u003cp\u003eThe set\u0027s iterator returns the entries in ascending key order.  The\n set\u0027s spliterator additionally reports {@link Spliterator#CONCURRENT},\n {@link Spliterator#NONNULL}, {@link Spliterator#SORTED} and\n {@link Spliterator#ORDERED}, with an encounter order that is ascending\n key order.\n\n \u003cp\u003eThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll} and {@code clear}\n operations.  It does not support the {@code add} or\n {@code addAll} operations.\n\n \u003cp\u003eThe view\u0027s iterators and spliterators are\n \u003ca href\u003d\"package-summary.html#Weakly\"\u003e\u003ci\u003eweakly consistent\u003c/i\u003e\u003c/a\u003e.\n\n \u003cp\u003eThe {@code Map.Entry} elements traversed by the {@code iterator}\n or {@code spliterator} do \u003cem\u003enot\u003c/em\u003e support the {@code setValue}\n operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingKeySet","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this map for equality.\n Returns {@code true} if the given object is also a map and the\n two maps represent the same mappings.  More formally, two maps\n {@code m1} and {@code m2} represent the same mappings if\n {@code m1.entrySet().equals(m2.entrySet())}.  This\n operation may return misleading results if either map is\n concurrently modified during execution of this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putIfAbsent","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object)","flatSignature":"(Object, Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replace","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, V)","flatSignature":"(K, V, V)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"oldValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"replace","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"comparator","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"firstKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"subMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean, K, boolean)","flatSignature":"(K, boolean, K, boolean)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"fromInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"headMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tailMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, K)","flatSignature":"(K, K)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"headMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"tailMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"ConcurrentNavigableMap","qualifiedName":"java.util.concurrent.ConcurrentNavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"lowerEntry","comment":"Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or {@code null} if there is\n no such key. The returned entry does \u003cem\u003enot\u003c/em\u003e support the\n {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"lowerKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"floorEntry","comment":"Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or {@code null} if there\n is no such key. The returned entry does \u003cem\u003enot\u003c/em\u003e support\n the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"floorKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"ceilingEntry","comment":"Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or {@code null} if\n there is no such entry. The returned entry does \u003cem\u003enot\u003c/em\u003e\n support the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"ceilingKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"higherEntry","comment":"Returns a key-value mapping associated with the least key\n strictly greater than the given key, or {@code null} if there\n is no such key. The returned entry does \u003cem\u003enot\u003c/em\u003e support\n the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"higherKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"firstEntry","comment":"Returns a key-value mapping associated with the least\n key in this map, or {@code null} if the map is empty.\n The returned entry does \u003cem\u003enot\u003c/em\u003e support\n the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastEntry","comment":"Returns a key-value mapping associated with the greatest\n key in this map, or {@code null} if the map is empty.\n The returned entry does \u003cem\u003enot\u003c/em\u003e support\n the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollFirstEntry","comment":"Removes and returns a key-value mapping associated with\n the least key in this map, or {@code null} if the map is empty.\n The returned entry does \u003cem\u003enot\u003c/em\u003e support\n the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollLastEntry","comment":"Removes and returns a key-value mapping associated with\n the greatest key in this map, or {@code null} if the map is empty.\n The returned entry does \u003cem\u003enot\u003c/em\u003e support\n the {@code Entry.setValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"function","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}