{"name":"Exchanger","comment":"A synchronization point at which threads can pair and swap elements\n within pairs.  Each thread presents some object on entry to the\n {@link #exchange exchange} method, matches with a partner thread,\n and receives its partner\u0027s object on return.  An Exchanger may be\n viewed as a bidirectional form of a {@link SynchronousQueue}.\n Exchangers may be useful in applications such as genetic algorithms\n and pipeline designs.\n\n \u003cp\u003e\u003cb\u003eSample Usage:\u003c/b\u003e\n Here are the highlights of a class that uses an {@code Exchanger}\n to swap buffers between threads so that the thread filling the\n buffer gets a freshly emptied one when it needs it, handing off the\n filled one to the thread emptying the buffer.\n  \u003cpre\u003e {@code\n class FillAndEmpty {\n   Exchanger\u003cDataBuffer\u003e exchanger \u003d new Exchanger\u003cDataBuffer\u003e();\n   DataBuffer initialEmptyBuffer \u003d ... a made-up type\n   DataBuffer initialFullBuffer \u003d ...\n\n   class FillingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer \u003d initialEmptyBuffer;\n       try {\n         while (currentBuffer !\u003d null) {\n           addToBuffer(currentBuffer);\n           if (currentBuffer.isFull())\n             currentBuffer \u003d exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ... }\n     }\n   }\n\n   class EmptyingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer \u003d initialFullBuffer;\n       try {\n         while (currentBuffer !\u003d null) {\n           takeFromBuffer(currentBuffer);\n           if (currentBuffer.isEmpty())\n             currentBuffer \u003d exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ...}\n     }\n   }\n\n   void start() {\n     new Thread(new FillingLoop()).start();\n     new Thread(new EmptyingLoop()).start();\n   }\n }}\u003c/pre\u003e\n\n \u003cp\u003eMemory consistency effects: For each pair of threads that\n successfully exchange objects via an {@code Exchanger}, actions\n prior to the {@code exchange()} in each thread\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n those subsequent to a return from the corresponding {@code exchange()}\n in the other thread.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Exchanger","qualifiedName":"java.util.concurrent.Exchanger","dimension":"","elementType":{},"package":"java.util.concurrent","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Exchanger","comment":"Creates a new Exchanger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"exchange","comment":"Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted}),\n and then transfers the given object to it, receiving its object\n in return.\n\n \u003cp\u003eIf another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n \u003cp\u003eIf no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of two things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread enters the exchange; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n \u003c/ul\u003e\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(V)","flatSignature":"(V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"exchange","comment":"Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted} or\n the specified waiting time elapses), and then transfers the given\n object to it, receiving its object in return.\n\n \u003cp\u003eIf another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n \u003cp\u003eIf no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of three things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread enters the exchange; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n \u003cli\u003eThe specified waiting time elapses.\n \u003c/ul\u003e\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then {@link\n TimeoutException} is thrown.  If the time is less than or equal\n to zero, the method will not wait at all.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(V, long, java.util.concurrent.TimeUnit)","flatSignature":"(V, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"V","bounds":[]}],"enumConstants":[]}