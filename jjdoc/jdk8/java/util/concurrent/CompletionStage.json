{"name":"CompletionStage","comment":"A stage of a possibly asynchronous computation, that performs an\n action or computes a value when another CompletionStage completes.\n A stage completes upon termination of its computation, but this may\n in turn trigger other dependent stages.  The functionality defined\n in this interface takes only a few basic forms, which expand out to\n a larger set of methods to capture a range of usage styles: \u003cul\u003e\n\n \u003cli\u003eThe computation performed by a stage may be expressed as a\n Function, Consumer, or Runnable (using methods with names including\n \u003cem\u003eapply\u003c/em\u003e, \u003cem\u003eaccept\u003c/em\u003e, or \u003cem\u003erun\u003c/em\u003e, respectively)\n depending on whether it requires arguments and/or produces results.\n For example, {@code stage.thenApply(x -\u003e square(x)).thenAccept(x -\u003e\n System.out.print(x)).thenRun(() -\u003e System.out.println())}. An\n additional form (\u003cem\u003ecompose\u003c/em\u003e) applies functions of stages\n themselves, rather than their results. \u003c/li\u003e\n\n \u003cli\u003e One stage\u0027s execution may be triggered by completion of a\n single stage, or both of two stages, or either of two stages.\n Dependencies on a single stage are arranged using methods with\n prefix \u003cem\u003ethen\u003c/em\u003e. Those triggered by completion of\n \u003cem\u003eboth\u003c/em\u003e of two stages may \u003cem\u003ecombine\u003c/em\u003e their results or\n effects, using correspondingly named methods. Those triggered by\n \u003cem\u003eeither\u003c/em\u003e of two stages make no guarantees about which of the\n results or effects are used for the dependent stage\u0027s\n computation.\u003c/li\u003e\n\n \u003cli\u003e Dependencies among stages control the triggering of\n computations, but do not otherwise guarantee any particular\n ordering. Additionally, execution of a new stage\u0027s computations may\n be arranged in any of three ways: default execution, default\n asynchronous execution (using methods with suffix \u003cem\u003easync\u003c/em\u003e\n that employ the stage\u0027s default asynchronous execution facility),\n or custom (via a supplied {@link Executor}).  The execution\n properties of default and async modes are specified by\n CompletionStage implementations, not this interface. Methods with\n explicit Executor arguments may have arbitrary execution\n properties, and might not even support concurrent execution, but\n are arranged for processing in a way that accommodates asynchrony.\n\n \u003cli\u003e Two method forms support processing whether the triggering\n stage completed normally or exceptionally: Method {@link\n #whenComplete whenComplete} allows injection of an action\n regardless of outcome, otherwise preserving the outcome in its\n completion. Method {@link #handle handle} additionally allows the\n stage to compute a replacement result that may enable further\n processing by other dependent stages.  In all other cases, if a\n stage\u0027s computation terminates abruptly with an (unchecked)\n exception or error, then all dependent stages requiring its\n completion complete exceptionally as well, with a {@link\n CompletionException} holding the exception as its cause.  If a\n stage is dependent on \u003cem\u003eboth\u003c/em\u003e of two stages, and both\n complete exceptionally, then the CompletionException may correspond\n to either one of these exceptions.  If a stage is dependent on\n \u003cem\u003eeither\u003c/em\u003e of two others, and only one of them completes\n exceptionally, no guarantees are made about whether the dependent\n stage completes normally or exceptionally. In the case of method\n {@code whenComplete}, when the supplied action itself encounters an\n exception, then the stage exceptionally completes with this\n exception if not already completed exceptionally.\u003c/li\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003eAll methods adhere to the above triggering, execution, and\n exceptional completion specifications (which are not repeated in\n individual method specifications). Additionally, while arguments\n used to pass a completion result (that is, for parameters of type\n {@code T}) for methods accepting them may be null, passing a null\n value for any other parameter will result in a {@link\n NullPointerException} being thrown.\n\n \u003cp\u003eThis interface does not define methods for initially creating,\n forcibly completing normally or exceptionally, probing completion\n status or results, or awaiting completion of a stage.\n Implementations of CompletionStage may provide means of achieving\n such effects, as appropriate.  Method {@link #toCompletableFuture}\n enables interoperability among different implementations of this\n interface by providing a common conversion type.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"thenApply","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage\u0027s result as the argument\n to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenApplyAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed using this stage\u0027s default asynchronous\n execution facility, with this stage\u0027s result as the argument to\n the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenApplyAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage\u0027s result as the argument to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.concurrent.Executor)","flatSignature":"(Function\u003c? super T, ? extends U\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenAccept","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage\u0027s result as the argument\n to the supplied action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenAcceptAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed using this stage\u0027s default asynchronous\n execution facility, with this stage\u0027s result as the argument to\n the supplied action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenAcceptAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage\u0027s result as the argument to the supplied action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Consumer\u003c? super T\u003e, java.util.concurrent.Executor)","flatSignature":"(Consumer\u003c? super T\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenRun","comment":"Returns a new CompletionStage that, when this stage completes\n normally, executes the given action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenRunAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, executes the given action using this stage\u0027s default\n asynchronous execution facility.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenRunAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, executes the given action using the supplied Executor.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, java.util.concurrent.Executor)","flatSignature":"(Runnable, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenCombine","comment":"Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the two\n results as arguments to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends U\u003e, java.util.function.BiFunction\u003c? super T, ? super U, ? extends V\u003e)","flatSignature":"(CompletionStage\u003c? extends U\u003e, BiFunction\u003c? super T, ? super U, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"fn","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]},{"name":"V","bounds":[]}]},{"name":"thenCombineAsync","comment":"Returns a new CompletionStage that, when this and the other\n given stage complete normally, is executed using this stage\u0027s\n default asynchronous execution facility, with the two results\n as arguments to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends U\u003e, java.util.function.BiFunction\u003c? super T, ? super U, ? extends V\u003e)","flatSignature":"(CompletionStage\u003c? extends U\u003e, BiFunction\u003c? super T, ? super U, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"fn","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]},{"name":"V","bounds":[]}]},{"name":"thenCombineAsync","comment":"Returns a new CompletionStage that, when this and the other\n given stage complete normally, is executed using the supplied\n executor, with the two results as arguments to the supplied\n function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends U\u003e, java.util.function.BiFunction\u003c? super T, ? super U, ? extends V\u003e, java.util.concurrent.Executor)","flatSignature":"(CompletionStage\u003c? extends U\u003e, BiFunction\u003c? super T, ? super U, ? extends V\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"fn","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]},{"name":"V","bounds":[]}]},{"name":"thenAcceptBoth","comment":"Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the two\n results as arguments to the supplied action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends U\u003e, java.util.function.BiConsumer\u003c? super T, ? super U\u003e)","flatSignature":"(CompletionStage\u003c? extends U\u003e, BiConsumer\u003c? super T, ? super U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenAcceptBothAsync","comment":"Returns a new CompletionStage that, when this and the other\n given stage complete normally, is executed using this stage\u0027s\n default asynchronous execution facility, with the two results\n as arguments to the supplied action.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends U\u003e, java.util.function.BiConsumer\u003c? super T, ? super U\u003e)","flatSignature":"(CompletionStage\u003c? extends U\u003e, BiConsumer\u003c? super T, ? super U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenAcceptBothAsync","comment":"Returns a new CompletionStage that, when this and the other\n given stage complete normally, is executed using the supplied\n executor, with the two results as arguments to the supplied\n function.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends U\u003e, java.util.function.BiConsumer\u003c? super T, ? super U\u003e, java.util.concurrent.Executor)","flatSignature":"(CompletionStage\u003c? extends U\u003e, BiConsumer\u003c? super T, ? super U\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"runAfterBoth","comment":"Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c?\u003e, java.lang.Runnable)","flatSignature":"(CompletionStage\u003c?\u003e, Runnable)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"runAfterBothAsync","comment":"Returns a new CompletionStage that, when this and the other\n given stage complete normally, executes the given action using\n this stage\u0027s default asynchronous execution facility.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c?\u003e, java.lang.Runnable)","flatSignature":"(CompletionStage\u003c?\u003e, Runnable)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"runAfterBothAsync","comment":"Returns a new CompletionStage that, when this and the other\n given stage complete normally, executes the given action using\n the supplied executor.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c?\u003e, java.lang.Runnable, java.util.concurrent.Executor)","flatSignature":"(CompletionStage\u003c?\u003e, Runnable, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"applyToEither","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with the\n corresponding result as argument to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends T\u003e, java.util.function.Function\u003c? super T, U\u003e)","flatSignature":"(CompletionStage\u003c? extends T\u003e, Function\u003c? super T, U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"applyToEitherAsync","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using this\n stage\u0027s default asynchronous execution facility, with the\n corresponding result as argument to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends T\u003e, java.util.function.Function\u003c? super T, U\u003e)","flatSignature":"(CompletionStage\u003c? extends T\u003e, Function\u003c? super T, U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"applyToEitherAsync","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using the\n supplied executor, with the corresponding result as argument to\n the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends T\u003e, java.util.function.Function\u003c? super T, U\u003e, java.util.concurrent.Executor)","flatSignature":"(CompletionStage\u003c? extends T\u003e, Function\u003c? super T, U\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"acceptEither","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with the\n corresponding result as argument to the supplied action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends T\u003e, java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(CompletionStage\u003c? extends T\u003e, Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acceptEitherAsync","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using this\n stage\u0027s default asynchronous execution facility, with the\n corresponding result as argument to the supplied action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends T\u003e, java.util.function.Consumer\u003c? super T\u003e)","flatSignature":"(CompletionStage\u003c? extends T\u003e, Consumer\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acceptEitherAsync","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using the\n supplied executor, with the corresponding result as argument to\n the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c? extends T\u003e, java.util.function.Consumer\u003c? super T\u003e, java.util.concurrent.Executor)","flatSignature":"(CompletionStage\u003c? extends T\u003e, Consumer\u003c? super T\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Consumer","qualifiedName":"java.util.function.Consumer","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"runAfterEither","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c?\u003e, java.lang.Runnable)","flatSignature":"(CompletionStage\u003c?\u003e, Runnable)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"runAfterEitherAsync","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action\n using this stage\u0027s default asynchronous execution facility.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c?\u003e, java.lang.Runnable)","flatSignature":"(CompletionStage\u003c?\u003e, Runnable)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"runAfterEitherAsync","comment":"Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action\n using the supplied executor.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.CompletionStage\u003c?\u003e, java.lang.Runnable, java.util.concurrent.Executor)","flatSignature":"(CompletionStage\u003c?\u003e, Runnable, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}}},{"name":"action","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenCompose","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage as the argument\n to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.concurrent.CompletionStage\u003cU\u003e\u003e)","flatSignature":"(Function\u003c? super T, ? extends CompletionStage\u003cU\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenComposeAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed using this stage\u0027s default asynchronous\n execution facility, with this stage as the argument to the\n supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.concurrent.CompletionStage\u003cU\u003e\u003e)","flatSignature":"(Function\u003c? super T, ? extends CompletionStage\u003cU\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenComposeAsync","comment":"Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage\u0027s result as the argument to the supplied function.\n\n See the {@link CompletionStage} documentation for rules\n covering exceptional completion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends java.util.concurrent.CompletionStage\u003cU\u003e\u003e, java.util.concurrent.Executor)","flatSignature":"(Function\u003c? super T, ? extends CompletionStage\u003cU\u003e\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"exceptionally","comment":"Returns a new CompletionStage that, when this stage completes\n exceptionally, is executed with this stage\u0027s exception as the\n argument to the supplied function.  Otherwise, if this stage\n completes normally, then the returned stage also completes\n normally with the same value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003cjava.lang.Throwable, ? extends T\u003e)","flatSignature":"(Function\u003cThrowable, ? extends T\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"whenComplete","comment":"Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action when this stage completes.\n\n \u003cp\u003eWhen this stage is complete, the given action is invoked with the\n result (or {@code null} if none) and the exception (or {@code null}\n if none) of this stage as arguments.  The returned stage is completed\n when the action returns.  If the supplied action itself encounters an\n exception, then the returned stage exceptionally completes with this\n exception unless this stage also completed exceptionally.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super T, ? super java.lang.Throwable\u003e)","flatSignature":"(BiConsumer\u003c? super T, ? super Throwable\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"whenCompleteAsync","comment":"Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action using this stage\u0027s\n default asynchronous execution facility when this stage completes.\n\n \u003cp\u003eWhen this stage is complete, the given action is invoked with the\n result (or {@code null} if none) and the exception (or {@code null}\n if none) of this stage as arguments.  The returned stage is completed\n when the action returns.  If the supplied action itself encounters an\n exception, then the returned stage exceptionally completes with this\n exception unless this stage also completed exceptionally.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super T, ? super java.lang.Throwable\u003e)","flatSignature":"(BiConsumer\u003c? super T, ? super Throwable\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"whenCompleteAsync","comment":"Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action using the supplied\n Executor when this stage completes.\n\n \u003cp\u003eWhen this stage is complete, the given action is invoked with the\n result (or {@code null} if none) and the exception (or {@code null}\n if none) of this stage as arguments.  The returned stage is completed\n when the action returns.  If the supplied action itself encounters an\n exception, then the returned stage exceptionally completes with this\n exception unless this stage also completed exceptionally.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super T, ? super java.lang.Throwable\u003e, java.util.concurrent.Executor)","flatSignature":"(BiConsumer\u003c? super T, ? super Throwable\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"handle","comment":"Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed with this stage\u0027s\n result and exception as arguments to the supplied function.\n\n \u003cp\u003eWhen this stage is complete, the given function is invoked\n with the result (or {@code null} if none) and the exception (or\n {@code null} if none) of this stage as arguments, and the\n function\u0027s result is used to complete the returned stage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super T, java.lang.Throwable, ? extends U\u003e)","flatSignature":"(BiFunction\u003c? super T, Throwable, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"handleAsync","comment":"Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed using this stage\u0027s\n default asynchronous execution facility, with this stage\u0027s\n result and exception as arguments to the supplied function.\n\n \u003cp\u003eWhen this stage is complete, the given function is invoked\n with the result (or {@code null} if none) and the exception (or\n {@code null} if none) of this stage as arguments, and the\n function\u0027s result is used to complete the returned stage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super T, java.lang.Throwable, ? extends U\u003e)","flatSignature":"(BiFunction\u003c? super T, Throwable, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"handleAsync","comment":"Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed using the\n supplied executor, with this stage\u0027s result and exception as\n arguments to the supplied function.\n\n \u003cp\u003eWhen this stage is complete, the given function is invoked\n with the result (or {@code null} if none) and the exception (or\n {@code null} if none) of this stage as arguments, and the\n function\u0027s result is used to complete the returned stage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super T, java.lang.Throwable, ? extends U\u003e, java.util.concurrent.Executor)","flatSignature":"(BiFunction\u003c? super T, Throwable, ? extends U\u003e, Executor)","returnType":{"isPrimitive":false,"simpleName":"CompletionStage","qualifiedName":"java.util.concurrent.CompletionStage","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fn","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}},{"name":"executor","type":{"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"toCompletableFuture","comment":"Returns a {@link CompletableFuture} maintaining the same\n completion properties as this stage. If this stage is already a\n CompletableFuture, this method may return this stage itself.\n Otherwise, invocation of this method may be equivalent in\n effect to {@code thenApply(x -\u003e x)}, but returning an instance\n of type {@code CompletableFuture}. A CompletionStage\n implementation that does not choose to interoperate with others\n may throw {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"CompletableFuture","qualifiedName":"java.util.concurrent.CompletableFuture","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"subInterfaces":["java.util.concurrent.CompletableFuture"],"enumConstants":[]}