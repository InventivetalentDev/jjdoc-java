{"name":"TransferQueue","comment":"A {@link BlockingQueue} in which producers may wait for consumers\n to receive elements.  A {@code TransferQueue} may be useful for\n example in message passing applications in which producers\n sometimes (using method {@link #transfer}) await receipt of\n elements by consumers invoking {@code take} or {@code poll}, while\n at other times enqueue elements (via method {@code put}) without\n waiting for receipt.\n {@linkplain #tryTransfer(Object) Non-blocking} and\n {@linkplain #tryTransfer(Object,long,TimeUnit) time-out} versions of\n {@code tryTransfer} are also available.\n A {@code TransferQueue} may also be queried, via {@link\n #hasWaitingConsumer}, whether there are any threads waiting for\n items, which is a converse analogy to a {@code peek} operation.\n\n \u003cp\u003eLike other blocking queues, a {@code TransferQueue} may be\n capacity bounded.  If so, an attempted transfer operation may\n initially block waiting for available space, and/or subsequently\n block waiting for reception by a consumer.  Note that in a queue\n with zero capacity, such as {@link SynchronousQueue}, {@code put}\n and {@code transfer} are effectively synonymous.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"TransferQueue","qualifiedName":"java.util.concurrent.TransferQueue","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":["java.util.concurrent.BlockingQueue"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"tryTransfer","comment":"Transfers the element to a waiting consumer immediately, if possible.\n\n \u003cp\u003eMore precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n otherwise returning {@code false} without enqueuing the element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"transfer","comment":"Transfers the element to a consumer, waiting if necessary to do so.\n\n \u003cp\u003eMore precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n else waits until the element is received by a consumer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"tryTransfer","comment":"Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.\n\n \u003cp\u003eMore precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n else waits until the element is received by a consumer,\n returning {@code false} if the specified wait time elapses\n before the element can be transferred.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, long, java.util.concurrent.TimeUnit)","flatSignature":"(E, long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasWaitingConsumer","comment":"Returns {@code true} if there is at least one consumer waiting\n to receive an element via {@link #take} or\n timed {@link #poll(long,TimeUnit) poll}.\n The return value represents a momentary state of affairs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWaitingConsumerCount","comment":"Returns an estimate of the number of consumers waiting to\n receive elements via {@link #take} or timed\n {@link #poll(long,TimeUnit) poll}.  The return value is an\n approximation of a momentary state of affairs, that may be\n inaccurate if consumers have completed or given up waiting.\n The value may be useful for monitoring and heuristics, but\n not for synchronization control.  Implementations of this\n method are likely to be noticeably slower than those for\n {@link #hasWaitingConsumer}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.concurrent.LinkedTransferQueue"],"enumConstants":[]}