{"name":"ScheduledExecutorService","comment":"An {@link ExecutorService} that can schedule commands to run after a given\n delay, or to execute periodically.\n\n \u003cp\u003eThe {@code schedule} methods create tasks with various delays\n and return a task object that can be used to cancel or check\n execution. The {@code scheduleAtFixedRate} and\n {@code scheduleWithFixedDelay} methods create and execute tasks\n that run periodically until cancelled.\n\n \u003cp\u003eCommands submitted using the {@link Executor#execute(Runnable)}\n and {@link ExecutorService} {@code submit} methods are scheduled\n with a requested delay of zero. Zero and negative delays (but not\n periods) are also allowed in {@code schedule} methods, and are\n treated as requests for immediate execution.\n\n \u003cp\u003eAll {@code schedule} methods accept \u003cem\u003erelative\u003c/em\u003e delays and\n periods as arguments, not absolute times or dates. It is a simple\n matter to transform an absolute time represented as a {@link\n java.util.Date} to the required form. For example, to schedule at\n a certain future {@code date}, you can use: {@code schedule(task,\n date.getTime() - System.currentTimeMillis(),\n TimeUnit.MILLISECONDS)}. Beware however that expiration of a\n relative delay need not coincide with the current {@code Date} at\n which the task is enabled due to network time synchronization\n protocols, clock drift, or other factors.\n\n \u003cp\u003eThe {@link Executors} class provides convenient factory methods for\n the ScheduledExecutorService implementations provided in this package.\n\n \u003ch3\u003eUsage Example\u003c/h3\u003e\n\n Here is a class with a method that sets up a ScheduledExecutorService\n to beep every ten seconds for an hour:\n\n  \u003cpre\u003e {@code\n import static java.util.concurrent.TimeUnit.*;\n class BeeperControl {\n   private final ScheduledExecutorService scheduler \u003d\n     Executors.newScheduledThreadPool(1);\n\n   public void beepForAnHour() {\n     final Runnable beeper \u003d new Runnable() {\n       public void run() { System.out.println(\"beep\"); }\n     };\n     final ScheduledFuture\u003c?\u003e beeperHandle \u003d\n       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n     scheduler.schedule(new Runnable() {\n       public void run() { beeperHandle.cancel(true); }\n     }, 60 * 60, SECONDS);\n   }\n }}\u003c/pre\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ScheduledExecutorService","qualifiedName":"java.util.concurrent.ScheduledExecutorService","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":["java.util.concurrent.ExecutorService"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"schedule","comment":"Creates and executes a one-shot action that becomes enabled\n after the given delay.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, long, java.util.concurrent.TimeUnit)","flatSignature":"(Runnable, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"schedule","comment":"Creates and executes a ScheduledFuture that becomes enabled after the\n given delay.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.concurrent.Callable\u003cV\u003e, long, java.util.concurrent.TimeUnit)","flatSignature":"(Callable\u003cV\u003e, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"callable","type":{"isPrimitive":false,"simpleName":"Callable","qualifiedName":"java.util.concurrent.Callable","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[{"name":"V","bounds":[]}]},{"name":"scheduleAtFixedRate","comment":"Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the given\n period; that is executions will commence after\n {@code initialDelay} then {@code initialDelay+period}, then\n {@code initialDelay + 2 * period}, and so on.\n If any execution of the task\n encounters an exception, subsequent executions are suppressed.\n Otherwise, the task will only terminate via cancellation or\n termination of the executor.  If any execution of this task\n takes longer than its period, then subsequent executions\n may start late, but will not concurrently execute.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)","flatSignature":"(Runnable, long, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"initialDelay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"period","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"scheduleWithFixedDelay","comment":"Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the\n given delay between the termination of one execution and the\n commencement of the next.  If any execution of the task\n encounters an exception, subsequent executions are suppressed.\n Otherwise, the task will only terminate via cancellation or\n termination of the executor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)","flatSignature":"(Runnable, long, long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"ScheduledFuture","qualifiedName":"java.util.concurrent.ScheduledFuture","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"initialDelay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.util.concurrent.ScheduledThreadPoolExecutor"],"enumConstants":[]}