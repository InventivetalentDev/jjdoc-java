{"name":"Future","comment":"A {@code Future} represents the result of an asynchronous\n computation.  Methods are provided to check if the computation is\n complete, to wait for its completion, and to retrieve the result of\n the computation.  The result can only be retrieved using method\n {@code get} when the computation has completed, blocking if\n necessary until it is ready.  Cancellation is performed by the\n {@code cancel} method.  Additional methods are provided to\n determine if the task completed normally or was cancelled. Once a\n computation has completed, the computation cannot be cancelled.\n If you would like to use a {@code Future} for the sake\n of cancellability but not provide a usable result, you can\n declare types of the form {@code Future\u003c?\u003e} and\n return {@code null} as a result of the underlying task.\n\n \u003cp\u003e\n \u003cb\u003eSample Usage\u003c/b\u003e (Note that the following classes are all\n made-up.)\n \u003cpre\u003e {@code\n interface ArchiveSearcher { String search(String target); }\n class App {\n   ExecutorService executor \u003d ...\n   ArchiveSearcher searcher \u003d ...\n   void showSearch(final String target)\n       throws InterruptedException {\n     Future\u003cString\u003e future\n       \u003d executor.submit(new Callable\u003cString\u003e() {\n         public String call() {\n             return searcher.search(target);\n         }});\n     displayOtherThings(); // do other things while searching\n     try {\n       displayText(future.get()); // use future\n     } catch (ExecutionException ex) { cleanup(); return; }\n   }\n }}\u003c/pre\u003e\n\n The {@link FutureTask} class is an implementation of {@code Future} that\n implements {@code Runnable}, and so may be executed by an {@code Executor}.\n For example, the above construction with {@code submit} could be replaced by:\n  \u003cpre\u003e {@code\n FutureTask\u003cString\u003e future \u003d\n   new FutureTask\u003cString\u003e(new Callable\u003cString\u003e() {\n     public String call() {\n       return searcher.search(target);\n   }});\n executor.execute(future);}\u003c/pre\u003e\n\n \u003cp\u003eMemory consistency effects: Actions taken by the asynchronous computation\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e \u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n actions following the corresponding {@code Future.get()} in another thread.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Future","qualifiedName":"java.util.concurrent.Future","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"cancel","comment":"Attempts to cancel execution of this task.  This attempt will\n fail if the task has already completed, has already been cancelled,\n or could not be cancelled for some other reason. If successful,\n and this task has not started when {@code cancel} is called,\n this task should never run.  If the task has already started,\n then the {@code mayInterruptIfRunning} parameter determines\n whether the thread executing this task should be interrupted in\n an attempt to stop the task.\n\n \u003cp\u003eAfter this method returns, subsequent calls to {@link #isDone} will\n always return {@code true}.  Subsequent calls to {@link #isCancelled}\n will always return {@code true} if this method returned {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"mayInterruptIfRunning","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isCancelled","comment":"Returns {@code true} if this task was cancelled before it completed\n normally.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isDone","comment":"Returns {@code true} if this task completed.\n\n Completion may be due to normal termination, an exception, or\n cancellation -- in all of these cases, this method will return\n {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Waits if necessary for the computation to complete, and then\n retrieves its result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"V","bounds":[]}],"subInterfaces":["java.util.concurrent.ScheduledFuture","java.util.concurrent.RunnableFuture","java.util.concurrent.ForkJoinTask","java.util.concurrent.CompletableFuture"],"enumConstants":[]}