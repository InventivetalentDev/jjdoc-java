{"name":"Executor","comment":"An object that executes submitted {@link Runnable} tasks. This\n interface provides a way of decoupling task submission from the\n mechanics of how each task will be run, including details of thread\n use, scheduling, etc.  An {@code Executor} is normally used\n instead of explicitly creating threads. For example, rather than\n invoking {@code new Thread(new(RunnableTask())).start()} for each\n of a set of tasks, you might use:\n\n \u003cpre\u003e\n Executor executor \u003d \u003cem\u003eanExecutor\u003c/em\u003e;\n executor.execute(new RunnableTask1());\n executor.execute(new RunnableTask2());\n ...\n \u003c/pre\u003e\n\n However, the {@code Executor} interface does not strictly\n require that execution be asynchronous. In the simplest case, an\n executor can run the submitted task immediately in the caller\u0027s\n thread:\n\n  \u003cpre\u003e {@code\n class DirectExecutor implements Executor {\n   public void execute(Runnable r) {\n     r.run();\n   }\n }}\u003c/pre\u003e\n\n More typically, tasks are executed in some thread other\n than the caller\u0027s thread.  The executor below spawns a new thread\n for each task.\n\n  \u003cpre\u003e {@code\n class ThreadPerTaskExecutor implements Executor {\n   public void execute(Runnable r) {\n     new Thread(r).start();\n   }\n }}\u003c/pre\u003e\n\n Many {@code Executor} implementations impose some sort of\n limitation on how and when tasks are scheduled.  The executor below\n serializes the submission of tasks to a second executor,\n illustrating a composite executor.\n\n  \u003cpre\u003e {@code\n class SerialExecutor implements Executor {\n   final Queue\u003cRunnable\u003e tasks \u003d new ArrayDeque\u003cRunnable\u003e();\n   final Executor executor;\n   Runnable active;\n\n   SerialExecutor(Executor executor) {\n     this.executor \u003d executor;\n   }\n\n   public synchronized void execute(final Runnable r) {\n     tasks.offer(new Runnable() {\n       public void run() {\n         try {\n           r.run();\n         } finally {\n           scheduleNext();\n         }\n       }\n     });\n     if (active \u003d\u003d null) {\n       scheduleNext();\n     }\n   }\n\n   protected synchronized void scheduleNext() {\n     if ((active \u003d tasks.poll()) !\u003d null) {\n       executor.execute(active);\n     }\n   }\n }}\u003c/pre\u003e\n\n The {@code Executor} implementations provided in this package\n implement {@link ExecutorService}, which is a more extensive\n interface.  The {@link ThreadPoolExecutor} class provides an\n extensible thread pool implementation. The {@link Executors} class\n provides convenient factory methods for these Executors.\n\n \u003cp\u003eMemory consistency effects: Actions in a thread prior to\n submitting a {@code Runnable} object to an {@code Executor}\n \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e\n its execution begins, perhaps in another thread.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Executor","qualifiedName":"java.util.concurrent.Executor","dimension":"","elementType":{},"package":"java.util.concurrent","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"execute","comment":"Executes the given command at some time in the future.  The command\n may execute in a new thread, in a pooled thread, or in the calling\n thread, at the discretion of the {@code Executor} implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.util.concurrent.ExecutorService"],"enumConstants":[]}