{"name":"TreeMap","comment":"A Red-Black tree based {@link NavigableMap} implementation.\n The map is sorted according to the {@linkplain Comparable natural\n ordering} of its keys, or by a {@link Comparator} provided at map\n creation time, depending on which constructor is used.\n\n \u003cp\u003eThis implementation provides guaranteed log(n) time cost for the\n {@code containsKey}, {@code get}, {@code put} and {@code remove}\n operations.  Algorithms are adaptations of those in Cormen, Leiserson, and\n Rivest\u0027s \u003cem\u003eIntroduction to Algorithms\u003c/em\u003e.\n\n \u003cp\u003eNote that the ordering maintained by a tree map, like any sorted map, and\n whether or not an explicit comparator is provided, must be \u003cem\u003econsistent\n with {@code equals}\u003c/em\u003e if this sorted map is to correctly implement the\n {@code Map} interface.  (See {@code Comparable} or {@code Comparator} for a\n precise definition of \u003cem\u003econsistent with equals\u003c/em\u003e.)  This is so because\n the {@code Map} interface is defined in terms of the {@code equals}\n operation, but a sorted map performs all key comparisons using its {@code\n compareTo} (or {@code compare}) method, so two keys that are deemed equal by\n this method are, from the standpoint of the sorted map, equal.  The behavior\n of a sorted map \u003cem\u003eis\u003c/em\u003e well-defined even if its ordering is\n inconsistent with {@code equals}; it just fails to obey the general contract\n of the {@code Map} interface.\n\n \u003cp\u003e\u003cstrong\u003eNote that this implementation is not synchronized.\u003c/strong\u003e\n If multiple threads access a map concurrently, and at least one of the\n threads modifies the map structurally, it \u003cem\u003emust\u003c/em\u003e be synchronized\n externally.  (A structural modification is any operation that adds or\n deletes one or more mappings; merely changing the value associated\n with an existing key is not a structural modification.)  This is\n typically accomplished by synchronizing on some object that naturally\n encapsulates the map.\n If no such object exists, the map should be \"wrapped\" using the\n {@link Collections#synchronizedSortedMap Collections.synchronizedSortedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map: \u003cpre\u003e\n   SortedMap m \u003d Collections.synchronizedSortedMap(new TreeMap(...));\u003c/pre\u003e\n\n \u003cp\u003eThe iterators returned by the {@code iterator} method of the collections\n returned by all of this class\u0027s \"collection view methods\" are\n \u003cem\u003efail-fast\u003c/em\u003e: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator\u0027s own\n {@code remove} method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n \u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   \u003cem\u003ethe fail-fast behavior of iterators\n should be used only to detect bugs.\u003c/em\u003e\n\n \u003cp\u003eAll {@code Map.Entry} pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do \u003cstrong\u003enot\u003c/strong\u003e support the {@code Entry.setValue}\n method. (Note however that it is possible to change mappings in the\n associated map using {@code put}.)\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"TreeMap","qualifiedName":"java.util.TreeMap","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractMap","interfaces":["java.util.NavigableMap","java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"TreeMap","comment":"Constructs a new, empty tree map, using the natural ordering of its\n keys.  All keys inserted into the map must implement the {@link\n Comparable} interface.  Furthermore, all such keys must be\n \u003cem\u003emutually comparable\u003c/em\u003e: {@code k1.compareTo(k2)} must not throw\n a {@code ClassCastException} for any keys {@code k1} and\n {@code k2} in the map.  If the user attempts to put a key into the\n map that violates this constraint (for example, the user attempts to\n put a string key into a map whose keys are integers), the\n {@code put(Object key, Object value)} call will throw a\n {@code ClassCastException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"TreeMap","comment":"Constructs a new, empty tree map, ordered according to the given\n comparator.  All keys inserted into the map must be \u003cem\u003emutually\n comparable\u003c/em\u003e by the given comparator: {@code comparator.compare(k1,\n k2)} must not throw a {@code ClassCastException} for any keys\n {@code k1} and {@code k2} in the map.  If the user attempts to put\n a key into the map that violates this constraint, the {@code put(Object\n key, Object value)} call will throw a\n {@code ClassCastException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super K\u003e)","flatSignature":"(Comparator\u003c? super K\u003e)","parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"TreeMap","comment":"Constructs a new tree map containing the same mappings as the given\n map, ordered according to the \u003cem\u003enatural ordering\u003c/em\u003e of its keys.\n All keys inserted into the new map must implement the {@link\n Comparable} interface.  Furthermore, all such keys must be\n \u003cem\u003emutually comparable\u003c/em\u003e: {@code k1.compareTo(k2)} must not throw\n a {@code ClassCastException} for any keys {@code k1} and\n {@code k2} in the map.  This method runs in n*log(n) time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"TreeMap","comment":"Constructs a new tree map containing the same mappings and\n using the same ordering as the specified sorted map.  This\n method runs in linear time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.SortedMap\u003cK, ? extends V\u003e)","flatSignature":"(SortedMap\u003cK, ? extends V\u003e)","parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"size","comment":"Returns the number of key-value mappings in this map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"containsKey","comment":"Returns {@code true} if this map contains a mapping for the specified\n key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsValue","comment":"Returns {@code true} if this map maps one or more keys to the\n specified value.  More formally, returns {@code true} if and only if\n this map contains at least one mapping to a value {@code v} such\n that {@code (value\u003d\u003dnull ? v\u003d\u003dnull : value.equals(v))}.  This\n operation will probably require time linear in the map size for\n most implementations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n \u003cp\u003eMore formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key} compares\n equal to {@code k} according to the map\u0027s ordering, then this\n method returns {@code v}; otherwise it returns {@code null}.\n (There can be at most one such mapping.)\n\n \u003cp\u003eA return value of {@code null} does not \u003cem\u003enecessarily\u003c/em\u003e\n indicate that the map contains no mapping for the key; it\u0027s also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"comparator","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"firstKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putAll","comment":"Copies all of the mappings from the specified map to this map.\n These mappings replace any mappings that this map had for any\n of the keys currently in the specified map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"map","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the mapping for this key from this TreeMap if present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the mappings from this map.\n The map will be empty after this call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clone","comment":"Returns a shallow copy of this {@code TreeMap} instance. (The keys and\n values themselves are not cloned.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"firstEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lastEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollFirstEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollLastEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lowerEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"lowerKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"floorEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"floorKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"ceilingEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"ceilingKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"higherEntry","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"Entry","qualifiedName":"java.util.Map.Entry","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"higherKey","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link Set} view of the keys contained in this map.\n\n \u003cp\u003eThe set\u0027s iterator returns the keys in ascending order.\n The set\u0027s spliterator is\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e,\n \u003cem\u003efail-fast\u003c/em\u003e, and additionally reports {@link Spliterator#SORTED}\n and {@link Spliterator#ORDERED} with an encounter order that is ascending\n key order.  The spliterator\u0027s comparator (see\n {@link java.util.Spliterator#getComparator()}) is {@code null} if\n the tree map\u0027s comparator (see {@link #comparator()}) is {@code null}.\n Otherwise, the spliterator\u0027s comparator is the same as or imposes the\n same total ordering as the tree map\u0027s comparator.\n\n \u003cp\u003eThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own {@code remove} operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"navigableKeySet","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingKeySet","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"values","comment":"Returns a {@link Collection} view of the values contained in this map.\n\n \u003cp\u003eThe collection\u0027s iterator returns the values in ascending order\n of the corresponding keys. The collection\u0027s spliterator is\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e,\n \u003cem\u003efail-fast\u003c/em\u003e, and additionally reports {@link Spliterator#ORDERED}\n with an encounter order that is ascending order of the corresponding\n keys.\n\n \u003cp\u003eThe collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator\u0027s own {@code remove} operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Collection.remove}, {@code removeAll},\n {@code retainAll} and {@code clear} operations.  It does not\n support the {@code add} or {@code addAll} operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"entrySet","comment":"Returns a {@link Set} view of the mappings contained in this map.\n\n \u003cp\u003eThe set\u0027s iterator returns the entries in ascending key order. The\n sets\u0027s spliterator is\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e,\n \u003cem\u003efail-fast\u003c/em\u003e, and additionally reports {@link Spliterator#SORTED} and\n {@link Spliterator#ORDERED} with an encounter order that is ascending key\n order.\n\n \u003cp\u003eThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own {@code remove} operation, or through the\n {@code setValue} operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Set.remove}, {@code removeAll}, {@code retainAll} and\n {@code clear} operations.  It does not support the\n {@code add} or {@code addAll} operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"subMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean, K, boolean)","flatSignature":"(K, boolean, K, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"fromInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"headMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tailMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, boolean)","flatSignature":"(K, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableMap","qualifiedName":"java.util.NavigableMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, K)","flatSignature":"(K, K)","returnType":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"headMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"toKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"tailMap","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K)","flatSignature":"(K)","returnType":{"isPrimitive":false,"simpleName":"SortedMap","qualifiedName":"java.util.SortedMap","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromKey","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}}],"typeParameters":[]},{"name":"replace","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, V)","flatSignature":"(K, V, V)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"oldValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"replace","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"function","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"enumConstants":[]}