{"name":"SortedSet","comment":"A {@link Set} that further provides a \u003ci\u003etotal ordering\u003c/i\u003e on its elements.\n The elements are ordered using their {@linkplain Comparable natural\n ordering}, or by a {@link Comparator} typically provided at sorted\n set creation time.  The set\u0027s iterator will traverse the set in\n ascending element order. Several additional operations are provided\n to take advantage of the ordering.  (This interface is the set\n analogue of {@link SortedMap}.)\n\n \u003cp\u003eAll elements inserted into a sorted set must implement the \u003ctt\u003eComparable\u003c/tt\u003e\n interface (or be accepted by the specified comparator).  Furthermore, all\n such elements must be \u003ci\u003emutually comparable\u003c/i\u003e: \u003ctt\u003ee1.compareTo(e2)\u003c/tt\u003e\n (or \u003ctt\u003ecomparator.compare(e1, e2)\u003c/tt\u003e) must not throw a\n \u003ctt\u003eClassCastException\u003c/tt\u003e for any elements \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e in\n the sorted set.  Attempts to violate this restriction will cause the\n offending method or constructor invocation to throw a\n \u003ctt\u003eClassCastException\u003c/tt\u003e.\n\n \u003cp\u003eNote that the ordering maintained by a sorted set (whether or not an\n explicit comparator is provided) must be \u003ci\u003econsistent with equals\u003c/i\u003e if\n the sorted set is to correctly implement the \u003ctt\u003eSet\u003c/tt\u003e interface.  (See\n the \u003ctt\u003eComparable\u003c/tt\u003e interface or \u003ctt\u003eComparator\u003c/tt\u003e interface for a\n precise definition of \u003ci\u003econsistent with equals\u003c/i\u003e.)  This is so because\n the \u003ctt\u003eSet\u003c/tt\u003e interface is defined in terms of the \u003ctt\u003eequals\u003c/tt\u003e\n operation, but a sorted set performs all element comparisons using its\n \u003ctt\u003ecompareTo\u003c/tt\u003e (or \u003ctt\u003ecompare\u003c/tt\u003e) method, so two elements that are\n deemed equal by this method are, from the standpoint of the sorted set,\n equal.  The behavior of a sorted set \u003ci\u003eis\u003c/i\u003e well-defined even if its\n ordering is inconsistent with equals; it just fails to obey the general\n contract of the \u003ctt\u003eSet\u003c/tt\u003e interface.\n\n \u003cp\u003eAll general-purpose sorted set implementation classes should\n provide four \"standard\" constructors: 1) A void (no arguments)\n constructor, which creates an empty sorted set sorted according to\n the natural ordering of its elements.  2) A constructor with a\n single argument of type \u003ctt\u003eComparator\u003c/tt\u003e, which creates an empty\n sorted set sorted according to the specified comparator.  3) A\n constructor with a single argument of type \u003ctt\u003eCollection\u003c/tt\u003e,\n which creates a new sorted set with the same elements as its\n argument, sorted according to the natural ordering of the elements.\n 4) A constructor with a single argument of type \u003ctt\u003eSortedSet\u003c/tt\u003e,\n which creates a new sorted set with the same elements and the same\n ordering as the input sorted set.  There is no way to enforce this\n recommendation, as interfaces cannot contain constructors.\n\n \u003cp\u003eNote: several methods return subsets with restricted ranges.\n Such ranges are \u003ci\u003ehalf-open\u003c/i\u003e, that is, they include their low\n endpoint but not their high endpoint (where applicable).\n If you need a \u003ci\u003eclosed range\u003c/i\u003e (which includes both endpoints), and\n the element type allows for calculation of the successor of a given\n value, merely request the subrange from \u003ctt\u003elowEndpoint\u003c/tt\u003e to\n \u003ctt\u003esuccessor(highEndpoint)\u003c/tt\u003e.  For example, suppose that \u003ctt\u003es\u003c/tt\u003e\n is a sorted set of strings.  The following idiom obtains a view\n containing all of the strings in \u003ctt\u003es\u003c/tt\u003e from \u003ctt\u003elow\u003c/tt\u003e to\n \u003ctt\u003ehigh\u003c/tt\u003e, inclusive:\u003cpre\u003e\n   SortedSet\u0026lt;String\u0026gt; sub \u003d s.subSet(low, high+\"\\0\");\u003c/pre\u003e\n\n A similar technique can be used to generate an \u003ci\u003eopen range\u003c/i\u003e (which\n contains neither endpoint).  The following idiom obtains a view\n containing all of the Strings in \u003ctt\u003es\u003c/tt\u003e from \u003ctt\u003elow\u003c/tt\u003e to\n \u003ctt\u003ehigh\u003c/tt\u003e, exclusive:\u003cpre\u003e\n   SortedSet\u0026lt;String\u0026gt; sub \u003d s.subSet(low+\"\\0\", high);\u003c/pre\u003e\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.Set"],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"comparator","comment":"Returns the comparator used to order the elements in this set,\n or \u003ctt\u003enull\u003c/tt\u003e if this set uses the {@linkplain Comparable\n natural ordering} of its elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"subSet","comment":"Returns a view of the portion of this set whose elements range\n from \u003ctt\u003efromElement\u003c/tt\u003e, inclusive, to \u003ctt\u003etoElement\u003c/tt\u003e,\n exclusive.  (If \u003ctt\u003efromElement\u003c/tt\u003e and \u003ctt\u003etoElement\u003c/tt\u003e are\n equal, the returned set is empty.)  The returned set is backed\n by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n \u003cp\u003eThe returned set will throw an \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e\n on an attempt to insert an element outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, E)","flatSignature":"(E, E)","returnType":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"toElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"headSet","comment":"Returns a view of the portion of this set whose elements are\n strictly less than \u003ctt\u003etoElement\u003c/tt\u003e.  The returned set is\n backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n \u003cp\u003eThe returned set will throw an \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e\n on an attempt to insert an element outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"tailSet","comment":"Returns a view of the portion of this set whose elements are\n greater than or equal to \u003ctt\u003efromElement\u003c/tt\u003e.  The returned\n set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n \u003cp\u003eThe returned set will throw an \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e\n on an attempt to insert an element outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"first","comment":"Returns the first (lowest) element currently in this set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"last","comment":"Returns the last (highest) element currently in this set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator} over the elements in this sorted set.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#DISTINCT},\n {@link Spliterator#SORTED} and {@link Spliterator#ORDERED}.\n Implementations should document the reporting of additional\n characteristic values.\n\n \u003cp\u003eThe spliterator\u0027s comparator (see\n {@link java.util.Spliterator#getComparator()}) must be {@code null} if\n the sorted set\u0027s comparator (see {@link #comparator()}) is {@code null}.\n Otherwise, the spliterator\u0027s comparator must be the same as or impose the\n same total ordering as the sorted set\u0027s comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.NavigableSet"],"enumConstants":[]}