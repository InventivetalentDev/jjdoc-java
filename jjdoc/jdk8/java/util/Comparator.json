{"name":"Comparator","comment":"A comparison function, which imposes a \u003ci\u003etotal ordering\u003c/i\u003e on some\n collection of objects.  Comparators can be passed to a sort method (such\n as {@link Collections#sort(List,Comparator) Collections.sort} or {@link\n Arrays#sort(Object[],Comparator) Arrays.sort}) to allow precise control\n over the sort order.  Comparators can also be used to control the order of\n certain data structures (such as {@link SortedSet sorted sets} or {@link\n SortedMap sorted maps}), or to provide an ordering for collections of\n objects that don\u0027t have a {@link Comparable natural ordering}.\u003cp\u003e\n\n The ordering imposed by a comparator \u003ctt\u003ec\u003c/tt\u003e on a set of elements\n \u003ctt\u003eS\u003c/tt\u003e is said to be \u003ci\u003econsistent with equals\u003c/i\u003e if and only if\n \u003ctt\u003ec.compare(e1, e2)\u003d\u003d0\u003c/tt\u003e has the same boolean value as\n \u003ctt\u003ee1.equals(e2)\u003c/tt\u003e for every \u003ctt\u003ee1\u003c/tt\u003e and \u003ctt\u003ee2\u003c/tt\u003e in\n \u003ctt\u003eS\u003c/tt\u003e.\u003cp\u003e\n\n Caution should be exercised when using a comparator capable of imposing an\n ordering inconsistent with equals to order a sorted set (or sorted map).\n Suppose a sorted set (or sorted map) with an explicit comparator \u003ctt\u003ec\u003c/tt\u003e\n is used with elements (or keys) drawn from a set \u003ctt\u003eS\u003c/tt\u003e.  If the\n ordering imposed by \u003ctt\u003ec\u003c/tt\u003e on \u003ctt\u003eS\u003c/tt\u003e is inconsistent with equals,\n the sorted set (or sorted map) will behave \"strangely.\"  In particular the\n sorted set (or sorted map) will violate the general contract for set (or\n map), which is defined in terms of \u003ctt\u003eequals\u003c/tt\u003e.\u003cp\u003e\n\n For example, suppose one adds two elements {@code a} and {@code b} such that\n {@code (a.equals(b) \u0026\u0026 c.compare(a, b) !\u003d 0)}\n to an empty {@code TreeSet} with comparator {@code c}.\n The second {@code add} operation will return\n true (and the size of the tree set will increase) because {@code a} and\n {@code b} are not equivalent from the tree set\u0027s perspective, even though\n this is contrary to the specification of the\n {@link Set#add Set.add} method.\u003cp\u003e\n\n Note: It is generally a good idea for comparators to also implement\n \u003ctt\u003ejava.io.Serializable\u003c/tt\u003e, as they may be used as ordering methods in\n serializable data structures (like {@link TreeSet}, {@link TreeMap}).  In\n order for the data structure to serialize successfully, the comparator (if\n provided) must implement \u003ctt\u003eSerializable\u003c/tt\u003e.\u003cp\u003e\n\n For the mathematically inclined, the \u003ci\u003erelation\u003c/i\u003e that defines the\n \u003ci\u003eimposed ordering\u003c/i\u003e that a given comparator \u003ctt\u003ec\u003c/tt\u003e imposes on a\n given set of objects \u003ctt\u003eS\u003c/tt\u003e is:\u003cpre\u003e\n       {(x, y) such that c.compare(x, y) \u0026lt;\u003d 0}.\n \u003c/pre\u003e The \u003ci\u003equotient\u003c/i\u003e for this total order is:\u003cpre\u003e\n       {(x, y) such that c.compare(x, y) \u003d\u003d 0}.\n \u003c/pre\u003e\n\n It follows immediately from the contract for \u003ctt\u003ecompare\u003c/tt\u003e that the\n quotient is an \u003ci\u003eequivalence relation\u003c/i\u003e on \u003ctt\u003eS\u003c/tt\u003e, and that the\n imposed ordering is a \u003ci\u003etotal order\u003c/i\u003e on \u003ctt\u003eS\u003c/tt\u003e.  When we say that\n the ordering imposed by \u003ctt\u003ec\u003c/tt\u003e on \u003ctt\u003eS\u003c/tt\u003e is \u003ci\u003econsistent with\n equals\u003c/i\u003e, we mean that the quotient for the ordering is the equivalence\n relation defined by the objects\u0027 {@link Object#equals(Object)\n equals(Object)} method(s):\u003cpre\u003e\n     {(x, y) such that x.equals(y)}. \u003c/pre\u003e\n\n \u003cp\u003eUnlike {@code Comparable}, a comparator may optionally permit\n comparison of null arguments, while maintaining the requirements for\n an equivalence relation.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{},"package":"java.util","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"compare","comment":"Compares its two arguments for order.  Returns a negative integer,\n zero, or a positive integer as the first argument is less than, equal\n to, or greater than the second.\u003cp\u003e\n\n In the foregoing description, the notation\n \u003ctt\u003esgn(\u003c/tt\u003e\u003ci\u003eexpression\u003c/i\u003e\u003ctt\u003e)\u003c/tt\u003e designates the mathematical\n \u003ci\u003esignum\u003c/i\u003e function, which is defined to return one of \u003ctt\u003e-1\u003c/tt\u003e,\n \u003ctt\u003e0\u003c/tt\u003e, or \u003ctt\u003e1\u003c/tt\u003e according to whether the value of\n \u003ci\u003eexpression\u003c/i\u003e is negative, zero or positive.\u003cp\u003e\n\n The implementor must ensure that \u003ctt\u003esgn(compare(x, y)) \u003d\u003d\n -sgn(compare(y, x))\u003c/tt\u003e for all \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e.  (This\n implies that \u003ctt\u003ecompare(x, y)\u003c/tt\u003e must throw an exception if and only\n if \u003ctt\u003ecompare(y, x)\u003c/tt\u003e throws an exception.)\u003cp\u003e\n\n The implementor must also ensure that the relation is transitive:\n \u003ctt\u003e((compare(x, y)\u0026gt;0) \u0026amp;\u0026amp; (compare(y, z)\u0026gt;0))\u003c/tt\u003e implies\n \u003ctt\u003ecompare(x, z)\u0026gt;0\u003c/tt\u003e.\u003cp\u003e\n\n Finally, the implementor must ensure that \u003ctt\u003ecompare(x, y)\u003d\u003d0\u003c/tt\u003e\n implies that \u003ctt\u003esgn(compare(x, z))\u003d\u003dsgn(compare(y, z))\u003c/tt\u003e for all\n \u003ctt\u003ez\u003c/tt\u003e.\u003cp\u003e\n\n It is generally the case, but \u003ci\u003enot\u003c/i\u003e strictly required that\n \u003ctt\u003e(compare(x, y)\u003d\u003d0) \u003d\u003d (x.equals(y))\u003c/tt\u003e.  Generally speaking,\n any comparator that violates this condition should clearly indicate\n this fact.  The recommended language is \"Note: this comparator\n imposes orderings that are inconsistent with equals.\"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, T)","flatSignature":"(T, T)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o1","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"o2","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"equals","comment":"Indicates whether some other object is \u0026quot;equal to\u0026quot; this\n comparator.  This method must obey the general contract of\n {@link Object#equals(Object)}.  Additionally, this method can return\n \u003ctt\u003etrue\u003c/tt\u003e \u003ci\u003eonly\u003c/i\u003e if the specified object is also a comparator\n and it imposes the same ordering as this comparator.  Thus,\n \u003ccode\u003ecomp1.equals(comp2)\u003c/code\u003e implies that \u003ctt\u003esgn(comp1.compare(o1,\n o2))\u003d\u003dsgn(comp2.compare(o1, o2))\u003c/tt\u003e for every object reference\n \u003ctt\u003eo1\u003c/tt\u003e and \u003ctt\u003eo2\u003c/tt\u003e.\u003cp\u003e\n\n Note that it is \u003ci\u003ealways\u003c/i\u003e safe \u003ci\u003enot\u003c/i\u003e to override\n \u003ctt\u003eObject.equals(Object)\u003c/tt\u003e.  However, overriding this method may,\n in some cases, improve performance by allowing programs to determine\n that two distinct comparators impose the same order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reversed","comment":"Returns a comparator that imposes the reverse ordering of this\n comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"thenComparing","comment":"Returns a lexicographic-order comparator with another comparator.\n If this {@code Comparator} considers two elements equal, i.e.\n {@code compare(a, b) \u003d\u003d 0}, {@code other} is used to determine the order.\n\n \u003cp\u003eThe returned comparator is serializable if the specified comparator\n is also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenComparing","comment":"Returns a lexicographic-order comparator with a function that\n extracts a key to be compared with the given {@code Comparator}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.Comparator\u003c? super U\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e, Comparator\u003c? super U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"keyComparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"thenComparing","comment":"Returns a lexicographic-order comparator with a function that\n extracts a {@code Comparable} sort key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":["java.lang.Comparable"]}]},{"name":"thenComparingInt","comment":"Returns a lexicographic-order comparator with a function that\n extracts a {@code int} sort key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToIntFunction\u003c? super T\u003e)","flatSignature":"(ToIntFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenComparingLong","comment":"Returns a lexicographic-order comparator with a function that\n extracts a {@code long} sort key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToLongFunction\u003c? super T\u003e)","flatSignature":"(ToLongFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"thenComparingDouble","comment":"Returns a lexicographic-order comparator with a function that\n extracts a {@code double} sort key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToDoubleFunction\u003c? super T\u003e)","flatSignature":"(ToDoubleFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverseOrder","comment":"Returns a comparator that imposes the reverse of the \u003cem\u003enatural\n ordering\u003c/em\u003e.\n\n \u003cp\u003eThe returned comparator is serializable and throws {@link\n NullPointerException} when comparing {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":["java.lang.Comparable"]}]},{"name":"naturalOrder","comment":"Returns a comparator that compares {@link Comparable} objects in natural\n order.\n\n \u003cp\u003eThe returned comparator is serializable and throws {@link\n NullPointerException} when comparing {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":["java.lang.Comparable"]}]},{"name":"nullsFirst","comment":"Returns a null-friendly comparator that considers {@code null} to be\n less than non-null. When both are {@code null}, they are considered\n equal. If both are non-null, the specified {@code Comparator} is used\n to determine the order. If the specified comparator is {@code null},\n then the returned comparator considers all non-null values to be equal.\n\n \u003cp\u003eThe returned comparator is serializable if the specified comparator\n is serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"nullsLast","comment":"Returns a null-friendly comparator that considers {@code null} to be\n greater than non-null. When both are {@code null}, they are considered\n equal. If both are non-null, the specified {@code Comparator} is used\n to determine the order. If the specified comparator is {@code null},\n then the returned comparator considers all non-null values to be equal.\n\n \u003cp\u003eThe returned comparator is serializable if the specified comparator\n is serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super T\u003e)","flatSignature":"(Comparator\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"comparing","comment":"Accepts a function that extracts a sort key from a type {@code T}, and\n returns a {@code Comparator\u003cT\u003e} that compares by that sort key using\n the specified {@link Comparator}.\n\n \u003cp\u003eThe returned comparator is serializable if the specified function\n and comparator are both serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e, java.util.Comparator\u003c? super U\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e, Comparator\u003c? super U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}},{"name":"keyComparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"U","bounds":[]}]},{"name":"comparing","comment":"Accepts a function that extracts a {@link java.lang.Comparable\n Comparable} sort key from a type {@code T}, and returns a {@code\n Comparator\u003cT\u003e} that compares by that sort key.\n\n \u003cp\u003eThe returned comparator is serializable if the specified function\n is also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Function\u003c? super T, ? extends U\u003e)","flatSignature":"(Function\u003c? super T, ? extends U\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]},{"name":"U","bounds":["java.lang.Comparable"]}]},{"name":"comparingInt","comment":"Accepts a function that extracts an {@code int} sort key from a type\n {@code T}, and returns a {@code Comparator\u003cT\u003e} that compares by that\n sort key.\n\n \u003cp\u003eThe returned comparator is serializable if the specified function\n is also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToIntFunction\u003c? super T\u003e)","flatSignature":"(ToIntFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"ToIntFunction","qualifiedName":"java.util.function.ToIntFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"comparingLong","comment":"Accepts a function that extracts a {@code long} sort key from a type\n {@code T}, and returns a {@code Comparator\u003cT\u003e} that compares by that\n sort key.\n\n \u003cp\u003eThe returned comparator is serializable if the specified function is\n also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToLongFunction\u003c? super T\u003e)","flatSignature":"(ToLongFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"ToLongFunction","qualifiedName":"java.util.function.ToLongFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"comparingDouble","comment":"Accepts a function that extracts a {@code double} sort key from a type\n {@code T}, and returns a {@code Comparator\u003cT\u003e} that compares by that\n sort key.\n\n \u003cp\u003eThe returned comparator is serializable if the specified function\n is also serializable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.ToDoubleFunction\u003c? super T\u003e)","flatSignature":"(ToDoubleFunction\u003c? super T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"keyExtractor","type":{"isPrimitive":false,"simpleName":"ToDoubleFunction","qualifiedName":"java.util.function.ToDoubleFunction","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]}],"typeParameters":[{"name":"T","bounds":[]}],"subInterfaces":["java.text.Collator"],"enumConstants":[]}