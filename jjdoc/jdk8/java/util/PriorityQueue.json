{"name":"PriorityQueue","comment":"An unbounded priority {@linkplain Queue queue} based on a priority heap.\n The elements of the priority queue are ordered according to their\n {@linkplain Comparable natural ordering}, or by a {@link Comparator}\n provided at queue construction time, depending on which constructor is\n used.  A priority queue does not permit {@code null} elements.\n A priority queue relying on natural ordering also does not permit\n insertion of non-comparable objects (doing so may result in\n {@code ClassCastException}).\n\n \u003cp\u003eThe \u003cem\u003ehead\u003c/em\u003e of this queue is the \u003cem\u003eleast\u003c/em\u003e element\n with respect to the specified ordering.  If multiple elements are\n tied for least value, the head is one of those elements -- ties are\n broken arbitrarily.  The queue retrieval operations {@code poll},\n {@code remove}, {@code peek}, and {@code element} access the\n element at the head of the queue.\n\n \u003cp\u003eA priority queue is unbounded, but has an internal\n \u003ci\u003ecapacity\u003c/i\u003e governing the size of an array used to store the\n elements on the queue.  It is always at least as large as the queue\n size.  As elements are added to a priority queue, its capacity\n grows automatically.  The details of the growth policy are not\n specified.\n\n \u003cp\u003eThis class and its iterator implement all of the\n \u003cem\u003eoptional\u003c/em\u003e methods of the {@link Collection} and {@link\n Iterator} interfaces.  The Iterator provided in method {@link\n #iterator()} is \u003cem\u003enot\u003c/em\u003e guaranteed to traverse the elements of\n the priority queue in any particular order. If you need ordered\n traversal, consider using {@code Arrays.sort(pq.toArray())}.\n\n \u003cp\u003e\u003cstrong\u003eNote that this implementation is not synchronized.\u003c/strong\u003e\n Multiple threads should not access a {@code PriorityQueue}\n instance concurrently if any of the threads modifies the queue.\n Instead, use the thread-safe {@link\n java.util.concurrent.PriorityBlockingQueue} class.\n\n \u003cp\u003eImplementation note: this implementation provides\n O(log(n)) time for the enqueuing and dequeuing methods\n ({@code offer}, {@code poll}, {@code remove()} and {@code add});\n linear time for the {@code remove(Object)} and {@code contains(Object)}\n methods; and constant time for the retrieval methods\n ({@code peek}, {@code element}, and {@code size}).\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PriorityQueue","qualifiedName":"java.util.PriorityQueue","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractQueue","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} with the default initial\n capacity (11) that orders its elements according to their\n {@linkplain Comparable natural ordering}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} with the specified initial\n capacity that orders its elements according to their\n {@linkplain Comparable natural ordering}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} with the default initial capacity and\n whose elements are ordered according to the specified comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Comparator\u003c? super E\u003e)","flatSignature":"(Comparator\u003c? super E\u003e)","parameters":[{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} with the specified initial capacity\n that orders its elements according to the specified comparator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.util.Comparator\u003c? super E\u003e)","flatSignature":"(int, Comparator\u003c? super E\u003e)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"comparator","type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} containing the elements in the\n specified collection.  If the specified collection is an instance of\n a {@link SortedSet} or is another {@code PriorityQueue}, this\n priority queue will be ordered according to the same ordering.\n Otherwise, this priority queue will be ordered according to the\n {@linkplain Comparable natural ordering} of its elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} containing the elements in the\n specified priority queue.  This priority queue will be\n ordered according to the same ordering as the given priority\n queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.PriorityQueue\u003c? extends E\u003e)","flatSignature":"(PriorityQueue\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"PriorityQueue","qualifiedName":"java.util.PriorityQueue","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PriorityQueue","comment":"Creates a {@code PriorityQueue} containing the elements in the\n specified sorted set.   This priority queue will be ordered\n according to the same ordering as the given sorted set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.SortedSet\u003c? extends E\u003e)","flatSignature":"(SortedSet\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"add","comment":"Inserts the specified element into this priority queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offer","comment":"Inserts the specified element into this priority queue.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"peek","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"remove","comment":"Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.  Returns {@code true} if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contains","comment":"Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this queue.\n The elements are in no particular order.\n\n \u003cp\u003eThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \u003cp\u003eThis method acts as bridge between array-based and collection-based\n APIs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n \u003cp\u003eIf the queue fits in the specified array with room to spare\n (i.e., the array has more elements than the queue), the element in\n the array immediately following the end of the collection is set to\n {@code null}.\n\n \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \u003cp\u003eSuppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n  \u003cpre\u003e {@code String[] y \u003d x.toArray(new String[0]);}\u003c/pre\u003e\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"iterator","comment":"Returns an iterator over the elements in this queue. The iterator\n does not return the elements in any particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clear","comment":"Removes all of the elements from this priority queue.\n The queue will be empty after this call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"comparator","comment":"Returns the comparator used to order the elements in this\n queue, or {@code null} if this queue is sorted according to\n the {@linkplain Comparable natural ordering} of its elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Creates a \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e\n and \u003cem\u003efail-fast\u003c/em\u003e {@link Spliterator} over the elements in this\n queue.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#SIZED},\n {@link Spliterator#SUBSIZED}, and {@link Spliterator#NONNULL}.\n Overriding implementations should document the reporting of additional\n characteristic values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"enumConstants":[]}