{"name":"Timer","comment":"A facility for threads to schedule tasks for future execution in a\n background thread.  Tasks may be scheduled for one-time execution, or for\n repeated execution at regular intervals.\n\n \u003cp\u003eCorresponding to each \u003ctt\u003eTimer\u003c/tt\u003e object is a single background\n thread that is used to execute all of the timer\u0027s tasks, sequentially.\n Timer tasks should complete quickly.  If a timer task takes excessive time\n to complete, it \"hogs\" the timer\u0027s task execution thread.  This can, in\n turn, delay the execution of subsequent tasks, which may \"bunch up\" and\n execute in rapid succession when (and if) the offending task finally\n completes.\n\n \u003cp\u003eAfter the last live reference to a \u003ctt\u003eTimer\u003c/tt\u003e object goes away\n \u003ci\u003eand\u003c/i\u003e all outstanding tasks have completed execution, the timer\u0027s task\n execution thread terminates gracefully (and becomes subject to garbage\n collection).  However, this can take arbitrarily long to occur.  By\n default, the task execution thread does not run as a \u003ci\u003edaemon thread\u003c/i\u003e,\n so it is capable of keeping an application from terminating.  If a caller\n wants to terminate a timer\u0027s task execution thread rapidly, the caller\n should invoke the timer\u0027s \u003ctt\u003ecancel\u003c/tt\u003e method.\n\n \u003cp\u003eIf the timer\u0027s task execution thread terminates unexpectedly, for\n example, because its \u003ctt\u003estop\u003c/tt\u003e method is invoked, any further\n attempt to schedule a task on the timer will result in an\n \u003ctt\u003eIllegalStateException\u003c/tt\u003e, as if the timer\u0027s \u003ctt\u003ecancel\u003c/tt\u003e\n method had been invoked.\n\n \u003cp\u003eThis class is thread-safe: multiple threads can share a single\n \u003ctt\u003eTimer\u003c/tt\u003e object without the need for external synchronization.\n\n \u003cp\u003eThis class does \u003ci\u003enot\u003c/i\u003e offer real-time guarantees: it schedules\n tasks using the \u003ctt\u003eObject.wait(long)\u003c/tt\u003e method.\n\n \u003cp\u003eJava 5.0 introduced the {@code java.util.concurrent} package and\n one of the concurrency utilities therein is the {@link\n java.util.concurrent.ScheduledThreadPoolExecutor\n ScheduledThreadPoolExecutor} which is a thread pool for repeatedly\n executing tasks at a given rate or delay.  It is effectively a more\n versatile replacement for the {@code Timer}/{@code TimerTask}\n combination, as it allows multiple service threads, accepts various\n time units, and doesn\u0027t require subclassing {@code TimerTask} (just\n implement {@code Runnable}).  Configuring {@code\n ScheduledThreadPoolExecutor} with one thread makes it equivalent to\n {@code Timer}.\n\n \u003cp\u003eImplementation note: This class scales to large numbers of concurrently\n scheduled tasks (thousands should present no problem).  Internally,\n it uses a binary heap to represent its task queue, so the cost to schedule\n a task is O(log n), where n is the number of concurrently scheduled tasks.\n\n \u003cp\u003eImplementation note: All constructors start a timer thread.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Timer","qualifiedName":"java.util.Timer","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.3","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Timer","comment":"Creates a new timer.  The associated thread does \u003ci\u003enot\u003c/i\u003e\n {@linkplain Thread#setDaemon run as a daemon}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Timer","comment":"Creates a new timer whose associated thread may be specified to\n {@linkplain Thread#setDaemon run as a daemon}.\n A daemon thread is called for if the timer will be used to\n schedule repeating \"maintenance activities\", which must be\n performed as long as the application is running, but should not\n prolong the lifetime of the application.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","parameters":[{"name":"isDaemon","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Timer","comment":"Creates a new timer whose associated thread has the specified name.\n The associated thread does \u003ci\u003enot\u003c/i\u003e\n {@linkplain Thread#setDaemon run as a daemon}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Timer","comment":"Creates a new timer whose associated thread has the specified name,\n and may be specified to\n {@linkplain Thread#setDaemon run as a daemon}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"isDaemon","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"schedule","comment":"Schedules the specified task for execution after the specified delay.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimerTask, long)","flatSignature":"(TimerTask, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"TimerTask","qualifiedName":"java.util.TimerTask","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"schedule","comment":"Schedules the specified task for execution at the specified time.  If\n the time is in the past, the task is scheduled for immediate execution.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimerTask, java.util.Date)","flatSignature":"(TimerTask, Date)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"TimerTask","qualifiedName":"java.util.TimerTask","dimension":"","elementType":{}}},{"name":"time","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"schedule","comment":"Schedules the specified task for repeated \u003ci\u003efixed-delay execution\u003c/i\u003e,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals separated by the specified period.\n\n \u003cp\u003eIn fixed-delay execution, each execution is scheduled relative to\n the actual execution time of the previous execution.  If an execution\n is delayed for any reason (such as garbage collection or other\n background activity), subsequent executions will be delayed as well.\n In the long run, the frequency of execution will generally be slightly\n lower than the reciprocal of the specified period (assuming the system\n clock underlying \u003ctt\u003eObject.wait(long)\u003c/tt\u003e is accurate).\n\n \u003cp\u003eFixed-delay execution is appropriate for recurring activities\n that require \"smoothness.\"  In other words, it is appropriate for\n activities where it is more important to keep the frequency accurate\n in the short run than in the long run.  This includes most animation\n tasks, such as blinking a cursor at regular intervals.  It also includes\n tasks wherein regular activity is performed in response to human\n input, such as automatically repeating a character as long as a key\n is held down.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimerTask, long, long)","flatSignature":"(TimerTask, long, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"TimerTask","qualifiedName":"java.util.TimerTask","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"period","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"schedule","comment":"Schedules the specified task for repeated \u003ci\u003efixed-delay execution\u003c/i\u003e,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n \u003cp\u003eIn fixed-delay execution, each execution is scheduled relative to\n the actual execution time of the previous execution.  If an execution\n is delayed for any reason (such as garbage collection or other\n background activity), subsequent executions will be delayed as well.\n In the long run, the frequency of execution will generally be slightly\n lower than the reciprocal of the specified period (assuming the system\n clock underlying \u003ctt\u003eObject.wait(long)\u003c/tt\u003e is accurate).  As a\n consequence of the above, if the scheduled first time is in the past,\n it is scheduled for immediate execution.\n\n \u003cp\u003eFixed-delay execution is appropriate for recurring activities\n that require \"smoothness.\"  In other words, it is appropriate for\n activities where it is more important to keep the frequency accurate\n in the short run than in the long run.  This includes most animation\n tasks, such as blinking a cursor at regular intervals.  It also includes\n tasks wherein regular activity is performed in response to human\n input, such as automatically repeating a character as long as a key\n is held down.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimerTask, java.util.Date, long)","flatSignature":"(TimerTask, Date, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"TimerTask","qualifiedName":"java.util.TimerTask","dimension":"","elementType":{}}},{"name":"firstTime","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}},{"name":"period","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"scheduleAtFixedRate","comment":"Schedules the specified task for repeated \u003ci\u003efixed-rate execution\u003c/i\u003e,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals, separated by the specified period.\n\n \u003cp\u003eIn fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n \"catch up.\"  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying \u003ctt\u003eObject.wait(long)\u003c/tt\u003e is accurate).\n\n \u003cp\u003eFixed-rate execution is appropriate for recurring activities that\n are sensitive to \u003ci\u003eabsolute\u003c/i\u003e time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimerTask, long, long)","flatSignature":"(TimerTask, long, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"TimerTask","qualifiedName":"java.util.TimerTask","dimension":"","elementType":{}}},{"name":"delay","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"period","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"scheduleAtFixedRate","comment":"Schedules the specified task for repeated \u003ci\u003efixed-rate execution\u003c/i\u003e,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n \u003cp\u003eIn fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n \"catch up.\"  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying \u003ctt\u003eObject.wait(long)\u003c/tt\u003e is accurate).  As a\n consequence of the above, if the scheduled first time is in the past,\n then any \"missed\" executions will be scheduled for immediate \"catch up\"\n execution.\n\n \u003cp\u003eFixed-rate execution is appropriate for recurring activities that\n are sensitive to \u003ci\u003eabsolute\u003c/i\u003e time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimerTask, java.util.Date, long)","flatSignature":"(TimerTask, Date, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"task","type":{"isPrimitive":false,"simpleName":"TimerTask","qualifiedName":"java.util.TimerTask","dimension":"","elementType":{}}},{"name":"firstTime","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}},{"name":"period","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"cancel","comment":"Terminates this timer, discarding any currently scheduled tasks.\n Does not interfere with a currently executing task (if it exists).\n Once a timer has been terminated, its execution thread terminates\n gracefully, and no more tasks may be scheduled on it.\n\n \u003cp\u003eNote that calling this method from within the run method of a\n timer task that was invoked by this timer absolutely guarantees that\n the ongoing task execution is the last task execution that will ever\n be performed by this timer.\n\n \u003cp\u003eThis method may be called repeatedly; the second and subsequent\n calls have no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"purge","comment":"Removes all cancelled tasks from this timer\u0027s task queue.  \u003ci\u003eCalling\n this method has no effect on the behavior of the timer\u003c/i\u003e, but\n eliminates the references to the cancelled tasks from the queue.\n If there are no external references to these tasks, they become\n eligible for garbage collection.\n\n \u003cp\u003eMost programs will have no need to call this method.\n It is designed for use by the rare application that cancels a large\n number of tasks.  Calling this method trades time for space: the\n runtime of the method may be proportional to n + c log n, where n\n is the number of tasks in the queue and c is the number of cancelled\n tasks.\n\n \u003cp\u003eNote that it is permissible to call this method from within a\n a task scheduled on this timer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}