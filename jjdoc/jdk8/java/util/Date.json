{"name":"Date","comment":"The class \u003ccode\u003eDate\u003c/code\u003e represents a specific instant\n in time, with millisecond precision.\n \u003cp\u003e\n Prior to JDK\u0026nbsp;1.1, the class \u003ccode\u003eDate\u003c/code\u003e had two additional\n functions.  It allowed the interpretation of dates as year, month, day, hour,\n minute, and second values.  It also allowed the formatting and parsing\n of date strings.  Unfortunately, the API for these functions was not\n amenable to internationalization.  As of JDK\u0026nbsp;1.1, the\n \u003ccode\u003eCalendar\u003c/code\u003e class should be used to convert between dates and time\n fields and the \u003ccode\u003eDateFormat\u003c/code\u003e class should be used to format and\n parse date strings.\n The corresponding methods in \u003ccode\u003eDate\u003c/code\u003e are deprecated.\n \u003cp\u003e\n Although the \u003ccode\u003eDate\u003c/code\u003e class is intended to reflect\n coordinated universal time (UTC), it may not do so exactly,\n depending on the host environment of the Java Virtual Machine.\n Nearly all modern operating systems assume that 1\u0026nbsp;day\u0026nbsp;\u003d\n 24\u0026nbsp;\u0026times;\u0026nbsp;60\u0026nbsp;\u0026times;\u0026nbsp;60\u0026nbsp;\u003d 86400 seconds\n in all cases. In UTC, however, about once every year or two there\n is an extra second, called a \"leap second.\" The leap\n second is always added as the last second of the day, and always\n on December 31 or June 30. For example, the last minute of the\n year 1995 was 61 seconds long, thanks to an added leap second.\n Most computer clocks are not accurate enough to be able to reflect\n the leap-second distinction.\n \u003cp\u003e\n Some computer standards are defined in terms of Greenwich mean\n time (GMT), which is equivalent to universal time (UT).  GMT is\n the \"civil\" name for the standard; UT is the\n \"scientific\" name for the same standard. The\n distinction between UTC and UT is that UTC is based on an atomic\n clock and UT is based on astronomical observations, which for all\n practical purposes is an invisibly fine hair to split. Because the\n earth\u0027s rotation is not uniform (it slows down and speeds up\n in complicated ways), UT does not always flow uniformly. Leap\n seconds are introduced as needed into UTC so as to keep UTC within\n 0.9 seconds of UT1, which is a version of UT with certain\n corrections applied. There are other time and date systems as\n well; for example, the time scale used by the satellite-based\n global positioning system (GPS) is synchronized to UTC but is\n \u003ci\u003enot\u003c/i\u003e adjusted for leap seconds. An interesting source of\n further information is the U.S. Naval Observatory, particularly\n the Directorate of Time at:\n \u003cblockquote\u003e\u003cpre\u003e\n     \u003ca href\u003dhttp://tycho.usno.navy.mil\u003ehttp://tycho.usno.navy.mil\u003c/a\u003e\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n and their definitions of \"Systems of Time\" at:\n \u003cblockquote\u003e\u003cpre\u003e\n     \u003ca href\u003dhttp://tycho.usno.navy.mil/systime.html\u003ehttp://tycho.usno.navy.mil/systime.html\u003c/a\u003e\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n In all methods of class \u003ccode\u003eDate\u003c/code\u003e that accept or return\n year, month, date, hours, minutes, and seconds values, the\n following representations are used:\n \u003cul\u003e\n \u003cli\u003eA year \u003ci\u003ey\u003c/i\u003e is represented by the integer\n     \u003ci\u003ey\u003c/i\u003e\u0026nbsp;\u003ccode\u003e-\u0026nbsp;1900\u003c/code\u003e.\n \u003cli\u003eA month is represented by an integer from 0 to 11; 0 is January,\n     1 is February, and so forth; thus 11 is December.\n \u003cli\u003eA date (day of month) is represented by an integer from 1 to 31\n     in the usual manner.\n \u003cli\u003eAn hour is represented by an integer from 0 to 23. Thus, the hour\n     from midnight to 1 a.m. is hour 0, and the hour from noon to 1\n     p.m. is hour 12.\n \u003cli\u003eA minute is represented by an integer from 0 to 59 in the usual manner.\n \u003cli\u003eA second is represented by an integer from 0 to 61; the values 60 and\n     61 occur only for leap seconds and even then only in Java\n     implementations that actually track leap seconds correctly. Because\n     of the manner in which leap seconds are currently introduced, it is\n     extremely unlikely that two leap seconds will occur in the same\n     minute, but this specification follows the date and time conventions\n     for ISO C.\n \u003c/ul\u003e\n \u003cp\u003e\n In all cases, arguments given to methods for these purposes need\n not fall within the indicated ranges; for example, a date may be\n specified as January 32 and is interpreted as meaning February 1.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Cloneable","java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Date","comment":"Allocates a \u003ccode\u003eDate\u003c/code\u003e object and initializes it so that\n it represents the time at which it was allocated, measured to the\n nearest millisecond.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Date","comment":"Allocates a \u003ccode\u003eDate\u003c/code\u003e object and initializes it to\n represent the specified number of milliseconds since the\n standard base time known as \"the epoch\", namely January 1,\n 1970, 00:00:00 GMT.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","parameters":[{"name":"date","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Date","comment":"Allocates a \u003ccode\u003eDate\u003c/code\u003e object and initializes it so that\n it represents midnight, local time, at the beginning of the day\n specified by the \u003ccode\u003eyear\u003c/code\u003e, \u003ccode\u003emonth\u003c/code\u003e, and\n \u003ccode\u003edate\u003c/code\u003e arguments.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Date","comment":"Allocates a \u003ccode\u003eDate\u003c/code\u003e object and initializes it so that\n it represents the instant at the start of the minute specified by\n the \u003ccode\u003eyear\u003c/code\u003e, \u003ccode\u003emonth\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e,\n \u003ccode\u003ehrs\u003c/code\u003e, and \u003ccode\u003emin\u003c/code\u003e arguments, in the local\n time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, int, int, int)","flatSignature":"(int, int, int, int, int)","parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hrs","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"min","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Date","comment":"Allocates a \u003ccode\u003eDate\u003c/code\u003e object and initializes it so that\n it represents the instant at the start of the second specified\n by the \u003ccode\u003eyear\u003c/code\u003e, \u003ccode\u003emonth\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e,\n \u003ccode\u003ehrs\u003c/code\u003e, \u003ccode\u003emin\u003c/code\u003e, and \u003ccode\u003esec\u003c/code\u003e arguments,\n in the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hrs","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"min","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"sec","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Date","comment":"Allocates a \u003ccode\u003eDate\u003c/code\u003e object and initializes it so that\n it represents the date and time indicated by the string\n \u003ccode\u003es\u003c/code\u003e, which is interpreted as if by the\n {@link Date#parse} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"clone","comment":"Return a copy of this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"UTC","comment":"Determines the date and time based on the arguments. The\n arguments are interpreted as a year, month, day of the month,\n hour of the day, minute within the hour, and second within the\n minute, exactly as for the \u003ctt\u003eDate\u003c/tt\u003e constructor with six\n arguments, except that the arguments are interpreted relative\n to UTC rather than to the local time zone. The time indicated is\n returned represented as the distance, measured in milliseconds,\n of that time from the epoch (00:00:00 GMT on January 1, 1970).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hrs","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"min","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"sec","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Attempts to interpret the string \u003ctt\u003es\u003c/tt\u003e as a representation\n of a date and time. If the attempt is successful, the time\n indicated is returned represented as the distance, measured in\n milliseconds, of that time from the epoch (00:00:00 GMT on\n January 1, 1970). If the attempt fails, an\n \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e is thrown.\n \u003cp\u003e\n It accepts many syntaxes; in particular, it recognizes the IETF\n standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also\n understands the continental U.S. time-zone abbreviations, but for\n general use, a time-zone offset should be used: \"Sat, 12 Aug 1995\n 13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich\n meridian). If no time zone is specified, the local time zone is\n assumed. GMT and UTC are considered equivalent.\n \u003cp\u003e\n The string \u003ctt\u003es\u003c/tt\u003e is processed from left to right, looking for\n data of interest. Any material in \u003ctt\u003es\u003c/tt\u003e that is within the\n ASCII parenthesis characters \u003ctt\u003e(\u003c/tt\u003e and \u003ctt\u003e)\u003c/tt\u003e is ignored.\n Parentheses may be nested. Otherwise, the only characters permitted\n within \u003ctt\u003es\u003c/tt\u003e are these ASCII characters:\n \u003cblockquote\u003e\u003cpre\u003e\n abcdefghijklmnopqrstuvwxyz\n ABCDEFGHIJKLMNOPQRSTUVWXYZ\n 0123456789,+-:/\u003c/pre\u003e\u003c/blockquote\u003e\n and whitespace characters.\u003cp\u003e\n A consecutive sequence of decimal digits is treated as a decimal\n number:\u003cul\u003e\n \u003cli\u003eIf a number is preceded by \u003ctt\u003e+\u003c/tt\u003e or \u003ctt\u003e-\u003c/tt\u003e and a year\n     has already been recognized, then the number is a time-zone\n     offset. If the number is less than 24, it is an offset measured\n     in hours. Otherwise, it is regarded as an offset in minutes,\n     expressed in 24-hour time format without punctuation. A\n     preceding \u003ctt\u003e-\u003c/tt\u003e means a westward offset. Time zone offsets\n     are always relative to UTC (Greenwich). Thus, for example,\n     \u003ctt\u003e-5\u003c/tt\u003e occurring in the string would mean \"five hours west\n     of Greenwich\" and \u003ctt\u003e+0430\u003c/tt\u003e would mean \"four hours and\n     thirty minutes east of Greenwich.\" It is permitted for the\n     string to specify \u003ctt\u003eGMT\u003c/tt\u003e, \u003ctt\u003eUT\u003c/tt\u003e, or \u003ctt\u003eUTC\u003c/tt\u003e\n     redundantly-for example, \u003ctt\u003eGMT-5\u003c/tt\u003e or \u003ctt\u003eutc+0430\u003c/tt\u003e.\n \u003cli\u003eThe number is regarded as a year number if one of the\n     following conditions is true:\n \u003cul\u003e\n     \u003cli\u003eThe number is equal to or greater than 70 and followed by a\n         space, comma, slash, or end of string\n     \u003cli\u003eThe number is less than 70, and both a month and a day of\n         the month have already been recognized\u003c/li\u003e\n \u003c/ul\u003e\n     If the recognized year number is less than 100, it is\n     interpreted as an abbreviated year relative to a century of\n     which dates are within 80 years before and 19 years after\n     the time when the Date class is initialized.\n     After adjusting the year number, 1900 is subtracted from\n     it. For example, if the current year is 1999 then years in\n     the range 19 to 99 are assumed to mean 1919 to 1999, while\n     years from 0 to 18 are assumed to mean 2000 to 2018.  Note\n     that this is slightly different from the interpretation of\n     years less than 100 that is used in {@link java.text.SimpleDateFormat}.\n \u003cli\u003eIf the number is followed by a colon, it is regarded as an hour,\n     unless an hour has already been recognized, in which case it is\n     regarded as a minute.\n \u003cli\u003eIf the number is followed by a slash, it is regarded as a month\n     (it is decreased by 1 to produce a number in the range \u003ctt\u003e0\u003c/tt\u003e\n     to \u003ctt\u003e11\u003c/tt\u003e), unless a month has already been recognized, in\n     which case it is regarded as a day of the month.\n \u003cli\u003eIf the number is followed by whitespace, a comma, a hyphen, or\n     end of string, then if an hour has been recognized but not a\n     minute, it is regarded as a minute; otherwise, if a minute has\n     been recognized but not a second, it is regarded as a second;\n     otherwise, it is regarded as a day of the month. \u003c/ul\u003e\u003cp\u003e\n A consecutive sequence of letters is regarded as a word and treated\n as follows:\u003cul\u003e\n \u003cli\u003eA word that matches \u003ctt\u003eAM\u003c/tt\u003e, ignoring case, is ignored (but\n     the parse fails if an hour has not been recognized or is less\n     than \u003ctt\u003e1\u003c/tt\u003e or greater than \u003ctt\u003e12\u003c/tt\u003e).\n \u003cli\u003eA word that matches \u003ctt\u003ePM\u003c/tt\u003e, ignoring case, adds \u003ctt\u003e12\u003c/tt\u003e\n     to the hour (but the parse fails if an hour has not been\n     recognized or is less than \u003ctt\u003e1\u003c/tt\u003e or greater than \u003ctt\u003e12\u003c/tt\u003e).\n \u003cli\u003eAny word that matches any prefix of \u003ctt\u003eSUNDAY, MONDAY, TUESDAY,\n     WEDNESDAY, THURSDAY, FRIDAY\u003c/tt\u003e, or \u003ctt\u003eSATURDAY\u003c/tt\u003e, ignoring\n     case, is ignored. For example, \u003ctt\u003esat, Friday, TUE\u003c/tt\u003e, and\n     \u003ctt\u003eThurs\u003c/tt\u003e are ignored.\n \u003cli\u003eOtherwise, any word that matches any prefix of \u003ctt\u003eJANUARY,\n     FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,\n     OCTOBER, NOVEMBER\u003c/tt\u003e, or \u003ctt\u003eDECEMBER\u003c/tt\u003e, ignoring case, and\n     considering them in the order given here, is recognized as\n     specifying a month and is converted to a number (\u003ctt\u003e0\u003c/tt\u003e to\n     \u003ctt\u003e11\u003c/tt\u003e). For example, \u003ctt\u003eaug, Sept, april\u003c/tt\u003e, and\n     \u003ctt\u003eNOV\u003c/tt\u003e are recognized as months. So is \u003ctt\u003eMa\u003c/tt\u003e, which\n     is recognized as \u003ctt\u003eMARCH\u003c/tt\u003e, not \u003ctt\u003eMAY\u003c/tt\u003e.\n \u003cli\u003eAny word that matches \u003ctt\u003eGMT, UT\u003c/tt\u003e, or \u003ctt\u003eUTC\u003c/tt\u003e, ignoring\n     case, is treated as referring to UTC.\n \u003cli\u003eAny word that matches \u003ctt\u003eEST, CST, MST\u003c/tt\u003e, or \u003ctt\u003ePST\u003c/tt\u003e,\n     ignoring case, is recognized as referring to the time zone in\n     North America that is five, six, seven, or eight hours west of\n     Greenwich, respectively. Any word that matches \u003ctt\u003eEDT, CDT,\n     MDT\u003c/tt\u003e, or \u003ctt\u003ePDT\u003c/tt\u003e, ignoring case, is recognized as\n     referring to the same time zone, respectively, during daylight\n     saving time.\u003c/ul\u003e\u003cp\u003e\n Once the entire string s has been scanned, it is converted to a time\n result in one of two ways. If a time zone or time-zone offset has been\n recognized, then the year, month, day of month, hour, minute, and\n second are interpreted in UTC and then the time-zone offset is\n applied. Otherwise, the year, month, day of month, hour, minute, and\n second are interpreted in the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getYear","comment":"Returns a value that is the result of subtracting 1900 from the\n year that contains or begins with the instant in time represented\n by this \u003ccode\u003eDate\u003c/code\u003e object, as interpreted in the local\n time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setYear","comment":"Sets the year of this \u003ctt\u003eDate\u003c/tt\u003e object to be the specified\n value plus 1900. This \u003ccode\u003eDate\u003c/code\u003e object is modified so\n that it represents a point in time within the specified year,\n with the month, date, hour, minute, and second the same as\n before, as interpreted in the local time zone. (Of course, if\n the date was February 29, for example, and the year is set to a\n non-leap year, then the new date will be treated as if it were\n on March 1.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMonth","comment":"Returns a number representing the month that contains or begins\n with the instant in time represented by this \u003ctt\u003eDate\u003c/tt\u003e object.\n The value returned is between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e11\u003c/code\u003e,\n with the value \u003ccode\u003e0\u003c/code\u003e representing January.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMonth","comment":"Sets the month of this date to the specified value. This\n \u003ctt\u003eDate\u003c/tt\u003e object is modified so that it represents a point\n in time within the specified month, with the year, date, hour,\n minute, and second the same as before, as interpreted in the\n local time zone. If the date was October 31, for example, and\n the month is set to June, then the new date will be treated as\n if it were on July 1, because June has only 30 days.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDate","comment":"Returns the day of the month represented by this \u003ctt\u003eDate\u003c/tt\u003e object.\n The value returned is between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e31\u003c/code\u003e\n representing the day of the month that contains or begins with the\n instant in time represented by this \u003ctt\u003eDate\u003c/tt\u003e object, as\n interpreted in the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setDate","comment":"Sets the day of the month of this \u003ctt\u003eDate\u003c/tt\u003e object to the\n specified value. This \u003ctt\u003eDate\u003c/tt\u003e object is modified so that\n it represents a point in time within the specified day of the\n month, with the year, month, hour, minute, and second the same\n as before, as interpreted in the local time zone. If the date\n was April 30, for example, and the date is set to 31, then it\n will be treated as if it were on May 1, because April has only\n 30 days.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDay","comment":"Returns the day of the week represented by this date. The\n returned value (\u003ctt\u003e0\u003c/tt\u003e \u003d Sunday, \u003ctt\u003e1\u003c/tt\u003e \u003d Monday,\n \u003ctt\u003e2\u003c/tt\u003e \u003d Tuesday, \u003ctt\u003e3\u003c/tt\u003e \u003d Wednesday, \u003ctt\u003e4\u003c/tt\u003e \u003d\n Thursday, \u003ctt\u003e5\u003c/tt\u003e \u003d Friday, \u003ctt\u003e6\u003c/tt\u003e \u003d Saturday)\n represents the day of the week that contains or begins with\n the instant in time represented by this \u003ctt\u003eDate\u003c/tt\u003e object,\n as interpreted in the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHours","comment":"Returns the hour represented by this \u003ctt\u003eDate\u003c/tt\u003e object. The\n returned value is a number (\u003ctt\u003e0\u003c/tt\u003e through \u003ctt\u003e23\u003c/tt\u003e)\n representing the hour within the day that contains or begins\n with the instant in time represented by this \u003ctt\u003eDate\u003c/tt\u003e\n object, as interpreted in the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setHours","comment":"Sets the hour of this \u003ctt\u003eDate\u003c/tt\u003e object to the specified value.\n This \u003ctt\u003eDate\u003c/tt\u003e object is modified so that it represents a point\n in time within the specified hour of the day, with the year, month,\n date, minute, and second the same as before, as interpreted in the\n local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hours","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMinutes","comment":"Returns the number of minutes past the hour represented by this date,\n as interpreted in the local time zone.\n The value returned is between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e59\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMinutes","comment":"Sets the minutes of this \u003ctt\u003eDate\u003c/tt\u003e object to the specified value.\n This \u003ctt\u003eDate\u003c/tt\u003e object is modified so that it represents a point\n in time within the specified minute of the hour, with the year, month,\n date, hour, and second the same as before, as interpreted in the\n local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minutes","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSeconds","comment":"Returns the number of seconds past the minute represented by this date.\n The value returned is between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e61\u003c/code\u003e. The\n values \u003ccode\u003e60\u003c/code\u003e and \u003ccode\u003e61\u003c/code\u003e can only occur on those\n Java Virtual Machines that take leap seconds into account.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setSeconds","comment":"Sets the seconds of this \u003ctt\u003eDate\u003c/tt\u003e to the specified value.\n This \u003ctt\u003eDate\u003c/tt\u003e object is modified so that it represents a\n point in time within the specified second of the minute, with\n the year, month, date, hour, and minute the same as before, as\n interpreted in the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"seconds","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTime","comment":"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n represented by this \u003ctt\u003eDate\u003c/tt\u003e object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTime","comment":"Sets this \u003ccode\u003eDate\u003c/code\u003e object to represent a point in time that is\n \u003ccode\u003etime\u003c/code\u003e milliseconds after January 1, 1970 00:00:00 GMT.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"time","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"before","comment":"Tests if this date is before the specified date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"when","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"after","comment":"Tests if this date is after the specified date.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"when","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares two dates for equality.\n The result is \u003ccode\u003etrue\u003c/code\u003e if and only if the argument is\n not \u003ccode\u003enull\u003c/code\u003e and is a \u003ccode\u003eDate\u003c/code\u003e object that\n represents the same point in time, to the millisecond, as this object.\n \u003cp\u003e\n Thus, two \u003ccode\u003eDate\u003c/code\u003e objects are equal if and only if the\n \u003ccode\u003egetTime\u003c/code\u003e method returns the same \u003ccode\u003elong\u003c/code\u003e\n value for both.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares two Dates for ordering.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherDate","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code value for this object. The result is the\n exclusive OR of the two halves of the primitive \u003ctt\u003elong\u003c/tt\u003e\n value returned by the {@link Date#getTime}\n method. That is, the hash code is the value of the expression:\n \u003cblockquote\u003e\u003cpre\u003e{@code\n (int)(this.getTime()^(this.getTime() \u003e\u003e\u003e 32))\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Converts this \u003ccode\u003eDate\u003c/code\u003e object to a \u003ccode\u003eString\u003c/code\u003e\n of the form:\n \u003cblockquote\u003e\u003cpre\u003e\n dow mon dd hh:mm:ss zzz yyyy\u003c/pre\u003e\u003c/blockquote\u003e\n where:\u003cul\u003e\n \u003cli\u003e\u003ctt\u003edow\u003c/tt\u003e is the day of the week (\u003ctt\u003eSun, Mon, Tue, Wed,\n     Thu, Fri, Sat\u003c/tt\u003e).\n \u003cli\u003e\u003ctt\u003emon\u003c/tt\u003e is the month (\u003ctt\u003eJan, Feb, Mar, Apr, May, Jun,\n     Jul, Aug, Sep, Oct, Nov, Dec\u003c/tt\u003e).\n \u003cli\u003e\u003ctt\u003edd\u003c/tt\u003e is the day of the month (\u003ctt\u003e01\u003c/tt\u003e through\n     \u003ctt\u003e31\u003c/tt\u003e), as two decimal digits.\n \u003cli\u003e\u003ctt\u003ehh\u003c/tt\u003e is the hour of the day (\u003ctt\u003e00\u003c/tt\u003e through\n     \u003ctt\u003e23\u003c/tt\u003e), as two decimal digits.\n \u003cli\u003e\u003ctt\u003emm\u003c/tt\u003e is the minute within the hour (\u003ctt\u003e00\u003c/tt\u003e through\n     \u003ctt\u003e59\u003c/tt\u003e), as two decimal digits.\n \u003cli\u003e\u003ctt\u003ess\u003c/tt\u003e is the second within the minute (\u003ctt\u003e00\u003c/tt\u003e through\n     \u003ctt\u003e61\u003c/tt\u003e, as two decimal digits.\n \u003cli\u003e\u003ctt\u003ezzz\u003c/tt\u003e is the time zone (and may reflect daylight saving\n     time). Standard time zone abbreviations include those\n     recognized by the method \u003ctt\u003eparse\u003c/tt\u003e. If time zone\n     information is not available, then \u003ctt\u003ezzz\u003c/tt\u003e is empty -\n     that is, it consists of no characters at all.\n \u003cli\u003e\u003ctt\u003eyyyy\u003c/tt\u003e is the year, as four decimal digits.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLocaleString","comment":"Creates a string representation of this \u003ctt\u003eDate\u003c/tt\u003e object in an\n implementation-dependent form. The intent is that the form should\n be familiar to the user of the Java application, wherever it may\n happen to be running. The intent is comparable to that of the\n \"\u003ccode\u003e%c\u003c/code\u003e\" format supported by the \u003ccode\u003estrftime()\u003c/code\u003e\n function of ISO\u0026nbsp;C.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toGMTString","comment":"Creates a string representation of this \u003ctt\u003eDate\u003c/tt\u003e object of\n the form:\n \u003cblockquote\u003e\u003cpre\u003e\n d mon yyyy hh:mm:ss GMT\u003c/pre\u003e\u003c/blockquote\u003e\n where:\u003cul\u003e\n \u003cli\u003e\u003ci\u003ed\u003c/i\u003e is the day of the month (\u003ctt\u003e1\u003c/tt\u003e through \u003ctt\u003e31\u003c/tt\u003e),\n     as one or two decimal digits.\n \u003cli\u003e\u003ci\u003emon\u003c/i\u003e is the month (\u003ctt\u003eJan, Feb, Mar, Apr, May, Jun, Jul,\n     Aug, Sep, Oct, Nov, Dec\u003c/tt\u003e).\n \u003cli\u003e\u003ci\u003eyyyy\u003c/i\u003e is the year, as four decimal digits.\n \u003cli\u003e\u003ci\u003ehh\u003c/i\u003e is the hour of the day (\u003ctt\u003e00\u003c/tt\u003e through \u003ctt\u003e23\u003c/tt\u003e),\n     as two decimal digits.\n \u003cli\u003e\u003ci\u003emm\u003c/i\u003e is the minute within the hour (\u003ctt\u003e00\u003c/tt\u003e through\n     \u003ctt\u003e59\u003c/tt\u003e), as two decimal digits.\n \u003cli\u003e\u003ci\u003ess\u003c/i\u003e is the second within the minute (\u003ctt\u003e00\u003c/tt\u003e through\n     \u003ctt\u003e61\u003c/tt\u003e), as two decimal digits.\n \u003cli\u003e\u003ci\u003eGMT\u003c/i\u003e is exactly the ASCII letters \"\u003ctt\u003eGMT\u003c/tt\u003e\" to indicate\n     Greenwich Mean Time.\n \u003c/ul\u003e\u003cp\u003e\n The result does not depend on the local time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTimezoneOffset","comment":"Returns the offset, measured in minutes, for the local time zone\n relative to UTC that is appropriate for the time represented by\n this \u003ccode\u003eDate\u003c/code\u003e object.\n \u003cp\u003e\n For example, in Massachusetts, five time zones west of Greenwich:\n \u003cblockquote\u003e\u003cpre\u003e\n new Date(96, 1, 14).getTimezoneOffset() returns 300\u003c/pre\u003e\u003c/blockquote\u003e\n because on February 14, 1996, standard time (Eastern Standard Time)\n is in use, which is offset five hours from UTC; but:\n \u003cblockquote\u003e\u003cpre\u003e\n new Date(96, 5, 1).getTimezoneOffset() returns 240\u003c/pre\u003e\u003c/blockquote\u003e\n because on June 1, 1996, daylight saving time (Eastern Daylight Time)\n is in use, which is offset only four hours from UTC.\u003cp\u003e\n This method produces the same result as if it computed:\n \u003cblockquote\u003e\u003cpre\u003e\n (this.getTime() - UTC(this.getYear(),\n                       this.getMonth(),\n                       this.getDate(),\n                       this.getHours(),\n                       this.getMinutes(),\n                       this.getSeconds())) / (60 * 1000)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code Date} from an {@code Instant} object.\n \u003cp\u003e\n {@code Instant} uses a precision of nanoseconds, whereas {@code Date}\n uses a precision of milliseconds.  The conversion will trancate any\n excess precision information as though the amount in nanoseconds was\n subject to integer division by one million.\n \u003cp\u003e\n {@code Instant} can store points on the time-line further in the future\n and further in the past than {@code Date}. In this scenario, this method\n will throw an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.Instant)","flatSignature":"(Instant)","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"instant","type":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toInstant","comment":"Converts this {@code Date} object to an {@code Instant}.\n \u003cp\u003e\n The conversion creates an {@code Instant} that represents the same\n point on the time-line as this {@code Date}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Instant","qualifiedName":"java.time.Instant","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}