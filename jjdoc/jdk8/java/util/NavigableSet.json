{"name":"NavigableSet","comment":"A {@link SortedSet} extended with navigation methods reporting\n closest matches for given search targets. Methods {@code lower},\n {@code floor}, {@code ceiling}, and {@code higher} return elements\n respectively less than, less than or equal, greater than or equal,\n and greater than a given element, returning {@code null} if there\n is no such element.  A {@code NavigableSet} may be accessed and\n traversed in either ascending or descending order.  The {@code\n descendingSet} method returns a view of the set with the senses of\n all relational and directional methods inverted. The performance of\n ascending operations and views is likely to be faster than that of\n descending ones.  This interface additionally defines methods\n {@code pollFirst} and {@code pollLast} that return and remove the\n lowest and highest element, if one exists, else returning {@code\n null}.  Methods {@code subSet}, {@code headSet},\n and {@code tailSet} differ from the like-named {@code\n SortedSet} methods in accepting additional arguments describing\n whether lower and upper bounds are inclusive versus exclusive.\n Subsets of any {@code NavigableSet} must implement the {@code\n NavigableSet} interface.\n\n \u003cp\u003e The return values of navigation methods may be ambiguous in\n implementations that permit {@code null} elements. However, even\n in this case the result can be disambiguated by checking\n {@code contains(null)}. To avoid such issues, implementations of\n this interface are encouraged to \u003cem\u003enot\u003c/em\u003e permit insertion of\n {@code null} elements. (Note that sorted sets of {@link\n Comparable} elements intrinsically do not permit {@code null}.)\n\n \u003cp\u003eMethods\n {@link #subSet(Object, Object) subSet(E, E)},\n {@link #headSet(Object) headSet(E)}, and\n {@link #tailSet(Object) tailSet(E)}\n are specified to return {@code SortedSet} to allow existing\n implementations of {@code SortedSet} to be compatibly retrofitted to\n implement {@code NavigableSet}, but extensions and implementations\n of this interface are encouraged to override these methods to return\n {@code NavigableSet}.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.SortedSet"],"isAbstract":true,"isStatic":false,"since":"1.6","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"lower","comment":"Returns the greatest element in this set strictly less than the\n given element, or {@code null} if there is no such element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"floor","comment":"Returns the greatest element in this set less than or equal to\n the given element, or {@code null} if there is no such element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"ceiling","comment":"Returns the least element in this set greater than or equal to\n the given element, or {@code null} if there is no such element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"higher","comment":"Returns the least element in this set strictly greater than the\n given element, or {@code null} if there is no such element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"pollFirst","comment":"Retrieves and removes the first (lowest) element,\n or returns {@code null} if this set is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"pollLast","comment":"Retrieves and removes the last (highest) element,\n or returns {@code null} if this set is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this set, in ascending order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingSet","comment":"Returns a reverse order view of the elements contained in this set.\n The descending set is backed by this set, so changes to the set are\n reflected in the descending set, and vice-versa.  If either set is\n modified while an iteration over either set is in progress (except\n through the iterator\u0027s own {@code remove} operation), the results of\n the iteration are undefined.\n\n \u003cp\u003eThe returned set has an ordering equivalent to\n \u003ctt\u003e{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())\u003c/tt\u003e.\n The expression {@code s.descendingSet().descendingSet()} returns a\n view of {@code s} essentially equivalent to {@code s}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"descendingIterator","comment":"Returns an iterator over the elements in this set, in descending order.\n Equivalent in effect to {@code descendingSet().iterator()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"subSet","comment":"Returns a view of the portion of this set whose elements range from\n {@code fromElement} to {@code toElement}.  If {@code fromElement} and\n {@code toElement} are equal, the returned set is empty unless {@code\n fromInclusive} and {@code toInclusive} are both true.  The returned set\n is backed by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all optional set\n operations that this set supports.\n\n \u003cp\u003eThe returned set will throw an {@code IllegalArgumentException}\n on an attempt to insert an element outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, boolean, E, boolean)","flatSignature":"(E, boolean, E, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"fromInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"toElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"toInclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"headSet","comment":"Returns a view of the portion of this set whose elements are less than\n (or equal to, if {@code inclusive} is true) {@code toElement}.  The\n returned set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n \u003cp\u003eThe returned set will throw an {@code IllegalArgumentException}\n on an attempt to insert an element outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, boolean)","flatSignature":"(E, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tailSet","comment":"Returns a view of the portion of this set whose elements are greater\n than (or equal to, if {@code inclusive} is true) {@code fromElement}.\n The returned set is backed by this set, so changes in the returned set\n are reflected in this set, and vice-versa.  The returned set supports\n all optional set operations that this set supports.\n\n \u003cp\u003eThe returned set will throw an {@code IllegalArgumentException}\n on an attempt to insert an element outside its range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, boolean)","flatSignature":"(E, boolean)","returnType":{"isPrimitive":false,"simpleName":"NavigableSet","qualifiedName":"java.util.NavigableSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"inclusive","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subSet","comment":"{@inheritDoc}\n\n \u003cp\u003eEquivalent to {@code subSet(fromElement, true, toElement, false)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E, E)","flatSignature":"(E, E)","returnType":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}},{"name":"toElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"headSet","comment":"{@inheritDoc}\n\n \u003cp\u003eEquivalent to {@code headSet(toElement, false)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"toElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"tailSet","comment":"{@inheritDoc}\n\n \u003cp\u003eEquivalent to {@code tailSet(fromElement, true)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":false,"simpleName":"SortedSet","qualifiedName":"java.util.SortedSet","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromElement","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.TreeSet","java.util.concurrent.ConcurrentSkipListSet"],"enumConstants":[]}