{"name":"PropertyPermission","comment":"This class is for property permissions.\n\n \u003cP\u003e\n The name is the name of the property (\"java.home\",\n \"os.name\", etc). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"java.*\" and \"*\" signify a wildcard\n match, while \"*java\" and \"a*b\" do not.\n \u003cP\u003e\n The actions to be granted are passed to the constructor in a string containing\n a list of one or more comma-separated keywords. The possible keywords are\n \"read\" and \"write\". Their meaning is defined as follows:\n\n \u003cDL\u003e\n    \u003cDT\u003e read\n    \u003cDD\u003e read permission. Allows \u003ccode\u003eSystem.getProperty\u003c/code\u003e to\n         be called.\n    \u003cDT\u003e write\n    \u003cDD\u003e write permission. Allows \u003ccode\u003eSystem.setProperty\u003c/code\u003e to\n         be called.\n \u003c/DL\u003e\n \u003cP\u003e\n The actions string is converted to lowercase before processing.\n \u003cP\u003e\n Care should be taken before granting code permission to access\n certain system properties.  For example, granting permission to\n access the \"java.home\" system property gives potentially malevolent\n code sensitive information about the system environment (the Java\n installation directory).  Also, granting permission to access\n the \"user.name\" and \"user.home\" system properties gives potentially\n malevolent code sensitive information about the user environment\n (the user\u0027s account name and home directory).","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PropertyPermission","qualifiedName":"java.util.PropertyPermission","dimension":"","elementType":{},"package":"java.util","superclass":"java.security.BasicPermission","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PropertyPermission","comment":"Creates a new PropertyPermission object with the specified name.\n The name is the name of the system property, and\n \u003ci\u003eactions\u003c/i\u003e contains a comma-separated list of the\n desired actions granted on the property. Possible actions are\n \"read\" and \"write\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"actions","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"implies","comment":"Checks if this PropertyPermission object \"implies\" the specified\n permission.\n \u003cP\u003e\n More specifically, this method returns true if:\n \u003cul\u003e\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e is an instanceof PropertyPermission,\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s actions are a subset of this\n object\u0027s actions, and\n \u003cli\u003e \u003ci\u003ep\u003c/i\u003e\u0027s name is implied by this object\u0027s\n      name. For example, \"java.*\" implies \"java.home\".\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"p","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Checks two PropertyPermission objects for equality. Checks that \u003ci\u003eobj\u003c/i\u003e is\n a PropertyPermission, and has the same name and actions as this object.\n \u003cP\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this object.\n The hash code used is the hash code of this permissions name, that is,\n \u003ccode\u003egetName().hashCode()\u003c/code\u003e, where \u003ccode\u003egetName\u003c/code\u003e is\n from the Permission superclass.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getActions","comment":"Returns the \"canonical string representation\" of the actions.\n That is, this method always returns present actions in the following order:\n read, write. For example, if this PropertyPermission object\n allows both write and read actions, a call to \u003ccode\u003egetActions\u003c/code\u003e\n will return the string \"read,write\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"newPermissionCollection","comment":"Returns a new PermissionCollection object for storing\n PropertyPermission objects.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PermissionCollection","qualifiedName":"java.security.PermissionCollection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}