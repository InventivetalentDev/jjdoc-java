{"name":"Set","comment":"A collection that contains no duplicate elements.  More formally, sets\n contain no pair of elements \u003ccode\u003ee1\u003c/code\u003e and \u003ccode\u003ee2\u003c/code\u003e such that\n \u003ccode\u003ee1.equals(e2)\u003c/code\u003e, and at most one null element.  As implied by\n its name, this interface models the mathematical \u003ci\u003eset\u003c/i\u003e abstraction.\n\n \u003cp\u003eThe \u003ctt\u003eSet\u003c/tt\u003e interface places additional stipulations, beyond those\n inherited from the \u003ctt\u003eCollection\u003c/tt\u003e interface, on the contracts of all\n constructors and on the contracts of the \u003ctt\u003eadd\u003c/tt\u003e, \u003ctt\u003eequals\u003c/tt\u003e and\n \u003ctt\u003ehashCode\u003c/tt\u003e methods.  Declarations for other inherited methods are\n also included here for convenience.  (The specifications accompanying these\n declarations have been tailored to the \u003ctt\u003eSet\u003c/tt\u003e interface, but they do\n not contain any additional stipulations.)\n\n \u003cp\u003eThe additional stipulation on constructors is, not surprisingly,\n that all constructors must create a set that contains no duplicate elements\n (as defined above).\n\n \u003cp\u003eNote: Great care must be exercised if mutable objects are used as set\n elements.  The behavior of a set is not specified if the value of an object\n is changed in a manner that affects \u003ctt\u003eequals\u003c/tt\u003e comparisons while the\n object is an element in the set.  A special case of this prohibition is\n that it is not permissible for a set to contain itself as an element.\n\n \u003cp\u003eSome set implementations have restrictions on the elements that\n they may contain.  For example, some implementations prohibit null elements,\n and some have restrictions on the types of their elements.  Attempting to\n add an ineligible element throws an unchecked exception, typically\n \u003ctt\u003eNullPointerException\u003c/tt\u003e or \u003ctt\u003eClassCastException\u003c/tt\u003e.  Attempting\n to query the presence of an ineligible element may throw an exception,\n or it may simply return false; some implementations will exhibit the former\n behavior and some will exhibit the latter.  More generally, attempting an\n operation on an ineligible element whose completion would not result in\n the insertion of an ineligible element into the set may throw an\n exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.Collection"],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"size","comment":"Returns the number of elements in this set (its cardinality).  If this\n set contains more than \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e elements, returns\n \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this set contains no elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this set contains the specified element.\n More formally, returns \u003ctt\u003etrue\u003c/tt\u003e if and only if this set\n contains an element \u003ctt\u003ee\u003c/tt\u003e such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this set.  The elements are\n returned in no particular order (unless this set is an instance of some\n class that provides a guarantee).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this set.\n If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the\n elements in the same order.\n\n \u003cp\u003eThe returned array will be \"safe\" in that no references to it\n are maintained by this set.  (In other words, this method must\n allocate a new array even if this set is backed by an array).\n The caller is thus free to modify the returned array.\n\n \u003cp\u003eThis method acts as bridge between array-based and collection-based\n APIs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this set; the\n runtime type of the returned array is that of the specified array.\n If the set fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this set.\n\n \u003cp\u003eIf this set fits in the specified array with room to spare\n (i.e., the array has more elements than this set), the element in\n the array immediately following the end of the set is set to\n \u003ctt\u003enull\u003c/tt\u003e.  (This is useful in determining the length of this\n set \u003ci\u003eonly\u003c/i\u003e if the caller knows that this set does not contain\n any null elements.)\n\n \u003cp\u003eIf this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements\n in the same order.\n\n \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \u003cp\u003eSuppose \u003ctt\u003ex\u003c/tt\u003e is a set known to contain only strings.\n The following code can be used to dump the set into a newly allocated\n array of \u003ctt\u003eString\u003c/tt\u003e:\n\n \u003cpre\u003e\n     String[] y \u003d x.toArray(new String[0]);\u003c/pre\u003e\n\n Note that \u003ctt\u003etoArray(new Object[0])\u003c/tt\u003e is identical in function to\n \u003ctt\u003etoArray()\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"add","comment":"Adds the specified element to this set if it is not already present\n (optional operation).  More formally, adds the specified element\n \u003ctt\u003ee\u003c/tt\u003e to this set if the set contains no element \u003ctt\u003ee2\u003c/tt\u003e\n such that\n \u003ctt\u003e(e\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e2\u003d\u003dnull\u0026nbsp;:\u0026nbsp;e.equals(e2))\u003c/tt\u003e.\n If this set already contains the element, the call leaves the set\n unchanged and returns \u003ctt\u003efalse\u003c/tt\u003e.  In combination with the\n restriction on constructors, this ensures that sets never contain\n duplicate elements.\n\n \u003cp\u003eThe stipulation above does not imply that sets must accept all\n elements; sets may refuse to add any particular element, including\n \u003ctt\u003enull\u003c/tt\u003e, and throw an exception, as described in the\n specification for {@link Collection#add Collection.add}.\n Individual set implementations should clearly document any\n restrictions on the elements that they may contain.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the specified element from this set if it is present\n (optional operation).  More formally, removes an element \u003ctt\u003ee\u003c/tt\u003e\n such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e, if\n this set contains such an element.  Returns \u003ctt\u003etrue\u003c/tt\u003e if this set\n contained the element (or equivalently, if this set changed as a\n result of the call).  (This set will not contain the element once the\n call returns.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsAll","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this set contains all of the elements of the\n specified collection.  If the specified collection is also a set, this\n method returns \u003ctt\u003etrue\u003c/tt\u003e if it is a \u003ci\u003esubset\u003c/i\u003e of this set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Adds all of the elements in the specified collection to this set if\n they\u0027re not already present (optional operation).  If the specified\n collection is also a set, the \u003ctt\u003eaddAll\u003c/tt\u003e operation effectively\n modifies this set so that its value is the \u003ci\u003eunion\u003c/i\u003e of the two\n sets.  The behavior of this operation is undefined if the specified\n collection is modified while the operation is in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"retainAll","comment":"Retains only the elements in this set that are contained in the\n specified collection (optional operation).  In other words, removes\n from this set all of its elements that are not contained in the\n specified collection.  If the specified collection is also a set, this\n operation effectively modifies this set so that its value is the\n \u003ci\u003eintersection\u003c/i\u003e of the two sets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeAll","comment":"Removes from this set all of its elements that are contained in the\n specified collection (optional operation).  If the specified\n collection is also a set, this operation effectively modifies this\n set so that its value is the \u003ci\u003easymmetric set difference\u003c/i\u003e of\n the two sets.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the elements from this set (optional operation).\n The set will be empty after this call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this set for equality.  Returns\n \u003ctt\u003etrue\u003c/tt\u003e if the specified object is also a set, the two sets\n have the same size, and every member of the specified set is\n contained in this set (or equivalently, every member of this set is\n contained in the specified set).  This definition ensures that the\n equals method works properly across different implementations of the\n set interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this set.  The hash code of a set is\n defined to be the sum of the hash codes of the elements in the set,\n where the hash code of a \u003ctt\u003enull\u003c/tt\u003e element is defined to be zero.\n This ensures that \u003ctt\u003es1.equals(s2)\u003c/tt\u003e implies that\n \u003ctt\u003es1.hashCode()\u003d\u003ds2.hashCode()\u003c/tt\u003e for any two sets \u003ctt\u003es1\u003c/tt\u003e\n and \u003ctt\u003es2\u003c/tt\u003e, as required by the general contract of\n {@link Object#hashCode}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator} over the elements in this set.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#DISTINCT}.\n Implementations should document the reporting of additional\n characteristic values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.SortedSet","java.util.LinkedHashSet","java.util.HashSet","java.util.AbstractSet","java.util.concurrent.ConcurrentHashMap.KeySetView"],"enumConstants":[]}