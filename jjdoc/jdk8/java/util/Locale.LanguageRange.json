{"name":"Locale.LanguageRange","comment":"This class expresses a \u003cem\u003eLanguage Range\u003c/em\u003e defined in\n \u003ca href\u003d\"http://tools.ietf.org/html/rfc4647\"\u003eRFC 4647 Matching of\n Language Tags\u003c/a\u003e. A language range is an identifier which is used to\n select language tag(s) meeting specific requirements by using the\n mechanisms described in \u003ca href\u003d\"Locale.html#LocaleMatching\"\u003eLocale\n Matching\u003c/a\u003e. A list which represents a user\u0027s preferences and consists\n of language ranges is called a \u003cem\u003eLanguage Priority List\u003c/em\u003e.\n\n \u003cp\u003eThere are two types of language ranges: basic and extended. In RFC\n 4647, the syntax of language ranges is expressed in\n \u003ca href\u003d\"http://tools.ietf.org/html/rfc4234\"\u003eABNF\u003c/a\u003e as follows:\n \u003cblockquote\u003e\n \u003cpre\u003e\n     basic-language-range    \u003d (1*8ALPHA *(\"-\" 1*8alphanum)) / \"*\"\n     extended-language-range \u003d (1*8ALPHA / \"*\")\n                               *(\"-\" (1*8alphanum / \"*\"))\n     alphanum                \u003d ALPHA / DIGIT\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n For example, {@code \"en\"} (English), {@code \"ja-JP\"} (Japanese, Japan),\n {@code \"*\"} (special language range which matches any language tag) are\n basic language ranges, whereas {@code \"*-CH\"} (any languages,\n Switzerland), {@code \"es-*\"} (Spanish, any regions), and\n {@code \"zh-Hant-*\"} (Traditional Chinese, any regions) are extended\n language ranges.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LanguageRange","qualifiedName":"java.util.Locale.LanguageRange","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":true,"since":"1.8","innerClasses":[],"isInnerClass":true,"constructors":[{"name":"LanguageRange","comment":"Constructs a {@code LanguageRange} using the given {@code range}.\n Note that no validation is done against the IANA Language Subtag\n Registry at time of construction.\n\n \u003cp\u003eThis is equivalent to {@code LanguageRange(range, MAX_WEIGHT)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"range","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"LanguageRange","comment":"Constructs a {@code LanguageRange} using the given {@code range} and\n {@code weight}. Note that no validation is done against the IANA\n Language Subtag Registry at time of construction.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, double)","flatSignature":"(String, double)","parameters":[{"name":"range","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"weight","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"MAX_WEIGHT","comment":"A constant holding the maximum value of weight, 1.0, which indicates\n that the language range is a good fit for the user.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1.0"},{"name":"MIN_WEIGHT","comment":"A constant holding the minimum value of weight, 0.0, which indicates\n that the language range is not a good fit for the user.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0.0"}],"methods":[{"name":"getRange","comment":"Returns the language range of this {@code LanguageRange}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWeight","comment":"Returns the weight of this {@code LanguageRange}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parse","comment":"Parses the given {@code ranges} to generate a Language Priority List.\n\n \u003cp\u003eThis method performs a syntactic check for each language range in\n the given {@code ranges} but doesn\u0027t do validation using the IANA\n Language Subtag Registry.\n\n \u003cp\u003eThe {@code ranges} to be given can take one of the following\n forms:\n\n \u003cpre\u003e\n   \"Accept-Language: ja,en;q\u003d0.4\"  (weighted list with Accept-Language prefix)\n   \"ja,en;q\u003d0.4\"                   (weighted list)\n   \"ja,en\"                         (prioritized list)\n \u003c/pre\u003e\n\n In a weighted list, each language range is given a weight value.\n The weight value is identical to the \"quality value\" in\n \u003ca href\u003d\"http://tools.ietf.org/html/rfc2616\"\u003eRFC 2616\u003c/a\u003e, and it\n expresses how much the user prefers  the language. A weight value is\n specified after a corresponding language range followed by\n {@code \";q\u003d\"}, and the default weight value is {@code MAX_WEIGHT}\n when it is omitted.\n\n \u003cp\u003eUnlike a weighted list, language ranges in a prioritized list\n are sorted in the descending order based on its priority. The first\n language range has the highest priority and meets the user\u0027s\n preference most.\n\n \u003cp\u003eIn either case, language ranges are sorted in descending order in\n the Language Priority List based on priority or weight. If a\n language range appears in the given {@code ranges} more than once,\n only the first one is included on the Language Priority List.\n\n \u003cp\u003eThe returned list consists of language ranges from the given\n {@code ranges} and their equivalents found in the IANA Language\n Subtag Registry. For example, if the given {@code ranges} is\n {@code \"Accept-Language: iw,en-us;q\u003d0.7,en;q\u003d0.3\"}, the elements in\n the list to be returned are:\n\n \u003cpre\u003e\n  \u003cb\u003eRange\u003c/b\u003e                                   \u003cb\u003eWeight\u003c/b\u003e\n    \"iw\" (older tag for Hebrew)             1.0\n    \"he\" (new preferred code for Hebrew)    1.0\n    \"en-us\" (English, United States)        0.7\n    \"en\" (English)                          0.3\n \u003c/pre\u003e\n\n Two language ranges, {@code \"iw\"} and {@code \"he\"}, have the same\n highest priority in the list. By adding {@code \"he\"} to the user\u0027s\n Language Priority List, locale-matching method can find Hebrew as a\n matching locale (or language tag) even if the application or system\n offers only {@code \"he\"} as a supported locale (or language tag).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ranges","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Parses the given {@code ranges} to generate a Language Priority\n List, and then customizes the list using the given {@code map}.\n This method is equivalent to\n {@code mapEquivalents(parse(ranges), map)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Map\u003cjava.lang.String, java.util.List\u003cjava.lang.String\u003e\u003e)","flatSignature":"(String, Map\u003cString, List\u003cString\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ranges","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"map","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapEquivalents","comment":"Generates a new customized Language Priority List using the given\n {@code priorityList} and {@code map}. If the given {@code map} is\n empty, this method returns a copy of the given {@code priorityList}.\n\n \u003cp\u003eIn the map, a key represents a language range whereas a value is\n a list of equivalents of it. {@code \u0027*\u0027} cannot be used in the map.\n Each equivalent language range has the same weight value as its\n original language range.\n\n \u003cpre\u003e\n  An example of map:\n    \u003cb\u003eKey\u003c/b\u003e                            \u003cb\u003eValue\u003c/b\u003e\n      \"zh\" (Chinese)                 \"zh\",\n                                     \"zh-Hans\"(Simplified Chinese)\n      \"zh-HK\" (Chinese, Hong Kong)   \"zh-HK\"\n      \"zh-TW\" (Chinese, Taiwan)      \"zh-TW\"\n \u003c/pre\u003e\n\n The customization is performed after modification using the IANA\n Language Subtag Registry.\n\n \u003cp\u003eFor example, if a user\u0027s Language Priority List consists of five\n language ranges ({@code \"zh\"}, {@code \"zh-CN\"}, {@code \"en\"},\n {@code \"zh-TW\"}, and {@code \"zh-HK\"}), the newly generated Language\n Priority List which is customized using the above map example will\n consists of {@code \"zh\"}, {@code \"zh-Hans\"}, {@code \"zh-CN\"},\n {@code \"zh-Hans-CN\"}, {@code \"en\"}, {@code \"zh-TW\"}, and\n {@code \"zh-HK\"}.\n\n \u003cp\u003e{@code \"zh-HK\"} and {@code \"zh-TW\"} aren\u0027t converted to\n {@code \"zh-Hans-HK\"} nor {@code \"zh-Hans-TW\"} even if they are\n included in the Language Priority List. In this example, mapping\n is used to clearly distinguish Simplified Chinese and Traditional\n Chinese.\n\n \u003cp\u003eIf the {@code \"zh\"}-to-{@code \"zh\"} mapping isn\u0027t included in the\n map, a simple replacement will be performed and the customized list\n won\u0027t include {@code \"zh\"} and {@code \"zh-CN\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.util.Locale.LanguageRange\u003e, java.util.Map\u003cjava.lang.String, java.util.List\u003cjava.lang.String\u003e\u003e)","flatSignature":"(List\u003cLocale.LanguageRange\u003e, Map\u003cString, List\u003cString\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"priorityList","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}},{"name":"map","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code value for the object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object to the specified object. The result is true if\n and only if the argument is not {@code null} and is a\n {@code LanguageRange} object that contains the same {@code range}\n and {@code weight} values as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}