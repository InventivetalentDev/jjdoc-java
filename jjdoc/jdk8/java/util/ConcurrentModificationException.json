{"name":"ConcurrentModificationException","comment":"This exception may be thrown by methods that have detected concurrent\n modification of an object when such modification is not permissible.\n \u003cp\u003e\n For example, it is not generally permissible for one thread to modify a Collection\n while another thread is iterating over it.  In general, the results of the\n iteration are undefined under these circumstances.  Some Iterator\n implementations (including those of all the general purpose collection implementations\n provided by the JRE) may choose to throw this exception if this behavior is\n detected.  Iterators that do this are known as \u003ci\u003efail-fast\u003c/i\u003e iterators,\n as they fail quickly and cleanly, rather that risking arbitrary,\n non-deterministic behavior at an undetermined time in the future.\n \u003cp\u003e\n Note that this exception does not always indicate that an object has\n been concurrently modified by a \u003ci\u003edifferent\u003c/i\u003e thread.  If a single\n thread issues a sequence of method invocations that violates the\n contract of an object, the object may throw this exception.  For\n example, if a thread modifies a collection directly while it is\n iterating over the collection with a fail-fast iterator, the iterator\n will throw this exception.\n\n \u003cp\u003eNote that fail-fast behavior cannot be guaranteed as it is, generally\n speaking, impossible to make any hard guarantees in the presence of\n unsynchronized concurrent modification.  Fail-fast operations\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: \u003ci\u003e{@code ConcurrentModificationException}\n should be used only to detect bugs.\u003c/i\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ConcurrentModificationException","qualifiedName":"java.util.ConcurrentModificationException","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.RuntimeException","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ConcurrentModificationException","comment":"Constructs a ConcurrentModificationException with no\n detail message.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"ConcurrentModificationException","comment":"Constructs a {@code ConcurrentModificationException} with the\n specified detail message.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"message","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentModificationException","comment":"Constructs a new exception with the specified cause and a detail\n message of {@code (cause\u003d\u003dnull ? null : cause.toString())} (which\n typically contains the class and detail message of {@code cause}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.Throwable)","flatSignature":"(Throwable)","parameters":[{"name":"cause","type":{"isPrimitive":false,"simpleName":"Throwable","qualifiedName":"java.lang.Throwable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ConcurrentModificationException","comment":"Constructs a new exception with the specified detail message and\n cause.\n\n \u003cp\u003eNote that the detail message associated with \u003ccode\u003ecause\u003c/code\u003e is\n \u003ci\u003enot\u003c/i\u003e automatically incorporated in this exception\u0027s detail\n message.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Throwable)","flatSignature":"(String, Throwable)","parameters":[{"name":"message","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"cause","type":{"isPrimitive":false,"simpleName":"Throwable","qualifiedName":"java.lang.Throwable","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[],"typeParameters":[],"subClasses":["java.nio.file.DirectoryIteratorException"],"enumConstants":[]}