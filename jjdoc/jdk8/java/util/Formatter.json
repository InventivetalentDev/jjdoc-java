{"name":"Formatter","comment":"An interpreter for printf-style format strings.  This class provides support\n for layout justification and alignment, common formats for numeric, string,\n and date/time data, and locale-specific output.  Common Java types such as\n {@code byte}, {@link java.math.BigDecimal BigDecimal}, and {@link Calendar}\n are supported.  Limited formatting customization for arbitrary user types is\n provided through the {@link Formattable} interface.\n\n \u003cp\u003e Formatters are not necessarily safe for multithreaded access.  Thread\n safety is optional and is the responsibility of users of methods in this\n class.\n\n \u003cp\u003e Formatted printing for the Java language is heavily inspired by C\u0027s\n {@code printf}.  Although the format strings are similar to C, some\n customizations have been made to accommodate the Java language and exploit\n some of its features.  Also, Java formatting is more strict than C\u0027s; for\n example, if a conversion is incompatible with a flag, an exception will be\n thrown.  In C inapplicable flags are silently ignored.  The format strings\n are thus intended to be recognizable to C programmers but not necessarily\n completely compatible with those in C.\n\n \u003cp\u003e Examples of expected usage:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   StringBuilder sb \u003d new StringBuilder();\n   // Send all output to the Appendable object sb\n   Formatter formatter \u003d new Formatter(sb, Locale.US);\n\n   // Explicit argument indices may be used to re-order output.\n   formatter.format(\"%4$2s %3$2s %2$2s %1$2s\", \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \" d  c  b  a\"\n\n   // Optional locale as the first argument can be used to get\n   // locale-specific formatting of numbers.  The precision and width can be\n   // given to round and align the value.\n   formatter.format(Locale.FRANCE, \"e \u003d %+10.4f\", Math.E);\n   // -\u0026gt; \"e \u003d    +2,7183\"\n\n   // The \u0027(\u0027 numeric flag may be used to format negative numbers with\n   // parentheses rather than a minus sign.  Group separators are\n   // automatically inserted.\n   formatter.format(\"Amount gained or lost since last statement: $ %(,.2f\",\n                    balanceDelta);\n   // -\u0026gt; \"Amount gained or lost since last statement: $ (6,217.58)\"\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e Convenience methods for common formatting requests exist as illustrated\n by the following invocations:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   // Writes a formatted string to System.out.\n   System.out.format(\"Local time: %tT\", Calendar.getInstance());\n   // -\u0026gt; \"Local time: 13:34:18\"\n\n   // Writes formatted output to System.err.\n   System.err.printf(\"Unable to open file \u0027%1$s\u0027: %2$s\",\n                     fileName, exception.getMessage());\n   // -\u0026gt; \"Unable to open file \u0027food\u0027: No such file or directory\"\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e Like C\u0027s {@code sprintf(3)}, Strings may be formatted using the static\n method {@link String#format(String,Object...) String.format}:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   // Format a string containing a date.\n   import java.util.Calendar;\n   import java.util.GregorianCalendar;\n   import static java.util.Calendar.*;\n\n   Calendar c \u003d new GregorianCalendar(1995, MAY, 23);\n   String s \u003d String.format(\"Duke\u0027s Birthday: %1$tb %1$te, %1$tY\", c);\n   // -\u0026gt; s \u003d\u003d \"Duke\u0027s Birthday: May 23, 1995\"\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003ch3\u003e\u003ca name\u003d\"org\"\u003eOrganization\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e This specification is divided into two sections.  The first section, \u003ca\n href\u003d\"#summary\"\u003eSummary\u003c/a\u003e, covers the basic formatting concepts.  This\n section is intended for users who want to get started quickly and are\n familiar with formatted printing in other programming languages.  The second\n section, \u003ca href\u003d\"#detail\"\u003eDetails\u003c/a\u003e, covers the specific implementation\n details.  It is intended for users who want more precise specification of\n formatting behavior.\n\n \u003ch3\u003e\u003ca name\u003d\"summary\"\u003eSummary\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e This section is intended to provide a brief overview of formatting\n concepts.  For precise behavioral details, refer to the \u003ca\n href\u003d\"#detail\"\u003eDetails\u003c/a\u003e section.\n\n \u003ch4\u003e\u003ca name\u003d\"syntax\"\u003eFormat String Syntax\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e Every method which produces formatted output requires a \u003ci\u003eformat\n string\u003c/i\u003e and an \u003ci\u003eargument list\u003c/i\u003e.  The format string is a {@link\n String} which may contain fixed text and one or more embedded \u003ci\u003eformat\n specifiers\u003c/i\u003e.  Consider the following example:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   Calendar c \u003d ...;\n   String s \u003d String.format(\"Duke\u0027s Birthday: %1$tm %1$te,%1$tY\", c);\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n This format string is the first argument to the {@code format} method.  It\n contains three format specifiers \"{@code %1$tm}\", \"{@code %1$te}\", and\n \"{@code %1$tY}\" which indicate how the arguments should be processed and\n where they should be inserted in the text.  The remaining portions of the\n format string are fixed text including {@code \"Dukes Birthday: \"} and any\n other spaces or punctuation.\n\n The argument list consists of all arguments passed to the method after the\n format string.  In the above example, the argument list is of size one and\n consists of the {@link java.util.Calendar Calendar} object {@code c}.\n\n \u003cul\u003e\n\n \u003cli\u003e The format specifiers for general, character, and numeric types have\n the following syntax:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   %[argument_index$][flags][width][.precision]conversion\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The optional \u003ci\u003eargument_index\u003c/i\u003e is a decimal integer indicating the\n position of the argument in the argument list.  The first argument is\n referenced by \"{@code 1$}\", the second by \"{@code 2$}\", etc.\n\n \u003cp\u003e The optional \u003ci\u003eflags\u003c/i\u003e is a set of characters that modify the output\n format.  The set of valid flags depends on the conversion.\n\n \u003cp\u003e The optional \u003ci\u003ewidth\u003c/i\u003e is a positive decimal integer indicating\n the minimum number of characters to be written to the output.\n\n \u003cp\u003e The optional \u003ci\u003eprecision\u003c/i\u003e is a non-negative decimal integer usually\n used to restrict the number of characters.  The specific behavior depends on\n the conversion.\n\n \u003cp\u003e The required \u003ci\u003econversion\u003c/i\u003e is a character indicating how the\n argument should be formatted.  The set of valid conversions for a given\n argument depends on the argument\u0027s data type.\n\n \u003cli\u003e The format specifiers for types which are used to represents dates and\n times have the following syntax:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   %[argument_index$][flags][width]conversion\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The optional \u003ci\u003eargument_index\u003c/i\u003e, \u003ci\u003eflags\u003c/i\u003e and \u003ci\u003ewidth\u003c/i\u003e are\n defined as above.\n\n \u003cp\u003e The required \u003ci\u003econversion\u003c/i\u003e is a two character sequence.  The first\n character is {@code \u0027t\u0027} or {@code \u0027T\u0027}.  The second character indicates\n the format to be used.  These characters are similar to but not completely\n identical to those defined by GNU {@code date} and POSIX\n {@code strftime(3c)}.\n\n \u003cli\u003e The format specifiers which do not correspond to arguments have the\n following syntax:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   %[flags][width]conversion\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The optional \u003ci\u003eflags\u003c/i\u003e and \u003ci\u003ewidth\u003c/i\u003e is defined as above.\n\n \u003cp\u003e The required \u003ci\u003econversion\u003c/i\u003e is a character indicating content to be\n inserted in the output.\n\n \u003c/ul\u003e\n\n \u003ch4\u003e Conversions \u003c/h4\u003e\n\n \u003cp\u003e Conversions are divided into the following categories:\n\n \u003col\u003e\n\n \u003cli\u003e \u003cb\u003eGeneral\u003c/b\u003e - may be applied to any argument\n type\n\n \u003cli\u003e \u003cb\u003eCharacter\u003c/b\u003e - may be applied to basic types which represent\n Unicode characters: {@code char}, {@link Character}, {@code byte}, {@link\n Byte}, {@code short}, and {@link Short}. This conversion may also be\n applied to the types {@code int} and {@link Integer} when {@link\n Character#isValidCodePoint} returns {@code true}\n\n \u003cli\u003e \u003cb\u003eNumeric\u003c/b\u003e\n\n \u003col\u003e\n\n \u003cli\u003e \u003cb\u003eIntegral\u003c/b\u003e - may be applied to Java integral types: {@code byte},\n {@link Byte}, {@code short}, {@link Short}, {@code int} and {@link\n Integer}, {@code long}, {@link Long}, and {@link java.math.BigInteger\n BigInteger} (but not {@code char} or {@link Character})\n\n \u003cli\u003e\u003cb\u003eFloating Point\u003c/b\u003e - may be applied to Java floating-point types:\n {@code float}, {@link Float}, {@code double}, {@link Double}, and {@link\n java.math.BigDecimal BigDecimal}\n\n \u003c/ol\u003e\n\n \u003cli\u003e \u003cb\u003eDate/Time\u003c/b\u003e - may be applied to Java types which are capable of\n encoding a date or time: {@code long}, {@link Long}, {@link Calendar},\n {@link Date} and {@link TemporalAccessor TemporalAccessor}\n\n \u003cli\u003e \u003cb\u003ePercent\u003c/b\u003e - produces a literal {@code \u0027%\u0027}\n (\u003ctt\u003e\u0027\u0026#92;u0025\u0027\u003c/tt\u003e)\n\n \u003cli\u003e \u003cb\u003eLine Separator\u003c/b\u003e - produces the platform-specific line separator\n\n \u003c/ol\u003e\n\n \u003cp\u003e The following table summarizes the supported conversions.  Conversions\n denoted by an upper-case character (i.e. {@code \u0027B\u0027}, {@code \u0027H\u0027},\n {@code \u0027S\u0027}, {@code \u0027C\u0027}, {@code \u0027X\u0027}, {@code \u0027E\u0027}, {@code \u0027G\u0027},\n {@code \u0027A\u0027}, and {@code \u0027T\u0027}) are the same as those for the corresponding\n lower-case conversion characters except that the result is converted to\n upper case according to the rules of the prevailing {@link java.util.Locale\n Locale}.  The result is equivalent to the following invocation of {@link\n String#toUpperCase()}\n\n \u003cpre\u003e\n    out.toUpperCase() \u003c/pre\u003e\n\n \u003ctable cellpadding\u003d5 summary\u003d\"genConv\"\u003e\n\n \u003ctr\u003e\u003cth valign\u003d\"bottom\"\u003e Conversion\n     \u003cth valign\u003d\"bottom\"\u003e Argument Category\n     \u003cth valign\u003d\"bottom\"\u003e Description\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027b\u0027}, {@code \u0027B\u0027}\n     \u003ctd valign\u003d\"top\"\u003e general\n     \u003ctd\u003e If the argument \u003ci\u003earg\u003c/i\u003e is {@code null}, then the result is\n     \"{@code false}\".  If \u003ci\u003earg\u003c/i\u003e is a {@code boolean} or {@link\n     Boolean}, then the result is the string returned by {@link\n     String#valueOf(boolean) String.valueOf(arg)}.  Otherwise, the result is\n     \"true\".\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027h\u0027}, {@code \u0027H\u0027}\n     \u003ctd valign\u003d\"top\"\u003e general\n     \u003ctd\u003e If the argument \u003ci\u003earg\u003c/i\u003e is {@code null}, then the result is\n     \"{@code null}\".  Otherwise, the result is obtained by invoking\n     {@code Integer.toHexString(arg.hashCode())}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027s\u0027}, {@code \u0027S\u0027}\n     \u003ctd valign\u003d\"top\"\u003e general\n     \u003ctd\u003e If the argument \u003ci\u003earg\u003c/i\u003e is {@code null}, then the result is\n     \"{@code null}\".  If \u003ci\u003earg\u003c/i\u003e implements {@link Formattable}, then\n     {@link Formattable#formatTo arg.formatTo} is invoked. Otherwise, the\n     result is obtained by invoking {@code arg.toString()}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027c\u0027}, {@code \u0027C\u0027}\n     \u003ctd valign\u003d\"top\"\u003e character\n     \u003ctd\u003e The result is a Unicode character\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027d\u0027}\n     \u003ctd valign\u003d\"top\"\u003e integral\n     \u003ctd\u003e The result is formatted as a decimal integer\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027o\u0027}\n     \u003ctd valign\u003d\"top\"\u003e integral\n     \u003ctd\u003e The result is formatted as an octal integer\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027x\u0027}, {@code \u0027X\u0027}\n     \u003ctd valign\u003d\"top\"\u003e integral\n     \u003ctd\u003e The result is formatted as a hexadecimal integer\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027e\u0027}, {@code \u0027E\u0027}\n     \u003ctd valign\u003d\"top\"\u003e floating point\n     \u003ctd\u003e The result is formatted as a decimal number in computerized\n     scientific notation\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027f\u0027}\n     \u003ctd valign\u003d\"top\"\u003e floating point\n     \u003ctd\u003e The result is formatted as a decimal number\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027g\u0027}, {@code \u0027G\u0027}\n     \u003ctd valign\u003d\"top\"\u003e floating point\n     \u003ctd\u003e The result is formatted using computerized scientific notation or\n     decimal format, depending on the precision and the value after rounding.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027a\u0027}, {@code \u0027A\u0027}\n     \u003ctd valign\u003d\"top\"\u003e floating point\n     \u003ctd\u003e The result is formatted as a hexadecimal floating-point number with\n     a significand and an exponent. This conversion is \u003cb\u003enot\u003c/b\u003e supported\n     for the {@code BigDecimal} type despite the latter\u0027s being in the\n     \u003ci\u003efloating point\u003c/i\u003e argument category.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027t\u0027}, {@code \u0027T\u0027}\n     \u003ctd valign\u003d\"top\"\u003e date/time\n     \u003ctd\u003e Prefix for date and time conversion characters.  See \u003ca\n     href\u003d\"#dt\"\u003eDate/Time Conversions\u003c/a\u003e.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027%\u0027}\n     \u003ctd valign\u003d\"top\"\u003e percent\n     \u003ctd\u003e The result is a literal {@code \u0027%\u0027} (\u003ctt\u003e\u0027\u0026#92;u0025\u0027\u003c/tt\u003e)\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027n\u0027}\n     \u003ctd valign\u003d\"top\"\u003e line separator\n     \u003ctd\u003e The result is the platform-specific line separator\n\n \u003c/table\u003e\n\n \u003cp\u003e Any characters not explicitly defined as conversions are illegal and are\n reserved for future extensions.\n\n \u003ch4\u003e\u003ca name\u003d\"dt\"\u003eDate/Time Conversions\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e The following date and time conversion suffix characters are defined for\n the {@code \u0027t\u0027} and {@code \u0027T\u0027} conversions.  The types are similar to but\n not completely identical to those defined by GNU {@code date} and POSIX\n {@code strftime(3c)}.  Additional conversion types are provided to access\n Java-specific functionality (e.g. {@code \u0027L\u0027} for milliseconds within the\n second).\n\n \u003cp\u003e The following conversion characters are used for formatting times:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"time\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027H\u0027}\n     \u003ctd\u003e Hour of the day for the 24-hour clock, formatted as two digits with\n     a leading zero as necessary i.e. {@code 00 - 23}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027I\u0027}\n     \u003ctd\u003e Hour for the 12-hour clock, formatted as two digits with a leading\n     zero as necessary, i.e.  {@code 01 - 12}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027k\u0027}\n     \u003ctd\u003e Hour of the day for the 24-hour clock, i.e. {@code 0 - 23}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027l\u0027}\n     \u003ctd\u003e Hour for the 12-hour clock, i.e. {@code 1 - 12}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027M\u0027}\n     \u003ctd\u003e Minute within the hour formatted as two digits with a leading zero\n     as necessary, i.e.  {@code 00 - 59}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027S\u0027}\n     \u003ctd\u003e Seconds within the minute, formatted as two digits with a leading\n     zero as necessary, i.e. {@code 00 - 60} (\"{@code 60}\" is a special\n     value required to support leap seconds).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027L\u0027}\n     \u003ctd\u003e Millisecond within the second formatted as three digits with\n     leading zeros as necessary, i.e. {@code 000 - 999}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027N\u0027}\n     \u003ctd\u003e Nanosecond within the second, formatted as nine digits with leading\n     zeros as necessary, i.e. {@code 000000000 - 999999999}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027p\u0027}\n     \u003ctd\u003e Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker\n     in lower case, e.g.\"{@code am}\" or \"{@code pm}\". Use of the conversion\n     prefix {@code \u0027T\u0027} forces this output to upper case.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027z\u0027}\n     \u003ctd\u003e \u003ca href\u003d\"http://www.ietf.org/rfc/rfc0822.txt\"\u003eRFC\u0026nbsp;822\u003c/a\u003e\n     style numeric time zone offset from GMT, e.g. {@code -0800}.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027Z\u0027}\n     \u003ctd\u003e A string representing the abbreviation for the time zone.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the  time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.  The Formatter\u0027s locale will\n     supersede the locale of the argument (if any).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027s\u0027}\n     \u003ctd\u003e Seconds since the beginning of the epoch starting at 1 January 1970\n     {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE/1000} to\n     {@code Long.MAX_VALUE/1000}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027Q\u0027}\n     \u003ctd\u003e Milliseconds since the beginning of the epoch starting at 1 January\n     1970 {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE} to\n     {@code Long.MAX_VALUE}.\n\n \u003c/table\u003e\n\n \u003cp\u003e The following conversion characters are used for formatting dates:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"date\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027B\u0027}\n     \u003ctd\u003e Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths\n     full month name}, e.g. {@code \"January\"}, {@code \"February\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027b\u0027}\n     \u003ctd\u003e Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getShortMonths abbreviated month name},\n     e.g. {@code \"Jan\"}, {@code \"Feb\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027h\u0027}\n     \u003ctd\u003e Same as {@code \u0027b\u0027}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027A\u0027}\n     \u003ctd\u003e Locale-specific full name of the {@linkplain\n     java.text.DateFormatSymbols#getWeekdays day of the week},\n     e.g. {@code \"Sunday\"}, {@code \"Monday\"}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027a\u0027}\n     \u003ctd\u003e Locale-specific short name of the {@linkplain\n     java.text.DateFormatSymbols#getShortWeekdays day of the week},\n     e.g. {@code \"Sun\"}, {@code \"Mon\"}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027C\u0027}\n     \u003ctd\u003e Four-digit year divided by {@code 100}, formatted as two digits\n     with leading zero as necessary, i.e. {@code 00 - 99}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027Y\u0027}\n     \u003ctd\u003e Year, formatted as at least four digits with leading zeros as\n     necessary, e.g. {@code 0092} equals {@code 92} CE for the Gregorian\n     calendar.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027y\u0027}\n     \u003ctd\u003e Last two digits of the year, formatted with leading zeros as\n     necessary, i.e. {@code 00 - 99}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027j\u0027}\n     \u003ctd\u003e Day of year, formatted as three digits with leading zeros as\n     necessary, e.g. {@code 001 - 366} for the Gregorian calendar.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027m\u0027}\n     \u003ctd\u003e Month, formatted as two digits with leading zeros as necessary,\n     i.e. {@code 01 - 13}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027d\u0027}\n     \u003ctd\u003e Day of month, formatted as two digits with leading zeros as\n     necessary, i.e. {@code 01 - 31}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027e\u0027}\n     \u003ctd\u003e Day of month, formatted as two digits, i.e. {@code 1 - 31}.\n\n \u003c/table\u003e\n\n \u003cp\u003e The following conversion characters are used for formatting common\n date/time compositions.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"composites\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027R\u0027}\n     \u003ctd\u003e Time formatted for the 24-hour clock as {@code \"%tH:%tM\"}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027T\u0027}\n     \u003ctd\u003e Time formatted for the 24-hour clock as {@code \"%tH:%tM:%tS\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027r\u0027}\n     \u003ctd\u003e Time formatted for the 12-hour clock as {@code \"%tI:%tM:%tS %Tp\"}.\n     The location of the morning or afternoon marker ({@code \u0027%Tp\u0027}) may be\n     locale-dependent.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027D\u0027}\n     \u003ctd\u003e Date formatted as {@code \"%tm/%td/%ty\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027F\u0027}\n     \u003ctd\u003e \u003ca href\u003d\"http://www.w3.org/TR/NOTE-datetime\"\u003eISO\u0026nbsp;8601\u003c/a\u003e\n     complete date formatted as {@code \"%tY-%tm-%td\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027c\u0027}\n     \u003ctd\u003e Date and time formatted as {@code \"%ta %tb %td %tT %tZ %tY\"},\n     e.g. {@code \"Sun Jul 20 16:17:00 EDT 1969\"}.\n\n \u003c/table\u003e\n\n \u003cp\u003e Any characters not explicitly defined as date/time conversion suffixes\n are illegal and are reserved for future extensions.\n\n \u003ch4\u003e Flags \u003c/h4\u003e\n\n \u003cp\u003e The following table summarizes the supported flags.  \u003ci\u003ey\u003c/i\u003e means the\n flag is supported for the indicated argument types.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"genConv\"\u003e\n\n \u003ctr\u003e\u003cth valign\u003d\"bottom\"\u003e Flag \u003cth valign\u003d\"bottom\"\u003e General\n     \u003cth valign\u003d\"bottom\"\u003e Character \u003cth valign\u003d\"bottom\"\u003e Integral\n     \u003cth valign\u003d\"bottom\"\u003e Floating Point\n     \u003cth valign\u003d\"bottom\"\u003e Date/Time\n     \u003cth valign\u003d\"bottom\"\u003e Description\n\n \u003ctr\u003e\u003ctd\u003e \u0027-\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd\u003e The result will be left-justified.\n\n \u003ctr\u003e\u003ctd\u003e \u0027#\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e1\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e3\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd\u003e The result should use a conversion-dependent alternate form\n\n \u003ctr\u003e\u003ctd\u003e \u0027+\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e4\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd\u003e The result will always include a sign\n\n \u003ctr\u003e\u003ctd\u003e \u0027\u0026nbsp;\u0026nbsp;\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e4\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd\u003e The result will include a leading space for positive values\n\n \u003ctr\u003e\u003ctd\u003e \u00270\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd\u003e The result will be zero-padded\n\n \u003ctr\u003e\u003ctd\u003e \u0027,\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e2\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e5\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd\u003e The result will include locale-specific {@linkplain\n     java.text.DecimalFormatSymbols#getGroupingSeparator grouping separators}\n\n \u003ctr\u003e\u003ctd\u003e \u0027(\u0027 \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e -\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e4\u003c/sup\u003e\n     \u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e y\u003csup\u003e5\u003c/sup\u003e\n     \u003ctd align\u003d\"center\"\u003e -\n     \u003ctd\u003e The result will enclose negative numbers in parentheses\n\n \u003c/table\u003e\n\n \u003cp\u003e \u003csup\u003e1\u003c/sup\u003e Depends on the definition of {@link Formattable}.\n\n \u003cp\u003e \u003csup\u003e2\u003c/sup\u003e For {@code \u0027d\u0027} conversion only.\n\n \u003cp\u003e \u003csup\u003e3\u003c/sup\u003e For {@code \u0027o\u0027}, {@code \u0027x\u0027}, and {@code \u0027X\u0027}\n conversions only.\n\n \u003cp\u003e \u003csup\u003e4\u003c/sup\u003e For {@code \u0027d\u0027}, {@code \u0027o\u0027}, {@code \u0027x\u0027}, and\n {@code \u0027X\u0027} conversions applied to {@link java.math.BigInteger BigInteger}\n or {@code \u0027d\u0027} applied to {@code byte}, {@link Byte}, {@code short}, {@link\n Short}, {@code int} and {@link Integer}, {@code long}, and {@link Long}.\n\n \u003cp\u003e \u003csup\u003e5\u003c/sup\u003e For {@code \u0027e\u0027}, {@code \u0027E\u0027}, {@code \u0027f\u0027},\n {@code \u0027g\u0027}, and {@code \u0027G\u0027} conversions only.\n\n \u003cp\u003e Any characters not explicitly defined as flags are illegal and are\n reserved for future extensions.\n\n \u003ch4\u003e Width \u003c/h4\u003e\n\n \u003cp\u003e The width is the minimum number of characters to be written to the\n output.  For the line separator conversion, width is not applicable; if it\n is provided, an exception will be thrown.\n\n \u003ch4\u003e Precision \u003c/h4\u003e\n\n \u003cp\u003e For general argument types, the precision is the maximum number of\n characters to be written to the output.\n\n \u003cp\u003e For the floating-point conversions {@code \u0027a\u0027}, {@code \u0027A\u0027}, {@code \u0027e\u0027},\n {@code \u0027E\u0027}, and {@code \u0027f\u0027} the precision is the number of digits after the\n radix point.  If the conversion is {@code \u0027g\u0027} or {@code \u0027G\u0027}, then the\n precision is the total number of digits in the resulting magnitude after\n rounding.\n\n \u003cp\u003e For character, integral, and date/time argument types and the percent\n and line separator conversions, the precision is not applicable; if a\n precision is provided, an exception will be thrown.\n\n \u003ch4\u003e Argument Index \u003c/h4\u003e\n\n \u003cp\u003e The argument index is a decimal integer indicating the position of the\n argument in the argument list.  The first argument is referenced by\n \"{@code 1$}\", the second by \"{@code 2$}\", etc.\n\n \u003cp\u003e Another way to reference arguments by position is to use the\n {@code \u0027\u003c\u0027} (\u003ctt\u003e\u0027\u0026#92;u003c\u0027\u003c/tt\u003e) flag, which causes the argument for\n the previous format specifier to be re-used.  For example, the following two\n statements would produce identical strings:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   Calendar c \u003d ...;\n   String s1 \u003d String.format(\"Duke\u0027s Birthday: %1$tm %1$te,%1$tY\", c);\n\n   String s2 \u003d String.format(\"Duke\u0027s Birthday: %1$tm %\u0026lt;te,%\u0026lt;tY\", c);\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003chr\u003e\n \u003ch3\u003e\u003ca name\u003d\"detail\"\u003eDetails\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e This section is intended to provide behavioral details for formatting,\n including conditions and exceptions, supported data types, localization, and\n interactions between flags, conversions, and data types.  For an overview of\n formatting concepts, refer to the \u003ca href\u003d\"#summary\"\u003eSummary\u003c/a\u003e\n\n \u003cp\u003e Any characters not explicitly defined as conversions, date/time\n conversion suffixes, or flags are illegal and are reserved for\n future extensions.  Use of such a character in a format string will\n cause an {@link UnknownFormatConversionException} or {@link\n UnknownFormatFlagsException} to be thrown.\n\n \u003cp\u003e If the format specifier contains a width or precision with an invalid\n value or which is otherwise unsupported, then a {@link\n IllegalFormatWidthException} or {@link IllegalFormatPrecisionException}\n respectively will be thrown.\n\n \u003cp\u003e If a format specifier contains a conversion character that is not\n applicable to the corresponding argument, then an {@link\n IllegalFormatConversionException} will be thrown.\n\n \u003cp\u003e All specified exceptions may be thrown by any of the {@code format}\n methods of {@code Formatter} as well as by any {@code format} convenience\n methods such as {@link String#format(String,Object...) String.format} and\n {@link java.io.PrintStream#printf(String,Object...) PrintStream.printf}.\n\n \u003cp\u003e Conversions denoted by an upper-case character (i.e. {@code \u0027B\u0027},\n {@code \u0027H\u0027}, {@code \u0027S\u0027}, {@code \u0027C\u0027}, {@code \u0027X\u0027}, {@code \u0027E\u0027},\n {@code \u0027G\u0027}, {@code \u0027A\u0027}, and {@code \u0027T\u0027}) are the same as those for the\n corresponding lower-case conversion characters except that the result is\n converted to upper case according to the rules of the prevailing {@link\n java.util.Locale Locale}.  The result is equivalent to the following\n invocation of {@link String#toUpperCase()}\n\n \u003cpre\u003e\n    out.toUpperCase() \u003c/pre\u003e\n\n \u003ch4\u003e\u003ca name\u003d\"dgen\"\u003eGeneral\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e The following general conversions may be applied to any argument type:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"dgConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027b\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0062\u0027\u003c/tt\u003e\n     \u003ctd\u003e Produces either \"{@code true}\" or \"{@code false}\" as returned by\n     {@link Boolean#toString(boolean)}.\n\n     \u003cp\u003e If the argument is {@code null}, then the result is\n     \"{@code false}\".  If the argument is a {@code boolean} or {@link\n     Boolean}, then the result is the string returned by {@link\n     String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is\n     \"{@code true}\".\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027B\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0042\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027b\u0027}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027h\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0068\u0027\u003c/tt\u003e\n     \u003ctd\u003e Produces a string representing the hash code value of the object.\n\n     \u003cp\u003e If the argument, \u003ci\u003earg\u003c/i\u003e is {@code null}, then the\n     result is \"{@code null}\".  Otherwise, the result is obtained\n     by invoking {@code Integer.toHexString(arg.hashCode())}.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027H\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0048\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027h\u0027}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027s\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0073\u0027\u003c/tt\u003e\n     \u003ctd\u003e Produces a string.\n\n     \u003cp\u003e If the argument is {@code null}, then the result is\n     \"{@code null}\".  If the argument implements {@link Formattable}, then\n     its {@link Formattable#formatTo formatTo} method is invoked.\n     Otherwise, the result is obtained by invoking the argument\u0027s\n     {@code toString()} method.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given and the argument is not a {@link\n     Formattable} , then a {@link FormatFlagsConversionMismatchException}\n     will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027S\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0053\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027s\u0027}.\n\n \u003c/table\u003e\n\n \u003cp\u003e The following \u003ca name\u003d\"dFlags\"\u003eflags\u003c/a\u003e apply to general conversions:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"dFlags\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027-\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e\n     \u003ctd\u003e Left justifies the output.  Spaces (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) will be\n     added at the end of the converted value as required to fill the minimum\n     width of the field.  If the width is not provided, then a {@link\n     MissingFormatWidthException} will be thrown.  If this flag is not given\n     then the output will be right-justified.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027#\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0023\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output use an alternate form.  The definition of the\n     form is specified by the conversion.\n\n \u003c/table\u003e\n\n \u003cp\u003e The \u003ca name\u003d\"genWidth\"\u003ewidth\u003c/a\u003e is the minimum number of characters to\n be written to the\n output.  If the length of the converted value is less than the width then\n the output will be padded by \u003ctt\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/tt\u003e (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e)\n until the total number of characters equals the width.  The padding is on\n the left by default.  If the {@code \u0027-\u0027} flag is given, then the padding\n will be on the right.  If the width is not specified then there is no\n minimum.\n\n \u003cp\u003e The precision is the maximum number of characters to be written to the\n output.  The precision is applied before the width, thus the output will be\n truncated to {@code precision} characters even if the width is greater than\n the precision.  If the precision is not specified then there is no explicit\n limit on the number of characters.\n\n \u003ch4\u003e\u003ca name\u003d\"dchar\"\u003eCharacter\u003c/a\u003e\u003c/h4\u003e\n\n This conversion may be applied to {@code char} and {@link Character}.  It\n may also be applied to the types {@code byte}, {@link Byte},\n {@code short}, and {@link Short}, {@code int} and {@link Integer} when\n {@link Character#isValidCodePoint} returns {@code true}.  If it returns\n {@code false} then an {@link IllegalFormatCodePointException} will be\n thrown.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"charConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027c\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0063\u0027\u003c/tt\u003e\n     \u003ctd\u003e Formats the argument as a Unicode character as described in \u003ca\n     href\u003d\"../lang/Character.html#unicode\"\u003eUnicode Character\n     Representation\u003c/a\u003e.  This may be more than one 16-bit {@code char} in\n     the case where the argument represents a supplementary character.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027C\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0043\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027c\u0027}.\n\n \u003c/table\u003e\n\n \u003cp\u003e The {@code \u0027-\u0027} flag defined for \u003ca href\u003d\"#dFlags\"\u003eGeneral\n conversions\u003c/a\u003e applies.  If the {@code \u0027#\u0027} flag is given, then a {@link\n FormatFlagsConversionMismatchException} will be thrown.\n\n \u003cp\u003e The width is defined as for \u003ca href\u003d\"#genWidth\"\u003eGeneral conversions\u003c/a\u003e.\n\n \u003cp\u003e The precision is not applicable.  If the precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n \u003ch4\u003e\u003ca name\u003d\"dnum\"\u003eNumeric\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e Numeric conversions are divided into the following categories:\n\n \u003col\u003e\n\n \u003cli\u003e \u003ca href\u003d\"#dnint\"\u003e\u003cb\u003eByte, Short, Integer, and Long\u003c/b\u003e\u003c/a\u003e\n\n \u003cli\u003e \u003ca href\u003d\"#dnbint\"\u003e\u003cb\u003eBigInteger\u003c/b\u003e\u003c/a\u003e\n\n \u003cli\u003e \u003ca href\u003d\"#dndec\"\u003e\u003cb\u003eFloat and Double\u003c/b\u003e\u003c/a\u003e\n\n \u003cli\u003e \u003ca href\u003d\"#dnbdec\"\u003e\u003cb\u003eBigDecimal\u003c/b\u003e\u003c/a\u003e\n\n \u003c/ol\u003e\n\n \u003cp\u003e Numeric types will be formatted according to the following algorithm:\n\n \u003cp\u003e\u003cb\u003e\u003ca name\u003d\"L10nAlgorithm\"\u003e Number Localization Algorithm\u003c/a\u003e\u003c/b\u003e\n\n \u003cp\u003e After digits are obtained for the integer part, fractional part, and\n exponent (as appropriate for the data type), the following transformation\n is applied:\n\n \u003col\u003e\n\n \u003cli\u003e Each digit character \u003ci\u003ed\u003c/i\u003e in the string is replaced by a\n locale-specific digit computed relative to the current locale\u0027s\n {@linkplain java.text.DecimalFormatSymbols#getZeroDigit() zero digit}\n \u003ci\u003ez\u003c/i\u003e; that is \u003ci\u003ed\u0026nbsp;-\u0026nbsp;\u003c/i\u003e {@code \u00270\u0027}\n \u003ci\u003e\u0026nbsp;+\u0026nbsp;z\u003c/i\u003e.\n\n \u003cli\u003e If a decimal separator is present, a locale-specific {@linkplain\n java.text.DecimalFormatSymbols#getDecimalSeparator decimal separator} is\n substituted.\n\n \u003cli\u003e If the {@code \u0027,\u0027} (\u003ctt\u003e\u0027\u0026#92;u002c\u0027\u003c/tt\u003e)\n \u003ca name\u003d\"L10nGroup\"\u003eflag\u003c/a\u003e is given, then the locale-specific {@linkplain\n java.text.DecimalFormatSymbols#getGroupingSeparator grouping separator} is\n inserted by scanning the integer part of the string from least significant\n to most significant digits and inserting a separator at intervals defined by\n the locale\u0027s {@linkplain java.text.DecimalFormat#getGroupingSize() grouping\n size}.\n\n \u003cli\u003e If the {@code \u00270\u0027} flag is given, then the locale-specific {@linkplain\n java.text.DecimalFormatSymbols#getZeroDigit() zero digits} are inserted\n after the sign character, if any, and before the first non-zero digit, until\n the length of the string is equal to the requested field width.\n\n \u003cli\u003e If the value is negative and the {@code \u0027(\u0027} flag is given, then a\n {@code \u0027(\u0027} (\u003ctt\u003e\u0027\u0026#92;u0028\u0027\u003c/tt\u003e) is prepended and a {@code \u0027)\u0027}\n (\u003ctt\u003e\u0027\u0026#92;u0029\u0027\u003c/tt\u003e) is appended.\n\n \u003cli\u003e If the value is negative (or floating-point negative zero) and\n {@code \u0027(\u0027} flag is not given, then a {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e)\n is prepended.\n\n \u003cli\u003e If the {@code \u0027+\u0027} flag is given and the value is positive or zero (or\n floating-point positive zero), then a {@code \u0027+\u0027} (\u003ctt\u003e\u0027\u0026#92;u002b\u0027\u003c/tt\u003e)\n will be prepended.\n\n \u003c/ol\u003e\n\n \u003cp\u003e If the value is NaN or positive infinity the literal strings \"NaN\" or\n \"Infinity\" respectively, will be output.  If the value is negative infinity,\n then the output will be \"(Infinity)\" if the {@code \u0027(\u0027} flag is given\n otherwise the output will be \"-Infinity\".  These values are not localized.\n\n \u003cp\u003e\u003ca name\u003d\"dnint\"\u003e\u003cb\u003e Byte, Short, Integer, and Long \u003c/b\u003e\u003c/a\u003e\n\n \u003cp\u003e The following conversions may be applied to {@code byte}, {@link Byte},\n {@code short}, {@link Short}, {@code int} and {@link Integer},\n {@code long}, and {@link Long}.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"IntConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027d\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0064\u0027\u003c/tt\u003e\n     \u003ctd\u003e Formats the argument as a decimal integer. The \u003ca\n     href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied.\n\n     \u003cp\u003e If the {@code \u00270\u0027} flag is given and the value is negative, then\n     the zero padding will occur after the sign.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027o\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u006f\u0027\u003c/tt\u003e\n     \u003ctd\u003e Formats the argument as an integer in base eight.  No localization\n     is applied.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be an unsigned value\n     generated by adding 2\u003csup\u003en\u003c/sup\u003e to the value where {@code n} is the\n     number of bits in the type as returned by the static {@code SIZE} field\n     in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},\n     {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}\n     classes as appropriate.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then the output will always begin\n     with the radix indicator {@code \u00270\u0027}.\n\n     \u003cp\u003e If the {@code \u00270\u0027} flag is given then the output will be padded\n     with leading zeros to the field width following any indication of sign.\n\n     \u003cp\u003e If {@code \u0027(\u0027}, {@code \u0027+\u0027}, \u0027\u0026nbsp;\u0026nbsp;\u0027, or {@code \u0027,\u0027} flags\n     are given then a {@link FormatFlagsConversionMismatchException} will be\n     thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027x\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0078\u0027\u003c/tt\u003e\n     \u003ctd\u003e Formats the argument as an integer in base sixteen. No\n     localization is applied.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be an unsigned value\n     generated by adding 2\u003csup\u003en\u003c/sup\u003e to the value where {@code n} is the\n     number of bits in the type as returned by the static {@code SIZE} field\n     in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},\n     {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}\n     classes as appropriate.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then the output will always begin\n     with the radix indicator {@code \"0x\"}.\n\n     \u003cp\u003e If the {@code \u00270\u0027} flag is given then the output will be padded to\n     the field width with leading zeros after the radix indicator or sign (if\n     present).\n\n     \u003cp\u003e If {@code \u0027(\u0027}, \u003ctt\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/tt\u003e, {@code \u0027+\u0027}, or\n     {@code \u0027,\u0027} flags are given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027X\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0058\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027x\u0027}.  The entire string\n     representing the number will be converted to {@linkplain\n     String#toUpperCase upper case} including the {@code \u0027x\u0027} (if any) and\n     all hexadecimal digits {@code \u0027a\u0027} - {@code \u0027f\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0061\u0027\u003c/tt\u003e -  \u003ctt\u003e\u0027\u0026#92;u0066\u0027\u003c/tt\u003e).\n\n \u003c/table\u003e\n\n \u003cp\u003e If the conversion is {@code \u0027o\u0027}, {@code \u0027x\u0027}, or {@code \u0027X\u0027} and\n both the {@code \u0027#\u0027} and the {@code \u00270\u0027} flags are given, then result will\n contain the radix indicator ({@code \u00270\u0027} for octal and {@code \"0x\"} or\n {@code \"0X\"} for hexadecimal), some number of zeros (based on the width),\n and the value.\n\n \u003cp\u003e If the {@code \u0027-\u0027} flag is not given, then the space padding will occur\n before the sign.\n\n \u003cp\u003e The following \u003ca name\u003d\"intFlags\"\u003eflags\u003c/a\u003e apply to numeric integral\n conversions:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"intFlags\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027+\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u002b\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to include a positive sign for all positive\n     numbers.  If this flag is not given then only negative values will\n     include a sign.\n\n     \u003cp\u003e If both the {@code \u0027+\u0027} and \u003ctt\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/tt\u003e flags are given\n     then an {@link IllegalFormatFlagsException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/tt\u003e\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to include a single extra space\n     (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) for non-negative values.\n\n     \u003cp\u003e If both the {@code \u0027+\u0027} and \u003ctt\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/tt\u003e flags are given\n     then an {@link IllegalFormatFlagsException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u00270\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0030\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be padded with leading {@linkplain\n     java.text.DecimalFormatSymbols#getZeroDigit zeros} to the minimum field\n     width following any sign or radix indicator except when converting NaN\n     or infinity.  If the width is not provided, then a {@link\n     MissingFormatWidthException} will be thrown.\n\n     \u003cp\u003e If both the {@code \u0027-\u0027} and {@code \u00270\u0027} flags are given then an\n     {@link IllegalFormatFlagsException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027,\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u002c\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to include the locale-specific {@linkplain\n     java.text.DecimalFormatSymbols#getGroupingSeparator group separators} as\n     described in the \u003ca href\u003d\"#L10nGroup\"\u003e\"group\" section\u003c/a\u003e of the\n     localization algorithm.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027(\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0028\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to prepend a {@code \u0027(\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0028\u0027\u003c/tt\u003e) and append a {@code \u0027)\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0029\u0027\u003c/tt\u003e) to negative values.\n\n \u003c/table\u003e\n\n \u003cp\u003e If no \u003ca name\u003d\"intdFlags\"\u003eflags\u003c/a\u003e are given the default formatting is\n as follows:\n\n \u003cul\u003e\n\n \u003cli\u003e The output is right-justified within the {@code width}\n\n \u003cli\u003e Negative numbers begin with a {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e)\n\n \u003cli\u003e Positive numbers and zero do not include a sign or extra leading\n space\n\n \u003cli\u003e No grouping separators are included\n\n \u003c/ul\u003e\n\n \u003cp\u003e The \u003ca name\u003d\"intWidth\"\u003ewidth\u003c/a\u003e is the minimum number of characters to\n be written to the output.  This includes any signs, digits, grouping\n separators, radix indicator, and parentheses.  If the length of the\n converted value is less than the width then the output will be padded by\n spaces (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) until the total number of characters equals\n width.  The padding is on the left by default.  If {@code \u0027-\u0027} flag is\n given then the padding will be on the right.  If width is not specified then\n there is no minimum.\n\n \u003cp\u003e The precision is not applicable.  If precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n \u003cp\u003e\u003ca name\u003d\"dnbint\"\u003e\u003cb\u003e BigInteger \u003c/b\u003e\u003c/a\u003e\n\n \u003cp\u003e The following conversions may be applied to {@link\n java.math.BigInteger}.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"BIntConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027d\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0064\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted as a decimal integer. The \u003ca\n     href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027o\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u006f\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted as an integer in base eight.\n     No localization is applied.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be a signed value\n     beginning with {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e).  Signed output is\n     allowed for this type because unlike the primitive types it is not\n     possible to create an unsigned equivalent without assuming an explicit\n     data-type size.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is positive or zero and the {@code \u0027+\u0027} flag is given\n     then the result will begin with {@code \u0027+\u0027} (\u003ctt\u003e\u0027\u0026#92;u002b\u0027\u003c/tt\u003e).\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then the output will always begin\n     with {@code \u00270\u0027} prefix.\n\n     \u003cp\u003e If the {@code \u00270\u0027} flag is given then the output will be padded\n     with leading zeros to the field width following any indication of sign.\n\n     \u003cp\u003e If the {@code \u0027,\u0027} flag is given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027x\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0078\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted as an integer in base\n     sixteen.  No localization is applied.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be a signed value\n     beginning with {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e).  Signed output is\n     allowed for this type because unlike the primitive types it is not\n     possible to create an unsigned equivalent without assuming an explicit\n     data-type size.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is positive or zero and the {@code \u0027+\u0027} flag is given\n     then the result will begin with {@code \u0027+\u0027} (\u003ctt\u003e\u0027\u0026#92;u002b\u0027\u003c/tt\u003e).\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then the output will always begin\n     with the radix indicator {@code \"0x\"}.\n\n     \u003cp\u003e If the {@code \u00270\u0027} flag is given then the output will be padded to\n     the field width with leading zeros after the radix indicator or sign (if\n     present).\n\n     \u003cp\u003e If the {@code \u0027,\u0027} flag is given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027X\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0058\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027x\u0027}.  The entire string\n     representing the number will be converted to {@linkplain\n     String#toUpperCase upper case} including the {@code \u0027x\u0027} (if any) and\n     all hexadecimal digits {@code \u0027a\u0027} - {@code \u0027f\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0061\u0027\u003c/tt\u003e - \u003ctt\u003e\u0027\u0026#92;u0066\u0027\u003c/tt\u003e).\n\n \u003c/table\u003e\n\n \u003cp\u003e If the conversion is {@code \u0027o\u0027}, {@code \u0027x\u0027}, or {@code \u0027X\u0027} and\n both the {@code \u0027#\u0027} and the {@code \u00270\u0027} flags are given, then result will\n contain the base indicator ({@code \u00270\u0027} for octal and {@code \"0x\"} or\n {@code \"0X\"} for hexadecimal), some number of zeros (based on the width),\n and the value.\n\n \u003cp\u003e If the {@code \u00270\u0027} flag is given and the value is negative, then the\n zero padding will occur after the sign.\n\n \u003cp\u003e If the {@code \u0027-\u0027} flag is not given, then the space padding will occur\n before the sign.\n\n \u003cp\u003e All \u003ca href\u003d\"#intFlags\"\u003eflags\u003c/a\u003e defined for Byte, Short, Integer, and\n Long apply.  The \u003ca href\u003d\"#intdFlags\"\u003edefault behavior\u003c/a\u003e when no flags are\n given is the same as for Byte, Short, Integer, and Long.\n\n \u003cp\u003e The specification of \u003ca href\u003d\"#intWidth\"\u003ewidth\u003c/a\u003e is the same as\n defined for Byte, Short, Integer, and Long.\n\n \u003cp\u003e The precision is not applicable.  If precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n \u003cp\u003e\u003ca name\u003d\"dndec\"\u003e\u003cb\u003e Float and Double\u003c/b\u003e\u003c/a\u003e\n\n \u003cp\u003e The following conversions may be applied to {@code float}, {@link\n Float}, {@code double} and {@link Double}.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"floatConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027e\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0065\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted using \u003ca\n     name\u003d\"scientific\"\u003ecomputerized scientific notation\u003c/a\u003e.  The \u003ca\n     href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied.\n\n     \u003cp\u003e The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is NaN or infinite, the literal strings \"NaN\" or\n     \"Infinity\", respectively, will be output.  These values are not\n     localized.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is positive-zero or negative-zero, then the exponent\n     will be {@code \"+00\"}.\n\n     \u003cp\u003e Otherwise, the result is a string that represents the sign and\n     magnitude (absolute value) of the argument.  The formatting of the sign\n     is described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization\n     algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its\n     value.\n\n     \u003cp\u003e Let \u003ci\u003en\u003c/i\u003e be the unique integer such that 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\n     \u0026lt;\u003d \u003ci\u003em\u003c/i\u003e \u0026lt; 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e+1\u003c/sup\u003e; then let \u003ci\u003ea\u003c/i\u003e be the\n     mathematically exact quotient of \u003ci\u003em\u003c/i\u003e and 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e so\n     that 1 \u0026lt;\u003d \u003ci\u003ea\u003c/i\u003e \u0026lt; 10. The magnitude is then represented as the\n     integer part of \u003ci\u003ea\u003c/i\u003e, as a single decimal digit, followed by the\n     decimal separator followed by decimal digits representing the fractional\n     part of \u003ci\u003ea\u003c/i\u003e, followed by the exponent symbol {@code \u0027e\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0065\u0027\u003c/tt\u003e), followed by the sign of the exponent, followed\n     by a representation of \u003ci\u003en\u003c/i\u003e as a decimal integer, as produced by the\n     method {@link Long#toString(long, int)}, and zero-padded to include at\n     least two digits.\n\n     \u003cp\u003e The number of digits in the result for the fractional part of\n     \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision.  If the precision is not\n     specified then the default value is {@code 6}. If the precision is less\n     than the number of digits which would appear after the decimal point in\n     the string returned by {@link Float#toString(float)} or {@link\n     Double#toString(double)} respectively, then the value will be rounded\n     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     Float#toString(float)} or {@link Double#toString(double)} as\n     appropriate.\n\n     \u003cp\u003eIf the {@code \u0027,\u0027} flag is given, then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027E\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0045\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027e\u0027}.  The exponent symbol\n     will be {@code \u0027E\u0027} (\u003ctt\u003e\u0027\u0026#92;u0045\u0027\u003c/tt\u003e).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027g\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0067\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted in general scientific notation\n     as described below. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization\n     algorithm\u003c/a\u003e is applied.\n\n     \u003cp\u003e After rounding for the precision, the formatting of the resulting\n     magnitude \u003ci\u003em\u003c/i\u003e depends on its value.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is greater than or equal to 10\u003csup\u003e-4\u003c/sup\u003e but less\n     than 10\u003csup\u003eprecision\u003c/sup\u003e then it is represented in \u003ci\u003e\u003ca\n     href\u003d\"#decimal\"\u003edecimal format\u003c/a\u003e\u003c/i\u003e.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is less than 10\u003csup\u003e-4\u003c/sup\u003e or greater than or equal to\n     10\u003csup\u003eprecision\u003c/sup\u003e, then it is represented in \u003ci\u003e\u003ca\n     href\u003d\"#scientific\"\u003ecomputerized scientific notation\u003c/a\u003e\u003c/i\u003e.\n\n     \u003cp\u003e The total number of significant digits in \u003ci\u003em\u003c/i\u003e is equal to the\n     precision.  If the precision is not specified, then the default value is\n     {@code 6}.  If the precision is {@code 0}, then it is taken to be\n     {@code 1}.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027G\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0047\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027g\u0027}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027f\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0066\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted using \u003ca name\u003d\"decimal\"\u003edecimal\n     format\u003c/a\u003e.  The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is\n     applied.\n\n     \u003cp\u003e The result is a string that represents the sign and magnitude\n     (absolute value) of the argument.  The formatting of the sign is\n     described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization\n     algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its\n     value.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e NaN or infinite, the literal strings \"NaN\" or\n     \"Infinity\", respectively, will be output.  These values are not\n     localized.\n\n     \u003cp\u003e The magnitude is formatted as the integer part of \u003ci\u003em\u003c/i\u003e, with no\n     leading zeroes, followed by the decimal separator followed by one or\n     more decimal digits representing the fractional part of \u003ci\u003em\u003c/i\u003e.\n\n     \u003cp\u003e The number of digits in the result for the fractional part of\n     \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision.  If the precision is not\n     specified then the default value is {@code 6}. If the precision is less\n     than the number of digits which would appear after the decimal point in\n     the string returned by {@link Float#toString(float)} or {@link\n     Double#toString(double)} respectively, then the value will be rounded\n     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     Float#toString(float)} or {@link Double#toString(double)} as\n     appropriate.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027a\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0061\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted in hexadecimal exponential\n     form.  No localization is applied.\n\n     \u003cp\u003e The result is a string that represents the sign and magnitude\n     (absolute value) of the argument \u003ci\u003ex\u003c/i\u003e.\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative or a negative-zero value then the result\n     will begin with {@code \u0027-\u0027} (\u003ctt\u003e\u0027\u0026#92;u002d\u0027\u003c/tt\u003e).\n\n     \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is positive or a positive-zero value and the\n     {@code \u0027+\u0027} flag is given then the result will begin with {@code \u0027+\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u002b\u0027\u003c/tt\u003e).\n\n     \u003cp\u003e The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value.\n\n     \u003cul\u003e\n\n     \u003cli\u003e If the value is NaN or infinite, the literal strings \"NaN\" or\n     \"Infinity\", respectively, will be output.\n\n     \u003cli\u003e If \u003ci\u003em\u003c/i\u003e is zero then it is represented by the string\n     {@code \"0x0.0p0\"}.\n\n     \u003cli\u003e If \u003ci\u003em\u003c/i\u003e is a {@code double} value with a normalized\n     representation then substrings are used to represent the significand and\n     exponent fields.  The significand is represented by the characters\n     {@code \"0x1.\"} followed by the hexadecimal representation of the rest\n     of the significand as a fraction.  The exponent is represented by\n     {@code \u0027p\u0027} (\u003ctt\u003e\u0027\u0026#92;u0070\u0027\u003c/tt\u003e) followed by a decimal string of the\n     unbiased exponent as if produced by invoking {@link\n     Integer#toString(int) Integer.toString} on the exponent value.  If the\n     precision is specified, the value is rounded to the given number of\n     hexadecimal digits.\n\n     \u003cli\u003e If \u003ci\u003em\u003c/i\u003e is a {@code double} value with a subnormal\n     representation then, unless the precision is specified to be in the range\n     1 through 12, inclusive, the significand is represented by the characters\n     {@code \u00270x0.\u0027} followed by the hexadecimal representation of the rest of\n     the significand as a fraction, and the exponent represented by\n     {@code \u0027p-1022\u0027}.  If the precision is in the interval\n     [1,\u0026nbsp;12], the subnormal value is normalized such that it\n     begins with the characters {@code \u00270x1.\u0027}, rounded to the number of\n     hexadecimal digits of precision, and the exponent adjusted\n     accordingly.  Note that there must be at least one nonzero digit in a\n     subnormal significand.\n\n     \u003c/ul\u003e\n\n     \u003cp\u003e If the {@code \u0027(\u0027} or {@code \u0027,\u0027} flags are given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027A\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0041\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027a\u0027}.  The entire string\n     representing the number will be converted to upper case including the\n     {@code \u0027x\u0027} (\u003ctt\u003e\u0027\u0026#92;u0078\u0027\u003c/tt\u003e) and {@code \u0027p\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0070\u0027\u003c/tt\u003e and all hexadecimal digits {@code \u0027a\u0027} -\n     {@code \u0027f\u0027} (\u003ctt\u003e\u0027\u0026#92;u0061\u0027\u003c/tt\u003e - \u003ctt\u003e\u0027\u0026#92;u0066\u0027\u003c/tt\u003e).\n\n \u003c/table\u003e\n\n \u003cp\u003e All \u003ca href\u003d\"#intFlags\"\u003eflags\u003c/a\u003e defined for Byte, Short, Integer, and\n Long apply.\n\n \u003cp\u003e If the {@code \u0027#\u0027} flag is given, then the decimal separator will\n always be present.\n\n \u003cp\u003e If no \u003ca name\u003d\"floatdFlags\"\u003eflags\u003c/a\u003e are given the default formatting\n is as follows:\n\n \u003cul\u003e\n\n \u003cli\u003e The output is right-justified within the {@code width}\n\n \u003cli\u003e Negative numbers begin with a {@code \u0027-\u0027}\n\n \u003cli\u003e Positive numbers and positive zero do not include a sign or extra\n leading space\n\n \u003cli\u003e No grouping separators are included\n\n \u003cli\u003e The decimal separator will only appear if a digit follows it\n\n \u003c/ul\u003e\n\n \u003cp\u003e The \u003ca name\u003d\"floatDWidth\"\u003ewidth\u003c/a\u003e is the minimum number of characters\n to be written to the output.  This includes any signs, digits, grouping\n separators, decimal separators, exponential symbol, radix indicator,\n parentheses, and strings representing infinity and NaN as applicable.  If\n the length of the converted value is less than the width then the output\n will be padded by spaces (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) until the total number of\n characters equals width.  The padding is on the left by default.  If the\n {@code \u0027-\u0027} flag is given then the padding will be on the right.  If width\n is not specified then there is no minimum.\n\n \u003cp\u003e If the \u003ca name\u003d\"floatDPrec\"\u003econversion\u003c/a\u003e is {@code \u0027e\u0027},\n {@code \u0027E\u0027} or {@code \u0027f\u0027}, then the precision is the number of digits\n after the decimal separator.  If the precision is not specified, then it is\n assumed to be {@code 6}.\n\n \u003cp\u003e If the conversion is {@code \u0027g\u0027} or {@code \u0027G\u0027}, then the precision is\n the total number of significant digits in the resulting magnitude after\n rounding.  If the precision is not specified, then the default value is\n {@code 6}.  If the precision is {@code 0}, then it is taken to be\n {@code 1}.\n\n \u003cp\u003e If the conversion is {@code \u0027a\u0027} or {@code \u0027A\u0027}, then the precision\n is the number of hexadecimal digits after the radix point.  If the\n precision is not provided, then all of the digits as returned by {@link\n Double#toHexString(double)} will be output.\n\n \u003cp\u003e\u003ca name\u003d\"dnbdec\"\u003e\u003cb\u003e BigDecimal \u003c/b\u003e\u003c/a\u003e\n\n \u003cp\u003e The following conversions may be applied {@link java.math.BigDecimal\n BigDecimal}.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"floatConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027e\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0065\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted using \u003ca\n     name\u003d\"bscientific\"\u003ecomputerized scientific notation\u003c/a\u003e.  The \u003ca\n     href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied.\n\n     \u003cp\u003e The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is positive-zero or negative-zero, then the exponent\n     will be {@code \"+00\"}.\n\n     \u003cp\u003e Otherwise, the result is a string that represents the sign and\n     magnitude (absolute value) of the argument.  The formatting of the sign\n     is described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization\n     algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its\n     value.\n\n     \u003cp\u003e Let \u003ci\u003en\u003c/i\u003e be the unique integer such that 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\n     \u0026lt;\u003d \u003ci\u003em\u003c/i\u003e \u0026lt; 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e+1\u003c/sup\u003e; then let \u003ci\u003ea\u003c/i\u003e be the\n     mathematically exact quotient of \u003ci\u003em\u003c/i\u003e and 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e so\n     that 1 \u0026lt;\u003d \u003ci\u003ea\u003c/i\u003e \u0026lt; 10. The magnitude is then represented as the\n     integer part of \u003ci\u003ea\u003c/i\u003e, as a single decimal digit, followed by the\n     decimal separator followed by decimal digits representing the fractional\n     part of \u003ci\u003ea\u003c/i\u003e, followed by the exponent symbol {@code \u0027e\u0027}\n     (\u003ctt\u003e\u0027\u0026#92;u0065\u0027\u003c/tt\u003e), followed by the sign of the exponent, followed\n     by a representation of \u003ci\u003en\u003c/i\u003e as a decimal integer, as produced by the\n     method {@link Long#toString(long, int)}, and zero-padded to include at\n     least two digits.\n\n     \u003cp\u003e The number of digits in the result for the fractional part of\n     \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision.  If the precision is not\n     specified then the default value is {@code 6}.  If the precision is\n     less than the number of digits to the right of the decimal point then\n     the value will be rounded using the\n     {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     BigDecimal#toString()}.\n\n     \u003cp\u003e If the {@code \u0027,\u0027} flag is given, then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027E\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0045\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027e\u0027}.  The exponent symbol\n     will be {@code \u0027E\u0027} (\u003ctt\u003e\u0027\u0026#92;u0045\u0027\u003c/tt\u003e).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027g\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0067\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted in general scientific notation\n     as described below. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization\n     algorithm\u003c/a\u003e is applied.\n\n     \u003cp\u003e After rounding for the precision, the formatting of the resulting\n     magnitude \u003ci\u003em\u003c/i\u003e depends on its value.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is greater than or equal to 10\u003csup\u003e-4\u003c/sup\u003e but less\n     than 10\u003csup\u003eprecision\u003c/sup\u003e then it is represented in \u003ci\u003e\u003ca\n     href\u003d\"#bdecimal\"\u003edecimal format\u003c/a\u003e\u003c/i\u003e.\n\n     \u003cp\u003e If \u003ci\u003em\u003c/i\u003e is less than 10\u003csup\u003e-4\u003c/sup\u003e or greater than or equal to\n     10\u003csup\u003eprecision\u003c/sup\u003e, then it is represented in \u003ci\u003e\u003ca\n     href\u003d\"#bscientific\"\u003ecomputerized scientific notation\u003c/a\u003e\u003c/i\u003e.\n\n     \u003cp\u003e The total number of significant digits in \u003ci\u003em\u003c/i\u003e is equal to the\n     precision.  If the precision is not specified, then the default value is\n     {@code 6}.  If the precision is {@code 0}, then it is taken to be\n     {@code 1}.\n\n     \u003cp\u003e If the {@code \u0027#\u0027} flag is given then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027G\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0047\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027g\u0027}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027f\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0066\u0027\u003c/tt\u003e\n     \u003ctd\u003e Requires the output to be formatted using \u003ca name\u003d\"bdecimal\"\u003edecimal\n     format\u003c/a\u003e.  The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is\n     applied.\n\n     \u003cp\u003e The result is a string that represents the sign and magnitude\n     (absolute value) of the argument.  The formatting of the sign is\n     described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization\n     algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its\n     value.\n\n     \u003cp\u003e The magnitude is formatted as the integer part of \u003ci\u003em\u003c/i\u003e, with no\n     leading zeroes, followed by the decimal separator followed by one or\n     more decimal digits representing the fractional part of \u003ci\u003em\u003c/i\u003e.\n\n     \u003cp\u003e The number of digits in the result for the fractional part of\n     \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision. If the precision is not\n     specified then the default value is {@code 6}.  If the precision is\n     less than the number of digits to the right of the decimal point\n     then the value will be rounded using the\n     {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     BigDecimal#toString()}.\n\n \u003c/table\u003e\n\n \u003cp\u003e All \u003ca href\u003d\"#intFlags\"\u003eflags\u003c/a\u003e defined for Byte, Short, Integer, and\n Long apply.\n\n \u003cp\u003e If the {@code \u0027#\u0027} flag is given, then the decimal separator will\n always be present.\n\n \u003cp\u003e The \u003ca href\u003d\"#floatdFlags\"\u003edefault behavior\u003c/a\u003e when no flags are\n given is the same as for Float and Double.\n\n \u003cp\u003e The specification of \u003ca href\u003d\"#floatDWidth\"\u003ewidth\u003c/a\u003e and \u003ca\n href\u003d\"#floatDPrec\"\u003eprecision\u003c/a\u003e is the same as defined for Float and\n Double.\n\n \u003ch4\u003e\u003ca name\u003d\"ddt\"\u003eDate/Time\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e This conversion may be applied to {@code long}, {@link Long}, {@link\n Calendar}, {@link Date} and {@link TemporalAccessor TemporalAccessor}\n\n \u003ctable cellpadding\u003d5 summary\u003d\"DTConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027t\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0074\u0027\u003c/tt\u003e\n     \u003ctd\u003e Prefix for date and time conversion characters.\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027T\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0054\u0027\u003c/tt\u003e\n     \u003ctd\u003e The upper-case variant of {@code \u0027t\u0027}.\n\n \u003c/table\u003e\n\n \u003cp\u003e The following date and time conversion character suffixes are defined\n for the {@code \u0027t\u0027} and {@code \u0027T\u0027} conversions.  The types are similar to\n but not completely identical to those defined by GNU {@code date} and\n POSIX {@code strftime(3c)}.  Additional conversion types are provided to\n access Java-specific functionality (e.g. {@code \u0027L\u0027} for milliseconds\n within the second).\n\n \u003cp\u003e The following conversion characters are used for formatting times:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"time\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e {@code \u0027H\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0048\u0027\u003c/tt\u003e\n     \u003ctd\u003e Hour of the day for the 24-hour clock, formatted as two digits with\n     a leading zero as necessary i.e. {@code 00 - 23}. {@code 00}\n     corresponds to midnight.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027I\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0049\u0027\u003c/tt\u003e\n     \u003ctd\u003e Hour for the 12-hour clock, formatted as two digits with a leading\n     zero as necessary, i.e.  {@code 01 - 12}.  {@code 01} corresponds to\n     one o\u0027clock (either morning or afternoon).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027k\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u006b\u0027\u003c/tt\u003e\n     \u003ctd\u003e Hour of the day for the 24-hour clock, i.e. {@code 0 - 23}.\n     {@code 0} corresponds to midnight.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027l\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u006c\u0027\u003c/tt\u003e\n     \u003ctd\u003e Hour for the 12-hour clock, i.e. {@code 1 - 12}.  {@code 1}\n     corresponds to one o\u0027clock (either morning or afternoon).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027M\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u004d\u0027\u003c/tt\u003e\n     \u003ctd\u003e Minute within the hour formatted as two digits with a leading zero\n     as necessary, i.e.  {@code 00 - 59}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027S\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0053\u0027\u003c/tt\u003e\n     \u003ctd\u003e Seconds within the minute, formatted as two digits with a leading\n     zero as necessary, i.e. {@code 00 - 60} (\"{@code 60}\" is a special\n     value required to support leap seconds).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027L\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u004c\u0027\u003c/tt\u003e\n     \u003ctd\u003e Millisecond within the second formatted as three digits with\n     leading zeros as necessary, i.e. {@code 000 - 999}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027N\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u004e\u0027\u003c/tt\u003e\n     \u003ctd\u003e Nanosecond within the second, formatted as nine digits with leading\n     zeros as necessary, i.e. {@code 000000000 - 999999999}.  The precision\n     of this value is limited by the resolution of the underlying operating\n     system or hardware.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027p\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0070\u0027\u003c/tt\u003e\n     \u003ctd\u003e Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker\n     in lower case, e.g.\"{@code am}\" or \"{@code pm}\".  Use of the\n     conversion prefix {@code \u0027T\u0027} forces this output to upper case.  (Note\n     that {@code \u0027p\u0027} produces lower-case output.  This is different from\n     GNU {@code date} and POSIX {@code strftime(3c)} which produce\n     upper-case output.)\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027z\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u007a\u0027\u003c/tt\u003e\n     \u003ctd\u003e \u003ca href\u003d\"http://www.ietf.org/rfc/rfc0822.txt\"\u003eRFC\u0026nbsp;822\u003c/a\u003e\n     style numeric time zone offset from GMT, e.g. {@code -0800}.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027Z\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u005a\u0027\u003c/tt\u003e\n     \u003ctd\u003e A string representing the abbreviation for the time zone.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.  The Formatter\u0027s locale will\n     supersede the locale of the argument (if any).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027s\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0073\u0027\u003c/tt\u003e\n     \u003ctd\u003e Seconds since the beginning of the epoch starting at 1 January 1970\n     {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE/1000} to\n     {@code Long.MAX_VALUE/1000}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027Q\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u004f\u0027\u003c/tt\u003e\n     \u003ctd\u003e Milliseconds since the beginning of the epoch starting at 1 January\n     1970 {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE} to\n     {@code Long.MAX_VALUE}. The precision of this value is limited by\n     the resolution of the underlying operating system or hardware.\n\n \u003c/table\u003e\n\n \u003cp\u003e The following conversion characters are used for formatting dates:\n\n \u003ctable cellpadding\u003d5 summary\u003d\"date\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027B\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0042\u0027\u003c/tt\u003e\n     \u003ctd\u003e Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths\n     full month name}, e.g. {@code \"January\"}, {@code \"February\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027b\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0062\u0027\u003c/tt\u003e\n     \u003ctd\u003e Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getShortMonths abbreviated month name},\n     e.g. {@code \"Jan\"}, {@code \"Feb\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027h\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0068\u0027\u003c/tt\u003e\n     \u003ctd\u003e Same as {@code \u0027b\u0027}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027A\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0041\u0027\u003c/tt\u003e\n     \u003ctd\u003e Locale-specific full name of the {@linkplain\n     java.text.DateFormatSymbols#getWeekdays day of the week},\n     e.g. {@code \"Sunday\"}, {@code \"Monday\"}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027a\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0061\u0027\u003c/tt\u003e\n     \u003ctd\u003e Locale-specific short name of the {@linkplain\n     java.text.DateFormatSymbols#getShortWeekdays day of the week},\n     e.g. {@code \"Sun\"}, {@code \"Mon\"}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027C\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0043\u0027\u003c/tt\u003e\n     \u003ctd\u003e Four-digit year divided by {@code 100}, formatted as two digits\n     with leading zero as necessary, i.e. {@code 00 - 99}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027Y\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0059\u0027\u003c/tt\u003e \u003ctd\u003e Year, formatted to at least\n     four digits with leading zeros as necessary, e.g. {@code 0092} equals\n     {@code 92} CE for the Gregorian calendar.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027y\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0079\u0027\u003c/tt\u003e\n     \u003ctd\u003e Last two digits of the year, formatted with leading zeros as\n     necessary, i.e. {@code 00 - 99}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027j\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u006a\u0027\u003c/tt\u003e\n     \u003ctd\u003e Day of year, formatted as three digits with leading zeros as\n     necessary, e.g. {@code 001 - 366} for the Gregorian calendar.\n     {@code 001} corresponds to the first day of the year.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027m\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u006d\u0027\u003c/tt\u003e\n     \u003ctd\u003e Month, formatted as two digits with leading zeros as necessary,\n     i.e. {@code 01 - 13}, where \"{@code 01}\" is the first month of the\n     year and (\"{@code 13}\" is a special value required to support lunar\n     calendars).\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027d\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0064\u0027\u003c/tt\u003e\n     \u003ctd\u003e Day of month, formatted as two digits with leading zeros as\n     necessary, i.e. {@code 01 - 31}, where \"{@code 01}\" is the first day\n     of the month.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027e\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0065\u0027\u003c/tt\u003e\n     \u003ctd\u003e Day of month, formatted as two digits, i.e. {@code 1 - 31} where\n     \"{@code 1}\" is the first day of the month.\n\n \u003c/table\u003e\n\n \u003cp\u003e The following conversion characters are used for formatting common\n date/time compositions.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"composites\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027R\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0052\u0027\u003c/tt\u003e\n     \u003ctd\u003e Time formatted for the 24-hour clock as {@code \"%tH:%tM\"}\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027T\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0054\u0027\u003c/tt\u003e\n     \u003ctd\u003e Time formatted for the 24-hour clock as {@code \"%tH:%tM:%tS\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027r\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0072\u0027\u003c/tt\u003e\n     \u003ctd\u003e Time formatted for the 12-hour clock as {@code \"%tI:%tM:%tS\n     %Tp\"}.  The location of the morning or afternoon marker\n     ({@code \u0027%Tp\u0027}) may be locale-dependent.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027D\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0044\u0027\u003c/tt\u003e\n     \u003ctd\u003e Date formatted as {@code \"%tm/%td/%ty\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027F\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0046\u0027\u003c/tt\u003e\n     \u003ctd\u003e \u003ca href\u003d\"http://www.w3.org/TR/NOTE-datetime\"\u003eISO\u0026nbsp;8601\u003c/a\u003e\n     complete date formatted as {@code \"%tY-%tm-%td\"}.\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027c\u0027}\n     \u003ctd valign\u003d\"top\"\u003e \u003ctt\u003e\u0027\u0026#92;u0063\u0027\u003c/tt\u003e\n     \u003ctd\u003e Date and time formatted as {@code \"%ta %tb %td %tT %tZ %tY\"},\n     e.g. {@code \"Sun Jul 20 16:17:00 EDT 1969\"}.\n\n \u003c/table\u003e\n\n \u003cp\u003e The {@code \u0027-\u0027} flag defined for \u003ca href\u003d\"#dFlags\"\u003eGeneral\n conversions\u003c/a\u003e applies.  If the {@code \u0027#\u0027} flag is given, then a {@link\n FormatFlagsConversionMismatchException} will be thrown.\n\n \u003cp\u003e The width is the minimum number of characters to\n be written to the output.  If the length of the converted value is less than\n the {@code width} then the output will be padded by spaces\n (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) until the total number of characters equals width.\n The padding is on the left by default.  If the {@code \u0027-\u0027} flag is given\n then the padding will be on the right.  If width is not specified then there\n is no minimum.\n\n \u003cp\u003e The precision is not applicable.  If the precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n \u003ch4\u003e\u003ca name\u003d\"dper\"\u003ePercent\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e The conversion does not correspond to any argument.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"DTConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027%\u0027}\n     \u003ctd\u003e The result is a literal {@code \u0027%\u0027} (\u003ctt\u003e\u0027\u0026#92;u0025\u0027\u003c/tt\u003e)\n\n \u003cp\u003e The width is the minimum number of characters to\n be written to the output including the {@code \u0027%\u0027}.  If the length of the\n converted value is less than the {@code width} then the output will be\n padded by spaces (\u003ctt\u003e\u0027\u0026#92;u0020\u0027\u003c/tt\u003e) until the total number of\n characters equals width.  The padding is on the left.  If width is not\n specified then just the {@code \u0027%\u0027} is output.\n\n \u003cp\u003e The {@code \u0027-\u0027} flag defined for \u003ca href\u003d\"#dFlags\"\u003eGeneral\n conversions\u003c/a\u003e applies.  If any other flags are provided, then a\n {@link FormatFlagsConversionMismatchException} will be thrown.\n\n \u003cp\u003e The precision is not applicable.  If the precision is specified an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n \u003c/table\u003e\n\n \u003ch4\u003e\u003ca name\u003d\"dls\"\u003eLine Separator\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e The conversion does not correspond to any argument.\n\n \u003ctable cellpadding\u003d5 summary\u003d\"DTConv\"\u003e\n\n \u003ctr\u003e\u003ctd valign\u003d\"top\"\u003e{@code \u0027n\u0027}\n     \u003ctd\u003e the platform-specific line separator as returned by {@link\n     System#getProperty System.getProperty(\"line.separator\")}.\n\n \u003c/table\u003e\n\n \u003cp\u003e Flags, width, and precision are not applicable.  If any are provided an\n {@link IllegalFormatFlagsException}, {@link IllegalFormatWidthException},\n and {@link IllegalFormatPrecisionException}, respectively will be thrown.\n\n \u003ch4\u003e\u003ca name\u003d\"dpos\"\u003eArgument Index\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e Format specifiers can reference arguments in three ways:\n\n \u003cul\u003e\n\n \u003cli\u003e \u003ci\u003eExplicit indexing\u003c/i\u003e is used when the format specifier contains an\n argument index.  The argument index is a decimal integer indicating the\n position of the argument in the argument list.  The first argument is\n referenced by \"{@code 1$}\", the second by \"{@code 2$}\", etc.  An argument\n may be referenced more than once.\n\n \u003cp\u003e For example:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   formatter.format(\"%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s\",\n                    \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \"d c b a d c b a\"\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cli\u003e \u003ci\u003eRelative indexing\u003c/i\u003e is used when the format specifier contains a\n {@code \u0027\u003c\u0027} (\u003ctt\u003e\u0027\u0026#92;u003c\u0027\u003c/tt\u003e) flag which causes the argument for\n the previous format specifier to be re-used.  If there is no previous\n argument, then a {@link MissingFormatArgumentException} is thrown.\n\n \u003cblockquote\u003e\u003cpre\u003e\n    formatter.format(\"%s %s %\u0026lt;s %\u0026lt;s\", \"a\", \"b\", \"c\", \"d\")\n    // -\u0026gt; \"a b b b\"\n    // \"c\" and \"d\" are ignored because they are not referenced\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cli\u003e \u003ci\u003eOrdinary indexing\u003c/i\u003e is used when the format specifier contains\n neither an argument index nor a {@code \u0027\u003c\u0027} flag.  Each format specifier\n which uses ordinary indexing is assigned a sequential implicit index into\n argument list which is independent of the indices used by explicit or\n relative indexing.\n\n \u003cblockquote\u003e\u003cpre\u003e\n   formatter.format(\"%s %s %s %s\", \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \"a b c d\"\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003e It is possible to have a format string which uses all forms of indexing,\n for example:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   formatter.format(\"%2$s %s %\u0026lt;s %s\", \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \"b a a b\"\n   // \"c\" and \"d\" are ignored because they are not referenced\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The maximum number of arguments is limited by the maximum dimension of a\n Java array as defined by\n \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n If the argument index is does not correspond to an\n available argument, then a {@link MissingFormatArgumentException} is thrown.\n\n \u003cp\u003e If there are more arguments than format specifiers, the extra arguments\n are ignored.\n\n \u003cp\u003e Unless otherwise specified, passing a {@code null} argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Formatter","qualifiedName":"java.util.Formatter","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.io.Closeable","java.io.Flushable"],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":["java.util.Formatter.BigDecimalLayoutForm"],"isInnerClass":false,"constructors":[{"name":"Formatter","comment":"Constructs a new formatter.\n\n \u003cp\u003e The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose\n current content may be converted into a string by invoking {@link\n #toString toString()}.  The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified destination.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.Appendable)","flatSignature":"(Appendable)","parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"Appendable","qualifiedName":"java.lang.Appendable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified locale.\n\n \u003cp\u003e The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose current\n content may be converted into a string by invoking {@link #toString\n toString()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified destination and locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.Appendable, java.util.Locale)","flatSignature":"(Appendable, Locale)","parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"Appendable","qualifiedName":"java.lang.Appendable","dimension":"","elementType":{}}},{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified file name.\n\n \u003cp\u003e The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"fileName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified file name and charset.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","parameters":[{"name":"fileName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified file name, charset, and\n locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.util.Locale)","flatSignature":"(String, String, Locale)","parameters":[{"name":"fileName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified file.\n\n \u003cp\u003e The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified file and charset.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File, java.lang.String)","flatSignature":"(File, String)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified file, charset, and\n locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.File, java.lang.String, java.util.Locale)","flatSignature":"(File, String, Locale)","parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified print stream.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.\n\n \u003cp\u003e Characters are written to the given {@link java.io.PrintStream\n PrintStream} object and are therefore encoded using that object\u0027s\n charset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.PrintStream)","flatSignature":"(PrintStream)","parameters":[{"name":"ps","type":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified output stream.\n\n \u003cp\u003e The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified output stream and\n charset.\n\n \u003cp\u003e The locale used is the {@linkplain\n Locale#getDefault(Locale.Category) default locale} for\n {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream, java.lang.String)","flatSignature":"(OutputStream, String)","parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Formatter","comment":"Constructs a new formatter with the specified output stream, charset,\n and locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.OutputStream, java.lang.String, java.util.Locale)","flatSignature":"(OutputStream, String, Locale)","parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}},{"name":"csn","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"locale","comment":"Returns the locale set by the construction of this formatter.\n\n \u003cp\u003e The {@link #format(java.util.Locale,String,Object...) format} method\n for this object which has a locale argument does not change this value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"out","comment":"Returns the destination for the output.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Appendable","qualifiedName":"java.lang.Appendable","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns the result of invoking {@code toString()} on the destination\n for the output.  For example, the following code formats text into a\n {@link StringBuilder} then retrieves the resultant string:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   Formatter f \u003d new Formatter();\n   f.format(\"Last reboot at %tc\", lastRebootDate);\n   String s \u003d f.toString();\n   // -\u0026gt; s \u003d\u003d \"Last reboot at Sat Jan 01 00:00:00 PST 2000\"\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e An invocation of this method behaves in exactly the same way as the\n invocation\n\n \u003cpre\u003e\n     out().toString() \u003c/pre\u003e\n\n \u003cp\u003e Depending on the specification of {@code toString} for the {@link\n Appendable}, the returned string may or may not contain the characters\n written to the destination.  For instance, buffers typically return\n their contents in {@code toString()}, but streams cannot since the\n data is discarded.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flush","comment":"Flushes this formatter.  If the destination implements the {@link\n java.io.Flushable} interface, its {@code flush} method will be invoked.\n\n \u003cp\u003e Flushing a formatter writes any buffered output in the destination\n to the underlying stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"close","comment":"Closes this formatter.  If the destination implements the {@link\n java.io.Closeable} interface, its {@code close} method will be invoked.\n\n \u003cp\u003e Closing a formatter allows it to release resources it may be holding\n (such as open files).  If the formatter is already closed, then invoking\n this method has no effect.\n\n \u003cp\u003e Attempting to invoke any methods except {@link #ioException()} in\n this formatter after it has been closed will result in a {@link\n FormatterClosedException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"ioException","comment":"Returns the {@code IOException} last thrown by this formatter\u0027s {@link\n Appendable}.\n\n \u003cp\u003e If the destination\u0027s {@code append()} method never throws\n {@code IOException}, then this method will always return {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IOException","qualifiedName":"java.io.IOException","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"format","comment":"Writes a formatted string to this object\u0027s destination using the\n specified format string and arguments.  The locale used is the one\n defined during the construction of this formatter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"Formatter","qualifiedName":"java.util.Formatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"format","comment":"Writes a formatted string to this object\u0027s destination using the\n specified locale, format string, and arguments.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale, java.lang.String, java.lang.Object...)","flatSignature":"(Locale, String, Object...)","returnType":{"isPrimitive":false,"simpleName":"Formatter","qualifiedName":"java.util.Formatter","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}