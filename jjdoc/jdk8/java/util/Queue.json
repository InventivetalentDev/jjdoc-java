{"name":"Queue","comment":"A collection designed for holding elements prior to processing.\n Besides basic {@link java.util.Collection Collection} operations,\n queues provide additional insertion, extraction, and inspection\n operations.  Each of these methods exists in two forms: one throws\n an exception if the operation fails, the other returns a special\n value (either {@code null} or {@code false}, depending on the\n operation).  The latter form of the insert operation is designed\n specifically for use with capacity-restricted {@code Queue}\n implementations; in most implementations, insert operations cannot\n fail.\n\n \u003ctable BORDER CELLPADDING\u003d3 CELLSPACING\u003d1\u003e\n \u003ccaption\u003eSummary of Queue methods\u003c/caption\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eThrows exception\u003c/em\u003e\u003c/td\u003e\n    \u003ctd ALIGN\u003dCENTER\u003e\u003cem\u003eReturns special value\u003c/em\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eInsert\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link Queue#add add(e)}\u003c/td\u003e\n    \u003ctd\u003e{@link Queue#offer offer(e)}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eRemove\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link Queue#remove remove()}\u003c/td\u003e\n    \u003ctd\u003e{@link Queue#poll poll()}\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003cb\u003eExamine\u003c/b\u003e\u003c/td\u003e\n    \u003ctd\u003e{@link Queue#element element()}\u003c/td\u003e\n    \u003ctd\u003e{@link Queue#peek peek()}\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\n \u003cp\u003eQueues typically, but do not necessarily, order elements in a\n FIFO (first-in-first-out) manner.  Among the exceptions are\n priority queues, which order elements according to a supplied\n comparator, or the elements\u0027 natural ordering, and LIFO queues (or\n stacks) which order the elements LIFO (last-in-first-out).\n Whatever the ordering used, the \u003cem\u003ehead\u003c/em\u003e of the queue is that\n element which would be removed by a call to {@link #remove() } or\n {@link #poll()}.  In a FIFO queue, all new elements are inserted at\n the \u003cem\u003etail\u003c/em\u003e of the queue. Other kinds of queues may use\n different placement rules.  Every {@code Queue} implementation\n must specify its ordering properties.\n\n \u003cp\u003eThe {@link #offer offer} method inserts an element if possible,\n otherwise returning {@code false}.  This differs from the {@link\n java.util.Collection#add Collection.add} method, which can fail to\n add an element only by throwing an unchecked exception.  The\n {@code offer} method is designed for use when failure is a normal,\n rather than exceptional occurrence, for example, in fixed-capacity\n (or \u0026quot;bounded\u0026quot;) queues.\n\n \u003cp\u003eThe {@link #remove()} and {@link #poll()} methods remove and\n return the head of the queue.\n Exactly which element is removed from the queue is a\n function of the queue\u0027s ordering policy, which differs from\n implementation to implementation. The {@code remove()} and\n {@code poll()} methods differ only in their behavior when the\n queue is empty: the {@code remove()} method throws an exception,\n while the {@code poll()} method returns {@code null}.\n\n \u003cp\u003eThe {@link #element()} and {@link #peek()} methods return, but do\n not remove, the head of the queue.\n\n \u003cp\u003eThe {@code Queue} interface does not define the \u003ci\u003eblocking queue\n methods\u003c/i\u003e, which are common in concurrent programming.  These methods,\n which wait for elements to appear or for space to become available, are\n defined in the {@link java.util.concurrent.BlockingQueue} interface, which\n extends this interface.\n\n \u003cp\u003e{@code Queue} implementations generally do not allow insertion\n of {@code null} elements, although some implementations, such as\n {@link LinkedList}, do not prohibit insertion of {@code null}.\n Even in the implementations that permit it, {@code null} should\n not be inserted into a {@code Queue}, as {@code null} is also\n used as a special return value by the {@code poll} method to\n indicate that the queue contains no elements.\n\n \u003cp\u003e{@code Queue} implementations generally do not define\n element-based versions of methods {@code equals} and\n {@code hashCode} but instead inherit the identity based versions\n from class {@code Object}, because element-based equality is not\n always well-defined for queues with the same elements but different\n ordering properties.\n\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Queue","qualifiedName":"java.util.Queue","dimension":"","elementType":{},"package":"java.util","interfaces":["java.util.Collection"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"add","comment":"Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n {@code true} upon success and throwing an {@code IllegalStateException}\n if no space is currently available.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"offer","comment":"Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions.\n When using a capacity-restricted queue, this method is generally\n preferable to {@link #add}, which can fail to insert an element only\n by throwing an exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Retrieves and removes the head of this queue.  This method differs\n from {@link #poll poll} only in that it throws an exception if this\n queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"poll","comment":"Retrieves and removes the head of this queue,\n or returns {@code null} if this queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"element","comment":"Retrieves, but does not remove, the head of this queue.  This method\n differs from {@link #peek peek} only in that it throws an exception\n if this queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"peek","comment":"Retrieves, but does not remove, the head of this queue,\n or returns {@code null} if this queue is empty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.Deque","java.util.AbstractQueue","java.util.concurrent.BlockingQueue","java.util.concurrent.ConcurrentLinkedQueue"],"enumConstants":[]}