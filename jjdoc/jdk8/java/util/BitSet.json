{"name":"BitSet","comment":"This class implements a vector of bits that grows as needed. Each\n component of the bit set has a {@code boolean} value. The\n bits of a {@code BitSet} are indexed by nonnegative integers.\n Individual indexed bits can be examined, set, or cleared. One\n {@code BitSet} may be used to modify the contents of another\n {@code BitSet} through logical AND, logical inclusive OR, and\n logical exclusive OR operations.\n\n \u003cp\u003eBy default, all bits in the set initially have the value\n {@code false}.\n\n \u003cp\u003eEvery bit set has a current size, which is the number of bits\n of space currently in use by the bit set. Note that the size is\n related to the implementation of a bit set, so it may change with\n implementation. The length of a bit set relates to logical length\n of a bit set and is defined independently of implementation.\n\n \u003cp\u003eUnless otherwise noted, passing a null parameter to any of the\n methods in a {@code BitSet} will result in a\n {@code NullPointerException}.\n\n \u003cp\u003eA {@code BitSet} is not safe for multithreaded use without\n external synchronization.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"BitSet","comment":"Creates a new bit set. All bits are initially {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"BitSet","comment":"Creates a bit set whose initial size is large enough to explicitly\n represent bits with indices in the range {@code 0} through\n {@code nbits-1}. All bits are initially {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"nbits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"valueOf","comment":"Returns a new bit set containing all the bits in the given long array.\n\n \u003cp\u003eMore precisely,\n \u003cbr\u003e{@code BitSet.valueOf(longs).get(n) \u003d\u003d ((longs[n/64] \u0026 (1L\u003c\u003c(n%64))) !\u003d 0)}\n \u003cbr\u003efor all {@code n \u003c 64 * longs.length}.\n\n \u003cp\u003eThis method is equivalent to\n {@code BitSet.valueOf(LongBuffer.wrap(longs))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[])","flatSignature":"(long[])","returnType":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"longs","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a new bit set containing all the bits in the given long\n buffer between its position and limit.\n\n \u003cp\u003eMore precisely,\n \u003cbr\u003e{@code BitSet.valueOf(lb).get(n) \u003d\u003d ((lb.get(lb.position()+n/64) \u0026 (1L\u003c\u003c(n%64))) !\u003d 0)}\n \u003cbr\u003efor all {@code n \u003c 64 * lb.remaining()}.\n\n \u003cp\u003eThe long buffer is not modified by this method, and no\n reference to the buffer is retained by the bit set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.LongBuffer)","flatSignature":"(LongBuffer)","returnType":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"lb","type":{"isPrimitive":false,"simpleName":"LongBuffer","qualifiedName":"java.nio.LongBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a new bit set containing all the bits in the given byte array.\n\n \u003cp\u003eMore precisely,\n \u003cbr\u003e{@code BitSet.valueOf(bytes).get(n) \u003d\u003d ((bytes[n/8] \u0026 (1\u003c\u003c(n%8))) !\u003d 0)}\n \u003cbr\u003efor all {@code n \u003c  8 * bytes.length}.\n\n \u003cp\u003eThis method is equivalent to\n {@code BitSet.valueOf(ByteBuffer.wrap(bytes))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a new bit set containing all the bits in the given byte\n buffer between its position and limit.\n\n \u003cp\u003eMore precisely,\n \u003cbr\u003e{@code BitSet.valueOf(bb).get(n) \u003d\u003d ((bb.get(bb.position()+n/8) \u0026 (1\u003c\u003c(n%8))) !\u003d 0)}\n \u003cbr\u003efor all {@code n \u003c 8 * bb.remaining()}.\n\n \u003cp\u003eThe byte buffer is not modified by this method, and no\n reference to the buffer is retained by the bit set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"bb","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toByteArray","comment":"Returns a new byte array containing all the bits in this bit set.\n\n \u003cp\u003eMore precisely, if\n \u003cbr\u003e{@code byte[] bytes \u003d s.toByteArray();}\n \u003cbr\u003ethen {@code bytes.length \u003d\u003d (s.length()+7)/8} and\n \u003cbr\u003e{@code s.get(n) \u003d\u003d ((bytes[n/8] \u0026 (1\u003c\u003c(n%8))) !\u003d 0)}\n \u003cbr\u003efor all {@code n \u003c 8 * bytes.length}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toLongArray","comment":"Returns a new long array containing all the bits in this bit set.\n\n \u003cp\u003eMore precisely, if\n \u003cbr\u003e{@code long[] longs \u003d s.toLongArray();}\n \u003cbr\u003ethen {@code longs.length \u003d\u003d (s.length()+63)/64} and\n \u003cbr\u003e{@code s.get(n) \u003d\u003d ((longs[n/64] \u0026 (1L\u003c\u003c(n%64))) !\u003d 0)}\n \u003cbr\u003efor all {@code n \u003c 64 * longs.length}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flip","comment":"Sets the bit at the specified index to the complement of its\n current value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bitIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flip","comment":"Sets each bit from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to the complement of its current\n value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the bit at the specified index to {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bitIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the bit at the specified index to the specified value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, boolean)","flatSignature":"(int, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bitIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the bits from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the bits from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to the specified value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, boolean)","flatSignature":"(int, int, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Sets the bit specified by the index to {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bitIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Sets the bits from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Sets all of the bits in this BitSet to {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Returns the value of the bit with the specified index. The value\n is {@code true} if the bit with the index {@code bitIndex}\n is currently set in this {@code BitSet}; otherwise, the result\n is {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bitIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns a new {@code BitSet} composed of bits from this {@code BitSet}\n from {@code fromIndex} (inclusive) to {@code toIndex} (exclusive).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextSetBit","comment":"Returns the index of the first bit that is set to {@code true}\n that occurs on or after the specified starting index. If no such\n bit exists then {@code -1} is returned.\n\n \u003cp\u003eTo iterate over the {@code true} bits in a {@code BitSet},\n use the following loop:\n\n  \u003cpre\u003e {@code\n for (int i \u003d bs.nextSetBit(0); i \u003e\u003d 0; i \u003d bs.nextSetBit(i+1)) {\n     // operate on index i here\n     if (i \u003d\u003d Integer.MAX_VALUE) {\n         break; // or (i+1) would overflow\n     }\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextClearBit","comment":"Returns the index of the first bit that is set to {@code false}\n that occurs on or after the specified starting index.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"previousSetBit","comment":"Returns the index of the nearest bit that is set to {@code true}\n that occurs on or before the specified starting index.\n If no such bit exists, or if {@code -1} is given as the\n starting index, then {@code -1} is returned.\n\n \u003cp\u003eTo iterate over the {@code true} bits in a {@code BitSet},\n use the following loop:\n\n  \u003cpre\u003e {@code\n for (int i \u003d bs.length(); (i \u003d bs.previousSetBit(i-1)) \u003e\u003d 0; ) {\n     // operate on index i here\n }}\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"previousClearBit","comment":"Returns the index of the nearest bit that is set to {@code false}\n that occurs on or before the specified starting index.\n If no such bit exists, or if {@code -1} is given as the\n starting index, then {@code -1} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"length","comment":"Returns the \"logical size\" of this {@code BitSet}: the index of\n the highest set bit in the {@code BitSet} plus one. Returns zero\n if the {@code BitSet} contains no set bits.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns true if this {@code BitSet} contains no bits that are set\n to {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intersects","comment":"Returns true if the specified {@code BitSet} has any bits set to\n {@code true} that are also set to {@code true} in this {@code BitSet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.BitSet)","flatSignature":"(BitSet)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"set","type":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"cardinality","comment":"Returns the number of bits set to {@code true} in this {@code BitSet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"and","comment":"Performs a logical \u003cb\u003eAND\u003c/b\u003e of this target bit set with the\n argument bit set. This bit set is modified so that each bit in it\n has the value {@code true} if and only if it both initially\n had the value {@code true} and the corresponding bit in the\n bit set argument also had the value {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.BitSet)","flatSignature":"(BitSet)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"set","type":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"or","comment":"Performs a logical \u003cb\u003eOR\u003c/b\u003e of this bit set with the bit set\n argument. This bit set is modified so that a bit in it has the\n value {@code true} if and only if it either already had the\n value {@code true} or the corresponding bit in the bit set\n argument has the value {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.BitSet)","flatSignature":"(BitSet)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"set","type":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"xor","comment":"Performs a logical \u003cb\u003eXOR\u003c/b\u003e of this bit set with the bit set\n argument. This bit set is modified so that a bit in it has the\n value {@code true} if and only if one of the following\n statements holds:\n \u003cul\u003e\n \u003cli\u003eThe bit initially has the value {@code true}, and the\n     corresponding bit in the argument has the value {@code false}.\n \u003cli\u003eThe bit initially has the value {@code false}, and the\n     corresponding bit in the argument has the value {@code true}.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.BitSet)","flatSignature":"(BitSet)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"set","type":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"andNot","comment":"Clears all of the bits in this {@code BitSet} whose corresponding\n bit is set in the specified {@code BitSet}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.BitSet)","flatSignature":"(BitSet)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"set","type":{"isPrimitive":false,"simpleName":"BitSet","qualifiedName":"java.util.BitSet","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this bit set. The hash code depends\n only on which bits are set within this {@code BitSet}.\n\n \u003cp\u003eThe hash code is defined to be the result of the following\n calculation:\n  \u003cpre\u003e {@code\n public int hashCode() {\n     long h \u003d 1234;\n     long[] words \u003d toLongArray();\n     for (int i \u003d words.length; --i \u003e\u003d 0; )\n         h ^\u003d words[i] * (i + 1);\n     return (int)((h \u003e\u003e 32) ^ h);\n }}\u003c/pre\u003e\n Note that the hash code changes if the set of bits is altered.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"size","comment":"Returns the number of bits of space actually in use by this\n {@code BitSet} to represent bit values.\n The maximum element in the set is the size - 1st element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this object against the specified object.\n The result is {@code true} if and only if the argument is\n not {@code null} and is a {@code Bitset} object that has\n exactly the same set of bits set to {@code true} as this bit\n set. That is, for every nonnegative {@code int} index {@code k},\n \u003cpre\u003e((BitSet)obj).get(k) \u003d\u003d this.get(k)\u003c/pre\u003e\n must be true. The current sizes of the two bit sets are not compared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Cloning this {@code BitSet} produces a new {@code BitSet}\n that is equal to it.\n The clone of the bit set is another bit set that has exactly the\n same bits set to {@code true} as this bit set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this bit set. For every index\n for which this {@code BitSet} contains a bit in the set\n state, the decimal representation of that index is included in\n the result. Such indices are listed in order from lowest to\n highest, separated by \",\u0026nbsp;\" (a comma and a space) and\n surrounded by braces, resulting in the usual mathematical\n notation for a set of integers.\n\n \u003cp\u003eExample:\n \u003cpre\u003e\n BitSet drPepper \u003d new BitSet();\u003c/pre\u003e\n Now {@code drPepper.toString()} returns \"{@code {}}\".\n \u003cpre\u003e\n drPepper.set(2);\u003c/pre\u003e\n Now {@code drPepper.toString()} returns \"{@code {2}}\".\n \u003cpre\u003e\n drPepper.set(4);\n drPepper.set(10);\u003c/pre\u003e\n Now {@code drPepper.toString()} returns \"{@code {2, 4, 10}}\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"stream","comment":"Returns a stream of indices for which this {@code BitSet}\n contains a bit in the set state. The indices are returned\n in order, from lowest to highest. The size of the stream\n is the number of bits in the set state, equal to the value\n returned by the {@link #cardinality()} method.\n\n \u003cp\u003eThe bit set must remain constant during the execution of the\n terminal stream operation.  Otherwise, the result of the terminal\n stream operation is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}