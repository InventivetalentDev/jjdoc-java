{"name":"LinkedHashSet","comment":"\u003cp\u003eHash table and linked list implementation of the \u003ctt\u003eSet\u003c/tt\u003e interface,\n with predictable iteration order.  This implementation differs from\n \u003ctt\u003eHashSet\u003c/tt\u003e in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is the order in which elements were inserted into the set\n (\u003ci\u003einsertion-order\u003c/i\u003e).  Note that insertion order is \u003ci\u003enot\u003c/i\u003e affected\n if an element is \u003ci\u003ere-inserted\u003c/i\u003e into the set.  (An element \u003ctt\u003ee\u003c/tt\u003e\n is reinserted into a set \u003ctt\u003es\u003c/tt\u003e if \u003ctt\u003es.add(e)\u003c/tt\u003e is invoked when\n \u003ctt\u003es.contains(e)\u003c/tt\u003e would return \u003ctt\u003etrue\u003c/tt\u003e immediately prior to\n the invocation.)\n\n \u003cp\u003eThis implementation spares its clients from the unspecified, generally\n chaotic ordering provided by {@link HashSet}, without incurring the\n increased cost associated with {@link TreeSet}.  It can be used to\n produce a copy of a set that has the same order as the original, regardless\n of the original set\u0027s implementation:\n \u003cpre\u003e\n     void foo(Set s) {\n         Set copy \u003d new LinkedHashSet(s);\n         ...\n     }\n \u003c/pre\u003e\n This technique is particularly useful if a module takes a set on input,\n copies it, and later returns results whose order is determined by that of\n the copy.  (Clients generally appreciate having things returned in the same\n order they were presented.)\n\n \u003cp\u003eThis class provides all of the optional \u003ctt\u003eSet\u003c/tt\u003e operations, and\n permits null elements.  Like \u003ctt\u003eHashSet\u003c/tt\u003e, it provides constant-time\n performance for the basic operations (\u003ctt\u003eadd\u003c/tt\u003e, \u003ctt\u003econtains\u003c/tt\u003e and\n \u003ctt\u003eremove\u003c/tt\u003e), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of \u003ctt\u003eHashSet\u003c/tt\u003e, due to the added expense of maintaining the\n linked list, with one exception: Iteration over a \u003ctt\u003eLinkedHashSet\u003c/tt\u003e\n requires time proportional to the \u003ci\u003esize\u003c/i\u003e of the set, regardless of\n its capacity.  Iteration over a \u003ctt\u003eHashSet\u003c/tt\u003e is likely to be more\n expensive, requiring time proportional to its \u003ci\u003ecapacity\u003c/i\u003e.\n\n \u003cp\u003eA linked hash set has two parameters that affect its performance:\n \u003ci\u003einitial capacity\u003c/i\u003e and \u003ci\u003eload factor\u003c/i\u003e.  They are defined precisely\n as for \u003ctt\u003eHashSet\u003c/tt\u003e.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for \u003ctt\u003eHashSet\u003c/tt\u003e, as iteration times for this class are unaffected\n by capacity.\n\n \u003cp\u003e\u003cstrong\u003eNote that this implementation is not synchronized.\u003c/strong\u003e\n If multiple threads access a linked hash set concurrently, and at least\n one of the threads modifies the set, it \u003cem\u003emust\u003c/em\u003e be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the set.\n\n If no such object exists, the set should be \"wrapped\" using the\n {@link Collections#synchronizedSet Collections.synchronizedSet}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set: \u003cpre\u003e\n   Set s \u003d Collections.synchronizedSet(new LinkedHashSet(...));\u003c/pre\u003e\n\n \u003cp\u003eThe iterators returned by this class\u0027s \u003ctt\u003eiterator\u003c/tt\u003e method are\n \u003cem\u003efail-fast\u003c/em\u003e: if the set is modified at any time after the iterator\n is created, in any way except through the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e\n method, the iterator will throw a {@link ConcurrentModificationException}.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future.\n\n \u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw \u003ctt\u003eConcurrentModificationException\u003c/tt\u003e on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   \u003ci\u003ethe fail-fast behavior of iterators\n should be used only to detect bugs.\u003c/i\u003e\n\n \u003cp\u003eThis class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"LinkedHashSet","qualifiedName":"java.util.LinkedHashSet","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.HashSet","interfaces":["java.util.Set","java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"LinkedHashSet","comment":"Constructs a new, empty linked hash set with the specified initial\n capacity and load factor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float)","flatSignature":"(int, float)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"LinkedHashSet","comment":"Constructs a new, empty linked hash set with the specified initial\n capacity and the default load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"LinkedHashSet","comment":"Constructs a new, empty linked hash set with the default initial\n capacity (16) and load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"LinkedHashSet","comment":"Constructs a new linked hash set with the same elements as the\n specified collection.  The linked hash set is created with an initial\n capacity sufficient to hold the elements in the specified collection\n and the default load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"spliterator","comment":"Creates a \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e\n and \u003cem\u003efail-fast\u003c/em\u003e {@code Spliterator} over the elements in this set.\n\n \u003cp\u003eThe {@code Spliterator} reports {@link Spliterator#SIZED},\n {@link Spliterator#DISTINCT}, and {@code ORDERED}.  Implementations\n should document the reporting of additional characteristic values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"enumConstants":[]}