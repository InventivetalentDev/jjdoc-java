{"name":"Collection","comment":"The root interface in the \u003ci\u003ecollection hierarchy\u003c/i\u003e.  A collection\n represents a group of objects, known as its \u003ci\u003eelements\u003c/i\u003e.  Some\n collections allow duplicate elements and others do not.  Some are ordered\n and others unordered.  The JDK does not provide any \u003ci\u003edirect\u003c/i\u003e\n implementations of this interface: it provides implementations of more\n specific subinterfaces like \u003ctt\u003eSet\u003c/tt\u003e and \u003ctt\u003eList\u003c/tt\u003e.  This interface\n is typically used to pass collections around and manipulate them where\n maximum generality is desired.\n\n \u003cp\u003e\u003ci\u003eBags\u003c/i\u003e or \u003ci\u003emultisets\u003c/i\u003e (unordered collections that may contain\n duplicate elements) should implement this interface directly.\n\n \u003cp\u003eAll general-purpose \u003ctt\u003eCollection\u003c/tt\u003e implementation classes (which\n typically implement \u003ctt\u003eCollection\u003c/tt\u003e indirectly through one of its\n subinterfaces) should provide two \"standard\" constructors: a void (no\n arguments) constructor, which creates an empty collection, and a\n constructor with a single argument of type \u003ctt\u003eCollection\u003c/tt\u003e, which\n creates a new collection with the same elements as its argument.  In\n effect, the latter constructor allows the user to copy any collection,\n producing an equivalent collection of the desired implementation type.\n There is no way to enforce this convention (as interfaces cannot contain\n constructors) but all of the general-purpose \u003ctt\u003eCollection\u003c/tt\u003e\n implementations in the Java platform libraries comply.\n\n \u003cp\u003eThe \"destructive\" methods contained in this interface, that is, the\n methods that modify the collection on which they operate, are specified to\n throw \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if this collection does not\n support the operation.  If this is the case, these methods may, but are not\n required to, throw an \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the\n invocation would have no effect on the collection.  For example, invoking\n the {@link #addAll(Collection)} method on an unmodifiable collection may,\n but is not required to, throw the exception if the collection to be added\n is empty.\n\n \u003cp\u003e\u003ca name\u003d\"optional-restrictions\"\u003e\n Some collection implementations have restrictions on the elements that\n they may contain.\u003c/a\u003e  For example, some implementations prohibit null elements,\n and some have restrictions on the types of their elements.  Attempting to\n add an ineligible element throws an unchecked exception, typically\n \u003ctt\u003eNullPointerException\u003c/tt\u003e or \u003ctt\u003eClassCastException\u003c/tt\u003e.  Attempting\n to query the presence of an ineligible element may throw an exception,\n or it may simply return false; some implementations will exhibit the former\n behavior and some will exhibit the latter.  More generally, attempting an\n operation on an ineligible element whose completion would not result in\n the insertion of an ineligible element into the collection may throw an\n exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n \u003cp\u003eIt is up to each collection to determine its own synchronization\n policy.  In the absence of a stronger guarantee by the\n implementation, undefined behavior may result from the invocation\n of any method on a collection that is being mutated by another\n thread; this includes direct invocations, passing the collection to\n a method that might perform invocations, and using an existing\n iterator to examine the collection.\n\n \u003cp\u003eMany methods in Collections Framework interfaces are defined in\n terms of the {@link Object#equals(Object) equals} method.  For example,\n the specification for the {@link #contains(Object) contains(Object o)}\n method says: \"returns \u003ctt\u003etrue\u003c/tt\u003e if and only if this collection\n contains at least one element \u003ctt\u003ee\u003c/tt\u003e such that\n \u003ctt\u003e(o\u003d\u003dnull ? e\u003d\u003dnull : o.equals(e))\u003c/tt\u003e.\"  This specification should\n \u003ci\u003enot\u003c/i\u003e be construed to imply that invoking \u003ctt\u003eCollection.contains\u003c/tt\u003e\n with a non-null argument \u003ctt\u003eo\u003c/tt\u003e will cause \u003ctt\u003eo.equals(e)\u003c/tt\u003e to be\n invoked for any element \u003ctt\u003ee\u003c/tt\u003e.  Implementations are free to implement\n optimizations whereby the \u003ctt\u003eequals\u003c/tt\u003e invocation is avoided, for\n example, by first comparing the hash codes of the two elements.  (The\n {@link Object#hashCode()} specification guarantees that two objects with\n unequal hash codes cannot be equal.)  More generally, implementations of\n the various Collections Framework interfaces are free to take advantage of\n the specified behavior of underlying {@link Object} methods wherever the\n implementor deems it appropriate.\n\n \u003cp\u003eSome collection operations which perform recursive traversal of the\n collection may fail with an exception for self-referential instances where\n the collection directly or indirectly contains itself. This includes the\n {@code clone()}, {@code equals()}, {@code hashCode()} and {@code toString()}\n methods. Implementations may optionally handle the self-referential scenario,\n however most current implementations do not do so.\n\n \u003cp\u003eThis interface is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{},"package":"java.util","interfaces":["java.lang.Iterable"],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"size","comment":"Returns the number of elements in this collection.  If this collection\n contains more than \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e elements, returns\n \u003ctt\u003eInteger.MAX_VALUE\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this collection contains no elements.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this collection contains the specified element.\n More formally, returns \u003ctt\u003etrue\u003c/tt\u003e if and only if this collection\n contains at least one element \u003ctt\u003ee\u003c/tt\u003e such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this collection.  There are no\n guarantees concerning the order in which the elements are returned\n (unless this collection is an instance of some class that provides a\n guarantee).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this collection.\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order.\n\n \u003cp\u003eThe returned array will be \"safe\" in that no references to it are\n maintained by this collection.  (In other words, this method must\n allocate a new array even if this collection is backed by an array).\n The caller is thus free to modify the returned array.\n\n \u003cp\u003eThis method acts as bridge between array-based and collection-based\n APIs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toArray","comment":"Returns an array containing all of the elements in this collection;\n the runtime type of the returned array is that of the specified array.\n If the collection fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this collection.\n\n \u003cp\u003eIf this collection fits in the specified array with room to spare\n (i.e., the array has more elements than this collection), the element\n in the array immediately following the end of the collection is set to\n \u003ctt\u003enull\u003c/tt\u003e.  (This is useful in determining the length of this\n collection \u003ci\u003eonly\u003c/i\u003e if the caller knows that this collection does\n not contain any \u003ctt\u003enull\u003c/tt\u003e elements.)\n\n \u003cp\u003eIf this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order.\n\n \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \u003cp\u003eSuppose \u003ctt\u003ex\u003c/tt\u003e is a collection known to contain only strings.\n The following code can be used to dump the collection into a newly\n allocated array of \u003ctt\u003eString\u003c/tt\u003e:\n\n \u003cpre\u003e\n     String[] y \u003d x.toArray(new String[0]);\u003c/pre\u003e\n\n Note that \u003ctt\u003etoArray(new Object[0])\u003c/tt\u003e is identical in function to\n \u003ctt\u003etoArray()\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T[])","flatSignature":"(T[])","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"a","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"add","comment":"Ensures that this collection contains the specified element (optional\n operation).  Returns \u003ctt\u003etrue\u003c/tt\u003e if this collection changed as a\n result of the call.  (Returns \u003ctt\u003efalse\u003c/tt\u003e if this collection does\n not permit duplicates and already contains the specified element.)\u003cp\u003e\n\n Collections that support this operation may place limitations on what\n elements may be added to this collection.  In particular, some\n collections will refuse to add \u003ctt\u003enull\u003c/tt\u003e elements, and others will\n impose restrictions on the type of elements that may be added.\n Collection classes should clearly specify in their documentation any\n restrictions on what elements may be added.\u003cp\u003e\n\n If a collection refuses to add a particular element for any reason\n other than that it already contains the element, it \u003ci\u003emust\u003c/i\u003e throw\n an exception (rather than returning \u003ctt\u003efalse\u003c/tt\u003e).  This preserves\n the invariant that a collection always contains the specified element\n after this call returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(E)","flatSignature":"(E)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"e","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes a single instance of the specified element from this\n collection, if it is present (optional operation).  More formally,\n removes an element \u003ctt\u003ee\u003c/tt\u003e such that\n \u003ctt\u003e(o\u003d\u003dnull\u0026nbsp;?\u0026nbsp;e\u003d\u003dnull\u0026nbsp;:\u0026nbsp;o.equals(e))\u003c/tt\u003e, if\n this collection contains one or more such elements.  Returns\n \u003ctt\u003etrue\u003c/tt\u003e if this collection contained the specified element (or\n equivalently, if this collection changed as a result of the call).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsAll","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this collection contains all of the elements\n in the specified collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Adds all of the elements in the specified collection to this collection\n (optional operation).  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified collection is this collection, and this collection is\n nonempty.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends E\u003e)","flatSignature":"(Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeAll","comment":"Removes all of this collection\u0027s elements that are also contained in the\n specified collection (optional operation).  After this call returns,\n this collection will contain no elements in common with the specified\n collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeIf","comment":"Removes all of the elements of this collection that satisfy the given\n predicate.  Errors or runtime exceptions thrown during iteration or by\n the predicate are relayed to the caller.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Predicate\u003c? super E\u003e)","flatSignature":"(Predicate\u003c? super E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[{"name":"filter","type":{"isPrimitive":false,"simpleName":"Predicate","qualifiedName":"java.util.function.Predicate","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"retainAll","comment":"Retains only the elements in this collection that are contained in the\n specified collection (optional operation).  In other words, removes from\n this collection all of its elements that are not contained in the\n specified collection.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c?\u003e)","flatSignature":"(Collection\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the elements from this collection (optional operation).\n The collection will be empty after this method returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this collection for equality. \u003cp\u003e\n\n While the \u003ctt\u003eCollection\u003c/tt\u003e interface adds no stipulations to the\n general contract for the \u003ctt\u003eObject.equals\u003c/tt\u003e, programmers who\n implement the \u003ctt\u003eCollection\u003c/tt\u003e interface \"directly\" (in other words,\n create a class that is a \u003ctt\u003eCollection\u003c/tt\u003e but is not a \u003ctt\u003eSet\u003c/tt\u003e\n or a \u003ctt\u003eList\u003c/tt\u003e) must exercise care if they choose to override the\n \u003ctt\u003eObject.equals\u003c/tt\u003e.  It is not necessary to do so, and the simplest\n course of action is to rely on \u003ctt\u003eObject\u003c/tt\u003e\u0027s implementation, but\n the implementor may wish to implement a \"value comparison\" in place of\n the default \"reference comparison.\"  (The \u003ctt\u003eList\u003c/tt\u003e and\n \u003ctt\u003eSet\u003c/tt\u003e interfaces mandate such value comparisons.)\u003cp\u003e\n\n The general contract for the \u003ctt\u003eObject.equals\u003c/tt\u003e method states that\n equals must be symmetric (in other words, \u003ctt\u003ea.equals(b)\u003c/tt\u003e if and\n only if \u003ctt\u003eb.equals(a)\u003c/tt\u003e).  The contracts for \u003ctt\u003eList.equals\u003c/tt\u003e\n and \u003ctt\u003eSet.equals\u003c/tt\u003e state that lists are only equal to other lists,\n and sets to other sets.  Thus, a custom \u003ctt\u003eequals\u003c/tt\u003e method for a\n collection class that implements neither the \u003ctt\u003eList\u003c/tt\u003e nor\n \u003ctt\u003eSet\u003c/tt\u003e interface must return \u003ctt\u003efalse\u003c/tt\u003e when this collection\n is compared to any list or set.  (By the same logic, it is not possible\n to write a class that correctly implements both the \u003ctt\u003eSet\u003c/tt\u003e and\n \u003ctt\u003eList\u003c/tt\u003e interfaces.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this collection.  While the\n \u003ctt\u003eCollection\u003c/tt\u003e interface adds no stipulations to the general\n contract for the \u003ctt\u003eObject.hashCode\u003c/tt\u003e method, programmers should\n take note that any class that overrides the \u003ctt\u003eObject.equals\u003c/tt\u003e\n method must also override the \u003ctt\u003eObject.hashCode\u003c/tt\u003e method in order\n to satisfy the general contract for the \u003ctt\u003eObject.hashCode\u003c/tt\u003e method.\n In particular, \u003ctt\u003ec1.equals(c2)\u003c/tt\u003e implies that\n \u003ctt\u003ec1.hashCode()\u003d\u003dc2.hashCode()\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@link Spliterator} over the elements in this collection.\n\n Implementations should document characteristic values reported by the\n spliterator.  Such characteristic values are not required to be reported\n if the spliterator reports {@link Spliterator#SIZED} and this collection\n contains no elements.\n\n \u003cp\u003eThe default implementation should be overridden by subclasses that\n can return a more efficient spliterator.  In order to\n preserve expected laziness behavior for the {@link #stream()} and\n {@link #parallelStream()}} methods, spliterators should either have the\n characteristic of {@code IMMUTABLE} or {@code CONCURRENT}, or be\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e.\n If none of these is practical, the overriding class should describe the\n spliterator\u0027s documented policy of binding and structural interference,\n and should override the {@link #stream()} and {@link #parallelStream()}\n methods to create streams using a {@code Supplier} of the spliterator,\n as in:\n \u003cpre\u003e{@code\n     Stream\u003cE\u003e s \u003d StreamSupport.stream(() -\u003e spliterator(), spliteratorCharacteristics)\n }\u003c/pre\u003e\n \u003cp\u003eThese requirements ensure that streams produced by the\n {@link #stream()} and {@link #parallelStream()} methods will reflect the\n contents of the collection as of initiation of the terminal stream\n operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"stream","comment":"Returns a sequential {@code Stream} with this collection as its source.\n\n \u003cp\u003eThis method should be overridden when the {@link #spliterator()}\n method cannot return a spliterator that is {@code IMMUTABLE},\n {@code CONCURRENT}, or \u003cem\u003elate-binding\u003c/em\u003e. (See {@link #spliterator()}\n for details.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parallelStream","comment":"Returns a possibly parallel {@code Stream} with this collection as its\n source.  It is allowable for this method to return a sequential stream.\n\n \u003cp\u003eThis method should be overridden when the {@link #spliterator()}\n method cannot return a spliterator that is {@code IMMUTABLE},\n {@code CONCURRENT}, or \u003cem\u003elate-binding\u003c/em\u003e. (See {@link #spliterator()}\n for details.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Stream","qualifiedName":"java.util.stream.Stream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subInterfaces":["java.util.List","java.util.Set","java.util.Queue","java.util.AbstractCollection"],"enumConstants":[]}