{"name":"AbstractSequentialList","comment":"This class provides a skeletal implementation of the \u003ctt\u003eList\u003c/tt\u003e\n interface to minimize the effort required to implement this interface\n backed by a \"sequential access\" data store (such as a linked list).  For\n random access data (such as an array), \u003ctt\u003eAbstractList\u003c/tt\u003e should be used\n in preference to this class.\u003cp\u003e\n\n This class is the opposite of the \u003ctt\u003eAbstractList\u003c/tt\u003e class in the sense\n that it implements the \"random access\" methods (\u003ctt\u003eget(int index)\u003c/tt\u003e,\n \u003ctt\u003eset(int index, E element)\u003c/tt\u003e, \u003ctt\u003eadd(int index, E element)\u003c/tt\u003e and\n \u003ctt\u003eremove(int index)\u003c/tt\u003e) on top of the list\u0027s list iterator, instead of\n the other way around.\u003cp\u003e\n\n To implement a list the programmer needs only to extend this class and\n provide implementations for the \u003ctt\u003elistIterator\u003c/tt\u003e and \u003ctt\u003esize\u003c/tt\u003e\n methods.  For an unmodifiable list, the programmer need only implement the\n list iterator\u0027s \u003ctt\u003ehasNext\u003c/tt\u003e, \u003ctt\u003enext\u003c/tt\u003e, \u003ctt\u003ehasPrevious\u003c/tt\u003e,\n \u003ctt\u003eprevious\u003c/tt\u003e and \u003ctt\u003eindex\u003c/tt\u003e methods.\u003cp\u003e\n\n For a modifiable list the programmer should additionally implement the list\n iterator\u0027s \u003ctt\u003eset\u003c/tt\u003e method.  For a variable-size list the programmer\n should additionally implement the list iterator\u0027s \u003ctt\u003eremove\u003c/tt\u003e and\n \u003ctt\u003eadd\u003c/tt\u003e methods.\u003cp\u003e\n\n The programmer should generally provide a void (no argument) and collection\n constructor, as per the recommendation in the \u003ctt\u003eCollection\u003c/tt\u003e interface\n specification.\u003cp\u003e\n\n This class is a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n Java Collections Framework\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractSequentialList","qualifiedName":"java.util.AbstractSequentialList","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.AbstractList","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"get","comment":"Returns the element at the specified position in this list.\n\n \u003cp\u003eThis implementation first gets a list iterator pointing to the\n indexed element (with \u003ctt\u003elistIterator(index)\u003c/tt\u003e).  Then, it gets\n the element using \u003ctt\u003eListIterator.next\u003c/tt\u003e and returns it.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Replaces the element at the specified position in this list with the\n specified element (optional operation).\n\n \u003cp\u003eThis implementation first gets a list iterator pointing to the\n indexed element (with \u003ctt\u003elistIterator(index)\u003c/tt\u003e).  Then, it gets\n the current element using \u003ctt\u003eListIterator.next\u003c/tt\u003e and replaces it\n with \u003ctt\u003eListIterator.set\u003c/tt\u003e.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the list iterator does not\n implement the \u003ctt\u003eset\u003c/tt\u003e operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, E)","flatSignature":"(int, E)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"element","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"add","comment":"Inserts the specified element at the specified position in this list\n (optional operation).  Shifts the element currently at that position\n (if any) and any subsequent elements to the right (adds one to their\n indices).\n\n \u003cp\u003eThis implementation first gets a list iterator pointing to the\n indexed element (with \u003ctt\u003elistIterator(index)\u003c/tt\u003e).  Then, it\n inserts the specified element with \u003ctt\u003eListIterator.add\u003c/tt\u003e.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the list iterator does not\n implement the \u003ctt\u003eadd\u003c/tt\u003e operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, E)","flatSignature":"(int, E)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"element","type":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the element at the specified position in this list (optional\n operation).  Shifts any subsequent elements to the left (subtracts one\n from their indices).  Returns the element that was removed from the\n list.\n\n \u003cp\u003eThis implementation first gets a list iterator pointing to the\n indexed element (with \u003ctt\u003elistIterator(index)\u003c/tt\u003e).  Then, it removes\n the element with \u003ctt\u003eListIterator.remove\u003c/tt\u003e.\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the list iterator does not\n implement the \u003ctt\u003eremove\u003c/tt\u003e operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"E","qualifiedName":"E","dimension":"","elementType":{},"typeVariable":{"name":"E","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addAll","comment":"Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  The new elements\n will appear in this list in the order that they are returned by the\n specified collection\u0027s iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  (Note that this will occur if the specified\n collection is this list, and it\u0027s nonempty.)\n\n \u003cp\u003eThis implementation gets an iterator over the specified collection and\n a list iterator over this list pointing to the indexed element (with\n \u003ctt\u003elistIterator(index)\u003c/tt\u003e).  Then, it iterates over the specified\n collection, inserting the elements obtained from the iterator into this\n list, one at a time, using \u003ctt\u003eListIterator.add\u003c/tt\u003e followed by\n \u003ctt\u003eListIterator.next\u003c/tt\u003e (to skip over the added element).\n\n \u003cp\u003eNote that this implementation will throw an\n \u003ctt\u003eUnsupportedOperationException\u003c/tt\u003e if the list iterator returned by\n the \u003ctt\u003elistIterator\u003c/tt\u003e method does not implement the \u003ctt\u003eadd\u003c/tt\u003e\n operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.Collection\u003c? extends E\u003e)","flatSignature":"(int, Collection\u003c? extends E\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Returns an iterator over the elements in this list (in proper\n sequence).\u003cp\u003e\n\n This implementation merely returns a list iterator over the list.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"listIterator","comment":"Returns a list iterator over the elements in this list (in proper\n sequence).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"ListIterator","qualifiedName":"java.util.ListIterator","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"E","bounds":[]}],"subClasses":["java.util.LinkedList"],"enumConstants":[]}