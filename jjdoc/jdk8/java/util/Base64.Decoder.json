{"name":"Base64.Decoder","comment":"This class implements a decoder for decoding byte data using the\n Base64 encoding scheme as specified in RFC 4648 and RFC 2045.\n\n \u003cp\u003e The Base64 padding character {@code \u0027\u003d\u0027} is accepted and\n interpreted as the end of the encoded byte data, but is not\n required. So if the final unit of the encoded byte data only has\n two or three Base64 characters (without the corresponding padding\n character(s) padded), they are decoded as if followed by padding\n character(s). If there is a padding character present in the\n final unit, the correct number of padding character(s) must be\n present, otherwise {@code IllegalArgumentException} (\n {@code IOException} when reading from a Base64 stream) is thrown\n during decoding.\n\n \u003cp\u003e Instances of {@link Decoder} class are safe for use by\n multiple concurrent threads.\n\n \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to\n a method of this class will cause a\n {@link java.lang.NullPointerException NullPointerException} to\n be thrown.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Decoder","qualifiedName":"java.util.Base64.Decoder","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":true,"since":"1.8","innerClasses":[],"isInnerClass":true,"constructors":[],"fields":[],"methods":[{"name":"decode","comment":"Decodes all bytes from the input byte array using the {@link Base64}\n encoding scheme, writing the results into a newly-allocated output\n byte array. The returned byte array is of the length of the resulting\n bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"decode","comment":"Decodes a Base64 encoded String into a newly-allocated byte array\n using the {@link Base64} encoding scheme.\n\n \u003cp\u003e An invocation of this method has exactly the same effect as invoking\n {@code decode(src.getBytes(StandardCharsets.ISO_8859_1))}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decode","comment":"Decodes all bytes from the input byte array using the {@link Base64}\n encoding scheme, writing the results into the given output byte array,\n starting at offset 0.\n\n \u003cp\u003e It is the responsibility of the invoker of this method to make\n sure the output byte array {@code dst} has enough space for decoding\n all bytes from the input byte array. No bytes will be be written to\n the output byte array if the output byte array is not big enough.\n\n \u003cp\u003e If the input byte array is not in valid Base64 encoding scheme\n then some bytes may have been written to the output byte array before\n IllegalargumentException is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], byte[])","flatSignature":"(byte[], byte[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"src","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"dst","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"decode","comment":"Decodes all bytes from the input byte buffer using the {@link Base64}\n encoding scheme, writing the results into a newly-allocated ByteBuffer.\n\n \u003cp\u003e Upon return, the source buffer\u0027s position will be updated to\n its limit; its limit will not have been changed. The returned\n output buffer\u0027s position will be zero and its limit will be the\n number of resulting decoded bytes\n\n \u003cp\u003e {@code IllegalArgumentException} is thrown if the input buffer\n is not in valid Base64 encoding scheme. The position of the input\n buffer will not be advanced in this case.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.ByteBuffer)","flatSignature":"(ByteBuffer)","returnType":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"buffer","type":{"isPrimitive":false,"simpleName":"ByteBuffer","qualifiedName":"java.nio.ByteBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wrap","comment":"Returns an input stream for decoding {@link Base64} encoded byte stream.\n\n \u003cp\u003e The {@code read}  methods of the returned {@code InputStream} will\n throw {@code IOException} when reading bytes that cannot be decoded.\n\n \u003cp\u003e Closing the returned input stream will close the underlying\n input stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"is","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}