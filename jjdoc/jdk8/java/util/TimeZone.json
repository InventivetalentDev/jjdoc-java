{"name":"TimeZone","comment":"\u003ccode\u003eTimeZone\u003c/code\u003e represents a time zone offset, and also figures out daylight\n savings.\n\n \u003cp\u003e\n Typically, you get a \u003ccode\u003eTimeZone\u003c/code\u003e using \u003ccode\u003egetDefault\u003c/code\u003e\n which creates a \u003ccode\u003eTimeZone\u003c/code\u003e based on the time zone where the program\n is running. For example, for a program running in Japan, \u003ccode\u003egetDefault\u003c/code\u003e\n creates a \u003ccode\u003eTimeZone\u003c/code\u003e object based on Japanese Standard Time.\n\n \u003cp\u003e\n You can also get a \u003ccode\u003eTimeZone\u003c/code\u003e using \u003ccode\u003egetTimeZone\u003c/code\u003e\n along with a time zone ID. For instance, the time zone ID for the\n U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a\n U.S. Pacific Time \u003ccode\u003eTimeZone\u003c/code\u003e object with:\n \u003cblockquote\u003e\u003cpre\u003e\n TimeZone tz \u003d TimeZone.getTimeZone(\"America/Los_Angeles\");\n \u003c/pre\u003e\u003c/blockquote\u003e\n You can use the \u003ccode\u003egetAvailableIDs\u003c/code\u003e method to iterate through\n all the supported time zone IDs. You can then choose a\n supported ID to get a \u003ccode\u003eTimeZone\u003c/code\u003e.\n If the time zone you want is not represented by one of the\n supported IDs, then a custom time zone ID can be specified to\n produce a TimeZone. The syntax of a custom time zone ID is:\n\n \u003cblockquote\u003e\u003cpre\u003e\n \u003ca name\u003d\"CustomID\"\u003e\u003ci\u003eCustomID:\u003c/i\u003e\u003c/a\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e \u003ccode\u003e:\u003c/code\u003e \u003ci\u003eMinutes\u003c/i\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e \u003ci\u003eMinutes\u003c/i\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e\n \u003ci\u003eSign:\u003c/i\u003e one of\n         \u003ccode\u003e+ -\u003c/code\u003e\n \u003ci\u003eHours:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eMinutes:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eDigit:\u003c/i\u003e one of\n         \u003ccode\u003e0 1 2 3 4 5 6 7 8 9\u003c/code\u003e\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003ci\u003eHours\u003c/i\u003e must be between 0 to 23 and \u003ci\u003eMinutes\u003c/i\u003e must be\n between 00 to 59.  For example, \"GMT+10\" and \"GMT+0010\" mean ten\n hours and ten minutes ahead of GMT, respectively.\n \u003cp\u003e\n The format is locale independent and digits must be taken from the\n Basic Latin block of the Unicode standard. No daylight saving time\n transition schedule can be specified with a custom time zone ID. If\n the specified string doesn\u0027t match the syntax, \u003ccode\u003e\"GMT\"\u003c/code\u003e\n is used.\n \u003cp\u003e\n When creating a \u003ccode\u003eTimeZone\u003c/code\u003e, the specified custom time\n zone ID is normalized in the following syntax:\n \u003cblockquote\u003e\u003cpre\u003e\n \u003ca name\u003d\"NormalizedCustomID\"\u003e\u003ci\u003eNormalizedCustomID:\u003c/i\u003e\u003c/a\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e \u003ccode\u003e:\u003c/code\u003e \u003ci\u003eMinutes\u003c/i\u003e\n \u003ci\u003eSign:\u003c/i\u003e one of\n         \u003ccode\u003e+ -\u003c/code\u003e\n \u003ci\u003eTwoDigitHours:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eMinutes:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eDigit:\u003c/i\u003e one of\n         \u003ccode\u003e0 1 2 3 4 5 6 7 8 9\u003c/code\u003e\n \u003c/pre\u003e\u003c/blockquote\u003e\n For example, TimeZone.getTimeZone(\"GMT-8\").getID() returns \"GMT-08:00\".\n\n \u003ch3\u003eThree-letter time zone IDs\u003c/h3\u003e\n\n For compatibility with JDK 1.1.x, some other three-letter time zone IDs\n (such as \"PST\", \"CTT\", \"AST\") are also supported. However, \u003cstrong\u003etheir\n use is deprecated\u003c/strong\u003e because the same abbreviation is often used\n for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard\n Time\" and \"China Standard Time\"), and the Java platform can then only\n recognize one of them.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Cloneable"],"isAbstract":true,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"TimeZone","comment":"Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[{"name":"SHORT","comment":"A style specifier for \u003ccode\u003egetDisplayName()\u003c/code\u003e indicating\n a short name, such as \"PST.\"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"LONG","comment":"A style specifier for \u003ccode\u003egetDisplayName()\u003c/code\u003e indicating\n a long name, such as \"Pacific Standard Time.\"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"}],"methods":[{"name":"getOffset","comment":"Gets the time zone offset, for current date, modified in case of\n daylight savings. This is the offset to add to UTC to get local time.\n \u003cp\u003e\n This method returns a historically correct offset if an\n underlying \u003ccode\u003eTimeZone\u003c/code\u003e implementation subclass\n supports historical Daylight Saving Time schedule and GMT\n offset changes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"era","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"day","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"milliseconds","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOffset","comment":"Returns the offset of this time zone from UTC at the specified\n date. If Daylight Saving Time is in effect at the specified\n date, the offset value is adjusted with the amount of daylight\n saving.\n \u003cp\u003e\n This method returns a historically correct offset value if an\n underlying TimeZone implementation subclass supports historical\n Daylight Saving Time schedule and GMT offset changes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setRawOffset","comment":"Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.\n \u003cp\u003e\n If an underlying \u003ccode\u003eTimeZone\u003c/code\u003e implementation subclass\n supports historical GMT offset changes, the specified GMT\n offset is set as the latest GMT offset and the difference from\n the known latest GMT offset value is used to adjust all\n historical GMT offset values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"offsetMillis","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRawOffset","comment":"Returns the amount of time in milliseconds to add to UTC to get\n standard time in this time zone. Because this value is not\n affected by daylight saving time, it is called \u003cI\u003eraw\n offset\u003c/I\u003e.\n \u003cp\u003e\n If an underlying \u003ccode\u003eTimeZone\u003c/code\u003e implementation subclass\n supports historical GMT offset changes, the method returns the\n raw offset value of the current date. In Honolulu, for example,\n its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and\n this method always returns -36000000 milliseconds (i.e., -10\n hours).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getID","comment":"Gets the ID of this time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setID","comment":"Sets the time zone ID. This does not change any other data in\n the time zone object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ID","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns a long standard time name of this {@code TimeZone} suitable for\n presentation to the user in the default locale.\n\n \u003cp\u003eThis method is equivalent to:\n \u003cblockquote\u003e\u003cpre\u003e\n getDisplayName(false, {@link #LONG},\n                Locale.getDefault({@link Locale.Category#DISPLAY}))\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns a long standard time name of this {@code TimeZone} suitable for\n presentation to the user in the specified {@code locale}.\n\n \u003cp\u003eThis method is equivalent to:\n \u003cblockquote\u003e\u003cpre\u003e\n getDisplayName(false, {@link #LONG}, locale)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns a name in the specified {@code style} of this {@code TimeZone}\n suitable for presentation to the user in the default locale. If the\n specified {@code daylight} is {@code true}, a Daylight Saving Time name\n is returned (even if this {@code TimeZone} doesn\u0027t observe Daylight Saving\n Time). Otherwise, a Standard Time name is returned.\n\n \u003cp\u003eThis method is equivalent to:\n \u003cblockquote\u003e\u003cpre\u003e\n getDisplayName(daylight, style,\n                Locale.getDefault({@link Locale.Category#DISPLAY}))\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, int)","flatSignature":"(boolean, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daylight","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDisplayName","comment":"Returns a name in the specified {@code style} of this {@code TimeZone}\n suitable for presentation to the user in the specified {@code\n locale}. If the specified {@code daylight} is {@code true}, a Daylight\n Saving Time name is returned (even if this {@code TimeZone} doesn\u0027t\n observe Daylight Saving Time). Otherwise, a Standard Time name is\n returned.\n\n \u003cp\u003eWhen looking up a time zone name, the {@linkplain\n ResourceBundle.Control#getCandidateLocales(String,Locale) default\n \u003ccode\u003eLocale\u003c/code\u003e search path of \u003ccode\u003eResourceBundle\u003c/code\u003e} derived\n from the specified {@code locale} is used. (No {@linkplain\n ResourceBundle.Control#getFallbackLocale(String,Locale) fallback\n \u003ccode\u003eLocale\u003c/code\u003e} search is performed.) If a time zone name in any\n {@code Locale} of the search path, including {@link Locale#ROOT}, is\n found, the name is returned. Otherwise, a string in the\n \u003ca href\u003d\"#NormalizedCustomID\"\u003enormalized custom ID format\u003c/a\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, int, java.util.Locale)","flatSignature":"(boolean, int, Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"daylight","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDSTSavings","comment":"Returns the amount of time to be added to local standard time\n to get local wall clock time.\n\n \u003cp\u003eThe default implementation returns 3600000 milliseconds\n (i.e., one hour) if a call to {@link #useDaylightTime()}\n returns {@code true}. Otherwise, 0 (zero) is returned.\n\n \u003cp\u003eIf an underlying {@code TimeZone} implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method returns the amount of saving time of the\n last known Daylight Saving Time rule that can be a future\n prediction.\n\n \u003cp\u003eIf the amount of saving time at any given time stamp is\n required, construct a {@link Calendar} with this {@code\n TimeZone} and the time stamp, and call {@link Calendar#get(int)\n Calendar.get}{@code (}{@link Calendar#DST_OFFSET}{@code )}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"useDaylightTime","comment":"Queries if this {@code TimeZone} uses Daylight Saving Time.\n\n \u003cp\u003eIf an underlying {@code TimeZone} implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method refers to the last known Daylight Saving Time\n rule that can be a future prediction and may not be the same as\n the current rule. Consider calling {@link #observesDaylightTime()}\n if the current rule should also be taken into account.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"observesDaylightTime","comment":"Returns {@code true} if this {@code TimeZone} is currently in\n Daylight Saving Time, or if a transition from Standard Time to\n Daylight Saving Time occurs at any future time.\n\n \u003cp\u003eThe default implementation returns {@code true} if\n {@code useDaylightTime()} or {@code inDaylightTime(new Date())}\n returns {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"inDaylightTime","comment":"Queries if the given {@code date} is in Daylight Saving Time in\n this time zone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeZone","comment":"Gets the \u003ccode\u003eTimeZone\u003c/code\u003e for the given ID.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ID","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeZone","comment":"Gets the {@code TimeZone} for the given {@code zoneId}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZoneId)","flatSignature":"(ZoneId)","returnType":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zoneId","type":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toZoneId","comment":"Converts this {@code TimeZone} object to a {@code ZoneId}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZoneId","qualifiedName":"java.time.ZoneId","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAvailableIDs","comment":"Gets the available IDs according to the given time zone offset in milliseconds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rawOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAvailableIDs","comment":"Gets all the available IDs supported.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getDefault","comment":"Gets the default {@code TimeZone} of the Java virtual machine. If the\n cached default {@code TimeZone} is available, its clone is returned.\n Otherwise, the method takes the following steps to determine the default\n time zone.\n\n \u003cul\u003e\n \u003cli\u003eUse the {@code user.timezone} property value as the default\n time zone ID if it\u0027s available.\u003c/li\u003e\n \u003cli\u003eDetect the platform time zone ID. The source of the\n platform time zone and ID mapping may vary with implementation.\u003c/li\u003e\n \u003cli\u003eUse {@code GMT} as the last resort if the given or detected\n time zone ID is unknown.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eThe default {@code TimeZone} created from the ID is cached,\n and its clone is returned. The {@code user.timezone} property\n value is set to the ID upon return.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setDefault","comment":"Sets the {@code TimeZone} that is returned by the {@code getDefault}\n method. {@code zone} is cached. If {@code zone} is null, the cached\n default {@code TimeZone} is cleared. This method doesn\u0027t change the value\n of the {@code user.timezone} property.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasSameRules","comment":"Returns true if this zone has the same rule and offset as another zone.\n That is, if this zone differs only in ID, if at all.  Returns false\n if the other zone is null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"other","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Creates a copy of this \u003ccode\u003eTimeZone\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.SimpleTimeZone"],"enumConstants":[]}