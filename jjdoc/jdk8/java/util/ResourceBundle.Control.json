{"name":"ResourceBundle.Control","comment":"\u003ccode\u003eResourceBundle.Control\u003c/code\u003e defines a set of callback methods\n that are invoked by the {@link ResourceBundle#getBundle(String,\n Locale, ClassLoader, Control) ResourceBundle.getBundle} factory\n methods during the bundle loading process. In other words, a\n \u003ccode\u003eResourceBundle.Control\u003c/code\u003e collaborates with the factory\n methods for loading resource bundles. The default implementation of\n the callback methods provides the information necessary for the\n factory methods to perform the \u003ca\n href\u003d\"./ResourceBundle.html#default_behavior\"\u003edefault behavior\u003c/a\u003e.\n\n \u003cp\u003eIn addition to the callback methods, the {@link\n #toBundleName(String, Locale) toBundleName} and {@link\n #toResourceName(String, String) toResourceName} methods are defined\n primarily for convenience in implementing the callback\n methods. However, the \u003ccode\u003etoBundleName\u003c/code\u003e method could be\n overridden to provide different conventions in the organization and\n packaging of localized resources.  The \u003ccode\u003etoResourceName\u003c/code\u003e\n method is \u003ccode\u003efinal\u003c/code\u003e to avoid use of wrong resource and class\n name separators.\n\n \u003cp\u003eTwo factory methods, {@link #getControl(List)} and {@link\n #getNoFallbackControl(List)}, provide\n \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instances that implement common\n variations of the default bundle loading process.\n\n \u003cp\u003eThe formats returned by the {@link Control#getFormats(String)\n getFormats} method and candidate locales returned by the {@link\n ResourceBundle.Control#getCandidateLocales(String, Locale)\n getCandidateLocales} method must be consistent in all\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e invocations for the same base\n bundle. Otherwise, the \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e methods\n may return unintended bundles. For example, if only\n \u003ccode\u003e\"java.class\"\u003c/code\u003e is returned by the \u003ccode\u003egetFormats\u003c/code\u003e\n method for the first call to \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e\n and only \u003ccode\u003e\"java.properties\"\u003c/code\u003e for the second call, then the\n second call will return the class-based one that has been cached\n during the first call.\n\n \u003cp\u003eA \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instance must be thread-safe\n if it\u0027s simultaneously used by multiple threads.\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e does not synchronize to call\n the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e methods. The default\n implementations of the methods are thread-safe.\n\n \u003cp\u003eApplications can specify \u003ccode\u003eResourceBundle.Control\u003c/code\u003e\n instances returned by the \u003ccode\u003egetControl\u003c/code\u003e factory methods or\n created from a subclass of \u003ccode\u003eResourceBundle.Control\u003c/code\u003e to\n customize the bundle loading process. The following are examples of\n changing the default bundle loading process.\n\n \u003cp\u003e\u003cb\u003eExample 1\u003c/b\u003e\n\n \u003cp\u003eThe following code lets \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e look\n up only properties-based resources.\n\n \u003cpre\u003e\n import java.util.*;\n import static java.util.ResourceBundle.Control.*;\n ...\n ResourceBundle bundle \u003d\n   ResourceBundle.getBundle(\"MyResources\", new Locale(\"fr\", \"CH\"),\n                            ResourceBundle.Control.getControl(FORMAT_PROPERTIES));\n \u003c/pre\u003e\n\n Given the resource bundles in the \u003ca\n href\u003d\"./ResourceBundle.html#default_behavior_example\"\u003eexample\u003c/a\u003e in\n the \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e description, this\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e call loads\n \u003ccode\u003eMyResources_fr_CH.properties\u003c/code\u003e whose parent is\n \u003ccode\u003eMyResources_fr.properties\u003c/code\u003e whose parent is\n \u003ccode\u003eMyResources.properties\u003c/code\u003e. (\u003ccode\u003eMyResources_fr_CH.properties\u003c/code\u003e\n is not hidden, but \u003ccode\u003eMyResources_fr_CH.class\u003c/code\u003e is.)\n\n \u003cp\u003e\u003cb\u003eExample 2\u003c/b\u003e\n\n \u003cp\u003eThe following is an example of loading XML-based bundles\n using {@link Properties#loadFromXML(java.io.InputStream)\n Properties.loadFromXML}.\n\n \u003cpre\u003e\n ResourceBundle rb \u003d ResourceBundle.getBundle(\"Messages\",\n     new ResourceBundle.Control() {\n         public List\u0026lt;String\u0026gt; getFormats(String baseName) {\n             if (baseName \u003d\u003d null)\n                 throw new NullPointerException();\n             return Arrays.asList(\"xml\");\n         }\n         public ResourceBundle newBundle(String baseName,\n                                         Locale locale,\n                                         String format,\n                                         ClassLoader loader,\n                                         boolean reload)\n                          throws IllegalAccessException,\n                                 InstantiationException,\n                                 IOException {\n             if (baseName \u003d\u003d null || locale \u003d\u003d null\n                   || format \u003d\u003d null || loader \u003d\u003d null)\n                 throw new NullPointerException();\n             ResourceBundle bundle \u003d null;\n             if (format.equals(\"xml\")) {\n                 String bundleName \u003d toBundleName(baseName, locale);\n                 String resourceName \u003d toResourceName(bundleName, format);\n                 InputStream stream \u003d null;\n                 if (reload) {\n                     URL url \u003d loader.getResource(resourceName);\n                     if (url !\u003d null) {\n                         URLConnection connection \u003d url.openConnection();\n                         if (connection !\u003d null) {\n                             // Disable caches to get fresh data for\n                             // reloading.\n                             connection.setUseCaches(false);\n                             stream \u003d connection.getInputStream();\n                         }\n                     }\n                 } else {\n                     stream \u003d loader.getResourceAsStream(resourceName);\n                 }\n                 if (stream !\u003d null) {\n                     BufferedInputStream bis \u003d new BufferedInputStream(stream);\n                     bundle \u003d new XMLResourceBundle(bis);\n                     bis.close();\n                 }\n             }\n             return bundle;\n         }\n     });\n\n ...\n\n private static class XMLResourceBundle extends ResourceBundle {\n     private Properties props;\n     XMLResourceBundle(InputStream stream) throws IOException {\n         props \u003d new Properties();\n         props.loadFromXML(stream);\n     }\n     protected Object handleGetObject(String key) {\n         return props.getProperty(key);\n     }\n     public Enumeration\u0026lt;String\u0026gt; getKeys() {\n         ...\n     }\n }\n \u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Control","qualifiedName":"java.util.ResourceBundle.Control","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":true,"since":"1.6","innerClasses":[],"isInnerClass":true,"constructors":[],"fields":[{"name":"FORMAT_DEFAULT","comment":"The default format \u003ccode\u003eList\u003c/code\u003e, which contains the strings\n \u003ccode\u003e\"java.class\"\u003c/code\u003e and \u003ccode\u003e\"java.properties\"\u003c/code\u003e, in\n this order. This \u003ccode\u003eList\u003c/code\u003e is {@linkplain\n Collections#unmodifiableList(List) unmodifiable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isStatic":true},{"name":"FORMAT_CLASS","comment":"The class-only format \u003ccode\u003eList\u003c/code\u003e containing\n \u003ccode\u003e\"java.class\"\u003c/code\u003e. This \u003ccode\u003eList\u003c/code\u003e is {@linkplain\n Collections#unmodifiableList(List) unmodifiable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isStatic":true},{"name":"FORMAT_PROPERTIES","comment":"The properties-only format \u003ccode\u003eList\u003c/code\u003e containing\n \u003ccode\u003e\"java.properties\"\u003c/code\u003e. This \u003ccode\u003eList\u003c/code\u003e is\n {@linkplain Collections#unmodifiableList(List) unmodifiable}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isStatic":true},{"name":"TTL_DONT_CACHE","comment":"The time-to-live constant for not caching loaded resource bundle\n instances.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-1L"},{"name":"TTL_NO_EXPIRATION_CONTROL","comment":"The time-to-live constant for disabling the expiration control\n for loaded resource bundle instances in the cache.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-2L"}],"methods":[{"name":"getControl","comment":"Returns a \u003ccode\u003eResourceBundle.Control\u003c/code\u003e in which the {@link\n #getFormats(String) getFormats} method returns the specified\n \u003ccode\u003eformats\u003c/code\u003e. The \u003ccode\u003eformats\u003c/code\u003e must be equal to\n one of {@link Control#FORMAT_PROPERTIES}, {@link\n Control#FORMAT_CLASS} or {@link\n Control#FORMAT_DEFAULT}. \u003ccode\u003eResourceBundle.Control\u003c/code\u003e\n instances returned by this method are singletons and thread-safe.\n\n \u003cp\u003eSpecifying {@link Control#FORMAT_DEFAULT} is equivalent to\n instantiating the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e class,\n except that this method returns a singleton.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.lang.String\u003e)","flatSignature":"(List\u003cString\u003e)","returnType":{"isPrimitive":false,"simpleName":"Control","qualifiedName":"java.util.ResourceBundle.Control","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"formats","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNoFallbackControl","comment":"Returns a \u003ccode\u003eResourceBundle.Control\u003c/code\u003e in which the {@link\n #getFormats(String) getFormats} method returns the specified\n \u003ccode\u003eformats\u003c/code\u003e and the {@link\n Control#getFallbackLocale(String, Locale) getFallbackLocale}\n method returns \u003ccode\u003enull\u003c/code\u003e. The \u003ccode\u003eformats\u003c/code\u003e must\n be equal to one of {@link Control#FORMAT_PROPERTIES}, {@link\n Control#FORMAT_CLASS} or {@link Control#FORMAT_DEFAULT}.\n \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instances returned by this\n method are singletons and thread-safe.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.lang.String\u003e)","flatSignature":"(List\u003cString\u003e)","returnType":{"isPrimitive":false,"simpleName":"Control","qualifiedName":"java.util.ResourceBundle.Control","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"formats","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFormats","comment":"Returns a \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003eString\u003c/code\u003es containing\n formats to be used to load resource bundles for the given\n \u003ccode\u003ebaseName\u003c/code\u003e. The \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e\n factory method tries to load resource bundles with formats in the\n order specified by the list. The list returned by this method\n must have at least one \u003ccode\u003eString\u003c/code\u003e. The predefined\n formats are \u003ccode\u003e\"java.class\"\u003c/code\u003e for class-based resource\n bundles and \u003ccode\u003e\"java.properties\"\u003c/code\u003e for {@linkplain\n PropertyResourceBundle properties-based} ones. Strings starting\n with \u003ccode\u003e\"java.\"\u003c/code\u003e are reserved for future extensions and\n must not be used by application-defined formats.\n\n \u003cp\u003eIt is not a requirement to return an immutable (unmodifiable)\n \u003ccode\u003eList\u003c/code\u003e.  However, the returned \u003ccode\u003eList\u003c/code\u003e must\n not be mutated after it has been returned by\n \u003ccode\u003egetFormats\u003c/code\u003e.\n\n \u003cp\u003eThe default implementation returns {@link #FORMAT_DEFAULT} so\n that the \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method\n looks up first class-based resource bundles, then\n properties-based ones.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCandidateLocales","comment":"Returns a \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003eLocale\u003c/code\u003es as candidate\n locales for \u003ccode\u003ebaseName\u003c/code\u003e and \u003ccode\u003elocale\u003c/code\u003e. This\n method is called by the \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e\n factory method each time the factory method tries finding a\n resource bundle for a target \u003ccode\u003eLocale\u003c/code\u003e.\n\n \u003cp\u003eThe sequence of the candidate locales also corresponds to the\n runtime resource lookup path (also known as the \u003cI\u003eparent\n chain\u003c/I\u003e), if the corresponding resource bundles for the\n candidate locales exist and their parents are not defined by\n loaded resource bundles themselves.  The last element of the list\n must be a {@linkplain Locale#ROOT root locale} if it is desired to\n have the base bundle as the terminal of the parent chain.\n\n \u003cp\u003eIf the given locale is equal to \u003ccode\u003eLocale.ROOT\u003c/code\u003e (the\n root locale), a \u003ccode\u003eList\u003c/code\u003e containing only the root\n \u003ccode\u003eLocale\u003c/code\u003e must be returned. In this case, the\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method loads only\n the base bundle as the resulting resource bundle.\n\n \u003cp\u003eIt is not a requirement to return an immutable (unmodifiable)\n \u003ccode\u003eList\u003c/code\u003e. However, the returned \u003ccode\u003eList\u003c/code\u003e must not\n be mutated after it has been returned by\n \u003ccode\u003egetCandidateLocales\u003c/code\u003e.\n\n \u003cp\u003eThe default implementation returns a \u003ccode\u003eList\u003c/code\u003e containing\n \u003ccode\u003eLocale\u003c/code\u003es using the rules described below.  In the\n description below, \u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e and \u003cem\u003eV\u003c/em\u003e\n respectively represent non-empty language, script, country, and\n variant.  For example, [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e] represents a\n \u003ccode\u003eLocale\u003c/code\u003e that has non-empty values only for language and\n country.  The form \u003cem\u003eL\u003c/em\u003e(\"xx\") represents the (non-empty)\n language value is \"xx\".  For all cases, \u003ccode\u003eLocale\u003c/code\u003es whose\n final component values are empty strings are omitted.\n\n \u003col\u003e\u003cli\u003eFor an input \u003ccode\u003eLocale\u003c/code\u003e with an empty script value,\n append candidate \u003ccode\u003eLocale\u003c/code\u003es by omitting the final component\n one by one as below:\n\n \u003cul\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV\u003c/em\u003e] \u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e] \u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e] \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e \u003c/li\u003e\n \u003c/ul\u003e\u003c/li\u003e\n\n \u003cli\u003eFor an input \u003ccode\u003eLocale\u003c/code\u003e with a non-empty script value,\n append candidate \u003ccode\u003eLocale\u003c/code\u003es by omitting the final component\n up to language, then append candidates generated from the\n \u003ccode\u003eLocale\u003c/code\u003e with country and variant restored:\n\n \u003cul\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\u003c/li\u003e\n\n \u003cli\u003eFor an input \u003ccode\u003eLocale\u003c/code\u003e with a variant value consisting\n of multiple subtags separated by underscore, generate candidate\n \u003ccode\u003eLocale\u003c/code\u003es by omitting the variant subtags one by one, then\n insert them after every occurrence of \u003ccode\u003e Locale\u003c/code\u003es with the\n full variant value in the original list.  For example, if the\n the variant consists of two subtags \u003cem\u003eV1\u003c/em\u003e and \u003cem\u003eV2\u003c/em\u003e:\n\n \u003cul\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV1\u003c/em\u003e, \u003cem\u003eV2\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV1\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eS\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV1\u003c/em\u003e, \u003cem\u003eV2\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e, \u003cem\u003eV1\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e, \u003cem\u003eC\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e]\u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\u003c/li\u003e\n\n \u003cli\u003eSpecial cases for Chinese.  When an input \u003ccode\u003eLocale\u003c/code\u003e has the\n language \"zh\" (Chinese) and an empty script value, either \"Hans\" (Simplified) or\n \"Hant\" (Traditional) might be supplied, depending on the country.\n When the country is \"CN\" (China) or \"SG\" (Singapore), \"Hans\" is supplied.\n When the country is \"HK\" (Hong Kong SAR China), \"MO\" (Macau SAR China),\n or \"TW\" (Taiwan), \"Hant\" is supplied.  For all other countries or when the country\n is empty, no script is supplied.  For example, for \u003ccode\u003eLocale(\"zh\", \"CN\")\n \u003c/code\u003e, the candidate list will be:\n \u003cul\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\"), \u003cem\u003eS\u003c/em\u003e(\"Hans\"), \u003cem\u003eC\u003c/em\u003e(\"CN\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\"), \u003cem\u003eS\u003c/em\u003e(\"Hans\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\"), \u003cem\u003eC\u003c/em\u003e(\"CN\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\")]\u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n For \u003ccode\u003eLocale(\"zh\", \"TW\")\u003c/code\u003e, the candidate list will be:\n \u003cul\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\"), \u003cem\u003eS\u003c/em\u003e(\"Hant\"), \u003cem\u003eC\u003c/em\u003e(\"TW\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\"), \u003cem\u003eS\u003c/em\u003e(\"Hant\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\"), \u003cem\u003eC\u003c/em\u003e(\"TW\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"zh\")]\u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\u003c/li\u003e\n\n \u003cli\u003eSpecial cases for Norwegian.  Both \u003ccode\u003eLocale(\"no\", \"NO\",\n \"NY\")\u003c/code\u003e and \u003ccode\u003eLocale(\"nn\", \"NO\")\u003c/code\u003e represent Norwegian\n Nynorsk.  When a locale\u0027s language is \"nn\", the standard candidate\n list is generated up to [\u003cem\u003eL\u003c/em\u003e(\"nn\")], and then the following\n candidates are added:\n\n \u003cul\u003e\u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"no\"), \u003cem\u003eC\u003c/em\u003e(\"NO\"), \u003cem\u003eV\u003c/em\u003e(\"NY\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"no\"), \u003cem\u003eC\u003c/em\u003e(\"NO\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"no\")]\u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n If the locale is exactly \u003ccode\u003eLocale(\"no\", \"NO\", \"NY\")\u003c/code\u003e, it is first\n converted to \u003ccode\u003eLocale(\"nn\", \"NO\")\u003c/code\u003e and then the above procedure is\n followed.\n\n \u003cp\u003eAlso, Java treats the language \"no\" as a synonym of Norwegian\n Bokm\u0026#xE5;l \"nb\".  Except for the single case \u003ccode\u003eLocale(\"no\",\n \"NO\", \"NY\")\u003c/code\u003e (handled above), when an input \u003ccode\u003eLocale\u003c/code\u003e\n has language \"no\" or \"nb\", candidate \u003ccode\u003eLocale\u003c/code\u003es with\n language code \"no\" and \"nb\" are interleaved, first using the\n requested language, then using its synonym. For example,\n \u003ccode\u003eLocale(\"nb\", \"NO\", \"POSIX\")\u003c/code\u003e generates the following\n candidate list:\n\n \u003cul\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"nb\"), \u003cem\u003eC\u003c/em\u003e(\"NO\"), \u003cem\u003eV\u003c/em\u003e(\"POSIX\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"no\"), \u003cem\u003eC\u003c/em\u003e(\"NO\"), \u003cem\u003eV\u003c/em\u003e(\"POSIX\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"nb\"), \u003cem\u003eC\u003c/em\u003e(\"NO\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"no\"), \u003cem\u003eC\u003c/em\u003e(\"NO\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"nb\")]\u003c/li\u003e\n \u003cli\u003e [\u003cem\u003eL\u003c/em\u003e(\"no\")]\u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eLocale.ROOT\u003c/code\u003e\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003ccode\u003eLocale(\"no\", \"NO\", \"POSIX\")\u003c/code\u003e would generate the same list\n except that locales with \"no\" would appear before the corresponding\n locales with \"nb\".\u003c/li\u003e\n \u003c/ol\u003e\n\n \u003cp\u003eThe default implementation uses an {@link ArrayList} that\n overriding implementations may modify before returning it to the\n caller. However, a subclass must not modify it after it has\n been returned by \u003ccode\u003egetCandidateLocales\u003c/code\u003e.\n\n \u003cp\u003eFor example, if the given \u003ccode\u003ebaseName\u003c/code\u003e is \"Messages\"\n and the given \u003ccode\u003elocale\u003c/code\u003e is\n \u003ccode\u003eLocale(\"ja\",\u0026nbsp;\"\",\u0026nbsp;\"XX\")\u003c/code\u003e, then a\n \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003eLocale\u003c/code\u003es:\n \u003cpre\u003e\n     Locale(\"ja\", \"\", \"XX\")\n     Locale(\"ja\")\n     Locale.ROOT\n \u003c/pre\u003e\n is returned. And if the resource bundles for the \"ja\" and\n \"\" \u003ccode\u003eLocale\u003c/code\u003es are found, then the runtime resource\n lookup path (parent chain) is:\n \u003cpre\u003e{@code\n     Messages_ja -\u003e Messages\n }\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale)","flatSignature":"(String, Locale)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFallbackLocale","comment":"Returns a \u003ccode\u003eLocale\u003c/code\u003e to be used as a fallback locale for\n further resource bundle searches by the\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method. This method\n is called from the factory method every time when no resulting\n resource bundle has been found for \u003ccode\u003ebaseName\u003c/code\u003e and\n \u003ccode\u003elocale\u003c/code\u003e, where locale is either the parameter for\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e or the previous fallback\n locale returned by this method.\n\n \u003cp\u003eThe method returns \u003ccode\u003enull\u003c/code\u003e if no further fallback\n search is desired.\n\n \u003cp\u003eThe default implementation returns the {@linkplain\n Locale#getDefault() default \u003ccode\u003eLocale\u003c/code\u003e} if the given\n \u003ccode\u003elocale\u003c/code\u003e isn\u0027t the default one.  Otherwise,\n \u003ccode\u003enull\u003c/code\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale)","flatSignature":"(String, Locale)","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newBundle","comment":"Instantiates a resource bundle for the given bundle name of the\n given format and locale, using the given class loader if\n necessary. This method returns \u003ccode\u003enull\u003c/code\u003e if there is no\n resource bundle available for the given parameters. If a resource\n bundle can\u0027t be instantiated due to an unexpected error, the\n error must be reported by throwing an \u003ccode\u003eError\u003c/code\u003e or\n \u003ccode\u003eException\u003c/code\u003e rather than simply returning\n \u003ccode\u003enull\u003c/code\u003e.\n\n \u003cp\u003eIf the \u003ccode\u003ereload\u003c/code\u003e flag is \u003ccode\u003etrue\u003c/code\u003e, it\n indicates that this method is being called because the previously\n loaded resource bundle has expired.\n\n \u003cp\u003eThe default implementation instantiates a\n \u003ccode\u003eResourceBundle\u003c/code\u003e as follows.\n\n \u003cul\u003e\n\n \u003cli\u003eThe bundle name is obtained by calling {@link\n #toBundleName(String, Locale) toBundleName(baseName,\n locale)}.\u003c/li\u003e\n\n \u003cli\u003eIf \u003ccode\u003eformat\u003c/code\u003e is \u003ccode\u003e\"java.class\"\u003c/code\u003e, the\n {@link Class} specified by the bundle name is loaded by calling\n {@link ClassLoader#loadClass(String)}. Then, a\n \u003ccode\u003eResourceBundle\u003c/code\u003e is instantiated by calling {@link\n Class#newInstance()}.  Note that the \u003ccode\u003ereload\u003c/code\u003e flag is\n ignored for loading class-based resource bundles in this default\n implementation.\u003c/li\u003e\n\n \u003cli\u003eIf \u003ccode\u003eformat\u003c/code\u003e is \u003ccode\u003e\"java.properties\"\u003c/code\u003e,\n {@link #toResourceName(String, String) toResourceName(bundlename,\n \"properties\")} is called to get the resource name.\n If \u003ccode\u003ereload\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, {@link\n ClassLoader#getResource(String) load.getResource} is called\n to get a {@link URL} for creating a {@link\n URLConnection}. This \u003ccode\u003eURLConnection\u003c/code\u003e is used to\n {@linkplain URLConnection#setUseCaches(boolean) disable the\n caches} of the underlying resource loading layers,\n and to {@linkplain URLConnection#getInputStream() get an\n \u003ccode\u003eInputStream\u003c/code\u003e}.\n Otherwise, {@link ClassLoader#getResourceAsStream(String)\n loader.getResourceAsStream} is called to get an {@link\n InputStream}. Then, a {@link\n PropertyResourceBundle} is constructed with the\n \u003ccode\u003eInputStream\u003c/code\u003e.\u003c/li\u003e\n\n \u003cli\u003eIf \u003ccode\u003eformat\u003c/code\u003e is neither \u003ccode\u003e\"java.class\"\u003c/code\u003e\n nor \u003ccode\u003e\"java.properties\"\u003c/code\u003e, an\n \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown.\u003c/li\u003e\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, boolean)","flatSignature":"(String, Locale, String, ClassLoader, boolean)","returnType":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}},{"name":"reload","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeToLive","comment":"Returns the time-to-live (TTL) value for resource bundles that\n are loaded under this\n \u003ccode\u003eResourceBundle.Control\u003c/code\u003e. Positive time-to-live values\n specify the number of milliseconds a bundle can remain in the\n cache without being validated against the source data from which\n it was constructed. The value 0 indicates that a bundle must be\n validated each time it is retrieved from the cache. {@link\n #TTL_DONT_CACHE} specifies that loaded resource bundles are not\n put in the cache. {@link #TTL_NO_EXPIRATION_CONTROL} specifies\n that loaded resource bundles are put in the cache with no\n expiration control.\n\n \u003cp\u003eThe expiration affects only the bundle loading process by the\n \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method.  That is,\n if the factory method finds a resource bundle in the cache that\n has expired, the factory method calls the {@link\n #needsReload(String, Locale, String, ClassLoader, ResourceBundle,\n long) needsReload} method to determine whether the resource\n bundle needs to be reloaded. If \u003ccode\u003eneedsReload\u003c/code\u003e returns\n \u003ccode\u003etrue\u003c/code\u003e, the cached resource bundle instance is removed\n from the cache. Otherwise, the instance stays in the cache,\n updated with the new TTL value returned by this method.\n\n \u003cp\u003eAll cached resource bundles are subject to removal from the\n cache due to memory constraints of the runtime environment.\n Returning a large positive value doesn\u0027t mean to lock loaded\n resource bundles in the cache.\n\n \u003cp\u003eThe default implementation returns {@link #TTL_NO_EXPIRATION_CONTROL}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale)","flatSignature":"(String, Locale)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"needsReload","comment":"Determines if the expired \u003ccode\u003ebundle\u003c/code\u003e in the cache needs\n to be reloaded based on the loading time given by\n \u003ccode\u003eloadTime\u003c/code\u003e or some other criteria. The method returns\n \u003ccode\u003etrue\u003c/code\u003e if reloading is required; \u003ccode\u003efalse\u003c/code\u003e\n otherwise. \u003ccode\u003eloadTime\u003c/code\u003e is a millisecond offset since\n the \u003ca href\u003d\"Calendar.html#Epoch\"\u003e \u003ccode\u003eCalendar\u003c/code\u003e\n Epoch\u003c/a\u003e.\n\n The calling \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e factory method\n calls this method on the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e\n instance used for its current invocation, not on the instance\n used in the invocation that originally loaded the resource\n bundle.\n\n \u003cp\u003eThe default implementation compares \u003ccode\u003eloadTime\u003c/code\u003e and\n the last modified time of the source data of the resource\n bundle. If it\u0027s determined that the source data has been modified\n since \u003ccode\u003eloadTime\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e is\n returned. Otherwise, \u003ccode\u003efalse\u003c/code\u003e is returned. This\n implementation assumes that the given \u003ccode\u003eformat\u003c/code\u003e is the\n same string as its file suffix if it\u0027s not one of the default\n formats, \u003ccode\u003e\"java.class\"\u003c/code\u003e or\n \u003ccode\u003e\"java.properties\"\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, java.util.ResourceBundle, long)","flatSignature":"(String, Locale, String, ClassLoader, ResourceBundle, long)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}},{"name":"bundle","type":{"isPrimitive":false,"simpleName":"ResourceBundle","qualifiedName":"java.util.ResourceBundle","dimension":"","elementType":{}}},{"name":"loadTime","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toBundleName","comment":"Converts the given \u003ccode\u003ebaseName\u003c/code\u003e and \u003ccode\u003elocale\u003c/code\u003e\n to the bundle name. This method is called from the default\n implementation of the {@link #newBundle(String, Locale, String,\n ClassLoader, boolean) newBundle} and {@link #needsReload(String,\n Locale, String, ClassLoader, ResourceBundle, long) needsReload}\n methods.\n\n \u003cp\u003eThis implementation returns the following value:\n \u003cpre\u003e\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n \u003c/pre\u003e\n where \u003ccode\u003elanguage\u003c/code\u003e, \u003ccode\u003escript\u003c/code\u003e, \u003ccode\u003ecountry\u003c/code\u003e,\n and \u003ccode\u003evariant\u003c/code\u003e are the language, script, country, and variant\n values of \u003ccode\u003elocale\u003c/code\u003e, respectively. Final component values that\n are empty Strings are omitted along with the preceding \u0027_\u0027.  When the\n script is empty, the script value is omitted along with the preceding \u0027_\u0027.\n If all of the values are empty strings, then \u003ccode\u003ebaseName\u003c/code\u003e\n is returned.\n\n \u003cp\u003eFor example, if \u003ccode\u003ebaseName\u003c/code\u003e is\n \u003ccode\u003e\"baseName\"\u003c/code\u003e and \u003ccode\u003elocale\u003c/code\u003e is\n \u003ccode\u003eLocale(\"ja\",\u0026nbsp;\"\",\u0026nbsp;\"XX\")\u003c/code\u003e, then\n \u003ccode\u003e\"baseName_ja_\u0026thinsp;_XX\"\u003c/code\u003e is returned. If the given\n locale is \u003ccode\u003eLocale(\"en\")\u003c/code\u003e, then\n \u003ccode\u003e\"baseName_en\"\u003c/code\u003e is returned.\n\n \u003cp\u003eOverriding this method allows applications to use different\n conventions in the organization and packaging of localized\n resources.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.util.Locale)","flatSignature":"(String, Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"baseName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toResourceName","comment":"Converts the given \u003ccode\u003ebundleName\u003c/code\u003e to the form required\n by the {@link ClassLoader#getResource ClassLoader.getResource}\n method by replacing all occurrences of \u003ccode\u003e\u0027.\u0027\u003c/code\u003e in\n \u003ccode\u003ebundleName\u003c/code\u003e with \u003ccode\u003e\u0027/\u0027\u003c/code\u003e and appending a\n \u003ccode\u003e\u0027.\u0027\u003c/code\u003e and the given file \u003ccode\u003esuffix\u003c/code\u003e. For\n example, if \u003ccode\u003ebundleName\u003c/code\u003e is\n \u003ccode\u003e\"foo.bar.MyResources_ja_JP\"\u003c/code\u003e and \u003ccode\u003esuffix\u003c/code\u003e\n is \u003ccode\u003e\"properties\"\u003c/code\u003e, then\n \u003ccode\u003e\"foo/bar/MyResources_ja_JP.properties\"\u003c/code\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"bundleName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"suffix","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}