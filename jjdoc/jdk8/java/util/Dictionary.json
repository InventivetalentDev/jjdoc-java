{"name":"Dictionary","comment":"The \u003ccode\u003eDictionary\u003c/code\u003e class is the abstract parent of any\n class, such as \u003ccode\u003eHashtable\u003c/code\u003e, which maps keys to values.\n Every key and every value is an object. In any one \u003ctt\u003eDictionary\u003c/tt\u003e\n object, every key is associated with at most one value. Given a\n \u003ctt\u003eDictionary\u003c/tt\u003e and a key, the associated element can be looked up.\n Any non-\u003ccode\u003enull\u003c/code\u003e object can be used as a key and as a value.\n \u003cp\u003e\n As a rule, the \u003ccode\u003eequals\u003c/code\u003e method should be used by\n implementations of this class to decide if two keys are the same.\n \u003cp\u003e\n \u003cstrong\u003eNOTE: This class is obsolete.  New implementations should\n implement the Map interface, rather than extending this class.\u003c/strong\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Dictionary","qualifiedName":"java.util.Dictionary","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Dictionary","comment":"Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"size","comment":"Returns the number of entries (distinct keys) in this dictionary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Tests if this dictionary maps no keys to value. The general contract\n for the \u003ctt\u003eisEmpty\u003c/tt\u003e method is that the result is true if and only\n if this dictionary contains no entries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keys","comment":"Returns an enumeration of the keys in this dictionary. The general\n contract for the keys method is that an \u003ctt\u003eEnumeration\u003c/tt\u003e object\n is returned that will generate all the keys for which this dictionary\n contains entries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"elements","comment":"Returns an enumeration of the values in this dictionary. The general\n contract for the \u003ctt\u003eelements\u003c/tt\u003e method is that an\n \u003ctt\u003eEnumeration\u003c/tt\u003e is returned that will generate all the elements\n contained in entries in this dictionary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the key is mapped in this dictionary.\n The general contract for the \u003ctt\u003eisEmpty\u003c/tt\u003e method is that if this\n dictionary contains an entry for the specified key, the associated\n value is returned; otherwise, \u003ctt\u003enull\u003c/tt\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Maps the specified \u003ccode\u003ekey\u003c/code\u003e to the specified\n \u003ccode\u003evalue\u003c/code\u003e in this dictionary. Neither the key nor the\n value can be \u003ccode\u003enull\u003c/code\u003e.\n \u003cp\u003e\n If this dictionary already contains an entry for the specified\n \u003ctt\u003ekey\u003c/tt\u003e, the value already in this dictionary for that\n \u003ctt\u003ekey\u003c/tt\u003e is returned, after modifying the entry to contain the\n  new element. \u003cp\u003eIf this dictionary does not already have an entry\n  for the specified \u003ctt\u003ekey\u003c/tt\u003e, an entry is created for the\n  specified \u003ctt\u003ekey\u003c/tt\u003e and \u003ctt\u003evalue\u003c/tt\u003e, and \u003ctt\u003enull\u003c/tt\u003e is\n  returned.\n \u003cp\u003e\n The \u003ccode\u003evalue\u003c/code\u003e can be retrieved by calling the\n \u003ccode\u003eget\u003c/code\u003e method with a \u003ccode\u003ekey\u003c/code\u003e that is equal to\n the original \u003ccode\u003ekey\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the \u003ccode\u003ekey\u003c/code\u003e (and its corresponding\n \u003ccode\u003evalue\u003c/code\u003e) from this dictionary. This method does nothing\n if the \u003ccode\u003ekey\u003c/code\u003e is not in this dictionary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"subClasses":["java.util.Hashtable"],"enumConstants":[]}