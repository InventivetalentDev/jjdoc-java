{"name":"GregorianCalendar","comment":"\u003ccode\u003eGregorianCalendar\u003c/code\u003e is a concrete subclass of\n \u003ccode\u003eCalendar\u003c/code\u003e and provides the standard calendar system\n used by most of the world.\n\n \u003cp\u003e \u003ccode\u003eGregorianCalendar\u003c/code\u003e is a hybrid calendar that\n supports both the Julian and Gregorian calendar systems with the\n support of a single discontinuity, which corresponds by default to\n the Gregorian date when the Gregorian calendar was instituted\n (October 15, 1582 in some countries, later in others).  The cutover\n date may be changed by the caller by calling {@link\n #setGregorianChange(Date) setGregorianChange()}.\n\n \u003cp\u003e\n Historically, in those countries which adopted the Gregorian calendar first,\n October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models\n this correctly.  Before the Gregorian cutover, \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n implements the Julian calendar.  The only difference between the Gregorian\n and the Julian calendar is the leap year rule. The Julian calendar specifies\n leap years every four years, whereas the Gregorian calendar omits century\n years which are not divisible by 400.\n\n \u003cp\u003e\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e implements \u003cem\u003eproleptic\u003c/em\u003e Gregorian and\n Julian calendars. That is, dates are computed by extrapolating the current\n rules indefinitely far backward and forward in time. As a result,\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e may be used for all years to generate\n meaningful and consistent results. However, dates obtained using\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e are historically accurate only from March 1, 4\n AD onward, when modern Julian calendar rules were adopted.  Before this date,\n leap year rules were applied irregularly, and before 45 BC the Julian\n calendar did not even exist.\n\n \u003cp\u003e\n Prior to the institution of the Gregorian calendar, New Year\u0027s Day was\n March 25. To avoid confusion, this calendar always uses January 1. A manual\n adjustment may be made if desired for dates that are prior to the Gregorian\n changeover and which fall between January 1 and March 24.\n\n \u003ch3\u003e\u003ca name\u003d\"week_and_year\"\u003eWeek Of Year and Week Year\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003eValues calculated for the {@link Calendar#WEEK_OF_YEAR\n WEEK_OF_YEAR} field range from 1 to 53. The first week of a\n calendar year is the earliest seven day period starting on {@link\n Calendar#getFirstDayOfWeek() getFirstDayOfWeek()} that contains at\n least {@link Calendar#getMinimalDaysInFirstWeek()\n getMinimalDaysInFirstWeek()} days from that year. It thus depends\n on the values of {@code getMinimalDaysInFirstWeek()}, {@code\n getFirstDayOfWeek()}, and the day of the week of January 1. Weeks\n between week 1 of one year and week 1 of the following year\n (exclusive) are numbered sequentially from 2 to 52 or 53 (except\n for year(s) involved in the Julian-Gregorian transition).\n\n \u003cp\u003eThe {@code getFirstDayOfWeek()} and {@code\n getMinimalDaysInFirstWeek()} values are initialized using\n locale-dependent resources when constructing a {@code\n GregorianCalendar}. \u003ca name\u003d\"iso8601_compatible_setting\"\u003eThe week\n determination is compatible\u003c/a\u003e with the ISO 8601 standard when {@code\n getFirstDayOfWeek()} is {@code MONDAY} and {@code\n getMinimalDaysInFirstWeek()} is 4, which values are used in locales\n where the standard is preferred. These values can explicitly be set by\n calling {@link Calendar#setFirstDayOfWeek(int) setFirstDayOfWeek()} and\n {@link Calendar#setMinimalDaysInFirstWeek(int)\n setMinimalDaysInFirstWeek()}.\n\n \u003cp\u003eA \u003ca name\u003d\"week_year\"\u003e\u003cem\u003eweek year\u003c/em\u003e\u003c/a\u003e is in sync with a\n {@code WEEK_OF_YEAR} cycle. All weeks between the first and last\n weeks (inclusive) have the same \u003cem\u003eweek year\u003c/em\u003e value.\n Therefore, the first and last days of a week year may have\n different calendar year values.\n\n \u003cp\u003eFor example, January 1, 1998 is a Thursday. If {@code\n getFirstDayOfWeek()} is {@code MONDAY} and {@code\n getMinimalDaysInFirstWeek()} is 4 (ISO 8601 standard compatible\n setting), then week 1 of 1998 starts on December 29, 1997, and ends\n on January 4, 1998. The week year is 1998 for the last three days\n of calendar year 1997. If, however, {@code getFirstDayOfWeek()} is\n {@code SUNDAY}, then week 1 of 1998 starts on January 4, 1998, and\n ends on January 10, 1998; the first three days of 1998 then are\n part of week 53 of 1997 and their week year is 1997.\n\n \u003ch4\u003eWeek Of Month\u003c/h4\u003e\n\n \u003cp\u003eValues calculated for the \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e field range from 0\n to 6.  Week 1 of a month (the days with \u003ccode\u003eWEEK_OF_MONTH \u003d\n 1\u003c/code\u003e) is the earliest set of at least\n \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e contiguous days in that month,\n ending on the day before \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e.  Unlike\n week 1 of a year, week 1 of a month may be shorter than 7 days, need\n not start on \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e, and will not include days of\n the previous month.  Days of a month before week 1 have a\n \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e of 0.\n\n \u003cp\u003eFor example, if \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e is \u003ccode\u003eSUNDAY\u003c/code\u003e\n and \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e is 4, then the first week of\n January 1998 is Sunday, January 4 through Saturday, January 10.  These days\n have a \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e of 1.  Thursday, January 1 through\n Saturday, January 3 have a \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e of 0.  If\n \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e is changed to 3, then January 1\n through January 3 have a \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e of 1.\n\n \u003ch4\u003eDefault Fields Values\u003c/h4\u003e\n\n \u003cp\u003eThe \u003ccode\u003eclear\u003c/code\u003e method sets calendar field(s)\n undefined. \u003ccode\u003eGregorianCalendar\u003c/code\u003e uses the following\n default value for each calendar field if its value is undefined.\n\n \u003ctable cellpadding\u003d\"0\" cellspacing\u003d\"3\" border\u003d\"0\"\n        summary\u003d\"GregorianCalendar default field values\"\n        style\u003d\"text-align: left; width: 66%;\"\u003e\n   \u003ctbody\u003e\n     \u003ctr\u003e\n       \u003cth style\u003d\"vertical-align: top; background-color: rgb(204, 204, 255);\n           text-align: center;\"\u003eField\u003cbr\u003e\n       \u003c/th\u003e\n       \u003cth style\u003d\"vertical-align: top; background-color: rgb(204, 204, 255);\n           text-align: center;\"\u003eDefault Value\u003cbr\u003e\n       \u003c/th\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003eERA\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003eAD\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: middle; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003eYEAR\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: middle; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003e1970\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003eMONTH\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003eJANUARY\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: top; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003eDAY_OF_MONTH\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: top; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003e1\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003eDAY_OF_WEEK\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003ethe first day of week\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: top; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003eWEEK_OF_MONTH\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: top; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003e0\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: top;\"\u003e\n              \u003ccode\u003eDAY_OF_WEEK_IN_MONTH\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: top;\"\u003e\n              \u003ccode\u003e1\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: middle; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003eAM_PM\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: middle; background-color: rgb(238, 238, 255);\"\u003e\n              \u003ccode\u003eAM\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n     \u003ctr\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003eHOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n       \u003ctd style\u003d\"vertical-align: middle;\"\u003e\n              \u003ccode\u003e0\u003cbr\u003e\u003c/code\u003e\n       \u003c/td\u003e\n     \u003c/tr\u003e\n   \u003c/tbody\u003e\n \u003c/table\u003e\n \u003cbr\u003eDefault values are not applicable for the fields not listed above.\n\n \u003cp\u003e\n \u003cstrong\u003eExample:\u003c/strong\u003e\n \u003cblockquote\u003e\n \u003cpre\u003e\n // get the supported ids for GMT-08:00 (Pacific Standard Time)\n String[] ids \u003d TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);\n // if no ids were returned, something is wrong. get out.\n if (ids.length \u003d\u003d 0)\n     System.exit(0);\n\n  // begin output\n System.out.println(\"Current Time\");\n\n // create a Pacific Standard Time time zone\n SimpleTimeZone pdt \u003d new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);\n\n // set up rules for Daylight Saving Time\n pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n\n // create a GregorianCalendar with the Pacific Daylight time zone\n // and the current date and time\n Calendar calendar \u003d new GregorianCalendar(pdt);\n Date trialTime \u003d new Date();\n calendar.setTime(trialTime);\n\n // print out a bunch of interesting things\n System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));\n System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));\n System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));\n System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));\n System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));\n System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));\n System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));\n System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));\n System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));\n System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"\n                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));\n System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));\n System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));\n System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));\n System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));\n System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));\n System.out.println(\"ZONE_OFFSET: \"\n                    + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));\n System.out.println(\"DST_OFFSET: \"\n                    + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));\n\n System.out.println(\"Current Time, with hour reset to 3\");\n calendar.clear(Calendar.HOUR_OF_DAY); // so doesn\u0027t override\n calendar.set(Calendar.HOUR, 3);\n System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));\n System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));\n System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));\n System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));\n System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));\n System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));\n System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));\n System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));\n System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));\n System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"\n                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));\n System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));\n System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));\n System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));\n System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));\n System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));\n System.out.println(\"ZONE_OFFSET: \"\n        + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours\n System.out.println(\"DST_OFFSET: \"\n        + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours\n \u003c/pre\u003e\n \u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"GregorianCalendar","qualifiedName":"java.util.GregorianCalendar","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.Calendar","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"GregorianCalendar","comment":"Constructs a default \u003ccode\u003eGregorianCalendar\u003c/code\u003e using the current time\n in the default time zone with the default\n {@link Locale.Category#FORMAT FORMAT} locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"GregorianCalendar","comment":"Constructs a \u003ccode\u003eGregorianCalendar\u003c/code\u003e based on the current time\n in the given time zone with the default\n {@link Locale.Category#FORMAT FORMAT} locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"GregorianCalendar","comment":"Constructs a \u003ccode\u003eGregorianCalendar\u003c/code\u003e based on the current time\n in the default time zone with the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","parameters":[{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"GregorianCalendar","comment":"Constructs a \u003ccode\u003eGregorianCalendar\u003c/code\u003e based on the current time\n in the given time zone with the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.TimeZone, java.util.Locale)","flatSignature":"(TimeZone, Locale)","parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}},{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"GregorianCalendar","comment":"Constructs a \u003ccode\u003eGregorianCalendar\u003c/code\u003e with the given date set\n in the default time zone with the default locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"GregorianCalendar","comment":"Constructs a \u003ccode\u003eGregorianCalendar\u003c/code\u003e with the given date\n and time set for the default time zone with the default locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, int, int, int)","flatSignature":"(int, int, int, int, int)","parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hourOfDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"GregorianCalendar","comment":"Constructs a GregorianCalendar with the given date\n and time set for the default time zone with the default locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, int, int, int, int)","flatSignature":"(int, int, int, int, int, int)","parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"month","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfMonth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"hourOfDay","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"minute","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"second","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"BC","comment":"Value of the \u003ccode\u003eERA\u003c/code\u003e field indicating\n the period before the common era (before Christ), also known as BCE.\n The sequence of years at the transition from \u003ccode\u003eBC\u003c/code\u003e to \u003ccode\u003eAD\u003c/code\u003e is\n ..., 2 BC, 1 BC, 1 AD, 2 AD,...","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"AD","comment":"Value of the \u003ccode\u003eERA\u003c/code\u003e field indicating\n the common era (Anno Domini), also known as CE.\n The sequence of years at the transition from \u003ccode\u003eBC\u003c/code\u003e to \u003ccode\u003eAD\u003c/code\u003e is\n ..., 2 BC, 1 BC, 1 AD, 2 AD,...","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"}],"methods":[{"name":"setGregorianChange","comment":"Sets the \u003ccode\u003eGregorianCalendar\u003c/code\u003e change date. This is the point when the switch\n from Julian dates to Gregorian dates occurred. Default is October 15,\n 1582 (Gregorian). Previous to this, dates will be in the Julian calendar.\n \u003cp\u003e\n To obtain a pure Julian calendar, set the change date to\n \u003ccode\u003eDate(Long.MAX_VALUE)\u003c/code\u003e.  To obtain a pure Gregorian calendar,\n set the change date to \u003ccode\u003eDate(Long.MIN_VALUE)\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getGregorianChange","comment":"Gets the Gregorian Calendar change date.  This is the point when the\n switch from Julian dates to Gregorian dates occurred. Default is\n October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian\n calendar.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLeapYear","comment":"Determines if the given year is a leap year. Returns \u003ccode\u003etrue\u003c/code\u003e if\n the given year is a leap year. To specify BC year numbers,\n \u003ccode\u003e1 - year number\u003c/code\u003e must be given. For example, year BC 4 is\n specified as -3.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"year","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCalendarType","comment":"Returns {@code \"gregory\"} as the calendar type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this \u003ccode\u003eGregorianCalendar\u003c/code\u003e to the specified\n \u003ccode\u003eObject\u003c/code\u003e. The result is \u003ccode\u003etrue\u003c/code\u003e if and\n only if the argument is a \u003ccode\u003eGregorianCalendar\u003c/code\u003e object\n that represents the same time value (millisecond offset from\n the \u003ca href\u003d\"Calendar.html#Epoch\"\u003eEpoch\u003c/a\u003e) under the same\n \u003ccode\u003eCalendar\u003c/code\u003e parameters and Gregorian change date as\n this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Generates the hash code for this \u003ccode\u003eGregorianCalendar\u003c/code\u003e object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"add","comment":"Adds the specified (signed) amount of time to the given calendar field,\n based on the calendar\u0027s rules.\n\n \u003cp\u003e\u003cem\u003eAdd rule 1\u003c/em\u003e. The value of \u003ccode\u003efield\u003c/code\u003e\n after the call minus the value of \u003ccode\u003efield\u003c/code\u003e before the\n call is \u003ccode\u003eamount\u003c/code\u003e, modulo any overflow that has occurred in\n \u003ccode\u003efield\u003c/code\u003e. Overflow occurs when a field value exceeds its\n range and, as a result, the next larger field is incremented or\n decremented and the field value is adjusted back into its range.\u003c/p\u003e\n\n \u003cp\u003e\u003cem\u003eAdd rule 2\u003c/em\u003e. If a smaller field is expected to be\n invariant, but it is impossible for it to be equal to its\n prior value because of changes in its minimum or maximum after\n \u003ccode\u003efield\u003c/code\u003e is changed, then its value is adjusted to be as close\n as possible to its expected value. A smaller field represents a\n smaller unit of time. \u003ccode\u003eHOUR\u003c/code\u003e is a smaller field than\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e. No adjustment is made to smaller fields\n that are not expected to be invariant. The calendar system\n determines what fields are expected to be invariant.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"amount","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"roll","comment":"Adds or subtracts (up/down) a single unit of time on the given time\n field without changing larger fields.\n \u003cp\u003e\n \u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n originally set to December 31, 1999. Calling {@link #roll(int,boolean) roll(Calendar.MONTH, true)}\n sets the calendar to January 31, 1999.  The \u003ccode\u003eYEAR\u003c/code\u003e field is unchanged\n because it is a larger field than \u003ccode\u003eMONTH\u003c/code\u003e.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, boolean)","flatSignature":"(int, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"up","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"roll","comment":"Adds a signed amount to the specified calendar field without changing larger fields.\n A negative roll amount means to subtract from field without changing\n larger fields. If the specified amount is 0, this method performs nothing.\n\n \u003cp\u003eThis method calls {@link #complete()} before adding the\n amount so that all the calendar fields are normalized. If there\n is any calendar field having an out-of-range value in non-lenient mode, then an\n \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown.\n\n \u003cp\u003e\n \u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n originally set to August 31, 1999. Calling \u003ccode\u003eroll(Calendar.MONTH,\n 8)\u003c/code\u003e sets the calendar to April 30, \u003cstrong\u003e1999\u003c/strong\u003e. Using a\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e, the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field cannot\n be 31 in the month April. \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e is set to the closest possible\n value, 30. The \u003ccode\u003eYEAR\u003c/code\u003e field maintains the value of 1999 because it\n is a larger field than \u003ccode\u003eMONTH\u003c/code\u003e.\n \u003cp\u003e\n \u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e\n originally set to Sunday June 6, 1999. Calling\n \u003ccode\u003eroll(Calendar.WEEK_OF_MONTH, -1)\u003c/code\u003e sets the calendar to\n Tuesday June 1, 1999, whereas calling\n \u003ccode\u003eadd(Calendar.WEEK_OF_MONTH, -1)\u003c/code\u003e sets the calendar to\n Sunday May 30, 1999. This is because the roll rule imposes an\n additional constraint: The \u003ccode\u003eMONTH\u003c/code\u003e must not change when the\n \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e is rolled. Taken together with add rule 1,\n the resultant date must be between Tuesday June 1 and Saturday June\n 5. According to add rule 2, the \u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e, an invariant\n when changing the \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e, is set to Tuesday, the\n closest possible value to Sunday (where Sunday is the first day of the\n week).\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"amount","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMinimum","comment":"Returns the minimum value for the given calendar field of this\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e instance. The minimum value is\n defined as the smallest value returned by the {@link\n Calendar#get(int) get} method for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMaximum","comment":"Returns the maximum value for the given calendar field of this\n \u003ccode\u003eGregorianCalendar\u003c/code\u003e instance. The maximum value is\n defined as the largest value returned by the {@link\n Calendar#get(int) get} method for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getGreatestMinimum","comment":"Returns the highest minimum value for the given calendar field\n of this \u003ccode\u003eGregorianCalendar\u003c/code\u003e instance. The highest\n minimum value is defined as the largest value returned by\n {@link #getActualMinimum(int)} for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLeastMaximum","comment":"Returns the lowest maximum value for the given calendar field\n of this \u003ccode\u003eGregorianCalendar\u003c/code\u003e instance. The lowest\n maximum value is defined as the smallest value returned by\n {@link #getActualMaximum(int)} for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getActualMinimum","comment":"Returns the minimum value that this calendar field could have,\n taking into consideration the given time value and the current\n values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.\n\n \u003cp\u003eFor example, if the Gregorian change date is January 10,\n 1970 and the date of this \u003ccode\u003eGregorianCalendar\u003c/code\u003e is\n January 20, 1970, the actual minimum value of the\n \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field is 10 because the previous date\n of January 10, 1970 is December 27, 1996 (in the Julian\n calendar). Therefore, December 28, 1969 to January 9, 1970\n don\u0027t exist.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getActualMaximum","comment":"Returns the maximum value that this calendar field could have,\n taking into consideration the given time value and the current\n values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.\n For example, if the date of this instance is February 1, 2004,\n the actual maximum value of the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e field\n is 29 because 2004 is a leap year, and if the date of this\n instance is February 1, 2005, it\u0027s 28.\n\n \u003cp\u003eThis method calculates the maximum value of {@link\n Calendar#WEEK_OF_YEAR WEEK_OF_YEAR} based on the {@link\n Calendar#YEAR YEAR} (calendar year) value, not the \u003ca\n href\u003d\"#week_year\"\u003eweek year\u003c/a\u003e. Call {@link\n #getWeeksInWeekYear()} to get the maximum value of {@code\n WEEK_OF_YEAR} in the week year of this {@code GregorianCalendar}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"field","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTimeZone","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTimeZone","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isWeekDateSupported","comment":"Returns {@code true} indicating this {@code GregorianCalendar}\n supports week dates.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWeekYear","comment":"Returns the \u003ca href\u003d\"#week_year\"\u003eweek year\u003c/a\u003e represented by this\n {@code GregorianCalendar}. The dates in the weeks between 1 and the\n maximum week number of the week year have the same week year value\n that may be one year before or after the {@link Calendar#YEAR YEAR}\n (calendar year) value.\n\n \u003cp\u003eThis method calls {@link Calendar#complete()} before\n calculating the week year.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setWeekDate","comment":"Sets this {@code GregorianCalendar} to the date given by the\n date specifiers - \u003ca href\u003d\"#week_year\"\u003e{@code weekYear}\u003c/a\u003e,\n {@code weekOfYear}, and {@code dayOfWeek}. {@code weekOfYear}\n follows the \u003ca href\u003d\"#week_and_year\"\u003e{@code WEEK_OF_YEAR}\n numbering\u003c/a\u003e.  The {@code dayOfWeek} value must be one of the\n {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} values: {@link\n Calendar#SUNDAY SUNDAY} to {@link Calendar#SATURDAY SATURDAY}.\n\n \u003cp\u003eNote that the numeric day-of-week representation differs from\n the ISO 8601 standard, and that the {@code weekOfYear}\n numbering is compatible with the standard when {@code\n getFirstDayOfWeek()} is {@code MONDAY} and {@code\n getMinimalDaysInFirstWeek()} is 4.\n\n \u003cp\u003eUnlike the {@code set} method, all of the calendar fields\n and the instant of time value are calculated upon return.\n\n \u003cp\u003eIf {@code weekOfYear} is out of the valid week-of-year\n range in {@code weekYear}, the {@code weekYear}\n and {@code weekOfYear} values are adjusted in lenient\n mode, or an {@code IllegalArgumentException} is thrown in\n non-lenient mode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"weekYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"weekOfYear","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dayOfWeek","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getWeeksInWeekYear","comment":"Returns the number of weeks in the \u003ca href\u003d\"#week_year\"\u003eweek year\u003c/a\u003e\n represented by this {@code GregorianCalendar}.\n\n \u003cp\u003eFor example, if this {@code GregorianCalendar}\u0027s date is\n December 31, 2008 with \u003ca href\u003d\"#iso8601_compatible_setting\"\u003ethe ISO\n 8601 compatible setting\u003c/a\u003e, this method will return 53 for the\n period: December 29, 2008 to January 3, 2010 while {@link\n #getActualMaximum(int) getActualMaximum(WEEK_OF_YEAR)} will return\n 52 for the period: December 31, 2007 to December 28, 2008.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toZonedDateTime","comment":"Converts this object to a {@code ZonedDateTime} that represents\n the same point on the time-line as this {@code GregorianCalendar}.\n \u003cp\u003e\n Since this object supports a Julian-Gregorian cutover date and\n {@code ZonedDateTime} does not, it is possible that the resulting year,\n month and day will have different values.  The result will represent the\n correct date in the ISO calendar system, which will also be the same value\n for Modified Julian Days.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"from","comment":"Obtains an instance of {@code GregorianCalendar} with the default locale\n from a {@code ZonedDateTime} object.\n \u003cp\u003e\n Since {@code ZonedDateTime} does not support a Julian-Gregorian cutover\n date and uses ISO calendar system, the return GregorianCalendar is a pure\n Gregorian calendar and uses ISO 8601 standard for week definitions,\n which has {@code MONDAY} as the {@link Calendar#getFirstDayOfWeek()\n FirstDayOfWeek} and {@code 4} as the value of the\n {@link Calendar#getMinimalDaysInFirstWeek() MinimalDaysInFirstWeek}.\n \u003cp\u003e\n {@code ZoneDateTime} can store points on the time-line further in the\n future and further in the past than {@code GregorianCalendar}. In this\n scenario, this method will throw an {@code IllegalArgumentException}\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.time.ZonedDateTime)","flatSignature":"(ZonedDateTime)","returnType":{"isPrimitive":false,"simpleName":"GregorianCalendar","qualifiedName":"java.util.GregorianCalendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"zdt","type":{"isPrimitive":false,"simpleName":"ZonedDateTime","qualifiedName":"java.time.ZonedDateTime","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}