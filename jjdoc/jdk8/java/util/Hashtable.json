{"name":"Hashtable","comment":"This class implements a hash table, which maps keys to values. Any\n non-\u003ccode\u003enull\u003c/code\u003e object can be used as a key or as a value. \u003cp\u003e\n\n To successfully store and retrieve objects from a hashtable, the\n objects used as keys must implement the \u003ccode\u003ehashCode\u003c/code\u003e\n method and the \u003ccode\u003eequals\u003c/code\u003e method. \u003cp\u003e\n\n An instance of \u003ccode\u003eHashtable\u003c/code\u003e has two parameters that affect its\n performance: \u003ci\u003einitial capacity\u003c/i\u003e and \u003ci\u003eload factor\u003c/i\u003e.  The\n \u003ci\u003ecapacity\u003c/i\u003e is the number of \u003ci\u003ebuckets\u003c/i\u003e in the hash table, and the\n \u003ci\u003einitial capacity\u003c/i\u003e is simply the capacity at the time the hash table\n is created.  Note that the hash table is \u003ci\u003eopen\u003c/i\u003e: in the case of a \"hash\n collision\", a single bucket stores multiple entries, which must be searched\n sequentially.  The \u003ci\u003eload factor\u003c/i\u003e is a measure of how full the hash\n table is allowed to get before its capacity is automatically increased.\n The initial capacity and load factor parameters are merely hints to\n the implementation.  The exact details as to when and whether the rehash\n method is invoked are implementation-dependent.\u003cp\u003e\n\n Generally, the default load factor (.75) offers a good tradeoff between\n time and space costs.  Higher values decrease the space overhead but\n increase the time cost to look up an entry (which is reflected in most\n \u003ctt\u003eHashtable\u003c/tt\u003e operations, including \u003ctt\u003eget\u003c/tt\u003e and \u003ctt\u003eput\u003c/tt\u003e).\u003cp\u003e\n\n The initial capacity controls a tradeoff between wasted space and the\n need for \u003ccode\u003erehash\u003c/code\u003e operations, which are time-consuming.\n No \u003ccode\u003erehash\u003c/code\u003e operations will \u003ci\u003eever\u003c/i\u003e occur if the initial\n capacity is greater than the maximum number of entries the\n \u003ctt\u003eHashtable\u003c/tt\u003e will contain divided by its load factor.  However,\n setting the initial capacity too high can waste space.\u003cp\u003e\n\n If many entries are to be made into a \u003ccode\u003eHashtable\u003c/code\u003e,\n creating it with a sufficiently large capacity may allow the\n entries to be inserted more efficiently than letting it perform\n automatic rehashing as needed to grow the table. \u003cp\u003e\n\n This example creates a hashtable of numbers. It uses the names of\n the numbers as keys:\n \u003cpre\u003e   {@code\n   Hashtable\u003cString, Integer\u003e numbers\n     \u003d new Hashtable\u003cString, Integer\u003e();\n   numbers.put(\"one\", 1);\n   numbers.put(\"two\", 2);\n   numbers.put(\"three\", 3);}\u003c/pre\u003e\n\n \u003cp\u003eTo retrieve a number, use the following code:\n \u003cpre\u003e   {@code\n   Integer n \u003d numbers.get(\"two\");\n   if (n !\u003d null) {\n     System.out.println(\"two \u003d \" + n);\n   }}\u003c/pre\u003e\n\n \u003cp\u003eThe iterators returned by the \u003ctt\u003eiterator\u003c/tt\u003e method of the collections\n returned by all of this class\u0027s \"collection view methods\" are\n \u003cem\u003efail-fast\u003c/em\u003e: if the Hashtable is structurally modified at any time\n after the iterator is created, in any way except through the iterator\u0027s own\n \u003ctt\u003eremove\u003c/tt\u003e method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n The Enumerations returned by Hashtable\u0027s keys and elements methods are\n \u003cem\u003enot\u003c/em\u003e fail-fast.\n\n \u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw \u003ctt\u003eConcurrentModificationException\u003c/tt\u003e on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: \u003ci\u003ethe fail-fast behavior of iterators\n should be used only to detect bugs.\u003c/i\u003e\n\n \u003cp\u003eAs of the Java 2 platform v1.2, this class was retrofitted to\n implement the {@link Map} interface, making it a member of the\n \u003ca href\u003d\"{@docRoot}/../technotes/guides/collections/index.html\"\u003e\n\n Java Collections Framework\u003c/a\u003e.  Unlike the new collection\n implementations, {@code Hashtable} is synchronized.  If a\n thread-safe implementation is not needed, it is recommended to use\n {@link HashMap} in place of {@code Hashtable}.  If a thread-safe\n highly-concurrent implementation is desired, then it is recommended\n to use {@link java.util.concurrent.ConcurrentHashMap} in place of\n {@code Hashtable}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Hashtable","qualifiedName":"java.util.Hashtable","dimension":"","elementType":{},"package":"java.util","superclass":"java.util.Dictionary","interfaces":["java.util.Map","java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Hashtable","comment":"Constructs a new, empty hashtable with the specified initial\n capacity and the specified load factor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, float)","flatSignature":"(int, float)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"loadFactor","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Hashtable","comment":"Constructs a new, empty hashtable with the specified initial capacity\n and default load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"initialCapacity","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Hashtable","comment":"Constructs a new, empty hashtable with a default initial capacity (11)\n and load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Hashtable","comment":"Constructs a new hashtable with the same mappings as the given\n Map.  The hashtable is created with an initial capacity sufficient to\n hold the mappings in the given Map and a default load factor (0.75).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","parameters":[{"name":"t","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"size","comment":"Returns the number of keys in this hashtable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Tests if this hashtable maps no keys to values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keys","comment":"Returns an enumeration of the keys in this hashtable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"elements","comment":"Returns an enumeration of the values in this hashtable.\n Use the Enumeration methods on the returned object to fetch the elements\n sequentially.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"contains","comment":"Tests if some key maps into the specified value in this hashtable.\n This operation is more expensive than the {@link #containsKey\n containsKey} method.\n\n \u003cp\u003eNote that this method is identical in functionality to\n {@link #containsValue containsValue}, (which is part of the\n {@link Map} interface in the collections framework).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsValue","comment":"Returns true if this hashtable maps one or more keys to this value.\n\n \u003cp\u003eNote that this method is identical in functionality to {@link\n #contains contains} (which predates the {@link Map} interface).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"containsKey","comment":"Tests if the specified object is a key in this hashtable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n \u003cp\u003eMore formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key.equals(k))},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"put","comment":"Maps the specified \u003ccode\u003ekey\u003c/code\u003e to the specified\n \u003ccode\u003evalue\u003c/code\u003e in this hashtable. Neither the key nor the\n value can be \u003ccode\u003enull\u003c/code\u003e. \u003cp\u003e\n\n The value can be retrieved by calling the \u003ccode\u003eget\u003c/code\u003e method\n with a key that is equal to the original key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the key (and its corresponding value) from this\n hashtable. This method does nothing if the key is not in the hashtable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putAll","comment":"Copies all of the mappings from the specified map to this hashtable.\n These mappings will replace any mappings that this hashtable had for any\n of the keys currently in the specified map.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Map\u003c? extends K, ? extends V\u003e)","flatSignature":"(Map\u003c? extends K, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"t","type":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Clears this hashtable so that it contains no keys.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"clone","comment":"Creates a shallow copy of this hashtable. All the structure of the\n hashtable itself is copied, but the keys and values are not cloned.\n This is a relatively expensive operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this \u003ctt\u003eHashtable\u003c/tt\u003e object\n in the form of a set of entries, enclosed in braces and separated\n by the ASCII characters \"\u003ctt\u003e,\u0026nbsp;\u003c/tt\u003e\" (comma and space). Each\n entry is rendered as the key, an equals sign \u003ctt\u003e\u003d\u003c/tt\u003e, and the\n associated element, where the \u003ctt\u003etoString\u003c/tt\u003e method is used to\n convert the key and element to strings.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"keySet","comment":"Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n \u003ctt\u003eIterator.remove\u003c/tt\u003e, \u003ctt\u003eSet.remove\u003c/tt\u003e,\n \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e, and \u003ctt\u003eclear\u003c/tt\u003e\n operations.  It does not support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e\n operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"entrySet","comment":"Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation, or through the\n \u003ctt\u003esetValue\u003c/tt\u003e operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e,\n \u003ctt\u003eSet.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e, \u003ctt\u003eretainAll\u003c/tt\u003e and\n \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not support the\n \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"values","comment":"Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator\u0027s own \u003ctt\u003eremove\u003c/tt\u003e operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the \u003ctt\u003eIterator.remove\u003c/tt\u003e,\n \u003ctt\u003eCollection.remove\u003c/tt\u003e, \u003ctt\u003eremoveAll\u003c/tt\u003e,\n \u003ctt\u003eretainAll\u003c/tt\u003e and \u003ctt\u003eclear\u003c/tt\u003e operations.  It does not\n support the \u003ctt\u003eadd\u003c/tt\u003e or \u003ctt\u003eaddAll\u003c/tt\u003e operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified Object with this Map for equality,\n as per the definition in the Map interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"o","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this Map as per the definition in the\n Map interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getOrDefault","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, V)","flatSignature":"(Object, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"defaultValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"forEach","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiConsumer\u003c? super K, ? super V\u003e)","flatSignature":"(BiConsumer\u003c? super K, ? super V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"action","type":{"isPrimitive":false,"simpleName":"BiConsumer","qualifiedName":"java.util.function.BiConsumer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"function","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putIfAbsent","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object)","flatSignature":"(Object, Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replace","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, V)","flatSignature":"(K, V, V)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"oldValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"newValue","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"replace","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V)","flatSignature":"(K, V)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}}],"typeParameters":[]},{"name":"computeIfAbsent","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.Function\u003c? super K, ? extends V\u003e)","flatSignature":"(K, Function\u003c? super K, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"mappingFunction","type":{"isPrimitive":false,"simpleName":"Function","qualifiedName":"java.util.function.Function","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"computeIfPresent","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(K, BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compute","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, java.util.function.BiFunction\u003c? super K, ? super V, ? extends V\u003e)","flatSignature":"(K, BiFunction\u003c? super K, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"merge","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(K, V, java.util.function.BiFunction\u003c? super V, ? super V, ? extends V\u003e)","flatSignature":"(K, V, BiFunction\u003c? super V, ? super V, ? extends V\u003e)","returnType":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"K","qualifiedName":"K","dimension":"","elementType":{},"typeVariable":{"name":"K","bounds":[]}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"V","qualifiedName":"V","dimension":"","elementType":{},"typeVariable":{"name":"V","bounds":[]}}},{"name":"remappingFunction","type":{"isPrimitive":false,"simpleName":"BiFunction","qualifiedName":"java.util.function.BiFunction","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"K","bounds":[]},{"name":"V","bounds":[]}],"subClasses":["java.util.Properties"],"enumConstants":[]}