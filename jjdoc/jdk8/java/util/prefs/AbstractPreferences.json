{"name":"AbstractPreferences","comment":"This class provides a skeletal implementation of the {@link Preferences}\n class, greatly easing the task of implementing it.\n\n \u003cp\u003e\u003cstrong\u003eThis class is for \u003ctt\u003ePreferences\u003c/tt\u003e implementers only.\n Normal users of the \u003ctt\u003ePreferences\u003c/tt\u003e facility should have no need to\n consult this documentation.  The {@link Preferences} documentation\n should suffice.\u003c/strong\u003e\n\n \u003cp\u003eImplementors must override the nine abstract service-provider interface\n (SPI) methods: {@link #getSpi(String)}, {@link #putSpi(String,String)},\n {@link #removeSpi(String)}, {@link #childSpi(String)}, {@link\n #removeNodeSpi()}, {@link #keysSpi()}, {@link #childrenNamesSpi()}, {@link\n #syncSpi()} and {@link #flushSpi()}.  All of the concrete methods specify\n precisely how they are implemented atop these SPI methods.  The implementor\n may, at his discretion, override one or more of the concrete methods if the\n default implementation is unsatisfactory for any reason, such as\n performance.\n\n \u003cp\u003eThe SPI methods fall into three groups concerning exception\n behavior. The \u003ctt\u003egetSpi\u003c/tt\u003e method should never throw exceptions, but it\n doesn\u0027t really matter, as any exception thrown by this method will be\n intercepted by {@link #get(String,String)}, which will return the specified\n default value to the caller.  The \u003ctt\u003eremoveNodeSpi, keysSpi,\n childrenNamesSpi, syncSpi\u003c/tt\u003e and \u003ctt\u003eflushSpi\u003c/tt\u003e methods are specified\n to throw {@link BackingStoreException}, and the implementation is required\n to throw this checked exception if it is unable to perform the operation.\n The exception propagates outward, causing the corresponding API method\n to fail.\n\n \u003cp\u003eThe remaining SPI methods {@link #putSpi(String,String)}, {@link\n #removeSpi(String)} and {@link #childSpi(String)} have more complicated\n exception behavior.  They are not specified to throw\n \u003ctt\u003eBackingStoreException\u003c/tt\u003e, as they can generally obey their contracts\n even if the backing store is unavailable.  This is true because they return\n no information and their effects are not required to become permanent until\n a subsequent call to {@link Preferences#flush()} or\n {@link Preferences#sync()}. Generally speaking, these SPI methods should not\n throw exceptions.  In some implementations, there may be circumstances\n under which these calls cannot even enqueue the requested operation for\n later processing.  Even under these circumstances it is generally better to\n simply ignore the invocation and return, rather than throwing an\n exception.  Under these circumstances, however, all subsequent invocations\n of \u003ctt\u003eflush()\u003c/tt\u003e and \u003ctt\u003esync\u003c/tt\u003e should return \u003ctt\u003efalse\u003c/tt\u003e, as\n returning \u003ctt\u003etrue\u003c/tt\u003e would imply that all previous operations had\n successfully been made permanent.\n\n \u003cp\u003eThere is one circumstance under which \u003ctt\u003eputSpi, removeSpi and\n childSpi\u003c/tt\u003e \u003ci\u003eshould\u003c/i\u003e throw an exception: if the caller lacks\n sufficient privileges on the underlying operating system to perform the\n requested operation.  This will, for instance, occur on most systems\n if a non-privileged user attempts to modify system preferences.\n (The required privileges will vary from implementation to\n implementation.  On some implementations, they are the right to modify the\n contents of some directory in the file system; on others they are the right\n to modify contents of some key in a registry.)  Under any of these\n circumstances, it would generally be undesirable to let the program\n continue executing as if these operations would become permanent at a later\n time.  While implementations are not required to throw an exception under\n these circumstances, they are encouraged to do so.  A {@link\n SecurityException} would be appropriate.\n\n \u003cp\u003eMost of the SPI methods require the implementation to read or write\n information at a preferences node.  The implementor should beware of the\n fact that another VM may have concurrently deleted this node from the\n backing store.  It is the implementation\u0027s responsibility to recreate the\n node if it has been deleted.\n\n \u003cp\u003eImplementation note: In Sun\u0027s default \u003ctt\u003ePreferences\u003c/tt\u003e\n implementations, the user\u0027s identity is inherited from the underlying\n operating system and does not change for the lifetime of the virtual\n machine.  It is recognized that server-side \u003ctt\u003ePreferences\u003c/tt\u003e\n implementations may have the user identity change from request to request,\n implicitly passed to \u003ctt\u003ePreferences\u003c/tt\u003e methods via the use of a\n static {@link ThreadLocal} instance.  Authors of such implementations are\n \u003ci\u003estrongly\u003c/i\u003e encouraged to determine the user at the time preferences\n are accessed (for example by the {@link #get(String,String)} or {@link\n #put(String,String)} method) rather than permanently associating a user\n with each \u003ctt\u003ePreferences\u003c/tt\u003e instance.  The latter behavior conflicts\n with normal \u003ctt\u003ePreferences\u003c/tt\u003e usage and would lead to great confusion.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AbstractPreferences","qualifiedName":"java.util.prefs.AbstractPreferences","dimension":"","elementType":{},"package":"java.util.prefs","superclass":"java.util.prefs.Preferences","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"put","comment":"Implements the \u003ctt\u003eput\u003c/tt\u003e method as per the specification in\n {@link Preferences#put(String,String)}.\n\n \u003cp\u003eThis implementation checks that the key and value are legal,\n obtains this preference node\u0027s lock, checks that the node\n has not been removed, invokes {@link #putSpi(String,String)}, and if\n there are any preference change listeners, enqueues a notification\n event for processing by the event dispatch thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Implements the \u003ctt\u003eget\u003c/tt\u003e method as per the specification in\n {@link Preferences#get(String,String)}.\n\n \u003cp\u003eThis implementation first checks to see if \u003ctt\u003ekey\u003c/tt\u003e is\n \u003ctt\u003enull\u003c/tt\u003e throwing a \u003ctt\u003eNullPointerException\u003c/tt\u003e if this is\n the case.  Then it obtains this preference node\u0027s lock,\n checks that the node has not been removed, invokes {@link\n #getSpi(String)}, and returns the result, unless the \u003ctt\u003egetSpi\u003c/tt\u003e\n invocation returns \u003ctt\u003enull\u003c/tt\u003e or throws an exception, in which case\n this invocation returns \u003ctt\u003edef\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remove","comment":"Implements the \u003ctt\u003eremove(String)\u003c/tt\u003e method as per the specification\n in {@link Preferences#remove(String)}.\n\n \u003cp\u003eThis implementation obtains this preference node\u0027s lock,\n checks that the node has not been removed, invokes\n {@link #removeSpi(String)} and if there are any preference\n change listeners, enqueues a notification event for processing by the\n event dispatch thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Implements the \u003ctt\u003eclear\u003c/tt\u003e method as per the specification in\n {@link Preferences#clear()}.\n\n \u003cp\u003eThis implementation obtains this preference node\u0027s lock,\n invokes {@link #keys()} to obtain an array of keys, and\n iterates over the array invoking {@link #remove(String)} on each key.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putInt","comment":"Implements the \u003ctt\u003eputInt\u003c/tt\u003e method as per the specification in\n {@link Preferences#putInt(String,int)}.\n\n \u003cp\u003eThis implementation translates \u003ctt\u003evalue\u003c/tt\u003e to a string with\n {@link Integer#toString(int)} and invokes {@link #put(String,String)}\n on the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInt","comment":"Implements the \u003ctt\u003egetInt\u003c/tt\u003e method as per the specification in\n {@link Preferences#getInt(String,int)}.\n\n \u003cp\u003eThis implementation invokes {@link #get(String,String) \u003ctt\u003eget(key,\n null)\u003c/tt\u003e}.  If the return value is non-null, the implementation\n attempts to translate it to an \u003ctt\u003eint\u003c/tt\u003e with\n {@link Integer#parseInt(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, \u003ctt\u003edef\u003c/tt\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putLong","comment":"Implements the \u003ctt\u003eputLong\u003c/tt\u003e method as per the specification in\n {@link Preferences#putLong(String,long)}.\n\n \u003cp\u003eThis implementation translates \u003ctt\u003evalue\u003c/tt\u003e to a string with\n {@link Long#toString(long)} and invokes {@link #put(String,String)}\n on the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, long)","flatSignature":"(String, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Implements the \u003ctt\u003egetLong\u003c/tt\u003e method as per the specification in\n {@link Preferences#getLong(String,long)}.\n\n \u003cp\u003eThis implementation invokes {@link #get(String,String) \u003ctt\u003eget(key,\n null)\u003c/tt\u003e}.  If the return value is non-null, the implementation\n attempts to translate it to a \u003ctt\u003elong\u003c/tt\u003e with\n {@link Long#parseLong(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, \u003ctt\u003edef\u003c/tt\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, long)","flatSignature":"(String, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putBoolean","comment":"Implements the \u003ctt\u003eputBoolean\u003c/tt\u003e method as per the specification in\n {@link Preferences#putBoolean(String,boolean)}.\n\n \u003cp\u003eThis implementation translates \u003ctt\u003evalue\u003c/tt\u003e to a string with\n {@link String#valueOf(boolean)} and invokes {@link #put(String,String)}\n on the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBoolean","comment":"Implements the \u003ctt\u003egetBoolean\u003c/tt\u003e method as per the specification in\n {@link Preferences#getBoolean(String,boolean)}.\n\n \u003cp\u003eThis implementation invokes {@link #get(String,String) \u003ctt\u003eget(key,\n null)\u003c/tt\u003e}.  If the return value is non-null, it is compared with\n \u003ctt\u003e\"true\"\u003c/tt\u003e using {@link String#equalsIgnoreCase(String)}.  If the\n comparison returns \u003ctt\u003etrue\u003c/tt\u003e, this invocation returns\n \u003ctt\u003etrue\u003c/tt\u003e.  Otherwise, the original return value is compared with\n \u003ctt\u003e\"false\"\u003c/tt\u003e, again using {@link String#equalsIgnoreCase(String)}.\n If the comparison returns \u003ctt\u003etrue\u003c/tt\u003e, this invocation returns\n \u003ctt\u003efalse\u003c/tt\u003e.  Otherwise, this invocation returns \u003ctt\u003edef\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putFloat","comment":"Implements the \u003ctt\u003eputFloat\u003c/tt\u003e method as per the specification in\n {@link Preferences#putFloat(String,float)}.\n\n \u003cp\u003eThis implementation translates \u003ctt\u003evalue\u003c/tt\u003e to a string with\n {@link Float#toString(float)} and invokes {@link #put(String,String)}\n on the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, float)","flatSignature":"(String, float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFloat","comment":"Implements the \u003ctt\u003egetFloat\u003c/tt\u003e method as per the specification in\n {@link Preferences#getFloat(String,float)}.\n\n \u003cp\u003eThis implementation invokes {@link #get(String,String) \u003ctt\u003eget(key,\n null)\u003c/tt\u003e}.  If the return value is non-null, the implementation\n attempts to translate it to an \u003ctt\u003efloat\u003c/tt\u003e with\n {@link Float#parseFloat(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, \u003ctt\u003edef\u003c/tt\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, float)","flatSignature":"(String, float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putDouble","comment":"Implements the \u003ctt\u003eputDouble\u003c/tt\u003e method as per the specification in\n {@link Preferences#putDouble(String,double)}.\n\n \u003cp\u003eThis implementation translates \u003ctt\u003evalue\u003c/tt\u003e to a string with\n {@link Double#toString(double)} and invokes {@link #put(String,String)}\n on the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, double)","flatSignature":"(String, double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDouble","comment":"Implements the \u003ctt\u003egetDouble\u003c/tt\u003e method as per the specification in\n {@link Preferences#getDouble(String,double)}.\n\n \u003cp\u003eThis implementation invokes {@link #get(String,String) \u003ctt\u003eget(key,\n null)\u003c/tt\u003e}.  If the return value is non-null, the implementation\n attempts to translate it to an \u003ctt\u003edouble\u003c/tt\u003e with\n {@link Double#parseDouble(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, \u003ctt\u003edef\u003c/tt\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, double)","flatSignature":"(String, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putByteArray","comment":"Implements the \u003ctt\u003eputByteArray\u003c/tt\u003e method as per the specification in\n {@link Preferences#putByteArray(String,byte[])}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[])","flatSignature":"(String, byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getByteArray","comment":"Implements the \u003ctt\u003egetByteArray\u003c/tt\u003e method as per the specification in\n {@link Preferences#getByteArray(String,byte[])}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[])","flatSignature":"(String, byte[])","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"keys","comment":"Implements the \u003ctt\u003ekeys\u003c/tt\u003e method as per the specification in\n {@link Preferences#keys()}.\n\n \u003cp\u003eThis implementation obtains this preference node\u0027s lock, checks that\n the node has not been removed and invokes {@link #keysSpi()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"childrenNames","comment":"Implements the \u003ctt\u003echildren\u003c/tt\u003e method as per the specification in\n {@link Preferences#childrenNames()}.\n\n \u003cp\u003eThis implementation obtains this preference node\u0027s lock, checks that\n the node has not been removed, constructs a \u003ctt\u003eTreeSet\u003c/tt\u003e initialized\n to the names of children already cached (the children in this node\u0027s\n \"child-cache\"), invokes {@link #childrenNamesSpi()}, and adds all of the\n returned child-names into the set.  The elements of the tree set are\n dumped into a \u003ctt\u003eString\u003c/tt\u003e array using the \u003ctt\u003etoArray\u003c/tt\u003e method,\n and this array is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parent","comment":"Implements the \u003ctt\u003eparent\u003c/tt\u003e method as per the specification in\n {@link Preferences#parent()}.\n\n \u003cp\u003eThis implementation obtains this preference node\u0027s lock, checks that\n the node has not been removed and returns the parent value that was\n passed to this node\u0027s constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"node","comment":"Implements the \u003ctt\u003enode\u003c/tt\u003e method as per the specification in\n {@link Preferences#node(String)}.\n\n \u003cp\u003eThis implementation obtains this preference node\u0027s lock and checks\n that the node has not been removed.  If \u003ctt\u003epath\u003c/tt\u003e is \u003ctt\u003e\"\"\u003c/tt\u003e,\n this node is returned; if \u003ctt\u003epath\u003c/tt\u003e is \u003ctt\u003e\"/\"\u003c/tt\u003e, this node\u0027s\n root is returned.  If the first character in \u003ctt\u003epath\u003c/tt\u003e is\n not \u003ctt\u003e\u0027/\u0027\u003c/tt\u003e, the implementation breaks \u003ctt\u003epath\u003c/tt\u003e into\n tokens and recursively traverses the path from this node to the\n named node, \"consuming\" a name and a slash from \u003ctt\u003epath\u003c/tt\u003e at\n each step of the traversal.  At each step, the current node is locked\n and the node\u0027s child-cache is checked for the named node.  If it is\n not found, the name is checked to make sure its length does not\n exceed \u003ctt\u003eMAX_NAME_LENGTH\u003c/tt\u003e.  Then the {@link #childSpi(String)}\n method is invoked, and the result stored in this node\u0027s child-cache.\n If the newly created \u003ctt\u003ePreferences\u003c/tt\u003e object\u0027s {@link #newNode}\n field is \u003ctt\u003etrue\u003c/tt\u003e and there are any node change listeners,\n a notification event is enqueued for processing by the event dispatch\n thread.\n\n \u003cp\u003eWhen there are no more tokens, the last value found in the\n child-cache or returned by \u003ctt\u003echildSpi\u003c/tt\u003e is returned by this\n method.  If during the traversal, two \u003ctt\u003e\"/\"\u003c/tt\u003e tokens occur\n consecutively, or the final token is \u003ctt\u003e\"/\"\u003c/tt\u003e (rather than a name),\n an appropriate \u003ctt\u003eIllegalArgumentException\u003c/tt\u003e is thrown.\n\n \u003cp\u003e If the first character of \u003ctt\u003epath\u003c/tt\u003e is \u003ctt\u003e\u0027/\u0027\u003c/tt\u003e\n (indicating an absolute path name) this preference node\u0027s\n lock is dropped prior to breaking \u003ctt\u003epath\u003c/tt\u003e into tokens, and\n this method recursively traverses the path starting from the root\n (rather than starting from this node).  The traversal is otherwise\n identical to the one described for relative path names.  Dropping\n the lock on this node prior to commencing the traversal at the root\n node is essential to avoid the possibility of deadlock, as per the\n {@link #lock locking invariant}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nodeExists","comment":"Implements the \u003ctt\u003enodeExists\u003c/tt\u003e method as per the specification in\n {@link Preferences#nodeExists(String)}.\n\n \u003cp\u003eThis implementation is very similar to {@link #node(String)},\n except that {@link #getChild(String)} is used instead of {@link\n #childSpi(String)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"path","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeNode","comment":"Implements the \u003ctt\u003eremoveNode()\u003c/tt\u003e method as per the specification in\n {@link Preferences#removeNode()}.\n\n \u003cp\u003eThis implementation checks to see that this node is the root; if so,\n it throws an appropriate exception.  Then, it locks this node\u0027s parent,\n and calls a recursive helper method that traverses the subtree rooted at\n this node.  The recursive method locks the node on which it was called,\n checks that it has not already been removed, and then ensures that all\n of its children are cached: The {@link #childrenNamesSpi()} method is\n invoked and each returned child name is checked for containment in the\n child-cache.  If a child is not already cached, the {@link\n #childSpi(String)} method is invoked to create a \u003ctt\u003ePreferences\u003c/tt\u003e\n instance for it, and this instance is put into the child-cache.  Then\n the helper method calls itself recursively on each node contained in its\n child-cache.  Next, it invokes {@link #removeNodeSpi()}, marks itself\n as removed, and removes itself from its parent\u0027s child-cache.  Finally,\n if there are any node change listeners, it enqueues a notification\n event for processing by the event dispatch thread.\n\n \u003cp\u003eNote that the helper method is always invoked with all ancestors up\n to the \"closest non-removed ancestor\" locked.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"name","comment":"Implements the \u003ctt\u003ename\u003c/tt\u003e method as per the specification in\n {@link Preferences#name()}.\n\n \u003cp\u003eThis implementation merely returns the name that was\n passed to this node\u0027s constructor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"absolutePath","comment":"Implements the \u003ctt\u003eabsolutePath\u003c/tt\u003e method as per the specification in\n {@link Preferences#absolutePath()}.\n\n \u003cp\u003eThis implementation merely returns the absolute path name that\n was computed at the time that this node was constructed (based on\n the name that was passed to this node\u0027s constructor, and the names\n that were passed to this node\u0027s ancestors\u0027 constructors).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isUserNode","comment":"Implements the \u003ctt\u003eisUserNode\u003c/tt\u003e method as per the specification in\n {@link Preferences#isUserNode()}.\n\n \u003cp\u003eThis implementation compares this node\u0027s root node (which is stored\n in a private field) with the value returned by\n {@link Preferences#userRoot()}.  If the two object references are\n identical, this method returns true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addPreferenceChangeListener","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.PreferenceChangeListener)","flatSignature":"(PreferenceChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"pcl","type":{"isPrimitive":false,"simpleName":"PreferenceChangeListener","qualifiedName":"java.util.prefs.PreferenceChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removePreferenceChangeListener","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.PreferenceChangeListener)","flatSignature":"(PreferenceChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"pcl","type":{"isPrimitive":false,"simpleName":"PreferenceChangeListener","qualifiedName":"java.util.prefs.PreferenceChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addNodeChangeListener","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.NodeChangeListener)","flatSignature":"(NodeChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ncl","type":{"isPrimitive":false,"simpleName":"NodeChangeListener","qualifiedName":"java.util.prefs.NodeChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeNodeChangeListener","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.NodeChangeListener)","flatSignature":"(NodeChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ncl","type":{"isPrimitive":false,"simpleName":"NodeChangeListener","qualifiedName":"java.util.prefs.NodeChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns the absolute path name of this preferences node.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sync","comment":"Implements the \u003ctt\u003esync\u003c/tt\u003e method as per the specification in\n {@link Preferences#sync()}.\n\n \u003cp\u003eThis implementation calls a recursive helper method that locks this\n node, invokes syncSpi() on it, unlocks this node, and recursively\n invokes this method on each \"cached child.\"  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n \"cached subtree\" rooted at this node, calling syncSpi() on each node in\n the subTree while only that node is locked. Note that syncSpi() is\n invoked top-down.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flush","comment":"Implements the \u003ctt\u003eflush\u003c/tt\u003e method as per the specification in\n {@link Preferences#flush()}.\n\n \u003cp\u003eThis implementation calls a recursive helper method that locks this\n node, invokes flushSpi() on it, unlocks this node, and recursively\n invokes this method on each \"cached child.\"  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n \"cached subtree\" rooted at this node, calling flushSpi() on each node in\n the subTree while only that node is locked. Note that flushSpi() is\n invoked top-down.\n\n \u003cp\u003e If this method is invoked on a node that has been removed with\n the {@link #removeNode()} method, flushSpi() is invoked on this node,\n but not on others.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"exportNode","comment":"Implements the \u003ctt\u003eexportNode\u003c/tt\u003e method as per the specification in\n {@link Preferences#exportNode(OutputStream)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exportSubtree","comment":"Implements the \u003ctt\u003eexportSubtree\u003c/tt\u003e method as per the specification in\n {@link Preferences#exportSubtree(OutputStream)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}