{"name":"Preferences","comment":"A node in a hierarchical collection of preference data.  This class\n allows applications to store and retrieve user and system\n preference and configuration data.  This data is stored\n persistently in an implementation-dependent backing store.  Typical\n implementations include flat files, OS-specific registries,\n directory servers and SQL databases.  The user of this class needn\u0027t\n be concerned with details of the backing store.\n\n \u003cp\u003eThere are two separate trees of preference nodes, one for user\n preferences and one for system preferences.  Each user has a separate user\n preference tree, and all users in a given system share the same system\n preference tree.  The precise description of \"user\" and \"system\" will vary\n from implementation to implementation.  Typical information stored in the\n user preference tree might include font choice, color choice, or preferred\n window location and size for a particular application.  Typical information\n stored in the system preference tree might include installation\n configuration data for an application.\n\n \u003cp\u003eNodes in a preference tree are named in a similar fashion to\n directories in a hierarchical file system.   Every node in a preference\n tree has a \u003ci\u003enode name\u003c/i\u003e (which is not necessarily unique),\n a unique \u003ci\u003eabsolute path name\u003c/i\u003e, and a path name \u003ci\u003erelative\u003c/i\u003e to each\n ancestor including itself.\n\n \u003cp\u003eThe root node has a node name of the empty string (\"\").  Every other\n node has an arbitrary node name, specified at the time it is created.  The\n only restrictions on this name are that it cannot be the empty string, and\n it cannot contain the slash character (\u0027/\u0027).\n\n \u003cp\u003eThe root node has an absolute path name of \u003ctt\u003e\"/\"\u003c/tt\u003e.  Children of\n the root node have absolute path names of \u003ctt\u003e\"/\" + \u003c/tt\u003e\u003ci\u003e\u0026lt;node\n name\u0026gt;\u003c/i\u003e.  All other nodes have absolute path names of \u003ci\u003e\u0026lt;parent\u0027s\n absolute path name\u0026gt;\u003c/i\u003e\u003ctt\u003e + \"/\" + \u003c/tt\u003e\u003ci\u003e\u0026lt;node name\u0026gt;\u003c/i\u003e.\n Note that all absolute path names begin with the slash character.\n\n \u003cp\u003eA node \u003ci\u003en\u003c/i\u003e\u0027s path name relative to its ancestor \u003ci\u003ea\u003c/i\u003e\n is simply the string that must be appended to \u003ci\u003ea\u003c/i\u003e\u0027s absolute path name\n in order to form \u003ci\u003en\u003c/i\u003e\u0027s absolute path name, with the initial slash\n character (if present) removed.  Note that:\n \u003cul\u003e\n \u003cli\u003eNo relative path names begin with the slash character.\n \u003cli\u003eEvery node\u0027s path name relative to itself is the empty string.\n \u003cli\u003eEvery node\u0027s path name relative to its parent is its node name (except\n for the root node, which does not have a parent).\n \u003cli\u003eEvery node\u0027s path name relative to the root is its absolute path name\n with the initial slash character removed.\n \u003c/ul\u003e\n\n \u003cp\u003eNote finally that:\n \u003cul\u003e\n \u003cli\u003eNo path name contains multiple consecutive slash characters.\n \u003cli\u003eNo path name with the exception of the root\u0027s absolute path name\n ends in the slash character.\n \u003cli\u003eAny string that conforms to these two rules is a valid path name.\n \u003c/ul\u003e\n\n \u003cp\u003eAll of the methods that modify preferences data are permitted to operate\n asynchronously; they may return immediately, and changes will eventually\n propagate to the persistent backing store with an implementation-dependent\n delay.  The \u003ctt\u003eflush\u003c/tt\u003e method may be used to synchronously force\n updates to the backing store.  Normal termination of the Java Virtual\n Machine will \u003ci\u003enot\u003c/i\u003e result in the loss of pending updates -- an explicit\n \u003ctt\u003eflush\u003c/tt\u003e invocation is \u003ci\u003enot\u003c/i\u003e required upon termination to ensure\n that pending updates are made persistent.\n\n \u003cp\u003eAll of the methods that read preferences from a \u003ctt\u003ePreferences\u003c/tt\u003e\n object require the invoker to provide a default value.  The default value is\n returned if no value has been previously set \u003ci\u003eor if the backing store is\n unavailable\u003c/i\u003e.  The intent is to allow applications to operate, albeit\n with slightly degraded functionality, even if the backing store becomes\n unavailable.  Several methods, like \u003ctt\u003eflush\u003c/tt\u003e, have semantics that\n prevent them from operating if the backing store is unavailable.  Ordinary\n applications should have no need to invoke any of these methods, which can\n be identified by the fact that they are declared to throw {@link\n BackingStoreException}.\n\n \u003cp\u003eThe methods in this class may be invoked concurrently by multiple threads\n in a single JVM without the need for external synchronization, and the\n results will be equivalent to some serial execution.  If this class is used\n concurrently \u003ci\u003eby multiple JVMs\u003c/i\u003e that store their preference data in\n the same backing store, the data store will not be corrupted, but no\n other guarantees are made concerning the consistency of the preference\n data.\n\n \u003cp\u003eThis class contains an export/import facility, allowing preferences\n to be \"exported\" to an XML document, and XML documents representing\n preferences to be \"imported\" back into the system.  This facility\n may be used to back up all or part of a preference tree, and\n subsequently restore from the backup.\n\n \u003cp\u003eThe XML document has the following DOCTYPE declaration:\n \u003cpre\u003e{@code\n \u003c!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"\u003e\n }\u003c/pre\u003e\n Note that the system URI (http://java.sun.com/dtd/preferences.dtd) is\n \u003ci\u003enot\u003c/i\u003e accessed when exporting or importing preferences; it merely\n serves as a string to uniquely identify the DTD, which is:\n \u003cpre\u003e{@code\n    \u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\n    \u003c!-- DTD for a Preferences tree. --\u003e\n\n    \u003c!-- The preferences element is at the root of an XML document\n         representing a Preferences tree. --\u003e\n    \u003c!ELEMENT preferences (root)\u003e\n\n    \u003c!-- The preferences element contains an optional version attribute,\n          which specifies version of DTD. --\u003e\n    \u003c!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" \u003e\n\n    \u003c!-- The root element has a map representing the root\u0027s preferences\n         (if any), and one node for each child of the root (if any). --\u003e\n    \u003c!ELEMENT root (map, node*) \u003e\n\n    \u003c!-- Additionally, the root contains a type attribute, which\n         specifies whether it\u0027s the system or user root. --\u003e\n    \u003c!ATTLIST root\n              type (system|user) #REQUIRED \u003e\n\n    \u003c!-- Each node has a map representing its preferences (if any),\n         and one node for each child (if any). --\u003e\n    \u003c!ELEMENT node (map, node*) \u003e\n\n    \u003c!-- Additionally, each node has a name attribute --\u003e\n    \u003c!ATTLIST node\n              name CDATA #REQUIRED \u003e\n\n    \u003c!-- A map represents the preferences stored at a node (if any). --\u003e\n    \u003c!ELEMENT map (entry*) \u003e\n\n    \u003c!-- An entry represents a single preference, which is simply\n          a key-value pair. --\u003e\n    \u003c!ELEMENT entry EMPTY \u003e\n    \u003c!ATTLIST entry\n              key   CDATA #REQUIRED\n              value CDATA #REQUIRED \u003e\n }\u003c/pre\u003e\n\n Every \u003ctt\u003ePreferences\u003c/tt\u003e implementation must have an associated {@link\n PreferencesFactory} implementation.  Every Java(TM) SE implementation must provide\n some means of specifying which \u003ctt\u003ePreferencesFactory\u003c/tt\u003e implementation\n is used to generate the root preferences nodes.  This allows the\n administrator to replace the default preferences implementation with an\n alternative implementation.\n\n \u003cp\u003eImplementation note: In Sun\u0027s JRE, the \u003ctt\u003ePreferencesFactory\u003c/tt\u003e\n implementation is located as follows:\n\n \u003col\u003e\n\n \u003cli\u003e\u003cp\u003eIf the system property\n \u003ctt\u003ejava.util.prefs.PreferencesFactory\u003c/tt\u003e is defined, then it is\n taken to be the fully-qualified name of a class implementing the\n \u003ctt\u003ePreferencesFactory\u003c/tt\u003e interface.  The class is loaded and\n instantiated; if this process fails then an unspecified error is\n thrown.\u003c/p\u003e\u003c/li\u003e\n\n \u003cli\u003e\u003cp\u003e If a \u003ctt\u003ePreferencesFactory\u003c/tt\u003e implementation class file\n has been installed in a jar file that is visible to the\n {@link java.lang.ClassLoader#getSystemClassLoader system class loader},\n and that jar file contains a provider-configuration file named\n \u003ctt\u003ejava.util.prefs.PreferencesFactory\u003c/tt\u003e in the resource\n directory \u003ctt\u003eMETA-INF/services\u003c/tt\u003e, then the first class name\n specified in that file is taken.  If more than one such jar file is\n provided, the first one found will be used.  The class is loaded\n and instantiated; if this process fails then an unspecified error\n is thrown.  \u003c/p\u003e\u003c/li\u003e\n\n \u003cli\u003e\u003cp\u003eFinally, if neither the above-mentioned system property nor\n an extension jar file is provided, then the system-wide default\n \u003ctt\u003ePreferencesFactory\u003c/tt\u003e implementation for the underlying\n platform is loaded and instantiated.\u003c/p\u003e\u003c/li\u003e\n\n \u003c/ol\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{},"package":"java.util.prefs","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"MAX_KEY_LENGTH","comment":"Maximum length of string allowed as a key (80 characters).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"80"},{"name":"MAX_VALUE_LENGTH","comment":"Maximum length of string allowed as a value (8192 characters).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8192"},{"name":"MAX_NAME_LENGTH","comment":"Maximum length of a node name (80 characters).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"80"}],"methods":[{"name":"userNodeForPackage","comment":"Returns the preference node from the calling user\u0027s preference tree\n that is associated (by convention) with the specified class\u0027s package.\n The convention is as follows: the absolute path name of the node is the\n fully qualified package name, preceded by a slash (\u003ctt\u003e\u0027/\u0027\u003c/tt\u003e), and\n with each period (\u003ctt\u003e\u0027.\u0027\u003c/tt\u003e) replaced by a slash.  For example the\n absolute path name of the node associated with the class\n \u003ctt\u003ecom.acme.widget.Foo\u003c/tt\u003e is \u003ctt\u003e/com/acme/widget\u003c/tt\u003e.\n\n \u003cp\u003eThis convention does not apply to the unnamed package, whose\n associated preference node is \u003ctt\u003e\u0026lt;unnamed\u0026gt;\u003c/tt\u003e.  This node\n is not intended for long term use, but for convenience in the early\n development of programs that do not yet belong to a package, and\n for \"throwaway\" programs.  \u003ci\u003eValuable data should not be stored\n at this node as it is shared by all programs that use it.\u003c/i\u003e\n\n \u003cp\u003eA class \u003ctt\u003eFoo\u003c/tt\u003e wishing to access preferences pertaining to its\n package can obtain a preference node as follows: \u003cpre\u003e\n    static Preferences prefs \u003d Preferences.userNodeForPackage(Foo.class);\n \u003c/pre\u003e\n This idiom obviates the need for using a string to describe the\n preferences node and decreases the likelihood of a run-time failure.\n (If the class name is misspelled, it will typically result in a\n compile-time error.)\n\n \u003cp\u003eInvoking this method will result in the creation of the returned\n node and its ancestors if they do not already exist.  If the returned\n node did not exist prior to this call, this node and any ancestors that\n were created by this call are not guaranteed to become permanent until\n the \u003ctt\u003eflush\u003c/tt\u003e method is called on the returned node (or one of its\n ancestors or descendants).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"systemNodeForPackage","comment":"Returns the preference node from the system preference tree that is\n associated (by convention) with the specified class\u0027s package.  The\n convention is as follows: the absolute path name of the node is the\n fully qualified package name, preceded by a slash (\u003ctt\u003e\u0027/\u0027\u003c/tt\u003e), and\n with each period (\u003ctt\u003e\u0027.\u0027\u003c/tt\u003e) replaced by a slash.  For example the\n absolute path name of the node associated with the class\n \u003ctt\u003ecom.acme.widget.Foo\u003c/tt\u003e is \u003ctt\u003e/com/acme/widget\u003c/tt\u003e.\n\n \u003cp\u003eThis convention does not apply to the unnamed package, whose\n associated preference node is \u003ctt\u003e\u0026lt;unnamed\u0026gt;\u003c/tt\u003e.  This node\n is not intended for long term use, but for convenience in the early\n development of programs that do not yet belong to a package, and\n for \"throwaway\" programs.  \u003ci\u003eValuable data should not be stored\n at this node as it is shared by all programs that use it.\u003c/i\u003e\n\n \u003cp\u003eA class \u003ctt\u003eFoo\u003c/tt\u003e wishing to access preferences pertaining to its\n package can obtain a preference node as follows: \u003cpre\u003e\n  static Preferences prefs \u003d Preferences.systemNodeForPackage(Foo.class);\n \u003c/pre\u003e\n This idiom obviates the need for using a string to describe the\n preferences node and decreases the likelihood of a run-time failure.\n (If the class name is misspelled, it will typically result in a\n compile-time error.)\n\n \u003cp\u003eInvoking this method will result in the creation of the returned\n node and its ancestors if they do not already exist.  If the returned\n node did not exist prior to this call, this node and any ancestors that\n were created by this call are not guaranteed to become permanent until\n the \u003ctt\u003eflush\u003c/tt\u003e method is called on the returned node (or one of its\n ancestors or descendants).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"userRoot","comment":"Returns the root preference node for the calling user.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"systemRoot","comment":"Returns the root preference node for the system.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"put","comment":"Associates the specified value with the specified key in this\n preference node.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"get","comment":"Returns the value associated with the specified key in this preference\n node.  Returns the specified default if there is no value associated\n with the key, or the backing store is inaccessible.\n\n \u003cp\u003eSome implementations may store default values in their backing\n stores.  If there is no value associated with the specified key\n but there is such a \u003ci\u003estored default\u003c/i\u003e, it is returned in\n preference to the specified default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the value associated with the specified key in this preference\n node, if any.\n\n \u003cp\u003eIf this implementation supports \u003ci\u003estored defaults\u003c/i\u003e, and there is\n such a default for the specified preference, the stored default will be\n \"exposed\" by this call, in the sense that it will be returned\n by a succeeding call to \u003ctt\u003eget\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clear","comment":"Removes all of the preferences (key-value associations) in this\n preference node.  This call has no effect on any descendants\n of this node.\n\n \u003cp\u003eIf this implementation supports \u003ci\u003estored defaults\u003c/i\u003e, and this\n node in the preferences hierarchy contains any such defaults,\n the stored defaults will be \"exposed\" by this call, in the sense that\n they will be returned by succeeding calls to \u003ctt\u003eget\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"putInt","comment":"Associates a string representing the specified int value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the int value were passed to\n {@link Integer#toString(int)}.  This method is intended for use in\n conjunction with {@link #getInt}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInt","comment":"Returns the int value represented by the string associated with the\n specified key in this preference node.  The string is converted to\n an integer as by {@link Integer#parseInt(String)}.  Returns the\n specified default if there is no value associated with the key,\n the backing store is inaccessible, or if\n \u003ctt\u003eInteger.parseInt(String)\u003c/tt\u003e would throw a {@link\n NumberFormatException} if the associated value were passed.  This\n method is intended for use in conjunction with {@link #putInt}.\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a\n default exists, is accessible, and could be converted to an int\n with \u003ctt\u003eInteger.parseInt\u003c/tt\u003e, this int is returned in preference to\n the specified default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putLong","comment":"Associates a string representing the specified long value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the long value were passed to\n {@link Long#toString(long)}.  This method is intended for use in\n conjunction with {@link #getLong}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, long)","flatSignature":"(String, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Returns the long value represented by the string associated with the\n specified key in this preference node.  The string is converted to\n a long as by {@link Long#parseLong(String)}.  Returns the\n specified default if there is no value associated with the key,\n the backing store is inaccessible, or if\n \u003ctt\u003eLong.parseLong(String)\u003c/tt\u003e would throw a {@link\n NumberFormatException} if the associated value were passed.  This\n method is intended for use in conjunction with {@link #putLong}.\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a\n default exists, is accessible, and could be converted to a long\n with \u003ctt\u003eLong.parseLong\u003c/tt\u003e, this long is returned in preference to\n the specified default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, long)","flatSignature":"(String, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putBoolean","comment":"Associates a string representing the specified boolean value with the\n specified key in this preference node.  The associated string is\n \u003ctt\u003e\"true\"\u003c/tt\u003e if the value is true, and \u003ctt\u003e\"false\"\u003c/tt\u003e if it is\n false.  This method is intended for use in conjunction with\n {@link #getBoolean}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBoolean","comment":"Returns the boolean value represented by the string associated with the\n specified key in this preference node.  Valid strings\n are \u003ctt\u003e\"true\"\u003c/tt\u003e, which represents true, and \u003ctt\u003e\"false\"\u003c/tt\u003e, which\n represents false.  Case is ignored, so, for example, \u003ctt\u003e\"TRUE\"\u003c/tt\u003e\n and \u003ctt\u003e\"False\"\u003c/tt\u003e are also valid.  This method is intended for use in\n conjunction with {@link #putBoolean}.\n\n \u003cp\u003eReturns the specified default if there is no value\n associated with the key, the backing store is inaccessible, or if the\n associated value is something other than \u003ctt\u003e\"true\"\u003c/tt\u003e or\n \u003ctt\u003e\"false\"\u003c/tt\u003e, ignoring case.\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a\n default exists and is accessible, it is used in preference to the\n specified default, unless the stored default is something other than\n \u003ctt\u003e\"true\"\u003c/tt\u003e or \u003ctt\u003e\"false\"\u003c/tt\u003e, ignoring case, in which case the\n specified default is used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putFloat","comment":"Associates a string representing the specified float value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the float value were passed to\n {@link Float#toString(float)}.  This method is intended for use in\n conjunction with {@link #getFloat}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, float)","flatSignature":"(String, float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFloat","comment":"Returns the float value represented by the string associated with the\n specified key in this preference node.  The string is converted to an\n integer as by {@link Float#parseFloat(String)}.  Returns the specified\n default if there is no value associated with the key, the backing store\n is inaccessible, or if \u003ctt\u003eFloat.parseFloat(String)\u003c/tt\u003e would throw a\n {@link NumberFormatException} if the associated value were passed.\n This method is intended for use in conjunction with {@link #putFloat}.\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a\n default exists, is accessible, and could be converted to a float\n with \u003ctt\u003eFloat.parseFloat\u003c/tt\u003e, this float is returned in preference to\n the specified default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, float)","flatSignature":"(String, float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putDouble","comment":"Associates a string representing the specified double value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the double value were passed to\n {@link Double#toString(double)}.  This method is intended for use in\n conjunction with {@link #getDouble}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, double)","flatSignature":"(String, double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDouble","comment":"Returns the double value represented by the string associated with the\n specified key in this preference node.  The string is converted to an\n integer as by {@link Double#parseDouble(String)}.  Returns the specified\n default if there is no value associated with the key, the backing store\n is inaccessible, or if \u003ctt\u003eDouble.parseDouble(String)\u003c/tt\u003e would throw a\n {@link NumberFormatException} if the associated value were passed.\n This method is intended for use in conjunction with {@link #putDouble}.\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a\n default exists, is accessible, and could be converted to a double\n with \u003ctt\u003eDouble.parseDouble\u003c/tt\u003e, this double is returned in preference\n to the specified default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, double)","flatSignature":"(String, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"putByteArray","comment":"Associates a string representing the specified byte array with the\n specified key in this preference node.  The associated string is\n the \u003ci\u003eBase64\u003c/i\u003e encoding of the byte array, as defined in \u003ca\n href\u003dhttp://www.ietf.org/rfc/rfc2045.txt\u003eRFC 2045\u003c/a\u003e, Section 6.8,\n with one minor change: the string will consist solely of characters\n from the \u003ci\u003eBase64 Alphabet\u003c/i\u003e; it will not contain any newline\n characters.  Note that the maximum length of the byte array is limited\n to three quarters of \u003ctt\u003eMAX_VALUE_LENGTH\u003c/tt\u003e so that the length\n of the Base64 encoded String does not exceed \u003ctt\u003eMAX_VALUE_LENGTH\u003c/tt\u003e.\n This method is intended for use in conjunction with\n {@link #getByteArray}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[])","flatSignature":"(String, byte[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getByteArray","comment":"Returns the byte array value represented by the string associated with\n the specified key in this preference node.  Valid strings are\n \u003ci\u003eBase64\u003c/i\u003e encoded binary data, as defined in \u003ca\n href\u003dhttp://www.ietf.org/rfc/rfc2045.txt\u003eRFC 2045\u003c/a\u003e, Section 6.8,\n with one minor change: the string must consist solely of characters\n from the \u003ci\u003eBase64 Alphabet\u003c/i\u003e; no newline characters or\n extraneous characters are permitted.  This method is intended for use\n in conjunction with {@link #putByteArray}.\n\n \u003cp\u003eReturns the specified default if there is no value\n associated with the key, the backing store is inaccessible, or if the\n associated value is not a valid Base64 encoded byte array\n (as defined above).\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and such a\n default exists and is accessible, it is used in preference to the\n specified default, unless the stored default is not a valid Base64\n encoded byte array (as defined above), in which case the\n specified default is used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, byte[])","flatSignature":"(String, byte[])","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"keys","comment":"Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)\n\n \u003cp\u003eIf the implementation supports \u003ci\u003estored defaults\u003c/i\u003e and there\n are any such defaults at this node that have not been overridden,\n by explicit preferences, the defaults are returned in the array in\n addition to any explicit preferences.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"childrenNames","comment":"Returns the names of the children of this preference node, relative to\n this node.  (The returned array will be of size zero if this node has\n no children.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parent","comment":"Returns the parent of this preference node, or \u003ctt\u003enull\u003c/tt\u003e if this is\n the root.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"node","comment":"Returns the named preference node in the same tree as this node,\n creating it and any of its ancestors if they do not already exist.\n Accepts a relative or absolute path name.  Relative path names\n (which do not begin with the slash character \u003ctt\u003e(\u0027/\u0027)\u003c/tt\u003e) are\n interpreted relative to this preference node.\n\n \u003cp\u003eIf the returned node did not exist prior to this call, this node and\n any ancestors that were created by this call are not guaranteed\n to become permanent until the \u003ctt\u003eflush\u003c/tt\u003e method is called on\n the returned node (or one of its ancestors or descendants).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Preferences","qualifiedName":"java.util.prefs.Preferences","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"pathName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nodeExists","comment":"Returns true if the named preference node exists in the same tree\n as this node.  Relative path names (which do not begin with the slash\n character \u003ctt\u003e(\u0027/\u0027)\u003c/tt\u003e) are interpreted relative to this preference\n node.\n\n \u003cp\u003eIf this node (or an ancestor) has already been removed with the\n {@link #removeNode()} method, it \u003ci\u003eis\u003c/i\u003e legal to invoke this method,\n but only with the path name \u003ctt\u003e\"\"\u003c/tt\u003e; the invocation will return\n \u003ctt\u003efalse\u003c/tt\u003e.  Thus, the idiom \u003ctt\u003ep.nodeExists(\"\")\u003c/tt\u003e may be\n used to test whether \u003ctt\u003ep\u003c/tt\u003e has been removed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"pathName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeNode","comment":"Removes this preference node and all of its descendants, invalidating\n any preferences contained in the removed nodes.  Once a node has been\n removed, attempting any method other than {@link #name()},\n {@link #absolutePath()}, {@link #isUserNode()}, {@link #flush()} or\n {@link #node(String) nodeExists(\"\")} on the corresponding\n \u003ctt\u003ePreferences\u003c/tt\u003e instance will fail with an\n \u003ctt\u003eIllegalStateException\u003c/tt\u003e.  (The methods defined on {@link Object}\n can still be invoked on a node after it has been removed; they will not\n throw \u003ctt\u003eIllegalStateException\u003c/tt\u003e.)\n\n \u003cp\u003eThe removal is not guaranteed to be persistent until the\n \u003ctt\u003eflush\u003c/tt\u003e method is called on this node (or an ancestor).\n\n \u003cp\u003eIf this implementation supports \u003ci\u003estored defaults\u003c/i\u003e, removing a\n node exposes any stored defaults at or below this node.  Thus, a\n subsequent call to \u003ctt\u003enodeExists\u003c/tt\u003e on this node\u0027s path name may\n return \u003ctt\u003etrue\u003c/tt\u003e, and a subsequent call to \u003ctt\u003enode\u003c/tt\u003e on this\n path name may return a (different) \u003ctt\u003ePreferences\u003c/tt\u003e instance\n representing a non-empty collection of preferences and/or children.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"name","comment":"Returns this preference node\u0027s name, relative to its parent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"absolutePath","comment":"Returns this preference node\u0027s absolute path name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isUserNode","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if this preference node is in the user\n preference tree, \u003ctt\u003efalse\u003c/tt\u003e if it\u0027s in the system preference tree.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this preferences node,\n as if computed by the expression:\u003ctt\u003e(this.isUserNode() ? \"User\" :\n \"System\") + \" Preference Node: \" + this.absolutePath()\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"flush","comment":"Forces any changes in the contents of this preference node and its\n descendants to the persistent store.  Once this method returns\n successfully, it is safe to assume that all changes made in the\n subtree rooted at this node prior to the method invocation have become\n permanent.\n\n \u003cp\u003eImplementations are free to flush changes into the persistent store\n at any time.  They do not need to wait for this method to be called.\n\n \u003cp\u003eWhen a flush occurs on a newly created node, it is made persistent,\n as are any ancestors (and descendants) that have yet to be made\n persistent.  Note however that any preference value changes in\n ancestors are \u003ci\u003enot\u003c/i\u003e guaranteed to be made persistent.\n\n \u003cp\u003e If this method is invoked on a node that has been removed with\n the {@link #removeNode()} method, flushSpi() is invoked on this node,\n but not on others.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"sync","comment":"Ensures that future reads from this preference node and its\n descendants reflect any changes that were committed to the persistent\n store (from any VM) prior to the \u003ctt\u003esync\u003c/tt\u003e invocation.  As a\n side-effect, forces any changes in the contents of this preference node\n and its descendants to the persistent store, as if the \u003ctt\u003eflush\u003c/tt\u003e\n method had been invoked on this node.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"addPreferenceChangeListener","comment":"Registers the specified listener to receive \u003ci\u003epreference change\n events\u003c/i\u003e for this preference node.  A preference change event is\n generated when a preference is added to this node, removed from this\n node, or when the value associated with a preference is changed.\n (Preference change events are \u003ci\u003enot\u003c/i\u003e generated by the {@link\n #removeNode()} method, which generates a \u003ci\u003enode change event\u003c/i\u003e.\n Preference change events \u003ci\u003eare\u003c/i\u003e generated by the \u003ctt\u003eclear\u003c/tt\u003e\n method.)\n\n \u003cp\u003eEvents are only guaranteed for changes made within the same JVM\n as the registered listener, though some implementations may generate\n events for changes made outside this JVM.  Events may be generated\n before the changes have been made persistent.  Events are not generated\n when preferences are modified in descendants of this node; a caller\n desiring such events must register with each descendant.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.PreferenceChangeListener)","flatSignature":"(PreferenceChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"pcl","type":{"isPrimitive":false,"simpleName":"PreferenceChangeListener","qualifiedName":"java.util.prefs.PreferenceChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removePreferenceChangeListener","comment":"Removes the specified preference change listener, so it no longer\n receives preference change events.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.PreferenceChangeListener)","flatSignature":"(PreferenceChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"pcl","type":{"isPrimitive":false,"simpleName":"PreferenceChangeListener","qualifiedName":"java.util.prefs.PreferenceChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addNodeChangeListener","comment":"Registers the specified listener to receive \u003ci\u003enode change events\u003c/i\u003e\n for this node.  A node change event is generated when a child node is\n added to or removed from this node.  (A single {@link #removeNode()}\n invocation results in multiple \u003ci\u003enode change events\u003c/i\u003e, one for every\n node in the subtree rooted at the removed node.)\n\n \u003cp\u003eEvents are only guaranteed for changes made within the same JVM\n as the registered listener, though some implementations may generate\n events for changes made outside this JVM.  Events may be generated\n before the changes have become permanent.  Events are not generated\n when indirect descendants of this node are added or removed; a\n caller desiring such events must register with each descendant.\n\n \u003cp\u003eFew guarantees can be made regarding node creation.  Because nodes\n are created implicitly upon access, it may not be feasible for an\n implementation to determine whether a child node existed in the backing\n store prior to access (for example, because the backing store is\n unreachable or cached information is out of date).  Under these\n circumstances, implementations are neither required to generate node\n change events nor prohibited from doing so.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.NodeChangeListener)","flatSignature":"(NodeChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"ncl","type":{"isPrimitive":false,"simpleName":"NodeChangeListener","qualifiedName":"java.util.prefs.NodeChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeNodeChangeListener","comment":"Removes the specified \u003ctt\u003eNodeChangeListener\u003c/tt\u003e, so it no longer\n receives change events.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.prefs.NodeChangeListener)","flatSignature":"(NodeChangeListener)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"ncl","type":{"isPrimitive":false,"simpleName":"NodeChangeListener","qualifiedName":"java.util.prefs.NodeChangeListener","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exportNode","comment":"Emits on the specified output stream an XML document representing all\n of the preferences contained in this node (but not its descendants).\n This XML document is, in effect, an offline backup of the node.\n\n \u003cp\u003eThe XML document will have the following DOCTYPE declaration:\n \u003cpre\u003e{@code\n \u003c!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"\u003e\n }\u003c/pre\u003e\n The UTF-8 character encoding will be used.\n\n \u003cp\u003eThis method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  If the preferences\n at this node are modified concurrently with an invocation of this\n method, the exported preferences comprise a \"fuzzy snapshot\" of the\n preferences contained in the node; some of the concurrent modifications\n may be reflected in the exported data while others may not.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exportSubtree","comment":"Emits an XML document representing all of the preferences contained\n in this node and all of its descendants.  This XML document is, in\n effect, an offline backup of the subtree rooted at the node.\n\n \u003cp\u003eThe XML document will have the following DOCTYPE declaration:\n \u003cpre\u003e{@code\n \u003c!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"\u003e\n }\u003c/pre\u003e\n The UTF-8 character encoding will be used.\n\n \u003cp\u003eThis method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  If the preferences\n or nodes in the subtree rooted at this node are modified concurrently\n with an invocation of this method, the exported preferences comprise a\n \"fuzzy snapshot\" of the subtree; some of the concurrent modifications\n may be reflected in the exported data while others may not.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"os","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"importPreferences","comment":"Imports all of the preferences represented by the XML document on the\n specified input stream.  The document may represent user preferences or\n system preferences.  If it represents user preferences, the preferences\n will be imported into the calling user\u0027s preference tree (even if they\n originally came from a different user\u0027s preference tree).  If any of\n the preferences described by the document inhabit preference nodes that\n do not exist, the nodes will be created.\n\n \u003cp\u003eThe XML document must have the following DOCTYPE declaration:\n \u003cpre\u003e{@code\n \u003c!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"\u003e\n }\u003c/pre\u003e\n (This method is designed for use in conjunction with\n {@link #exportNode(OutputStream)} and\n {@link #exportSubtree(OutputStream)}.\n\n \u003cp\u003eThis method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  The method behaves\n as if implemented on top of the other public methods in this class,\n notably {@link #node(String)} and {@link #put(String, String)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"is","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.prefs.AbstractPreferences"],"enumConstants":[]}