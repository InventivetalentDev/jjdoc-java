{"name":"Spliterators","comment":"Static classes and methods for operating on or creating instances of\n {@link Spliterator} and its primitive specializations\n {@link Spliterator.OfInt}, {@link Spliterator.OfLong}, and\n {@link Spliterator.OfDouble}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Spliterators","qualifiedName":"java.util.Spliterators","dimension":"","elementType":{},"package":"java.util","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.8","innerClasses":["java.util.Spliterators.AbstractSpliterator","java.util.Spliterators.AbstractIntSpliterator","java.util.Spliterators.AbstractLongSpliterator","java.util.Spliterators.AbstractDoubleSpliterator"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"emptySpliterator","comment":"Creates an empty {@code Spliterator}\n\n \u003cp\u003eThe empty spliterator reports {@link Spliterator#SIZED} and\n {@link Spliterator#SUBSIZED}.  Calls to\n {@link java.util.Spliterator#trySplit()} always return {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"emptyIntSpliterator","comment":"Creates an empty {@code Spliterator.OfInt}\n\n \u003cp\u003eThe empty spliterator reports {@link Spliterator#SIZED} and\n {@link Spliterator#SUBSIZED}.  Calls to\n {@link java.util.Spliterator#trySplit()} always return {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"emptyLongSpliterator","comment":"Creates an empty {@code Spliterator.OfLong}\n\n \u003cp\u003eThe empty spliterator reports {@link Spliterator#SIZED} and\n {@link Spliterator#SUBSIZED}.  Calls to\n {@link java.util.Spliterator#trySplit()} always return {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"emptyDoubleSpliterator","comment":"Creates an empty {@code Spliterator.OfDouble}\n\n \u003cp\u003eThe empty spliterator reports {@link Spliterator#SIZED} and\n {@link Spliterator#SUBSIZED}.  Calls to\n {@link java.util.Spliterator#trySplit()} always return {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator} covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(Object[])}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify {@code IMMUTABLE} and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object[], int)","flatSignature":"(Object[], int)","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"spliterator","comment":"Creates a {@code Spliterator} covering a range of elements of a given\n array, using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(Object[])}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify {@code IMMUTABLE} and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object[], int, int, int)","flatSignature":"(Object[], int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfInt} covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(int[])}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify {@code IMMUTABLE} and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int[], int)","flatSignature":"(int[], int)","returnType":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfInt} covering a range of elements of a\n given array, using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(int[], int, int)}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify {@code IMMUTABLE} and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int[], int, int, int)","flatSignature":"(int[], int, int, int)","returnType":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfLong} covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(long[])}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify {@code IMMUTABLE} and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], int)","flatSignature":"(long[], int)","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfLong} covering a range of elements of a\n given array, using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(long[], int, int)}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report.  (For example, if it is\n known the array will not be further modified, specify {@code IMMUTABLE};\n if the array data is considered to have an an encounter order, specify\n {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n often be used instead, which returns a spliterator that reports\n {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], int, int, int)","flatSignature":"(long[], int, int, int)","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfDouble} covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(double[])}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify {@code IMMUTABLE} and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double[], int)","flatSignature":"(double[], int)","returnType":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfDouble} covering a range of elements of a\n given array, using a customized set of spliterator characteristics.\n\n \u003cp\u003eThis method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n {@link Arrays#spliterator(double[], int, int)}.\n\n \u003cp\u003eThe returned spliterator always reports the characteristics\n {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n characteristics for the spliterator to report.  (For example, if it is\n known the array will not be further modified, specify {@code IMMUTABLE};\n if the array data is considered to have an an encounter order, specify\n {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n often be used instead, which returns a spliterator that reports\n {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double[], int, int, int)","flatSignature":"(double[], int, int, int)","returnType":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"toIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"additionalCharacteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator} using the given collection\u0027s\n {@link java.util.Collection#iterator()} as the source of elements, and\n reporting its {@link java.util.Collection#size()} as its initial size.\n\n \u003cp\u003eThe spliterator is\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the collection\u0027s iterator, and\n implements {@code trySplit} to permit limited parallelism.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Collection\u003c? extends T\u003e, int)","flatSignature":"(Collection\u003c? extends T\u003e, int)","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"spliterator","comment":"Creates a {@code Spliterator} using a given {@code Iterator}\n as the source of elements, and with a given initially reported size.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Iterator\u003c? extends T\u003e, long, int)","flatSignature":"(Iterator\u003c? extends T\u003e, long, int)","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"spliteratorUnknownSize","comment":"Creates a {@code Spliterator} using a given {@code Iterator}\n as the source of elements, with no initial size estimate.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Iterator\u003c? extends T\u003e, int)","flatSignature":"(Iterator\u003c? extends T\u003e, int)","returnType":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfInt} using a given\n {@code IntStream.IntIterator} as the source of elements, and with a given\n initially reported size.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.PrimitiveIterator.OfInt, long, int)","flatSignature":"(PrimitiveIterator.OfInt, long, int)","returnType":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.PrimitiveIterator.OfInt","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliteratorUnknownSize","comment":"Creates a {@code Spliterator.OfInt} using a given\n {@code IntStream.IntIterator} as the source of elements, with no initial\n size estimate.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.PrimitiveIterator.OfInt, int)","flatSignature":"(PrimitiveIterator.OfInt, int)","returnType":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.PrimitiveIterator.OfInt","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfLong} using a given\n {@code LongStream.LongIterator} as the source of elements, and with a\n given initially reported size.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.PrimitiveIterator.OfLong, long, int)","flatSignature":"(PrimitiveIterator.OfLong, long, int)","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.PrimitiveIterator.OfLong","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliteratorUnknownSize","comment":"Creates a {@code Spliterator.OfLong} using a given\n {@code LongStream.LongIterator} as the source of elements, with no\n initial size estimate.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.PrimitiveIterator.OfLong, int)","flatSignature":"(PrimitiveIterator.OfLong, int)","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.PrimitiveIterator.OfLong","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliterator","comment":"Creates a {@code Spliterator.OfDouble} using a given\n {@code DoubleStream.DoubleIterator} as the source of elements, and with a\n given initially reported size.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.PrimitiveIterator.OfDouble, long, int)","flatSignature":"(PrimitiveIterator.OfDouble, long, int)","returnType":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.PrimitiveIterator.OfDouble","dimension":"","elementType":{}}},{"name":"size","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"spliteratorUnknownSize","comment":"Creates a {@code Spliterator.OfDouble} using a given\n {@code DoubleStream.DoubleIterator} as the source of elements, with no\n initial size estimate.\n\n \u003cp\u003eThe spliterator is not\n \u003cem\u003e\u003ca href\u003d\"Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e, inherits\n the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterator, and implements\n {@code trySplit} to permit limited parallelism.\n\n \u003cp\u003eTraversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.PrimitiveIterator.OfDouble, int)","flatSignature":"(PrimitiveIterator.OfDouble, int)","returnType":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"iterator","type":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.PrimitiveIterator.OfDouble","dimension":"","elementType":{}}},{"name":"characteristics","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Creates an {@code Iterator} from a {@code Spliterator}.\n\n \u003cp\u003eTraversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator\u003c? extends T\u003e)","flatSignature":"(Spliterator\u003c? extends T\u003e)","returnType":{"isPrimitive":false,"simpleName":"Iterator","qualifiedName":"java.util.Iterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"Spliterator","qualifiedName":"java.util.Spliterator","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":[]}]},{"name":"iterator","comment":"Creates an {@code PrimitiveIterator.OfInt} from a\n {@code Spliterator.OfInt}.\n\n \u003cp\u003eTraversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator.OfInt)","flatSignature":"(Spliterator.OfInt)","returnType":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.PrimitiveIterator.OfInt","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"OfInt","qualifiedName":"java.util.Spliterator.OfInt","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Creates an {@code PrimitiveIterator.OfLong} from a\n {@code Spliterator.OfLong}.\n\n \u003cp\u003eTraversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator.OfLong)","flatSignature":"(Spliterator.OfLong)","returnType":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.PrimitiveIterator.OfLong","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"OfLong","qualifiedName":"java.util.Spliterator.OfLong","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"iterator","comment":"Creates an {@code PrimitiveIterator.OfDouble} from a\n {@code Spliterator.OfDouble}.\n\n \u003cp\u003eTraversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Spliterator.OfDouble)","flatSignature":"(Spliterator.OfDouble)","returnType":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.PrimitiveIterator.OfDouble","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"spliterator","type":{"isPrimitive":false,"simpleName":"OfDouble","qualifiedName":"java.util.Spliterator.OfDouble","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}