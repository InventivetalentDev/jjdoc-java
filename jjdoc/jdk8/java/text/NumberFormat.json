{"name":"NumberFormat","comment":"\u003ccode\u003eNumberFormat\u003c/code\u003e is the abstract base class for all number\n formats. This class provides the interface for formatting and parsing\n numbers. \u003ccode\u003eNumberFormat\u003c/code\u003e also provides methods for determining\n which locales have number formats, and what their names are.\n\n \u003cp\u003e\n \u003ccode\u003eNumberFormat\u003c/code\u003e helps you to format and parse numbers for any locale.\n Your code can be completely independent of the locale conventions for\n decimal points, thousands-separators, or even the particular decimal\n digits used, or whether the number format is even decimal.\n\n \u003cp\u003e\n To format a number for the current Locale, use one of the factory\n class methods:\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n myString \u003d NumberFormat.getInstance().format(myNumber);\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n If you are formatting multiple numbers, it is\n more efficient to get the format and use it multiple times so that\n the system doesn\u0027t have to fetch the information about the local\n language and country conventions multiple times.\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n NumberFormat nf \u003d NumberFormat.getInstance();\n for (int i \u003d 0; i \u003c myNumber.length; ++i) {\n     output.println(nf.format(myNumber[i]) + \"; \");\n }\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n To format a number for a different Locale, specify it in the\n call to \u003ccode\u003egetInstance\u003c/code\u003e.\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n NumberFormat nf \u003d NumberFormat.getInstance(Locale.FRENCH);\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n You can also use a \u003ccode\u003eNumberFormat\u003c/code\u003e to parse numbers:\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n myNumber \u003d nf.parse(myString);\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n Use \u003ccode\u003egetInstance\u003c/code\u003e or \u003ccode\u003egetNumberInstance\u003c/code\u003e to get the\n normal number format. Use \u003ccode\u003egetIntegerInstance\u003c/code\u003e to get an\n integer number format. Use \u003ccode\u003egetCurrencyInstance\u003c/code\u003e to get the\n currency number format. And use \u003ccode\u003egetPercentInstance\u003c/code\u003e to get a\n format for displaying percentages. With this format, a fraction like\n 0.53 is displayed as 53%.\n\n \u003cp\u003e\n You can also control the display of numbers with such methods as\n \u003ccode\u003esetMinimumFractionDigits\u003c/code\u003e.\n If you want even more control over the format or parsing,\n or want to give your users more control,\n you can try casting the \u003ccode\u003eNumberFormat\u003c/code\u003e you get from the factory methods\n to a \u003ccode\u003eDecimalFormat\u003c/code\u003e. This will work for the vast majority\n of locales; just remember to put it in a \u003ccode\u003etry\u003c/code\u003e block in case you\n encounter an unusual one.\n\n \u003cp\u003e\n NumberFormat and DecimalFormat are designed such that some controls\n work for formatting and others work for parsing.  The following is\n the detailed description for each these control methods,\n \u003cp\u003e\n setParseIntegerOnly : only affects parsing, e.g.\n if true,  \"3456.78\" \u0026rarr; 3456 (and leaves the parse position just after index 6)\n if false, \"3456.78\" \u0026rarr; 3456.78 (and leaves the parse position just after index 8)\n This is independent of formatting.  If you want to not show a decimal point\n where there might be no digits after the decimal point, use\n setDecimalSeparatorAlwaysShown.\n \u003cp\u003e\n setDecimalSeparatorAlwaysShown : only affects formatting, and only where\n there might be no digits after the decimal point, such as with a pattern\n like \"#,##0.##\", e.g.,\n if true,  3456.00 \u0026rarr; \"3,456.\"\n if false, 3456.00 \u0026rarr; \"3456\"\n This is independent of parsing.  If you want parsing to stop at the decimal\n point, use setParseIntegerOnly.\n\n \u003cp\u003e\n You can also use forms of the \u003ccode\u003eparse\u003c/code\u003e and \u003ccode\u003eformat\u003c/code\u003e\n methods with \u003ccode\u003eParsePosition\u003c/code\u003e and \u003ccode\u003eFieldPosition\u003c/code\u003e to\n allow you to:\n \u003cul\u003e\n \u003cli\u003e progressively parse through pieces of a string\n \u003cli\u003e align the decimal point and other areas\n \u003c/ul\u003e\n For example, you can align numbers in two ways:\n \u003col\u003e\n \u003cli\u003e If you are using a monospaced font with spacing for alignment,\n      you can pass the \u003ccode\u003eFieldPosition\u003c/code\u003e in your format call, with\n      \u003ccode\u003efield\u003c/code\u003e \u003d \u003ccode\u003eINTEGER_FIELD\u003c/code\u003e. On output,\n      \u003ccode\u003egetEndIndex\u003c/code\u003e will be set to the offset between the\n      last character of the integer and the decimal. Add\n      (desiredSpaceCount - getEndIndex) spaces at the front of the string.\n\n \u003cli\u003e If you are using proportional fonts,\n      instead of padding with spaces, measure the width\n      of the string in pixels from the start to \u003ccode\u003egetEndIndex\u003c/code\u003e.\n      Then move the pen by\n      (desiredPixelWidth - widthToAlignmentPoint) before drawing the text.\n      It also works where there is no decimal, but possibly additional\n      characters at the end, e.g., with parentheses in negative\n      numbers: \"(12)\" for -12.\n \u003c/ol\u003e\n\n \u003ch3\u003e\u003ca name\u003d\"synchronization\"\u003eSynchronization\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e\n Number formats are generally not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{},"package":"java.text","superclass":"java.text.Format","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":["java.text.NumberFormat.Field"],"isInnerClass":false,"constructors":[],"fields":[{"name":"INTEGER_FIELD","comment":"Field constant used to construct a FieldPosition object. Signifies that\n the position of the integer part of a formatted number should be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"FRACTION_FIELD","comment":"Field constant used to construct a FieldPosition object. Signifies that\n the position of the fraction part of a formatted number should be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"}],"methods":[{"name":"format","comment":"Formats a number and appends the resulting text to the given string\n buffer.\n The number can be of any subclass of {@link java.lang.Number}.\n \u003cp\u003e\n This implementation extracts the number\u0027s value using\n {@link java.lang.Number#longValue()} for all integral type values that\n can be converted to \u003ccode\u003elong\u003c/code\u003e without loss of information,\n including \u003ccode\u003eBigInteger\u003c/code\u003e values with a\n {@link java.math.BigInteger#bitLength() bit length} of less than 64,\n and {@link java.lang.Number#doubleValue()} for all other types. It\n then calls\n {@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}\n or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.\n This may result in loss of magnitude information and precision for\n \u003ccode\u003eBigInteger\u003c/code\u003e and \u003ccode\u003eBigDecimal\u003c/code\u003e values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)","flatSignature":"(Object, StringBuffer, FieldPosition)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"number","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"toAppendTo","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"FieldPosition","qualifiedName":"java.text.FieldPosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseObject","comment":"Parses text from a string to produce a \u003ccode\u003eNumber\u003c/code\u003e.\n \u003cp\u003e\n The method attempts to parse text starting at the index given by\n \u003ccode\u003epos\u003c/code\u003e.\n If parsing succeeds, then the index of \u003ccode\u003epos\u003c/code\u003e is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n number is returned. The updated \u003ccode\u003epos\u003c/code\u003e can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of \u003ccode\u003epos\u003c/code\u003e is not\n changed, the error index of \u003ccode\u003epos\u003c/code\u003e is set to the index of\n the character where the error occurred, and null is returned.\n \u003cp\u003e\n See the {@link #parse(String, ParsePosition)} method for more information\n on number parsing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.text.ParsePosition)","flatSignature":"(String, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Specialization of format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"number","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Specialization of format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"number","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Specialization of format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, java.lang.StringBuffer, java.text.FieldPosition)","flatSignature":"(double, StringBuffer, FieldPosition)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"number","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"toAppendTo","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"FieldPosition","qualifiedName":"java.text.FieldPosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Specialization of format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.lang.StringBuffer, java.text.FieldPosition)","flatSignature":"(long, StringBuffer, FieldPosition)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"number","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"toAppendTo","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"FieldPosition","qualifiedName":"java.text.FieldPosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,\n Long.MAX_VALUE] and with no decimals), otherwise a Double.\n If IntegerOnly is set, will stop at a decimal\n point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop\n after the 1).\n Does not throw an exception; if no object can be parsed, index is\n unchanged!","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.text.ParsePosition)","flatSignature":"(String, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"Number","qualifiedName":"java.lang.Number","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"parsePosition","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Parses text from the beginning of the given string to produce a number.\n The method may not use the entire text of the given string.\n \u003cp\u003e\n See the {@link #parse(String, ParsePosition)} method for more information\n on number parsing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Number","qualifiedName":"java.lang.Number","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isParseIntegerOnly","comment":"Returns true if this format will parse numbers as integers only.\n For example in the English locale, with ParseIntegerOnly true, the\n string \"1234.\" would be parsed as the integer value 1234 and parsing\n would stop at the \".\" character.  Of course, the exact format accepted\n by the parse operation is locale dependant and determined by sub-classes\n of NumberFormat.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setParseIntegerOnly","comment":"Sets whether or not numbers should be parsed as integers only.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Returns a general-purpose number format for the current default\n {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n This is the same as calling\n {@link #getNumberInstance() getNumberInstance()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Returns a general-purpose number format for the specified locale.\n This is the same as calling\n {@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNumberInstance","comment":"Returns a general-purpose number format for the current default\n {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getNumberInstance(Locale)\n     getNumberInstance(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getNumberInstance","comment":"Returns a general-purpose number format for the specified locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getIntegerInstance","comment":"Returns an integer number format for the current default\n {@link java.util.Locale.Category#FORMAT FORMAT} locale. The\n returned number format is configured to round floating point numbers\n to the nearest integer using half-even rounding (see {@link\n java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,\n and to parse only the integer part of an input string (see {@link\n #isParseIntegerOnly isParseIntegerOnly}).\n \u003cp\u003eThis is equivalent to calling\n {@link #getIntegerInstance(Locale)\n     getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getIntegerInstance","comment":"Returns an integer number format for the specified locale. The\n returned number format is configured to round floating point numbers\n to the nearest integer using half-even rounding (see {@link\n java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,\n and to parse only the integer part of an input string (see {@link\n #isParseIntegerOnly isParseIntegerOnly}).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCurrencyInstance","comment":"Returns a currency format for the current default\n {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getCurrencyInstance(Locale)\n     getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getCurrencyInstance","comment":"Returns a currency format for the specified locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPercentInstance","comment":"Returns a percentage format for the current default\n {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getPercentInstance(Locale)\n     getPercentInstance(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getPercentInstance","comment":"Returns a percentage format for the specified locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"inLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAvailableLocales","comment":"Returns an array of all locales for which the\n \u003ccode\u003eget*Instance\u003c/code\u003e methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the Java\n runtime and by installed\n {@link java.text.spi.NumberFormatProvider NumberFormatProvider} implementations.\n It must contain at least a \u003ccode\u003eLocale\u003c/code\u003e instance equal to\n {@link java.util.Locale#US Locale.US}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Overrides hashCode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Overrides equals.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Overrides Cloneable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isGroupingUsed","comment":"Returns true if grouping is used in this format. For example, in the\n English locale, with grouping on, the number 1234567 might be formatted\n as \"1,234,567\". The grouping separator as well as the size of each group\n is locale dependant and is determined by sub-classes of NumberFormat.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setGroupingUsed","comment":"Set whether or not grouping will be used in this format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newValue","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMaximumIntegerDigits","comment":"Returns the maximum number of digits allowed in the integer portion of a\n number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMaximumIntegerDigits","comment":"Sets the maximum number of digits allowed in the integer portion of a\n number. maximumIntegerDigits must be \u0026ge; minimumIntegerDigits.  If the\n new value for maximumIntegerDigits is less than the current value\n of minimumIntegerDigits, then minimumIntegerDigits will also be set to\n the new value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newValue","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMinimumIntegerDigits","comment":"Returns the minimum number of digits allowed in the integer portion of a\n number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMinimumIntegerDigits","comment":"Sets the minimum number of digits allowed in the integer portion of a\n number. minimumIntegerDigits must be \u0026le; maximumIntegerDigits.  If the\n new value for minimumIntegerDigits exceeds the current value\n of maximumIntegerDigits, then maximumIntegerDigits will also be set to\n the new value","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newValue","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMaximumFractionDigits","comment":"Returns the maximum number of digits allowed in the fraction portion of a\n number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMaximumFractionDigits","comment":"Sets the maximum number of digits allowed in the fraction portion of a\n number. maximumFractionDigits must be \u0026ge; minimumFractionDigits.  If the\n new value for maximumFractionDigits is less than the current value\n of minimumFractionDigits, then minimumFractionDigits will also be set to\n the new value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newValue","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMinimumFractionDigits","comment":"Returns the minimum number of digits allowed in the fraction portion of a\n number.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMinimumFractionDigits","comment":"Sets the minimum number of digits allowed in the fraction portion of a\n number. minimumFractionDigits must be \u0026le; maximumFractionDigits.  If the\n new value for minimumFractionDigits exceeds the current value\n of maximumFractionDigits, then maximumIntegerDigits will also be set to\n the new value","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newValue","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCurrency","comment":"Gets the currency used by this number format when formatting\n currency values. The initial value is derived in a locale dependent\n way. The returned value may be null if no valid\n currency could be determined and no currency has been set using\n {@link #setCurrency(java.util.Currency) setCurrency}.\n \u003cp\u003e\n The default implementation throws\n \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Currency","qualifiedName":"java.util.Currency","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setCurrency","comment":"Sets the currency used by this number format when formatting\n currency values. This does not update the minimum or maximum\n number of fraction digits used by the number format.\n \u003cp\u003e\n The default implementation throws\n \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Currency)","flatSignature":"(Currency)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"currency","type":{"isPrimitive":false,"simpleName":"Currency","qualifiedName":"java.util.Currency","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRoundingMode","comment":"Gets the {@link java.math.RoundingMode} used in this NumberFormat.\n The default implementation of this method in NumberFormat\n always throws {@link java.lang.UnsupportedOperationException}.\n Subclasses which handle different rounding modes should override\n this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"RoundingMode","qualifiedName":"java.math.RoundingMode","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setRoundingMode","comment":"Sets the {@link java.math.RoundingMode} used in this NumberFormat.\n The default implementation of this method in NumberFormat always\n throws {@link java.lang.UnsupportedOperationException}.\n Subclasses which handle different rounding modes should override\n this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.RoundingMode)","flatSignature":"(RoundingMode)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"roundingMode","type":{"isPrimitive":false,"simpleName":"RoundingMode","qualifiedName":"java.math.RoundingMode","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.text.DecimalFormat","java.text.ChoiceFormat"],"enumConstants":[]}