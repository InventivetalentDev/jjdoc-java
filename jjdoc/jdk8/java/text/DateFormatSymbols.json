{"name":"DateFormatSymbols","comment":"\u003ccode\u003eDateFormatSymbols\u003c/code\u003e is a public class for encapsulating\n localizable date-time formatting data, such as the names of the\n months, the names of the days of the week, and the time zone data.\n \u003ccode\u003eSimpleDateFormat\u003c/code\u003e uses\n \u003ccode\u003eDateFormatSymbols\u003c/code\u003e to encapsulate this information.\n\n \u003cp\u003e\n Typically you shouldn\u0027t use \u003ccode\u003eDateFormatSymbols\u003c/code\u003e directly.\n Rather, you are encouraged to create a date-time formatter with the\n \u003ccode\u003eDateFormat\u003c/code\u003e class\u0027s factory methods: \u003ccode\u003egetTimeInstance\u003c/code\u003e,\n \u003ccode\u003egetDateInstance\u003c/code\u003e, or \u003ccode\u003egetDateTimeInstance\u003c/code\u003e.\n These methods automatically create a \u003ccode\u003eDateFormatSymbols\u003c/code\u003e for\n the formatter so that you don\u0027t have to. After the\n formatter is created, you may modify its format pattern using the\n \u003ccode\u003esetPattern\u003c/code\u003e method. For more information about\n creating formatters using \u003ccode\u003eDateFormat\u003c/code\u003e\u0027s factory methods,\n see {@link DateFormat}.\n\n \u003cp\u003e\n If you decide to create a date-time formatter with a specific\n format pattern for a specific locale, you can do so with:\n \u003cblockquote\u003e\n \u003cpre\u003e\n new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e\n \u003ccode\u003eDateFormatSymbols\u003c/code\u003e objects are cloneable. When you obtain\n a \u003ccode\u003eDateFormatSymbols\u003c/code\u003e object, feel free to modify the\n date-time formatting data. For instance, you can replace the localized\n date-time format pattern characters with the ones that you feel easy\n to remember. Or you can change the representative cities\n to your favorite ones.\n\n \u003cp\u003e\n New \u003ccode\u003eDateFormatSymbols\u003c/code\u003e subclasses may be added to support\n \u003ccode\u003eSimpleDateFormat\u003c/code\u003e for date-time formatting for additional locales.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DateFormatSymbols","qualifiedName":"java.text.DateFormatSymbols","dimension":"","elementType":{},"package":"java.text","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Cloneable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DateFormatSymbols","comment":"Construct a DateFormatSymbols object by loading format data from\n resources for the default {@link java.util.Locale.Category#FORMAT FORMAT}\n locale. This constructor can only\n construct instances for the locales supported by the Java\n runtime environment, not for those supported by installed\n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations. For full locale coverage, use the\n {@link #getInstance(Locale) getInstance} method.\n \u003cp\u003eThis is equivalent to calling\n {@link #DateFormatSymbols(Locale)\n     DateFormatSymbols(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"DateFormatSymbols","comment":"Construct a DateFormatSymbols object by loading format data from\n resources for the given locale. This constructor can only\n construct instances for the locales supported by the Java\n runtime environment, not for those supported by installed\n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations. For full locale coverage, use the\n {@link #getInstance(Locale) getInstance} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getAvailableLocales","comment":"Returns an array of all locales for which the\n \u003ccode\u003egetInstance\u003c/code\u003e methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the\n Java runtime and by installed\n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations.  It must contain at least a \u003ccode\u003eLocale\u003c/code\u003e\n instance equal to {@link java.util.Locale#US Locale.US}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Gets the \u003ccode\u003eDateFormatSymbols\u003c/code\u003e instance for the default\n locale.  This method provides access to \u003ccode\u003eDateFormatSymbols\u003c/code\u003e\n instances for locales supported by the Java runtime itself as well\n as for those supported by installed\n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations.\n \u003cp\u003eThis is equivalent to calling {@link #getInstance(Locale)\n     getInstance(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DateFormatSymbols","qualifiedName":"java.text.DateFormatSymbols","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Gets the \u003ccode\u003eDateFormatSymbols\u003c/code\u003e instance for the specified\n locale.  This method provides access to \u003ccode\u003eDateFormatSymbols\u003c/code\u003e\n instances for locales supported by the Java runtime itself as well\n as for those supported by installed\n {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}\n implementations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"DateFormatSymbols","qualifiedName":"java.text.DateFormatSymbols","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getEras","comment":"Gets era strings. For example: \"AD\" and \"BC\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setEras","comment":"Sets era strings. For example: \"AD\" and \"BC\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newEras","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getMonths","comment":"Gets month strings. For example: \"January\", \"February\", etc.\n\n \u003cp\u003eIf the language requires different forms for formatting and\n stand-alone usages, this method returns month names in the\n formatting form. For example, the preferred month name for\n January in the Czech language is \u003cem\u003eledna\u003c/em\u003e in the\n formatting form, while it is \u003cem\u003eleden\u003c/em\u003e in the stand-alone\n form. This method returns {@code \"ledna\"} in this case. Refer\n to the \u003ca href\u003d\"http://unicode.org/reports/tr35/#Calendar_Elements\"\u003e\n Calendar Elements in the Unicode Locale Data Markup Language\n (LDML) specification\u003c/a\u003e for more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMonths","comment":"Sets month strings. For example: \"January\", \"February\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newMonths","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getShortMonths","comment":"Gets short month strings. For example: \"Jan\", \"Feb\", etc.\n\n \u003cp\u003eIf the language requires different forms for formatting and\n stand-alone usages, This method returns short month names in\n the formatting form. For example, the preferred abbreviation\n for January in the Catalan language is \u003cem\u003ede gen.\u003c/em\u003e in the\n formatting form, while it is \u003cem\u003egen.\u003c/em\u003e in the stand-alone\n form. This method returns {@code \"de gen.\"} in this case. Refer\n to the \u003ca href\u003d\"http://unicode.org/reports/tr35/#Calendar_Elements\"\u003e\n Calendar Elements in the Unicode Locale Data Markup Language\n (LDML) specification\u003c/a\u003e for more details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setShortMonths","comment":"Sets short month strings. For example: \"Jan\", \"Feb\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newShortMonths","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getWeekdays","comment":"Gets weekday strings. For example: \"Sunday\", \"Monday\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setWeekdays","comment":"Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newWeekdays","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getShortWeekdays","comment":"Gets short weekday strings. For example: \"Sun\", \"Mon\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setShortWeekdays","comment":"Sets short weekday strings. For example: \"Sun\", \"Mon\", etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newShortWeekdays","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getAmPmStrings","comment":"Gets ampm strings. For example: \"AM\" and \"PM\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setAmPmStrings","comment":"Sets ampm strings. For example: \"AM\" and \"PM\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newAmpms","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getZoneStrings","comment":"Gets time zone strings.  Use of this method is discouraged; use\n {@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()}\n instead.\n \u003cp\u003e\n The value returned is a\n two-dimensional array of strings of size \u003cem\u003en\u003c/em\u003e by \u003cem\u003em\u003c/em\u003e,\n where \u003cem\u003em\u003c/em\u003e is at least 5.  Each of the \u003cem\u003en\u003c/em\u003e rows is an\n entry containing the localized names for a single \u003ccode\u003eTimeZone\u003c/code\u003e.\n Each such row contains (with \u003ccode\u003ei\u003c/code\u003e ranging from\n 0..\u003cem\u003en\u003c/em\u003e-1):\n \u003cul\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][0]\u003c/code\u003e - time zone ID\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][1]\u003c/code\u003e - long name of zone in standard\n time\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][2]\u003c/code\u003e - short name of zone in\n standard time\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][3]\u003c/code\u003e - long name of zone in daylight\n saving time\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][4]\u003c/code\u003e - short name of zone in daylight\n saving time\u003c/li\u003e\n \u003c/ul\u003e\n The zone ID is \u003cem\u003enot\u003c/em\u003e localized; it\u0027s one of the valid IDs of\n the {@link java.util.TimeZone TimeZone} class that are not\n \u003ca href\u003d\"../util/TimeZone.html#CustomID\"\u003ecustom IDs\u003c/a\u003e.\n All other entries are localized names.  If a zone does not implement\n daylight saving time, the daylight saving time names should not be used.\n \u003cp\u003e\n If {@link #setZoneStrings(String[][]) setZoneStrings} has been called\n on this \u003ccode\u003eDateFormatSymbols\u003c/code\u003e instance, then the strings\n provided by that call are returned. Otherwise, the returned array\n contains names provided by the Java runtime and by installed\n {@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider}\n implementations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[][]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setZoneStrings","comment":"Sets time zone strings.  The argument must be a\n two-dimensional array of strings of size \u003cem\u003en\u003c/em\u003e by \u003cem\u003em\u003c/em\u003e,\n where \u003cem\u003em\u003c/em\u003e is at least 5.  Each of the \u003cem\u003en\u003c/em\u003e rows is an\n entry containing the localized names for a single \u003ccode\u003eTimeZone\u003c/code\u003e.\n Each such row contains (with \u003ccode\u003ei\u003c/code\u003e ranging from\n 0..\u003cem\u003en\u003c/em\u003e-1):\n \u003cul\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][0]\u003c/code\u003e - time zone ID\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][1]\u003c/code\u003e - long name of zone in standard\n time\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][2]\u003c/code\u003e - short name of zone in\n standard time\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][3]\u003c/code\u003e - long name of zone in daylight\n saving time\u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ezoneStrings[i][4]\u003c/code\u003e - short name of zone in daylight\n saving time\u003c/li\u003e\n \u003c/ul\u003e\n The zone ID is \u003cem\u003enot\u003c/em\u003e localized; it\u0027s one of the valid IDs of\n the {@link java.util.TimeZone TimeZone} class that are not\n \u003ca href\u003d\"../util/TimeZone.html#CustomID\"\u003ecustom IDs\u003c/a\u003e.\n All other entries are localized names.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[][])","flatSignature":"(String[][])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newZoneStrings","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[][]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}}],"typeParameters":[]},{"name":"getLocalPatternChars","comment":"Gets localized date-time pattern characters. For example: \u0027u\u0027, \u0027t\u0027, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setLocalPatternChars","comment":"Sets localized date-time pattern characters. For example: \u0027u\u0027, \u0027t\u0027, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newLocalPatternChars","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Overrides Cloneable","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Override hashCode.\n Generates a hash code for the DateFormatSymbols object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Override equals","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}