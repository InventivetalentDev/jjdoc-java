{"name":"Format","comment":"\u003ccode\u003eFormat\u003c/code\u003e is an abstract base class for formatting locale-sensitive\n information such as dates, messages, and numbers.\n\n \u003cp\u003e\n \u003ccode\u003eFormat\u003c/code\u003e defines the programming interface for formatting\n locale-sensitive objects into \u003ccode\u003eString\u003c/code\u003es (the\n \u003ccode\u003eformat\u003c/code\u003e method) and for parsing \u003ccode\u003eString\u003c/code\u003es back\n into objects (the \u003ccode\u003eparseObject\u003c/code\u003e method).\n\n \u003cp\u003e\n Generally, a format\u0027s \u003ccode\u003eparseObject\u003c/code\u003e method must be able to parse\n any string formatted by its \u003ccode\u003eformat\u003c/code\u003e method. However, there may\n be exceptional cases where this is not possible. For example, a\n \u003ccode\u003eformat\u003c/code\u003e method might create two adjacent integer numbers with\n no separator in between, and in this case the \u003ccode\u003eparseObject\u003c/code\u003e could\n not tell which digits belong to which number.\n\n \u003ch3\u003eSubclassing\u003c/h3\u003e\n\n \u003cp\u003e\n The Java Platform provides three specialized subclasses of \u003ccode\u003eFormat\u003c/code\u003e--\n \u003ccode\u003eDateFormat\u003c/code\u003e, \u003ccode\u003eMessageFormat\u003c/code\u003e, and\n \u003ccode\u003eNumberFormat\u003c/code\u003e--for formatting dates, messages, and numbers,\n respectively.\n \u003cp\u003e\n Concrete subclasses must implement three methods:\n \u003col\u003e\n \u003cli\u003e \u003ccode\u003eformat(Object obj, StringBuffer toAppendTo, FieldPosition pos)\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eformatToCharacterIterator(Object obj)\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eparseObject(String source, ParsePosition pos)\u003c/code\u003e\n \u003c/ol\u003e\n These general methods allow polymorphic parsing and formatting of objects\n and are used, for example, by \u003ccode\u003eMessageFormat\u003c/code\u003e.\n Subclasses often also provide additional \u003ccode\u003eformat\u003c/code\u003e methods for\n specific input types as well as \u003ccode\u003eparse\u003c/code\u003e methods for specific\n result types. Any \u003ccode\u003eparse\u003c/code\u003e method that does not take a\n \u003ccode\u003eParsePosition\u003c/code\u003e argument should throw \u003ccode\u003eParseException\u003c/code\u003e\n when no text in the required format is at the beginning of the input text.\n\n \u003cp\u003e\n Most subclasses will also implement the following factory methods:\n \u003col\u003e\n \u003cli\u003e\n \u003ccode\u003egetInstance\u003c/code\u003e for getting a useful format object appropriate\n for the current locale\n \u003cli\u003e\n \u003ccode\u003egetInstance(Locale)\u003c/code\u003e for getting a useful format\n object appropriate for the specified locale\n \u003c/ol\u003e\n In addition, some subclasses may also implement other\n \u003ccode\u003egetXxxxInstance\u003c/code\u003e methods for more specialized control. For\n example, the \u003ccode\u003eNumberFormat\u003c/code\u003e class provides\n \u003ccode\u003egetPercentInstance\u003c/code\u003e and \u003ccode\u003egetCurrencyInstance\u003c/code\u003e\n methods for getting specialized number formatters.\n\n \u003cp\u003e\n Subclasses of \u003ccode\u003eFormat\u003c/code\u003e that allow programmers to create objects\n for locales (with \u003ccode\u003egetInstance(Locale)\u003c/code\u003e for example)\n must also implement the following class method:\n \u003cblockquote\u003e\n \u003cpre\u003e\n public static Locale[] getAvailableLocales()\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e\n And finally subclasses may define a set of constants to identify the various\n fields in the formatted output. These constants are used to create a FieldPosition\n object which identifies what information is contained in the field and its\n position in the formatted result. These constants should be named\n \u003ccode\u003e\u003cem\u003eitem\u003c/em\u003e_FIELD\u003c/code\u003e where \u003ccode\u003e\u003cem\u003eitem\u003c/em\u003e\u003c/code\u003e identifies\n the field. For examples of these constants, see \u003ccode\u003eERA_FIELD\u003c/code\u003e and its\n friends in {@link DateFormat}.\n\n \u003ch4\u003e\u003ca name\u003d\"synchronization\"\u003eSynchronization\u003c/a\u003e\u003c/h4\u003e\n\n \u003cp\u003e\n Formats are generally not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Format","qualifiedName":"java.text.Format","dimension":"","elementType":{},"package":"java.text","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Cloneable"],"isAbstract":true,"isStatic":false,"innerClasses":["java.text.Format.Field"],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"format","comment":"Formats an object to produce a string. This is equivalent to\n \u003cblockquote\u003e\n {@link #format(Object, StringBuffer, FieldPosition) format}\u003ccode\u003e(obj,\n         new StringBuffer(), new FieldPosition(0)).toString();\u003c/code\u003e\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats an object and appends the resulting text to a given string\n buffer.\n If the \u003ccode\u003epos\u003c/code\u003e argument identifies a field used by the format,\n then its indices are set to the beginning and end of the first such\n field encountered.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)","flatSignature":"(Object, StringBuffer, FieldPosition)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"toAppendTo","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"FieldPosition","qualifiedName":"java.text.FieldPosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"formatToCharacterIterator","comment":"Formats an Object producing an \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e.\n You can use the returned \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e\n to build the resulting String, as well as to determine information\n about the resulting String.\n \u003cp\u003e\n Each attribute key of the AttributedCharacterIterator will be of type\n \u003ccode\u003eField\u003c/code\u003e. It is up to each \u003ccode\u003eFormat\u003c/code\u003e implementation\n to define what the legal values are for each attribute in the\n \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e, but typically the attribute\n key is also used as the attribute value.\n \u003cp\u003eThe default implementation creates an\n \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e with no attributes. Subclasses\n that support fields should override this and create an\n \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e with meaningful attributes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"AttributedCharacterIterator","qualifiedName":"java.text.AttributedCharacterIterator","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseObject","comment":"Parses text from a string to produce an object.\n \u003cp\u003e\n The method attempts to parse text starting at the index given by\n \u003ccode\u003epos\u003c/code\u003e.\n If parsing succeeds, then the index of \u003ccode\u003epos\u003c/code\u003e is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n object is returned. The updated \u003ccode\u003epos\u003c/code\u003e can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of \u003ccode\u003epos\u003c/code\u003e is not\n changed, the error index of \u003ccode\u003epos\u003c/code\u003e is set to the index of\n the character where the error occurred, and null is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.text.ParsePosition)","flatSignature":"(String, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseObject","comment":"Parses text from the beginning of the given string to produce an object.\n The method may not use the entire text of the given string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Creates and returns a copy of this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.text.DateFormat","java.text.NumberFormat","java.text.MessageFormat"],"enumConstants":[]}