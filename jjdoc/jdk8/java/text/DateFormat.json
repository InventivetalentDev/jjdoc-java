{"name":"DateFormat","comment":"{@code DateFormat} is an abstract class for date/time formatting subclasses which\n formats and parses dates or time in a language-independent manner.\n The date/time formatting subclass, such as {@link SimpleDateFormat}, allows for\n formatting (i.e., date \u0026rarr; text), parsing (text \u0026rarr; date), and\n normalization.  The date is represented as a \u003ccode\u003eDate\u003c/code\u003e object or\n as the milliseconds since January 1, 1970, 00:00:00 GMT.\n\n \u003cp\u003e{@code DateFormat} provides many class methods for obtaining default date/time\n formatters based on the default or a given locale and a number of formatting\n styles. The formatting styles include {@link #FULL}, {@link #LONG}, {@link #MEDIUM}, and {@link #SHORT}. More\n detail and examples of using these styles are provided in the method\n descriptions.\n\n \u003cp\u003e{@code DateFormat} helps you to format and parse dates for any locale.\n Your code can be completely independent of the locale conventions for\n months, days of the week, or even the calendar format: lunar vs. solar.\n\n \u003cp\u003eTo format a date for the current Locale, use one of the\n static factory methods:\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n myString \u003d DateFormat.getDateInstance().format(myDate);\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n \u003cp\u003eIf you are formatting multiple dates, it is\n more efficient to get the format and use it multiple times so that\n the system doesn\u0027t have to fetch the information about the local\n language and country conventions multiple times.\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n DateFormat df \u003d DateFormat.getDateInstance();\n for (int i \u003d 0; i \u003c myDate.length; ++i) {\n     output.println(df.format(myDate[i]) + \"; \");\n }\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n \u003cp\u003eTo format a date for a different Locale, specify it in the\n call to {@link #getDateInstance(int, Locale) getDateInstance()}.\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n DateFormat df \u003d DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n \u003cp\u003eYou can use a DateFormat to parse also.\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n myDate \u003d df.parse(myString);\n }\u003c/pre\u003e\n \u003c/blockquote\u003e\n \u003cp\u003eUse {@code getDateInstance} to get the normal date format for that country.\n There are other static factory methods available.\n Use {@code getTimeInstance} to get the time format for that country.\n Use {@code getDateTimeInstance} to get a date and time format. You can pass in\n different options to these factory methods to control the length of the\n result; from {@link #SHORT} to {@link #MEDIUM} to {@link #LONG} to {@link #FULL}. The exact result depends\n on the locale, but generally:\n \u003cul\u003e\u003cli\u003e{@link #SHORT} is completely numeric, such as {@code 12.13.52} or {@code 3:30pm}\n \u003cli\u003e{@link #MEDIUM} is longer, such as {@code Jan 12, 1952}\n \u003cli\u003e{@link #LONG} is longer, such as {@code January 12, 1952} or {@code 3:30:32pm}\n \u003cli\u003e{@link #FULL} is pretty completely specified, such as\n {@code Tuesday, April 12, 1952 AD or 3:30:42pm PST}.\n \u003c/ul\u003e\n\n \u003cp\u003eYou can also set the time zone on the format if you wish.\n If you want even more control over the format or parsing,\n (or want to give your users more control),\n you can try casting the {@code DateFormat} you get from the factory methods\n to a {@link SimpleDateFormat}. This will work for the majority\n of countries; just remember to put it in a {@code try} block in case you\n encounter an unusual one.\n\n \u003cp\u003eYou can also use forms of the parse and format methods with\n {@link ParsePosition} and {@link FieldPosition} to\n allow you to\n \u003cul\u003e\u003cli\u003eprogressively parse through pieces of a string.\n \u003cli\u003ealign any particular field, or find out where it is for selection\n on the screen.\n \u003c/ul\u003e\n\n \u003ch3\u003e\u003ca name\u003d\"synchronization\"\u003eSynchronization\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003e\n Date formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{},"package":"java.text","superclass":"java.text.Format","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":["java.text.DateFormat.Field"],"isInnerClass":false,"constructors":[],"fields":[{"name":"ERA_FIELD","comment":"Useful constant for ERA field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"YEAR_FIELD","comment":"Useful constant for YEAR field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"MONTH_FIELD","comment":"Useful constant for MONTH field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"DATE_FIELD","comment":"Useful constant for DATE field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"HOUR_OF_DAY1_FIELD","comment":"Useful constant for one-based HOUR_OF_DAY field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.\n For example, 23:59 + 01:00 results in 24:59.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"HOUR_OF_DAY0_FIELD","comment":"Useful constant for zero-based HOUR_OF_DAY field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.\n For example, 23:59 + 01:00 results in 00:59.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"MINUTE_FIELD","comment":"Useful constant for MINUTE field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"SECOND_FIELD","comment":"Useful constant for SECOND field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"MILLISECOND_FIELD","comment":"Useful constant for MILLISECOND field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"DAY_OF_WEEK_FIELD","comment":"Useful constant for DAY_OF_WEEK field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"},{"name":"DAY_OF_YEAR_FIELD","comment":"Useful constant for DAY_OF_YEAR field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"},{"name":"DAY_OF_WEEK_IN_MONTH_FIELD","comment":"Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"11"},{"name":"WEEK_OF_YEAR_FIELD","comment":"Useful constant for WEEK_OF_YEAR field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"12"},{"name":"WEEK_OF_MONTH_FIELD","comment":"Useful constant for WEEK_OF_MONTH field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"13"},{"name":"AM_PM_FIELD","comment":"Useful constant for AM_PM field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"14"},{"name":"HOUR1_FIELD","comment":"Useful constant for one-based HOUR field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR1_FIELD is used for the one-based 12-hour clock.\n For example, 11:30 PM + 1 hour results in 12:30 AM.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"15"},{"name":"HOUR0_FIELD","comment":"Useful constant for zero-based HOUR field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR0_FIELD is used for the zero-based 12-hour clock.\n For example, 11:30 PM + 1 hour results in 00:30 AM.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"TIMEZONE_FIELD","comment":"Useful constant for TIMEZONE field alignment.\n Used in FieldPosition of date/time formatting.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"17"},{"name":"FULL","comment":"Constant for full style pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"LONG","comment":"Constant for long style pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"MEDIUM","comment":"Constant for medium style pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"SHORT","comment":"Constant for short style pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"DEFAULT","comment":"Constant for default style pattern.  Its value is MEDIUM.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"}],"methods":[{"name":"format","comment":"Overrides Format.\n Formats a time object into a time string. Examples of time objects\n are a time value expressed in milliseconds and a Date object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)","flatSignature":"(Object, StringBuffer, FieldPosition)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"toAppendTo","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"fieldPosition","type":{"isPrimitive":false,"simpleName":"FieldPosition","qualifiedName":"java.text.FieldPosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats a Date into a date/time string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)","flatSignature":"(Date, StringBuffer, FieldPosition)","returnType":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}},{"name":"toAppendTo","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}},{"name":"fieldPosition","type":{"isPrimitive":false,"simpleName":"FieldPosition","qualifiedName":"java.text.FieldPosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"format","comment":"Formats a Date into a date/time string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Date)","flatSignature":"(Date)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"date","type":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Parses text from the beginning of the given string to produce a date.\n The method may not use the entire text of the given string.\n \u003cp\u003e\n See the {@link #parse(String, ParsePosition)} method for more information\n on date parsing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parse","comment":"Parse a date/time string according to the given parse position.  For\n example, a time text {@code \"07/10/96 4:5 PM, PDT\"} will be parsed into a {@code Date}\n that is equivalent to {@code Date(837039900000L)}.\n\n \u003cp\u003e By default, parsing is lenient: If the input is not in the form used\n by this object\u0027s format method but can still be parsed as a date, then\n the parse succeeds.  Clients may insist on strict adherence to the\n format by calling {@link #setLenient(boolean) setLenient(false)}.\n\n \u003cp\u003eThis parsing operation uses the {@link #calendar} to produce\n a {@code Date}. As a result, the {@code calendar}\u0027s date-time\n fields and the {@code TimeZone} value may have been\n overwritten, depending on subclass implementations. Any {@code\n TimeZone} value that has previously been set by a call to\n {@link #setTimeZone(java.util.TimeZone) setTimeZone} may need\n to be restored for further operations.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.text.ParsePosition)","flatSignature":"(String, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"Date","qualifiedName":"java.util.Date","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseObject","comment":"Parses text from a string to produce a \u003ccode\u003eDate\u003c/code\u003e.\n \u003cp\u003e\n The method attempts to parse text starting at the index given by\n \u003ccode\u003epos\u003c/code\u003e.\n If parsing succeeds, then the index of \u003ccode\u003epos\u003c/code\u003e is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n date is returned. The updated \u003ccode\u003epos\u003c/code\u003e can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of \u003ccode\u003epos\u003c/code\u003e is not\n changed, the error index of \u003ccode\u003epos\u003c/code\u003e is set to the index of\n the character where the error occurred, and null is returned.\n \u003cp\u003e\n See the {@link #parse(String, ParsePosition)} method for more information\n on date parsing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.text.ParsePosition)","flatSignature":"(String, ParsePosition)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"pos","type":{"isPrimitive":false,"simpleName":"ParsePosition","qualifiedName":"java.text.ParsePosition","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeInstance","comment":"Gets the time formatter with the default formatting style\n for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getTimeInstance(int, Locale) getTimeInstance(DEFAULT,\n     Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getTimeInstance","comment":"Gets the time formatter with the given formatting style\n for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getTimeInstance(int, Locale) getTimeInstance(style,\n     Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeInstance","comment":"Gets the time formatter with the given formatting style\n for the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.Locale)","flatSignature":"(int, Locale)","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDateInstance","comment":"Gets the date formatter with the default formatting style\n for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getDateInstance(int, Locale) getDateInstance(DEFAULT,\n     Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getDateInstance","comment":"Gets the date formatter with the given formatting style\n for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getDateInstance(int, Locale) getDateInstance(style,\n     Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDateInstance","comment":"Gets the date formatter with the given formatting style\n for the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.Locale)","flatSignature":"(int, Locale)","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"style","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDateTimeInstance","comment":"Gets the date/time formatter with the default formatting style\n for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(DEFAULT,\n     DEFAULT, Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getDateTimeInstance","comment":"Gets the date/time formatter with the given date and time\n formatting styles for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n \u003cp\u003eThis is equivalent to calling\n {@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(dateStyle,\n     timeStyle, Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dateStyle","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"timeStyle","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDateTimeInstance","comment":"Gets the date/time formatter with the given formatting styles\n for the given locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, java.util.Locale)","flatSignature":"(int, int, Locale)","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dateStyle","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"timeStyle","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"aLocale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInstance","comment":"Get a default date/time formatter that uses the SHORT style for both the\n date and the time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DateFormat","qualifiedName":"java.text.DateFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getAvailableLocales","comment":"Returns an array of all locales for which the\n \u003ccode\u003eget*Instance\u003c/code\u003e methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the Java\n runtime and by installed\n {@link java.text.spi.DateFormatProvider DateFormatProvider} implementations.\n It must contain at least a \u003ccode\u003eLocale\u003c/code\u003e instance equal to\n {@link java.util.Locale#US Locale.US}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setCalendar","comment":"Set the calendar to be used by this date format.  Initially, the default\n calendar for the specified or default locale is used.\n\n \u003cp\u003eAny {@link java.util.TimeZone TimeZone} and {@linkplain\n #isLenient() leniency} values that have previously been set are\n overwritten by {@code newCalendar}\u0027s values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Calendar)","flatSignature":"(Calendar)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newCalendar","type":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCalendar","comment":"Gets the calendar associated with this date/time formatter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Calendar","qualifiedName":"java.util.Calendar","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setNumberFormat","comment":"Allows you to set the number formatter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.text.NumberFormat)","flatSignature":"(NumberFormat)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newNumberFormat","type":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNumberFormat","comment":"Gets the number formatter which this date/time formatter uses to\n format and parse a time.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"NumberFormat","qualifiedName":"java.text.NumberFormat","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTimeZone","comment":"Sets the time zone for the calendar of this {@code DateFormat} object.\n This method is equivalent to the following call.\n \u003cblockquote\u003e\u003cpre\u003e{@code\n getCalendar().setTimeZone(zone)\n }\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003eThe {@code TimeZone} set by this method is overwritten by a\n {@link #setCalendar(java.util.Calendar) setCalendar} call.\n\n \u003cp\u003eThe {@code TimeZone} set by this method may be overwritten as\n a result of a call to the parse method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.TimeZone)","flatSignature":"(TimeZone)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zone","type":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getTimeZone","comment":"Gets the time zone.\n This method is equivalent to the following call.\n \u003cblockquote\u003e\u003cpre\u003e{@code\n getCalendar().getTimeZone()\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TimeZone","qualifiedName":"java.util.TimeZone","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setLenient","comment":"Specify whether or not date/time parsing is to be lenient.  With\n lenient parsing, the parser may use heuristics to interpret inputs that\n do not precisely match this object\u0027s format.  With strict parsing,\n inputs must match this object\u0027s format.\n\n \u003cp\u003eThis method is equivalent to the following call.\n \u003cblockquote\u003e\u003cpre\u003e{@code\n getCalendar().setLenient(lenient)\n }\u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003eThis leniency value is overwritten by a call to {@link\n #setCalendar(java.util.Calendar) setCalendar()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"lenient","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLenient","comment":"Tell whether date/time parsing is to be lenient.\n This method is equivalent to the following call.\n \u003cblockquote\u003e\u003cpre\u003e{@code\n getCalendar().isLenient()\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Overrides hashCode","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Overrides equals","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Overrides Cloneable","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.text.SimpleDateFormat"],"enumConstants":[]}