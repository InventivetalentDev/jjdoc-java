{"name":"DecimalFormatSymbols","comment":"This class represents the set of symbols (such as the decimal separator,\n the grouping separator, and so on) needed by \u003ccode\u003eDecimalFormat\u003c/code\u003e\n to format numbers. \u003ccode\u003eDecimalFormat\u003c/code\u003e creates for itself an instance of\n \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e from its locale data.  If you need to change any\n of these symbols, you can get the \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e object from\n your \u003ccode\u003eDecimalFormat\u003c/code\u003e and modify it.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"DecimalFormatSymbols","qualifiedName":"java.text.DecimalFormatSymbols","dimension":"","elementType":{},"package":"java.text","superclass":"java.lang.Object","interfaces":["java.lang.Cloneable","java.io.Serializable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"DecimalFormatSymbols","comment":"Create a DecimalFormatSymbols object for the default\n {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n This constructor can only construct instances for the locales\n supported by the Java runtime environment, not for those\n supported by installed\n {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}\n implementations. For full locale coverage, use the\n {@link #getInstance(Locale) getInstance} method.\n \u003cp\u003eThis is equivalent to calling\n {@link #DecimalFormatSymbols(Locale)\n     DecimalFormatSymbols(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"DecimalFormatSymbols","comment":"Create a DecimalFormatSymbols object for the given locale.\n This constructor can only construct instances for the locales\n supported by the Java runtime environment, not for those\n supported by installed\n {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}\n implementations. For full locale coverage, use the\n {@link #getInstance(Locale) getInstance} method.\n If the specified locale contains the {@link java.util.Locale#UNICODE_LOCALE_EXTENSION}\n for the numbering system, the instance is initialized with the specified numbering\n system if the JRE implementation supports it. For example,\n \u003cpre\u003e\n NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))\n \u003c/pre\u003e\n This may return a {@code NumberFormat} instance with the Thai numbering system,\n instead of the Latin numbering system.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getAvailableLocales","comment":"Returns an array of all locales for which the\n \u003ccode\u003egetInstance\u003c/code\u003e methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the Java\n runtime and by installed\n {@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}\n implementations.  It must contain at least a \u003ccode\u003eLocale\u003c/code\u003e\n instance equal to {@link java.util.Locale#US Locale.US}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Gets the \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e instance for the default\n locale.  This method provides access to \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\n instances for locales supported by the Java runtime itself as well\n as for those supported by installed\n {@link java.text.spi.DecimalFormatSymbolsProvider\n DecimalFormatSymbolsProvider} implementations.\n \u003cp\u003eThis is equivalent to calling\n {@link #getInstance(Locale)\n     getInstance(Locale.getDefault(Locale.Category.FORMAT))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"DecimalFormatSymbols","qualifiedName":"java.text.DecimalFormatSymbols","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getInstance","comment":"Gets the \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e instance for the specified\n locale.  This method provides access to \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\n instances for locales supported by the Java runtime itself as well\n as for those supported by installed\n {@link java.text.spi.DecimalFormatSymbolsProvider\n DecimalFormatSymbolsProvider} implementations.\n If the specified locale contains the {@link java.util.Locale#UNICODE_LOCALE_EXTENSION}\n for the numbering system, the instance is initialized with the specified numbering\n system if the JRE implementation supports it. For example,\n \u003cpre\u003e\n NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))\n \u003c/pre\u003e\n This may return a {@code NumberFormat} instance with the Thai numbering system,\n instead of the Latin numbering system.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"DecimalFormatSymbols","qualifiedName":"java.text.DecimalFormatSymbols","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getZeroDigit","comment":"Gets the character used for zero. Different for Arabic, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setZeroDigit","comment":"Sets the character used for zero. Different for Arabic, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"zeroDigit","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getGroupingSeparator","comment":"Gets the character used for thousands separator. Different for French, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setGroupingSeparator","comment":"Sets the character used for thousands separator. Different for French, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"groupingSeparator","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDecimalSeparator","comment":"Gets the character used for decimal sign. Different for French, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setDecimalSeparator","comment":"Sets the character used for decimal sign. Different for French, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"decimalSeparator","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPerMill","comment":"Gets the character used for per mille sign. Different for Arabic, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPerMill","comment":"Sets the character used for per mille sign. Different for Arabic, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"perMill","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPercent","comment":"Gets the character used for percent sign. Different for Arabic, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPercent","comment":"Sets the character used for percent sign. Different for Arabic, etc.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"percent","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDigit","comment":"Gets the character used for a digit in a pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setDigit","comment":"Sets the character used for a digit in a pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"digit","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPatternSeparator","comment":"Gets the character used to separate positive and negative subpatterns\n in a pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPatternSeparator","comment":"Sets the character used to separate positive and negative subpatterns\n in a pattern.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"patternSeparator","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInfinity","comment":"Gets the string used to represent infinity. Almost always left\n unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setInfinity","comment":"Sets the string used to represent infinity. Almost always left\n unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"infinity","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNaN","comment":"Gets the string used to represent \"not a number\". Almost always left\n unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setNaN","comment":"Sets the string used to represent \"not a number\". Almost always left\n unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"NaN","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMinusSign","comment":"Gets the character used to represent minus sign. If no explicit\n negative format is specified, one is formed by prefixing\n minusSign to the positive format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMinusSign","comment":"Sets the character used to represent minus sign. If no explicit\n negative format is specified, one is formed by prefixing\n minusSign to the positive format.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"minusSign","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCurrencySymbol","comment":"Returns the currency symbol for the currency of these\n DecimalFormatSymbols in their locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setCurrencySymbol","comment":"Sets the currency symbol for the currency of these\n DecimalFormatSymbols in their locale.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"currency","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInternationalCurrencySymbol","comment":"Returns the ISO 4217 currency code of the currency of these\n DecimalFormatSymbols.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setInternationalCurrencySymbol","comment":"Sets the ISO 4217 currency code of the currency of these\n DecimalFormatSymbols.\n If the currency code is valid (as defined by\n {@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),\n this also sets the currency attribute to the corresponding Currency\n instance and the currency symbol attribute to the currency\u0027s symbol\n in the DecimalFormatSymbols\u0027 locale. If the currency code is not valid,\n then the currency attribute is set to null and the currency symbol\n attribute is not modified.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"currencyCode","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCurrency","comment":"Gets the currency of these DecimalFormatSymbols. May be null if the\n currency symbol attribute was previously set to a value that\u0027s not\n a valid ISO 4217 currency code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Currency","qualifiedName":"java.util.Currency","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setCurrency","comment":"Sets the currency of these DecimalFormatSymbols.\n This also sets the currency symbol attribute to the currency\u0027s symbol\n in the DecimalFormatSymbols\u0027 locale, and the international currency\n symbol attribute to the currency\u0027s ISO 4217 currency code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Currency)","flatSignature":"(Currency)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"currency","type":{"isPrimitive":false,"simpleName":"Currency","qualifiedName":"java.util.Currency","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMonetaryDecimalSeparator","comment":"Returns the monetary decimal separator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setMonetaryDecimalSeparator","comment":"Sets the monetary decimal separator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"sep","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getExponentSeparator","comment":"Returns the string used to separate the mantissa from the exponent.\n Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setExponentSeparator","comment":"Sets the string used to separate the mantissa from the exponent.\n Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"exp","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clone","comment":"Standard override.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Override equals.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Override hashCode.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}