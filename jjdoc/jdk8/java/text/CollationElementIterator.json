{"name":"CollationElementIterator","comment":"The \u003ccode\u003eCollationElementIterator\u003c/code\u003e class is used as an iterator\n to walk through each character of an international string. Use the iterator\n to return the ordering priority of the positioned character. The ordering\n priority of a character, which we refer to as a key, defines how a character\n is collated in the given collation object.\n\n \u003cp\u003e\n For example, consider the following in Spanish:\n \u003cblockquote\u003e\n \u003cpre\u003e\n \"ca\" \u0026rarr; the first key is key(\u0027c\u0027) and second key is key(\u0027a\u0027).\n \"cha\" \u0026rarr; the first key is key(\u0027ch\u0027) and second key is key(\u0027a\u0027).\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n And in German,\n \u003cblockquote\u003e\n \u003cpre\u003e\n \"Ã¤b\" \u0026rarr; the first key is key(\u0027a\u0027), the second key is key(\u0027e\u0027), and\n the third key is key(\u0027b\u0027).\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n The key of a character is an integer composed of primary order(short),\n secondary order(byte), and tertiary order(byte). Java strictly defines\n the size and signedness of its primitive data types. Therefore, the static\n functions \u003ccode\u003eprimaryOrder\u003c/code\u003e, \u003ccode\u003esecondaryOrder\u003c/code\u003e, and\n \u003ccode\u003etertiaryOrder\u003c/code\u003e return \u003ccode\u003eint\u003c/code\u003e, \u003ccode\u003eshort\u003c/code\u003e,\n and \u003ccode\u003eshort\u003c/code\u003e respectively to ensure the correctness of the key\n value.\n\n \u003cp\u003e\n Example of the iterator usage,\n \u003cblockquote\u003e\n \u003cpre\u003e\n\n  String testString \u003d \"This is a test\";\n  Collator col \u003d Collator.getInstance();\n  if (col instanceof RuleBasedCollator) {\n      RuleBasedCollator ruleBasedCollator \u003d (RuleBasedCollator)col;\n      CollationElementIterator collationElementIterator \u003d ruleBasedCollator.getCollationElementIterator(testString);\n      int primaryOrder \u003d CollationElementIterator.primaryOrder(collationElementIterator.next());\n          :\n  }\n \u003c/pre\u003e\n \u003c/blockquote\u003e\n\n \u003cp\u003e\n \u003ccode\u003eCollationElementIterator.next\u003c/code\u003e returns the collation order\n of the next character. A collation order consists of primary order,\n secondary order and tertiary order. The data type of the collation\n order is \u003cstrong\u003eint\u003c/strong\u003e. The first 16 bits of a collation order\n is its primary order; the next 8 bits is the secondary order and the\n last 8 bits is the tertiary order.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e \u003ccode\u003eCollationElementIterator\u003c/code\u003e is a part of\n \u003ccode\u003eRuleBasedCollator\u003c/code\u003e implementation. It is only usable\n with \u003ccode\u003eRuleBasedCollator\u003c/code\u003e instances.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CollationElementIterator","qualifiedName":"java.text.CollationElementIterator","dimension":"","elementType":{},"package":"java.text","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"NULLORDER","comment":"Null order which indicates the end of string is reached by the\n cursor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-1"}],"methods":[{"name":"reset","comment":"Resets the cursor to the beginning of the string.  The next call\n to next() will return the first collation element in the string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"next","comment":"Get the next collation element in the string.  \u003cp\u003eThis iterator iterates\n over a sequence of collation elements that were built from the string.\n Because there isn\u0027t necessarily a one-to-one mapping from characters to\n collation elements, this doesn\u0027t mean the same thing as \"return the\n collation element [or ordering priority] of the next character in the\n string\".\u003c/p\u003e\n \u003cp\u003eThis function returns the collation element that the iterator is currently\n pointing to and then updates the internal pointer to point to the next element.\n previous() updates the pointer first and then returns the element.  This\n means that when you change direction while iterating (i.e., call next() and\n then call previous(), or call previous() and then call next()), you\u0027ll get\n back the same element twice.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"previous","comment":"Get the previous collation element in the string.  \u003cp\u003eThis iterator iterates\n over a sequence of collation elements that were built from the string.\n Because there isn\u0027t necessarily a one-to-one mapping from characters to\n collation elements, this doesn\u0027t mean the same thing as \"return the\n collation element [or ordering priority] of the previous character in the\n string\".\u003c/p\u003e\n \u003cp\u003eThis function updates the iterator\u0027s internal pointer to point to the\n collation element preceding the one it\u0027s currently pointing to and then\n returns that element, while next() returns the current element and then\n updates the pointer.  This means that when you change direction while\n iterating (i.e., call next() and then call previous(), or call previous()\n and then call next()), you\u0027ll get back the same element twice.\u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"primaryOrder","comment":"Return the primary component of a collation element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"order","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"secondaryOrder","comment":"Return the secondary component of a collation element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"order","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tertiaryOrder","comment":"Return the tertiary component of a collation element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"order","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOffset","comment":"Sets the iterator to point to the collation element corresponding to\n the specified character (the parameter is a CHARACTER offset in the\n original string, not an offset into its corresponding sequence of\n collation elements).  The value returned by the next call to next()\n will be the collation element corresponding to the specified position\n in the text.  If that position is in the middle of a contracting\n character sequence, the result of the next call to next() is the\n collation element for that sequence.  This means that getOffset()\n is not guaranteed to return the same value as was passed to a preceding\n call to setOffset().","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getOffset","comment":"Returns the character offset in the original text corresponding to the next\n collation element.  (That is, getOffset() returns the position in the text\n corresponding to the collation element that will be returned by the next\n call to next().)  This value will always be the index of the FIRST character\n corresponding to the collation element (a contracting character sequence is\n when two or more characters all correspond to the same collation element).\n This means if you do setOffset(x) followed immediately by getOffset(), getOffset()\n won\u0027t necessarily return x.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMaxExpansion","comment":"Return the maximum length of any expansion sequences that end\n with the specified comparison order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"order","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setText","comment":"Set a new string over which to iterate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setText","comment":"Set a new string over which to iterate.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.text.CharacterIterator)","flatSignature":"(CharacterIterator)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"CharacterIterator","qualifiedName":"java.text.CharacterIterator","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}