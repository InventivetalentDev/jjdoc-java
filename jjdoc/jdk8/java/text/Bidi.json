{"name":"Bidi","comment":"This class implements the Unicode Bidirectional Algorithm.\n \u003cp\u003e\n A Bidi object provides information on the bidirectional reordering of the text\n used to create it.  This is required, for example, to properly display Arabic\n or Hebrew text.  These languages are inherently mixed directional, as they order\n numbers from left-to-right while ordering most other text from right-to-left.\n \u003cp\u003e\n Once created, a Bidi object can be queried to see if the text it represents is\n all left-to-right or all right-to-left.  Such objects are very lightweight and\n this text is relatively easy to process.\n \u003cp\u003e\n If there are multiple runs of text, information about the runs can be accessed\n by indexing to get the start, limit, and level of a run.  The level represents\n both the direction and the \u0027nesting level\u0027 of a directional run.  Odd levels\n are right-to-left, while even levels are left-to-right.  So for example level\n 0 represents left-to-right text, while level 1 represents right-to-left text, and\n level 2 represents left-to-right text embedded in a right-to-left run.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Bidi","qualifiedName":"java.text.Bidi","dimension":"","elementType":{},"package":"java.text","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Bidi","comment":"Create Bidi from the given paragraph of text and base direction.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","parameters":[{"name":"paragraph","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"flags","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Bidi","comment":"Create Bidi from the given paragraph of text.\n \u003cp\u003e\n The RUN_DIRECTION attribute in the text, if present, determines the base\n direction (left-to-right or right-to-left).  If not present, the base\n direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right\n if there are no strong directional characters in the text.  This attribute, if\n present, must be applied to all the text in the paragraph.\n \u003cp\u003e\n The BIDI_EMBEDDING attribute in the text, if present, represents embedding level\n information.  Negative values from -1 to -62 indicate overrides at the absolute value\n of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are\n zero or not defined, the base embedding level as determined by the base direction\n is assumed.\n \u003cp\u003e\n The NUMERIC_SHAPING attribute in the text, if present, converts European digits to\n other decimal digits before running the bidi algorithm.  This attribute, if present,\n must be applied to all the text in the paragraph.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.text.AttributedCharacterIterator)","flatSignature":"(AttributedCharacterIterator)","parameters":[{"name":"paragraph","type":{"isPrimitive":false,"simpleName":"AttributedCharacterIterator","qualifiedName":"java.text.AttributedCharacterIterator","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Bidi","comment":"Create Bidi from the given text, embedding, and direction information.\n The embeddings array may be null.  If present, the values represent embedding level\n information.  Negative values from -1 to -61 indicate overrides at the absolute value\n of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n zero, the base embedding level as determined by the base direction is assumed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(char[], int, byte[], int, int, int)","flatSignature":"(char[], int, byte[], int, int, int)","parameters":[{"name":"text","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"textStart","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"embeddings","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"embStart","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"paragraphLength","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"flags","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"DIRECTION_LEFT_TO_RIGHT","comment":"Constant indicating base direction is left-to-right.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"DIRECTION_RIGHT_TO_LEFT","comment":"Constant indicating base direction is right-to-left.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"DIRECTION_DEFAULT_LEFT_TO_RIGHT","comment":"Constant indicating that the base direction depends on the first strong\n directional character in the text according to the Unicode\n Bidirectional Algorithm.  If no strong directional character is present,\n the base direction is left-to-right.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-2"},{"name":"DIRECTION_DEFAULT_RIGHT_TO_LEFT","comment":"Constant indicating that the base direction depends on the first strong\n directional character in the text according to the Unicode\n Bidirectional Algorithm.  If no strong directional character is present,\n the base direction is right-to-left.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-1"}],"methods":[{"name":"createLineBidi","comment":"Create a Bidi object representing the bidi information on a line of text within\n the paragraph represented by the current Bidi.  This call is not required if the\n entire paragraph fits on one line.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"Bidi","qualifiedName":"java.text.Bidi","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"lineStart","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"lineLimit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isMixed","comment":"Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right\n and right-to-left text, or the base direction differs from the direction of the only run of text.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLeftToRight","comment":"Return true if the line is all left-to-right text and the base direction is left-to-right.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isRightToLeft","comment":"Return true if the line is all right-to-left text, and the base direction is right-to-left.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLength","comment":"Return the length of text in the line.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"baseIsLeftToRight","comment":"Return true if the base direction is left-to-right.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBaseLevel","comment":"Return the base level (0 if left-to-right, 1 if right-to-left).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLevelAt","comment":"Return the resolved level of the character at offset.  If offset is\n {@literal \u003c} 0 or \u0026ge; the length of the line, return the base direction\n level.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRunCount","comment":"Return the number of level runs.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRunLevel","comment":"Return the level of the nth logical run in this line.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"run","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRunStart","comment":"Return the index of the character at the start of the nth logical run in this line, as\n an offset from the start of the line.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"run","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRunLimit","comment":"Return the index of the character past the end of the nth logical run in this line, as\n an offset from the start of the line.  For example, this will return the length\n of the line for the last run on the line.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"run","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"requiresBidi","comment":"Return true if the specified text requires bidi analysis.  If this returns false,\n the text will display left-to-right.  Clients can then avoid constructing a Bidi object.\n Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped\n and ordered for display, and so will not cause this function to return true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"text","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"limit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reorderVisually","comment":"Reorder the objects in the array into visual order based on their levels.\n This is a utility function to use when you have a collection of objects\n representing runs of text in logical order, each run containing text\n at a single level.  The elements at \u003ccode\u003eindex\u003c/code\u003e from\n \u003ccode\u003eobjectStart\u003c/code\u003e up to \u003ccode\u003eobjectStart + count\u003c/code\u003e\n in the objects array will be reordered into visual order assuming\n each run of text has the level indicated by the corresponding element\n in the levels array (at \u003ccode\u003eindex - objectStart + levelStart\u003c/code\u003e).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(byte[], int, java.lang.Object[], int, int)","flatSignature":"(byte[], int, Object[], int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"levels","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"levelStart","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"objects","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}},{"name":"objectStart","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Display the bidi internal state, used in debugging.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}