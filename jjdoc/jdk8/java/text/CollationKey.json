{"name":"CollationKey","comment":"A \u003ccode\u003eCollationKey\u003c/code\u003e represents a \u003ccode\u003eString\u003c/code\u003e under the\n rules of a specific \u003ccode\u003eCollator\u003c/code\u003e object. Comparing two\n \u003ccode\u003eCollationKey\u003c/code\u003es returns the relative order of the\n \u003ccode\u003eString\u003c/code\u003es they represent. Using \u003ccode\u003eCollationKey\u003c/code\u003es\n to compare \u003ccode\u003eString\u003c/code\u003es is generally faster than using\n \u003ccode\u003eCollator.compare\u003c/code\u003e. Thus, when the \u003ccode\u003eString\u003c/code\u003es\n must be compared multiple times, for example when sorting a list\n of \u003ccode\u003eString\u003c/code\u003es. It\u0027s more efficient to use \u003ccode\u003eCollationKey\u003c/code\u003es.\n\n \u003cp\u003e\n You can not create \u003ccode\u003eCollationKey\u003c/code\u003es directly. Rather,\n generate them by calling \u003ccode\u003eCollator.getCollationKey\u003c/code\u003e.\n You can only compare \u003ccode\u003eCollationKey\u003c/code\u003es generated from\n the same \u003ccode\u003eCollator\u003c/code\u003e object.\n\n \u003cp\u003e\n Generating a \u003ccode\u003eCollationKey\u003c/code\u003e for a \u003ccode\u003eString\u003c/code\u003e\n involves examining the entire \u003ccode\u003eString\u003c/code\u003e\n and converting it to series of bits that can be compared bitwise. This\n allows fast comparisons once the keys are generated. The cost of generating\n keys is recouped in faster comparisons when \u003ccode\u003eString\u003c/code\u003es need\n to be compared many times. On the other hand, the result of a comparison\n is often determined by the first couple of characters of each \u003ccode\u003eString\u003c/code\u003e.\n \u003ccode\u003eCollator.compare\u003c/code\u003e examines only as many characters as it needs which\n allows it to be faster when doing single comparisons.\n \u003cp\u003e\n The following example shows how \u003ccode\u003eCollationKey\u003c/code\u003es might be used\n to sort a list of \u003ccode\u003eString\u003c/code\u003es.\n \u003cblockquote\u003e\n \u003cpre\u003e{@code\n // Create an array of CollationKeys for the Strings to be sorted.\n Collator myCollator \u003d Collator.getInstance();\n CollationKey[] keys \u003d new CollationKey[3];\n keys[0] \u003d myCollator.getCollationKey(\"Tom\");\n keys[1] \u003d myCollator.getCollationKey(\"Dick\");\n keys[2] \u003d myCollator.getCollationKey(\"Harry\");\n sort(keys);\n\n //...\n\n // Inside body of sort routine, compare keys this way\n if (keys[i].compareTo(keys[j]) \u003e 0)\n    // swap keys[i] and keys[j]\n\n //...\n\n // Finally, when we\u0027ve returned from sort.\n System.out.println(keys[0].getSourceString());\n System.out.println(keys[1].getSourceString());\n System.out.println(keys[2].getSourceString());\n }\u003c/pre\u003e\n \u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CollationKey","qualifiedName":"java.text.CollationKey","dimension":"","elementType":{},"package":"java.text","superclass":"java.lang.Object","interfaces":["java.lang.Comparable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"compareTo","comment":"Compare this CollationKey to the target CollationKey. The collation rules of the\n Collator object which created these keys are applied. \u003cstrong\u003eNote:\u003c/strong\u003e\n CollationKeys created by different Collators can not be compared.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.text.CollationKey)","flatSignature":"(CollationKey)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"CollationKey","qualifiedName":"java.text.CollationKey","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSourceString","comment":"Returns the String that this CollationKey represents.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toByteArray","comment":"Converts the CollationKey to a sequence of bits. If two CollationKeys\n could be legitimately compared, then one could compare the byte arrays\n for each of those keys to obtain the same result.  Byte arrays are\n organized most significant byte first.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}