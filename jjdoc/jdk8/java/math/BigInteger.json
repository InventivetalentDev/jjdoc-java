{"name":"BigInteger","comment":"Immutable arbitrary-precision integers.  All operations behave as if\n BigIntegers were represented in two\u0027s-complement notation (like Java\u0027s\n primitive integer types).  BigInteger provides analogues to all of Java\u0027s\n primitive integer operators, and all relevant methods from java.lang.Math.\n Additionally, BigInteger provides operations for modular arithmetic, GCD\n calculation, primality testing, prime generation, bit manipulation,\n and a few other miscellaneous operations.\n\n \u003cp\u003eSemantics of arithmetic operations exactly mimic those of Java\u0027s integer\n arithmetic operators, as defined in \u003ci\u003eThe Java Language Specification\u003c/i\u003e.\n For example, division by zero throws an {@code ArithmeticException}, and\n division of a negative by a positive yields a negative (or zero) remainder.\n All of the details in the Spec concerning overflow are ignored, as\n BigIntegers are made as large as necessary to accommodate the results of an\n operation.\n\n \u003cp\u003eSemantics of shift operations extend those of Java\u0027s shift operators\n to allow for negative shift distances.  A right-shift with a negative\n shift distance results in a left shift, and vice-versa.  The unsigned\n right shift operator ({@code \u003e\u003e\u003e}) is omitted, as this operation makes\n little sense in combination with the \"infinite word size\" abstraction\n provided by this class.\n\n \u003cp\u003eSemantics of bitwise logical operations exactly mimic those of Java\u0027s\n bitwise integer operators.  The binary operators ({@code and},\n {@code or}, {@code xor}) implicitly perform sign extension on the shorter\n of the two operands prior to performing the operation.\n\n \u003cp\u003eComparison operations perform signed integer comparisons, analogous to\n those performed by Java\u0027s relational and equality operators.\n\n \u003cp\u003eModular arithmetic operations are provided to compute residues, perform\n exponentiation, and compute multiplicative inverses.  These methods always\n return a non-negative result, between {@code 0} and {@code (modulus - 1)},\n inclusive.\n\n \u003cp\u003eBit operations operate on a single bit of the two\u0027s-complement\n representation of their operand.  If necessary, the operand is sign-\n extended so that it contains the designated bit.  None of the single-bit\n operations can produce a BigInteger with a different sign from the\n BigInteger being operated on, as they affect only a single bit, and the\n \"infinite word size\" abstraction provided by this class ensures that there\n are infinitely many \"virtual sign bits\" preceding each BigInteger.\n\n \u003cp\u003eFor the sake of brevity and clarity, pseudo-code is used throughout the\n descriptions of BigInteger methods.  The pseudo-code expression\n {@code (i + j)} is shorthand for \"a BigInteger whose value is\n that of the BigInteger {@code i} plus that of the BigInteger {@code j}.\"\n The pseudo-code expression {@code (i \u003d\u003d j)} is shorthand for\n \"{@code true} if and only if the BigInteger {@code i} represents the same\n value as the BigInteger {@code j}.\"  Other pseudo-code expressions are\n interpreted similarly.\n\n \u003cp\u003eAll methods and constructors in this class throw\n {@code NullPointerException} when passed\n a null object reference for any input parameter.\n\n BigInteger must support values in the range\n -2\u003csup\u003e{@code Integer.MAX_VALUE}\u003c/sup\u003e (exclusive) to\n +2\u003csup\u003e{@code Integer.MAX_VALUE}\u003c/sup\u003e (exclusive)\n and may support values outside of that range.\n\n The range of probable prime values is limited and may be less than\n the full supported positive range of {@code BigInteger}.\n The range must be at least 1 to 2\u003csup\u003e500000000\u003c/sup\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{},"package":"java.math","superclass":"java.lang.Number","interfaces":["java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"BigInteger","comment":"Translates a byte array containing the two\u0027s-complement binary\n representation of a BigInteger into a BigInteger.  The input array is\n assumed to be in \u003ci\u003ebig-endian\u003c/i\u003e byte-order: the most significant\n byte is in the zeroth element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"BigInteger","comment":"Translates the sign-magnitude representation of a BigInteger into a\n BigInteger.  The sign is represented as an integer signum value: -1 for\n negative, 0 for zero, or 1 for positive.  The magnitude is a byte array\n in \u003ci\u003ebig-endian\u003c/i\u003e byte-order: the most significant byte is in the\n zeroth element.  A zero-length magnitude array is permissible, and will\n result in a BigInteger value of 0, whether signum is -1, 0 or 1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, byte[])","flatSignature":"(int, byte[])","parameters":[{"name":"signum","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"magnitude","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"BigInteger","comment":"Translates the String representation of a BigInteger in the\n specified radix into a BigInteger.  The String representation\n consists of an optional minus or plus sign followed by a\n sequence of one or more digits in the specified radix.  The\n character-to-digit mapping is provided by {@code\n Character.digit}.  The String may not contain any extraneous\n characters (whitespace, for example).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BigInteger","comment":"Translates the decimal String representation of a BigInteger into a\n BigInteger.  The String representation consists of an optional minus\n sign followed by a sequence of one or more decimal digits.  The\n character-to-digit mapping is provided by {@code Character.digit}.\n The String may not contain any extraneous characters (whitespace, for\n example).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BigInteger","comment":"Constructs a randomly generated BigInteger, uniformly distributed over\n the range 0 to (2\u003csup\u003e{@code numBits}\u003c/sup\u003e - 1), inclusive.\n The uniformity of the distribution assumes that a fair source of random\n bits is provided in {@code rnd}.  Note that this constructor always\n constructs a non-negative BigInteger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, java.util.Random)","flatSignature":"(int, Random)","parameters":[{"name":"numBits","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"rnd","type":{"isPrimitive":false,"simpleName":"Random","qualifiedName":"java.util.Random","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"BigInteger","comment":"Constructs a randomly generated positive BigInteger that is probably\n prime, with the specified bitLength.\n\n \u003cp\u003eIt is recommended that the {@link #probablePrime probablePrime}\n method be used in preference to this constructor unless there\n is a compelling need to specify a certainty.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int, int, java.util.Random)","flatSignature":"(int, int, Random)","parameters":[{"name":"bitLength","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"certainty","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"rnd","type":{"isPrimitive":false,"simpleName":"Random","qualifiedName":"java.util.Random","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"ZERO","comment":"The BigInteger constant zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isStatic":true},{"name":"ONE","comment":"The BigInteger constant one.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isStatic":true},{"name":"TEN","comment":"The BigInteger constant ten.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"probablePrime","comment":"Returns a positive BigInteger that is probably prime, with the\n specified bitLength. The probability that a BigInteger returned\n by this method is composite does not exceed 2\u003csup\u003e-100\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.Random)","flatSignature":"(int, Random)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"bitLength","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"rnd","type":{"isPrimitive":false,"simpleName":"Random","qualifiedName":"java.util.Random","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextProbablePrime","comment":"Returns the first integer greater than this {@code BigInteger} that\n is probably prime.  The probability that the number returned by this\n method is composite does not exceed 2\u003csup\u003e-100\u003c/sup\u003e. This method will\n never skip over a prime when searching: if it returns {@code p}, there\n is no prime {@code q} such that {@code this \u003c q \u003c p}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"valueOf","comment":"Returns a BigInteger whose value is equal to that of the\n specified {@code long}.  This \"static factory method\" is\n provided in preference to a ({@code long}) constructor\n because it allows for reuse of frequently used BigIntegers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"val","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"add","comment":"Returns a BigInteger whose value is {@code (this + val)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtract","comment":"Returns a BigInteger whose value is {@code (this - val)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"multiply","comment":"Returns a BigInteger whose value is {@code (this * val)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"divide","comment":"Returns a BigInteger whose value is {@code (this / val)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"divideAndRemainder","comment":"Returns an array of two BigIntegers containing {@code (this / val)}\n followed by {@code (this % val)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remainder","comment":"Returns a BigInteger whose value is {@code (this % val)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"pow","comment":"Returns a BigInteger whose value is \u003ctt\u003e(this\u003csup\u003eexponent\u003c/sup\u003e)\u003c/tt\u003e.\n Note that {@code exponent} is an integer rather than a BigInteger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"exponent","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"gcd","comment":"Returns a BigInteger whose value is the greatest common divisor of\n {@code abs(this)} and {@code abs(val)}.  Returns 0 if\n {@code this \u003d\u003d 0 \u0026\u0026 val \u003d\u003d 0}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"abs","comment":"Returns a BigInteger whose value is the absolute value of this\n BigInteger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"negate","comment":"Returns a BigInteger whose value is {@code (-this)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"signum","comment":"Returns the signum function of this BigInteger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"mod","comment":"Returns a BigInteger whose value is {@code (this mod m}).  This method\n differs from {@code remainder} in that it always returns a\n \u003ci\u003enon-negative\u003c/i\u003e BigInteger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"modPow","comment":"Returns a BigInteger whose value is\n \u003ctt\u003e(this\u003csup\u003eexponent\u003c/sup\u003e mod m)\u003c/tt\u003e.  (Unlike {@code pow}, this\n method permits negative exponents.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger, java.math.BigInteger)","flatSignature":"(BigInteger, BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"exponent","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}},{"name":"m","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"modInverse","comment":"Returns a BigInteger whose value is {@code (this}\u003csup\u003e-1\u003c/sup\u003e {@code mod m)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"shiftLeft","comment":"Returns a BigInteger whose value is {@code (this \u003c\u003c n)}.\n The shift distance, {@code n}, may be negative, in which case\n this method performs a right shift.\n (Computes \u003ctt\u003efloor(this * 2\u003csup\u003en\u003c/sup\u003e)\u003c/tt\u003e.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"shiftRight","comment":"Returns a BigInteger whose value is {@code (this \u003e\u003e n)}.  Sign\n extension is performed.  The shift distance, {@code n}, may be\n negative, in which case this method performs a left shift.\n (Computes \u003ctt\u003efloor(this / 2\u003csup\u003en\u003c/sup\u003e)\u003c/tt\u003e.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"and","comment":"Returns a BigInteger whose value is {@code (this \u0026 val)}.  (This\n method returns a negative BigInteger if and only if this and val are\n both negative.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"or","comment":"Returns a BigInteger whose value is {@code (this | val)}.  (This method\n returns a negative BigInteger if and only if either this or val is\n negative.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"xor","comment":"Returns a BigInteger whose value is {@code (this ^ val)}.  (This method\n returns a negative BigInteger if and only if exactly one of this and\n val are negative.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"not","comment":"Returns a BigInteger whose value is {@code (~this)}.  (This method\n returns a negative value if and only if this BigInteger is\n non-negative.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"andNot","comment":"Returns a BigInteger whose value is {@code (this \u0026 ~val)}.  This\n method, which is equivalent to {@code and(val.not())}, is provided as\n a convenience for masking operations.  (This method returns a negative\n BigInteger if and only if {@code this} is negative and {@code val} is\n positive.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"testBit","comment":"Returns {@code true} if and only if the designated bit is set.\n (Computes {@code ((this \u0026 (1\u003c\u003cn)) !\u003d 0)}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setBit","comment":"Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit set.  (Computes {@code (this | (1\u003c\u003cn))}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clearBit","comment":"Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit cleared.\n (Computes {@code (this \u0026 ~(1\u003c\u003cn))}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"flipBit","comment":"Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit flipped.\n (Computes {@code (this ^ (1\u003c\u003cn))}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"n","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLowestSetBit","comment":"Returns the index of the rightmost (lowest-order) one bit in this\n BigInteger (the number of zero bits to the right of the rightmost\n one bit).  Returns -1 if this BigInteger contains no one bits.\n (Computes {@code (this \u003d\u003d 0? -1 : log2(this \u0026 -this))}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"bitLength","comment":"Returns the number of bits in the minimal two\u0027s-complement\n representation of this BigInteger, \u003ci\u003eexcluding\u003c/i\u003e a sign bit.\n For positive BigIntegers, this is equivalent to the number of bits in\n the ordinary binary representation.  (Computes\n {@code (ceil(log2(this \u003c 0 ? -this : this+1)))}.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"bitCount","comment":"Returns the number of bits in the two\u0027s complement representation\n of this BigInteger that differ from its sign bit.  This method is\n useful when implementing bit-vector style sets atop BigIntegers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isProbablePrime","comment":"Returns {@code true} if this BigInteger is probably prime,\n {@code false} if it\u0027s definitely composite.  If\n {@code certainty} is \u0026le; 0, {@code true} is\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"certainty","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this BigInteger with the specified BigInteger.  This\n method is provided in preference to individual methods for each\n of the six boolean comparison operators ({@literal \u003c}, \u003d\u003d,\n {@literal \u003e}, {@literal \u003e\u003d}, !\u003d, {@literal \u003c\u003d}).  The suggested\n idiom for performing these comparisons is: {@code\n (x.compareTo(y)} \u0026lt;\u003ci\u003eop\u003c/i\u003e\u0026gt; {@code 0)}, where\n \u0026lt;\u003ci\u003eop\u003c/i\u003e\u0026gt; is one of the six comparison operators.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares this BigInteger with the specified Object for equality.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the minimum of this BigInteger and {@code val}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the maximum of this BigInteger and {@code val}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.math.BigInteger)","flatSignature":"(BigInteger)","returnType":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"val","type":{"isPrimitive":false,"simpleName":"BigInteger","qualifiedName":"java.math.BigInteger","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code for this BigInteger.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns the String representation of this BigInteger in the\n given radix.  If the radix is outside the range from {@link\n Character#MIN_RADIX} to {@link Character#MAX_RADIX} inclusive,\n it will default to 10 (as is the case for\n {@code Integer.toString}).  The digit-to-character mapping\n provided by {@code Character.forDigit} is used, and a minus\n sign is prepended if appropriate.  (This representation is\n compatible with the {@link #BigInteger(String, int) (String,\n int)} constructor.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns the decimal String representation of this BigInteger.\n The digit-to-character mapping provided by\n {@code Character.forDigit} is used, and a minus sign is\n prepended if appropriate.  (This representation is compatible\n with the {@link #BigInteger(String) (String)} constructor, and\n allows for String concatenation with Java\u0027s + operator.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toByteArray","comment":"Returns a byte array containing the two\u0027s-complement\n representation of this BigInteger.  The byte array will be in\n \u003ci\u003ebig-endian\u003c/i\u003e byte-order: the most significant byte is in\n the zeroth element.  The array will contain the minimum number\n of bytes required to represent this BigInteger, including at\n least one sign bit, which is {@code (ceil((this.bitLength() +\n 1)/8))}.  (This representation is compatible with the\n {@link #BigInteger(byte[]) (byte[])} constructor.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValue","comment":"Converts this BigInteger to an {@code int}.  This\n conversion is analogous to a\n \u003ci\u003enarrowing primitive conversion\u003c/i\u003e from {@code long} to\n {@code int} as defined in section 5.1.3 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e:\n if this BigInteger is too big to fit in an\n {@code int}, only the low-order 32 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValue","comment":"Converts this BigInteger to a {@code long}.  This\n conversion is analogous to a\n \u003ci\u003enarrowing primitive conversion\u003c/i\u003e from {@code long} to\n {@code int} as defined in section 5.1.3 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e:\n if this BigInteger is too big to fit in a\n {@code long}, only the low-order 64 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"floatValue","comment":"Converts this BigInteger to a {@code float}.  This\n conversion is similar to the\n \u003ci\u003enarrowing primitive conversion\u003c/i\u003e from {@code double} to\n {@code float} as defined in section 5.1.3 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e:\n if this BigInteger has too great a magnitude\n to represent as a {@code float}, it will be converted to\n {@link Float#NEGATIVE_INFINITY} or {@link\n Float#POSITIVE_INFINITY} as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the BigInteger value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"doubleValue","comment":"Converts this BigInteger to a {@code double}.  This\n conversion is similar to the\n \u003ci\u003enarrowing primitive conversion\u003c/i\u003e from {@code double} to\n {@code float} as defined in section 5.1.3 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e:\n if this BigInteger has too great a magnitude\n to represent as a {@code double}, it will be converted to\n {@link Double#NEGATIVE_INFINITY} or {@link\n Double#POSITIVE_INFINITY} as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the BigInteger value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValueExact","comment":"Converts this {@code BigInteger} to a {@code long}, checking\n for lost information.  If the value of this {@code BigInteger}\n is out of the range of the {@code long} type, then an\n {@code ArithmeticException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValueExact","comment":"Converts this {@code BigInteger} to an {@code int}, checking\n for lost information.  If the value of this {@code BigInteger}\n is out of the range of the {@code int} type, then an\n {@code ArithmeticException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shortValueExact","comment":"Converts this {@code BigInteger} to a {@code short}, checking\n for lost information.  If the value of this {@code BigInteger}\n is out of the range of the {@code short} type, then an\n {@code ArithmeticException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"byteValueExact","comment":"Converts this {@code BigInteger} to a {@code byte}, checking\n for lost information.  If the value of this {@code BigInteger}\n is out of the range of the {@code byte} type, then an\n {@code ArithmeticException} is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}