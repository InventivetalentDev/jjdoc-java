{"name":"ThreadLocal","comment":"This class provides thread-local variables.  These variables differ from\n their normal counterparts in that each thread that accesses one (via its\n {@code get} or {@code set} method) has its own, independently initialized\n copy of the variable.  {@code ThreadLocal} instances are typically private\n static fields in classes that wish to associate state with a thread (e.g.,\n a user ID or Transaction ID).\n\n \u003cp\u003eFor example, the class below generates unique identifiers local to each\n thread.\n A thread\u0027s id is assigned the first time it invokes {@code ThreadId.get()}\n and remains unchanged on subsequent calls.\n \u003cpre\u003e\n import java.util.concurrent.atomic.AtomicInteger;\n\n public class ThreadId {\n     // Atomic integer containing the next thread ID to be assigned\n     private static final AtomicInteger nextId \u003d new AtomicInteger(0);\n\n     // Thread local variable containing each thread\u0027s ID\n     private static final ThreadLocal\u0026lt;Integer\u0026gt; threadId \u003d\n         new ThreadLocal\u0026lt;Integer\u0026gt;() {\n             \u0026#64;Override protected Integer initialValue() {\n                 return nextId.getAndIncrement();\n         }\n     };\n\n     // Returns the current thread\u0027s unique ID, assigning it if necessary\n     public static int get() {\n         return threadId.get();\n     }\n }\n \u003c/pre\u003e\n \u003cp\u003eEach thread holds an implicit reference to its copy of a thread-local\n variable as long as the thread is alive and the {@code ThreadLocal}\n instance is accessible; after a thread goes away, all of its copies of\n thread-local instances are subject to garbage collection (unless other\n references to these copies exist).","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ThreadLocal","qualifiedName":"java.lang.ThreadLocal","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"ThreadLocal","comment":"Creates a thread local variable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"withInitial","comment":"Creates a thread local variable. The initial value of the variable is\n determined by invoking the {@code get} method on the {@code Supplier}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.function.Supplier\u003c? extends S\u003e)","flatSignature":"(Supplier\u003c? extends S\u003e)","returnType":{"isPrimitive":false,"simpleName":"ThreadLocal","qualifiedName":"java.lang.ThreadLocal","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"supplier","type":{"isPrimitive":false,"simpleName":"Supplier","qualifiedName":"java.util.function.Supplier","dimension":"","elementType":{}}}],"typeParameters":[{"name":"S","bounds":[]}]},{"name":"get","comment":"Returns the value in the current thread\u0027s copy of this\n thread-local variable.  If the variable has no value for the\n current thread, it is first initialized to the value returned\n by an invocation of the {@link #initialValue} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"set","comment":"Sets the current thread\u0027s copy of this thread-local variable\n to the specified value.  Most subclasses will have no need to\n override this method, relying solely on the {@link #initialValue}\n method to set the values of thread-locals.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T)","flatSignature":"(T)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"value","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}}],"typeParameters":[]},{"name":"remove","comment":"Removes the current thread\u0027s value for this thread-local\n variable.  If this thread-local variable is subsequently\n {@linkplain #get read} by the current thread, its value will be\n reinitialized by invoking its {@link #initialValue} method,\n unless its value is {@linkplain #set set} by the current thread\n in the interim.  This may result in multiple invocations of the\n {@code initialValue} method in the current thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"subClasses":["java.lang.InheritableThreadLocal"],"enumConstants":[]}