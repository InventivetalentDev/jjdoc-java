{"name":"Annotation","comment":"The common interface extended by all annotation types.  Note that an\n interface that manually extends this one does \u003ci\u003enot\u003c/i\u003e define\n an annotation type.  Also note that this interface does not itself\n define an annotation type.\n\n More information about annotation types can be found in section 9.6 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n\n The {@link java.lang.reflect.AnnotatedElement} interface discusses\n compatibility concerns when evolving an annotation type from being\n non-repeatable to being repeatable.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{},"package":"java.lang.annotation","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"equals","comment":"Returns true if the specified object represents an annotation\n that is logically equivalent to this one.  In other words,\n returns true if the specified object is an instance of the same\n annotation type as this instance, all of whose members are equal\n to the corresponding member of this annotation, as defined below:\n \u003cul\u003e\n    \u003cli\u003eTwo corresponding primitive typed members whose values are\n    \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if \u003ctt\u003ex \u003d\u003d y\u003c/tt\u003e,\n    unless their type is \u003ctt\u003efloat\u003c/tt\u003e or \u003ctt\u003edouble\u003c/tt\u003e.\n\n    \u003cli\u003eTwo corresponding \u003ctt\u003efloat\u003c/tt\u003e members whose values\n    are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if\n    \u003ctt\u003eFloat.valueOf(x).equals(Float.valueOf(y))\u003c/tt\u003e.\n    (Unlike the \u003ctt\u003e\u003d\u003d\u003c/tt\u003e operator, NaN is considered equal\n    to itself, and \u003ctt\u003e0.0f\u003c/tt\u003e unequal to \u003ctt\u003e-0.0f\u003c/tt\u003e.)\n\n    \u003cli\u003eTwo corresponding \u003ctt\u003edouble\u003c/tt\u003e members whose values\n    are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e are considered equal if\n    \u003ctt\u003eDouble.valueOf(x).equals(Double.valueOf(y))\u003c/tt\u003e.\n    (Unlike the \u003ctt\u003e\u003d\u003d\u003c/tt\u003e operator, NaN is considered equal\n    to itself, and \u003ctt\u003e0.0\u003c/tt\u003e unequal to \u003ctt\u003e-0.0\u003c/tt\u003e.)\n\n    \u003cli\u003eTwo corresponding \u003ctt\u003eString\u003c/tt\u003e, \u003ctt\u003eClass\u003c/tt\u003e, enum, or\n    annotation typed members whose values are \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e\n    are considered equal if \u003ctt\u003ex.equals(y)\u003c/tt\u003e.  (Note that this\n    definition is recursive for annotation typed members.)\n\n    \u003cli\u003eTwo corresponding array typed members \u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003ey\u003c/tt\u003e\n    are considered equal if \u003ctt\u003eArrays.equals(x, y)\u003c/tt\u003e, for the\n    appropriate overloading of {@link java.util.Arrays#equals}.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code of this annotation, as defined below:\n\n \u003cp\u003eThe hash code of an annotation is the sum of the hash codes\n of its members (including those with default values), as defined\n below:\n\n The hash code of an annotation member is (127 times the hash code\n of the member-name as computed by {@link String#hashCode()}) XOR\n the hash code of the member-value, as defined below:\n\n \u003cp\u003eThe hash code of a member-value depends on its type:\n \u003cul\u003e\n \u003cli\u003eThe hash code of a primitive value \u003ctt\u003e\u003ci\u003ev\u003c/i\u003e\u003c/tt\u003e is equal to\n     \u003ctt\u003e\u003ci\u003eWrapperType\u003c/i\u003e.valueOf(\u003ci\u003ev\u003c/i\u003e).hashCode()\u003c/tt\u003e, where\n     \u003ctt\u003e\u003ci\u003eWrapperType\u003c/i\u003e\u003c/tt\u003e is the wrapper type corresponding\n     to the primitive type of \u003ctt\u003e\u003ci\u003ev\u003c/i\u003e\u003c/tt\u003e ({@link Byte},\n     {@link Character}, {@link Double}, {@link Float}, {@link Integer},\n     {@link Long}, {@link Short}, or {@link Boolean}).\n\n \u003cli\u003eThe hash code of a string, enum, class, or annotation member-value\n     I     \u003ctt\u003e\u003ci\u003ev\u003c/i\u003e\u003c/tt\u003e is computed as by calling\n     \u003ctt\u003e\u003ci\u003ev\u003c/i\u003e.hashCode()\u003c/tt\u003e.  (In the case of annotation\n     member values, this is a recursive definition.)\n\n \u003cli\u003eThe hash code of an array member-value is computed by calling\n     the appropriate overloading of\n     {@link java.util.Arrays#hashCode(long[]) Arrays.hashCode}\n     on the value.  (There is one overloading for each primitive\n     type, and one for object reference types.)\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this annotation.  The details\n of the representation are implementation-dependent, but the following\n may be regarded as typical:\n \u003cpre\u003e\n   \u0026#064;com.acme.util.Name(first\u003dAlfred, middle\u003dE., last\u003dNeuman)\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"annotationType","comment":"Returns the annotation type of this annotation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.lang.SuppressWarnings","java.lang.SafeVarargs","java.lang.Override","java.lang.FunctionalInterface","java.lang.Deprecated","java.lang.annotation.Target","java.lang.annotation.Retention","java.lang.annotation.Repeatable","java.lang.annotation.Native","java.lang.annotation.Inherited","java.lang.annotation.Documented"],"enumConstants":[]}