{"name":"ElementType","comment":"The constants of this enumerated type provide a simple classification of the\n syntactic locations where annotations may appear in a Java program. These\n constants are used in {@link Target java.lang.annotation.Target}\n meta-annotations to specify where it is legal to write annotations of a\n given type.\n\n \u003cp\u003eThe syntactic locations where annotations may appear are split into\n \u003cem\u003edeclaration contexts\u003c/em\u003e , where annotations apply to declarations, and\n \u003cem\u003etype contexts\u003c/em\u003e , where annotations apply to types used in\n declarations and expressions.\n\n \u003cp\u003eThe constants {@link #ANNOTATION_TYPE} , {@link #CONSTRUCTOR} , {@link\n #FIELD} , {@link #LOCAL_VARIABLE} , {@link #METHOD} , {@link #PACKAGE} ,\n {@link #PARAMETER} , {@link #TYPE} , and {@link #TYPE_PARAMETER} correspond\n to the declaration contexts in JLS 9.6.4.1.\n\n \u003cp\u003eFor example, an annotation whose type is meta-annotated with\n {@code @Target(ElementType.FIELD)} may only be written as a modifier for a\n field declaration.\n\n \u003cp\u003eThe constant {@link #TYPE_USE} corresponds to the 15 type contexts in JLS\n 4.11, as well as to two declaration contexts: type declarations (including\n annotation type declarations) and type parameter declarations.\n\n \u003cp\u003eFor example, an annotation whose type is meta-annotated with\n {@code @Target(ElementType.TYPE_USE)} may be written on the type of a field\n (or within the type of the field, if it is a nested, parameterized, or array\n type), and may also appear as a modifier for, say, a class declaration.\n\n \u003cp\u003eThe {@code TYPE_USE} constant includes type declarations and type\n parameter declarations as a convenience for designers of type checkers which\n give semantics to annotation types. For example, if the annotation type\n {@code NonNull} is meta-annotated with\n {@code @Target(ElementType.TYPE_USE)}, then {@code @NonNull}\n {@code class C {...}} could be treated by a type checker as indicating that\n all variables of class {@code C} are non-null, while still allowing\n variables of other classes to be non-null or not non-null based on whether\n {@code @NonNull} appears at the variable\u0027s declaration.","isClass":true,"isInterface":false,"isEnum":true,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ElementType","qualifiedName":"java.lang.annotation.ElementType","dimension":"","elementType":{},"package":"java.lang.annotation","superclass":"java.lang.Enum","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"values","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ElementType","qualifiedName":"java.lang.annotation.ElementType","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ElementType","qualifiedName":"java.lang.annotation.ElementType","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"valueOf","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"ElementType","qualifiedName":"java.lang.annotation.ElementType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":["TYPE","FIELD","METHOD","PARAMETER","CONSTRUCTOR","LOCAL_VARIABLE","ANNOTATION_TYPE","PACKAGE","TYPE_PARAMETER","TYPE_USE"]}