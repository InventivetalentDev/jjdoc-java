{"name":"Character","comment":"The {@code Character} class wraps a value of the primitive\n type {@code char} in an object. An object of type\n {@code Character} contains a single field whose type is\n {@code char}.\n \u003cp\u003e\n In addition, this class provides several methods for determining\n a character\u0027s category (lowercase letter, digit, etc.) and for converting\n characters from uppercase to lowercase and vice versa.\n \u003cp\u003e\n Character information is based on the Unicode Standard, version 6.2.0.\n \u003cp\u003e\n The methods and data of class {@code Character} are defined by\n the information in the \u003ci\u003eUnicodeData\u003c/i\u003e file that is part of the\n Unicode Character Database maintained by the Unicode\n Consortium. This file specifies various properties including name\n and general category for every defined Unicode code point or\n character range.\n \u003cp\u003e\n The file and its description are available from the Unicode Consortium at:\n \u003cul\u003e\n \u003cli\u003e\u003ca href\u003d\"http://www.unicode.org\"\u003ehttp://www.unicode.org\u003c/a\u003e\n \u003c/ul\u003e\n\n \u003ch3\u003e\u003ca name\u003d\"unicode\"\u003eUnicode Character Representations\u003c/a\u003e\u003c/h3\u003e\n\n \u003cp\u003eThe {@code char} data type (and therefore the value that a\n {@code Character} object encapsulates) are based on the\n original Unicode specification, which defined characters as\n fixed-width 16-bit entities. The Unicode Standard has since been\n changed to allow for characters whose representation requires more\n than 16 bits.  The range of legal \u003cem\u003ecode point\u003c/em\u003es is now\n U+0000 to U+10FFFF, known as \u003cem\u003eUnicode scalar value\u003c/em\u003e.\n (Refer to the \u003ca\n href\u003d\"http://www.unicode.org/reports/tr27/#notation\"\u003e\u003ci\u003e\n definition\u003c/i\u003e\u003c/a\u003e of the U+\u003ci\u003en\u003c/i\u003e notation in the Unicode\n Standard.)\n\n \u003cp\u003e\u003ca name\u003d\"BMP\"\u003eThe set of characters from U+0000 to U+FFFF\u003c/a\u003e is\n sometimes referred to as the \u003cem\u003eBasic Multilingual Plane (BMP)\u003c/em\u003e.\n \u003ca name\u003d\"supplementary\"\u003eCharacters\u003c/a\u003e whose code points are greater\n than U+FFFF are called \u003cem\u003esupplementary character\u003c/em\u003es.  The Java\n platform uses the UTF-16 representation in {@code char} arrays and\n in the {@code String} and {@code StringBuffer} classes. In\n this representation, supplementary characters are represented as a pair\n of {@code char} values, the first from the \u003cem\u003ehigh-surrogates\u003c/em\u003e\n range, (\u0026#92;uD800-\u0026#92;uDBFF), the second from the\n \u003cem\u003elow-surrogates\u003c/em\u003e range (\u0026#92;uDC00-\u0026#92;uDFFF).\n\n \u003cp\u003eA {@code char} value, therefore, represents Basic\n Multilingual Plane (BMP) code points, including the surrogate\n code points, or code units of the UTF-16 encoding. An\n {@code int} value represents all Unicode code points,\n including supplementary code points. The lower (least significant)\n 21 bits of {@code int} are used to represent Unicode code\n points and the upper (most significant) 11 bits must be zero.\n Unless otherwise specified, the behavior with respect to\n supplementary characters and surrogate {@code char} values is\n as follows:\n\n \u003cul\u003e\n \u003cli\u003eThe methods that only accept a {@code char} value cannot support\n supplementary characters. They treat {@code char} values from the\n surrogate ranges as undefined characters. For example,\n {@code Character.isLetter(\u0027\\uD840\u0027)} returns {@code false}, even though\n this specific value if followed by any low-surrogate value in a string\n would represent a letter.\n\n \u003cli\u003eThe methods that accept an {@code int} value support all\n Unicode characters, including supplementary characters. For\n example, {@code Character.isLetter(0x2F81A)} returns\n {@code true} because the code point value represents a letter\n (a CJK ideograph).\n \u003c/ul\u003e\n\n \u003cp\u003eIn the Java SE API documentation, \u003cem\u003eUnicode code point\u003c/em\u003e is\n used for character values in the range between U+0000 and U+10FFFF,\n and \u003cem\u003eUnicode code unit\u003c/em\u003e is used for 16-bit\n {@code char} values that are code units of the \u003cem\u003eUTF-16\u003c/em\u003e\n encoding. For more information on Unicode terminology, refer to the\n \u003ca href\u003d\"http://www.unicode.org/glossary/\"\u003eUnicode Glossary\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Character","qualifiedName":"java.lang.Character","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"1.0","innerClasses":["java.lang.Character.Subset","java.lang.Character.UnicodeBlock","java.lang.Character.UnicodeScript"],"isInnerClass":false,"constructors":[{"name":"Character","comment":"Constructs a newly allocated {@code Character} object that\n represents the specified {@code char} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"MIN_RADIX","comment":"The minimum radix available for conversion to and from strings.\n The constant value of this field is the smallest value permitted\n for the radix argument in radix-conversion methods such as the\n {@code digit} method, the {@code forDigit} method, and the\n {@code toString} method of class {@code Integer}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"MAX_RADIX","comment":"The maximum radix available for conversion to and from strings.\n The constant value of this field is the largest value permitted\n for the radix argument in radix-conversion methods such as the\n {@code digit} method, the {@code forDigit} method, and the\n {@code toString} method of class {@code Integer}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"36"},{"name":"MIN_VALUE","comment":"The constant value of this field is the smallest value of type\n {@code char}, {@code \u0027\\u0000\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"MAX_VALUE","comment":"The constant value of this field is the largest value of type\n {@code char}, {@code \u0027\\uFFFF\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"65535"},{"name":"TYPE","comment":"The {@code Class} instance representing the primitive type\n {@code char}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isStatic":true},{"name":"UNASSIGNED","comment":"General category \"Cn\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"UPPERCASE_LETTER","comment":"General category \"Lu\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"LOWERCASE_LETTER","comment":"General category \"Ll\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"TITLECASE_LETTER","comment":"General category \"Lt\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"MODIFIER_LETTER","comment":"General category \"Lm\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"OTHER_LETTER","comment":"General category \"Lo\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"NON_SPACING_MARK","comment":"General category \"Mn\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"ENCLOSING_MARK","comment":"General category \"Me\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"COMBINING_SPACING_MARK","comment":"General category \"Mc\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"DECIMAL_DIGIT_NUMBER","comment":"General category \"Nd\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"},{"name":"LETTER_NUMBER","comment":"General category \"Nl\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"},{"name":"OTHER_NUMBER","comment":"General category \"No\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"11"},{"name":"SPACE_SEPARATOR","comment":"General category \"Zs\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"12"},{"name":"LINE_SEPARATOR","comment":"General category \"Zl\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"13"},{"name":"PARAGRAPH_SEPARATOR","comment":"General category \"Zp\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"14"},{"name":"CONTROL","comment":"General category \"Cc\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"15"},{"name":"FORMAT","comment":"General category \"Cf\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"PRIVATE_USE","comment":"General category \"Co\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"18"},{"name":"SURROGATE","comment":"General category \"Cs\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"19"},{"name":"DASH_PUNCTUATION","comment":"General category \"Pd\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"20"},{"name":"START_PUNCTUATION","comment":"General category \"Ps\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"21"},{"name":"END_PUNCTUATION","comment":"General category \"Pe\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"22"},{"name":"CONNECTOR_PUNCTUATION","comment":"General category \"Pc\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"23"},{"name":"OTHER_PUNCTUATION","comment":"General category \"Po\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"24"},{"name":"MATH_SYMBOL","comment":"General category \"Sm\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"25"},{"name":"CURRENCY_SYMBOL","comment":"General category \"Sc\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"26"},{"name":"MODIFIER_SYMBOL","comment":"General category \"Sk\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"27"},{"name":"OTHER_SYMBOL","comment":"General category \"So\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"28"},{"name":"INITIAL_QUOTE_PUNCTUATION","comment":"General category \"Pi\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"29"},{"name":"FINAL_QUOTE_PUNCTUATION","comment":"General category \"Pf\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"30"},{"name":"DIRECTIONALITY_UNDEFINED","comment":"Undefined bidirectional character type. Undefined {@code char}\n values have undefined directionality in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-1"},{"name":"DIRECTIONALITY_LEFT_TO_RIGHT","comment":"Strong bidirectional character type \"L\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"DIRECTIONALITY_RIGHT_TO_LEFT","comment":"Strong bidirectional character type \"R\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC","comment":"Strong bidirectional character type \"AL\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"DIRECTIONALITY_EUROPEAN_NUMBER","comment":"Weak bidirectional character type \"EN\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR","comment":"Weak bidirectional character type \"ES\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR","comment":"Weak bidirectional character type \"ET\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"DIRECTIONALITY_ARABIC_NUMBER","comment":"Weak bidirectional character type \"AN\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR","comment":"Weak bidirectional character type \"CS\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"DIRECTIONALITY_NONSPACING_MARK","comment":"Weak bidirectional character type \"NSM\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"DIRECTIONALITY_BOUNDARY_NEUTRAL","comment":"Weak bidirectional character type \"BN\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"},{"name":"DIRECTIONALITY_PARAGRAPH_SEPARATOR","comment":"Neutral bidirectional character type \"B\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"},{"name":"DIRECTIONALITY_SEGMENT_SEPARATOR","comment":"Neutral bidirectional character type \"S\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"11"},{"name":"DIRECTIONALITY_WHITESPACE","comment":"Neutral bidirectional character type \"WS\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"12"},{"name":"DIRECTIONALITY_OTHER_NEUTRALS","comment":"Neutral bidirectional character type \"ON\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"13"},{"name":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING","comment":"Strong bidirectional character type \"LRE\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"14"},{"name":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE","comment":"Strong bidirectional character type \"LRO\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"15"},{"name":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING","comment":"Strong bidirectional character type \"RLE\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE","comment":"Strong bidirectional character type \"RLO\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"17"},{"name":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT","comment":"Weak bidirectional character type \"PDF\" in the Unicode specification.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isStatic":true,"constantValue":"18"},{"name":"MIN_HIGH_SURROGATE","comment":"The minimum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#high_surrogate_code_unit\"\u003e\n Unicode high-surrogate code unit\u003c/a\u003e\n in the UTF-16 encoding, constant {@code \u0027\\uD800\u0027}.\n A high-surrogate is also known as a \u003ci\u003eleading-surrogate\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"55296"},{"name":"MAX_HIGH_SURROGATE","comment":"The maximum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#high_surrogate_code_unit\"\u003e\n Unicode high-surrogate code unit\u003c/a\u003e\n in the UTF-16 encoding, constant {@code \u0027\\uDBFF\u0027}.\n A high-surrogate is also known as a \u003ci\u003eleading-surrogate\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"56319"},{"name":"MIN_LOW_SURROGATE","comment":"The minimum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#low_surrogate_code_unit\"\u003e\n Unicode low-surrogate code unit\u003c/a\u003e\n in the UTF-16 encoding, constant {@code \u0027\\uDC00\u0027}.\n A low-surrogate is also known as a \u003ci\u003etrailing-surrogate\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"56320"},{"name":"MAX_LOW_SURROGATE","comment":"The maximum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#low_surrogate_code_unit\"\u003e\n Unicode low-surrogate code unit\u003c/a\u003e\n in the UTF-16 encoding, constant {@code \u0027\\uDFFF\u0027}.\n A low-surrogate is also known as a \u003ci\u003etrailing-surrogate\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"57343"},{"name":"MIN_SURROGATE","comment":"The minimum value of a Unicode surrogate code unit in the\n UTF-16 encoding, constant {@code \u0027\\uD800\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"55296"},{"name":"MAX_SURROGATE","comment":"The maximum value of a Unicode surrogate code unit in the\n UTF-16 encoding, constant {@code \u0027\\uDFFF\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isStatic":true,"constantValue":"57343"},{"name":"MIN_SUPPLEMENTARY_CODE_POINT","comment":"The minimum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#supplementary_code_point\"\u003e\n Unicode supplementary code point\u003c/a\u003e, constant {@code U+10000}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"65536"},{"name":"MIN_CODE_POINT","comment":"The minimum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#code_point\"\u003e\n Unicode code point\u003c/a\u003e, constant {@code U+0000}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"0"},{"name":"MAX_CODE_POINT","comment":"The maximum value of a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#code_point\"\u003e\n Unicode code point\u003c/a\u003e, constant {@code U+10FFFF}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1114111"},{"name":"SIZE","comment":"The number of bits used to represent a \u003ctt\u003echar\u003c/tt\u003e value in unsigned\n binary form, constant {@code 16}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"BYTES","comment":"The number of bytes used to represent a {@code char} value in unsigned\n binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"}],"methods":[{"name":"valueOf","comment":"Returns a \u003ctt\u003eCharacter\u003c/tt\u003e instance representing the specified\n \u003ctt\u003echar\u003c/tt\u003e value.\n If a new \u003ctt\u003eCharacter\u003c/tt\u003e instance is not required, this method\n should generally be used in preference to the constructor\n {@link #Character(char)}, as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n This method will always cache values in the range {@code\n \u0027\\u0000\u0027} to {@code \u0027\\u007F\u0027}, inclusive, and may\n cache other values outside of this range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"Character","qualifiedName":"java.lang.Character","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"charValue","comment":"Returns the value of this {@code Character} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this {@code Character}; equal to the result\n of invoking {@code charValue()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for a {@code char} value; compatible with\n {@code Character.hashCode()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares this object against the specified object.\n The result is {@code true} if and only if the argument is not\n {@code null} and is a {@code Character} object that\n represents the same {@code char} value as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing this\n {@code Character}\u0027s value.  The result is a string of\n length 1 whose sole component is the primitive\n {@code char} value represented by this\n {@code Character} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing the\n specified {@code char}.  The result is a string of length\n 1 consisting solely of the specified {@code char}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isValidCodePoint","comment":"Determines whether the specified code point is a valid\n \u003ca href\u003d\"http://www.unicode.org/glossary/#code_point\"\u003e\n Unicode code point value\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBmpCodePoint","comment":"Determines whether the specified character (Unicode code point)\n is in the \u003ca href\u003d\"#BMP\"\u003eBasic Multilingual Plane (BMP)\u003c/a\u003e.\n Such code points can be represented using a single {@code char}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSupplementaryCodePoint","comment":"Determines whether the specified character (Unicode code point)\n is in the \u003ca href\u003d\"#supplementary\"\u003esupplementary character\u003c/a\u003e range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isHighSurrogate","comment":"Determines if the given {@code char} value is a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#high_surrogate_code_unit\"\u003e\n Unicode high-surrogate code unit\u003c/a\u003e\n (also known as \u003ci\u003eleading-surrogate code unit\u003c/i\u003e).\n\n \u003cp\u003eSuch values do not represent characters by themselves,\n but are used in the representation of\n \u003ca href\u003d\"#supplementary\"\u003esupplementary characters\u003c/a\u003e\n in the UTF-16 encoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLowSurrogate","comment":"Determines if the given {@code char} value is a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#low_surrogate_code_unit\"\u003e\n Unicode low-surrogate code unit\u003c/a\u003e\n (also known as \u003ci\u003etrailing-surrogate code unit\u003c/i\u003e).\n\n \u003cp\u003eSuch values do not represent characters by themselves,\n but are used in the representation of\n \u003ca href\u003d\"#supplementary\"\u003esupplementary characters\u003c/a\u003e\n in the UTF-16 encoding.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSurrogate","comment":"Determines if the given {@code char} value is a Unicode\n \u003ci\u003esurrogate code unit\u003c/i\u003e.\n\n \u003cp\u003eSuch values do not represent characters by themselves,\n but are used in the representation of\n \u003ca href\u003d\"#supplementary\"\u003esupplementary characters\u003c/a\u003e\n in the UTF-16 encoding.\n\n \u003cp\u003eA char value is a surrogate code unit if and only if it is either\n a {@linkplain #isLowSurrogate(char) low-surrogate code unit} or\n a {@linkplain #isHighSurrogate(char) high-surrogate code unit}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSurrogatePair","comment":"Determines whether the specified pair of {@code char}\n values is a valid\n \u003ca href\u003d\"http://www.unicode.org/glossary/#surrogate_pair\"\u003e\n Unicode surrogate pair\u003c/a\u003e.\n\n \u003cp\u003eThis method is equivalent to the expression:\n \u003cblockquote\u003e\u003cpre\u003e{@code\n isHighSurrogate(high) \u0026\u0026 isLowSurrogate(low)\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char, char)","flatSignature":"(char, char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"high","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},{"name":"low","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"charCount","comment":"Determines the number of {@code char} values needed to\n represent the specified character (Unicode code point). If the\n specified character is equal to or greater than 0x10000, then\n the method returns 2. Otherwise, the method returns 1.\n\n \u003cp\u003eThis method doesn\u0027t validate the specified character to be a\n valid Unicode code point. The caller must validate the\n character value using {@link #isValidCodePoint(int) isValidCodePoint}\n if necessary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toCodePoint","comment":"Converts the specified surrogate pair to its supplementary code\n point value. This method does not validate the specified\n surrogate pair. The caller must validate it using {@link\n #isSurrogatePair(char, char) isSurrogatePair} if necessary.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char, char)","flatSignature":"(char, char)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"high","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},{"name":"low","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointAt","comment":"Returns the code point at the given index of the\n {@code CharSequence}. If the {@code char} value at\n the given index in the {@code CharSequence} is in the\n high-surrogate range, the following index is less than the\n length of the {@code CharSequence}, and the\n {@code char} value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at the given index is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int)","flatSignature":"(CharSequence, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointAt","comment":"Returns the code point at the given index of the\n {@code char} array. If the {@code char} value at\n the given index in the {@code char} array is in the\n high-surrogate range, the following index is less than the\n length of the {@code char} array, and the\n {@code char} value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at the given index is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int)","flatSignature":"(char[], int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointAt","comment":"Returns the code point at the given index of the\n {@code char} array, where only array elements with\n {@code index} less than {@code limit} can be used. If\n the {@code char} value at the given index in the\n {@code char} array is in the high-surrogate range, the\n following index is less than the {@code limit}, and the\n {@code char} value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at the given index is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"limit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointBefore","comment":"Returns the code point preceding the given index of the\n {@code CharSequence}. If the {@code char} value at\n {@code (index - 1)} in the {@code CharSequence} is in\n the low-surrogate range, {@code (index - 2)} is not\n negative, and the {@code char} value at {@code (index - 2)}\n in the {@code CharSequence} is in the\n high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at {@code (index - 1)} is\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int)","flatSignature":"(CharSequence, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointBefore","comment":"Returns the code point preceding the given index of the\n {@code char} array. If the {@code char} value at\n {@code (index - 1)} in the {@code char} array is in\n the low-surrogate range, {@code (index - 2)} is not\n negative, and the {@code char} value at {@code (index - 2)}\n in the {@code char} array is in the\n high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at {@code (index - 1)} is\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int)","flatSignature":"(char[], int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointBefore","comment":"Returns the code point preceding the given index of the\n {@code char} array, where only array elements with\n {@code index} greater than or equal to {@code start}\n can be used. If the {@code char} value at {@code (index - 1)}\n in the {@code char} array is in the\n low-surrogate range, {@code (index - 2)} is not less than\n {@code start}, and the {@code char} value at\n {@code (index - 2)} in the {@code char} array is in\n the high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at {@code (index - 1)} is\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"highSurrogate","comment":"Returns the leading surrogate (a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#high_surrogate_code_unit\"\u003e\n high surrogate code unit\u003c/a\u003e) of the\n \u003ca href\u003d\"http://www.unicode.org/glossary/#surrogate_pair\"\u003e\n surrogate pair\u003c/a\u003e\n representing the specified supplementary character (Unicode\n code point) in the UTF-16 encoding.  If the specified character\n is not a\n \u003ca href\u003d\"Character.html#supplementary\"\u003esupplementary character\u003c/a\u003e,\n an unspecified {@code char} is returned.\n\n \u003cp\u003eIf\n {@link #isSupplementaryCodePoint isSupplementaryCodePoint(x)}\n is {@code true}, then\n {@link #isHighSurrogate isHighSurrogate}{@code (highSurrogate(x))} and\n {@link #toCodePoint toCodePoint}{@code (highSurrogate(x), }{@link #lowSurrogate lowSurrogate}{@code (x)) \u003d\u003d x}\n are also always {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lowSurrogate","comment":"Returns the trailing surrogate (a\n \u003ca href\u003d\"http://www.unicode.org/glossary/#low_surrogate_code_unit\"\u003e\n low surrogate code unit\u003c/a\u003e) of the\n \u003ca href\u003d\"http://www.unicode.org/glossary/#surrogate_pair\"\u003e\n surrogate pair\u003c/a\u003e\n representing the specified supplementary character (Unicode\n code point) in the UTF-16 encoding.  If the specified character\n is not a\n \u003ca href\u003d\"Character.html#supplementary\"\u003esupplementary character\u003c/a\u003e,\n an unspecified {@code char} is returned.\n\n \u003cp\u003eIf\n {@link #isSupplementaryCodePoint isSupplementaryCodePoint(x)}\n is {@code true}, then\n {@link #isLowSurrogate isLowSurrogate}{@code (lowSurrogate(x))} and\n {@link #toCodePoint toCodePoint}{@code (}{@link #highSurrogate highSurrogate}{@code (x), lowSurrogate(x)) \u003d\u003d x}\n are also always {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toChars","comment":"Converts the specified character (Unicode code point) to its\n UTF-16 representation. If the specified code point is a BMP\n (Basic Multilingual Plane or Plane 0) value, the same value is\n stored in {@code dst[dstIndex]}, and 1 is returned. If the\n specified code point is a supplementary character, its\n surrogate values are stored in {@code dst[dstIndex]}\n (high-surrogate) and {@code dst[dstIndex+1]}\n (low-surrogate), and 2 is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, char[], int)","flatSignature":"(int, char[], int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dst","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"dstIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toChars","comment":"Converts the specified character (Unicode code point) to its\n UTF-16 representation stored in a {@code char} array. If\n the specified code point is a BMP (Basic Multilingual Plane or\n Plane 0) value, the resulting {@code char} array has\n the same value as {@code codePoint}. If the specified code\n point is a supplementary code point, the resulting\n {@code char} array has the corresponding surrogate pair.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointCount","comment":"Returns the number of Unicode code points in the text range of\n the specified char sequence. The text range begins at the\n specified {@code beginIndex} and extends to the\n {@code char} at index {@code endIndex - 1}. Thus the\n length (in {@code char}s) of the text range is\n {@code endIndex-beginIndex}. Unpaired surrogates within\n the text range count as one code point each.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int, int)","flatSignature":"(CharSequence, int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"beginIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointCount","comment":"Returns the number of Unicode code points in a subarray of the\n {@code char} array argument. The {@code offset}\n argument is the index of the first {@code char} of the\n subarray and the {@code count} argument specifies the\n length of the subarray in {@code char}s. Unpaired\n surrogates within the subarray count as one code point each.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"offsetByCodePoints","comment":"Returns the index within the given char sequence that is offset\n from the given {@code index} by {@code codePointOffset}\n code points. Unpaired surrogates within the text range given by\n {@code index} and {@code codePointOffset} count as\n one code point each.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, int, int)","flatSignature":"(CharSequence, int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"seq","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"codePointOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"offsetByCodePoints","comment":"Returns the index within the given {@code char} subarray\n that is offset from the given {@code index} by\n {@code codePointOffset} code points. The\n {@code start} and {@code count} arguments specify a\n subarray of the {@code char} array. Unpaired surrogates\n within the text range given by {@code index} and\n {@code codePointOffset} count as one code point each.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int, int, int)","flatSignature":"(char[], int, int, int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"codePointOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLowerCase","comment":"Determines if the specified character is a lowercase character.\n \u003cp\u003e\n A character is lowercase if its general category type, provided\n by {@code Character.getType(ch)}, is\n {@code LOWERCASE_LETTER}, or it has contributory property\n Other_Lowercase as defined by the Unicode Standard.\n \u003cp\u003e\n The following are examples of lowercase characters:\n \u003cblockquote\u003e\u003cpre\u003e\n a b c d e f g h i j k l m n o p q r s t u v w x y z\n \u0027\u0026#92;u00DF\u0027 \u0027\u0026#92;u00E0\u0027 \u0027\u0026#92;u00E1\u0027 \u0027\u0026#92;u00E2\u0027 \u0027\u0026#92;u00E3\u0027 \u0027\u0026#92;u00E4\u0027 \u0027\u0026#92;u00E5\u0027 \u0027\u0026#92;u00E6\u0027\n \u0027\u0026#92;u00E7\u0027 \u0027\u0026#92;u00E8\u0027 \u0027\u0026#92;u00E9\u0027 \u0027\u0026#92;u00EA\u0027 \u0027\u0026#92;u00EB\u0027 \u0027\u0026#92;u00EC\u0027 \u0027\u0026#92;u00ED\u0027 \u0027\u0026#92;u00EE\u0027\n \u0027\u0026#92;u00EF\u0027 \u0027\u0026#92;u00F0\u0027 \u0027\u0026#92;u00F1\u0027 \u0027\u0026#92;u00F2\u0027 \u0027\u0026#92;u00F3\u0027 \u0027\u0026#92;u00F4\u0027 \u0027\u0026#92;u00F5\u0027 \u0027\u0026#92;u00F6\u0027\n \u0027\u0026#92;u00F8\u0027 \u0027\u0026#92;u00F9\u0027 \u0027\u0026#92;u00FA\u0027 \u0027\u0026#92;u00FB\u0027 \u0027\u0026#92;u00FC\u0027 \u0027\u0026#92;u00FD\u0027 \u0027\u0026#92;u00FE\u0027 \u0027\u0026#92;u00FF\u0027\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e Many other Unicode characters are lowercase too.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLowerCase(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLowerCase","comment":"Determines if the specified character (Unicode code point) is a\n lowercase character.\n \u003cp\u003e\n A character is lowercase if its general category type, provided\n by {@link Character#getType getType(codePoint)}, is\n {@code LOWERCASE_LETTER}, or it has contributory property\n Other_Lowercase as defined by the Unicode Standard.\n \u003cp\u003e\n The following are examples of lowercase characters:\n \u003cblockquote\u003e\u003cpre\u003e\n a b c d e f g h i j k l m n o p q r s t u v w x y z\n \u0027\u0026#92;u00DF\u0027 \u0027\u0026#92;u00E0\u0027 \u0027\u0026#92;u00E1\u0027 \u0027\u0026#92;u00E2\u0027 \u0027\u0026#92;u00E3\u0027 \u0027\u0026#92;u00E4\u0027 \u0027\u0026#92;u00E5\u0027 \u0027\u0026#92;u00E6\u0027\n \u0027\u0026#92;u00E7\u0027 \u0027\u0026#92;u00E8\u0027 \u0027\u0026#92;u00E9\u0027 \u0027\u0026#92;u00EA\u0027 \u0027\u0026#92;u00EB\u0027 \u0027\u0026#92;u00EC\u0027 \u0027\u0026#92;u00ED\u0027 \u0027\u0026#92;u00EE\u0027\n \u0027\u0026#92;u00EF\u0027 \u0027\u0026#92;u00F0\u0027 \u0027\u0026#92;u00F1\u0027 \u0027\u0026#92;u00F2\u0027 \u0027\u0026#92;u00F3\u0027 \u0027\u0026#92;u00F4\u0027 \u0027\u0026#92;u00F5\u0027 \u0027\u0026#92;u00F6\u0027\n \u0027\u0026#92;u00F8\u0027 \u0027\u0026#92;u00F9\u0027 \u0027\u0026#92;u00FA\u0027 \u0027\u0026#92;u00FB\u0027 \u0027\u0026#92;u00FC\u0027 \u0027\u0026#92;u00FD\u0027 \u0027\u0026#92;u00FE\u0027 \u0027\u0026#92;u00FF\u0027\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e Many other Unicode characters are lowercase too.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isUpperCase","comment":"Determines if the specified character is an uppercase character.\n \u003cp\u003e\n A character is uppercase if its general category type, provided by\n {@code Character.getType(ch)}, is {@code UPPERCASE_LETTER}.\n or it has contributory property Other_Uppercase as defined by the Unicode Standard.\n \u003cp\u003e\n The following are examples of uppercase characters:\n \u003cblockquote\u003e\u003cpre\u003e\n A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n \u0027\u0026#92;u00C0\u0027 \u0027\u0026#92;u00C1\u0027 \u0027\u0026#92;u00C2\u0027 \u0027\u0026#92;u00C3\u0027 \u0027\u0026#92;u00C4\u0027 \u0027\u0026#92;u00C5\u0027 \u0027\u0026#92;u00C6\u0027 \u0027\u0026#92;u00C7\u0027\n \u0027\u0026#92;u00C8\u0027 \u0027\u0026#92;u00C9\u0027 \u0027\u0026#92;u00CA\u0027 \u0027\u0026#92;u00CB\u0027 \u0027\u0026#92;u00CC\u0027 \u0027\u0026#92;u00CD\u0027 \u0027\u0026#92;u00CE\u0027 \u0027\u0026#92;u00CF\u0027\n \u0027\u0026#92;u00D0\u0027 \u0027\u0026#92;u00D1\u0027 \u0027\u0026#92;u00D2\u0027 \u0027\u0026#92;u00D3\u0027 \u0027\u0026#92;u00D4\u0027 \u0027\u0026#92;u00D5\u0027 \u0027\u0026#92;u00D6\u0027 \u0027\u0026#92;u00D8\u0027\n \u0027\u0026#92;u00D9\u0027 \u0027\u0026#92;u00DA\u0027 \u0027\u0026#92;u00DB\u0027 \u0027\u0026#92;u00DC\u0027 \u0027\u0026#92;u00DD\u0027 \u0027\u0026#92;u00DE\u0027\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e Many other Unicode characters are uppercase too.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUpperCase(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isUpperCase","comment":"Determines if the specified character (Unicode code point) is an uppercase character.\n \u003cp\u003e\n A character is uppercase if its general category type, provided by\n {@link Character#getType(int) getType(codePoint)}, is {@code UPPERCASE_LETTER},\n or it has contributory property Other_Uppercase as defined by the Unicode Standard.\n \u003cp\u003e\n The following are examples of uppercase characters:\n \u003cblockquote\u003e\u003cpre\u003e\n A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n \u0027\u0026#92;u00C0\u0027 \u0027\u0026#92;u00C1\u0027 \u0027\u0026#92;u00C2\u0027 \u0027\u0026#92;u00C3\u0027 \u0027\u0026#92;u00C4\u0027 \u0027\u0026#92;u00C5\u0027 \u0027\u0026#92;u00C6\u0027 \u0027\u0026#92;u00C7\u0027\n \u0027\u0026#92;u00C8\u0027 \u0027\u0026#92;u00C9\u0027 \u0027\u0026#92;u00CA\u0027 \u0027\u0026#92;u00CB\u0027 \u0027\u0026#92;u00CC\u0027 \u0027\u0026#92;u00CD\u0027 \u0027\u0026#92;u00CE\u0027 \u0027\u0026#92;u00CF\u0027\n \u0027\u0026#92;u00D0\u0027 \u0027\u0026#92;u00D1\u0027 \u0027\u0026#92;u00D2\u0027 \u0027\u0026#92;u00D3\u0027 \u0027\u0026#92;u00D4\u0027 \u0027\u0026#92;u00D5\u0027 \u0027\u0026#92;u00D6\u0027 \u0027\u0026#92;u00D8\u0027\n \u0027\u0026#92;u00D9\u0027 \u0027\u0026#92;u00DA\u0027 \u0027\u0026#92;u00DB\u0027 \u0027\u0026#92;u00DC\u0027 \u0027\u0026#92;u00DD\u0027 \u0027\u0026#92;u00DE\u0027\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e Many other Unicode characters are uppercase too.\u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isTitleCase","comment":"Determines if the specified character is a titlecase character.\n \u003cp\u003e\n A character is a titlecase character if its general\n category type, provided by {@code Character.getType(ch)},\n is {@code TITLECASE_LETTER}.\n \u003cp\u003e\n Some characters look like pairs of Latin letters. For example, there\n is an uppercase letter that looks like \"LJ\" and has a corresponding\n lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\",\n is the appropriate form to use when rendering a word in lowercase\n with initial capitals, as for a book title.\n \u003cp\u003e\n These are some of the Unicode characters for which this method returns\n {@code true}:\n \u003cul\u003e\n \u003cli\u003e{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}\n \u003cli\u003e{@code LATIN CAPITAL LETTER L WITH SMALL LETTER J}\n \u003cli\u003e{@code LATIN CAPITAL LETTER N WITH SMALL LETTER J}\n \u003cli\u003e{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z}\n \u003c/ul\u003e\n \u003cp\u003e Many other Unicode characters are titlecase too.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isTitleCase(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isTitleCase","comment":"Determines if the specified character (Unicode code point) is a titlecase character.\n \u003cp\u003e\n A character is a titlecase character if its general\n category type, provided by {@link Character#getType(int) getType(codePoint)},\n is {@code TITLECASE_LETTER}.\n \u003cp\u003e\n Some characters look like pairs of Latin letters. For example, there\n is an uppercase letter that looks like \"LJ\" and has a corresponding\n lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\",\n is the appropriate form to use when rendering a word in lowercase\n with initial capitals, as for a book title.\n \u003cp\u003e\n These are some of the Unicode characters for which this method returns\n {@code true}:\n \u003cul\u003e\n \u003cli\u003e{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}\n \u003cli\u003e{@code LATIN CAPITAL LETTER L WITH SMALL LETTER J}\n \u003cli\u003e{@code LATIN CAPITAL LETTER N WITH SMALL LETTER J}\n \u003cli\u003e{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z}\n \u003c/ul\u003e\n \u003cp\u003e Many other Unicode characters are titlecase too.\u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isDigit","comment":"Determines if the specified character is a digit.\n \u003cp\u003e\n A character is a digit if its general category type, provided\n by {@code Character.getType(ch)}, is\n {@code DECIMAL_DIGIT_NUMBER}.\n \u003cp\u003e\n Some Unicode character ranges that contain digits:\n \u003cul\u003e\n \u003cli\u003e{@code \u0027\\u0030\u0027} through {@code \u0027\\u0039\u0027},\n     ISO-LATIN-1 digits ({@code \u00270\u0027} through {@code \u00279\u0027})\n \u003cli\u003e{@code \u0027\\u0660\u0027} through {@code \u0027\\u0669\u0027},\n     Arabic-Indic digits\n \u003cli\u003e{@code \u0027\\u06F0\u0027} through {@code \u0027\\u06F9\u0027},\n     Extended Arabic-Indic digits\n \u003cli\u003e{@code \u0027\\u0966\u0027} through {@code \u0027\\u096F\u0027},\n     Devanagari digits\n \u003cli\u003e{@code \u0027\\uFF10\u0027} through {@code \u0027\\uFF19\u0027},\n     Fullwidth digits\n \u003c/ul\u003e\n\n Many other character ranges contain digits as well.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isDigit(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isDigit","comment":"Determines if the specified character (Unicode code point) is a digit.\n \u003cp\u003e\n A character is a digit if its general category type, provided\n by {@link Character#getType(int) getType(codePoint)}, is\n {@code DECIMAL_DIGIT_NUMBER}.\n \u003cp\u003e\n Some Unicode character ranges that contain digits:\n \u003cul\u003e\n \u003cli\u003e{@code \u0027\\u0030\u0027} through {@code \u0027\\u0039\u0027},\n     ISO-LATIN-1 digits ({@code \u00270\u0027} through {@code \u00279\u0027})\n \u003cli\u003e{@code \u0027\\u0660\u0027} through {@code \u0027\\u0669\u0027},\n     Arabic-Indic digits\n \u003cli\u003e{@code \u0027\\u06F0\u0027} through {@code \u0027\\u06F9\u0027},\n     Extended Arabic-Indic digits\n \u003cli\u003e{@code \u0027\\u0966\u0027} through {@code \u0027\\u096F\u0027},\n     Devanagari digits\n \u003cli\u003e{@code \u0027\\uFF10\u0027} through {@code \u0027\\uFF19\u0027},\n     Fullwidth digits\n \u003c/ul\u003e\n\n Many other character ranges contain digits as well.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isDefined","comment":"Determines if a character is defined in Unicode.\n \u003cp\u003e\n A character is defined if at least one of the following is true:\n \u003cul\u003e\n \u003cli\u003eIt has an entry in the UnicodeData file.\n \u003cli\u003eIt has a value in a range defined by the UnicodeData file.\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isDefined(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isDefined","comment":"Determines if a character (Unicode code point) is defined in Unicode.\n \u003cp\u003e\n A character is defined if at least one of the following is true:\n \u003cul\u003e\n \u003cli\u003eIt has an entry in the UnicodeData file.\n \u003cli\u003eIt has a value in a range defined by the UnicodeData file.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLetter","comment":"Determines if the specified character is a letter.\n \u003cp\u003e\n A character is considered to be a letter if its general\n category type, provided by {@code Character.getType(ch)},\n is any of the following:\n \u003cul\u003e\n \u003cli\u003e {@code UPPERCASE_LETTER}\n \u003cli\u003e {@code LOWERCASE_LETTER}\n \u003cli\u003e {@code TITLECASE_LETTER}\n \u003cli\u003e {@code MODIFIER_LETTER}\n \u003cli\u003e {@code OTHER_LETTER}\n \u003c/ul\u003e\n\n Not all letters have case. Many characters are\n letters but are neither uppercase nor lowercase nor titlecase.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLetter(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLetter","comment":"Determines if the specified character (Unicode code point) is a letter.\n \u003cp\u003e\n A character is considered to be a letter if its general\n category type, provided by {@link Character#getType(int) getType(codePoint)},\n is any of the following:\n \u003cul\u003e\n \u003cli\u003e {@code UPPERCASE_LETTER}\n \u003cli\u003e {@code LOWERCASE_LETTER}\n \u003cli\u003e {@code TITLECASE_LETTER}\n \u003cli\u003e {@code MODIFIER_LETTER}\n \u003cli\u003e {@code OTHER_LETTER}\n \u003c/ul\u003e\n\n Not all letters have case. Many characters are\n letters but are neither uppercase nor lowercase nor titlecase.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLetterOrDigit","comment":"Determines if the specified character is a letter or digit.\n \u003cp\u003e\n A character is considered to be a letter or digit if either\n {@code Character.isLetter(char ch)} or\n {@code Character.isDigit(char ch)} returns\n {@code true} for the character.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLetterOrDigit(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isLetterOrDigit","comment":"Determines if the specified character (Unicode code point) is a letter or digit.\n \u003cp\u003e\n A character is considered to be a letter or digit if either\n {@link #isLetter(int) isLetter(codePoint)} or\n {@link #isDigit(int) isDigit(codePoint)} returns\n {@code true} for the character.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isJavaLetter","comment":"Determines if the specified character is permissible as the first\n character in a Java identifier.\n \u003cp\u003e\n A character may start a Java identifier if and only if\n one of the following is true:\n \u003cul\u003e\n \u003cli\u003e {@link #isLetter(char) isLetter(ch)} returns {@code true}\n \u003cli\u003e {@link #getType(char) getType(ch)} returns {@code LETTER_NUMBER}\n \u003cli\u003e {@code ch} is a currency symbol (such as {@code \u0027$\u0027})\n \u003cli\u003e {@code ch} is a connecting punctuation character (such as {@code \u0027_\u0027}).\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isJavaLetterOrDigit","comment":"Determines if the specified character may be part of a Java\n identifier as other than the first character.\n \u003cp\u003e\n A character may be part of a Java identifier if and only if any\n of the following are true:\n \u003cul\u003e\n \u003cli\u003e  it is a letter\n \u003cli\u003e  it is a currency symbol (such as {@code \u0027$\u0027})\n \u003cli\u003e  it is a connecting punctuation character (such as {@code \u0027_\u0027})\n \u003cli\u003e  it is a digit\n \u003cli\u003e  it is a numeric letter (such as a Roman numeral character)\n \u003cli\u003e  it is a combining mark\n \u003cli\u003e  it is a non-spacing mark\n \u003cli\u003e {@code isIdentifierIgnorable} returns\n {@code true} for the character.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAlphabetic","comment":"Determines if the specified character (Unicode code point) is an alphabet.\n \u003cp\u003e\n A character is considered to be alphabetic if its general category type,\n provided by {@link Character#getType(int) getType(codePoint)}, is any of\n the following:\n \u003cul\u003e\n \u003cli\u003e \u003ccode\u003eUPPERCASE_LETTER\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eLOWERCASE_LETTER\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eTITLECASE_LETTER\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eMODIFIER_LETTER\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eOTHER_LETTER\u003c/code\u003e\n \u003cli\u003e \u003ccode\u003eLETTER_NUMBER\u003c/code\u003e\n \u003c/ul\u003e\n or it has contributory property Other_Alphabetic as defined by the\n Unicode Standard.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isIdeographic","comment":"Determines if the specified character (Unicode code point) is a CJKV\n (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by\n the Unicode Standard.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isJavaIdentifierStart","comment":"Determines if the specified character is\n permissible as the first character in a Java identifier.\n \u003cp\u003e\n A character may start a Java identifier if and only if\n one of the following conditions is true:\n \u003cul\u003e\n \u003cli\u003e {@link #isLetter(char) isLetter(ch)} returns {@code true}\n \u003cli\u003e {@link #getType(char) getType(ch)} returns {@code LETTER_NUMBER}\n \u003cli\u003e {@code ch} is a currency symbol (such as {@code \u0027$\u0027})\n \u003cli\u003e {@code ch} is a connecting punctuation character (such as {@code \u0027_\u0027}).\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isJavaIdentifierStart(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isJavaIdentifierStart","comment":"Determines if the character (Unicode code point) is\n permissible as the first character in a Java identifier.\n \u003cp\u003e\n A character may start a Java identifier if and only if\n one of the following conditions is true:\n \u003cul\u003e\n \u003cli\u003e {@link #isLetter(int) isLetter(codePoint)}\n      returns {@code true}\n \u003cli\u003e {@link #getType(int) getType(codePoint)}\n      returns {@code LETTER_NUMBER}\n \u003cli\u003e the referenced character is a currency symbol (such as {@code \u0027$\u0027})\n \u003cli\u003e the referenced character is a connecting punctuation character\n      (such as {@code \u0027_\u0027}).\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isJavaIdentifierPart","comment":"Determines if the specified character may be part of a Java\n identifier as other than the first character.\n \u003cp\u003e\n A character may be part of a Java identifier if any of the following\n are true:\n \u003cul\u003e\n \u003cli\u003e  it is a letter\n \u003cli\u003e  it is a currency symbol (such as {@code \u0027$\u0027})\n \u003cli\u003e  it is a connecting punctuation character (such as {@code \u0027_\u0027})\n \u003cli\u003e  it is a digit\n \u003cli\u003e  it is a numeric letter (such as a Roman numeral character)\n \u003cli\u003e  it is a combining mark\n \u003cli\u003e  it is a non-spacing mark\n \u003cli\u003e {@code isIdentifierIgnorable} returns\n {@code true} for the character\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isJavaIdentifierPart(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isJavaIdentifierPart","comment":"Determines if the character (Unicode code point) may be part of a Java\n identifier as other than the first character.\n \u003cp\u003e\n A character may be part of a Java identifier if any of the following\n are true:\n \u003cul\u003e\n \u003cli\u003e  it is a letter\n \u003cli\u003e  it is a currency symbol (such as {@code \u0027$\u0027})\n \u003cli\u003e  it is a connecting punctuation character (such as {@code \u0027_\u0027})\n \u003cli\u003e  it is a digit\n \u003cli\u003e  it is a numeric letter (such as a Roman numeral character)\n \u003cli\u003e  it is a combining mark\n \u003cli\u003e  it is a non-spacing mark\n \u003cli\u003e {@link #isIdentifierIgnorable(int)\n isIdentifierIgnorable(codePoint)} returns {@code true} for\n the character\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isUnicodeIdentifierStart","comment":"Determines if the specified character is permissible as the\n first character in a Unicode identifier.\n \u003cp\u003e\n A character may start a Unicode identifier if and only if\n one of the following conditions is true:\n \u003cul\u003e\n \u003cli\u003e {@link #isLetter(char) isLetter(ch)} returns {@code true}\n \u003cli\u003e {@link #getType(char) getType(ch)} returns\n      {@code LETTER_NUMBER}.\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUnicodeIdentifierStart(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isUnicodeIdentifierStart","comment":"Determines if the specified character (Unicode code point) is permissible as the\n first character in a Unicode identifier.\n \u003cp\u003e\n A character may start a Unicode identifier if and only if\n one of the following conditions is true:\n \u003cul\u003e\n \u003cli\u003e {@link #isLetter(int) isLetter(codePoint)}\n      returns {@code true}\n \u003cli\u003e {@link #getType(int) getType(codePoint)}\n      returns {@code LETTER_NUMBER}.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isUnicodeIdentifierPart","comment":"Determines if the specified character may be part of a Unicode\n identifier as other than the first character.\n \u003cp\u003e\n A character may be part of a Unicode identifier if and only if\n one of the following statements is true:\n \u003cul\u003e\n \u003cli\u003e  it is a letter\n \u003cli\u003e  it is a connecting punctuation character (such as {@code \u0027_\u0027})\n \u003cli\u003e  it is a digit\n \u003cli\u003e  it is a numeric letter (such as a Roman numeral character)\n \u003cli\u003e  it is a combining mark\n \u003cli\u003e  it is a non-spacing mark\n \u003cli\u003e {@code isIdentifierIgnorable} returns\n {@code true} for this character.\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUnicodeIdentifierPart(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isUnicodeIdentifierPart","comment":"Determines if the specified character (Unicode code point) may be part of a Unicode\n identifier as other than the first character.\n \u003cp\u003e\n A character may be part of a Unicode identifier if and only if\n one of the following statements is true:\n \u003cul\u003e\n \u003cli\u003e  it is a letter\n \u003cli\u003e  it is a connecting punctuation character (such as {@code \u0027_\u0027})\n \u003cli\u003e  it is a digit\n \u003cli\u003e  it is a numeric letter (such as a Roman numeral character)\n \u003cli\u003e  it is a combining mark\n \u003cli\u003e  it is a non-spacing mark\n \u003cli\u003e {@code isIdentifierIgnorable} returns\n {@code true} for this character.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isIdentifierIgnorable","comment":"Determines if the specified character should be regarded as\n an ignorable character in a Java identifier or a Unicode identifier.\n \u003cp\u003e\n The following Unicode characters are ignorable in a Java identifier\n or a Unicode identifier:\n \u003cul\u003e\n \u003cli\u003eISO control characters that are not whitespace\n \u003cul\u003e\n \u003cli\u003e{@code \u0027\\u0000\u0027} through {@code \u0027\\u0008\u0027}\n \u003cli\u003e{@code \u0027\\u000E\u0027} through {@code \u0027\\u001B\u0027}\n \u003cli\u003e{@code \u0027\\u007F\u0027} through {@code \u0027\\u009F\u0027}\n \u003c/ul\u003e\n\n \u003cli\u003eall characters that have the {@code FORMAT} general\n category value\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isIdentifierIgnorable(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isIdentifierIgnorable","comment":"Determines if the specified character (Unicode code point) should be regarded as\n an ignorable character in a Java identifier or a Unicode identifier.\n \u003cp\u003e\n The following Unicode characters are ignorable in a Java identifier\n or a Unicode identifier:\n \u003cul\u003e\n \u003cli\u003eISO control characters that are not whitespace\n \u003cul\u003e\n \u003cli\u003e{@code \u0027\\u0000\u0027} through {@code \u0027\\u0008\u0027}\n \u003cli\u003e{@code \u0027\\u000E\u0027} through {@code \u0027\\u001B\u0027}\n \u003cli\u003e{@code \u0027\\u007F\u0027} through {@code \u0027\\u009F\u0027}\n \u003c/ul\u003e\n\n \u003cli\u003eall characters that have the {@code FORMAT} general\n category value\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLowerCase","comment":"Converts the character argument to lowercase using case\n mapping information from the UnicodeData file.\n \u003cp\u003e\n Note that\n {@code Character.isLowerCase(Character.toLowerCase(ch))}\n does not always return {@code true} for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n \u003cp\u003eIn general, {@link String#toLowerCase()} should be used to map\n characters to lowercase. {@code String} case mapping methods\n have several benefits over {@code Character} case mapping methods.\n {@code String} case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the {@code Character} case mapping methods cannot.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #toLowerCase(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLowerCase","comment":"Converts the character (Unicode code point) argument to\n lowercase using case mapping information from the UnicodeData\n file.\n\n \u003cp\u003e Note that\n {@code Character.isLowerCase(Character.toLowerCase(codePoint))}\n does not always return {@code true} for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n \u003cp\u003eIn general, {@link String#toLowerCase()} should be used to map\n characters to lowercase. {@code String} case mapping methods\n have several benefits over {@code Character} case mapping methods.\n {@code String} case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the {@code Character} case mapping methods cannot.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUpperCase","comment":"Converts the character argument to uppercase using case mapping\n information from the UnicodeData file.\n \u003cp\u003e\n Note that\n {@code Character.isUpperCase(Character.toUpperCase(ch))}\n does not always return {@code true} for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n \u003cp\u003eIn general, {@link String#toUpperCase()} should be used to map\n characters to uppercase. {@code String} case mapping methods\n have several benefits over {@code Character} case mapping methods.\n {@code String} case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the {@code Character} case mapping methods cannot.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #toUpperCase(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUpperCase","comment":"Converts the character (Unicode code point) argument to\n uppercase using case mapping information from the UnicodeData\n file.\n\n \u003cp\u003eNote that\n {@code Character.isUpperCase(Character.toUpperCase(codePoint))}\n does not always return {@code true} for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n \u003cp\u003eIn general, {@link String#toUpperCase()} should be used to map\n characters to uppercase. {@code String} case mapping methods\n have several benefits over {@code Character} case mapping methods.\n {@code String} case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the {@code Character} case mapping methods cannot.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toTitleCase","comment":"Converts the character argument to titlecase using case mapping\n information from the UnicodeData file. If a character has no\n explicit titlecase mapping and is not itself a titlecase char\n according to UnicodeData, then the uppercase mapping is\n returned as an equivalent titlecase mapping. If the\n {@code char} argument is already a titlecase\n {@code char}, the same {@code char} value will be\n returned.\n \u003cp\u003e\n Note that\n {@code Character.isTitleCase(Character.toTitleCase(ch))}\n does not always return {@code true} for some ranges of\n characters.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #toTitleCase(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toTitleCase","comment":"Converts the character (Unicode code point) argument to titlecase using case mapping\n information from the UnicodeData file. If a character has no\n explicit titlecase mapping and is not itself a titlecase char\n according to UnicodeData, then the uppercase mapping is\n returned as an equivalent titlecase mapping. If the\n character argument is already a titlecase\n character, the same character value will be\n returned.\n\n \u003cp\u003eNote that\n {@code Character.isTitleCase(Character.toTitleCase(codePoint))}\n does not always return {@code true} for some ranges of\n characters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"digit","comment":"Returns the numeric value of the character {@code ch} in the\n specified radix.\n \u003cp\u003e\n If the radix is not in the range {@code MIN_RADIX} \u0026le;\n {@code radix} \u0026le; {@code MAX_RADIX} or if the\n value of {@code ch} is not a valid digit in the specified\n radix, {@code -1} is returned. A character is a valid digit\n if at least one of the following is true:\n \u003cul\u003e\n \u003cli\u003eThe method {@code isDigit} is {@code true} of the character\n     and the Unicode decimal digit value of the character (or its\n     single-character decomposition) is less than the specified radix.\n     In this case the decimal digit value is returned.\n \u003cli\u003eThe character is one of the uppercase Latin letters\n     {@code \u0027A\u0027} through {@code \u0027Z\u0027} and its code is less than\n     {@code radix + \u0027A\u0027 - 10}.\n     In this case, {@code ch - \u0027A\u0027 + 10}\n     is returned.\n \u003cli\u003eThe character is one of the lowercase Latin letters\n     {@code \u0027a\u0027} through {@code \u0027z\u0027} and its code is less than\n     {@code radix + \u0027a\u0027 - 10}.\n     In this case, {@code ch - \u0027a\u0027 + 10}\n     is returned.\n \u003cli\u003eThe character is one of the fullwidth uppercase Latin letters A\n     ({@code \u0027\\uFF21\u0027}) through Z ({@code \u0027\\uFF3A\u0027})\n     and its code is less than\n     {@code radix + \u0027\\uFF21\u0027 - 10}.\n     In this case, {@code ch - \u0027\\uFF21\u0027 + 10}\n     is returned.\n \u003cli\u003eThe character is one of the fullwidth lowercase Latin letters a\n     ({@code \u0027\\uFF41\u0027}) through z ({@code \u0027\\uFF5A\u0027})\n     and its code is less than\n     {@code radix + \u0027\\uFF41\u0027 - 10}.\n     In this case, {@code ch - \u0027\\uFF41\u0027 + 10}\n     is returned.\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #digit(int, int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char, int)","flatSignature":"(char, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"digit","comment":"Returns the numeric value of the specified character (Unicode\n code point) in the specified radix.\n\n \u003cp\u003eIf the radix is not in the range {@code MIN_RADIX} \u0026le;\n {@code radix} \u0026le; {@code MAX_RADIX} or if the\n character is not a valid digit in the specified\n radix, {@code -1} is returned. A character is a valid digit\n if at least one of the following is true:\n \u003cul\u003e\n \u003cli\u003eThe method {@link #isDigit(int) isDigit(codePoint)} is {@code true} of the character\n     and the Unicode decimal digit value of the character (or its\n     single-character decomposition) is less than the specified radix.\n     In this case the decimal digit value is returned.\n \u003cli\u003eThe character is one of the uppercase Latin letters\n     {@code \u0027A\u0027} through {@code \u0027Z\u0027} and its code is less than\n     {@code radix + \u0027A\u0027 - 10}.\n     In this case, {@code codePoint - \u0027A\u0027 + 10}\n     is returned.\n \u003cli\u003eThe character is one of the lowercase Latin letters\n     {@code \u0027a\u0027} through {@code \u0027z\u0027} and its code is less than\n     {@code radix + \u0027a\u0027 - 10}.\n     In this case, {@code codePoint - \u0027a\u0027 + 10}\n     is returned.\n \u003cli\u003eThe character is one of the fullwidth uppercase Latin letters A\n     ({@code \u0027\\uFF21\u0027}) through Z ({@code \u0027\\uFF3A\u0027})\n     and its code is less than\n     {@code radix + \u0027\\uFF21\u0027 - 10}.\n     In this case,\n     {@code codePoint - \u0027\\uFF21\u0027 + 10}\n     is returned.\n \u003cli\u003eThe character is one of the fullwidth lowercase Latin letters a\n     ({@code \u0027\\uFF41\u0027}) through z ({@code \u0027\\uFF5A\u0027})\n     and its code is less than\n     {@code radix + \u0027\\uFF41\u0027- 10}.\n     In this case,\n     {@code codePoint - \u0027\\uFF41\u0027 + 10}\n     is returned.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNumericValue","comment":"Returns the {@code int} value that the specified Unicode\n character represents. For example, the character\n {@code \u0027\\u216C\u0027} (the roman numeral fifty) will return\n an int with a value of 50.\n \u003cp\u003e\n The letters A-Z in their uppercase ({@code \u0027\\u0041\u0027} through\n {@code \u0027\\u005A\u0027}), lowercase\n ({@code \u0027\\u0061\u0027} through {@code \u0027\\u007A\u0027}), and\n full width variant ({@code \u0027\\uFF21\u0027} through\n {@code \u0027\\uFF3A\u0027} and {@code \u0027\\uFF41\u0027} through\n {@code \u0027\\uFF5A\u0027}) forms have numeric values from 10\n through 35. This is independent of the Unicode specification,\n which does not assign numeric values to these {@code char}\n values.\n \u003cp\u003e\n If the character does not have a numeric value, then -1 is returned.\n If the character has a numeric value that cannot be represented as a\n nonnegative integer (for example, a fractional value), then -2\n is returned.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #getNumericValue(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getNumericValue","comment":"Returns the {@code int} value that the specified\n character (Unicode code point) represents. For example, the character\n {@code \u0027\\u216C\u0027} (the Roman numeral fifty) will return\n an {@code int} with a value of 50.\n \u003cp\u003e\n The letters A-Z in their uppercase ({@code \u0027\\u0041\u0027} through\n {@code \u0027\\u005A\u0027}), lowercase\n ({@code \u0027\\u0061\u0027} through {@code \u0027\\u007A\u0027}), and\n full width variant ({@code \u0027\\uFF21\u0027} through\n {@code \u0027\\uFF3A\u0027} and {@code \u0027\\uFF41\u0027} through\n {@code \u0027\\uFF5A\u0027}) forms have numeric values from 10\n through 35. This is independent of the Unicode specification,\n which does not assign numeric values to these {@code char}\n values.\n \u003cp\u003e\n If the character does not have a numeric value, then -1 is returned.\n If the character has a numeric value that cannot be represented as a\n nonnegative integer (for example, a fractional value), then -2\n is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSpace","comment":"Determines if the specified character is ISO-LATIN-1 white space.\n This method returns {@code true} for the following five\n characters only:\n \u003ctable summary\u003d\"truechars\"\u003e\n \u003ctr\u003e\u003ctd\u003e{@code \u0027\\t\u0027}\u003c/td\u003e            \u003ctd\u003e{@code U+0009}\u003c/td\u003e\n     \u003ctd\u003e{@code HORIZONTAL TABULATION}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e{@code \u0027\\n\u0027}\u003c/td\u003e            \u003ctd\u003e{@code U+000A}\u003c/td\u003e\n     \u003ctd\u003e{@code NEW LINE}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e{@code \u0027\\f\u0027}\u003c/td\u003e            \u003ctd\u003e{@code U+000C}\u003c/td\u003e\n     \u003ctd\u003e{@code FORM FEED}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e{@code \u0027\\r\u0027}\u003c/td\u003e            \u003ctd\u003e{@code U+000D}\u003c/td\u003e\n     \u003ctd\u003e{@code CARRIAGE RETURN}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e{@code \u0027 \u0027}\u003c/td\u003e             \u003ctd\u003e{@code U+0020}\u003c/td\u003e\n     \u003ctd\u003e{@code SPACE}\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSpaceChar","comment":"Determines if the specified character is a Unicode space character.\n A character is considered to be a space character if and only if\n it is specified to be a space character by the Unicode Standard. This\n method returns true if the character\u0027s general category type is any of\n the following:\n \u003cul\u003e\n \u003cli\u003e {@code SPACE_SEPARATOR}\n \u003cli\u003e {@code LINE_SEPARATOR}\n \u003cli\u003e {@code PARAGRAPH_SEPARATOR}\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isSpaceChar(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isSpaceChar","comment":"Determines if the specified character (Unicode code point) is a\n Unicode space character.  A character is considered to be a\n space character if and only if it is specified to be a space\n character by the Unicode Standard. This method returns true if\n the character\u0027s general category type is any of the following:\n\n \u003cul\u003e\n \u003cli\u003e {@link #SPACE_SEPARATOR}\n \u003cli\u003e {@link #LINE_SEPARATOR}\n \u003cli\u003e {@link #PARAGRAPH_SEPARATOR}\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isWhitespace","comment":"Determines if the specified character is white space according to Java.\n A character is a Java whitespace character if and only if it satisfies\n one of the following criteria:\n \u003cul\u003e\n \u003cli\u003e It is a Unicode space character ({@code SPACE_SEPARATOR},\n      {@code LINE_SEPARATOR}, or {@code PARAGRAPH_SEPARATOR})\n      but is not also a non-breaking space ({@code \u0027\\u00A0\u0027},\n      {@code \u0027\\u2007\u0027}, {@code \u0027\\u202F\u0027}).\n \u003cli\u003e It is {@code \u0027\\t\u0027}, U+0009 HORIZONTAL TABULATION.\n \u003cli\u003e It is {@code \u0027\\n\u0027}, U+000A LINE FEED.\n \u003cli\u003e It is {@code \u0027\\u000B\u0027}, U+000B VERTICAL TABULATION.\n \u003cli\u003e It is {@code \u0027\\f\u0027}, U+000C FORM FEED.\n \u003cli\u003e It is {@code \u0027\\r\u0027}, U+000D CARRIAGE RETURN.\n \u003cli\u003e It is {@code \u0027\\u001C\u0027}, U+001C FILE SEPARATOR.\n \u003cli\u003e It is {@code \u0027\\u001D\u0027}, U+001D GROUP SEPARATOR.\n \u003cli\u003e It is {@code \u0027\\u001E\u0027}, U+001E RECORD SEPARATOR.\n \u003cli\u003e It is {@code \u0027\\u001F\u0027}, U+001F UNIT SEPARATOR.\n \u003c/ul\u003e\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isWhitespace(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isWhitespace","comment":"Determines if the specified character (Unicode code point) is\n white space according to Java.  A character is a Java\n whitespace character if and only if it satisfies one of the\n following criteria:\n \u003cul\u003e\n \u003cli\u003e It is a Unicode space character ({@link #SPACE_SEPARATOR},\n      {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR})\n      but is not also a non-breaking space ({@code \u0027\\u00A0\u0027},\n      {@code \u0027\\u2007\u0027}, {@code \u0027\\u202F\u0027}).\n \u003cli\u003e It is {@code \u0027\\t\u0027}, U+0009 HORIZONTAL TABULATION.\n \u003cli\u003e It is {@code \u0027\\n\u0027}, U+000A LINE FEED.\n \u003cli\u003e It is {@code \u0027\\u000B\u0027}, U+000B VERTICAL TABULATION.\n \u003cli\u003e It is {@code \u0027\\f\u0027}, U+000C FORM FEED.\n \u003cli\u003e It is {@code \u0027\\r\u0027}, U+000D CARRIAGE RETURN.\n \u003cli\u003e It is {@code \u0027\\u001C\u0027}, U+001C FILE SEPARATOR.\n \u003cli\u003e It is {@code \u0027\\u001D\u0027}, U+001D GROUP SEPARATOR.\n \u003cli\u003e It is {@code \u0027\\u001E\u0027}, U+001E RECORD SEPARATOR.\n \u003cli\u003e It is {@code \u0027\\u001F\u0027}, U+001F UNIT SEPARATOR.\n \u003c/ul\u003e\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isISOControl","comment":"Determines if the specified character is an ISO control\n character.  A character is considered to be an ISO control\n character if its code is in the range {@code \u0027\\u0000\u0027}\n through {@code \u0027\\u001F\u0027} or in the range\n {@code \u0027\\u007F\u0027} through {@code \u0027\\u009F\u0027}.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isISOControl(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isISOControl","comment":"Determines if the referenced character (Unicode code point) is an ISO control\n character.  A character is considered to be an ISO control\n character if its code is in the range {@code \u0027\\u0000\u0027}\n through {@code \u0027\\u001F\u0027} or in the range\n {@code \u0027\\u007F\u0027} through {@code \u0027\\u009F\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getType","comment":"Returns a value indicating a character\u0027s general category.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #getType(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getType","comment":"Returns a value indicating a character\u0027s general category.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forDigit","comment":"Determines the character representation for a specific digit in\n the specified radix. If the value of {@code radix} is not a\n valid radix, or the value of {@code digit} is not a valid\n digit in the specified radix, the null character\n ({@code \u0027\\u0000\u0027}) is returned.\n \u003cp\u003e\n The {@code radix} argument is valid if it is greater than or\n equal to {@code MIN_RADIX} and less than or equal to\n {@code MAX_RADIX}. The {@code digit} argument is valid if\n {@code 0 \u003c\u003d digit \u003c radix}.\n \u003cp\u003e\n If the digit is less than 10, then\n {@code \u00270\u0027 + digit} is returned. Otherwise, the value\n {@code \u0027a\u0027 + digit - 10} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"digit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDirectionality","comment":"Returns the Unicode directionality property for the given\n character.  Character directionality is used to calculate the\n visual ordering of text. The directionality value of undefined\n {@code char} values is {@code DIRECTIONALITY_UNDEFINED}.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #getDirectionality(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDirectionality","comment":"Returns the Unicode directionality property for the given\n character (Unicode code point).  Character directionality is\n used to calculate the visual ordering of text. The\n directionality value of undefined character is {@link\n #DIRECTIONALITY_UNDEFINED}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isMirrored","comment":"Determines whether the character is mirrored according to the\n Unicode specification.  Mirrored characters should have their\n glyphs horizontally mirrored when displayed in text that is\n right-to-left.  For example, {@code \u0027\\u0028\u0027} LEFT\n PARENTHESIS is semantically defined to be an \u003ci\u003eopening\n parenthesis\u003c/i\u003e.  This will appear as a \"(\" in text that is\n left-to-right but as a \")\" in text that is right-to-left.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method cannot handle \u003ca\n href\u003d\"#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support\n all Unicode characters, including supplementary characters, use\n the {@link #isMirrored(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isMirrored","comment":"Determines whether the specified character (Unicode code point)\n is mirrored according to the Unicode specification.  Mirrored\n characters should have their glyphs horizontally mirrored when\n displayed in text that is right-to-left.  For example,\n {@code \u0027\\u0028\u0027} LEFT PARENTHESIS is semantically\n defined to be an \u003ci\u003eopening parenthesis\u003c/i\u003e.  This will appear\n as a \"(\" in text that is left-to-right but as a \")\" in text\n that is right-to-left.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares two {@code Character} objects numerically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Character)","flatSignature":"(Character)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherCharacter","type":{"isPrimitive":false,"simpleName":"Character","qualifiedName":"java.lang.Character","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compare","comment":"Compares two {@code char} values numerically.\n The value returned is identical to what would be returned by:\n \u003cpre\u003e\n    Character.valueOf(x).compareTo(Character.valueOf(y))\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char, char)","flatSignature":"(char, char)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverseBytes","comment":"Returns the value obtained by reversing the order of the bytes in the\n specified \u003ctt\u003echar\u003c/tt\u003e value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getName","comment":"Returns the Unicode name of the specified character\n {@code codePoint}, or null if the code point is\n {@link #UNASSIGNED unassigned}.\n \u003cp\u003e\n Note: if the specified character is not assigned a name by\n the \u003ci\u003eUnicodeData\u003c/i\u003e file (part of the Unicode Character\n Database maintained by the Unicode Consortium), the returned\n name is the same as the result of expression.\n\n \u003cblockquote\u003e{@code\n     Character.UnicodeBlock.of(codePoint).toString().replace(\u0027_\u0027, \u0027 \u0027)\n     + \" \"\n     + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);\n\n }\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"codePoint","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}