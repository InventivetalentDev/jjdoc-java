{"name":"String","comment":"The {@code String} class represents character strings. All\n string literals in Java programs, such as {@code \"abc\"}, are\n implemented as instances of this class.\n \u003cp\u003e\n Strings are constant; their values cannot be changed after they\n are created. String buffers support mutable strings.\n Because String objects are immutable they can be shared. For example:\n \u003cblockquote\u003e\u003cpre\u003e\n     String str \u003d \"abc\";\n \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n is equivalent to:\n \u003cblockquote\u003e\u003cpre\u003e\n     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n     String str \u003d new String(data);\n \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n Here are some more examples of how strings can be used:\n \u003cblockquote\u003e\u003cpre\u003e\n     System.out.println(\"abc\");\n     String cde \u003d \"cde\";\n     System.out.println(\"abc\" + cde);\n     String c \u003d \"abc\".substring(2,3);\n     String d \u003d cde.substring(1, 2);\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The class {@code String} includes methods for examining\n individual characters of the sequence, for comparing strings, for\n searching strings, for extracting substrings, and for creating a\n copy of a string with all characters translated to uppercase or to\n lowercase. Case mapping is based on the Unicode Standard version\n specified by the {@link java.lang.Character Character} class.\n \u003cp\u003e\n The Java language provides special support for the string\n concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n other objects to strings. String concatenation is implemented\n through the {@code StringBuilder}(or {@code StringBuffer})\n class and its {@code append} method.\n String conversions are implemented through the method\n {@code toString}, defined by {@code Object} and\n inherited by all classes in Java. For additional information on\n string concatenation and conversion, see Gosling, Joy, and Steele,\n \u003ci\u003eThe Java Language Specification\u003c/i\u003e.\n\n \u003cp\u003e Unless otherwise noted, passing a \u003ctt\u003enull\u003c/tt\u003e argument to a constructor\n or method in this class will cause a {@link NullPointerException} to be\n thrown.\n\n \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n Character Representations\u003c/a\u003e in the {@code Character} class for\n more information).\n Index values refer to {@code char} code units, so a supplementary\n character uses two positions in a {@code String}.\n \u003cp\u003eThe {@code String} class provides methods for dealing with\n Unicode code points (i.e., characters), in addition to those for\n dealing with Unicode code units (i.e., {@code char} values).","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Comparable","java.lang.CharSequence"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"String","comment":"Initializes a newly created {@code String} object so that it represents\n an empty character sequence.  Note that use of this constructor is\n unnecessary since Strings are immutable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"String","comment":"Initializes a newly created {@code String} object so that it represents\n the same sequence of characters as the argument; in other words, the\n newly created string is a copy of the argument string. Unless an\n explicit copy of {@code original} is needed, use of this constructor is\n unnecessary since Strings are immutable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"original","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new {@code String} so that it represents the sequence of\n characters currently contained in the character array argument. The\n contents of the character array are copied; subsequent modification of\n the character array does not affect the newly created string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(char[])","flatSignature":"(char[])","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new {@code String} that contains characters from a subarray\n of the character array argument. The {@code offset} argument is the\n index of the first character of the subarray and the {@code count}\n argument specifies the length of the subarray. The contents of the\n subarray are copied; subsequent modification of the character array does\n not affect the newly created string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new {@code String} that contains characters from a subarray\n of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n argument.  The {@code offset} argument is the index of the first code\n point of the subarray and the {@code count} argument specifies the\n length of the subarray.  The contents of the subarray are converted to\n {@code char}s; subsequent modification of the {@code int} array does not\n affect the newly created string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int[], int, int)","flatSignature":"(int[], int, int)","parameters":[{"name":"codePoints","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new {@code String} constructed from a subarray of an array\n of 8-bit integer values.\n\n \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n subarray, and the {@code count} argument specifies the length of the\n subarray.\n\n \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n specified in the method above.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], int, int, int)","flatSignature":"(byte[], int, int, int)","parameters":[{"name":"ascii","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"hibyte","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new {@code String} containing characters constructed from\n an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003ein the\n resulting string is constructed from the corresponding component\n \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n\n \u003cblockquote\u003e\u003cpre\u003e\n     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], int)","flatSignature":"(byte[], int)","parameters":[{"name":"ascii","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"hibyte","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Constructs a new {@code String} by decoding the specified subarray of\n bytes using the specified charset.  The length of the new {@code String}\n is a function of the charset, and hence may not be equal to the length\n of the subarray.\n\n \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n in the given charset is unspecified.  The {@link\n java.nio.charset.CharsetDecoder} class should be used when more control\n over the decoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], int, int, java.lang.String)","flatSignature":"(byte[], int, int, String)","parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"charsetName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Constructs a new {@code String} by decoding the specified subarray of\n bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n The length of the new {@code String} is a function of the charset, and\n hence may not be equal to the length of the subarray.\n\n \u003cp\u003e This method always replaces malformed-input and unmappable-character\n sequences with this charset\u0027s default replacement string.  The {@link\n java.nio.charset.CharsetDecoder} class should be used when more control\n over the decoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], int, int, java.nio.charset.Charset)","flatSignature":"(byte[], int, int, Charset)","parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"charset","type":{"isPrimitive":false,"simpleName":"Charset","qualifiedName":"java.nio.charset.Charset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Constructs a new {@code String} by decoding the specified array of bytes\n using the specified {@linkplain java.nio.charset.Charset charset}.  The\n length of the new {@code String} is a function of the charset, and hence\n may not be equal to the length of the byte array.\n\n \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n in the given charset is unspecified.  The {@link\n java.nio.charset.CharsetDecoder} class should be used when more control\n over the decoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], java.lang.String)","flatSignature":"(byte[], String)","parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"charsetName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Constructs a new {@code String} by decoding the specified array of\n bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n The length of the new {@code String} is a function of the charset, and\n hence may not be equal to the length of the byte array.\n\n \u003cp\u003e This method always replaces malformed-input and unmappable-character\n sequences with this charset\u0027s default replacement string.  The {@link\n java.nio.charset.CharsetDecoder} class should be used when more control\n over the decoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], java.nio.charset.Charset)","flatSignature":"(byte[], Charset)","parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"charset","type":{"isPrimitive":false,"simpleName":"Charset","qualifiedName":"java.nio.charset.Charset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Constructs a new {@code String} by decoding the specified subarray of\n bytes using the platform\u0027s default charset.  The length of the new\n {@code String} is a function of the charset, and hence may not be equal\n to the length of the subarray.\n\n \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n in the default charset is unspecified.  The {@link\n java.nio.charset.CharsetDecoder} class should be used when more control\n over the decoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[], int, int)","flatSignature":"(byte[], int, int)","parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Constructs a new {@code String} by decoding the specified array of bytes\n using the platform\u0027s default charset.  The length of the new {@code\n String} is a function of the charset, and hence may not be equal to the\n length of the byte array.\n\n \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n in the default charset is unspecified.  The {@link\n java.nio.charset.CharsetDecoder} class should be used when more control\n over the decoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(byte[])","flatSignature":"(byte[])","parameters":[{"name":"bytes","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new string that contains the sequence of characters\n currently contained in the string buffer argument. The contents of the\n string buffer are copied; subsequent modification of the string buffer\n does not affect the newly created string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.StringBuffer)","flatSignature":"(StringBuffer)","parameters":[{"name":"buffer","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"String","comment":"Allocates a new string that contains the sequence of characters\n currently contained in the string builder argument. The contents of the\n string builder are copied; subsequent modification of the string builder\n does not affect the newly created string.\n\n \u003cp\u003e This constructor is provided to ease migration to {@code\n StringBuilder}. Obtaining a string from a string builder via the {@code\n toString} method is likely to run faster and is generally preferred.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.StringBuilder)","flatSignature":"(StringBuilder)","parameters":[{"name":"builder","type":{"isPrimitive":false,"simpleName":"StringBuilder","qualifiedName":"java.lang.StringBuilder","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"CASE_INSENSITIVE_ORDER","comment":"A Comparator that orders {@code String} objects as by\n {@code compareToIgnoreCase}. This comparator is serializable.\n \u003cp\u003e\n Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The java.text package provides \u003cem\u003eCollators\u003c/em\u003e to allow\n locale-sensitive ordering.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Comparator","qualifiedName":"java.util.Comparator","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"length","comment":"Returns the length of this string.\n The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n code units\u003c/a\u003e in the string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Returns {@code true} if, and only if, {@link #length()} is {@code 0}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"charAt","comment":"Returns the {@code char} value at the\n specified index. An index ranges from {@code 0} to\n {@code length() - 1}. The first {@code char} value of the sequence\n is at index {@code 0}, the next at index {@code 1},\n and so on, as for array indexing.\n\n \u003cp\u003eIf the {@code char} value specified by the index is a\n \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n value is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointAt","comment":"Returns the character (Unicode code point) at the specified\n index. The index refers to {@code char} values\n (Unicode code units) and ranges from {@code 0} to\n {@link #length()}{@code  - 1}.\n\n \u003cp\u003e If the {@code char} value specified at the given index\n is in the high-surrogate range, the following index is less\n than the length of this {@code String}, and the\n {@code char} value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the {@code char} value at the given index is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointBefore","comment":"Returns the character (Unicode code point) before the specified\n index. The index refers to {@code char} values\n (Unicode code units) and ranges from {@code 1} to {@link\n CharSequence#length() length}.\n\n \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n is in the low-surrogate range, {@code (index - 2)} is not\n negative, and the {@code char} value at {@code (index -\n 2)} is in the high-surrogate range, then the\n supplementary code point value of the surrogate pair is\n returned. If the {@code char} value at {@code index -\n 1} is an unpaired low-surrogate or a high-surrogate, the\n surrogate value is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"codePointCount","comment":"Returns the number of Unicode code points in the specified text\n range of this {@code String}. The text range begins at the\n specified {@code beginIndex} and extends to the\n {@code char} at index {@code endIndex - 1}. Thus the\n length (in {@code char}s) of the text range is\n {@code endIndex-beginIndex}. Unpaired surrogates within\n the text range count as one code point each.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"beginIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"offsetByCodePoints","comment":"Returns the index within this {@code String} that is\n offset from the given {@code index} by\n {@code codePointOffset} code points. Unpaired surrogates\n within the text range given by {@code index} and\n {@code codePointOffset} count as one code point each.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"codePointOffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChars","comment":"Copies characters from this string into the destination character\n array.\n \u003cp\u003e\n The first character to be copied is at index {@code srcBegin};\n the last character to be copied is at index {@code srcEnd-1}\n (thus the total number of characters to be copied is\n {@code srcEnd-srcBegin}). The characters are copied into the\n subarray of {@code dst} starting at index {@code dstBegin}\n and ending at index:\n \u003cblockquote\u003e\u003cpre\u003e\n     dstBegin + (srcEnd-srcBegin) - 1\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, char[], int)","flatSignature":"(int, int, char[], int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcBegin","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"srcEnd","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dst","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"dstBegin","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBytes","comment":"Copies characters from this string into the destination byte array. Each\n byte receives the 8 low-order bits of the corresponding character. The\n eight high-order bits of each character are not copied and do not\n participate in the transfer in any way.\n\n \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n last character to be copied is at index {@code srcEnd-1}.  The total\n number of characters to be copied is {@code srcEnd-srcBegin}. The\n characters, converted to bytes, are copied into the subarray of {@code\n dst} starting at index {@code dstBegin} and ending at index:\n\n \u003cblockquote\u003e\u003cpre\u003e\n     dstBegin + (srcEnd-srcBegin) - 1\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, byte[], int)","flatSignature":"(int, int, byte[], int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"srcBegin","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"srcEnd","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dst","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}},{"name":"dstBegin","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBytes","comment":"Encodes this {@code String} into a sequence of bytes using the named\n charset, storing the result into a new byte array.\n\n \u003cp\u003e The behavior of this method when this string cannot be encoded in\n the given charset is unspecified.  The {@link\n java.nio.charset.CharsetEncoder} class should be used when more control\n over the encoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"charsetName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBytes","comment":"Encodes this {@code String} into a sequence of bytes using the given\n {@linkplain java.nio.charset.Charset charset}, storing the result into a\n new byte array.\n\n \u003cp\u003e This method always replaces malformed-input and unmappable-character\n sequences with this charset\u0027s default replacement byte array.  The\n {@link java.nio.charset.CharsetEncoder} class should be used when more\n control over the encoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.nio.charset.Charset)","flatSignature":"(Charset)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"charset","type":{"isPrimitive":false,"simpleName":"Charset","qualifiedName":"java.nio.charset.Charset","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBytes","comment":"Encodes this {@code String} into a sequence of bytes using the\n platform\u0027s default charset, storing the result into a new byte array.\n\n \u003cp\u003e The behavior of this method when this string cannot be encoded in\n the default charset is unspecified.  The {@link\n java.nio.charset.CharsetEncoder} class should be used when more control\n over the encoding process is required.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this string to the specified object.  The result is {@code\n true} if and only if the argument is not {@code null} and is a {@code\n String} object that represents the same sequence of characters as this\n object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anObject","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contentEquals","comment":"Compares this string to the specified {@code StringBuffer}.  The result\n is {@code true} if and only if this {@code String} represents the same\n sequence of characters as the specified {@code StringBuffer}. This method\n synchronizes on the {@code StringBuffer}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.StringBuffer)","flatSignature":"(StringBuffer)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"sb","type":{"isPrimitive":false,"simpleName":"StringBuffer","qualifiedName":"java.lang.StringBuffer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contentEquals","comment":"Compares this string to the specified {@code CharSequence}.  The\n result is {@code true} if and only if this {@code String} represents the\n same sequence of char values as the specified sequence. Note that if the\n {@code CharSequence} is a {@code StringBuffer} then the method\n synchronizes on it.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cs","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equalsIgnoreCase","comment":"Compares this {@code String} to another {@code String}, ignoring case\n considerations.  Two strings are considered equal ignoring case if they\n are of the same length and corresponding characters in the two strings\n are equal ignoring case.\n\n \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n ignoring case if at least one of the following is true:\n \u003cul\u003e\n   \u003cli\u003e The two characters are the same (as compared by the\n        {@code \u003d\u003d} operator)\n   \u003cli\u003e Applying the method {@link\n        java.lang.Character#toUpperCase(char)} to each character\n        produces the same result\n   \u003cli\u003e Applying the method {@link\n        java.lang.Character#toLowerCase(char)} to each character\n        produces the same result\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherString","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares two strings lexicographically.\n The comparison is based on the Unicode value of each character in\n the strings. The character sequence represented by this\n {@code String} object is compared lexicographically to the\n character sequence represented by the argument string. The result is\n a negative integer if this {@code String} object\n lexicographically precedes the argument string. The result is a\n positive integer if this {@code String} object lexicographically\n follows the argument string. The result is zero if the strings\n are equal; {@code compareTo} returns {@code 0} exactly when\n the {@link #equals(Object)} method would return {@code true}.\n \u003cp\u003e\n This is the definition of lexicographic ordering. If two strings are\n different, then either they have different characters at some index\n that is a valid index for both strings, or their lengths are different,\n or both. If they have different characters at one or more index\n positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n determined by using the \u0026lt; operator, lexicographically precedes the\n other string. In this case, {@code compareTo} returns the\n difference of the two character values at position {@code k} in\n the two string -- that is, the value:\n \u003cblockquote\u003e\u003cpre\u003e\n this.charAt(k)-anotherString.charAt(k)\n \u003c/pre\u003e\u003c/blockquote\u003e\n If there is no index position at which they differ, then the shorter\n string lexicographically precedes the longer string. In this case,\n {@code compareTo} returns the difference of the lengths of the\n strings -- that is, the value:\n \u003cblockquote\u003e\u003cpre\u003e\n this.length()-anotherString.length()\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherString","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareToIgnoreCase","comment":"Compares two strings lexicographically, ignoring case\n differences. This method returns an integer whose sign is that of\n calling {@code compareTo} with normalized versions of the strings\n where case differences have been eliminated by calling\n {@code Character.toLowerCase(Character.toUpperCase(character))} on\n each character.\n \u003cp\u003e\n Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The java.text package provides \u003cem\u003ecollators\u003c/em\u003e to allow\n locale-sensitive ordering.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"regionMatches","comment":"Tests if two string regions are equal.\n \u003cp\u003e\n A substring of this {@code String} object is compared to a substring\n of the argument other. The result is true if these substrings\n represent identical character sequences. The substring of this\n {@code String} object to be compared begins at index {@code toffset}\n and has length {@code len}. The substring of other to be compared\n begins at index {@code ooffset} and has length {@code len}. The\n result is {@code false} if and only if at least one of the following\n is true:\n \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n \u003cli\u003e{@code ooffset} is negative.\n \u003cli\u003e{@code toffset+len} is greater than the length of this\n {@code String} object.\n \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n argument.\n \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n such that:\n {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n \u003ci\u003ek\u003c/i\u003e{@code )}\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.String, int, int)","flatSignature":"(int, String, int, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"toffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"other","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"ooffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"regionMatches","comment":"Tests if two string regions are equal.\n \u003cp\u003e\n A substring of this {@code String} object is compared to a substring\n of the argument {@code other}. The result is {@code true} if these\n substrings represent character sequences that are the same, ignoring\n case if and only if {@code ignoreCase} is true. The substring of\n this {@code String} object to be compared begins at index\n {@code toffset} and has length {@code len}. The substring of\n {@code other} to be compared begins at index {@code ooffset} and\n has length {@code len}. The result is {@code false} if and only if\n at least one of the following is true:\n \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n \u003cli\u003e{@code ooffset} is negative.\n \u003cli\u003e{@code toffset+len} is greater than the length of this\n {@code String} object.\n \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n argument.\n \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n \u003cblockquote\u003e\u003cpre\u003e\n this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n \u003cblockquote\u003e\u003cpre\u003e\n Character.toLowerCase(this.charAt(toffset+k)) !\u003d\n     Character.toLowerCase(other.charAt(ooffset+k))\n \u003c/pre\u003e\u003c/blockquote\u003e\n and:\n \u003cblockquote\u003e\u003cpre\u003e\n Character.toUpperCase(this.charAt(toffset+k)) !\u003d\n         Character.toUpperCase(other.charAt(ooffset+k))\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, int, java.lang.String, int, int)","flatSignature":"(boolean, int, String, int, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ignoreCase","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"toffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"other","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"ooffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"len","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"startsWith","comment":"Tests if the substring of this string beginning at the\n specified index starts with the specified prefix.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"prefix","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"toffset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"startsWith","comment":"Tests if this string starts with the specified prefix.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"prefix","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"endsWith","comment":"Tests if this string ends with the specified suffix.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"suffix","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this string. The hash code for a\n {@code String} object is computed as\n \u003cblockquote\u003e\u003cpre\u003e\n s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n \u003c/pre\u003e\u003c/blockquote\u003e\n using {@code int} arithmetic, where {@code s[i]} is the\n \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n the string, and {@code ^} indicates exponentiation.\n (The hash value of the empty string is zero.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"indexOf","comment":"Returns the index within this string of the first occurrence of\n the specified character. If a character with value\n {@code ch} occurs in the character sequence represented by\n this {@code String} object, then the index (in Unicode\n code units) of the first such occurrence is returned. For\n values of {@code ch} in the range from 0 to 0xFFFF\n (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. For other values of {@code ch}, it is the\n smallest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. In either case, if no such character occurs in this\n string, then {@code -1} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"indexOf","comment":"Returns the index within this string of the first occurrence of the\n specified character, starting the search at the specified index.\n \u003cp\u003e\n If a character with value {@code ch} occurs in the\n character sequence represented by this {@code String}\n object at an index no smaller than {@code fromIndex}, then\n the index of the first such occurrence is returned. For values\n of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. For other values of {@code ch}, it is the\n smallest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. In either case, if no such character occurs in this\n string at or after position {@code fromIndex}, then\n {@code -1} is returned.\n\n \u003cp\u003e\n There is no restriction on the value of {@code fromIndex}. If it\n is negative, it has the same effect as if it were zero: this entire\n string may be searched. If it is greater than the length of this\n string, it has the same effect as if it were equal to the length of\n this string: {@code -1} is returned.\n\n \u003cp\u003eAll indices are specified in {@code char} values\n (Unicode code units).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lastIndexOf","comment":"Returns the index within this string of the last occurrence of\n the specified character. For values of {@code ch} in the\n range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. For other values of {@code ch}, it is the\n largest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true.  In either case, if no such character occurs in this\n string, then {@code -1} is returned.  The\n {@code String} is searched backwards starting at the last\n character.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lastIndexOf","comment":"Returns the index within this string of the last occurrence of\n the specified character, searching backward starting at the\n specified index. For values of {@code ch} in the range\n from 0 to 0xFFFF (inclusive), the index returned is the largest\n value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. For other values of {@code ch}, it is the\n largest value \u003ci\u003ek\u003c/i\u003e such that:\n \u003cblockquote\u003e\u003cpre\u003e\n (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n \u003c/pre\u003e\u003c/blockquote\u003e\n is true. In either case, if no such character occurs in this\n string at or before position {@code fromIndex}, then\n {@code -1} is returned.\n\n \u003cp\u003eAll indices are specified in {@code char} values\n (Unicode code units).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ch","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"indexOf","comment":"Returns the index within this string of the first occurrence of the\n specified substring.\n\n \u003cp\u003eThe returned index is the smallest value \u003ci\u003ek\u003c/i\u003e for which:\n \u003cblockquote\u003e\u003cpre\u003e\n this.startsWith(str, \u003ci\u003ek\u003c/i\u003e)\n \u003c/pre\u003e\u003c/blockquote\u003e\n If no such value of \u003ci\u003ek\u003c/i\u003e exists, then {@code -1} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"indexOf","comment":"Returns the index within this string of the first occurrence of the\n specified substring, starting at the specified index.\n\n \u003cp\u003eThe returned index is the smallest value \u003ci\u003ek\u003c/i\u003e for which:\n \u003cblockquote\u003e\u003cpre\u003e\n \u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex {@code \u0026\u0026} this.startsWith(str, \u003ci\u003ek\u003c/i\u003e)\n \u003c/pre\u003e\u003c/blockquote\u003e\n If no such value of \u003ci\u003ek\u003c/i\u003e exists, then {@code -1} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lastIndexOf","comment":"Returns the index within this string of the last occurrence of the\n specified substring.  The last occurrence of the empty string \"\"\n is considered to occur at the index value {@code this.length()}.\n\n \u003cp\u003eThe returned index is the largest value \u003ci\u003ek\u003c/i\u003e for which:\n \u003cblockquote\u003e\u003cpre\u003e\n this.startsWith(str, \u003ci\u003ek\u003c/i\u003e)\n \u003c/pre\u003e\u003c/blockquote\u003e\n If no such value of \u003ci\u003ek\u003c/i\u003e exists, then {@code -1} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lastIndexOf","comment":"Returns the index within this string of the last occurrence of the\n specified substring, searching backward starting at the specified index.\n\n \u003cp\u003eThe returned index is the largest value \u003ci\u003ek\u003c/i\u003e for which:\n \u003cblockquote\u003e\u003cpre\u003e\n \u003ci\u003ek\u003c/i\u003e {@code \u003c\u003d} fromIndex {@code \u0026\u0026} this.startsWith(str, \u003ci\u003ek\u003c/i\u003e)\n \u003c/pre\u003e\u003c/blockquote\u003e\n If no such value of \u003ci\u003ek\u003c/i\u003e exists, then {@code -1} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fromIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"substring","comment":"Returns a string that is a substring of this string. The\n substring begins with the character at the specified index and\n extends to the end of this string. \u003cp\u003e\n Examples:\n \u003cblockquote\u003e\u003cpre\u003e\n \"unhappy\".substring(2) returns \"happy\"\n \"Harbison\".substring(3) returns \"bison\"\n \"emptiness\".substring(9) returns \"\" (an empty string)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"beginIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"substring","comment":"Returns a string that is a substring of this string. The\n substring begins at the specified {@code beginIndex} and\n extends to the character at index {@code endIndex - 1}.\n Thus the length of the substring is {@code endIndex-beginIndex}.\n \u003cp\u003e\n Examples:\n \u003cblockquote\u003e\u003cpre\u003e\n \"hamburger\".substring(4, 8) returns \"urge\"\n \"smiles\".substring(1, 5) returns \"mile\"\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"beginIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subSequence","comment":"Returns a character sequence that is a subsequence of this sequence.\n\n \u003cp\u003e An invocation of this method of the form\n\n \u003cblockquote\u003e\u003cpre\u003e\n str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n\n behaves in exactly the same way as the invocation\n\n \u003cblockquote\u003e\u003cpre\u003e\n str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"beginIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"endIndex","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"concat","comment":"Concatenates the specified string to the end of this string.\n \u003cp\u003e\n If the length of the argument string is {@code 0}, then this\n {@code String} object is returned. Otherwise, a\n {@code String} object is returned that represents a character\n sequence that is the concatenation of the character sequence\n represented by this {@code String} object and the character\n sequence represented by the argument string.\u003cp\u003e\n Examples:\n \u003cblockquote\u003e\u003cpre\u003e\n \"cares\".concat(\"s\") returns \"caress\"\n \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"str","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replace","comment":"Returns a string resulting from replacing all occurrences of\n {@code oldChar} in this string with {@code newChar}.\n \u003cp\u003e\n If the character {@code oldChar} does not occur in the\n character sequence represented by this {@code String} object,\n then a reference to this {@code String} object is returned.\n Otherwise, a {@code String} object is returned that\n represents a character sequence identical to the character sequence\n represented by this {@code String} object, except that every\n occurrence of {@code oldChar} is replaced by an occurrence\n of {@code newChar}.\n \u003cp\u003e\n Examples:\n \u003cblockquote\u003e\u003cpre\u003e\n \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n         returns \"mosquito in your collar\"\n \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n         returns \"the way of bayonets\"\n \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n         returns \"starring with a turtle tortoise\"\n \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char, char)","flatSignature":"(char, char)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"oldChar","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},{"name":"newChar","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"matches","comment":"Tells whether or not this string matches the given \u003ca\n href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n\n \u003cp\u003e An invocation of this method of the form\n \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n same result as the expression\n\n \u003cblockquote\u003e\n {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"contains","comment":"Returns true if and only if this string contains the specified\n sequence of char values.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence)","flatSignature":"(CharSequence)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceFirst","comment":"Replaces the first substring of this string that matches the given \u003ca\n href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n given replacement.\n\n \u003cp\u003e An invocation of this method of the form\n \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n yields exactly the same result as the expression\n\n \u003cblockquote\u003e\n \u003ccode\u003e\n {@link java.util.regex.Pattern}.{@link\n java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n \u003c/code\u003e\n \u003c/blockquote\u003e\n\n\u003cp\u003e\n Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n {@link java.util.regex.Matcher#replaceFirst}.\n Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n meaning of these characters, if desired.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"replacement","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replaceAll","comment":"Replaces each substring of this string that matches the given \u003ca\n href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n given replacement.\n\n \u003cp\u003e An invocation of this method of the form\n \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n yields exactly the same result as the expression\n\n \u003cblockquote\u003e\n \u003ccode\u003e\n {@link java.util.regex.Pattern}.{@link\n java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n \u003c/code\u003e\n \u003c/blockquote\u003e\n\n\u003cp\u003e\n Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n meaning of these characters, if desired.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"replacement","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"replace","comment":"Replaces each substring of this string that matches the literal target\n sequence with the specified literal replacement sequence. The\n replacement proceeds from the beginning of the string to the end, for\n example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n \"ba\" rather than \"ab\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.lang.CharSequence)","flatSignature":"(CharSequence, CharSequence)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"replacement","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"split","comment":"Splits this string around matches of the given\n \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n\n \u003cp\u003e The array returned by this method contains each substring of this\n string that is terminated by another substring that matches the given\n expression or is terminated by the end of the string.  The substrings in\n the array are in the order in which they occur in this string.  If the\n expression does not match any part of the input then the resulting array\n has just one element, namely this string.\n\n \u003cp\u003e When there is a positive-width match at the beginning of this\n string then an empty leading substring is included at the beginning\n of the resulting array. A zero-width match at the beginning however\n never produces such empty leading substring.\n\n \u003cp\u003e The {@code limit} parameter controls the number of times the\n pattern is applied and therefore affects the length of the resulting\n array.  If the limit \u003ci\u003en\u003c/i\u003e is greater than zero then the pattern\n will be applied at most \u003ci\u003en\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s\n length will be no greater than \u003ci\u003en\u003c/i\u003e, and the array\u0027s last entry\n will contain all input beyond the last matched delimiter.  If \u003ci\u003en\u003c/i\u003e\n is non-positive then the pattern will be applied as many times as\n possible and the array can have any length.  If \u003ci\u003en\u003c/i\u003e is zero then\n the pattern will be applied as many times as possible, the array can\n have any length, and trailing empty strings will be discarded.\n\n \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n following results with these parameters:\n\n \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0 summary\u003d\"Split example showing regex, limit, and result\"\u003e\n \u003ctr\u003e\n     \u003cth\u003eRegex\u003c/th\u003e\n     \u003cth\u003eLimit\u003c/th\u003e\n     \u003cth\u003eResult\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e2\u003c/td\u003e\n     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e5\u003c/td\u003e\n     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e\n     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e5\u003c/td\u003e\n     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e-2\u003c/td\u003e\n     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd align\u003dcenter\u003e0\u003c/td\u003e\n     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e An invocation of this method of the form\n \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n yields the same result as the expression\n\n \u003cblockquote\u003e\n \u003ccode\u003e\n {@link java.util.regex.Pattern}.{@link\n java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n \u003c/code\u003e\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"limit","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"split","comment":"Splits this string around matches of the given \u003ca\n href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n\n \u003cp\u003e This method works as if by invoking the two-argument {@link\n #split(String, int) split} method with the given expression and a limit\n argument of zero.  Trailing empty strings are therefore not included in\n the resulting array.\n\n \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n results with these expressions:\n\n \u003cblockquote\u003e\u003ctable cellpadding\u003d1 cellspacing\u003d0 summary\u003d\"Split examples showing regex and result\"\u003e\n \u003ctr\u003e\n  \u003cth\u003eRegex\u003c/th\u003e\n  \u003cth\u003eResult\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003e:\u003c/td\u003e\n     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd align\u003dcenter\u003eo\u003c/td\u003e\n     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"regex","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"join","comment":"Returns a new String composed of copies of the\n {@code CharSequence elements} joined together with a copy of\n the specified {@code delimiter}.\n\n \u003cblockquote\u003eFor example,\n \u003cpre\u003e{@code\n     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     // message returned is: \"Java-is-cool\"\n }\u003c/pre\u003e\u003c/blockquote\u003e\n\n Note that if an element is null, then {@code \"null\"} is added.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.lang.CharSequence...)","flatSignature":"(CharSequence, CharSequence...)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"delimiter","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"elements","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"join","comment":"Returns a new {@code String} composed of copies of the\n {@code CharSequence elements} joined together with a copy of the\n specified {@code delimiter}.\n\n \u003cblockquote\u003eFor example,\n \u003cpre\u003e{@code\n     List\u003cString\u003e strings \u003d new LinkedList\u003c\u003e();\n     strings.add(\"Java\");strings.add(\"is\");\n     strings.add(\"cool\");\n     String message \u003d String.join(\" \", strings);\n     //message returned is: \"Java is cool\"\n\n     Set\u003cString\u003e strings \u003d new LinkedHashSet\u003c\u003e();\n     strings.add(\"Java\"); strings.add(\"is\");\n     strings.add(\"very\"); strings.add(\"cool\");\n     String message \u003d String.join(\"-\", strings);\n     //message returned is: \"Java-is-very-cool\"\n }\u003c/pre\u003e\u003c/blockquote\u003e\n\n Note that if an individual element is {@code null}, then {@code \"null\"} is added.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.CharSequence, java.lang.Iterable\u003c? extends java.lang.CharSequence\u003e)","flatSignature":"(CharSequence, Iterable\u003c? extends CharSequence\u003e)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"delimiter","type":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}}},{"name":"elements","type":{"isPrimitive":false,"simpleName":"Iterable","qualifiedName":"java.lang.Iterable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLowerCase","comment":"Converts all of the characters in this {@code String} to lower\n case using the rules of the given {@code Locale}.  Case mapping is based\n on the Unicode Standard version specified by the {@link java.lang.Character Character}\n class. Since case mappings are not always 1:1 char mappings, the resulting\n {@code String} may be a different length than the original {@code String}.\n \u003cp\u003e\n Examples of lowercase  mappings are in the following table:\n \u003ctable border\u003d\"1\" summary\u003d\"Lowercase mapping examples showing language code of locale, upper case, lower case, and description\"\u003e\n \u003ctr\u003e\n   \u003cth\u003eLanguage Code of Locale\u003c/th\u003e\n   \u003cth\u003eUpper Case\u003c/th\u003e\n   \u003cth\u003eLower Case\u003c/th\u003e\n   \u003cth\u003eDescription\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e(all)\u003c/td\u003e\n   \u003ctd\u003eFrench Fries\u003c/td\u003e\n   \u003ctd\u003efrench fries\u003c/td\u003e\n   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e(all)\u003c/td\u003e\n   \u003ctd\u003e\u003cimg src\u003d\"doc-files/capiota.gif\" alt\u003d\"capiota\"\u003e\u003cimg src\u003d\"doc-files/capchi.gif\" alt\u003d\"capchi\"\u003e\n       \u003cimg src\u003d\"doc-files/captheta.gif\" alt\u003d\"captheta\"\u003e\u003cimg src\u003d\"doc-files/capupsil.gif\" alt\u003d\"capupsil\"\u003e\n       \u003cimg src\u003d\"doc-files/capsigma.gif\" alt\u003d\"capsigma\"\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003cimg src\u003d\"doc-files/iota.gif\" alt\u003d\"iota\"\u003e\u003cimg src\u003d\"doc-files/chi.gif\" alt\u003d\"chi\"\u003e\n       \u003cimg src\u003d\"doc-files/theta.gif\" alt\u003d\"theta\"\u003e\u003cimg src\u003d\"doc-files/upsilon.gif\" alt\u003d\"upsilon\"\u003e\n       \u003cimg src\u003d\"doc-files/sigma1.gif\" alt\u003d\"sigma\"\u003e\u003c/td\u003e\n   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toLowerCase","comment":"Converts all of the characters in this {@code String} to lower\n case using the rules of the default locale. This is equivalent to calling\n {@code toLowerCase(Locale.getDefault())}.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n returns {@code \"t\\u0131tle\"}, where \u0027\\u0131\u0027 is the\n LATIN SMALL LETTER DOTLESS I character.\n To obtain correct results for locale insensitive strings, use\n {@code toLowerCase(Locale.ROOT)}.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toUpperCase","comment":"Converts all of the characters in this {@code String} to upper\n case using the rules of the given {@code Locale}. Case mapping is based\n on the Unicode Standard version specified by the {@link java.lang.Character Character}\n class. Since case mappings are not always 1:1 char mappings, the resulting\n {@code String} may be a different length than the original {@code String}.\n \u003cp\u003e\n Examples of locale-sensitive and 1:M case mappings are in the following table.\n\n \u003ctable border\u003d\"1\" summary\u003d\"Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\"\u003e\n \u003ctr\u003e\n   \u003cth\u003eLanguage Code of Locale\u003c/th\u003e\n   \u003cth\u003eLower Case\u003c/th\u003e\n   \u003cth\u003eUpper Case\u003c/th\u003e\n   \u003cth\u003eDescription\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e(all)\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u00df\u003c/td\u003e\n   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e(all)\u003c/td\u003e\n   \u003ctd\u003eFahrvergn\u0026uuml;gen\u003c/td\u003e\n   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale)","flatSignature":"(Locale)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"locale","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUpperCase","comment":"Converts all of the characters in this {@code String} to upper\n case using the rules of the default locale. This method is equivalent to\n {@code toUpperCase(Locale.getDefault())}.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n returns {@code \"T\\u0130TLE\"}, where \u0027\\u0130\u0027 is the\n LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n To obtain correct results for locale insensitive strings, use\n {@code toUpperCase(Locale.ROOT)}.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"trim","comment":"Returns a string whose value is this string, with any leading and trailing\n whitespace removed.\n \u003cp\u003e\n If this {@code String} object represents an empty character\n sequence, or the first and last characters of character sequence\n represented by this {@code String} object both have codes\n greater than {@code \u0027\\u0020\u0027} (the space character), then a\n reference to this {@code String} object is returned.\n \u003cp\u003e\n Otherwise, if there is no character with a code greater than\n {@code \u0027\\u0020\u0027} in the string, then a\n {@code String} object representing an empty string is\n returned.\n \u003cp\u003e\n Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n string whose code is greater than {@code \u0027\\u0020\u0027}, and let\n \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n is greater than {@code \u0027\\u0020\u0027}. A {@code String}\n object is returned, representing the substring of this string that\n begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n {@code this.substring(k, m + 1)}.\n \u003cp\u003e\n This method may be used to trim whitespace (as defined above) from\n the beginning and end of a string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"This object (which is already a string!) is itself returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toCharArray","comment":"Converts this string to a new character array.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"format","comment":"Returns a formatted string using the specified format string and\n arguments.\n\n \u003cp\u003e The locale always used is the one returned by {@link\n java.util.Locale#getDefault() Locale.getDefault()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object...)","flatSignature":"(String, Object...)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"format","comment":"Returns a formatted string using the specified locale, format string,\n and arguments.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Locale, java.lang.String, java.lang.Object...)","flatSignature":"(Locale, String, Object...)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"l","type":{"isPrimitive":false,"simpleName":"Locale","qualifiedName":"java.util.Locale","dimension":"","elementType":{}}},{"name":"format","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code Object} argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code char} array\n argument. The contents of the character array are copied; subsequent\n modification of the character array does not affect the returned\n string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[])","flatSignature":"(char[])","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of a specific subarray of the\n {@code char} array argument.\n \u003cp\u003e\n The {@code offset} argument is the index of the first\n character of the subarray. The {@code count} argument\n specifies the length of the subarray. The contents of the subarray\n are copied; subsequent modification of the character array does not\n affect the returned string.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"copyValueOf","comment":"Equivalent to {@link #valueOf(char[], int, int)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[], int, int)","flatSignature":"(char[], int, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}},{"name":"offset","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"count","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"copyValueOf","comment":"Equivalent to {@link #valueOf(char[])}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char[])","flatSignature":"(char[])","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"data","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code boolean} argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code char}\n argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(char)","flatSignature":"(char)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code int} argument.\n \u003cp\u003e\n The representation is exactly the one returned by the\n {@code Integer.toString} method of one argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code long} argument.\n \u003cp\u003e\n The representation is exactly the one returned by the\n {@code Long.toString} method of one argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"l","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code float} argument.\n \u003cp\u003e\n The representation is exactly the one returned by the\n {@code Float.toString} method of one argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns the string representation of the {@code double} argument.\n \u003cp\u003e\n The representation is exactly the one returned by the\n {@code Double.toString} method of one argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"intern","comment":"Returns a canonical representation for the string object.\n \u003cp\u003e\n A pool of strings, initially empty, is maintained privately by the\n class {@code String}.\n \u003cp\u003e\n When the intern method is invoked, if the pool already contains a\n string equal to this {@code String} object as determined by\n the {@link #equals(Object)} method, then the string from the pool is\n returned. Otherwise, this {@code String} object is added to the\n pool and a reference to this {@code String} object is returned.\n \u003cp\u003e\n It follows that for any two strings {@code s} and {@code t},\n {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n if and only if {@code s.equals(t)} is {@code true}.\n \u003cp\u003e\n All literal strings and string-valued constant expressions are\n interned. String literals are defined in section 3.10.5 of the\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}