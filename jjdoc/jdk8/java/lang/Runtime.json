{"name":"Runtime","comment":"Every Java application has a single instance of class\n \u003ccode\u003eRuntime\u003c/code\u003e that allows the application to interface with\n the environment in which the application is running. The current\n runtime can be obtained from the \u003ccode\u003egetRuntime\u003c/code\u003e method.\n \u003cp\u003e\n An application cannot create its own instance of this class.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Runtime","qualifiedName":"java.lang.Runtime","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getRuntime","comment":"Returns the runtime object associated with the current Java application.\n Most of the methods of class \u003ccode\u003eRuntime\u003c/code\u003e are instance\n methods and must be invoked with respect to the current runtime object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Runtime","qualifiedName":"java.lang.Runtime","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"exit","comment":"Terminates the currently running Java virtual machine by initiating its\n shutdown sequence.  This method never returns normally.  The argument\n serves as a status code; by convention, a nonzero status code indicates\n abnormal termination.\n\n \u003cp\u003e The virtual machine\u0027s shutdown sequence consists of two phases.  In\n the first phase all registered {@link #addShutdownHook shutdown hooks},\n if any, are started in some unspecified order and allowed to run\n concurrently until they finish.  In the second phase all uninvoked\n finalizers are run if {@link #runFinalizersOnExit finalization-on-exit}\n has been enabled.  Once this is done the virtual machine {@link #halt\n halts}.\n\n \u003cp\u003e If this method is invoked after the virtual machine has begun its\n shutdown sequence then if shutdown hooks are being run this method will\n block indefinitely.  If shutdown hooks have already been run and on-exit\n finalization has been enabled then this method halts the virtual machine\n with the given status code if the status is nonzero; otherwise, it\n blocks indefinitely.\n\n \u003cp\u003e The \u003ctt\u003e{@link System#exit(int) System.exit}\u003c/tt\u003e method is the\n conventional and convenient means of invoking this method. \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"status","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addShutdownHook","comment":"Registers a new virtual-machine shutdown hook.\n\n \u003cp\u003e The Java virtual machine \u003ci\u003eshuts down\u003c/i\u003e in response to two kinds\n of events:\n\n   \u003cul\u003e\n\n   \u003cli\u003e The program \u003ci\u003eexits\u003c/i\u003e normally, when the last non-daemon\n   thread exits or when the \u003ctt\u003e{@link #exit exit}\u003c/tt\u003e (equivalently,\n   {@link System#exit(int) System.exit}) method is invoked, or\n\n   \u003cli\u003e The virtual machine is \u003ci\u003eterminated\u003c/i\u003e in response to a\n   user interrupt, such as typing \u003ctt\u003e^C\u003c/tt\u003e, or a system-wide event,\n   such as user logoff or system shutdown.\n\n   \u003c/ul\u003e\n\n \u003cp\u003e A \u003ci\u003eshutdown hook\u003c/i\u003e is simply an initialized but unstarted\n thread.  When the virtual machine begins its shutdown sequence it will\n start all registered shutdown hooks in some unspecified order and let\n them run concurrently.  When all the hooks have finished it will then\n run all uninvoked finalizers if finalization-on-exit has been enabled.\n Finally, the virtual machine will halt.  Note that daemon threads will\n continue to run during the shutdown sequence, as will non-daemon threads\n if shutdown was initiated by invoking the \u003ctt\u003e{@link #exit exit}\u003c/tt\u003e\n method.\n\n \u003cp\u003e Once the shutdown sequence has begun it can be stopped only by\n invoking the \u003ctt\u003e{@link #halt halt}\u003c/tt\u003e method, which forcibly\n terminates the virtual machine.\n\n \u003cp\u003e Once the shutdown sequence has begun it is impossible to register a\n new shutdown hook or de-register a previously-registered hook.\n Attempting either of these operations will cause an\n \u003ctt\u003e{@link IllegalStateException}\u003c/tt\u003e to be thrown.\n\n \u003cp\u003e Shutdown hooks run at a delicate time in the life cycle of a virtual\n machine and should therefore be coded defensively.  They should, in\n particular, be written to be thread-safe and to avoid deadlocks insofar\n as possible.  They should also not rely blindly upon services that may\n have registered their own shutdown hooks and therefore may themselves in\n the process of shutting down.  Attempts to use other thread-based\n services such as the AWT event-dispatch thread, for example, may lead to\n deadlocks.\n\n \u003cp\u003e Shutdown hooks should also finish their work quickly.  When a\n program invokes \u003ctt\u003e{@link #exit exit}\u003c/tt\u003e the expectation is\n that the virtual machine will promptly shut down and exit.  When the\n virtual machine is terminated due to user logoff or system shutdown the\n underlying operating system may only allow a fixed amount of time in\n which to shut down and exit.  It is therefore inadvisable to attempt any\n user interaction or to perform a long-running computation in a shutdown\n hook.\n\n \u003cp\u003e Uncaught exceptions are handled in shutdown hooks just as in any\n other thread, by invoking the \u003ctt\u003e{@link ThreadGroup#uncaughtException\n uncaughtException}\u003c/tt\u003e method of the thread\u0027s \u003ctt\u003e{@link\n ThreadGroup}\u003c/tt\u003e object.  The default implementation of this method\n prints the exception\u0027s stack trace to \u003ctt\u003e{@link System#err}\u003c/tt\u003e and\n terminates the thread; it does not cause the virtual machine to exit or\n halt.\n\n \u003cp\u003e In rare circumstances the virtual machine may \u003ci\u003eabort\u003c/i\u003e, that is,\n stop running without shutting down cleanly.  This occurs when the\n virtual machine is terminated externally, for example with the\n \u003ctt\u003eSIGKILL\u003c/tt\u003e signal on Unix or the \u003ctt\u003eTerminateProcess\u003c/tt\u003e call on\n Microsoft Windows.  The virtual machine may also abort if a native\n method goes awry by, for example, corrupting internal data structures or\n attempting to access nonexistent memory.  If the virtual machine aborts\n then no guarantee can be made about whether or not any shutdown hooks\n will be run. \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hook","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeShutdownHook","comment":"De-registers a previously-registered virtual-machine shutdown hook. \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"hook","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"halt","comment":"Forcibly terminates the currently running Java virtual machine.  This\n method never returns normally.\n\n \u003cp\u003e This method should be used with extreme caution.  Unlike the\n \u003ctt\u003e{@link #exit exit}\u003c/tt\u003e method, this method does not cause shutdown\n hooks to be started and does not run uninvoked finalizers if\n finalization-on-exit has been enabled.  If the shutdown sequence has\n already been initiated then this method does not wait for any running\n shutdown hooks or finalizers to finish their work. \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"status","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"runFinalizersOnExit","comment":"Enable or disable finalization on exit; doing so specifies that the\n finalizers of all objects that have finalizers that have not yet been\n automatically invoked are to be run before the Java runtime exits.\n By default, finalization on exit is disabled.\n\n \u003cp\u003eIf there is a security manager,\n its \u003ccode\u003echeckExit\u003c/code\u003e method is first called\n with 0 as its argument to ensure the exit is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exec","comment":"Executes the specified string command in a separate process.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n \u003ctt\u003eexec(command)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n \u003ctt\u003e{@link #exec(String, String[], File) exec}(command, null, null)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exec","comment":"Executes the specified string command in a separate process with the\n specified environment.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n \u003ctt\u003eexec(command, envp)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n \u003ctt\u003e{@link #exec(String, String[], File) exec}(command, envp, null)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String[])","flatSignature":"(String, String[])","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"envp","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"exec","comment":"Executes the specified string command in a separate process with the\n specified environment and working directory.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n \u003ctt\u003eexec(command, envp, dir)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n \u003ctt\u003e{@link #exec(String[], String[], File) exec}(cmdarray, envp, dir)\u003c/tt\u003e,\n where \u003ccode\u003ecmdarray\u003c/code\u003e is an array of all the tokens in\n \u003ccode\u003ecommand\u003c/code\u003e.\n\n \u003cp\u003eMore precisely, the \u003ccode\u003ecommand\u003c/code\u003e string is broken\n into tokens using a {@link StringTokenizer} created by the call\n \u003ccode\u003enew {@link StringTokenizer}(command)\u003c/code\u003e with no\n further modification of the character categories.  The tokens\n produced by the tokenizer are then placed in the new string\n array \u003ccode\u003ecmdarray\u003c/code\u003e, in the same order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String[], java.io.File)","flatSignature":"(String, String[], File)","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"envp","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}},{"name":"dir","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exec","comment":"Executes the specified command and arguments in a separate process.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n \u003ctt\u003eexec(cmdarray)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n \u003ctt\u003e{@link #exec(String[], String[], File) exec}(cmdarray, null, null)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[])","flatSignature":"(String[])","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cmdarray","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"exec","comment":"Executes the specified command and arguments in a separate process\n with the specified environment.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n \u003ctt\u003eexec(cmdarray, envp)\u003c/tt\u003e\n behaves in exactly the same way as the invocation\n \u003ctt\u003e{@link #exec(String[], String[], File) exec}(cmdarray, envp, null)\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[], java.lang.String[])","flatSignature":"(String[], String[])","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cmdarray","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}},{"name":"envp","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"exec","comment":"Executes the specified command and arguments in a separate process with\n the specified environment and working directory.\n\n \u003cp\u003eGiven an array of strings \u003ccode\u003ecmdarray\u003c/code\u003e, representing the\n tokens of a command line, and an array of strings \u003ccode\u003eenvp\u003c/code\u003e,\n representing \"environment\" variable settings, this method creates\n a new process in which to execute the specified command.\n\n \u003cp\u003eThis method checks that \u003ccode\u003ecmdarray\u003c/code\u003e is a valid operating\n system command.  Which commands are valid is system-dependent,\n but at the very least the command must be a non-empty list of\n non-null strings.\n\n \u003cp\u003eIf \u003ctt\u003eenvp\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, the subprocess inherits the\n environment settings of the current process.\n\n \u003cp\u003eA minimal set of system dependent environment variables may\n be required to start a process on some operating systems.\n As a result, the subprocess may inherit additional environment variable\n settings beyond those in the specified environment.\n\n \u003cp\u003e{@link ProcessBuilder#start()} is now the preferred way to\n start a process with a modified environment.\n\n \u003cp\u003eThe working directory of the new subprocess is specified by \u003ctt\u003edir\u003c/tt\u003e.\n If \u003ctt\u003edir\u003c/tt\u003e is \u003ctt\u003enull\u003c/tt\u003e, the subprocess inherits the\n current working directory of the current process.\n\n \u003cp\u003eIf a security manager exists, its\n {@link SecurityManager#checkExec checkExec}\n method is invoked with the first component of the array\n \u003ccode\u003ecmdarray\u003c/code\u003e as its argument. This may result in a\n {@link SecurityException} being thrown.\n\n \u003cp\u003eStarting an operating system process is highly system-dependent.\n Among the many things that can go wrong are:\n \u003cul\u003e\n \u003cli\u003eThe operating system program file was not found.\n \u003cli\u003eAccess to the program file was denied.\n \u003cli\u003eThe working directory does not exist.\n \u003c/ul\u003e\n\n \u003cp\u003eIn such cases an exception will be thrown.  The exact nature\n of the exception is system-dependent, but it will always be a\n subclass of {@link IOException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String[], java.lang.String[], java.io.File)","flatSignature":"(String[], String[], File)","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cmdarray","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}},{"name":"envp","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}},{"name":"dir","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"availableProcessors","comment":"Returns the number of processors available to the Java virtual machine.\n\n \u003cp\u003e This value may change during a particular invocation of the virtual\n machine.  Applications that are sensitive to the number of available\n processors should therefore occasionally poll this property and adjust\n their resource usage appropriately. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"freeMemory","comment":"Returns the amount of free memory in the Java Virtual Machine.\n Calling the\n \u003ccode\u003egc\u003c/code\u003e method may result in increasing the value returned\n by \u003ccode\u003efreeMemory.\u003c/code\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"totalMemory","comment":"Returns the total amount of memory in the Java virtual machine.\n The value returned by this method may vary over time, depending on\n the host environment.\n \u003cp\u003e\n Note that the amount of memory required to hold an object of any\n given type may be implementation-dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"maxMemory","comment":"Returns the maximum amount of memory that the Java virtual machine will\n attempt to use.  If there is no inherent limit then the value {@link\n java.lang.Long#MAX_VALUE} will be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"gc","comment":"Runs the garbage collector.\n Calling this method suggests that the Java virtual machine expend\n effort toward recycling unused objects in order to make the memory\n they currently occupy available for quick reuse. When control\n returns from the method call, the virtual machine has made\n its best effort to recycle all discarded objects.\n \u003cp\u003e\n The name \u003ccode\u003egc\u003c/code\u003e stands for \"garbage\n collector\". The virtual machine performs this recycling\n process automatically as needed, in a separate thread, even if the\n \u003ccode\u003egc\u003c/code\u003e method is not invoked explicitly.\n \u003cp\u003e\n The method {@link System#gc()} is the conventional and convenient\n means of invoking this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"runFinalization","comment":"Runs the finalization methods of any objects pending finalization.\n Calling this method suggests that the Java virtual machine expend\n effort toward running the \u003ccode\u003efinalize\u003c/code\u003e methods of objects\n that have been found to be discarded but whose \u003ccode\u003efinalize\u003c/code\u003e\n methods have not yet been run. When control returns from the\n method call, the virtual machine has made a best effort to\n complete all outstanding finalizations.\n \u003cp\u003e\n The virtual machine performs the finalization process\n automatically as needed, in a separate thread, if the\n \u003ccode\u003erunFinalization\u003c/code\u003e method is not invoked explicitly.\n \u003cp\u003e\n The method {@link System#runFinalization()} is the conventional\n and convenient means of invoking this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"traceInstructions","comment":"Enables/Disables tracing of instructions.\n If the \u003ccode\u003eboolean\u003c/code\u003e argument is \u003ccode\u003etrue\u003c/code\u003e, this\n method suggests that the Java virtual machine emit debugging\n information for each instruction in the virtual machine as it\n is executed. The format of this information, and the file or other\n output stream to which it is emitted, depends on the host environment.\n The virtual machine may ignore this request if it does not support\n this feature. The destination of the trace output is system\n dependent.\n \u003cp\u003e\n If the \u003ccode\u003eboolean\u003c/code\u003e argument is \u003ccode\u003efalse\u003c/code\u003e, this\n method causes the virtual machine to stop performing the\n detailed instruction trace it is performing.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"traceMethodCalls","comment":"Enables/Disables tracing of method calls.\n If the \u003ccode\u003eboolean\u003c/code\u003e argument is \u003ccode\u003etrue\u003c/code\u003e, this\n method suggests that the Java virtual machine emit debugging\n information for each method in the virtual machine as it is\n called. The format of this information, and the file or other output\n stream to which it is emitted, depends on the host environment. The\n virtual machine may ignore this request if it does not support\n this feature.\n \u003cp\u003e\n Calling this method with argument false suggests that the\n virtual machine cease emitting per-call debugging information.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"load","comment":"Loads the native library specified by the filename argument.  The filename\n argument must be an absolute path name.\n (for example\n \u003ccode\u003eRuntime.getRuntime().load(\"/home/avh/lib/libX11.so\");\u003c/code\u003e).\n\n If the filename argument, when stripped of any platform-specific library\n prefix, path, and file extension, indicates a library whose name is,\n for example, L, and a native library called L is statically linked\n with the VM, then the JNI_OnLoad_L function exported by the library\n is invoked rather than attempting to load a dynamic library.\n A filename matching the argument does not have to exist in the file\n system. See the JNI Specification for more details.\n\n Otherwise, the filename argument is mapped to a native library image in\n an implementation-dependent manner.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckLink\u003c/code\u003e\n method is called with the \u003ccode\u003efilename\u003c/code\u003e as its argument.\n This may result in a security exception.\n \u003cp\u003e\n This is similar to the method {@link #loadLibrary(String)}, but it\n accepts a general file name as an argument rather than just a library\n name, allowing any file of native code to be loaded.\n \u003cp\u003e\n The method {@link System#load(String)} is the conventional and\n convenient means of invoking this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"filename","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"loadLibrary","comment":"Loads the native library specified by the \u003ccode\u003elibname\u003c/code\u003e\n argument.  The \u003ccode\u003elibname\u003c/code\u003e argument must not contain any platform\n specific prefix, file extension or path. If a native library\n called \u003ccode\u003elibname\u003c/code\u003e is statically linked with the VM, then the\n JNI_OnLoad_\u003ccode\u003elibname\u003c/code\u003e function exported by the library is invoked.\n See the JNI Specification for more details.\n\n Otherwise, the libname argument is loaded from a system library\n location and mapped to a native library image in an implementation-\n dependent manner.\n \u003cp\u003e\n First, if there is a security manager, its \u003ccode\u003echeckLink\u003c/code\u003e\n method is called with the \u003ccode\u003elibname\u003c/code\u003e as its argument.\n This may result in a security exception.\n \u003cp\u003e\n The method {@link System#loadLibrary(String)} is the conventional\n and convenient means of invoking this method. If native\n methods are to be used in the implementation of a class, a standard\n strategy is to put the native code in a library file (call it\n \u003ccode\u003eLibFile\u003c/code\u003e) and then to put a static initializer:\n \u003cblockquote\u003e\u003cpre\u003e\n static { System.loadLibrary(\"LibFile\"); }\n \u003c/pre\u003e\u003c/blockquote\u003e\n within the class declaration. When the class is loaded and\n initialized, the necessary native code implementation for the native\n methods will then be loaded as well.\n \u003cp\u003e\n If this method is called more than once with the same library\n name, the second and subsequent calls are ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"libname","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLocalizedInputStream","comment":"Creates a localized version of an input stream. This method takes\n an \u003ccode\u003eInputStream\u003c/code\u003e and returns an \u003ccode\u003eInputStream\u003c/code\u003e\n equivalent to the argument in all respects except that it is\n localized: as characters in the local character set are read from\n the stream, they are automatically converted from the local\n character set to Unicode.\n \u003cp\u003e\n If the argument is already a localized stream, it may be returned\n as the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLocalizedOutputStream","comment":"Creates a localized version of an output stream. This method\n takes an \u003ccode\u003eOutputStream\u003c/code\u003e and returns an\n \u003ccode\u003eOutputStream\u003c/code\u003e equivalent to the argument in all respects\n except that it is localized: as Unicode characters are written to\n the stream, they are automatically converted to the local\n character set.\n \u003cp\u003e\n If the argument is already a localized stream, it may be returned\n as the result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.OutputStream)","flatSignature":"(OutputStream)","returnType":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}