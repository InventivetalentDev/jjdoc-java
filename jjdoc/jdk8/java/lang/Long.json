{"name":"Long","comment":"The {@code Long} class wraps a value of the primitive type {@code\n long} in an object. An object of type {@code Long} contains a\n single field whose type is {@code long}.\n\n \u003cp\u003e In addition, this class provides several methods for converting\n a {@code long} to a {@code String} and a {@code String} to a {@code\n long}, as well as other constants and methods useful when dealing\n with a {@code long}.\n\n \u003cp\u003eImplementation note: The implementations of the \"bit twiddling\"\n methods (such as {@link #highestOneBit(long) highestOneBit} and\n {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are\n based on material from Henry S. Warren, Jr.\u0027s \u003ci\u003eHacker\u0027s\n Delight\u003c/i\u003e, (Addison Wesley, 2002).","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Number","interfaces":["java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Long","comment":"Constructs a newly allocated {@code Long} object that\n represents the specified {@code long} argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Long","comment":"Constructs a newly allocated {@code Long} object that\n represents the {@code long} value indicated by the\n {@code String} parameter. The string is converted to a\n {@code long} value in exactly the manner used by the\n {@code parseLong} method for radix 10.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"MIN_VALUE","comment":"A constant holding the minimum value a {@code long} can\n have, -2\u003csup\u003e63\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-9223372036854775808L"},{"name":"MAX_VALUE","comment":"A constant holding the maximum value a {@code long} can\n have, 2\u003csup\u003e63\u003c/sup\u003e-1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9223372036854775807L"},{"name":"TYPE","comment":"The {@code Class} instance representing the primitive type\n {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isStatic":true},{"name":"SIZE","comment":"The number of bits used to represent a {@code long} value in two\u0027s\n complement binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"64"},{"name":"BYTES","comment":"The number of bytes used to represent a {@code long} value in two\u0027s\n complement binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"}],"methods":[{"name":"toString","comment":"Returns a string representation of the first argument in the\n radix specified by the second argument.\n\n \u003cp\u003eIf the radix is smaller than {@code Character.MIN_RADIX}\n or larger than {@code Character.MAX_RADIX}, then the radix\n {@code 10} is used instead.\n\n \u003cp\u003eIf the first argument is negative, the first element of the\n result is the ASCII minus sign {@code \u0027-\u0027}\n ({@code \u0027\\u002d\u0027}). If the first argument is not\n negative, no sign character appears in the result.\n\n \u003cp\u003eThe remaining characters of the result represent the magnitude\n of the first argument. If the magnitude is zero, it is\n represented by a single zero character {@code \u00270\u0027}\n ({@code \u0027\\u0030\u0027}); otherwise, the first character of\n the representation of the magnitude will not be the zero\n character.  The following ASCII characters are used as digits:\n\n \u003cblockquote\u003e\n   {@code 0123456789abcdefghijklmnopqrstuvwxyz}\n \u003c/blockquote\u003e\n\n These are {@code \u0027\\u0030\u0027} through\n {@code \u0027\\u0039\u0027} and {@code \u0027\\u0061\u0027} through\n {@code \u0027\\u007a\u0027}. If {@code radix} is\n \u003cvar\u003eN\u003c/var\u003e, then the first \u003cvar\u003eN\u003c/var\u003e of these characters\n are used as radix-\u003cvar\u003eN\u003c/var\u003e digits in the order shown. Thus,\n the digits for hexadecimal (radix 16) are\n {@code 0123456789abcdef}. If uppercase letters are\n desired, the {@link java.lang.String#toUpperCase()} method may\n be called on the result:\n\n \u003cblockquote\u003e\n  {@code Long.toString(n, 16).toUpperCase()}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedString","comment":"Returns a string representation of the first argument as an\n unsigned integer value in the radix specified by the second\n argument.\n\n \u003cp\u003eIf the radix is smaller than {@code Character.MIN_RADIX}\n or larger than {@code Character.MAX_RADIX}, then the radix\n {@code 10} is used instead.\n\n \u003cp\u003eNote that since the first argument is treated as an unsigned\n value, no leading sign character is printed.\n\n \u003cp\u003eIf the magnitude is zero, it is represented by a single zero\n character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027}); otherwise,\n the first character of the representation of the magnitude will\n not be the zero character.\n\n \u003cp\u003eThe behavior of radixes and the characters used as digits\n are the same as {@link #toString(long, int) toString}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toHexString","comment":"Returns a string representation of the {@code long}\n argument as an unsigned integer in base\u0026nbsp;16.\n\n \u003cp\u003eThe unsigned {@code long} value is the argument plus\n 2\u003csup\u003e64\u003c/sup\u003e if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in hexadecimal (base\u0026nbsp;16) with no extra\n leading {@code 0}s.\n\n \u003cp\u003eThe value of the argument can be recovered from the returned\n string {@code s} by calling {@link\n Long#parseUnsignedLong(String, int) Long.parseUnsignedLong(s,\n 16)}.\n\n \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n single zero character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027});\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as hexadecimal digits:\n\n \u003cblockquote\u003e\n  {@code 0123456789abcdef}\n \u003c/blockquote\u003e\n\n These are the characters {@code \u0027\\u0030\u0027} through\n {@code \u0027\\u0039\u0027} and  {@code \u0027\\u0061\u0027} through\n {@code \u0027\\u0066\u0027}.  If uppercase letters are desired,\n the {@link java.lang.String#toUpperCase()} method may be called\n on the result:\n\n \u003cblockquote\u003e\n  {@code Long.toHexString(n).toUpperCase()}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toOctalString","comment":"Returns a string representation of the {@code long}\n argument as an unsigned integer in base\u0026nbsp;8.\n\n \u003cp\u003eThe unsigned {@code long} value is the argument plus\n 2\u003csup\u003e64\u003c/sup\u003e if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in octal (base\u0026nbsp;8) with no extra leading\n {@code 0}s.\n\n \u003cp\u003eThe value of the argument can be recovered from the returned\n string {@code s} by calling {@link\n Long#parseUnsignedLong(String, int) Long.parseUnsignedLong(s,\n 8)}.\n\n \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n single zero character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027});\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as octal digits:\n\n \u003cblockquote\u003e\n  {@code 01234567}\n \u003c/blockquote\u003e\n\n These are the characters {@code \u0027\\u0030\u0027} through\n {@code \u0027\\u0037\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toBinaryString","comment":"Returns a string representation of the {@code long}\n argument as an unsigned integer in base\u0026nbsp;2.\n\n \u003cp\u003eThe unsigned {@code long} value is the argument plus\n 2\u003csup\u003e64\u003c/sup\u003e if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in binary (base\u0026nbsp;2) with no extra leading\n {@code 0}s.\n\n \u003cp\u003eThe value of the argument can be recovered from the returned\n string {@code s} by calling {@link\n Long#parseUnsignedLong(String, int) Long.parseUnsignedLong(s,\n 2)}.\n\n \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n single zero character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027});\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n characters {@code \u00270\u0027} ({@code \u0027\\u0030\u0027}) and {@code\n \u00271\u0027} ({@code \u0027\\u0031\u0027}) are used as binary digits.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing the specified\n {@code long}.  The argument is converted to signed decimal\n representation and returned as a string, exactly as if the\n argument and the radix 10 were given as arguments to the {@link\n #toString(long, int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedString","comment":"Returns a string representation of the argument as an unsigned\n decimal value.\n\n The argument is converted to unsigned decimal representation\n and returned as a string exactly as if the argument and radix\n 10 were given as arguments to the {@link #toUnsignedString(long,\n int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseLong","comment":"Parses the string argument as a signed {@code long} in the\n radix specified by the second argument. The characters in the\n string must all be digits of the specified radix (as determined\n by whether {@link java.lang.Character#digit(char, int)} returns\n a nonnegative value), except that the first character may be an\n ASCII minus sign {@code \u0027-\u0027} ({@code \u0027\\u002D\u0027}) to\n indicate a negative value or an ASCII plus sign {@code \u0027+\u0027}\n ({@code \u0027\\u002B\u0027}) to indicate a positive value. The\n resulting {@code long} value is returned.\n\n \u003cp\u003eNote that neither the character {@code L}\n ({@code \u0027\\u004C\u0027}) nor {@code l}\n ({@code \u0027\\u006C\u0027}) is permitted to appear at the end\n of the string as a type indicator, as would be permitted in\n Java programming language source code - except that either\n {@code L} or {@code l} may appear as a digit for a\n radix greater than or equal to 22.\n\n \u003cp\u003eAn exception of type {@code NumberFormatException} is\n thrown if any of the following situations occurs:\n \u003cul\u003e\n\n \u003cli\u003eThe first argument is {@code null} or is a string of\n length zero.\n\n \u003cli\u003eThe {@code radix} is either smaller than {@link\n java.lang.Character#MIN_RADIX} or larger than {@link\n java.lang.Character#MAX_RADIX}.\n\n \u003cli\u003eAny character of the string is not a digit of the specified\n radix, except that the first character may be a minus sign\n {@code \u0027-\u0027} ({@code \u0027\\u002d\u0027}) or plus sign {@code\n \u0027+\u0027} ({@code \u0027\\u002B\u0027}) provided that the string is\n longer than length 1.\n\n \u003cli\u003eThe value represented by the string is not a value of type\n      {@code long}.\n \u003c/ul\u003e\n\n \u003cp\u003eExamples:\n \u003cblockquote\u003e\u003cpre\u003e\n parseLong(\"0\", 10) returns 0L\n parseLong(\"473\", 10) returns 473L\n parseLong(\"+42\", 10) returns 42L\n parseLong(\"-0\", 10) returns 0L\n parseLong(\"-FF\", 16) returns -255L\n parseLong(\"1100110\", 2) returns 102L\n parseLong(\"99\", 8) throws a NumberFormatException\n parseLong(\"Hazelnut\", 10) throws a NumberFormatException\n parseLong(\"Hazelnut\", 36) returns 1356099454469L\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseLong","comment":"Parses the string argument as a signed decimal {@code long}.\n The characters in the string must all be decimal digits, except\n that the first character may be an ASCII minus sign {@code \u0027-\u0027}\n ({@code \\u002D\u0027}) to indicate a negative value or an\n ASCII plus sign {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) to\n indicate a positive value. The resulting {@code long} value is\n returned, exactly as if the argument and the radix {@code 10}\n were given as arguments to the {@link\n #parseLong(java.lang.String, int)} method.\n\n \u003cp\u003eNote that neither the character {@code L}\n ({@code \u0027\\u004C\u0027}) nor {@code l}\n ({@code \u0027\\u006C\u0027}) is permitted to appear at the end\n of the string as a type indicator, as would be permitted in\n Java programming language source code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseUnsignedLong","comment":"Parses the string argument as an unsigned {@code long} in the\n radix specified by the second argument.  An unsigned integer\n maps the values usually associated with negative numbers to\n positive numbers larger than {@code MAX_VALUE}.\n\n The characters in the string must all be digits of the\n specified radix (as determined by whether {@link\n java.lang.Character#digit(char, int)} returns a nonnegative\n value), except that the first character may be an ASCII plus\n sign {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}). The resulting\n integer value is returned.\n\n \u003cp\u003eAn exception of type {@code NumberFormatException} is\n thrown if any of the following situations occurs:\n \u003cul\u003e\n \u003cli\u003eThe first argument is {@code null} or is a string of\n length zero.\n\n \u003cli\u003eThe radix is either smaller than\n {@link java.lang.Character#MIN_RADIX} or\n larger than {@link java.lang.Character#MAX_RADIX}.\n\n \u003cli\u003eAny character of the string is not a digit of the specified\n radix, except that the first character may be a plus sign\n {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) provided that the\n string is longer than length 1.\n\n \u003cli\u003eThe value represented by the string is larger than the\n largest unsigned {@code long}, 2\u003csup\u003e64\u003c/sup\u003e-1.\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseUnsignedLong","comment":"Parses the string argument as an unsigned decimal {@code long}. The\n characters in the string must all be decimal digits, except\n that the first character may be an an ASCII plus sign {@code\n \u0027+\u0027} ({@code \u0027\\u002B\u0027}). The resulting integer value\n is returned, exactly as if the argument and the radix 10 were\n given as arguments to the {@link\n #parseUnsignedLong(java.lang.String, int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Long} object holding the value\n extracted from the specified {@code String} when parsed\n with the radix given by the second argument.  The first\n argument is interpreted as representing a signed\n {@code long} in the radix specified by the second\n argument, exactly as if the arguments were given to the {@link\n #parseLong(java.lang.String, int)} method. The result is a\n {@code Long} object that represents the {@code long}\n value specified by the string.\n\n \u003cp\u003eIn other words, this method returns a {@code Long} object equal\n to the value of:\n\n \u003cblockquote\u003e\n  {@code new Long(Long.parseLong(s, radix))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Long} object holding the value\n of the specified {@code String}. The argument is\n interpreted as representing a signed decimal {@code long},\n exactly as if the argument were given to the {@link\n #parseLong(java.lang.String)} method. The result is a\n {@code Long} object that represents the integer value\n specified by the string.\n\n \u003cp\u003eIn other words, this method returns a {@code Long} object\n equal to the value of:\n\n \u003cblockquote\u003e\n  {@code new Long(Long.parseLong(s))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Long} instance representing the specified\n {@code long} value.\n If a new {@code Long} instance is not required, this method\n should generally be used in preference to the constructor\n {@link #Long(long)}, as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n Note that unlike the {@linkplain Integer#valueOf(int)\n corresponding method} in the {@code Integer} class, this method\n is \u003cem\u003enot\u003c/em\u003e required to cache values within a particular\n range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"l","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decode","comment":"Decodes a {@code String} into a {@code Long}.\n Accepts decimal, hexadecimal, and octal numbers given by the\n following grammar:\n\n \u003cblockquote\u003e\n \u003cdl\u003e\n \u003cdt\u003e\u003ci\u003eDecodableString:\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e DecimalNumeral\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0x} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0X} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code #} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0} \u003ci\u003eOctalDigits\u003c/i\u003e\n\n \u003cdt\u003e\u003ci\u003eSign:\u003c/i\u003e\n \u003cdd\u003e{@code -}\n \u003cdd\u003e{@code +}\n \u003c/dl\u003e\n \u003c/blockquote\u003e\n\n \u003ci\u003eDecimalNumeral\u003c/i\u003e, \u003ci\u003eHexDigits\u003c/i\u003e, and \u003ci\u003eOctalDigits\u003c/i\u003e\n are as defined in section 3.10.1 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e,\n except that underscores are not accepted between digits.\n\n \u003cp\u003eThe sequence of characters following an optional\n sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n \"{@code #}\", or leading zero) is parsed as by the {@code\n Long.parseLong} method with the indicated radix (10, 16, or 8).\n This sequence of characters must represent a positive value or\n a {@link NumberFormatException} will be thrown.  The result is\n negated if first character of the specified {@code String} is\n the minus sign.  No whitespace characters are permitted in the\n {@code String}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"byteValue","comment":"Returns the value of this {@code Long} as a {@code byte} after\n a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shortValue","comment":"Returns the value of this {@code Long} as a {@code short} after\n a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValue","comment":"Returns the value of this {@code Long} as an {@code int} after\n a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValue","comment":"Returns the value of this {@code Long} as a\n {@code long} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"floatValue","comment":"Returns the value of this {@code Long} as a {@code float} after\n a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"doubleValue","comment":"Returns the value of this {@code Long} as a {@code double}\n after a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing this\n {@code Long}\u0027s value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the {@code long} value were given as an argument to the\n {@link java.lang.Long#toString(long)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this {@code Long}. The result is\n the exclusive OR of the two halves of the primitive\n {@code long} value held by this {@code Long}\n object. That is, the hashcode is the value of the expression:\n\n \u003cblockquote\u003e\n  {@code (int)(this.longValue()^(this.longValue()\u003e\u003e\u003e32))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for a {@code long} value; compatible with\n {@code Long.hashCode()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares this object to the specified object.  The result is\n {@code true} if and only if the argument is not\n {@code null} and is a {@code Long} object that\n contains the same {@code long} value as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Determines the {@code long} value of the system property\n with the specified name.\n\n \u003cp\u003eThe first argument is treated as the name of a system\n property.  System properties are accessible through the {@link\n java.lang.System#getProperty(java.lang.String)} method. The\n string value of this property is then interpreted as a {@code\n long} value using the grammar supported by {@link Long#decode decode}\n and a {@code Long} object representing this value is returned.\n\n \u003cp\u003eIf there is no property with the specified name, if the\n specified name is empty or {@code null}, or if the property\n does not have the correct numeric format, then {@code null} is\n returned.\n\n \u003cp\u003eIn other words, this method returns a {@code Long} object\n equal to the value of:\n\n \u003cblockquote\u003e\n  {@code getLong(nm, null)}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Determines the {@code long} value of the system property\n with the specified name.\n\n \u003cp\u003eThe first argument is treated as the name of a system\n property.  System properties are accessible through the {@link\n java.lang.System#getProperty(java.lang.String)} method. The\n string value of this property is then interpreted as a {@code\n long} value using the grammar supported by {@link Long#decode decode}\n and a {@code Long} object representing this value is returned.\n\n \u003cp\u003eThe second argument is the default value. A {@code Long} object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or null.\n\n \u003cp\u003eIn other words, this method returns a {@code Long} object equal\n to the value of:\n\n \u003cblockquote\u003e\n  {@code getLong(nm, new Long(val))}\n \u003c/blockquote\u003e\n\n but in practice it may be implemented in a manner such as:\n\n \u003cblockquote\u003e\u003cpre\u003e\n Long result \u003d getLong(nm, null);\n return (result \u003d\u003d null) ? new Long(val) : result;\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n to avoid the unnecessary allocation of a {@code Long} object when\n the default value is not needed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, long)","flatSignature":"(String, long)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"val","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Returns the {@code long} value of the system property with\n the specified name.  The first argument is treated as the name\n of a system property.  System properties are accessible through\n the {@link java.lang.System#getProperty(java.lang.String)}\n method. The string value of this property is then interpreted\n as a {@code long} value, as per the\n {@link Long#decode decode} method, and a {@code Long} object\n representing this value is returned; in summary:\n\n \u003cul\u003e\n \u003cli\u003eIf the property value begins with the two ASCII characters\n {@code 0x} or the ASCII character {@code #}, not followed by\n a minus sign, then the rest of it is parsed as a hexadecimal integer\n exactly as for the method {@link #valueOf(java.lang.String, int)}\n with radix 16.\n \u003cli\u003eIf the property value begins with the ASCII character\n {@code 0} followed by another character, it is parsed as\n an octal integer exactly as by the method {@link\n #valueOf(java.lang.String, int)} with radix 8.\n \u003cli\u003eOtherwise the property value is parsed as a decimal\n integer exactly as by the method\n {@link #valueOf(java.lang.String, int)} with radix 10.\n \u003c/ul\u003e\n\n \u003cp\u003eNote that, in every case, neither {@code L}\n ({@code \u0027\\u004C\u0027}) nor {@code l}\n ({@code \u0027\\u006C\u0027}) is permitted to appear at the end\n of the property value as a type indicator, as would be\n permitted in Java programming language source code.\n\n \u003cp\u003eThe second argument is the default value. The default value is\n returned if there is no property of the specified name, if the\n property does not have the correct numeric format, or if the\n specified name is empty or {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Long)","flatSignature":"(String, Long)","returnType":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"val","type":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares two {@code Long} objects numerically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Long)","flatSignature":"(Long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherLong","type":{"isPrimitive":false,"simpleName":"Long","qualifiedName":"java.lang.Long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compare","comment":"Compares two {@code long} values numerically.\n The value returned is identical to what would be returned by:\n \u003cpre\u003e\n    Long.valueOf(x).compareTo(Long.valueOf(y))\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareUnsigned","comment":"Compares two {@code long} values numerically treating the values\n as unsigned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"divideUnsigned","comment":"Returns the unsigned quotient of dividing the first argument by\n the second where each argument and the result is interpreted as\n an unsigned value.\n\n \u003cp\u003eNote that in two\u0027s complement arithmetic, the three other\n basic arithmetic operations of add, subtract, and multiply are\n bit-wise identical if the two operands are regarded as both\n being signed or both being unsigned.  Therefore separate {@code\n addUnsigned}, etc. methods are not provided.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dividend","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"divisor","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remainderUnsigned","comment":"Returns the unsigned remainder from dividing the first argument\n by the second where each argument and the result is interpreted\n as an unsigned value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dividend","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"divisor","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"highestOneBit","comment":"Returns a {@code long} value with at most a single one-bit, in the\n position of the highest-order (\"leftmost\") one-bit in the specified\n {@code long} value.  Returns zero if the specified value has no\n one-bits in its two\u0027s complement binary representation, that is, if it\n is equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lowestOneBit","comment":"Returns a {@code long} value with at most a single one-bit, in the\n position of the lowest-order (\"rightmost\") one-bit in the specified\n {@code long} value.  Returns zero if the specified value has no\n one-bits in its two\u0027s complement binary representation, that is, if it\n is equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"numberOfLeadingZeros","comment":"Returns the number of zero bits preceding the highest-order\n (\"leftmost\") one-bit in the two\u0027s complement binary representation\n of the specified {@code long} value.  Returns 64 if the\n specified value has no one-bits in its two\u0027s complement representation,\n in other words if it is equal to zero.\n\n \u003cp\u003eNote that this method is closely related to the logarithm base 2.\n For all positive {@code long} values x:\n \u003cul\u003e\n \u003cli\u003efloor(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d {@code 63 - numberOfLeadingZeros(x)}\n \u003cli\u003eceil(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d {@code 64 - numberOfLeadingZeros(x - 1)}\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"numberOfTrailingZeros","comment":"Returns the number of zero bits following the lowest-order (\"rightmost\")\n one-bit in the two\u0027s complement binary representation of the specified\n {@code long} value.  Returns 64 if the specified value has no\n one-bits in its two\u0027s complement representation, in other words if it is\n equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bitCount","comment":"Returns the number of one-bits in the two\u0027s complement binary\n representation of the specified {@code long} value.  This function is\n sometimes referred to as the \u003ci\u003epopulation count\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"rotateLeft","comment":"Returns the value obtained by rotating the two\u0027s complement binary\n representation of the specified {@code long} value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n \u003cp\u003eNote that left rotation with a negative distance is equivalent to\n right rotation: {@code rotateLeft(val, -distance) \u003d\u003d rotateRight(val,\n distance)}.  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: {@code rotateLeft(val,\n distance) \u003d\u003d rotateLeft(val, distance \u0026 0x3F)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"distance","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"rotateRight","comment":"Returns the value obtained by rotating the two\u0027s complement binary\n representation of the specified {@code long} value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n \u003cp\u003eNote that right rotation with a negative distance is equivalent to\n left rotation: {@code rotateRight(val, -distance) \u003d\u003d rotateLeft(val,\n distance)}.  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: {@code rotateRight(val,\n distance) \u003d\u003d rotateRight(val, distance \u0026 0x3F)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"distance","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverse","comment":"Returns the value obtained by reversing the order of the bits in the\n two\u0027s complement binary representation of the specified {@code long}\n value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"signum","comment":"Returns the signum function of the specified {@code long} value.  (The\n return value is -1 if the specified value is negative; 0 if the\n specified value is zero; and 1 if the specified value is positive.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverseBytes","comment":"Returns the value obtained by reversing the order of the bytes in the\n two\u0027s complement representation of the specified {@code long} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sum","comment":"Adds two {@code long} values together as per the + operator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the greater of two {@code long} values\n as if by calling {@link Math#max(long, long) Math.max}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the smaller of two {@code long} values\n as if by calling {@link Math#min(long, long) Math.min}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}