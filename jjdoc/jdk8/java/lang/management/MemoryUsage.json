{"name":"MemoryUsage","comment":"A \u003ctt\u003eMemoryUsage\u003c/tt\u003e object represents a snapshot of memory usage.\n Instances of the \u003ctt\u003eMemoryUsage\u003c/tt\u003e class are usually constructed\n by methods that are used to obtain memory usage\n information about individual memory pool of the Java virtual machine or\n the heap or non-heap memory of the Java virtual machine as a whole.\n\n \u003cp\u003e A \u003ctt\u003eMemoryUsage\u003c/tt\u003e object contains four values:\n \u003ctable summary\u003d\"Describes the MemoryUsage object content\"\u003e\n \u003ctr\u003e\n \u003ctd valign\u003dtop\u003e \u003ctt\u003einit\u003c/tt\u003e \u003c/td\u003e\n \u003ctd valign\u003dtop\u003e represents the initial amount of memory (in bytes) that\n      the Java virtual machine requests from the operating system\n      for memory management during startup.  The Java virtual machine\n      may request additional memory from the operating system and\n      may also release memory to the system over time.\n      The value of \u003ctt\u003einit\u003c/tt\u003e may be undefined.\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd valign\u003dtop\u003e \u003ctt\u003eused\u003c/tt\u003e \u003c/td\u003e\n \u003ctd valign\u003dtop\u003e represents the amount of memory currently used (in bytes).\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd valign\u003dtop\u003e \u003ctt\u003ecommitted\u003c/tt\u003e \u003c/td\u003e\n \u003ctd valign\u003dtop\u003e represents the amount of memory (in bytes) that is\n      guaranteed to be available for use by the Java virtual machine.\n      The amount of committed memory may change over time (increase\n      or decrease).  The Java virtual machine may release memory to\n      the system and \u003ctt\u003ecommitted\u003c/tt\u003e could be less than \u003ctt\u003einit\u003c/tt\u003e.\n      \u003ctt\u003ecommitted\u003c/tt\u003e will always be greater than\n      or equal to \u003ctt\u003eused\u003c/tt\u003e.\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n \u003ctd valign\u003dtop\u003e \u003ctt\u003emax\u003c/tt\u003e \u003c/td\u003e\n \u003ctd valign\u003dtop\u003e represents the maximum amount of memory (in bytes)\n      that can be used for memory management. Its value may be undefined.\n      The maximum amount of memory may change over time if defined.\n      The amount of used and committed memory will always be less than\n      or equal to \u003ctt\u003emax\u003c/tt\u003e if \u003ctt\u003emax\u003c/tt\u003e is defined.\n      A memory allocation may fail if it attempts to increase the\n      used memory such that \u003ctt\u003eused \u0026gt; committed\u003c/tt\u003e even\n      if \u003ctt\u003eused \u0026lt;\u003d max\u003c/tt\u003e would still be true (for example,\n      when the system is low on virtual memory).\n \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n\n Below is a picture showing an example of a memory pool:\n\n \u003cpre\u003e\n        +----------------------------------------------+\n        +////////////////           |                  +\n        +////////////////           |                  +\n        +----------------------------------------------+\n\n        |--------|\n           init\n        |---------------|\n               used\n        |---------------------------|\n                  committed\n        |----------------------------------------------|\n                            max\n \u003c/pre\u003e\n\n \u003ch3\u003eMXBean Mapping\u003c/h3\u003e\n \u003ctt\u003eMemoryUsage\u003c/tt\u003e is mapped to a {@link CompositeData CompositeData}\n with attributes as specified in the {@link #from from} method.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"MemoryUsage","qualifiedName":"java.lang.management.MemoryUsage","dimension":"","elementType":{},"package":"java.lang.management","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"MemoryUsage","comment":"Constructs a \u003ctt\u003eMemoryUsage\u003c/tt\u003e object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(long, long, long, long)","flatSignature":"(long, long, long, long)","parameters":[{"name":"init","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"used","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"committed","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"max","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getInit","comment":"Returns the amount of memory in bytes that the Java virtual machine\n initially requests from the operating system for memory management.\n This method returns \u003ctt\u003e-1\u003c/tt\u003e if the initial memory size is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getUsed","comment":"Returns the amount of used memory in bytes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCommitted","comment":"Returns the amount of memory in bytes that is committed for\n the Java virtual machine to use.  This amount of memory is\n guaranteed for the Java virtual machine to use.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMax","comment":"Returns the maximum amount of memory in bytes that can be\n used for memory management.  This method returns \u003ctt\u003e-1\u003c/tt\u003e\n if the maximum memory size is undefined.\n\n \u003cp\u003e This amount of memory is not guaranteed to be available\n for memory management if it is greater than the amount of\n committed memory.  The Java virtual machine may fail to allocate\n memory even if the amount of used memory does not exceed this\n maximum size.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a descriptive representation of this memory usage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"from","comment":"Returns a \u003ctt\u003eMemoryUsage\u003c/tt\u003e object represented by the\n given \u003ctt\u003eCompositeData\u003c/tt\u003e. The given \u003ctt\u003eCompositeData\u003c/tt\u003e\n must contain the following attributes:\n\n \u003cblockquote\u003e\n \u003ctable border summary\u003d\"The attributes and the types the given CompositeData contains\"\u003e\n \u003ctr\u003e\n   \u003cth align\u003dleft\u003eAttribute Name\u003c/th\u003e\n   \u003cth align\u003dleft\u003eType\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003einit\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003eused\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003ecommitted\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003emax\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(javax.management.openmbean.CompositeData)","flatSignature":"(CompositeData)","returnType":{"isPrimitive":false,"simpleName":"MemoryUsage","qualifiedName":"java.lang.management.MemoryUsage","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"cd","type":{"isPrimitive":false,"simpleName":"CompositeData","qualifiedName":"javax.management.openmbean.CompositeData","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}