{"name":"ThreadInfo","comment":"Thread information. \u003ctt\u003eThreadInfo\u003c/tt\u003e contains the information\n about a thread including:\n \u003ch3\u003eGeneral thread information\u003c/h3\u003e\n \u003cul\u003e\n   \u003cli\u003eThread ID.\u003c/li\u003e\n   \u003cli\u003eName of the thread.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003ch3\u003eExecution information\u003c/h3\u003e\n \u003cul\u003e\n   \u003cli\u003eThread state.\u003c/li\u003e\n   \u003cli\u003eThe object upon which the thread is blocked due to:\n       \u003cul\u003e\n       \u003cli\u003ewaiting to enter a synchronization block/method, or\u003c/li\u003e\n       \u003cli\u003ewaiting to be notified in a {@link Object#wait Object.wait} method,\n           or\u003c/li\u003e\n       \u003cli\u003eparking due to a {@link java.util.concurrent.locks.LockSupport#park\n           LockSupport.park} call.\u003c/li\u003e\n       \u003c/ul\u003e\n   \u003c/li\u003e\n   \u003cli\u003eThe ID of the thread that owns the object\n       that the thread is blocked.\u003c/li\u003e\n   \u003cli\u003eStack trace of the thread.\u003c/li\u003e\n   \u003cli\u003eList of object monitors locked by the thread.\u003c/li\u003e\n   \u003cli\u003eList of \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003e\n       ownable synchronizers\u003c/a\u003e locked by the thread.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003ch4\u003e\u003ca name\u003d\"SyncStats\"\u003eSynchronization Statistics\u003c/a\u003e\u003c/h4\u003e\n \u003cul\u003e\n   \u003cli\u003eThe number of times that the thread has blocked for\n       synchronization or waited for notification.\u003c/li\u003e\n   \u003cli\u003eThe accumulated elapsed time that the thread has blocked\n       for synchronization or waited for notification\n       since {@link ThreadMXBean#setThreadContentionMonitoringEnabled\n       thread contention monitoring}\n       was enabled. Some Java virtual machine implementation\n       may not support this.  The\n       {@link ThreadMXBean#isThreadContentionMonitoringSupported()}\n       method can be used to determine if a Java virtual machine\n       supports this.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eThis thread information class is designed for use in monitoring of\n the system, not for synchronization control.\n\n \u003ch4\u003eMXBean Mapping\u003c/h4\u003e\n \u003ctt\u003eThreadInfo\u003c/tt\u003e is mapped to a {@link CompositeData CompositeData}\n with attributes as specified in\n the {@link #from from} method.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{},"package":"java.lang.management","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getThreadId","comment":"Returns the ID of the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThreadName","comment":"Returns the name of the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThreadState","comment":"Returns the state of the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"State","qualifiedName":"java.lang.Thread.State","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBlockedTime","comment":"Returns the approximate accumulated elapsed time (in milliseconds)\n that the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n has blocked to enter or reenter a monitor\n since thread contention monitoring is enabled.\n I.e. the total accumulated time the thread has been in the\n {@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread\n contention monitoring was last enabled.\n This method returns \u003ctt\u003e-1\u003c/tt\u003e if thread contention monitoring\n is disabled.\n\n \u003cp\u003eThe Java virtual machine may measure the time with a high\n resolution timer.  This statistic is reset when\n the thread contention monitoring is reenabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBlockedCount","comment":"Returns the total number of times that\n the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n blocked to enter or reenter a monitor.\n I.e. the number of times a thread has been in the\n {@link java.lang.Thread.State#BLOCKED BLOCKED} state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWaitedTime","comment":"Returns the approximate accumulated elapsed time (in milliseconds)\n that the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n has waited for notification\n since thread contention monitoring is enabled.\n I.e. the total accumulated time the thread has been in the\n {@link java.lang.Thread.State#WAITING WAITING}\n or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state\n since thread contention monitoring is enabled.\n This method returns \u003ctt\u003e-1\u003c/tt\u003e if thread contention monitoring\n is disabled.\n\n \u003cp\u003eThe Java virtual machine may measure the time with a high\n resolution timer.  This statistic is reset when\n the thread contention monitoring is reenabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWaitedCount","comment":"Returns the total number of times that\n the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n waited for notification.\n I.e. the number of times that a thread has been\n in the {@link java.lang.Thread.State#WAITING WAITING}\n or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLockInfo","comment":"Returns the \u003ctt\u003eLockInfo\u003c/tt\u003e of an object for which\n the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n is blocked waiting.\n A thread can be blocked waiting for one of the following:\n \u003cul\u003e\n \u003cli\u003ean object monitor to be acquired for entering or reentering\n     a synchronization block/method.\n     \u003cbr\u003eThe thread is in the {@link java.lang.Thread.State#BLOCKED BLOCKED}\n     state waiting to enter the \u003ctt\u003esynchronized\u003c/tt\u003e statement\n     or method.\n     \u003cp\u003e\u003c/li\u003e\n \u003cli\u003ean object monitor to be notified by another thread.\n     \u003cbr\u003eThe thread is in the {@link java.lang.Thread.State#WAITING WAITING}\n     or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state\n     due to a call to the {@link Object#wait Object.wait} method.\n     \u003cp\u003e\u003c/li\u003e\n \u003cli\u003ea synchronization object responsible for the thread parking.\n     \u003cbr\u003eThe thread is in the {@link java.lang.Thread.State#WAITING WAITING}\n     or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state\n     due to a call to the\n     {@link java.util.concurrent.locks.LockSupport#park(Object)\n     LockSupport.park} method.  The synchronization object\n     is the object returned from\n     {@link java.util.concurrent.locks.LockSupport#getBlocker\n     LockSupport.getBlocker} method. Typically it is an\n     \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003e ownable synchronizer\u003c/a\u003e\n     or a {@link java.util.concurrent.locks.Condition Condition}.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eThis method returns \u003ctt\u003enull\u003c/tt\u003e if the thread is not in any of\n the above conditions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LockInfo","qualifiedName":"java.lang.management.LockInfo","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLockName","comment":"Returns the {@link LockInfo#toString string representation}\n of an object for which the thread associated with this\n \u003ctt\u003eThreadInfo\u003c/tt\u003e is blocked waiting.\n This method is equivalent to calling:\n \u003cblockquote\u003e\n \u003cpre\u003e\n getLockInfo().toString()\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003eThis method will return \u003ctt\u003enull\u003c/tt\u003e if this thread is not blocked\n waiting for any object or if the object is not owned by any thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLockOwnerId","comment":"Returns the ID of the thread which owns the object\n for which the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n is blocked waiting.\n This method will return \u003ctt\u003e-1\u003c/tt\u003e if this thread is not blocked\n waiting for any object or if the object is not owned by any thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLockOwnerName","comment":"Returns the name of the thread which owns the object\n for which the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n is blocked waiting.\n This method will return \u003ctt\u003enull\u003c/tt\u003e if this thread is not blocked\n waiting for any object or if the object is not owned by any thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getStackTrace","comment":"Returns the stack trace of the thread\n associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e.\n If no stack trace was requested for this thread info, this method\n will return a zero-length array.\n If the returned array is of non-zero length then the first element of\n the array represents the top of the stack, which is the most recent\n method invocation in the sequence.  The last element of the array\n represents the bottom of the stack, which is the least recent method\n invocation in the sequence.\n\n \u003cp\u003eSome Java virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n is permitted to return a zero-length array from this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"StackTraceElement","qualifiedName":"java.lang.StackTraceElement","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"StackTraceElement","qualifiedName":"java.lang.StackTraceElement","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSuspended","comment":"Tests if the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n is suspended.  This method returns \u003ctt\u003etrue\u003c/tt\u003e if\n {@link Thread#suspend} has been called.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isInNative","comment":"Tests if the thread associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e\n is executing native code via the Java Native Interface (JNI).\n The JNI native code does not include\n the virtual machine support code or the compiled native\n code generated by the virtual machine.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this thread info.\n The format of this string depends on the implementation.\n The returned string will typically include\n the {@linkplain #getThreadName thread name},\n the {@linkplain #getThreadId thread ID},\n its {@linkplain #getThreadState state},\n and a {@linkplain #getStackTrace stack trace} if any.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"from","comment":"Returns a \u003ctt\u003eThreadInfo\u003c/tt\u003e object represented by the\n given \u003ctt\u003eCompositeData\u003c/tt\u003e.\n The given \u003ctt\u003eCompositeData\u003c/tt\u003e must contain the following attributes\n unless otherwise specified below:\n \u003cblockquote\u003e\n \u003ctable border summary\u003d\"The attributes and their types the given CompositeData contains\"\u003e\n \u003ctr\u003e\n   \u003cth align\u003dleft\u003eAttribute Name\u003c/th\u003e\n   \u003cth align\u003dleft\u003eType\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003ethreadId\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003ethreadName\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003ethreadState\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003esuspended\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Boolean\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003einNative\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Boolean\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003eblockedCount\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003eblockedTime\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003ewaitedCount\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003ewaitedTime\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003elockInfo\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejavax.management.openmbean.CompositeData\u003c/tt\u003e\n       - the mapped type for {@link LockInfo} as specified in the\n         {@link LockInfo#from} method.\n       \u003cp\u003e\n       If \u003ctt\u003ecd\u003c/tt\u003e does not contain this attribute,\n       the \u003ctt\u003eLockInfo\u003c/tt\u003e object will be constructed from\n       the value of the \u003ctt\u003elockName\u003c/tt\u003e attribute. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003elockName\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003elockOwnerId\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.Long\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003elockOwnerName\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003e\u003ca name\u003d\"StackTrace\"\u003estackTrace\u003c/a\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejavax.management.openmbean.CompositeData[]\u003c/tt\u003e\n       \u003cp\u003e\n       Each element is a \u003ctt\u003eCompositeData\u003c/tt\u003e representing\n       StackTraceElement containing the following attributes:\n       \u003cblockquote\u003e\n       \u003ctable cellspacing\u003d1 cellpadding\u003d0 summary\u003d\"The attributes and their types the given CompositeData contains\"\u003e\n       \u003ctr\u003e\n         \u003cth align\u003dleft\u003eAttribute Name\u003c/th\u003e\n         \u003cth align\u003dleft\u003eType\u003c/th\u003e\n       \u003c/tr\u003e\n       \u003ctr\u003e\n         \u003ctd\u003eclassName\u003c/td\u003e\n         \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n       \u003c/tr\u003e\n       \u003ctr\u003e\n         \u003ctd\u003emethodName\u003c/td\u003e\n         \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n       \u003c/tr\u003e\n       \u003ctr\u003e\n         \u003ctd\u003efileName\u003c/td\u003e\n         \u003ctd\u003e\u003ctt\u003ejava.lang.String\u003c/tt\u003e\u003c/td\u003e\n       \u003c/tr\u003e\n       \u003ctr\u003e\n         \u003ctd\u003elineNumber\u003c/td\u003e\n         \u003ctd\u003e\u003ctt\u003ejava.lang.Integer\u003c/tt\u003e\u003c/td\u003e\n       \u003c/tr\u003e\n       \u003ctr\u003e\n         \u003ctd\u003enativeMethod\u003c/td\u003e\n         \u003ctd\u003e\u003ctt\u003ejava.lang.Boolean\u003c/tt\u003e\u003c/td\u003e\n       \u003c/tr\u003e\n       \u003c/table\u003e\n       \u003c/blockquote\u003e\n   \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003elockedMonitors\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejavax.management.openmbean.CompositeData[]\u003c/tt\u003e\n       whose element type is the mapped type for\n       {@link MonitorInfo} as specified in the\n       {@link MonitorInfo#from Monitor.from} method.\n       \u003cp\u003e\n       If \u003ctt\u003ecd\u003c/tt\u003e does not contain this attribute,\n       this attribute will be set to an empty array. \u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n   \u003ctd\u003elockedSynchronizers\u003c/td\u003e\n   \u003ctd\u003e\u003ctt\u003ejavax.management.openmbean.CompositeData[]\u003c/tt\u003e\n       whose element type is the mapped type for\n       {@link LockInfo} as specified in the {@link LockInfo#from} method.\n       \u003cp\u003e\n       If \u003ctt\u003ecd\u003c/tt\u003e does not contain this attribute,\n       this attribute will be set to an empty array. \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(javax.management.openmbean.CompositeData)","flatSignature":"(CompositeData)","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"cd","type":{"isPrimitive":false,"simpleName":"CompositeData","qualifiedName":"javax.management.openmbean.CompositeData","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLockedMonitors","comment":"Returns an array of {@link MonitorInfo} objects, each of which\n represents an object monitor currently locked by the thread\n associated with this \u003ctt\u003eThreadInfo\u003c/tt\u003e.\n If no locked monitor was requested for this thread info or\n no monitor is locked by the thread, this method\n will return a zero-length array.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MonitorInfo","qualifiedName":"java.lang.management.MonitorInfo","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"MonitorInfo","qualifiedName":"java.lang.management.MonitorInfo","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLockedSynchronizers","comment":"Returns an array of {@link LockInfo} objects, each of which\n represents an \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003eownable\n synchronizer\u003c/a\u003e currently locked by the thread associated with\n this \u003ctt\u003eThreadInfo\u003c/tt\u003e.  If no locked synchronizer was\n requested for this thread info or no synchronizer is locked by\n the thread, this method will return a zero-length array.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"LockInfo","qualifiedName":"java.lang.management.LockInfo","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"LockInfo","qualifiedName":"java.lang.management.LockInfo","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}