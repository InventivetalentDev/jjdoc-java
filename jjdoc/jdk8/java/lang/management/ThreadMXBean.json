{"name":"ThreadMXBean","comment":"The management interface for the thread system of\n the Java virtual machine.\n\n \u003cp\u003e A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an \u003ca href\u003d\"ManagementFactory.html#MXBean\"\u003eMXBean\u003c/a\u003e\n that can be obtained by calling\n the {@link ManagementFactory#getThreadMXBean} method or\n from the {@link ManagementFactory#getPlatformMBeanServer\n platform \u003ctt\u003eMBeanServer\u003c/tt\u003e} method.\n\n \u003cp\u003eThe \u003ctt\u003eObjectName\u003c/tt\u003e for uniquely identifying the MXBean for\n the thread system within an MBeanServer is:\n \u003cblockquote\u003e\n    {@link ManagementFactory#THREAD_MXBEAN_NAME\n           \u003ctt\u003ejava.lang:type\u003dThreading\u003c/tt\u003e}\n \u003c/blockquote\u003e\n\n It can be obtained by calling the\n {@link PlatformManagedObject#getObjectName} method.\n\n \u003ch3\u003eThread ID\u003c/h3\u003e\n Thread ID is a positive long value returned by calling the\n {@link java.lang.Thread#getId} method for a thread.\n The thread ID is unique during its lifetime.  When a thread\n is terminated, this thread ID may be reused.\n\n \u003cp\u003e Some methods in this interface take a thread ID or an array\n of thread IDs as the input parameter and return per-thread information.\n\n \u003ch3\u003eThread CPU time\u003c/h3\u003e\n A Java virtual machine implementation may support measuring\n the CPU time for the current thread, for any thread, or for no threads.\n\n \u003cp\u003e\n The {@link #isThreadCpuTimeSupported} method can be used to determine\n if a Java virtual machine supports measuring of the CPU time for any\n thread.  The {@link #isCurrentThreadCpuTimeSupported} method can\n be used to determine if a Java virtual machine supports measuring of\n the CPU time for the current  thread.\n A Java virtual machine implementation that supports CPU time measurement\n for any thread will also support that for the current thread.\n\n \u003cp\u003e The CPU time provided by this interface has nanosecond precision\n but not necessarily nanosecond accuracy.\n\n \u003cp\u003e\n A Java virtual machine may disable CPU time measurement\n by default.\n The {@link #isThreadCpuTimeEnabled} and {@link #setThreadCpuTimeEnabled}\n methods can be used to test if CPU time measurement is enabled\n and to enable/disable this support respectively.\n Enabling thread CPU measurement could be expensive in some\n Java virtual machine implementations.\n\n \u003ch3\u003eThread Contention Monitoring\u003c/h3\u003e\n Some Java virtual machines may support thread contention monitoring.\n When thread contention monitoring is enabled, the accumulated elapsed\n time that the thread has blocked for synchronization or waited for\n notification will be collected and returned in the\n \u003ca href\u003d\"ThreadInfo.html#SyncStats\"\u003e\u003ctt\u003eThreadInfo\u003c/tt\u003e\u003c/a\u003e object.\n \u003cp\u003e\n The {@link #isThreadContentionMonitoringSupported} method can be used to\n determine if a Java virtual machine supports thread contention monitoring.\n The thread contention monitoring is disabled by default.  The\n {@link #setThreadContentionMonitoringEnabled} method can be used to enable\n thread contention monitoring.\n\n \u003ch3\u003eSynchronization Information and Deadlock Detection\u003c/h3\u003e\n Some Java virtual machines may support monitoring of\n {@linkplain #isObjectMonitorUsageSupported object monitor usage} and\n {@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}.\n The {@link #getThreadInfo(long[], boolean, boolean)} and\n {@link #dumpAllThreads} methods can be used to obtain the thread stack trace\n and synchronization information including which\n {@linkplain LockInfo \u003ci\u003elock\u003c/i\u003e} a thread is blocked to\n acquire or waiting on and which locks the thread currently owns.\n \u003cp\u003e\n The \u003ctt\u003eThreadMXBean\u003c/tt\u003e interface provides the\n {@link #findMonitorDeadlockedThreads} and\n {@link #findDeadlockedThreads} methods to find deadlocks in\n the running application.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"ThreadMXBean","qualifiedName":"java.lang.management.ThreadMXBean","dimension":"","elementType":{},"package":"java.lang.management","interfaces":["java.lang.management.PlatformManagedObject"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getThreadCount","comment":"Returns the current number of live threads including both\n daemon and non-daemon threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPeakThreadCount","comment":"Returns the peak live thread count since the Java virtual machine\n started or peak was reset.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTotalStartedThreadCount","comment":"Returns the total number of threads created and also started\n since the Java virtual machine started.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDaemonThreadCount","comment":"Returns the current number of live daemon threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAllThreadIds","comment":"Returns all live thread IDs.\n Some threads included in the returned array\n may have been terminated when this method returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThreadInfo","comment":"Returns the thread info for a thread of the specified\n \u003ctt\u003eid\u003c/tt\u003e with no stack trace.\n This method is equivalent to calling:\n \u003cblockquote\u003e\n   {@link #getThreadInfo(long, int) getThreadInfo(id, 0);}\n \u003c/blockquote\u003e\n\n \u003cp\u003e\n This method returns a \u003ctt\u003eThreadInfo\u003c/tt\u003e object representing\n the thread information for the thread of the specified ID.\n The stack trace, locked monitors, and locked synchronizers\n in the returned \u003ctt\u003eThreadInfo\u003c/tt\u003e object will\n be empty.\n\n If a thread of the given ID is not alive or does not exist,\n this method will return \u003ctt\u003enull\u003c/tt\u003e.  A thread is alive if\n it has been started and has not yet died.\n\n \u003cp\u003e\n \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e\n The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is\n \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"id","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getThreadInfo","comment":"Returns the thread info for each thread\n whose ID is in the input array \u003ctt\u003eids\u003c/tt\u003e with no stack trace.\n This method is equivalent to calling:\n \u003cblockquote\u003e\u003cpre\u003e\n   {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0);\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e\n This method returns an array of the \u003ctt\u003eThreadInfo\u003c/tt\u003e objects.\n The stack trace, locked monitors, and locked synchronizers\n in each \u003ctt\u003eThreadInfo\u003c/tt\u003e object will be empty.\n\n If a thread of a given ID is not alive or does not exist,\n the corresponding element in the returned array will\n contain \u003ctt\u003enull\u003c/tt\u003e.  A thread is alive if\n it has been started and has not yet died.\n\n \u003cp\u003e\n \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e\n The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is\n \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[])","flatSignature":"(long[])","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"ids","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getThreadInfo","comment":"Returns a thread info for a thread of the specified \u003ctt\u003eid\u003c/tt\u003e,\n with stack trace of a specified number of stack trace elements.\n The \u003ctt\u003emaxDepth\u003c/tt\u003e parameter indicates the maximum number of\n {@link StackTraceElement} to be retrieved from the stack trace.\n If \u003ctt\u003emaxDepth \u003d\u003d Integer.MAX_VALUE\u003c/tt\u003e, the entire stack trace of\n the thread will be dumped.\n If \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e, no stack trace of the thread\n will be dumped.\n This method does not obtain the locked monitors and locked\n synchronizers of the thread.\n \u003cp\u003e\n When the Java virtual machine has no stack trace information\n about a thread or \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e,\n the stack trace in the\n \u003ctt\u003eThreadInfo\u003c/tt\u003e object will be an empty array of\n \u003ctt\u003eStackTraceElement\u003c/tt\u003e.\n\n \u003cp\u003e\n If a thread of the given ID is not alive or does not exist,\n this method will return \u003ctt\u003enull\u003c/tt\u003e.  A thread is alive if\n it has been started and has not yet died.\n\n \u003cp\u003e\n \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e\n The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is\n \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"id","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"maxDepth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getThreadInfo","comment":"Returns the thread info for each thread\n whose ID is in the input array \u003ctt\u003eids\u003c/tt\u003e,\n with stack trace of a specified number of stack trace elements.\n The \u003ctt\u003emaxDepth\u003c/tt\u003e parameter indicates the maximum number of\n {@link StackTraceElement} to be retrieved from the stack trace.\n If \u003ctt\u003emaxDepth \u003d\u003d Integer.MAX_VALUE\u003c/tt\u003e, the entire stack trace of\n the thread will be dumped.\n If \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e, no stack trace of the thread\n will be dumped.\n This method does not obtain the locked monitors and locked\n synchronizers of the threads.\n \u003cp\u003e\n When the Java virtual machine has no stack trace information\n about a thread or \u003ctt\u003emaxDepth \u003d\u003d 0\u003c/tt\u003e,\n the stack trace in the\n \u003ctt\u003eThreadInfo\u003c/tt\u003e object will be an empty array of\n \u003ctt\u003eStackTraceElement\u003c/tt\u003e.\n \u003cp\u003e\n This method returns an array of the \u003ctt\u003eThreadInfo\u003c/tt\u003e objects,\n each is the thread information about the thread with the same index\n as in the \u003ctt\u003eids\u003c/tt\u003e array.\n If a thread of the given ID is not alive or does not exist,\n \u003ctt\u003enull\u003c/tt\u003e will be set in the corresponding element\n in the returned array.  A thread is alive if\n it has been started and has not yet died.\n\n \u003cp\u003e\n \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e\n The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is\n \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], int)","flatSignature":"(long[], int)","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"ids","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"maxDepth","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isThreadContentionMonitoringSupported","comment":"Tests if the Java virtual machine supports thread contention monitoring.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isThreadContentionMonitoringEnabled","comment":"Tests if thread contention monitoring is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setThreadContentionMonitoringEnabled","comment":"Enables or disables thread contention monitoring.\n Thread contention monitoring is disabled by default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"enable","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getCurrentThreadCpuTime","comment":"Returns the total CPU time for the current thread in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n If the implementation distinguishes between user mode time and system\n mode time, the returned CPU time is the amount of time that\n the current thread has executed in user mode or system mode.\n\n \u003cp\u003e\n This is a convenient method for local management use and is\n equivalent to calling:\n \u003cblockquote\u003e\u003cpre\u003e\n   {@link #getThreadCpuTime getThreadCpuTime}(Thread.currentThread().getId());\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCurrentThreadUserTime","comment":"Returns the CPU time that the current thread has executed\n in user mode in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n\n \u003cp\u003e\n This is a convenient method for local management use and is\n equivalent to calling:\n \u003cblockquote\u003e\u003cpre\u003e\n   {@link #getThreadUserTime getThreadUserTime}(Thread.currentThread().getId());\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThreadCpuTime","comment":"Returns the total CPU time for a thread of the specified ID in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n If the implementation distinguishes between user mode time and system\n mode time, the returned CPU time is the amount of time that\n the thread has executed in user mode or system mode.\n\n \u003cp\u003e\n If the thread of the specified ID is not alive or does not exist,\n this method returns \u003ctt\u003e-1\u003c/tt\u003e. If CPU time measurement\n is disabled, this method returns \u003ctt\u003e-1\u003c/tt\u003e.\n A thread is alive if it has been started and has not yet died.\n \u003cp\u003e\n If CPU time measurement is enabled after the thread has started,\n the Java virtual machine implementation may choose any time up to\n and including the time that the capability is enabled as the point\n where CPU time measurement starts.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"id","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getThreadUserTime","comment":"Returns the CPU time that a thread of the specified ID\n has executed in user mode in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n\n \u003cp\u003e\n If the thread of the specified ID is not alive or does not exist,\n this method returns \u003ctt\u003e-1\u003c/tt\u003e. If CPU time measurement\n is disabled, this method returns \u003ctt\u003e-1\u003c/tt\u003e.\n A thread is alive if it has been started and has not yet died.\n \u003cp\u003e\n If CPU time measurement is enabled after the thread has started,\n the Java virtual machine implementation may choose any time up to\n and including the time that the capability is enabled as the point\n where CPU time measurement starts.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"id","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isThreadCpuTimeSupported","comment":"Tests if the Java virtual machine implementation supports CPU time\n measurement for any thread.\n A Java virtual machine implementation that supports CPU time\n measurement for any thread will also support CPU time\n measurement for the current thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isCurrentThreadCpuTimeSupported","comment":"Tests if the Java virtual machine supports CPU time\n measurement for the current thread.\n This method returns \u003ctt\u003etrue\u003c/tt\u003e if {@link #isThreadCpuTimeSupported}\n returns \u003ctt\u003etrue\u003c/tt\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isThreadCpuTimeEnabled","comment":"Tests if thread CPU time measurement is enabled.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setThreadCpuTimeEnabled","comment":"Enables or disables thread CPU time measurement.  The default\n is platform dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"enable","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findMonitorDeadlockedThreads","comment":"Finds cycles of threads that are in deadlock waiting to acquire\n object monitors. That is, threads that are blocked waiting to enter a\n synchronization block or waiting to reenter a synchronization block\n after an {@link Object#wait Object.wait} call,\n where each thread owns one monitor while\n trying to obtain another monitor already held by another thread\n in a cycle.\n \u003cp\u003e\n More formally, a thread is \u003cem\u003emonitor deadlocked\u003c/em\u003e if it is\n part of a cycle in the relation \"is waiting for an object monitor\n owned by\".  In the simplest case, thread A is blocked waiting\n for a monitor owned by thread B, and thread B is blocked waiting\n for a monitor owned by thread A.\n \u003cp\u003e\n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation.\n \u003cp\u003e\n This method finds deadlocks involving only object monitors.\n To find deadlocks involving both object monitors and\n \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003eownable synchronizers\u003c/a\u003e,\n the {@link #findDeadlockedThreads findDeadlockedThreads} method\n should be used.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"resetPeakThreadCount","comment":"Resets the peak thread count to the current number of\n live threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"findDeadlockedThreads","comment":"Finds cycles of threads that are in deadlock waiting to acquire\n object monitors or\n \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003eownable synchronizers\u003c/a\u003e.\n\n Threads are \u003cem\u003edeadlocked\u003c/em\u003e in a cycle waiting for a lock of\n these two types if each thread owns one lock while\n trying to acquire another lock already held\n by another thread in the cycle.\n \u003cp\u003e\n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isObjectMonitorUsageSupported","comment":"Tests if the Java virtual machine supports monitoring of\n object monitor usage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSynchronizerUsageSupported","comment":"Tests if the Java virtual machine supports monitoring of\n \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003e\n ownable synchronizer\u003c/a\u003e usage.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThreadInfo","comment":"Returns the thread info for each thread\n whose ID is in the input array \u003ctt\u003eids\u003c/tt\u003e, with stack trace\n and synchronization information.\n\n \u003cp\u003e\n This method obtains a snapshot of the thread information\n for each thread including:\n \u003cul\u003e\n    \u003cli\u003ethe entire stack trace,\u003c/li\u003e\n    \u003cli\u003ethe object monitors currently locked by the thread\n        if \u003ctt\u003elockedMonitors\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e, and\u003c/li\u003e\n    \u003cli\u003ethe \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003e\n        ownable synchronizers\u003c/a\u003e currently locked by the thread\n        if \u003ctt\u003elockedSynchronizers\u003c/tt\u003e is \u003ctt\u003etrue\u003c/tt\u003e.\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n This method returns an array of the \u003ctt\u003eThreadInfo\u003c/tt\u003e objects,\n each is the thread information about the thread with the same index\n as in the \u003ctt\u003eids\u003c/tt\u003e array.\n If a thread of the given ID is not alive or does not exist,\n \u003ctt\u003enull\u003c/tt\u003e will be set in the corresponding element\n in the returned array.  A thread is alive if\n it has been started and has not yet died.\n \u003cp\u003e\n If a thread does not lock any object monitor or \u003ctt\u003elockedMonitors\u003c/tt\u003e\n is \u003ctt\u003efalse\u003c/tt\u003e, the returned \u003ctt\u003eThreadInfo\u003c/tt\u003e object will have an\n empty \u003ctt\u003eMonitorInfo\u003c/tt\u003e array.  Similarly, if a thread does not\n lock any synchronizer or \u003ctt\u003elockedSynchronizers\u003c/tt\u003e is \u003ctt\u003efalse\u003c/tt\u003e,\n the returned \u003ctt\u003eThreadInfo\u003c/tt\u003e object\n will have an empty \u003ctt\u003eLockInfo\u003c/tt\u003e array.\n\n \u003cp\u003e\n When both \u003ctt\u003elockedMonitors\u003c/tt\u003e and \u003ctt\u003elockedSynchronizers\u003c/tt\u003e\n parameters are \u003ctt\u003efalse\u003c/tt\u003e, it is equivalent to calling:\n \u003cblockquote\u003e\u003cpre\u003e\n     {@link #getThreadInfo(long[], int)  getThreadInfo(ids, Integer.MAX_VALUE)}\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e\n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation.\n\n \u003cp\u003e\n \u003cb\u003eMBeanServer access\u003c/b\u003e:\u003cbr\u003e\n The mapped type of \u003ctt\u003eThreadInfo\u003c/tt\u003e is\n \u003ctt\u003eCompositeData\u003c/tt\u003e with attributes as specified in the\n {@link ThreadInfo#from ThreadInfo.from} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long[], boolean, boolean)","flatSignature":"(long[], boolean, boolean)","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"ids","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"[]","elementType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}},{"name":"lockedMonitors","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"lockedSynchronizers","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dumpAllThreads","comment":"Returns the thread info for all live threads with stack trace\n and synchronization information.\n Some threads included in the returned array\n may have been terminated when this method returns.\n\n \u003cp\u003e\n This method returns an array of {@link ThreadInfo} objects\n as specified in the {@link #getThreadInfo(long[], boolean, boolean)}\n method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, boolean)","flatSignature":"(boolean, boolean)","returnType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"ThreadInfo","qualifiedName":"java.lang.management.ThreadInfo","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"lockedMonitors","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"lockedSynchronizers","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}