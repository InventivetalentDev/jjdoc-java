{"name":"Integer","comment":"The {@code Integer} class wraps a value of the primitive type\n {@code int} in an object. An object of type {@code Integer}\n contains a single field whose type is {@code int}.\n\n \u003cp\u003eIn addition, this class provides several methods for converting\n an {@code int} to a {@code String} and a {@code String} to an\n {@code int}, as well as other constants and methods useful when\n dealing with an {@code int}.\n\n \u003cp\u003eImplementation note: The implementations of the \"bit twiddling\"\n methods (such as {@link #highestOneBit(int) highestOneBit} and\n {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are\n based on material from Henry S. Warren, Jr.\u0027s \u003ci\u003eHacker\u0027s\n Delight\u003c/i\u003e, (Addison Wesley, 2002).","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Number","interfaces":["java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Integer","comment":"Constructs a newly allocated {@code Integer} object that\n represents the specified {@code int} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Integer","comment":"Constructs a newly allocated {@code Integer} object that\n represents the {@code int} value indicated by the\n {@code String} parameter. The string is converted to an\n {@code int} value in exactly the manner used by the\n {@code parseInt} method for radix 10.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"MIN_VALUE","comment":"A constant holding the minimum value an {@code int} can\n have, -2\u003csup\u003e31\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-2147483648"},{"name":"MAX_VALUE","comment":"A constant holding the maximum value an {@code int} can\n have, 2\u003csup\u003e31\u003c/sup\u003e-1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2147483647"},{"name":"TYPE","comment":"The {@code Class} instance representing the primitive type\n {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isStatic":true},{"name":"SIZE","comment":"The number of bits used to represent an {@code int} value in two\u0027s\n complement binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32"},{"name":"BYTES","comment":"The number of bytes used to represent a {@code int} value in two\u0027s\n complement binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"}],"methods":[{"name":"toString","comment":"Returns a string representation of the first argument in the\n radix specified by the second argument.\n\n \u003cp\u003eIf the radix is smaller than {@code Character.MIN_RADIX}\n or larger than {@code Character.MAX_RADIX}, then the radix\n {@code 10} is used instead.\n\n \u003cp\u003eIf the first argument is negative, the first element of the\n result is the ASCII minus character {@code \u0027-\u0027}\n ({@code \u0027\\u002D\u0027}). If the first argument is not\n negative, no sign character appears in the result.\n\n \u003cp\u003eThe remaining characters of the result represent the magnitude\n of the first argument. If the magnitude is zero, it is\n represented by a single zero character {@code \u00270\u0027}\n ({@code \u0027\\u0030\u0027}); otherwise, the first character of\n the representation of the magnitude will not be the zero\n character.  The following ASCII characters are used as digits:\n\n \u003cblockquote\u003e\n   {@code 0123456789abcdefghijklmnopqrstuvwxyz}\n \u003c/blockquote\u003e\n\n These are {@code \u0027\\u0030\u0027} through\n {@code \u0027\\u0039\u0027} and {@code \u0027\\u0061\u0027} through\n {@code \u0027\\u007A\u0027}. If {@code radix} is\n \u003cvar\u003eN\u003c/var\u003e, then the first \u003cvar\u003eN\u003c/var\u003e of these characters\n are used as radix-\u003cvar\u003eN\u003c/var\u003e digits in the order shown. Thus,\n the digits for hexadecimal (radix 16) are\n {@code 0123456789abcdef}. If uppercase letters are\n desired, the {@link java.lang.String#toUpperCase()} method may\n be called on the result:\n\n \u003cblockquote\u003e\n  {@code Integer.toString(n, 16).toUpperCase()}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedString","comment":"Returns a string representation of the first argument as an\n unsigned integer value in the radix specified by the second\n argument.\n\n \u003cp\u003eIf the radix is smaller than {@code Character.MIN_RADIX}\n or larger than {@code Character.MAX_RADIX}, then the radix\n {@code 10} is used instead.\n\n \u003cp\u003eNote that since the first argument is treated as an unsigned\n value, no leading sign character is printed.\n\n \u003cp\u003eIf the magnitude is zero, it is represented by a single zero\n character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027}); otherwise,\n the first character of the representation of the magnitude will\n not be the zero character.\n\n \u003cp\u003eThe behavior of radixes and the characters used as digits\n are the same as {@link #toString(int, int) toString}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toHexString","comment":"Returns a string representation of the integer argument as an\n unsigned integer in base\u0026nbsp;16.\n\n \u003cp\u003eThe unsigned integer value is the argument plus 2\u003csup\u003e32\u003c/sup\u003e\n if the argument is negative; otherwise, it is equal to the\n argument.  This value is converted to a string of ASCII digits\n in hexadecimal (base\u0026nbsp;16) with no extra leading\n {@code 0}s.\n\n \u003cp\u003eThe value of the argument can be recovered from the returned\n string {@code s} by calling {@link\n Integer#parseUnsignedInt(String, int)\n Integer.parseUnsignedInt(s, 16)}.\n\n \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n single zero character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027});\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as hexadecimal digits:\n\n \u003cblockquote\u003e\n  {@code 0123456789abcdef}\n \u003c/blockquote\u003e\n\n These are the characters {@code \u0027\\u0030\u0027} through\n {@code \u0027\\u0039\u0027} and {@code \u0027\\u0061\u0027} through\n {@code \u0027\\u0066\u0027}. If uppercase letters are\n desired, the {@link java.lang.String#toUpperCase()} method may\n be called on the result:\n\n \u003cblockquote\u003e\n  {@code Integer.toHexString(n).toUpperCase()}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toOctalString","comment":"Returns a string representation of the integer argument as an\n unsigned integer in base\u0026nbsp;8.\n\n \u003cp\u003eThe unsigned integer value is the argument plus 2\u003csup\u003e32\u003c/sup\u003e\n if the argument is negative; otherwise, it is equal to the\n argument.  This value is converted to a string of ASCII digits\n in octal (base\u0026nbsp;8) with no extra leading {@code 0}s.\n\n \u003cp\u003eThe value of the argument can be recovered from the returned\n string {@code s} by calling {@link\n Integer#parseUnsignedInt(String, int)\n Integer.parseUnsignedInt(s, 8)}.\n\n \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n single zero character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027});\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as octal digits:\n\n \u003cblockquote\u003e\n {@code 01234567}\n \u003c/blockquote\u003e\n\n These are the characters {@code \u0027\\u0030\u0027} through\n {@code \u0027\\u0037\u0027}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toBinaryString","comment":"Returns a string representation of the integer argument as an\n unsigned integer in base\u0026nbsp;2.\n\n \u003cp\u003eThe unsigned integer value is the argument plus 2\u003csup\u003e32\u003c/sup\u003e\n if the argument is negative; otherwise it is equal to the\n argument.  This value is converted to a string of ASCII digits\n in binary (base\u0026nbsp;2) with no extra leading {@code 0}s.\n\n \u003cp\u003eThe value of the argument can be recovered from the returned\n string {@code s} by calling {@link\n Integer#parseUnsignedInt(String, int)\n Integer.parseUnsignedInt(s, 2)}.\n\n \u003cp\u003eIf the unsigned magnitude is zero, it is represented by a\n single zero character {@code \u00270\u0027} ({@code \u0027\\u0030\u0027});\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n characters {@code \u00270\u0027} ({@code \u0027\\u0030\u0027}) and {@code\n \u00271\u0027} ({@code \u0027\\u0031\u0027}) are used as binary digits.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing the\n specified integer. The argument is converted to signed decimal\n representation and returned as a string, exactly as if the\n argument and radix 10 were given as arguments to the {@link\n #toString(int, int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedString","comment":"Returns a string representation of the argument as an unsigned\n decimal value.\n\n The argument is converted to unsigned decimal representation\n and returned as a string exactly as if the argument and radix\n 10 were given as arguments to the {@link #toUnsignedString(int,\n int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseInt","comment":"Parses the string argument as a signed integer in the radix\n specified by the second argument. The characters in the string\n must all be digits of the specified radix (as determined by\n whether {@link java.lang.Character#digit(char, int)} returns a\n nonnegative value), except that the first character may be an\n ASCII minus sign {@code \u0027-\u0027} ({@code \u0027\\u002D\u0027}) to\n indicate a negative value or an ASCII plus sign {@code \u0027+\u0027}\n ({@code \u0027\\u002B\u0027}) to indicate a positive value. The\n resulting integer value is returned.\n\n \u003cp\u003eAn exception of type {@code NumberFormatException} is\n thrown if any of the following situations occurs:\n \u003cul\u003e\n \u003cli\u003eThe first argument is {@code null} or is a string of\n length zero.\n\n \u003cli\u003eThe radix is either smaller than\n {@link java.lang.Character#MIN_RADIX} or\n larger than {@link java.lang.Character#MAX_RADIX}.\n\n \u003cli\u003eAny character of the string is not a digit of the specified\n radix, except that the first character may be a minus sign\n {@code \u0027-\u0027} ({@code \u0027\\u002D\u0027}) or plus sign\n {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) provided that the\n string is longer than length 1.\n\n \u003cli\u003eThe value represented by the string is not a value of type\n {@code int}.\n \u003c/ul\u003e\n\n \u003cp\u003eExamples:\n \u003cblockquote\u003e\u003cpre\u003e\n parseInt(\"0\", 10) returns 0\n parseInt(\"473\", 10) returns 473\n parseInt(\"+42\", 10) returns 42\n parseInt(\"-0\", 10) returns 0\n parseInt(\"-FF\", 16) returns -255\n parseInt(\"1100110\", 2) returns 102\n parseInt(\"2147483647\", 10) returns 2147483647\n parseInt(\"-2147483648\", 10) returns -2147483648\n parseInt(\"2147483648\", 10) throws a NumberFormatException\n parseInt(\"99\", 8) throws a NumberFormatException\n parseInt(\"Kona\", 10) throws a NumberFormatException\n parseInt(\"Kona\", 27) returns 411787\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseInt","comment":"Parses the string argument as a signed decimal integer. The\n characters in the string must all be decimal digits, except\n that the first character may be an ASCII minus sign {@code \u0027-\u0027}\n ({@code \u0027\\u002D\u0027}) to indicate a negative value or an\n ASCII plus sign {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) to\n indicate a positive value. The resulting integer value is\n returned, exactly as if the argument and the radix 10 were\n given as arguments to the {@link #parseInt(java.lang.String,\n int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseUnsignedInt","comment":"Parses the string argument as an unsigned integer in the radix\n specified by the second argument.  An unsigned integer maps the\n values usually associated with negative numbers to positive\n numbers larger than {@code MAX_VALUE}.\n\n The characters in the string must all be digits of the\n specified radix (as determined by whether {@link\n java.lang.Character#digit(char, int)} returns a nonnegative\n value), except that the first character may be an ASCII plus\n sign {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}). The resulting\n integer value is returned.\n\n \u003cp\u003eAn exception of type {@code NumberFormatException} is\n thrown if any of the following situations occurs:\n \u003cul\u003e\n \u003cli\u003eThe first argument is {@code null} or is a string of\n length zero.\n\n \u003cli\u003eThe radix is either smaller than\n {@link java.lang.Character#MIN_RADIX} or\n larger than {@link java.lang.Character#MAX_RADIX}.\n\n \u003cli\u003eAny character of the string is not a digit of the specified\n radix, except that the first character may be a plus sign\n {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) provided that the\n string is longer than length 1.\n\n \u003cli\u003eThe value represented by the string is larger than the\n largest unsigned {@code int}, 2\u003csup\u003e32\u003c/sup\u003e-1.\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseUnsignedInt","comment":"Parses the string argument as an unsigned decimal integer. The\n characters in the string must all be decimal digits, except\n that the first character may be an an ASCII plus sign {@code\n \u0027+\u0027} ({@code \u0027\\u002B\u0027}). The resulting integer value\n is returned, exactly as if the argument and the radix 10 were\n given as arguments to the {@link\n #parseUnsignedInt(java.lang.String, int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns an {@code Integer} object holding the value\n extracted from the specified {@code String} when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed integer in the radix\n specified by the second argument, exactly as if the arguments\n were given to the {@link #parseInt(java.lang.String, int)}\n method. The result is an {@code Integer} object that\n represents the integer value specified by the string.\n\n \u003cp\u003eIn other words, this method returns an {@code Integer}\n object equal to the value of:\n\n \u003cblockquote\u003e\n  {@code new Integer(Integer.parseInt(s, radix))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns an {@code Integer} object holding the\n value of the specified {@code String}. The argument is\n interpreted as representing a signed decimal integer, exactly\n as if the argument were given to the {@link\n #parseInt(java.lang.String)} method. The result is an\n {@code Integer} object that represents the integer value\n specified by the string.\n\n \u003cp\u003eIn other words, this method returns an {@code Integer}\n object equal to the value of:\n\n \u003cblockquote\u003e\n  {@code new Integer(Integer.parseInt(s))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns an {@code Integer} instance representing the specified\n {@code int} value.  If a new {@code Integer} instance is not\n required, this method should generally be used in preference to\n the constructor {@link #Integer(int)}, as this method is likely\n to yield significantly better space and time performance by\n caching frequently requested values.\n\n This method will always cache values in the range -128 to 127,\n inclusive, and may cache other values outside of this range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"byteValue","comment":"Returns the value of this {@code Integer} as a {@code byte}\n after a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shortValue","comment":"Returns the value of this {@code Integer} as a {@code short}\n after a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValue","comment":"Returns the value of this {@code Integer} as an\n {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValue","comment":"Returns the value of this {@code Integer} as a {@code long}\n after a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"floatValue","comment":"Returns the value of this {@code Integer} as a {@code float}\n after a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"doubleValue","comment":"Returns the value of this {@code Integer} as a {@code double}\n after a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing this\n {@code Integer}\u0027s value. The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the integer value were given as an argument to the {@link\n java.lang.Integer#toString(int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this {@code Integer}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for a {@code int} value; compatible with\n {@code Integer.hashCode()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares this object to the specified object.  The result is\n {@code true} if and only if the argument is not\n {@code null} and is an {@code Integer} object that\n contains the same {@code int} value as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInteger","comment":"Determines the integer value of the system property with the\n specified name.\n\n \u003cp\u003eThe first argument is treated as the name of a system\n property.  System properties are accessible through the {@link\n java.lang.System#getProperty(java.lang.String)} method. The\n string value of this property is then interpreted as an integer\n value using the grammar supported by {@link Integer#decode decode} and\n an {@code Integer} object representing this value is returned.\n\n \u003cp\u003eIf there is no property with the specified name, if the\n specified name is empty or {@code null}, or if the property\n does not have the correct numeric format, then {@code null} is\n returned.\n\n \u003cp\u003eIn other words, this method returns an {@code Integer}\n object equal to the value of:\n\n \u003cblockquote\u003e\n  {@code getInteger(nm, null)}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInteger","comment":"Determines the integer value of the system property with the\n specified name.\n\n \u003cp\u003eThe first argument is treated as the name of a system\n property.  System properties are accessible through the {@link\n java.lang.System#getProperty(java.lang.String)} method. The\n string value of this property is then interpreted as an integer\n value using the grammar supported by {@link Integer#decode decode} and\n an {@code Integer} object representing this value is returned.\n\n \u003cp\u003eThe second argument is the default value. An {@code Integer} object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or\n {@code null}.\n\n \u003cp\u003eIn other words, this method returns an {@code Integer} object\n equal to the value of:\n\n \u003cblockquote\u003e\n  {@code getInteger(nm, new Integer(val))}\n \u003c/blockquote\u003e\n\n but in practice it may be implemented in a manner such as:\n\n \u003cblockquote\u003e\u003cpre\u003e\n Integer result \u003d getInteger(nm, null);\n return (result \u003d\u003d null) ? new Integer(val) : result;\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n to avoid the unnecessary allocation of an {@code Integer}\n object when the default value is not needed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"val","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInteger","comment":"Returns the integer value of the system property with the\n specified name.  The first argument is treated as the name of a\n system property.  System properties are accessible through the\n {@link java.lang.System#getProperty(java.lang.String)} method.\n The string value of this property is then interpreted as an\n integer value, as per the {@link Integer#decode decode} method,\n and an {@code Integer} object representing this value is\n returned; in summary:\n\n \u003cul\u003e\u003cli\u003eIf the property value begins with the two ASCII characters\n         {@code 0x} or the ASCII character {@code #}, not\n      followed by a minus sign, then the rest of it is parsed as a\n      hexadecimal integer exactly as by the method\n      {@link #valueOf(java.lang.String, int)} with radix 16.\n \u003cli\u003eIf the property value begins with the ASCII character\n     {@code 0} followed by another character, it is parsed as an\n     octal integer exactly as by the method\n     {@link #valueOf(java.lang.String, int)} with radix 8.\n \u003cli\u003eOtherwise, the property value is parsed as a decimal integer\n exactly as by the method {@link #valueOf(java.lang.String, int)}\n with radix 10.\n \u003c/ul\u003e\n\n \u003cp\u003eThe second argument is the default value. The default value is\n returned if there is no property of the specified name, if the\n property does not have the correct numeric format, or if the\n specified name is empty or {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Integer)","flatSignature":"(String, Integer)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"val","type":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decode","comment":"Decodes a {@code String} into an {@code Integer}.\n Accepts decimal, hexadecimal, and octal numbers given\n by the following grammar:\n\n \u003cblockquote\u003e\n \u003cdl\u003e\n \u003cdt\u003e\u003ci\u003eDecodableString:\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e DecimalNumeral\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0x} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0X} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code #} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0} \u003ci\u003eOctalDigits\u003c/i\u003e\n\n \u003cdt\u003e\u003ci\u003eSign:\u003c/i\u003e\n \u003cdd\u003e{@code -}\n \u003cdd\u003e{@code +}\n \u003c/dl\u003e\n \u003c/blockquote\u003e\n\n \u003ci\u003eDecimalNumeral\u003c/i\u003e, \u003ci\u003eHexDigits\u003c/i\u003e, and \u003ci\u003eOctalDigits\u003c/i\u003e\n are as defined in section 3.10.1 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e,\n except that underscores are not accepted between digits.\n\n \u003cp\u003eThe sequence of characters following an optional\n sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n \"{@code #}\", or leading zero) is parsed as by the {@code\n Integer.parseInt} method with the indicated radix (10, 16, or\n 8).  This sequence of characters must represent a positive\n value or a {@link NumberFormatException} will be thrown.  The\n result is negated if first character of the specified {@code\n String} is the minus sign.  No whitespace characters are\n permitted in the {@code String}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares two {@code Integer} objects numerically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Integer)","flatSignature":"(Integer)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherInteger","type":{"isPrimitive":false,"simpleName":"Integer","qualifiedName":"java.lang.Integer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compare","comment":"Compares two {@code int} values numerically.\n The value returned is identical to what would be returned by:\n \u003cpre\u003e\n    Integer.valueOf(x).compareTo(Integer.valueOf(y))\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareUnsigned","comment":"Compares two {@code int} values numerically treating the values\n as unsigned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedLong","comment":"Converts the argument to a {@code long} by an unsigned\n conversion.  In an unsigned conversion to a {@code long}, the\n high-order 32 bits of the {@code long} are zero and the\n low-order 32 bits are equal to the bits of the integer\n argument.\n\n Consequently, zero and positive {@code int} values are mapped\n to a numerically equal {@code long} value and negative {@code\n int} values are mapped to a {@code long} value equal to the\n input plus 2\u003csup\u003e32\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"divideUnsigned","comment":"Returns the unsigned quotient of dividing the first argument by\n the second where each argument and the result is interpreted as\n an unsigned value.\n\n \u003cp\u003eNote that in two\u0027s complement arithmetic, the three other\n basic arithmetic operations of add, subtract, and multiply are\n bit-wise identical if the two operands are regarded as both\n being signed or both being unsigned.  Therefore separate {@code\n addUnsigned}, etc. methods are not provided.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dividend","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"divisor","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"remainderUnsigned","comment":"Returns the unsigned remainder from dividing the first argument\n by the second where each argument and the result is interpreted\n as an unsigned value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"dividend","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"divisor","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"highestOneBit","comment":"Returns an {@code int} value with at most a single one-bit, in the\n position of the highest-order (\"leftmost\") one-bit in the specified\n {@code int} value.  Returns zero if the specified value has no\n one-bits in its two\u0027s complement binary representation, that is, if it\n is equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"lowestOneBit","comment":"Returns an {@code int} value with at most a single one-bit, in the\n position of the lowest-order (\"rightmost\") one-bit in the specified\n {@code int} value.  Returns zero if the specified value has no\n one-bits in its two\u0027s complement binary representation, that is, if it\n is equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"numberOfLeadingZeros","comment":"Returns the number of zero bits preceding the highest-order\n (\"leftmost\") one-bit in the two\u0027s complement binary representation\n of the specified {@code int} value.  Returns 32 if the\n specified value has no one-bits in its two\u0027s complement representation,\n in other words if it is equal to zero.\n\n \u003cp\u003eNote that this method is closely related to the logarithm base 2.\n For all positive {@code int} values x:\n \u003cul\u003e\n \u003cli\u003efloor(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d {@code 31 - numberOfLeadingZeros(x)}\n \u003cli\u003eceil(log\u003csub\u003e2\u003c/sub\u003e(x)) \u003d {@code 32 - numberOfLeadingZeros(x - 1)}\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"numberOfTrailingZeros","comment":"Returns the number of zero bits following the lowest-order (\"rightmost\")\n one-bit in the two\u0027s complement binary representation of the specified\n {@code int} value.  Returns 32 if the specified value has no\n one-bits in its two\u0027s complement representation, in other words if it is\n equal to zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bitCount","comment":"Returns the number of one-bits in the two\u0027s complement binary\n representation of the specified {@code int} value.  This function is\n sometimes referred to as the \u003ci\u003epopulation count\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"rotateLeft","comment":"Returns the value obtained by rotating the two\u0027s complement binary\n representation of the specified {@code int} value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n \u003cp\u003eNote that left rotation with a negative distance is equivalent to\n right rotation: {@code rotateLeft(val, -distance) \u003d\u003d rotateRight(val,\n distance)}.  Note also that rotation by any multiple of 32 is a\n no-op, so all but the last five bits of the rotation distance can be\n ignored, even if the distance is negative: {@code rotateLeft(val,\n distance) \u003d\u003d rotateLeft(val, distance \u0026 0x1F)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"distance","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"rotateRight","comment":"Returns the value obtained by rotating the two\u0027s complement binary\n representation of the specified {@code int} value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n \u003cp\u003eNote that right rotation with a negative distance is equivalent to\n left rotation: {@code rotateRight(val, -distance) \u003d\u003d rotateLeft(val,\n distance)}.  Note also that rotation by any multiple of 32 is a\n no-op, so all but the last five bits of the rotation distance can be\n ignored, even if the distance is negative: {@code rotateRight(val,\n distance) \u003d\u003d rotateRight(val, distance \u0026 0x1F)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"distance","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverse","comment":"Returns the value obtained by reversing the order of the bits in the\n two\u0027s complement binary representation of the specified {@code int}\n value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"signum","comment":"Returns the signum function of the specified {@code int} value.  (The\n return value is -1 if the specified value is negative; 0 if the\n specified value is zero; and 1 if the specified value is positive.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverseBytes","comment":"Returns the value obtained by reversing the order of the bytes in the\n two\u0027s complement representation of the specified {@code int} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sum","comment":"Adds two integers together as per the + operator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the greater of two {@code int} values\n as if by calling {@link Math#max(int, int) Math.max}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the smaller of two {@code int} values\n as if by calling {@link Math#min(int, int) Math.min}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}