{"name":"StackTraceElement","comment":"An element in a stack trace, as returned by {@link\n Throwable#getStackTrace()}.  Each element represents a single stack frame.\n All stack frames except for the one at the top of the stack represent\n a method invocation.  The frame at the top of the stack represents the\n execution point at which the stack trace was generated.  Typically,\n this is the point at which the throwable corresponding to the stack trace\n was created.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"StackTraceElement","qualifiedName":"java.lang.StackTraceElement","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"StackTraceElement","comment":"Creates a stack trace element representing the specified execution\n point.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String, int)","flatSignature":"(String, String, String, int)","parameters":[{"name":"declaringClass","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"methodName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"fileName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"lineNumber","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getFileName","comment":"Returns the name of the source file containing the execution point\n represented by this stack trace element.  Generally, this corresponds\n to the {@code SourceFile} attribute of the relevant {@code class}\n file (as per \u003ci\u003eThe Java Virtual Machine Specification\u003c/i\u003e, Section\n 4.7.7).  In some systems, the name may refer to some source code unit\n other than a file, such as an entry in source repository.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLineNumber","comment":"Returns the line number of the source line containing the execution\n point represented by this stack trace element.  Generally, this is\n derived from the {@code LineNumberTable} attribute of the relevant\n {@code class} file (as per \u003ci\u003eThe Java Virtual Machine\n Specification\u003c/i\u003e, Section 4.7.8).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getClassName","comment":"Returns the fully qualified name of the class containing the\n execution point represented by this stack trace element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMethodName","comment":"Returns the name of the method containing the execution point\n represented by this stack trace element.  If the execution point is\n contained in an instance or class initializer, this method will return\n the appropriate \u003ci\u003especial method name\u003c/i\u003e, {@code \u003cinit\u003e} or\n {@code \u003cclinit\u003e}, as per Section 3.9 of \u003ci\u003eThe Java Virtual\n Machine Specification\u003c/i\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isNativeMethod","comment":"Returns true if the method containing the execution point\n represented by this stack trace element is a native method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this stack trace element.  The\n format of this string depends on the implementation, but the following\n examples may be regarded as typical:\n \u003cul\u003e\n \u003cli\u003e\n   {@code \"MyClass.mash(MyClass.java:9)\"} - Here, {@code \"MyClass\"}\n   is the \u003ci\u003efully-qualified name\u003c/i\u003e of the class containing the\n   execution point represented by this stack trace element,\n   {@code \"mash\"} is the name of the method containing the execution\n   point, {@code \"MyClass.java\"} is the source file containing the\n   execution point, and {@code \"9\"} is the line number of the source\n   line containing the execution point.\n \u003cli\u003e\n   {@code \"MyClass.mash(MyClass.java)\"} - As above, but the line\n   number is unavailable.\n \u003cli\u003e\n   {@code \"MyClass.mash(Unknown Source)\"} - As above, but neither\n   the file name nor the line  number are available.\n \u003cli\u003e\n   {@code \"MyClass.mash(Native Method)\"} - As above, but neither\n   the file name nor the line  number are available, and the method\n   containing the execution point is known to be a native method.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Returns true if the specified object is another\n {@code StackTraceElement} instance representing the same execution\n point as this instance.  Two stack trace elements {@code a} and\n {@code b} are equal if and only if:\n \u003cpre\u003e{@code\n     equals(a.getFileName(), b.getFileName()) \u0026\u0026\n     a.getLineNumber() \u003d\u003d b.getLineNumber()) \u0026\u0026\n     equals(a.getClassName(), b.getClassName()) \u0026\u0026\n     equals(a.getMethodName(), b.getMethodName())\n }\u003c/pre\u003e\n where {@code equals} has the semantics of {@link\n java.util.Objects#equals(Object, Object) Objects.equals}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code value for this stack trace element.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}