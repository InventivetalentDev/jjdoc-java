{"name":"Boolean","comment":"The Boolean class wraps a value of the primitive type\n {@code boolean} in an object. An object of type\n {@code Boolean} contains a single field whose type is\n {@code boolean}.\n \u003cp\u003e\n In addition, this class provides many methods for\n converting a {@code boolean} to a {@code String} and a\n {@code String} to a {@code boolean}, as well as other\n constants and methods useful when dealing with a\n {@code boolean}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Boolean","qualifiedName":"java.lang.Boolean","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Boolean","comment":"Allocates a {@code Boolean} object representing the\n {@code value} argument.\n\n \u003cp\u003e\u003cb\u003eNote: It is rarely appropriate to use this constructor.\n Unless a \u003ci\u003enew\u003c/i\u003e instance is required, the static factory\n {@link #valueOf(boolean)} is generally a better choice. It is\n likely to yield significantly better space and time performance.\u003c/b\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Boolean","comment":"Allocates a {@code Boolean} object representing the value\n {@code true} if the string argument is not {@code null}\n and is equal, ignoring case, to the string {@code \"true\"}.\n Otherwise, allocate a {@code Boolean} object representing the\n value {@code false}. Examples:\u003cp\u003e\n {@code new Boolean(\"True\")} produces a {@code Boolean} object\n that represents {@code true}.\u003cbr\u003e\n {@code new Boolean(\"yes\")} produces a {@code Boolean} object\n that represents {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"TRUE","comment":"The {@code Boolean} object corresponding to the primitive\n value {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Boolean","qualifiedName":"java.lang.Boolean","dimension":"","elementType":{}},"isStatic":true},{"name":"FALSE","comment":"The {@code Boolean} object corresponding to the primitive\n value {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Boolean","qualifiedName":"java.lang.Boolean","dimension":"","elementType":{}},"isStatic":true},{"name":"TYPE","comment":"The Class object representing the primitive type boolean.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"parseBoolean","comment":"Parses the string argument as a boolean.  The {@code boolean}\n returned represents the value {@code true} if the string argument\n is not {@code null} and is equal, ignoring case, to the string\n {@code \"true\"}. \u003cp\u003e\n Example: {@code Boolean.parseBoolean(\"True\")} returns {@code true}.\u003cbr\u003e\n Example: {@code Boolean.parseBoolean(\"yes\")} returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"booleanValue","comment":"Returns the value of this {@code Boolean} object as a boolean\n primitive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Boolean} instance representing the specified\n {@code boolean} value.  If the specified {@code boolean} value\n is {@code true}, this method returns {@code Boolean.TRUE};\n if it is {@code false}, this method returns {@code Boolean.FALSE}.\n If a new {@code Boolean} instance is not required, this method\n should generally be used in preference to the constructor\n {@link #Boolean(boolean)}, as this method is likely to yield\n significantly better space and time performance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"Boolean","qualifiedName":"java.lang.Boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Boolean} with a value represented by the\n specified string.  The {@code Boolean} returned represents a\n true value if the string argument is not {@code null}\n and is equal, ignoring case, to the string {@code \"true\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Boolean","qualifiedName":"java.lang.Boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing the specified\n boolean.  If the specified boolean is {@code true}, then\n the string {@code \"true\"} will be returned, otherwise the\n string {@code \"false\"} will be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing this Boolean\u0027s\n value.  If this object represents the value {@code true},\n a string equal to {@code \"true\"} is returned. Otherwise, a\n string equal to {@code \"false\"} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this {@code Boolean} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for a {@code boolean} value; compatible with\n {@code Boolean.hashCode()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Returns {@code true} if and only if the argument is not\n {@code null} and is a {@code Boolean} object that\n represents the same {@code boolean} value as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBoolean","comment":"Returns {@code true} if and only if the system property\n named by the argument exists and is equal to the string\n {@code \"true\"}. (Beginning with version 1.0.2 of the\n Java\u003csmall\u003e\u003csup\u003eTM\u003c/sup\u003e\u003c/small\u003e platform, the test of\n this string is case insensitive.) A system property is accessible\n through {@code getProperty}, a method defined by the\n {@code System} class.\n \u003cp\u003e\n If there is no property with the specified name, or if the specified\n name is empty or null, then {@code false} is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares this {@code Boolean} instance with another.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Boolean)","flatSignature":"(Boolean)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"b","type":{"isPrimitive":false,"simpleName":"Boolean","qualifiedName":"java.lang.Boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compare","comment":"Compares two {@code boolean} values.\n The value returned is identical to what would be returned by:\n \u003cpre\u003e\n    Boolean.valueOf(x).compareTo(Boolean.valueOf(y))\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, boolean)","flatSignature":"(boolean, boolean)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"logicalAnd","comment":"Returns the result of applying the logical AND operator to the\n specified {@code boolean} operands.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, boolean)","flatSignature":"(boolean, boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"logicalOr","comment":"Returns the result of applying the logical OR operator to the\n specified {@code boolean} operands.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, boolean)","flatSignature":"(boolean, boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"logicalXor","comment":"Returns the result of applying the logical XOR operator to the\n specified {@code boolean} operands.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean, boolean)","flatSignature":"(boolean, boolean)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}