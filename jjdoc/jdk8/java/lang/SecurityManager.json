{"name":"SecurityManager","comment":"The security manager is a class that allows\n applications to implement a security policy. It allows an\n application to determine, before performing a possibly unsafe or\n sensitive operation, what the operation is and whether\n it is being attempted in a security context that allows the\n operation to be performed. The\n application can allow or disallow the operation.\n \u003cp\u003e\n The \u003ccode\u003eSecurityManager\u003c/code\u003e class contains many methods with\n names that begin with the word \u003ccode\u003echeck\u003c/code\u003e. These methods\n are called by various methods in the Java libraries before those\n methods perform certain potentially sensitive operations. The\n invocation of such a \u003ccode\u003echeck\u003c/code\u003e method typically looks like this:\n \u003cblockquote\u003e\u003cpre\u003e\n     SecurityManager security \u003d System.getSecurityManager();\n     if (security !\u003d null) {\n         security.check\u003ci\u003eXXX\u003c/i\u003e(argument, \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\u0026nbsp;);\n     }\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The security manager is thereby given an opportunity to prevent\n completion of the operation by throwing an exception. A security\n manager routine simply returns if the operation is permitted, but\n throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the operation is not\n permitted. The only exception to this convention is\n \u003ccode\u003echeckTopLevelWindow\u003c/code\u003e, which returns a\n \u003ccode\u003eboolean\u003c/code\u003e value.\n \u003cp\u003e\n The current security manager is set by the\n \u003ccode\u003esetSecurityManager\u003c/code\u003e method in class\n \u003ccode\u003eSystem\u003c/code\u003e. The current security manager is obtained\n by the \u003ccode\u003egetSecurityManager\u003c/code\u003e method.\n \u003cp\u003e\n The special method\n {@link SecurityManager#checkPermission(java.security.Permission)}\n determines whether an access request indicated by a specified\n permission should be granted or denied. The\n default implementation calls\n\n \u003cpre\u003e\n   AccessController.checkPermission(perm);\n \u003c/pre\u003e\n\n \u003cp\u003e\n If a requested access is allowed,\n \u003ccode\u003echeckPermission\u003c/code\u003e returns quietly. If denied, a\n \u003ccode\u003eSecurityException\u003c/code\u003e is thrown.\n \u003cp\u003e\n As of Java 2 SDK v1.2, the default implementation of each of the other\n \u003ccode\u003echeck\u003c/code\u003e methods in \u003ccode\u003eSecurityManager\u003c/code\u003e is to\n call the \u003ccode\u003eSecurityManager checkPermission\u003c/code\u003e method\n to determine if the calling thread has permission to perform the requested\n operation.\n \u003cp\u003e\n Note that the \u003ccode\u003echeckPermission\u003c/code\u003e method with\n just a single permission argument always performs security checks\n within the context of the currently executing thread.\n Sometimes a security check that should be made within a given context\n will actually need to be done from within a\n \u003ci\u003edifferent\u003c/i\u003e context (for example, from within a worker thread).\n The {@link SecurityManager#getSecurityContext getSecurityContext} method\n and the {@link SecurityManager#checkPermission(java.security.Permission,\n java.lang.Object) checkPermission}\n method that includes a context argument are provided\n for this situation. The\n \u003ccode\u003egetSecurityContext\u003c/code\u003e method returns a \"snapshot\"\n of the current calling context. (The default implementation\n returns an AccessControlContext object.) A sample call is\n the following:\n\n \u003cpre\u003e\n   Object context \u003d null;\n   SecurityManager sm \u003d System.getSecurityManager();\n   if (sm !\u003d null) context \u003d sm.getSecurityContext();\n \u003c/pre\u003e\n\n \u003cp\u003e\n The \u003ccode\u003echeckPermission\u003c/code\u003e method\n that takes a context object in addition to a permission\n makes access decisions based on that context,\n rather than on that of the current execution thread.\n Code within a different context can thus call that method,\n passing the permission and the\n previously-saved context object. A sample call, using the\n SecurityManager \u003ccode\u003esm\u003c/code\u003e obtained as in the previous example,\n is the following:\n\n \u003cpre\u003e\n   if (sm !\u003d null) sm.checkPermission(permission, context);\n \u003c/pre\u003e\n\n \u003cp\u003ePermissions fall into these categories: File, Socket, Net,\n Security, Runtime, Property, AWT, Reflect, and Serializable.\n The classes managing these various\n permission categories are \u003ccode\u003ejava.io.FilePermission\u003c/code\u003e,\n \u003ccode\u003ejava.net.SocketPermission\u003c/code\u003e,\n \u003ccode\u003ejava.net.NetPermission\u003c/code\u003e,\n \u003ccode\u003ejava.security.SecurityPermission\u003c/code\u003e,\n \u003ccode\u003ejava.lang.RuntimePermission\u003c/code\u003e,\n \u003ccode\u003ejava.util.PropertyPermission\u003c/code\u003e,\n \u003ccode\u003ejava.awt.AWTPermission\u003c/code\u003e,\n \u003ccode\u003ejava.lang.reflect.ReflectPermission\u003c/code\u003e, and\n \u003ccode\u003ejava.io.SerializablePermission\u003c/code\u003e.\n\n \u003cp\u003eAll but the first two (FilePermission and SocketPermission) are\n subclasses of \u003ccode\u003ejava.security.BasicPermission\u003c/code\u003e, which itself\n is an abstract subclass of the\n top-level class for permissions, which is\n \u003ccode\u003ejava.security.Permission\u003c/code\u003e. BasicPermission defines the\n functionality needed for all permissions that contain a name\n that follows the hierarchical property naming convention\n (for example, \"exitVM\", \"setFactory\", \"queuePrintJob\", etc).\n An asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"a.*\" or \"*\" is valid,\n \"*a\" or \"a*b\" is not valid.\n\n \u003cp\u003eFilePermission and SocketPermission are subclasses of the\n top-level class for permissions\n (\u003ccode\u003ejava.security.Permission\u003c/code\u003e). Classes like these\n that have a more complicated name syntax than that used by\n BasicPermission subclass directly from Permission rather than from\n BasicPermission. For example,\n for a \u003ccode\u003ejava.io.FilePermission\u003c/code\u003e object, the permission name is\n the path name of a file (or directory).\n\n \u003cp\u003eSome of the permission classes have an \"actions\" list that tells\n the actions that are permitted for the object.  For example,\n for a \u003ccode\u003ejava.io.FilePermission\u003c/code\u003e object, the actions list\n (such as \"read, write\") specifies which actions are granted for the\n specified file (or for files in the specified directory).\n\n \u003cp\u003eOther permission classes are for \"named\" permissions -\n ones that contain a name but no actions list; you either have the\n named permission or you don\u0027t.\n\n \u003cp\u003eNote: There is also a \u003ccode\u003ejava.security.AllPermission\u003c/code\u003e\n permission that implies all permissions. It exists to simplify the work\n of system administrators who might need to perform multiple\n tasks that require all (or numerous) permissions.\n \u003cp\u003e\n See \u003ca href \u003d\"../../../technotes/guides/security/permissions.html\"\u003e\n Permissions in the JDK\u003c/a\u003e for permission-related information.\n This document includes, for example, a table listing the various SecurityManager\n \u003ccode\u003echeck\u003c/code\u003e methods and the permission(s) the default\n implementation of each such method requires.\n It also contains a table of all the version 1.2 methods\n that require permissions, and for each such method tells\n which permission it requires.\n \u003cp\u003e\n For more information about \u003ccode\u003eSecurityManager\u003c/code\u003e changes made in\n the JDK and advice regarding porting of 1.1-style security managers,\n see the \u003ca href\u003d\"../../../technotes/guides/security/index.html\"\u003esecurity documentation\u003c/a\u003e.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SecurityManager","qualifiedName":"java.lang.SecurityManager","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SecurityManager","comment":"Constructs a new \u003ccode\u003eSecurityManager\u003c/code\u003e.\n\n \u003cp\u003e If there is a security manager already installed, this method first\n calls the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method\n with the \u003ccode\u003eRuntimePermission(\"createSecurityManager\")\u003c/code\u003e\n permission to ensure the calling thread has permission to create a new\n security manager.\n This may result in throwing a \u003ccode\u003eSecurityException\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"getInCheck","comment":"Tests if there is a security check in progress.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSecurityContext","comment":"Creates an object that encapsulates the current execution\n environment. The result of this method is used, for example, by the\n three-argument \u003ccode\u003echeckConnect\u003c/code\u003e method and by the\n two-argument \u003ccode\u003echeckRead\u003c/code\u003e method.\n These methods are needed because a trusted method may be called\n on to read a file or open a socket on behalf of another method.\n The trusted method needs to determine if the other (possibly\n untrusted) method would be allowed to perform the operation on its\n own.\n \u003cp\u003e The default implementation of this method is to return\n an \u003ccode\u003eAccessControlContext\u003c/code\u003e object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkPermission","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the requested\n access, specified by the given permission, is not permitted based\n on the security policy currently in effect.\n \u003cp\u003e\n This method calls \u003ccode\u003eAccessController.checkPermission\u003c/code\u003e\n with the given permission.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission)","flatSignature":"(Permission)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"perm","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkPermission","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n specified security context is denied access to the resource\n specified by the given permission.\n The context must be a security\n context returned by a previous call to\n \u003ccode\u003egetSecurityContext\u003c/code\u003e and the access control\n decision is based upon the configured security policy for\n that security context.\n \u003cp\u003e\n If \u003ccode\u003econtext\u003c/code\u003e is an instance of\n \u003ccode\u003eAccessControlContext\u003c/code\u003e then the\n \u003ccode\u003eAccessControlContext.checkPermission\u003c/code\u003e method is\n invoked with the specified permission.\n \u003cp\u003e\n If \u003ccode\u003econtext\u003c/code\u003e is not an instance of\n \u003ccode\u003eAccessControlContext\u003c/code\u003e then a\n \u003ccode\u003eSecurityException\u003c/code\u003e is thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.security.Permission, java.lang.Object)","flatSignature":"(Permission, Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"perm","type":{"isPrimitive":false,"simpleName":"Permission","qualifiedName":"java.security.Permission","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkCreateClassLoader","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to create a new class loader.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"createClassLoader\")\u003c/code\u003e\n permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkCreateClassLoader\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to modify the thread argument.\n \u003cp\u003e\n This method is invoked for the current security manager by the\n \u003ccode\u003estop\u003c/code\u003e, \u003ccode\u003esuspend\u003c/code\u003e, \u003ccode\u003eresume\u003c/code\u003e,\n \u003ccode\u003esetPriority\u003c/code\u003e, \u003ccode\u003esetName\u003c/code\u003e, and\n \u003ccode\u003esetDaemon\u003c/code\u003e methods of class \u003ccode\u003eThread\u003c/code\u003e.\n \u003cp\u003e\n If the thread argument is a system thread (belongs to\n the thread group with a \u003ccode\u003enull\u003c/code\u003e parent) then\n this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"modifyThread\")\u003c/code\u003e permission.\n If the thread argument is \u003ci\u003enot\u003c/i\u003e a system thread,\n this method just returns silently.\n \u003cp\u003e\n Applications that want a stricter policy should override this\n method. If this method is overridden, the method that overrides\n it should additionally check to see if the calling thread has the\n \u003ccode\u003eRuntimePermission(\"modifyThread\")\u003c/code\u003e permission, and\n if so, return silently. This is to ensure that code granted\n that permission (such as the JDK itself) is allowed to\n manipulate any thread.\n \u003cp\u003e\n If this method is overridden, then\n \u003ccode\u003esuper.checkAccess\u003c/code\u003e should\n be called by the first statement in the overridden method, or the\n equivalent security check should be placed in the overridden method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread)","flatSignature":"(Thread)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"t","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to modify the thread group argument.\n \u003cp\u003e\n This method is invoked for the current security manager when a\n new child thread or child thread group is created, and by the\n \u003ccode\u003esetDaemon\u003c/code\u003e, \u003ccode\u003esetMaxPriority\u003c/code\u003e,\n \u003ccode\u003estop\u003c/code\u003e, \u003ccode\u003esuspend\u003c/code\u003e, \u003ccode\u003eresume\u003c/code\u003e, and\n \u003ccode\u003edestroy\u003c/code\u003e methods of class \u003ccode\u003eThreadGroup\u003c/code\u003e.\n \u003cp\u003e\n If the thread group argument is the system thread group (\n has a \u003ccode\u003enull\u003c/code\u003e parent) then\n this method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"modifyThreadGroup\")\u003c/code\u003e permission.\n If the thread group argument is \u003ci\u003enot\u003c/i\u003e the system thread group,\n this method just returns silently.\n \u003cp\u003e\n Applications that want a stricter policy should override this\n method. If this method is overridden, the method that overrides\n it should additionally check to see if the calling thread has the\n \u003ccode\u003eRuntimePermission(\"modifyThreadGroup\")\u003c/code\u003e permission, and\n if so, return silently. This is to ensure that code granted\n that permission (such as the JDK itself) is allowed to\n manipulate any thread.\n \u003cp\u003e\n If this method is overridden, then\n \u003ccode\u003esuper.checkAccess\u003c/code\u003e should\n be called by the first statement in the overridden method, or the\n equivalent security check should be placed in the overridden method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.ThreadGroup)","flatSignature":"(ThreadGroup)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"g","type":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkExit","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to cause the Java Virtual Machine to\n halt with the specified status code.\n \u003cp\u003e\n This method is invoked for the current security manager by the\n \u003ccode\u003eexit\u003c/code\u003e method of class \u003ccode\u003eRuntime\u003c/code\u003e. A status\n of \u003ccode\u003e0\u003c/code\u003e indicates success; other values indicate various\n errors.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"exitVM.\"+status)\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkExit\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"status","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkExec","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to create a subprocess.\n \u003cp\u003e\n This method is invoked for the current security manager by the\n \u003ccode\u003eexec\u003c/code\u003e methods of class \u003ccode\u003eRuntime\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eFilePermission(cmd,\"execute\")\u003c/code\u003e permission\n if cmd is an absolute path, otherwise it calls\n \u003ccode\u003echeckPermission\u003c/code\u003e with\n \u003ccode\u003eFilePermission(\"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\",\"execute\")\u003c/code\u003e.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkExec\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cmd","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkLink","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to dynamic link the library code\n specified by the string argument file. The argument is either a\n simple library name or a complete filename.\n \u003cp\u003e\n This method is invoked for the current security manager by\n methods \u003ccode\u003eload\u003c/code\u003e and \u003ccode\u003eloadLibrary\u003c/code\u003e of class\n \u003ccode\u003eRuntime\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"loadLibrary.\"+lib)\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkLink\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"lib","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkRead","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to read from the specified file\n descriptor.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"readFileDescriptor\")\u003c/code\u003e\n permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkRead\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.FileDescriptor)","flatSignature":"(FileDescriptor)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fd","type":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkRead","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to read the file specified by the\n string argument.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eFilePermission(file,\"read\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkRead\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkRead","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n specified security context is not allowed to read the file\n specified by the string argument. The context must be a security\n context returned by a previous call to\n \u003ccode\u003egetSecurityContext\u003c/code\u003e.\n \u003cp\u003e If \u003ccode\u003econtext\u003c/code\u003e is an instance of\n \u003ccode\u003eAccessControlContext\u003c/code\u003e then the\n \u003ccode\u003eAccessControlContext.checkPermission\u003c/code\u003e method will\n be invoked with the \u003ccode\u003eFilePermission(file,\"read\")\u003c/code\u003e permission.\n \u003cp\u003e If \u003ccode\u003econtext\u003c/code\u003e is not an instance of\n \u003ccode\u003eAccessControlContext\u003c/code\u003e then a\n \u003ccode\u003eSecurityException\u003c/code\u003e is thrown.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkRead\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Object)","flatSignature":"(String, Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkWrite","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to write to the specified file\n descriptor.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"writeFileDescriptor\")\u003c/code\u003e\n permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkWrite\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.FileDescriptor)","flatSignature":"(FileDescriptor)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"fd","type":{"isPrimitive":false,"simpleName":"FileDescriptor","qualifiedName":"java.io.FileDescriptor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkWrite","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to write to the file specified by\n the string argument.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eFilePermission(file,\"write\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkWrite\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkDelete","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to delete the specified file.\n \u003cp\u003e\n This method is invoked for the current security manager by the\n \u003ccode\u003edelete\u003c/code\u003e method of class \u003ccode\u003eFile\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eFilePermission(file,\"delete\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkDelete\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkConnect","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to open a socket connection to the\n specified host and port number.\n \u003cp\u003e\n A port number of \u003ccode\u003e-1\u003c/code\u003e indicates that the calling\n method is attempting to determine the IP address of the specified\n host name.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eSocketPermission(host+\":\"+port,\"connect\")\u003c/code\u003e permission if\n the port is not equal to -1. If the port is equal to -1, then\n it calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eSocketPermission(host,\"resolve\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkConnect\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkConnect","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n specified security context is not allowed to open a socket\n connection to the specified host and port number.\n \u003cp\u003e\n A port number of \u003ccode\u003e-1\u003c/code\u003e indicates that the calling\n method is attempting to determine the IP address of the specified\n host name.\n \u003cp\u003e If \u003ccode\u003econtext\u003c/code\u003e is not an instance of\n \u003ccode\u003eAccessControlContext\u003c/code\u003e then a\n \u003ccode\u003eSecurityException\u003c/code\u003e is thrown.\n \u003cp\u003e\n Otherwise, the port number is checked. If it is not equal\n to -1, the \u003ccode\u003econtext\u003c/code\u003e\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e\n method is called with a\n \u003ccode\u003eSocketPermission(host+\":\"+port,\"connect\")\u003c/code\u003e permission.\n If the port is equal to -1, then\n the \u003ccode\u003econtext\u003c/code\u003e\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method\n is called with a\n \u003ccode\u003eSocketPermission(host,\"resolve\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkConnect\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int, java.lang.Object)","flatSignature":"(String, int, Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"context","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkListen","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to wait for a connection request on\n the specified local port number.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eSocketPermission(\"localhost:\"+port,\"listen\")\u003c/code\u003e.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkListen\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkAccept","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not permitted to accept a socket connection from\n the specified host and port number.\n \u003cp\u003e\n This method is invoked for the current security manager by the\n \u003ccode\u003eaccept\u003c/code\u003e method of class \u003ccode\u003eServerSocket\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eSocketPermission(host+\":\"+port,\"accept\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkAccept\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"host","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"port","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkMulticast","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to use\n (join/leave/send/receive) IP multicast.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003ejava.net.SocketPermission(maddr.getHostAddress(),\n \"accept,connect\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkMulticast\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress)","flatSignature":"(InetAddress)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"maddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkMulticast","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to use\n (join/leave/send/receive) IP multicast.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003ejava.net.SocketPermission(maddr.getHostAddress(),\n \"accept,connect\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkMulticast\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.net.InetAddress, byte)","flatSignature":"(InetAddress, byte)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"maddr","type":{"isPrimitive":false,"simpleName":"InetAddress","qualifiedName":"java.net.InetAddress","dimension":"","elementType":{}}},{"name":"ttl","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkPropertiesAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to access or modify the system\n properties.\n \u003cp\u003e\n This method is used by the \u003ccode\u003egetProperties\u003c/code\u003e and\n \u003ccode\u003esetProperties\u003c/code\u003e methods of class \u003ccode\u003eSystem\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003ePropertyPermission(\"*\", \"read,write\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkPropertiesAccess\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkPropertyAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to access the system property with\n the specified \u003ccode\u003ekey\u003c/code\u003e name.\n \u003cp\u003e\n This method is used by the \u003ccode\u003egetProperty\u003c/code\u003e method of\n class \u003ccode\u003eSystem\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003ePropertyPermission(key, \"read\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkPropertyAccess\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkTopLevelWindow","comment":"Returns \u003ccode\u003efalse\u003c/code\u003e if the calling\n thread is not trusted to bring up the top-level window indicated\n by the \u003ccode\u003ewindow\u003c/code\u003e argument. In this case, the caller can\n still decide to show the window, but the window should include\n some sort of visual warning. If the method returns\n \u003ccode\u003etrue\u003c/code\u003e, then the window can be shown without any\n special restrictions.\n \u003cp\u003e\n See class \u003ccode\u003eWindow\u003c/code\u003e for more information on trusted and\n untrusted windows.\n \u003cp\u003e\n This method calls\n \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eAWTPermission(\"showWindowWithoutWarningBanner\")\u003c/code\u003e permission,\n and returns \u003ccode\u003etrue\u003c/code\u003e if a SecurityException is not thrown,\n otherwise it returns \u003ccode\u003efalse\u003c/code\u003e.\n In the case of subset Profiles of Java SE that do not include the\n {@code java.awt} package, {@code checkPermission} is instead called\n to check the permission {@code java.security.AllPermission}.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkTopLevelWindow\u003c/code\u003e\n at the point the overridden method would normally return\n \u003ccode\u003efalse\u003c/code\u003e, and the value of\n \u003ccode\u003esuper.checkTopLevelWindow\u003c/code\u003e should\n be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"window","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkPrintJobAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to initiate a print job request.\n \u003cp\u003e\n This method calls\n \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"queuePrintJob\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkPrintJobAccess\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkSystemClipboardAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to access the system clipboard.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eAWTPermission(\"accessClipboard\")\u003c/code\u003e\n permission.\n In the case of subset Profiles of Java SE that do not include the\n {@code java.awt} package, {@code checkPermission} is instead called\n to check the permission {@code java.security.AllPermission}.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkSystemClipboardAccess\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkAwtEventQueueAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to access the AWT event queue.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eAWTPermission(\"accessEventQueue\")\u003c/code\u003e permission.\n In the case of subset Profiles of Java SE that do not include the\n {@code java.awt} package, {@code checkPermission} is instead called\n to check the permission {@code java.security.AllPermission}.\n\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkAwtEventQueueAccess\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkPackageAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to access the package specified by\n the argument.\n \u003cp\u003e\n This method is used by the \u003ccode\u003eloadClass\u003c/code\u003e method of class\n loaders.\n \u003cp\u003e\n This method first gets a list of\n restricted packages by obtaining a comma-separated list from\n a call to\n \u003ccode\u003ejava.security.Security.getProperty(\"package.access\")\u003c/code\u003e,\n and checks to see if \u003ccode\u003epkg\u003c/code\u003e starts with or equals\n any of the restricted packages. If it does, then\n \u003ccode\u003echeckPermission\u003c/code\u003e gets called with the\n \u003ccode\u003eRuntimePermission(\"accessClassInPackage.\"+pkg)\u003c/code\u003e\n permission.\n \u003cp\u003e\n If this method is overridden, then\n \u003ccode\u003esuper.checkPackageAccess\u003c/code\u003e should be called\n as the first line in the overridden method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"pkg","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkPackageDefinition","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to define classes in the package\n specified by the argument.\n \u003cp\u003e\n This method is used by the \u003ccode\u003eloadClass\u003c/code\u003e method of some\n class loaders.\n \u003cp\u003e\n This method first gets a list of restricted packages by\n obtaining a comma-separated list from a call to\n \u003ccode\u003ejava.security.Security.getProperty(\"package.definition\")\u003c/code\u003e,\n and checks to see if \u003ccode\u003epkg\u003c/code\u003e starts with or equals\n any of the restricted packages. If it does, then\n \u003ccode\u003echeckPermission\u003c/code\u003e gets called with the\n \u003ccode\u003eRuntimePermission(\"defineClassInPackage.\"+pkg)\u003c/code\u003e\n permission.\n \u003cp\u003e\n If this method is overridden, then\n \u003ccode\u003esuper.checkPackageDefinition\u003c/code\u003e should be called\n as the first line in the overridden method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"pkg","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkSetFactory","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to set the socket factory used by\n \u003ccode\u003eServerSocket\u003c/code\u003e or \u003ccode\u003eSocket\u003c/code\u003e, or the stream\n handler factory used by \u003ccode\u003eURL\u003c/code\u003e.\n \u003cp\u003e\n This method calls \u003ccode\u003echeckPermission\u003c/code\u003e with the\n \u003ccode\u003eRuntimePermission(\"setFactory\")\u003c/code\u003e permission.\n \u003cp\u003e\n If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkSetFactory\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkMemberAccess","comment":"Throws a \u003ccode\u003eSecurityException\u003c/code\u003e if the\n calling thread is not allowed to access members.\n \u003cp\u003e\n The default policy is to allow access to PUBLIC members, as well\n as access to classes that have the same class loader as the caller.\n In all other cases, this method calls \u003ccode\u003echeckPermission\u003c/code\u003e\n with the \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\n \u003c/code\u003e permission.\n \u003cp\u003e\n If this method is overridden, then a call to\n \u003ccode\u003esuper.checkMemberAccess\u003c/code\u003e cannot be made,\n as the default implementation of \u003ccode\u003echeckMemberAccess\u003c/code\u003e\n relies on the code being checked being at a stack depth of\n 4.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, int)","flatSignature":"(Class\u003c?\u003e, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"clazz","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"which","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"checkSecurityAccess","comment":"Determines whether the permission with the specified permission target\n name should be granted or denied.\n\n \u003cp\u003e If the requested permission is allowed, this method returns\n quietly. If denied, a SecurityException is raised.\n\n \u003cp\u003e This method creates a \u003ccode\u003eSecurityPermission\u003c/code\u003e object for\n the given permission target name and calls \u003ccode\u003echeckPermission\u003c/code\u003e\n with it.\n\n \u003cp\u003e See the documentation for\n \u003ccode\u003e{@link java.security.SecurityPermission}\u003c/code\u003e for\n a list of possible permission target names.\n\n \u003cp\u003e If you override this method, then you should make a call to\n \u003ccode\u003esuper.checkSecurityAccess\u003c/code\u003e\n at the point the overridden method would normally throw an\n exception.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getThreadGroup","comment":"Returns the thread group into which to instantiate any new\n thread being created at the time this is being called.\n By default, it returns the thread group of the current\n thread. This should be overridden by a specific security\n manager to return the appropriate thread group.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}