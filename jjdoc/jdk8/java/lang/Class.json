{"name":"Class","comment":"Instances of the class {@code Class} represent classes and\n interfaces in a running Java application.  An enum is a kind of\n class and an annotation is a kind of interface.  Every array also\n belongs to a class that is reflected as a {@code Class} object\n that is shared by all arrays with the same element type and number\n of dimensions.  The primitive Java types ({@code boolean},\n {@code byte}, {@code char}, {@code short},\n {@code int}, {@code long}, {@code float}, and\n {@code double}), and the keyword {@code void} are also\n represented as {@code Class} objects.\n\n \u003cp\u003e {@code Class} has no public constructor. Instead {@code Class}\n objects are constructed automatically by the Java Virtual Machine as classes\n are loaded and by calls to the {@code defineClass} method in the class\n loader.\n\n \u003cp\u003e The following example uses a {@code Class} object to print the\n class name of an object:\n\n \u003cblockquote\u003e\u003cpre\u003e\n     void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e It is also possible to get the {@code Class} object for a named\n type (or for void) using a class literal.  See Section 15.8.2 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n For example:\n\n \u003cblockquote\u003e\n     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n \u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":["java.io.Serializable","java.lang.reflect.GenericDeclaration","java.lang.reflect.Type","java.lang.reflect.AnnotatedElement"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"toString","comment":"Converts the object to a string. The string representation is the\n string \"class\" or \"interface\", followed by a space, and then by the\n fully qualified name of the class in the format returned by\n {@code getName}.  If this {@code Class} object represents a\n primitive type, this method returns the name of the primitive type.  If\n this {@code Class} object represents void this method returns\n \"void\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toGenericString","comment":"Returns a string describing this {@code Class}, including\n information about modifiers and type parameters.\n\n The string is formatted as a list of type modifiers, if any,\n followed by the kind of type (empty string for primitive types\n and {@code class}, {@code enum}, {@code interface}, or\n \u003ccode\u003e\u0026#64;\u003c/code\u003e{@code interface}, as appropriate), followed\n by the type\u0027s name, followed by an angle-bracketed\n comma-separated list of the type\u0027s type parameters, if any.\n\n A space is used to separate modifiers from one another and to\n separate any modifiers from the kind of type. The modifiers\n occur in canonical order. If there are no type parameters, the\n type parameter list is elided.\n\n \u003cp\u003eNote that since information about the runtime representation\n of a type is being generated, modifiers not present on the\n originating source code or illegal on the originating source\n code may be present.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"forName","comment":"Returns the {@code Class} object associated with the class or\n interface with the given string name.  Invoking this method is\n equivalent to:\n\n \u003cblockquote\u003e\n  {@code Class.forName(className, true, currentLoader)}\n \u003c/blockquote\u003e\n\n where {@code currentLoader} denotes the defining class loader of\n the current class.\n\n \u003cp\u003e For example, the following code fragment returns the\n runtime {@code Class} descriptor for the class named\n {@code java.lang.Thread}:\n\n \u003cblockquote\u003e\n   {@code Class t \u003d Class.forName(\"java.lang.Thread\")}\n \u003c/blockquote\u003e\n \u003cp\u003e\n A call to {@code forName(\"X\")} causes the class named\n {@code X} to be initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"className","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"forName","comment":"Returns the {@code Class} object associated with the class or\n interface with the given string name, using the given class loader.\n Given the fully qualified name for a class or interface (in the same\n format returned by {@code getName}) this method attempts to\n locate, load, and link the class or interface.  The specified class\n loader is used to load the class or interface.  If the parameter\n {@code loader} is null, the class is loaded through the bootstrap\n class loader.  The class is initialized only if the\n {@code initialize} parameter is {@code true} and if it has\n not been initialized earlier.\n\n \u003cp\u003e If {@code name} denotes a primitive type or void, an attempt\n will be made to locate a user-defined class in the unnamed package whose\n name is {@code name}. Therefore, this method cannot be used to\n obtain any of the {@code Class} objects representing primitive\n types or void.\n\n \u003cp\u003e If {@code name} denotes an array class, the component type of\n the array class is loaded but not initialized.\n\n \u003cp\u003e For example, in an instance method the expression:\n\n \u003cblockquote\u003e\n  {@code Class.forName(\"Foo\")}\n \u003c/blockquote\u003e\n\n is equivalent to:\n\n \u003cblockquote\u003e\n  {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())}\n \u003c/blockquote\u003e\n\n Note that this method throws errors related to loading, linking or\n initializing as specified in Sections 12.2, 12.3 and 12.4 of \u003cem\u003eThe\n Java Language Specification\u003c/em\u003e.\n Note that this method does not check whether the requested class\n is accessible to its caller.\n\n \u003cp\u003e If the {@code loader} is {@code null}, and a security\n manager is present, and the caller\u0027s class loader is not null, then this\n method calls the security manager\u0027s {@code checkPermission} method\n with a {@code RuntimePermission(\"getClassLoader\")} permission to\n ensure it\u0027s ok to access the bootstrap class loader.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean, java.lang.ClassLoader)","flatSignature":"(String, boolean, ClassLoader)","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"initialize","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"newInstance","comment":"Creates a new instance of the class represented by this {@code Class}\n object.  The class is instantiated as if by a {@code new}\n expression with an empty argument list.  The class is initialized if it\n has not already been initialized.\n\n \u003cp\u003eNote that this method propagates any exception thrown by the\n nullary constructor, including a checked exception.  Use of\n this method effectively bypasses the compile-time exception\n checking that would otherwise be performed by the compiler.\n The {@link\n java.lang.reflect.Constructor#newInstance(java.lang.Object...)\n Constructor.newInstance} method avoids this problem by wrapping\n any exception thrown by the constructor in a (checked) {@link\n java.lang.reflect.InvocationTargetException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isInstance","comment":"Determines if the specified {@code Object} is assignment-compatible\n with the object represented by this {@code Class}.  This method is\n the dynamic equivalent of the Java language {@code instanceof}\n operator. The method returns {@code true} if the specified\n {@code Object} argument is non-null and can be cast to the\n reference type represented by this {@code Class} object without\n raising a {@code ClassCastException.} It returns {@code false}\n otherwise.\n\n \u003cp\u003e Specifically, if this {@code Class} object represents a\n declared class, this method returns {@code true} if the specified\n {@code Object} argument is an instance of the represented class (or\n of any of its subclasses); it returns {@code false} otherwise. If\n this {@code Class} object represents an array class, this method\n returns {@code true} if the specified {@code Object} argument\n can be converted to an object of the array class by an identity\n conversion or by a widening reference conversion; it returns\n {@code false} otherwise. If this {@code Class} object\n represents an interface, this method returns {@code true} if the\n class or any superclass of the specified {@code Object} argument\n implements this interface; it returns {@code false} otherwise. If\n this {@code Class} object represents a primitive type, this method\n returns {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAssignableFrom","comment":"Determines if the class or interface represented by this\n {@code Class} object is either the same as, or is a superclass or\n superinterface of, the class or interface represented by the specified\n {@code Class} parameter. It returns {@code true} if so;\n otherwise it returns {@code false}. If this {@code Class}\n object represents a primitive type, this method returns\n {@code true} if the specified {@code Class} parameter is\n exactly this {@code Class} object; otherwise it returns\n {@code false}.\n\n \u003cp\u003e Specifically, this method tests whether the type represented by the\n specified {@code Class} parameter can be converted to the type\n represented by this {@code Class} object via an identity conversion\n or via a widening reference conversion. See \u003cem\u003eThe Java Language\n Specification\u003c/em\u003e, sections 5.1.1 and 5.1.4 , for details.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cls","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isInterface","comment":"Determines if the specified {@code Class} object represents an\n interface type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isArray","comment":"Determines if this {@code Class} object represents an array class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isPrimitive","comment":"Determines if the specified {@code Class} object represents a\n primitive type.\n\n \u003cp\u003e There are nine predefined {@code Class} objects to represent\n the eight primitive types and void.  These are created by the Java\n Virtual Machine, and have the same names as the primitive types that\n they represent, namely {@code boolean}, {@code byte},\n {@code char}, {@code short}, {@code int},\n {@code long}, {@code float}, and {@code double}.\n\n \u003cp\u003e These objects may only be accessed via the following public static\n final variables, and are the only {@code Class} objects for which\n this method returns {@code true}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAnnotation","comment":"Returns true if this {@code Class} object represents an annotation\n type.  Note that if this method returns true, {@link #isInterface()}\n would also return true, as all annotation types are also interfaces.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSynthetic","comment":"Returns {@code true} if this class is a synthetic class;\n returns {@code false} otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the  name of the entity (class, interface, array class,\n primitive type, or void) represented by this {@code Class} object,\n as a {@code String}.\n\n \u003cp\u003e If this class object represents a reference type that is not an\n array type then the binary name of the class is returned, as specified\n by\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n\n \u003cp\u003e If this class object represents a primitive type or void, then the\n name returned is a {@code String} equal to the Java language\n keyword corresponding to the primitive type or void.\n\n \u003cp\u003e If this class object represents a class of arrays, then the internal\n form of the name consists of the name of the element type preceded by\n one or more \u0027{@code [}\u0027 characters representing the depth of the array\n nesting.  The encoding of element type names is as follows:\n\n \u003cblockquote\u003e\u003ctable summary\u003d\"Element types and encodings\"\u003e\n \u003ctr\u003e\u003cth\u003e Element Type \u003cth\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003cth\u003e Encoding\n \u003ctr\u003e\u003ctd\u003e boolean      \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e Z\n \u003ctr\u003e\u003ctd\u003e byte         \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e B\n \u003ctr\u003e\u003ctd\u003e char         \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e C\n \u003ctr\u003e\u003ctd\u003e class or interface\n                       \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e L\u003ci\u003eclassname\u003c/i\u003e;\n \u003ctr\u003e\u003ctd\u003e double       \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e D\n \u003ctr\u003e\u003ctd\u003e float        \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e F\n \u003ctr\u003e\u003ctd\u003e int          \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e I\n \u003ctr\u003e\u003ctd\u003e long         \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e J\n \u003ctr\u003e\u003ctd\u003e short        \u003ctd\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; \u003ctd align\u003dcenter\u003e S\n \u003c/table\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The class or interface name \u003ci\u003eclassname\u003c/i\u003e is the binary name of\n the class specified above.\n\n \u003cp\u003e Examples:\n \u003cblockquote\u003e\u003cpre\u003e\n String.class.getName()\n     returns \"java.lang.String\"\n byte.class.getName()\n     returns \"byte\"\n (new Object[3]).getClass().getName()\n     returns \"[Ljava.lang.Object;\"\n (new int[3][4][5][6][7][8][9]).getClass().getName()\n     returns \"[[[[[[[I\"\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getClassLoader","comment":"Returns the class loader for the class.  Some implementations may use\n null to represent the bootstrap class loader. This method will return\n null in such implementations if this class was loaded by the bootstrap\n class loader.\n\n \u003cp\u003e If a security manager is present, and the caller\u0027s class loader is\n not null and the caller\u0027s class loader is not the same as or an ancestor of\n the class loader for the class whose class loader is requested, then\n this method calls the security manager\u0027s {@code checkPermission}\n method with a {@code RuntimePermission(\"getClassLoader\")}\n permission to ensure it\u0027s ok to access the class loader for the class.\n\n \u003cp\u003eIf this object\n represents a primitive type or void, null is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTypeParameters","comment":"Returns an array of {@code TypeVariable} objects that represent the\n type variables declared by the generic declaration represented by this\n {@code GenericDeclaration} object, in declaration order.  Returns an\n array of length 0 if the underlying generic declaration declares no type\n variables.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSuperclass","comment":"Returns the {@code Class} representing the superclass of the entity\n (class, interface, primitive type or void) represented by this\n {@code Class}.  If this {@code Class} represents either the\n {@code Object} class, an interface, a primitive type, or void, then\n null is returned.  If this object represents an array class then the\n {@code Class} object representing the {@code Object} class is\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericSuperclass","comment":"Returns the {@code Type} representing the direct superclass of\n the entity (class, interface, primitive type or void) represented by\n this {@code Class}.\n\n \u003cp\u003eIf the superclass is a parameterized type, the {@code Type}\n object returned must accurately reflect the actual type\n parameters used in the source code. The parameterized type\n representing the superclass is created if it had not been\n created before. See the declaration of {@link\n java.lang.reflect.ParameterizedType ParameterizedType} for the\n semantics of the creation process for parameterized types.  If\n this {@code Class} represents either the {@code Object}\n class, an interface, a primitive type, or void, then null is\n returned.  If this object represents an array class then the\n {@code Class} object representing the {@code Object} class is\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPackage","comment":"Gets the package for this class.  The class loader of this class is used\n to find the package.  If the class was loaded by the bootstrap class\n loader the set of packages loaded from CLASSPATH is searched to find the\n package of the class. Null is returned if no package object was created\n by the class loader of this class.\n\n \u003cp\u003e Packages have attributes for versions and specifications only if the\n information was defined in the manifests that accompany the classes, and\n if the class loader created the package instance with the attributes\n from the manifest.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Package","qualifiedName":"java.lang.Package","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getInterfaces","comment":"Determines the interfaces implemented by the class or interface\n represented by this object.\n\n \u003cp\u003e If this object represents a class, the return value is an array\n containing objects representing all interfaces implemented by the\n class. The order of the interface objects in the array corresponds to\n the order of the interface names in the {@code implements} clause\n of the declaration of the class represented by this object. For\n example, given the declaration:\n \u003cblockquote\u003e\n {@code class Shimmer implements FloorWax, DessertTopping { ... }}\n \u003c/blockquote\u003e\n suppose the value of {@code s} is an instance of\n {@code Shimmer}; the value of the expression:\n \u003cblockquote\u003e\n {@code s.getClass().getInterfaces()[0]}\n \u003c/blockquote\u003e\n is the {@code Class} object that represents interface\n {@code FloorWax}; and the value of:\n \u003cblockquote\u003e\n {@code s.getClass().getInterfaces()[1]}\n \u003c/blockquote\u003e\n is the {@code Class} object that represents interface\n {@code DessertTopping}.\n\n \u003cp\u003e If this object represents an interface, the array contains objects\n representing all interfaces extended by the interface. The order of the\n interface objects in the array corresponds to the order of the interface\n names in the {@code extends} clause of the declaration of the\n interface represented by this object.\n\n \u003cp\u003e If this object represents a class or interface that implements no\n interfaces, the method returns an array of length 0.\n\n \u003cp\u003e If this object represents a primitive type or void, the method\n returns an array of length 0.\n\n \u003cp\u003e If this {@code Class} object represents an array type, the\n interfaces {@code Cloneable} and {@code java.io.Serializable} are\n returned in that order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericInterfaces","comment":"Returns the {@code Type}s representing the interfaces\n directly implemented by the class or interface represented by\n this object.\n\n \u003cp\u003eIf a superinterface is a parameterized type, the\n {@code Type} object returned for it must accurately reflect\n the actual type parameters used in the source code. The\n parameterized type representing each superinterface is created\n if it had not been created before. See the declaration of\n {@link java.lang.reflect.ParameterizedType ParameterizedType}\n for the semantics of the creation process for parameterized\n types.\n\n \u003cp\u003e If this object represents a class, the return value is an\n array containing objects representing all interfaces\n implemented by the class. The order of the interface objects in\n the array corresponds to the order of the interface names in\n the {@code implements} clause of the declaration of the class\n represented by this object.  In the case of an array class, the\n interfaces {@code Cloneable} and {@code Serializable} are\n returned in that order.\n\n \u003cp\u003eIf this object represents an interface, the array contains\n objects representing all interfaces directly extended by the\n interface.  The order of the interface objects in the array\n corresponds to the order of the interface names in the\n {@code extends} clause of the declaration of the interface\n represented by this object.\n\n \u003cp\u003eIf this object represents a class or interface that\n implements no interfaces, the method returns an array of length\n 0.\n\n \u003cp\u003eIf this object represents a primitive type or void, the\n method returns an array of length 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getComponentType","comment":"Returns the {@code Class} representing the component type of an\n array.  If this class does not represent an array class this method\n returns null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getModifiers","comment":"Returns the Java language modifiers for this class or interface, encoded\n in an integer. The modifiers consist of the Java Virtual Machine\u0027s\n constants for {@code public}, {@code protected},\n {@code private}, {@code final}, {@code static},\n {@code abstract} and {@code interface}; they should be decoded\n using the methods of class {@code Modifier}.\n\n \u003cp\u003e If the underlying class is an array class, then its\n {@code public}, {@code private} and {@code protected}\n modifiers are the same as those of its component type.  If this\n {@code Class} represents a primitive type or void, its\n {@code public} modifier is always {@code true}, and its\n {@code protected} and {@code private} modifiers are always\n {@code false}. If this object represents an array class, a\n primitive type or void, then its {@code final} modifier is always\n {@code true} and its interface modifier is always\n {@code false}. The values of its other modifiers are not determined\n by this specification.\n\n \u003cp\u003e The modifier encodings are defined in \u003cem\u003eThe Java Virtual Machine\n Specification\u003c/em\u003e, table 4.1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSigners","comment":"Gets the signers of this class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEnclosingMethod","comment":"If this {@code Class} object represents a local or anonymous\n class within a method, returns a {@link\n java.lang.reflect.Method Method} object representing the\n immediately enclosing method of the underlying class. Returns\n {@code null} otherwise.\n\n In particular, this method returns {@code null} if the underlying\n class is a local or anonymous class immediately enclosed by a type\n declaration, instance initializer or static initializer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEnclosingConstructor","comment":"If this {@code Class} object represents a local or anonymous\n class within a constructor, returns a {@link\n java.lang.reflect.Constructor Constructor} object representing\n the immediately enclosing constructor of the underlying\n class. Returns {@code null} otherwise.  In particular, this\n method returns {@code null} if the underlying class is a local\n or anonymous class immediately enclosed by a type declaration,\n instance initializer or static initializer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaringClass","comment":"If the class or interface represented by this {@code Class} object\n is a member of another class, returns the {@code Class} object\n representing the class in which it was declared.  This method returns\n null if this class or interface is not a member of any other class.  If\n this {@code Class} object represents an array class, a primitive\n type, or void,then this method returns null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEnclosingClass","comment":"Returns the immediately enclosing class of the underlying\n class.  If the underlying class is a top level class this\n method returns {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSimpleName","comment":"Returns the simple name of the underlying class as given in the\n source code. Returns an empty string if the underlying class is\n anonymous.\n\n \u003cp\u003eThe simple name of an array is the simple name of the\n component type with \"[]\" appended.  In particular the simple\n name of an array whose component type is anonymous is \"[]\".","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTypeName","comment":"Return an informative string for the name of this type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCanonicalName","comment":"Returns the canonical name of the underlying class as\n defined by the Java Language Specification.  Returns null if\n the underlying class does not have a canonical name (i.e., if\n it is a local or anonymous class or an array whose component\n type does not have a canonical name).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAnonymousClass","comment":"Returns {@code true} if and only if the underlying class\n is an anonymous class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLocalClass","comment":"Returns {@code true} if and only if the underlying class\n is a local class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isMemberClass","comment":"Returns {@code true} if and only if the underlying class\n is a member class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getClasses","comment":"Returns an array containing {@code Class} objects representing all\n the public classes and interfaces that are members of the class\n represented by this {@code Class} object.  This includes public\n class and interface members inherited from superclasses and public class\n and interface members declared by the class.  This method returns an\n array of length 0 if this {@code Class} object has no public member\n classes or interfaces.  This method also returns an array of length 0 if\n this {@code Class} object represents a primitive type, an array\n class, or void.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFields","comment":"Returns an array containing {@code Field} objects reflecting all\n the accessible public fields of the class or interface represented by\n this {@code Class} object.\n\n \u003cp\u003e If this {@code Class} object represents a class or interface with no\n no accessible public fields, then this method returns an array of length\n 0.\n\n \u003cp\u003e If this {@code Class} object represents a class, then this method\n returns the public fields of the class and of all its superclasses.\n\n \u003cp\u003e If this {@code Class} object represents an interface, then this\n method returns the fields of the interface and of all its\n superinterfaces.\n\n \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n type, or void, then this method returns an array of length 0.\n\n \u003cp\u003e The elements in the returned array are not sorted and are not in any\n particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMethods","comment":"Returns an array containing {@code Method} objects reflecting all the\n public methods of the class or interface represented by this {@code\n Class} object, including those declared by the class or interface and\n those inherited from superclasses and superinterfaces.\n\n \u003cp\u003e If this {@code Class} object represents a type that has multiple\n public methods with the same name and parameter types, but different\n return types, then the returned array has a {@code Method} object for\n each such method.\n\n \u003cp\u003e If this {@code Class} object represents a type with a class\n initialization method {@code \u003cclinit\u003e}, then the returned array does\n \u003cem\u003enot\u003c/em\u003e have a corresponding {@code Method} object.\n\n \u003cp\u003e If this {@code Class} object represents an array type, then the\n returned array has a {@code Method} object for each of the public\n methods inherited by the array type from {@code Object}. It does not\n contain a {@code Method} object for {@code clone()}.\n\n \u003cp\u003e If this {@code Class} object represents an interface then the\n returned array does not contain any implicitly declared methods from\n {@code Object}. Therefore, if no methods are explicitly declared in\n this interface or any of its superinterfaces then the returned array\n has length 0. (Note that a {@code Class} object which represents a class\n always has public methods, inherited from {@code Object}.)\n\n \u003cp\u003e If this {@code Class} object represents a primitive type or void,\n then the returned array has length 0.\n\n \u003cp\u003e Static methods declared in superinterfaces of the class or interface\n represented by this {@code Class} object are not considered members of\n the class or interface.\n\n \u003cp\u003e The elements in the returned array are not sorted and are not in any\n particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getConstructors","comment":"Returns an array containing {@code Constructor} objects reflecting\n all the public constructors of the class represented by this\n {@code Class} object.  An array of length 0 is returned if the\n class has no public constructors, or if the class is an array class, or\n if the class reflects a primitive type or void.\n\n Note that while this method returns an array of {@code\n Constructor\u003cT\u003e} objects (that is an array of constructors from\n this class), the return type of this method is {@code\n Constructor\u003c?\u003e[]} and \u003cem\u003enot\u003c/em\u003e {@code Constructor\u003cT\u003e[]} as\n might be expected.  This less informative return type is\n necessary since after being returned from this method, the\n array could be modified to hold {@code Constructor} objects for\n different classes, which would violate the type guarantees of\n {@code Constructor\u003cT\u003e[]}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getField","comment":"Returns a {@code Field} object that reflects the specified public member\n field of the class or interface represented by this {@code Class}\n object. The {@code name} parameter is a {@code String} specifying the\n simple name of the desired field.\n\n \u003cp\u003e The field to be reflected is determined by the algorithm that\n follows.  Let C be the class or interface represented by this object:\n\n \u003cOL\u003e\n \u003cLI\u003e If C declares a public field with the name specified, that is the\n      field to be reflected.\u003c/LI\u003e\n \u003cLI\u003e If no field was found in step 1 above, this algorithm is applied\n      recursively to each direct superinterface of C. The direct\n      superinterfaces are searched in the order they were declared.\u003c/LI\u003e\n \u003cLI\u003e If no field was found in steps 1 and 2 above, and C has a\n      superclass S, then this algorithm is invoked recursively upon S.\n      If C has no superclass, then a {@code NoSuchFieldException}\n      is thrown.\u003c/LI\u003e\n \u003c/OL\u003e\n\n \u003cp\u003e If this {@code Class} object represents an array type, then this\n method does not find the {@code length} field of the array type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMethod","comment":"Returns a {@code Method} object that reflects the specified public\n member method of the class or interface represented by this\n {@code Class} object. The {@code name} parameter is a\n {@code String} specifying the simple name of the desired method. The\n {@code parameterTypes} parameter is an array of {@code Class}\n objects that identify the method\u0027s formal parameter types, in declared\n order. If {@code parameterTypes} is {@code null}, it is\n treated as if it were an empty array.\n\n \u003cp\u003e If the {@code name} is \"{@code \u003cinit\u003e}\" or \"{@code \u003cclinit\u003e}\" a\n {@code NoSuchMethodException} is raised. Otherwise, the method to\n be reflected is determined by the algorithm that follows.  Let C be the\n class or interface represented by this object:\n \u003cOL\u003e\n \u003cLI\u003e C is searched for a \u003cI\u003ematching method\u003c/I\u003e, as defined below. If a\n      matching method is found, it is reflected.\u003c/LI\u003e\n \u003cLI\u003e If no matching method is found by step 1 then:\n   \u003cOL TYPE\u003d\"a\"\u003e\n   \u003cLI\u003e If C is a class other than {@code Object}, then this algorithm is\n        invoked recursively on the superclass of C.\u003c/LI\u003e\n   \u003cLI\u003e If C is the class {@code Object}, or if C is an interface, then\n        the superinterfaces of C (if any) are searched for a matching\n        method. If any such method is found, it is reflected.\u003c/LI\u003e\n   \u003c/OL\u003e\u003c/LI\u003e\n \u003c/OL\u003e\n\n \u003cp\u003e To find a matching method in a class or interface C:\u0026nbsp; If C\n declares exactly one public method with the specified name and exactly\n the same formal parameter types, that is the method reflected. If more\n than one such method is found in C, and one of these methods has a\n return type that is more specific than any of the others, that method is\n reflected; otherwise one of the methods is chosen arbitrarily.\n\n \u003cp\u003eNote that there may be more than one matching method in a\n class because while the Java language forbids a class to\n declare multiple methods with the same signature but different\n return types, the Java virtual machine does not.  This\n increased flexibility in the virtual machine can be used to\n implement various language features.  For example, covariant\n returns can be implemented with {@linkplain\n java.lang.reflect.Method#isBridge bridge methods}; the bridge\n method and the method being overridden would have the same\n signature but different return types.\n\n \u003cp\u003e If this {@code Class} object represents an array type, then this\n method does not find the {@code clone()} method.\n\n \u003cp\u003e Static methods declared in superinterfaces of the class or interface\n represented by this {@code Class} object are not considered members of\n the class or interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Class\u003c?\u003e...)","flatSignature":"(String, Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"parameterTypes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getConstructor","comment":"Returns a {@code Constructor} object that reflects the specified\n public constructor of the class represented by this {@code Class}\n object. The {@code parameterTypes} parameter is an array of\n {@code Class} objects that identify the constructor\u0027s formal\n parameter types, in declared order.\n\n If this {@code Class} object represents an inner class\n declared in a non-static context, the formal parameter types\n include the explicit enclosing instance as the first parameter.\n\n \u003cp\u003e The constructor to reflect is the public constructor of the class\n represented by this {@code Class} object whose formal parameter\n types match those specified by {@code parameterTypes}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e...)","flatSignature":"(Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parameterTypes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getDeclaredClasses","comment":"Returns an array of {@code Class} objects reflecting all the\n classes and interfaces declared as members of the class represented by\n this {@code Class} object. This includes public, protected, default\n (package) access, and private classes and interfaces declared by the\n class, but excludes inherited classes and interfaces.  This method\n returns an array of length 0 if the class declares no classes or\n interfaces as members, or if this {@code Class} object represents a\n primitive type, an array class, or void.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaredFields","comment":"Returns an array of {@code Field} objects reflecting all the fields\n declared by the class or interface represented by this\n {@code Class} object. This includes public, protected, default\n (package) access, and private fields, but excludes inherited fields.\n\n \u003cp\u003e If this {@code Class} object represents a class or interface with no\n declared fields, then this method returns an array of length 0.\n\n \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n type, or void, then this method returns an array of length 0.\n\n \u003cp\u003e The elements in the returned array are not sorted and are not in any\n particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaredMethods","comment":"Returns an array containing {@code Method} objects reflecting all the\n declared methods of the class or interface represented by this {@code\n Class} object, including public, protected, default (package)\n access, and private methods, but excluding inherited methods.\n\n \u003cp\u003e If this {@code Class} object represents a type that has multiple\n declared methods with the same name and parameter types, but different\n return types, then the returned array has a {@code Method} object for\n each such method.\n\n \u003cp\u003e If this {@code Class} object represents a type that has a class\n initialization method {@code \u003cclinit\u003e}, then the returned array does\n \u003cem\u003enot\u003c/em\u003e have a corresponding {@code Method} object.\n\n \u003cp\u003e If this {@code Class} object represents a class or interface with no\n declared methods, then the returned array has length 0.\n\n \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n type, or void, then the returned array has length 0.\n\n \u003cp\u003e The elements in the returned array are not sorted and are not in any\n particular order.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaredConstructors","comment":"Returns an array of {@code Constructor} objects reflecting all the\n constructors declared by the class represented by this\n {@code Class} object. These are public, protected, default\n (package) access, and private constructors.  The elements in the array\n returned are not sorted and are not in any particular order.  If the\n class has a default constructor, it is included in the returned array.\n This method returns an array of length 0 if this {@code Class}\n object represents an interface, a primitive type, an array class, or\n void.\n\n \u003cp\u003e See \u003cem\u003eThe Java Language Specification\u003c/em\u003e, section 8.2.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaredField","comment":"Returns a {@code Field} object that reflects the specified declared\n field of the class or interface represented by this {@code Class}\n object. The {@code name} parameter is a {@code String} that specifies\n the simple name of the desired field.\n\n \u003cp\u003e If this {@code Class} object represents an array type, then this\n method does not find the {@code length} field of the array type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDeclaredMethod","comment":"Returns a {@code Method} object that reflects the specified\n declared method of the class or interface represented by this\n {@code Class} object. The {@code name} parameter is a\n {@code String} that specifies the simple name of the desired\n method, and the {@code parameterTypes} parameter is an array of\n {@code Class} objects that identify the method\u0027s formal parameter\n types, in declared order.  If more than one method with the same\n parameter types is declared in a class, and one of these methods has a\n return type that is more specific than any of the others, that method is\n returned; otherwise one of the methods is chosen arbitrarily.  If the\n name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\" a {@code NoSuchMethodException}\n is raised.\n\n \u003cp\u003e If this {@code Class} object represents an array type, then this\n method does not find the {@code clone()} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.Class\u003c?\u003e...)","flatSignature":"(String, Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"parameterTypes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getDeclaredConstructor","comment":"Returns a {@code Constructor} object that reflects the specified\n constructor of the class or interface represented by this\n {@code Class} object.  The {@code parameterTypes} parameter is\n an array of {@code Class} objects that identify the constructor\u0027s\n formal parameter types, in declared order.\n\n If this {@code Class} object represents an inner class\n declared in a non-static context, the formal parameter types\n include the explicit enclosing instance as the first parameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e...)","flatSignature":"(Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"parameterTypes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"getResourceAsStream","comment":"Finds a resource with a given name.  The rules for searching resources\n associated with a given class are implemented by the defining\n {@linkplain ClassLoader class loader} of the class.  This method\n delegates to this object\u0027s class loader.  If this object was loaded by\n the bootstrap class loader, the method delegates to {@link\n ClassLoader#getSystemResourceAsStream}.\n\n \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n given resource name using this algorithm:\n\n \u003cul\u003e\n\n \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n (\u003ctt\u003e\u0027\u0026#92;u002f\u0027\u003c/tt\u003e), then the absolute name of the resource is the\n portion of the {@code name} following the {@code \u0027/\u0027}.\n\n \u003cli\u003e Otherwise, the absolute name is of the following form:\n\n \u003cblockquote\u003e\n   {@code modified_package_name/name}\n \u003c/blockquote\u003e\n\n \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n (\u003ctt\u003e\u0027\u0026#92;u002e\u0027\u003c/tt\u003e).\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getResource","comment":"Finds a resource with a given name.  The rules for searching resources\n associated with a given class are implemented by the defining\n {@linkplain ClassLoader class loader} of the class.  This method\n delegates to this object\u0027s class loader.  If this object was loaded by\n the bootstrap class loader, the method delegates to {@link\n ClassLoader#getSystemResource}.\n\n \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n given resource name using this algorithm:\n\n \u003cul\u003e\n\n \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n (\u003ctt\u003e\u0027\u0026#92;u002f\u0027\u003c/tt\u003e), then the absolute name of the resource is the\n portion of the {@code name} following the {@code \u0027/\u0027}.\n\n \u003cli\u003e Otherwise, the absolute name is of the following form:\n\n \u003cblockquote\u003e\n   {@code modified_package_name/name}\n \u003c/blockquote\u003e\n\n \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n (\u003ctt\u003e\u0027\u0026#92;u002e\u0027\u003c/tt\u003e).\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProtectionDomain","comment":"Returns the {@code ProtectionDomain} of this class.  If there is a\n security manager installed, this method first calls the security\n manager\u0027s {@code checkPermission} method with a\n {@code RuntimePermission(\"getProtectionDomain\")} permission to\n ensure it\u0027s ok to get the\n {@code ProtectionDomain}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ProtectionDomain","qualifiedName":"java.security.ProtectionDomain","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"desiredAssertionStatus","comment":"Returns the assertion status that would be assigned to this\n class if it were to be initialized at the time this method is invoked.\n If this class has had its assertion status set, the most recent\n setting will be returned; otherwise, if any package default assertion\n status pertains to this class, the most recent setting for the most\n specific pertinent package default assertion status is returned;\n otherwise, if this class is not a system class (i.e., it has a\n class loader) its class loader\u0027s default assertion status is returned;\n otherwise, the system class default assertion status is returned.\n \u003cp\u003e\n Few programmers will have any need for this method; it is provided\n for the benefit of the JRE itself.  (It allows a class to determine at\n the time that it is initialized whether assertions should be enabled.)\n Note that this method is not guaranteed to return the actual\n assertion status that was (or will be) associated with the specified\n class when it was (or will be) initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEnum","comment":"Returns true if and only if this class was declared as an enum in the\n source code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getEnumConstants","comment":"Returns the elements of this enum class or null if this\n Class object does not represent an enum type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"cast","comment":"Casts an object to the class or interface represented\n by this {@code Class} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asSubclass","comment":"Casts this {@code Class} object to represent a subclass of the class\n represented by the specified class object.  Checks that the cast\n is valid, and throws a {@code ClassCastException} if it is not.  If\n this method succeeds, it always returns a reference to this class object.\n\n \u003cp\u003eThis method is useful when a client needs to \"narrow\" the type of\n a {@code Class} object to pass it to an API that restricts the\n {@code Class} objects that it is willing to accept.  A cast would\n generate a compile-time warning, as the correctness of the cast\n could not be checked at runtime (because generic types are implemented\n by erasure).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cU\u003e)","flatSignature":"(Class\u003cU\u003e)","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"clazz","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"U","bounds":[]}]},{"name":"getAnnotation","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cA\u003e)","flatSignature":"(Class\u003cA\u003e)","returnType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":["java.lang.annotation.Annotation"]}]},{"name":"isAnnotationPresent","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e)","flatSignature":"(Class\u003c? extends Annotation\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAnnotationsByType","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cA\u003e)","flatSignature":"(Class\u003cA\u003e)","returnType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":["java.lang.annotation.Annotation"]}},"typeVariable":{"name":"A","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getAnnotations","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaredAnnotation","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cA\u003e)","flatSignature":"(Class\u003cA\u003e)","returnType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotationsByType","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cA\u003e)","flatSignature":"(Class\u003cA\u003e)","returnType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"A","qualifiedName":"A","dimension":"","elementType":{},"typeVariable":{"name":"A","bounds":["java.lang.annotation.Annotation"]}},"typeVariable":{"name":"A","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"A","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotations","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedSuperclass","comment":"Returns an {@code AnnotatedType} object that represents the use of a\n type to specify the superclass of the entity represented by this {@code\n Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify the superclass\n in \u0027...  extends Foo\u0027 is distinct from the \u003cem\u003edeclaration\u003c/em\u003e of type\n Foo.)\n\n \u003cp\u003e If this {@code Class} object represents a type whose declaration\n does not explicitly indicate an annotated superclass, then the return\n value is an {@code AnnotatedType} object representing an element with no\n annotations.\n\n \u003cp\u003e If this {@code Class} represents either the {@code Object} class, an\n interface type, an array type, a primitive type, or void, the return\n value is {@code null}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedInterfaces","comment":"Returns an array of {@code AnnotatedType} objects that represent the use\n of types to specify superinterfaces of the entity represented by this\n {@code Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify a\n superinterface in \u0027... implements Foo\u0027 is distinct from the\n \u003cem\u003edeclaration\u003c/em\u003e of type Foo.)\n\n \u003cp\u003e If this {@code Class} object represents a class, the return value is\n an array containing objects representing the uses of interface types to\n specify interfaces implemented by the class. The order of the objects in\n the array corresponds to the order of the interface types used in the\n \u0027implements\u0027 clause of the declaration of this {@code Class} object.\n\n \u003cp\u003e If this {@code Class} object represents an interface, the return\n value is an array containing objects representing the uses of interface\n types to specify interfaces directly extended by the interface. The\n order of the objects in the array corresponds to the order of the\n interface types used in the \u0027extends\u0027 clause of the declaration of this\n {@code Class} object.\n\n \u003cp\u003e If this {@code Class} object represents a class or interface whose\n declaration does not explicitly indicate any annotated superinterfaces,\n the return value is an array of length 0.\n\n \u003cp\u003e If this {@code Class} object represents either the {@code Object}\n class, an array type, a primitive type, or void, the return value is an\n array of length 0.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"enumConstants":[]}