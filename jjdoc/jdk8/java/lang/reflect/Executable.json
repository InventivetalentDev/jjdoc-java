{"name":"Executable","comment":"A shared superclass for the common functionality of {@link Method}\n and {@link Constructor}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Executable","qualifiedName":"java.lang.reflect.Executable","dimension":"","elementType":{},"package":"java.lang.reflect","superclass":"java.lang.reflect.AccessibleObject","interfaces":["java.lang.reflect.Member","java.lang.reflect.GenericDeclaration"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getDeclaringClass","comment":"Returns the {@code Class} object representing the class or interface\n that declares the executable represented by this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the name of the executable represented by this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getModifiers","comment":"Returns the Java language {@linkplain Modifier modifiers} for\n the executable represented by this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTypeParameters","comment":"Returns an array of {@code TypeVariable} objects that represent the\n type variables declared by the generic declaration represented by this\n {@code GenericDeclaration} object, in declaration order.  Returns an\n array of length 0 if the underlying generic declaration declares no type\n variables.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameterTypes","comment":"Returns an array of {@code Class} objects that represent the formal\n parameter types, in declaration order, of the executable\n represented by this object.  Returns an array of length\n 0 if the underlying executable takes no parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameterCount","comment":"Returns the number of formal parameters (whether explicitly\n declared or implicitly declared or neither) for the executable\n represented by this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericParameterTypes","comment":"Returns an array of {@code Type} objects that represent the formal\n parameter types, in declaration order, of the executable represented by\n this object. Returns an array of length 0 if the\n underlying executable takes no parameters.\n\n \u003cp\u003eIf a formal parameter type is a parameterized type,\n the {@code Type} object returned for it must accurately reflect\n the actual type parameters used in the source code.\n\n \u003cp\u003eIf a formal parameter type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameters","comment":"Returns an array of {@code Parameter} objects that represent\n all the parameters to the underlying executable represented by\n this object.  Returns an array of length 0 if the executable\n has no parameters.\n\n \u003cp\u003eThe parameters of the underlying executable do not necessarily\n have unique names, or names that are legal identifiers in the\n Java programming language (JLS 3.8).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Parameter","qualifiedName":"java.lang.reflect.Parameter","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Parameter","qualifiedName":"java.lang.reflect.Parameter","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExceptionTypes","comment":"Returns an array of {@code Class} objects that represent the\n types of exceptions declared to be thrown by the underlying\n executable represented by this object.  Returns an array of\n length 0 if the executable declares no exceptions in its {@code\n throws} clause.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericExceptionTypes","comment":"Returns an array of {@code Type} objects that represent the\n exceptions declared to be thrown by this executable object.\n Returns an array of length 0 if the underlying executable declares\n no exceptions in its {@code throws} clause.\n\n \u003cp\u003eIf an exception type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toGenericString","comment":"Returns a string describing this {@code Executable}, including\n any type parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isVarArgs","comment":"Returns {@code true} if this executable was declared to take a\n variable number of arguments; returns {@code false} otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSynthetic","comment":"Returns {@code true} if this executable is a synthetic\n construct; returns {@code false} otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameterAnnotations","comment":"Returns an array of arrays of {@code Annotation}s that\n represent the annotations on the formal parameters, in\n declaration order, of the {@code Executable} represented by\n this object.  Synthetic and mandated parameters (see\n explanation below), such as the outer \"this\" parameter to an\n inner class constructor will be represented in the returned\n array.  If the executable has no parameters (meaning no formal,\n no synthetic, and no mandated parameters), a zero-length array\n will be returned.  If the {@code Executable} has one or more\n parameters, a nested array of length zero is returned for each\n parameter with no annotations. The annotation objects contained\n in the returned arrays are serializable.  The caller of this\n method is free to modify the returned arrays; it will have no\n effect on the arrays returned to other callers.\n\n A compiler may add extra parameters that are implicitly\n declared in source (\"mandated\"), as well as parameters that\n are neither implicitly nor explicitly declared in source\n (\"synthetic\") to the parameter list for a method.  See {@link\n java.lang.reflect.Parameter} for more information.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[][]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotation","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getAnnotationsByType","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotations","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedReturnType","comment":"Returns an {@code AnnotatedType} object that represents the use of a type to\n specify the return type of the method/constructor represented by this\n Executable.\n\n If this {@code Executable} object represents a constructor, the {@code\n AnnotatedType} object represents the type of the constructed object.\n\n If this {@code Executable} object represents a method, the {@code\n AnnotatedType} object represents the use of a type to specify the return\n type of the method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedReceiverType","comment":"Returns an {@code AnnotatedType} object that represents the use of a\n type to specify the receiver type of the method/constructor represented\n by this Executable object. The receiver type of a method/constructor is\n available only if the method/constructor has a \u003cem\u003ereceiver\n parameter\u003c/em\u003e (JLS 8.4.1).\n\n If this {@code Executable} object represents a constructor or instance\n method that does not have a receiver parameter, or has a receiver\n parameter with no annotations on its type, then the return value is an\n {@code AnnotatedType} object representing an element with no\n annotations.\n\n If this {@code Executable} object represents a static method, then the\n return value is null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedParameterTypes","comment":"Returns an array of {@code AnnotatedType} objects that represent the use\n of types to specify formal parameter types of the method/constructor\n represented by this Executable. The order of the objects in the array\n corresponds to the order of the formal parameter types in the\n declaration of the method/constructor.\n\n Returns an array of length 0 if the method/constructor declares no\n parameters.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedExceptionTypes","comment":"Returns an array of {@code AnnotatedType} objects that represent the use\n of types to specify the declared exceptions of the method/constructor\n represented by this Executable. The order of the objects in the array\n corresponds to the order of the exception types in the declaration of\n the method/constructor.\n\n Returns an array of length 0 if the method/constructor declares no\n exceptions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.lang.reflect.Method","java.lang.reflect.Constructor"],"enumConstants":[]}