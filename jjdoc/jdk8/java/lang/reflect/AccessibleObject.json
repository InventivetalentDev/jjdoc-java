{"name":"AccessibleObject","comment":"The AccessibleObject class is the base class for Field, Method and\n Constructor objects.  It provides the ability to flag a reflected\n object as suppressing default Java language access control checks\n when it is used.  The access checks--for public, default (package)\n access, protected, and private members--are performed when Fields,\n Methods or Constructors are used to set or get fields, to invoke\n methods, or to create and initialize new instances of classes,\n respectively.\n\n \u003cp\u003eSetting the {@code accessible} flag in a reflected object\n permits sophisticated applications with sufficient privilege, such\n as Java Object Serialization or other persistence mechanisms, to\n manipulate objects in a manner that would normally be prohibited.\n\n \u003cp\u003eBy default, a reflected object is \u003cem\u003enot\u003c/em\u003e accessible.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"AccessibleObject","qualifiedName":"java.lang.reflect.AccessibleObject","dimension":"","elementType":{},"package":"java.lang.reflect","superclass":"java.lang.Object","interfaces":["java.lang.reflect.AnnotatedElement"],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"setAccessible","comment":"Convenience method to set the {@code accessible} flag for an\n array of objects with a single security check (for efficiency).\n\n \u003cp\u003eFirst, if there is a security manager, its\n {@code checkPermission} method is called with a\n {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n\n \u003cp\u003eA {@code SecurityException} is raised if {@code flag} is\n {@code true} but accessibility of any of the elements of the input\n {@code array} may not be changed (for example, if the element\n object is a {@link Constructor} object for the class {@link\n java.lang.Class}).  In the event of such a SecurityException, the\n accessibility of objects is set to {@code flag} for array elements\n upto (and excluding) the element for which the exception occurred; the\n accessibility of elements beyond (and including) the element for which\n the exception occurred is unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.reflect.AccessibleObject[], boolean)","flatSignature":"(AccessibleObject[], boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"array","type":{"isPrimitive":false,"simpleName":"AccessibleObject","qualifiedName":"java.lang.reflect.AccessibleObject","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"AccessibleObject","qualifiedName":"java.lang.reflect.AccessibleObject","dimension":"","elementType":{}}}},{"name":"flag","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setAccessible","comment":"Set the {@code accessible} flag for this object to\n the indicated boolean value.  A value of {@code true} indicates that\n the reflected object should suppress Java language access\n checking when it is used.  A value of {@code false} indicates\n that the reflected object should enforce Java language access checks.\n\n \u003cp\u003eFirst, if there is a security manager, its\n {@code checkPermission} method is called with a\n {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n\n \u003cp\u003eA {@code SecurityException} is raised if {@code flag} is\n {@code true} but accessibility of this object may not be changed\n (for example, if this element object is a {@link Constructor} object for\n the class {@link java.lang.Class}).\n\n \u003cp\u003eA {@code SecurityException} is raised if this object is a {@link\n java.lang.reflect.Constructor} object for the class\n {@code java.lang.Class}, and {@code flag} is true.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"flag","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isAccessible","comment":"Get the value of the {@code accessible} flag for this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotation","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"isAnnotationPresent","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e)","flatSignature":"(Class\u003c? extends Annotation\u003e)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAnnotationsByType","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getAnnotations","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaredAnnotation","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotationsByType","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotations","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.lang.reflect.Executable","java.lang.reflect.Field"],"enumConstants":[]}