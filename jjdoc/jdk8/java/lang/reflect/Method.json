{"name":"Method","comment":"A {@code Method} provides information about, and access to, a single method\n on a class or interface.  The reflected method may be a class method\n or an instance method (including an abstract method).\n\n \u003cp\u003eA {@code Method} permits widening conversions to occur when matching the\n actual parameters to invoke with the underlying method\u0027s formal\n parameters, but it throws an {@code IllegalArgumentException} if a\n narrowing conversion would occur.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{},"package":"java.lang.reflect","superclass":"java.lang.reflect.Executable","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getDeclaringClass","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the name of the method represented by this {@code Method}\n object, as a {@code String}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getModifiers","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTypeParameters","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getReturnType","comment":"Returns a {@code Class} object that represents the formal return type\n of the method represented by this {@code Method} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericReturnType","comment":"Returns a {@code Type} object that represents the formal return\n type of the method represented by this {@code Method} object.\n\n \u003cp\u003eIf the return type is a parameterized type,\n the {@code Type} object returned must accurately reflect\n the actual type parameters used in the source code.\n\n \u003cp\u003eIf the return type is a type variable or a parameterized type, it\n is created. Otherwise, it is resolved.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameterTypes","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameterCount","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericParameterTypes","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getExceptionTypes","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericExceptionTypes","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this {@code Method} against the specified object.  Returns\n true if the objects are the same.  Two {@code Methods} are the same if\n they were declared by the same class and have the same name\n and formal parameter types and return type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode for this {@code Method}.  The hashcode is computed\n as the exclusive-or of the hashcodes for the underlying\n method\u0027s declaring class name and the method\u0027s name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this {@code Method}.  The string is\n formatted as the method access modifiers, if any, followed by\n the method return type, followed by a space, followed by the\n class declaring the method, followed by a period, followed by\n the method name, followed by a parenthesized, comma-separated\n list of the method\u0027s formal parameter types. If the method\n throws checked exceptions, the parameter list is followed by a\n space, followed by the word throws followed by a\n comma-separated list of the thrown exception types.\n For example:\n \u003cpre\u003e\n    public boolean java.lang.Object.equals(java.lang.Object)\n \u003c/pre\u003e\n\n \u003cp\u003eThe access modifiers are placed in canonical order as\n specified by \"The Java Language Specification\".  This is\n {@code public}, {@code protected} or {@code private} first,\n and then other modifiers in the following order:\n {@code abstract}, {@code default}, {@code static}, {@code final},\n {@code synchronized}, {@code native}, {@code strictfp}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toGenericString","comment":"Returns a string describing this {@code Method}, including\n type parameters.  The string is formatted as the method access\n modifiers, if any, followed by an angle-bracketed\n comma-separated list of the method\u0027s type parameters, if any,\n followed by the method\u0027s generic return type, followed by a\n space, followed by the class declaring the method, followed by\n a period, followed by the method name, followed by a\n parenthesized, comma-separated list of the method\u0027s generic\n formal parameter types.\n\n If this method was declared to take a variable number of\n arguments, instead of denoting the last parameter as\n \"\u003ctt\u003e\u003ci\u003eType\u003c/i\u003e[]\u003c/tt\u003e\", it is denoted as\n \"\u003ctt\u003e\u003ci\u003eType\u003c/i\u003e...\u003c/tt\u003e\".\n\n A space is used to separate access modifiers from one another\n and from the type parameters or return type.  If there are no\n type parameters, the type parameter list is elided; if the type\n parameter list is present, a space separates the list from the\n class name.  If the method is declared to throw exceptions, the\n parameter list is followed by a space, followed by the word\n throws followed by a comma-separated list of the generic thrown\n exception types.\n\n \u003cp\u003eThe access modifiers are placed in canonical order as\n specified by \"The Java Language Specification\".  This is\n {@code public}, {@code protected} or {@code private} first,\n and then other modifiers in the following order:\n {@code abstract}, {@code default}, {@code static}, {@code final},\n {@code synchronized}, {@code native}, {@code strictfp}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"invoke","comment":"Invokes the underlying method represented by this {@code Method}\n object, on the specified object with the specified parameters.\n Individual parameters are automatically unwrapped to match\n primitive formal parameters, and both primitive and reference\n parameters are subject to method invocation conversions as\n necessary.\n\n \u003cp\u003eIf the underlying method is static, then the specified {@code obj}\n argument is ignored. It may be null.\n\n \u003cp\u003eIf the number of formal parameters required by the underlying method is\n 0, the supplied {@code args} array may be of length 0 or null.\n\n \u003cp\u003eIf the underlying method is an instance method, it is invoked\n using dynamic method lookup as documented in The Java Language\n Specification, Second Edition, section 15.12.4.4; in particular,\n overriding based on the runtime type of the target object will occur.\n\n \u003cp\u003eIf the underlying method is static, the class that declared\n the method is initialized if it has not already been initialized.\n\n \u003cp\u003eIf the method completes normally, the value it returns is\n returned to the caller of invoke; if the value has a primitive\n type, it is first appropriately wrapped in an object. However,\n if the value has the type of an array of a primitive type, the\n elements of the array are \u003ci\u003enot\u003c/i\u003e wrapped in objects; in\n other words, an array of primitive type is returned.  If the\n underlying method return type is void, the invocation returns\n null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object...)","flatSignature":"(Object, Object...)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"isBridge","comment":"Returns {@code true} if this method is a bridge\n method; returns {@code false} otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isVarArgs","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSynthetic","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isDefault","comment":"Returns {@code true} if this method is a default\n method; returns {@code false} otherwise.\n\n A default method is a public non-abstract instance method, that\n is, a non-static method with a body, declared in an interface\n type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDefaultValue","comment":"Returns the default value for the annotation member represented by\n this {@code Method} instance.  If the member is of a primitive type,\n an instance of the corresponding wrapper type is returned. Returns\n null if no default is associated with the member, or if the method\n instance does not represent a declared member of an annotation type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotation","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotations","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getParameterAnnotations","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[][]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedReturnType","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}