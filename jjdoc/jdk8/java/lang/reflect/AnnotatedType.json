{"name":"AnnotatedType","comment":"{@code AnnotatedType} represents the potentially annotated use of a type in\n the program currently running in this VM. The use may be of any type in the\n Java programming language, including an array type, a parameterized type, a\n type variable, or a wildcard type.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{},"package":"java.lang.reflect","interfaces":["java.lang.reflect.AnnotatedElement"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getType","comment":"Returns the underlying type that this annotated type represents.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.lang.reflect.AnnotatedWildcardType","java.lang.reflect.AnnotatedTypeVariable","java.lang.reflect.AnnotatedParameterizedType","java.lang.reflect.AnnotatedArrayType"],"enumConstants":[]}