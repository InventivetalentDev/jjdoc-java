{"name":"TypeVariable","comment":"TypeVariable is the common superinterface for type variables of kinds.\n A type variable is created the first time it is needed by a reflective\n method, as specified in this package.  If a type variable t is referenced\n by a type (i.e, class, interface or annotation type) T, and T is declared\n by the nth enclosing class of T (see JLS 8.1.2), then the creation of t\n requires the resolution (see JVMS 5) of the ith enclosing class of T,\n for i \u003d 0 to n, inclusive. Creating a type variable must not cause the\n creation of its bounds. Repeated creation of a type variable has no effect.\n\n \u003cp\u003eMultiple objects may be instantiated at run-time to\n represent a given type variable. Even though a type variable is\n created only once, this does not imply any requirement to cache\n instances representing the type variable. However, all instances\n representing a type variable must be equal() to each other.\n As a consequence, users of type variables must not rely on the identity\n of instances of classes implementing this interface.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"TypeVariable","qualifiedName":"java.lang.reflect.TypeVariable","dimension":"","elementType":{},"package":"java.lang.reflect","interfaces":["java.lang.reflect.Type","java.lang.reflect.AnnotatedElement"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getBounds","comment":"Returns an array of {@code Type} objects representing the\n upper bound(s) of this type variable.  Note that if no upper bound is\n explicitly declared, the upper bound is {@code Object}.\n\n \u003cp\u003eFor each upper bound B: \u003cul\u003e \u003cli\u003eif B is a parameterized\n type or a type variable, it is created, (see {@link\n java.lang.reflect.ParameterizedType ParameterizedType} for the\n details of the creation process for parameterized types).\n \u003cli\u003eOtherwise, B is resolved.  \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericDeclaration","comment":"Returns the {@code GenericDeclaration} object representing the\n generic declaration declared this type variable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"D","qualifiedName":"D","dimension":"","elementType":{},"typeVariable":{"name":"D","bounds":["java.lang.reflect.GenericDeclaration"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the name of this type variable, as it occurs in the source code.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedBounds","comment":"Returns an array of AnnotatedType objects that represent the use of\n types to denote the upper bounds of the type parameter represented by\n this TypeVariable. The order of the objects in the array corresponds to\n the order of the bounds in the declaration of the type parameter.\n\n Returns an array of length 0 if the type parameter declares no bounds.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"D","bounds":["java.lang.reflect.GenericDeclaration"]}],"enumConstants":[]}