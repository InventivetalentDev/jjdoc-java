{"name":"WildcardType","comment":"WildcardType represents a wildcard type expression, such as\n {@code ?}, {@code ? extends Number}, or {@code ? super Integer}.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"WildcardType","qualifiedName":"java.lang.reflect.WildcardType","dimension":"","elementType":{},"package":"java.lang.reflect","interfaces":["java.lang.reflect.Type"],"isAbstract":true,"isStatic":false,"since":"1.5","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getUpperBounds","comment":"Returns an array of {@code Type} objects representing the  upper\n bound(s) of this type variable.  Note that if no upper bound is\n explicitly declared, the upper bound is {@code Object}.\n\n \u003cp\u003eFor each upper bound B :\n \u003cul\u003e\n  \u003cli\u003eif B is a parameterized type or a type variable, it is created,\n  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}\n  for the details of the creation process for parameterized types).\n  \u003cli\u003eOtherwise, B is resolved.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLowerBounds","comment":"Returns an array of {@code Type} objects representing the\n lower bound(s) of this type variable.  Note that if no lower bound is\n explicitly declared, the lower bound is the type of {@code null}.\n In this case, a zero length array is returned.\n\n \u003cp\u003eFor each lower bound B :\n \u003cul\u003e\n   \u003cli\u003eif B is a parameterized type or a type variable, it is created,\n  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}\n  for the details of the creation process for parameterized types).\n   \u003cli\u003eOtherwise, B is resolved.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}