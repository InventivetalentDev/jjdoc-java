{"name":"Field","comment":"A {@code Field} provides information about, and dynamic access to, a\n single field of a class or an interface.  The reflected field may\n be a class (static) field or an instance field.\n\n \u003cp\u003eA {@code Field} permits widening conversions to occur during a get or\n set access operation, but throws an {@code IllegalArgumentException} if a\n narrowing conversion would occur.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{},"package":"java.lang.reflect","superclass":"java.lang.reflect.AccessibleObject","interfaces":["java.lang.reflect.Member"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getDeclaringClass","comment":"Returns the {@code Class} object representing the class or interface\n that declares the field represented by this {@code Field} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the name of the field represented by this {@code Field} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getModifiers","comment":"Returns the Java language modifiers for the field represented\n by this {@code Field} object, as an integer. The {@code Modifier} class should\n be used to decode the modifiers.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEnumConstant","comment":"Returns {@code true} if this field represents an element of\n an enumerated type; returns {@code false} otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isSynthetic","comment":"Returns {@code true} if this field is a synthetic\n field; returns {@code false} otherwise.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getType","comment":"Returns a {@code Class} object that identifies the\n declared type for the field represented by this\n {@code Field} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getGenericType","comment":"Returns a {@code Type} object that represents the declared type for\n the field represented by this {@code Field} object.\n\n \u003cp\u003eIf the {@code Type} is a parameterized type, the\n {@code Type} object returned must accurately reflect the\n actual type parameters used in the source code.\n\n \u003cp\u003eIf the type of the underlying field is a type variable or a\n parameterized type, it is created. Otherwise, it is resolved.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Type","qualifiedName":"java.lang.reflect.Type","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares this {@code Field} against the specified object.  Returns\n true if the objects are the same.  Two {@code Field} objects are the same if\n they were declared by the same class and have the same name\n and type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hashcode for this {@code Field}.  This is computed as the\n exclusive-or of the hashcodes for the underlying field\u0027s\n declaring class name and its name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string describing this {@code Field}.  The format is\n the access modifiers for the field, if any, followed\n by the field type, followed by a space, followed by\n the fully-qualified name of the class declaring the field,\n followed by a period, followed by the name of the field.\n For example:\n \u003cpre\u003e\n    public static final int java.lang.Thread.MIN_PRIORITY\n    private int java.io.FileDescriptor.fd\n \u003c/pre\u003e\n\n \u003cp\u003eThe modifiers are placed in canonical order as specified by\n \"The Java Language Specification\".  This is {@code public},\n {@code protected} or {@code private} first, and then other\n modifiers in the following order: {@code static}, {@code final},\n {@code transient}, {@code volatile}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toGenericString","comment":"Returns a string describing this {@code Field}, including\n its generic type.  The format is the access modifiers for the\n field, if any, followed by the generic field type, followed by\n a space, followed by the fully-qualified name of the class\n declaring the field, followed by a period, followed by the name\n of the field.\n\n \u003cp\u003eThe modifiers are placed in canonical order as specified by\n \"The Java Language Specification\".  This is {@code public},\n {@code protected} or {@code private} first, and then other\n modifiers in the following order: {@code static}, {@code final},\n {@code transient}, {@code volatile}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"get","comment":"Returns the value of the field represented by this {@code Field}, on\n the specified object. The value is automatically wrapped in an\n object if it has a primitive type.\n\n \u003cp\u003eThe underlying field\u0027s value is obtained as follows:\n\n \u003cp\u003eIf the underlying field is a static field, the {@code obj} argument\n is ignored; it may be null.\n\n \u003cp\u003eOtherwise, the underlying field is an instance field.  If the\n specified {@code obj} argument is null, the method throws a\n {@code NullPointerException}. If the specified object is not an\n instance of the class or interface declaring the underlying\n field, the method throws an {@code IllegalArgumentException}.\n\n \u003cp\u003eIf this {@code Field} object is enforcing Java language access control, and\n the underlying field is inaccessible, the method throws an\n {@code IllegalAccessException}.\n If the underlying field is static, the class that declared the\n field is initialized if it has not already been initialized.\n\n \u003cp\u003eOtherwise, the value is retrieved from the underlying instance\n or static field.  If the field has a primitive type, the value\n is wrapped in an object before being returned, otherwise it is\n returned as is.\n\n \u003cp\u003eIf the field is hidden in the type of {@code obj},\n the field\u0027s value is obtained according to the preceding rules.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBoolean","comment":"Gets the value of a static or instance {@code boolean} field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getByte","comment":"Gets the value of a static or instance {@code byte} field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChar","comment":"Gets the value of a static or instance field of type\n {@code char} or of another primitive type convertible to\n type {@code char} via a widening conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getShort","comment":"Gets the value of a static or instance field of type\n {@code short} or of another primitive type convertible to\n type {@code short} via a widening conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getInt","comment":"Gets the value of a static or instance field of type\n {@code int} or of another primitive type convertible to\n type {@code int} via a widening conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getLong","comment":"Gets the value of a static or instance field of type\n {@code long} or of another primitive type convertible to\n type {@code long} via a widening conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFloat","comment":"Gets the value of a static or instance field of type\n {@code float} or of another primitive type convertible to\n type {@code float} via a widening conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDouble","comment":"Gets the value of a static or instance field of type\n {@code double} or of another primitive type convertible to\n type {@code double} via a widening conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"set","comment":"Sets the field represented by this {@code Field} object on the\n specified object argument to the specified new value. The new\n value is automatically unwrapped if the underlying field has a\n primitive type.\n\n \u003cp\u003eThe operation proceeds as follows:\n\n \u003cp\u003eIf the underlying field is static, the {@code obj} argument is\n ignored; it may be null.\n\n \u003cp\u003eOtherwise the underlying field is an instance field.  If the\n specified object argument is null, the method throws a\n {@code NullPointerException}.  If the specified object argument is not\n an instance of the class or interface declaring the underlying\n field, the method throws an {@code IllegalArgumentException}.\n\n \u003cp\u003eIf this {@code Field} object is enforcing Java language access control, and\n the underlying field is inaccessible, the method throws an\n {@code IllegalAccessException}.\n\n \u003cp\u003eIf the underlying field is final, the method throws an\n {@code IllegalAccessException} unless {@code setAccessible(true)}\n has succeeded for this {@code Field} object\n and the field is non-static. Setting a final field in this way\n is meaningful only during deserialization or reconstruction of\n instances of classes with blank final fields, before they are\n made available for access by other parts of a program. Use in\n any other context may have unpredictable effects, including cases\n in which other parts of a program continue to use the original\n value of this field.\n\n \u003cp\u003eIf the underlying field is of a primitive type, an unwrapping\n conversion is attempted to convert the new value to a value of\n a primitive type.  If this attempt fails, the method throws an\n {@code IllegalArgumentException}.\n\n \u003cp\u003eIf, after possible unwrapping, the new value cannot be\n converted to the type of the underlying field by an identity or\n widening conversion, the method throws an\n {@code IllegalArgumentException}.\n\n \u003cp\u003eIf the underlying field is static, the class that declared the\n field is initialized if it has not already been initialized.\n\n \u003cp\u003eThe field is set to the possibly unwrapped and widened new value.\n\n \u003cp\u003eIf the field is hidden in the type of {@code obj},\n the field\u0027s value is set according to the preceding rules.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.Object)","flatSignature":"(Object, Object)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setBoolean","comment":"Sets the value of a field as a {@code boolean} on the specified object.\n This method is equivalent to\n {@code set(obj, zObj)},\n where {@code zObj} is a {@code Boolean} object and\n {@code zObj.booleanValue() \u003d\u003d z}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, boolean)","flatSignature":"(Object, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"z","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setByte","comment":"Sets the value of a field as a {@code byte} on the specified object.\n This method is equivalent to\n {@code set(obj, bObj)},\n where {@code bObj} is a {@code Byte} object and\n {@code bObj.byteValue() \u003d\u003d b}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, byte)","flatSignature":"(Object, byte)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setChar","comment":"Sets the value of a field as a {@code char} on the specified object.\n This method is equivalent to\n {@code set(obj, cObj)},\n where {@code cObj} is a {@code Character} object and\n {@code cObj.charValue() \u003d\u003d c}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, char)","flatSignature":"(Object, char)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"c","type":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setShort","comment":"Sets the value of a field as a {@code short} on the specified object.\n This method is equivalent to\n {@code set(obj, sObj)},\n where {@code sObj} is a {@code Short} object and\n {@code sObj.shortValue() \u003d\u003d s}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, short)","flatSignature":"(Object, short)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"s","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setInt","comment":"Sets the value of a field as an {@code int} on the specified object.\n This method is equivalent to\n {@code set(obj, iObj)},\n where {@code iObj} is a {@code Integer} object and\n {@code iObj.intValue() \u003d\u003d i}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, int)","flatSignature":"(Object, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"i","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setLong","comment":"Sets the value of a field as a {@code long} on the specified object.\n This method is equivalent to\n {@code set(obj, lObj)},\n where {@code lObj} is a {@code Long} object and\n {@code lObj.longValue() \u003d\u003d l}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, long)","flatSignature":"(Object, long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"l","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setFloat","comment":"Sets the value of a field as a {@code float} on the specified object.\n This method is equivalent to\n {@code set(obj, fObj)},\n where {@code fObj} is a {@code Float} object and\n {@code fObj.floatValue() \u003d\u003d f}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, float)","flatSignature":"(Object, float)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setDouble","comment":"Sets the value of a field as a {@code double} on the specified object.\n This method is equivalent to\n {@code set(obj, dObj)},\n where {@code dObj} is a {@code Double} object and\n {@code dObj.doubleValue() \u003d\u003d d}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, double)","flatSignature":"(Object, double)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getAnnotation","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getAnnotationsByType","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e)","flatSignature":"(Class\u003cT\u003e)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"typeVariable":{"name":"T","bounds":["java.lang.annotation.Annotation"]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"annotationClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.annotation.Annotation"]}]},{"name":"getDeclaredAnnotations","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Annotation","qualifiedName":"java.lang.annotation.Annotation","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAnnotatedType","comment":"Returns an AnnotatedType object that represents the use of a type to specify\n the declared type of the field represented by this Field.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"AnnotatedType","qualifiedName":"java.lang.reflect.AnnotatedType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}