{"name":"Thread","comment":"A \u003ci\u003ethread\u003c/i\u003e is a thread of execution in a program. The Java\n Virtual Machine allows an application to have multiple threads of\n execution running concurrently.\n \u003cp\u003e\n Every thread has a priority. Threads with higher priority are\n executed in preference to threads with lower priority. Each thread\n may or may not also be marked as a daemon. When code running in\n some thread creates a new \u003ccode\u003eThread\u003c/code\u003e object, the new\n thread has its priority initially set equal to the priority of the\n creating thread, and is a daemon thread if and only if the\n creating thread is a daemon.\n \u003cp\u003e\n When a Java Virtual Machine starts up, there is usually a single\n non-daemon thread (which typically calls the method named\n \u003ccode\u003emain\u003c/code\u003e of some designated class). The Java Virtual\n Machine continues to execute threads until either of the following\n occurs:\n \u003cul\u003e\n \u003cli\u003eThe \u003ccode\u003eexit\u003c/code\u003e method of class \u003ccode\u003eRuntime\u003c/code\u003e has been\n     called and the security manager has permitted the exit operation\n     to take place.\n \u003cli\u003eAll threads that are not daemon threads have died, either by\n     returning from the call to the \u003ccode\u003erun\u003c/code\u003e method or by\n     throwing an exception that propagates beyond the \u003ccode\u003erun\u003c/code\u003e\n     method.\n \u003c/ul\u003e\n \u003cp\u003e\n There are two ways to create a new thread of execution. One is to\n declare a class to be a subclass of \u003ccode\u003eThread\u003c/code\u003e. This\n subclass should override the \u003ccode\u003erun\u003c/code\u003e method of class\n \u003ccode\u003eThread\u003c/code\u003e. An instance of the subclass can then be\n allocated and started. For example, a thread that computes primes\n larger than a stated value could be written as follows:\n \u003chr\u003e\u003cblockquote\u003e\u003cpre\u003e\n     class PrimeThread extends Thread {\n         long minPrime;\n         PrimeThread(long minPrime) {\n             this.minPrime \u003d minPrime;\n         }\n\n         public void run() {\n             // compute primes larger than minPrime\n             \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\n         }\n     }\n \u003c/pre\u003e\u003c/blockquote\u003e\u003chr\u003e\n \u003cp\u003e\n The following code would then create a thread and start it running:\n \u003cblockquote\u003e\u003cpre\u003e\n     PrimeThread p \u003d new PrimeThread(143);\n     p.start();\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The other way to create a thread is to declare a class that\n implements the \u003ccode\u003eRunnable\u003c/code\u003e interface. That class then\n implements the \u003ccode\u003erun\u003c/code\u003e method. An instance of the class can\n then be allocated, passed as an argument when creating\n \u003ccode\u003eThread\u003c/code\u003e, and started. The same example in this other\n style looks like the following:\n \u003chr\u003e\u003cblockquote\u003e\u003cpre\u003e\n     class PrimeRun implements Runnable {\n         long minPrime;\n         PrimeRun(long minPrime) {\n             this.minPrime \u003d minPrime;\n         }\n\n         public void run() {\n             // compute primes larger than minPrime\n             \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\n         }\n     }\n \u003c/pre\u003e\u003c/blockquote\u003e\u003chr\u003e\n \u003cp\u003e\n The following code would then create a thread and start it running:\n \u003cblockquote\u003e\u003cpre\u003e\n     PrimeRun p \u003d new PrimeRun(143);\n     new Thread(p).start();\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n Every thread has a name for identification purposes. More than\n one thread may have the same name. If a name is not specified when\n a thread is created, a new name is generated for it.\n \u003cp\u003e\n Unless otherwise noted, passing a {@code null} argument to a constructor\n or method in this class will cause a {@link NullPointerException} to be\n thrown.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":["java.lang.Runnable"],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":["java.lang.Thread.State","java.lang.Thread.UncaughtExceptionHandler"],"isInnerClass":false,"constructors":[{"name":"Thread","comment":"Allocates a new {@code Thread} object. This constructor has the same\n effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n {@code (null, null, gname)}, where {@code gname} is a newly generated\n name. Automatically generated names are of the form\n {@code \"Thread-\"+}\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is an integer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object. This constructor has the same\n effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n {@code (null, target, gname)}, where {@code gname} is a newly generated\n name. Automatically generated names are of the form\n {@code \"Thread-\"+}\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is an integer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.Runnable)","flatSignature":"(Runnable)","parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object. This constructor has the same\n effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n {@code (group, target, gname)} ,where {@code gname} is a newly generated\n name. Automatically generated names are of the form\n {@code \"Thread-\"+}\u003ci\u003en\u003c/i\u003e, where \u003ci\u003en\u003c/i\u003e is an integer.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.ThreadGroup, java.lang.Runnable)","flatSignature":"(ThreadGroup, Runnable)","parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object. This constructor has the same\n effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n {@code (null, null, name)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object. This constructor has the same\n effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n {@code (group, null, name)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.ThreadGroup, java.lang.String)","flatSignature":"(ThreadGroup, String)","parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object. This constructor has the same\n effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n {@code (null, target, name)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.Runnable, java.lang.String)","flatSignature":"(Runnable, String)","parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object so that it has {@code target}\n as its run object, has the specified {@code name} as its name,\n and belongs to the thread group referred to by {@code group}.\n\n \u003cp\u003eIf there is a security manager, its\n {@link SecurityManager#checkAccess(ThreadGroup) checkAccess}\n method is invoked with the ThreadGroup as its argument.\n\n \u003cp\u003eIn addition, its {@code checkPermission} method is invoked with\n the {@code RuntimePermission(\"enableContextClassLoaderOverride\")}\n permission when invoked directly or indirectly by the constructor\n of a subclass which overrides the {@code getContextClassLoader}\n or {@code setContextClassLoader} methods.\n\n \u003cp\u003eThe priority of the newly created thread is set equal to the\n priority of the thread creating it, that is, the currently running\n thread. The method {@linkplain #setPriority setPriority} may be\n used to change the priority to a new value.\n\n \u003cp\u003eThe newly created thread is initially marked as being a daemon\n thread if and only if the thread creating it is currently marked\n as a daemon thread. The method {@linkplain #setDaemon setDaemon}\n may be used to change whether or not a thread is a daemon.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)","flatSignature":"(ThreadGroup, Runnable, String)","parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Thread","comment":"Allocates a new {@code Thread} object so that it has {@code target}\n as its run object, has the specified {@code name} as its name,\n and belongs to the thread group referred to by {@code group}, and has\n the specified \u003ci\u003estack size\u003c/i\u003e.\n\n \u003cp\u003eThis constructor is identical to {@link\n #Thread(ThreadGroup,Runnable,String)} with the exception of the fact\n that it allows the thread stack size to be specified.  The stack size\n is the approximate number of bytes of address space that the virtual\n machine is to allocate for this thread\u0027s stack.  \u003cb\u003eThe effect of the\n {@code stackSize} parameter, if any, is highly platform dependent.\u003c/b\u003e\n\n \u003cp\u003eOn some platforms, specifying a higher value for the\n {@code stackSize} parameter may allow a thread to achieve greater\n recursion depth before throwing a {@link StackOverflowError}.\n Similarly, specifying a lower value may allow a greater number of\n threads to exist concurrently without throwing an {@link\n OutOfMemoryError} (or other internal error).  The details of\n the relationship between the value of the \u003ctt\u003estackSize\u003c/tt\u003e parameter\n and the maximum recursion depth and concurrency level are\n platform-dependent.  \u003cb\u003eOn some platforms, the value of the\n {@code stackSize} parameter may have no effect whatsoever.\u003c/b\u003e\n\n \u003cp\u003eThe virtual machine is free to treat the {@code stackSize}\n parameter as a suggestion.  If the specified value is unreasonably low\n for the platform, the virtual machine may instead use some\n platform-specific minimum value; if the specified value is unreasonably\n high, the virtual machine may instead use some platform-specific\n maximum.  Likewise, the virtual machine is free to round the specified\n value up or down as it sees fit (or to ignore it completely).\n\n \u003cp\u003eSpecifying a value of zero for the {@code stackSize} parameter will\n cause this constructor to behave exactly like the\n {@code Thread(ThreadGroup, Runnable, String)} constructor.\n\n \u003cp\u003e\u003ci\u003eDue to the platform-dependent nature of the behavior of this\n constructor, extreme care should be exercised in its use.\n The thread stack size necessary to perform a given computation will\n likely vary from one JRE implementation to another.  In light of this\n variation, careful tuning of the stack size parameter may be required,\n and the tuning may need to be repeated for each JRE implementation on\n which an application is to run.\u003c/i\u003e\n\n \u003cp\u003eImplementation note: Java platform implementers are encouraged to\n document their implementation\u0027s behavior with respect to the\n {@code stackSize} parameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)","flatSignature":"(ThreadGroup, Runnable, String, long)","parameters":[{"name":"group","type":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}}},{"name":"target","type":{"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"stackSize","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"MIN_PRIORITY","comment":"The minimum priority that a thread can have.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"NORM_PRIORITY","comment":"The default priority that is assigned to a thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"MAX_PRIORITY","comment":"The maximum priority that a thread can have.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"10"}],"methods":[{"name":"currentThread","comment":"Returns a reference to the currently executing thread object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"yield","comment":"A hint to the scheduler that the current thread is willing to yield\n its current use of a processor. The scheduler is free to ignore this\n hint.\n\n \u003cp\u003e Yield is a heuristic attempt to improve relative progression\n between threads that would otherwise over-utilise a CPU. Its use\n should be combined with detailed profiling and benchmarking to\n ensure that it actually has the desired effect.\n\n \u003cp\u003e It is rarely appropriate to use this method. It may be useful\n for debugging or testing purposes, where it may help to reproduce\n bugs due to race conditions. It may also be useful when designing\n concurrency control constructs such as the ones in the\n {@link java.util.concurrent.locks} package.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"sleep","comment":"Causes the currently executing thread to sleep (temporarily cease\n execution) for the specified number of milliseconds, subject to\n the precision and accuracy of system timers and schedulers. The thread\n does not lose ownership of any monitors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"millis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sleep","comment":"Causes the currently executing thread to sleep (temporarily cease\n execution) for the specified number of milliseconds plus the specified\n number of nanoseconds, subject to the precision and accuracy of system\n timers and schedulers. The thread does not lose ownership of any\n monitors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"millis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanos","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"start","comment":"Causes this thread to begin execution; the Java Virtual Machine\n calls the \u003ccode\u003erun\u003c/code\u003e method of this thread.\n \u003cp\u003e\n The result is that two threads are running concurrently: the\n current thread (which returns from the call to the\n \u003ccode\u003estart\u003c/code\u003e method) and the other thread (which executes its\n \u003ccode\u003erun\u003c/code\u003e method).\n \u003cp\u003e\n It is never legal to start a thread more than once.\n In particular, a thread may not be restarted once it has completed\n execution.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"run","comment":"If this thread was constructed using a separate\n \u003ccode\u003eRunnable\u003c/code\u003e run object, then that\n \u003ccode\u003eRunnable\u003c/code\u003e object\u0027s \u003ccode\u003erun\u003c/code\u003e method is called;\n otherwise, this method does nothing and returns.\n \u003cp\u003e\n Subclasses of \u003ccode\u003eThread\u003c/code\u003e should override this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"stop","comment":"Forces the thread to stop executing.\n \u003cp\u003e\n If there is a security manager installed, its \u003ccode\u003echeckAccess\u003c/code\u003e\n method is called with \u003ccode\u003ethis\u003c/code\u003e\n as its argument. This may result in a\n \u003ccode\u003eSecurityException\u003c/code\u003e being raised (in the current thread).\n \u003cp\u003e\n If this thread is different from the current thread (that is, the current\n thread is trying to stop a thread other than itself), the\n security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method (with a\n \u003ccode\u003eRuntimePermission(\"stopThread\")\u003c/code\u003e argument) is called in\n addition.\n Again, this may result in throwing a\n \u003ccode\u003eSecurityException\u003c/code\u003e (in the current thread).\n \u003cp\u003e\n The thread represented by this thread is forced to stop whatever\n it is doing abnormally and to throw a newly created\n \u003ccode\u003eThreadDeath\u003c/code\u003e object as an exception.\n \u003cp\u003e\n It is permitted to stop a thread that has not yet been started.\n If the thread is eventually started, it immediately terminates.\n \u003cp\u003e\n An application should not normally try to catch\n \u003ccode\u003eThreadDeath\u003c/code\u003e unless it must do some extraordinary\n cleanup operation (note that the throwing of\n \u003ccode\u003eThreadDeath\u003c/code\u003e causes \u003ccode\u003efinally\u003c/code\u003e clauses of\n \u003ccode\u003etry\u003c/code\u003e statements to be executed before the thread\n officially dies).  If a \u003ccode\u003ecatch\u003c/code\u003e clause catches a\n \u003ccode\u003eThreadDeath\u003c/code\u003e object, it is important to rethrow the\n object so that the thread actually dies.\n \u003cp\u003e\n The top-level error handler that reacts to otherwise uncaught\n exceptions does not print out a message or otherwise notify the\n application if the uncaught exception is an instance of\n \u003ccode\u003eThreadDeath\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"stop","comment":"Throws {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Throwable)","flatSignature":"(Throwable)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Throwable","qualifiedName":"java.lang.Throwable","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"interrupt","comment":"Interrupts this thread.\n\n \u003cp\u003e Unless the current thread is interrupting itself, which is\n always permitted, the {@link #checkAccess() checkAccess} method\n of this thread is invoked, which may cause a {@link\n SecurityException} to be thrown.\n\n \u003cp\u003e If this thread is blocked in an invocation of the {@link\n Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link\n Object#wait(long, int) wait(long, int)} methods of the {@link Object}\n class, or of the {@link #join()}, {@link #join(long)}, {@link\n #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},\n methods of this class, then its interrupt status will be cleared and it\n will receive an {@link InterruptedException}.\n\n \u003cp\u003e If this thread is blocked in an I/O operation upon an {@link\n java.nio.channels.InterruptibleChannel InterruptibleChannel}\n then the channel will be closed, the thread\u0027s interrupt\n status will be set, and the thread will receive a {@link\n java.nio.channels.ClosedByInterruptException}.\n\n \u003cp\u003e If this thread is blocked in a {@link java.nio.channels.Selector}\n then the thread\u0027s interrupt status will be set and it will return\n immediately from the selection operation, possibly with a non-zero\n value, just as if the selector\u0027s {@link\n java.nio.channels.Selector#wakeup wakeup} method were invoked.\n\n \u003cp\u003e If none of the previous conditions hold then this thread\u0027s interrupt\n status will be set. \u003c/p\u003e\n\n \u003cp\u003e Interrupting a thread that is not alive need not have any effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"interrupted","comment":"Tests whether the current thread has been interrupted.  The\n \u003ci\u003einterrupted status\u003c/i\u003e of the thread is cleared by this method.  In\n other words, if this method were to be called twice in succession, the\n second call would return false (unless the current thread were\n interrupted again, after the first call had cleared its interrupted\n status and before the second call had examined it).\n\n \u003cp\u003eA thread interruption ignored because a thread was not alive\n at the time of the interrupt will be reflected by this method\n returning false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"isInterrupted","comment":"Tests whether this thread has been interrupted.  The \u003ci\u003einterrupted\n status\u003c/i\u003e of the thread is unaffected by this method.\n\n \u003cp\u003eA thread interruption ignored because a thread was not alive\n at the time of the interrupt will be reflected by this method\n returning false.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"destroy","comment":"Throws {@link NoSuchMethodError}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAlive","comment":"Tests if this thread is alive. A thread is alive if it has\n been started and has not yet died.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"suspend","comment":"Suspends this thread.\n \u003cp\u003e\n First, the \u003ccode\u003echeckAccess\u003c/code\u003e method of this thread is called\n with no arguments. This may result in throwing a\n \u003ccode\u003eSecurityException \u003c/code\u003e(in the current thread).\n \u003cp\u003e\n If the thread is alive, it is suspended and makes no further\n progress unless and until it is resumed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"resume","comment":"Resumes a suspended thread.\n \u003cp\u003e\n First, the \u003ccode\u003echeckAccess\u003c/code\u003e method of this thread is called\n with no arguments. This may result in throwing a\n \u003ccode\u003eSecurityException\u003c/code\u003e (in the current thread).\n \u003cp\u003e\n If the thread is alive but suspended, it is resumed and is\n permitted to make progress in its execution.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setPriority","comment":"Changes the priority of this thread.\n \u003cp\u003e\n First the \u003ccode\u003echeckAccess\u003c/code\u003e method of this thread is called\n with no arguments. This may result in throwing a\n \u003ccode\u003eSecurityException\u003c/code\u003e.\n \u003cp\u003e\n Otherwise, the priority of this thread is set to the smaller of\n the specified \u003ccode\u003enewPriority\u003c/code\u003e and the maximum permitted\n priority of the thread\u0027s thread group.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newPriority","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getPriority","comment":"Returns this thread\u0027s priority.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setName","comment":"Changes the name of this thread to be equal to the argument\n \u003ccode\u003ename\u003c/code\u003e.\n \u003cp\u003e\n First the \u003ccode\u003echeckAccess\u003c/code\u003e method of this thread is called\n with no arguments. This may result in throwing a\n \u003ccode\u003eSecurityException\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getName","comment":"Returns this thread\u0027s name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getThreadGroup","comment":"Returns the thread group to which this thread belongs.\n This method returns null if this thread has died\n (been stopped).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ThreadGroup","qualifiedName":"java.lang.ThreadGroup","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"activeCount","comment":"Returns an estimate of the number of active threads in the current\n thread\u0027s {@linkplain java.lang.ThreadGroup thread group} and its\n subgroups. Recursively iterates over all subgroups in the current\n thread\u0027s thread group.\n\n \u003cp\u003e The value returned is only an estimate because the number of\n threads may change dynamically while this method traverses internal\n data structures, and might be affected by the presence of certain\n system threads. This method is intended primarily for debugging\n and monitoring purposes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"enumerate","comment":"Copies into the specified array every active thread in the current\n thread\u0027s thread group and its subgroups. This method simply\n invokes the {@link java.lang.ThreadGroup#enumerate(Thread[])}\n method of the current thread\u0027s thread group.\n\n \u003cp\u003e An application might use the {@linkplain #activeCount activeCount}\n method to get an estimate of how big the array should be, however\n \u003ci\u003eif the array is too short to hold all the threads, the extra threads\n are silently ignored.\u003c/i\u003e  If it is critical to obtain every active\n thread in the current thread\u0027s thread group and its subgroups, the\n invoker should verify that the returned int value is strictly less\n than the length of {@code tarray}.\n\n \u003cp\u003e Due to the inherent race condition in this method, it is recommended\n that the method only be used for debugging and monitoring purposes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread[])","flatSignature":"(Thread[])","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"tarray","type":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Thread","qualifiedName":"java.lang.Thread","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"countStackFrames","comment":"Counts the number of stack frames in this thread. The thread must\n be suspended.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"join","comment":"Waits at most {@code millis} milliseconds for this thread to\n die. A timeout of {@code 0} means to wait forever.\n\n \u003cp\u003e This implementation uses a loop of {@code this.wait} calls\n conditioned on {@code this.isAlive}. As a thread terminates the\n {@code this.notifyAll} method is invoked. It is recommended that\n applications not use {@code wait}, {@code notify}, or\n {@code notifyAll} on {@code Thread} instances.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"join","comment":"Waits at most {@code millis} milliseconds plus\n {@code nanos} nanoseconds for this thread to die.\n\n \u003cp\u003e This implementation uses a loop of {@code this.wait} calls\n conditioned on {@code this.isAlive}. As a thread terminates the\n {@code this.notifyAll} method is invoked. It is recommended that\n applications not use {@code wait}, {@code notify}, or\n {@code notifyAll} on {@code Thread} instances.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"millis","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanos","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"join","comment":"Waits for this thread to die.\n\n \u003cp\u003e An invocation of this method behaves in exactly the same\n way as the invocation\n\n \u003cblockquote\u003e\n {@linkplain #join(long) join}{@code (0)}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"dumpStack","comment":"Prints a stack trace of the current thread to the standard error stream.\n This method is used only for debugging.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setDaemon","comment":"Marks this thread as either a {@linkplain #isDaemon daemon} thread\n or a user thread. The Java Virtual Machine exits when the only\n threads running are all daemon threads.\n\n \u003cp\u003e This method must be invoked before the thread is started.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"on","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isDaemon","comment":"Tests if this thread is a daemon thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"checkAccess","comment":"Determines if the currently running thread has permission to\n modify this thread.\n \u003cp\u003e\n If there is a security manager, its \u003ccode\u003echeckAccess\u003c/code\u003e method\n is called with this thread as its argument. This may result in\n throwing a \u003ccode\u003eSecurityException\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of this thread, including the\n thread\u0027s name, priority, and thread group.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getContextClassLoader","comment":"Returns the context ClassLoader for this Thread. The context\n ClassLoader is provided by the creator of the thread for use\n by code running in this thread when loading classes and resources.\n If not {@linkplain #setContextClassLoader set}, the default is the\n ClassLoader context of the parent Thread. The context ClassLoader of the\n primordial thread is typically set to the class loader used to load the\n application.\n\n \u003cp\u003eIf a security manager is present, and the invoker\u0027s class loader is not\n {@code null} and is not the same as or an ancestor of the context class\n loader, then this method invokes the security manager\u0027s {@link\n SecurityManager#checkPermission(java.security.Permission) checkPermission}\n method with a {@link RuntimePermission RuntimePermission}{@code\n (\"getClassLoader\")} permission to verify that retrieval of the context\n class loader is permitted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setContextClassLoader","comment":"Sets the context ClassLoader for this Thread. The context\n ClassLoader can be set when a thread is created, and allows\n the creator of the thread to provide the appropriate class loader,\n through {@code getContextClassLoader}, to code running in the thread\n when loading classes and resources.\n\n \u003cp\u003eIf a security manager is present, its {@link\n SecurityManager#checkPermission(java.security.Permission) checkPermission}\n method is invoked with a {@link RuntimePermission RuntimePermission}{@code\n (\"setContextClassLoader\")} permission to see if setting the context\n ClassLoader is permitted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.ClassLoader)","flatSignature":"(ClassLoader)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"cl","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"holdsLock","comment":"Returns \u003ctt\u003etrue\u003c/tt\u003e if and only if the current thread holds the\n monitor lock on the specified object.\n\n \u003cp\u003eThis method is designed to allow a program to assert that\n the current thread already holds a specified lock:\n \u003cpre\u003e\n     assert Thread.holdsLock(obj);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getStackTrace","comment":"Returns an array of stack trace elements representing the stack dump\n of this thread.  This method will return a zero-length array if\n this thread has not started, has started but has not yet been\n scheduled to run by the system, or has terminated.\n If the returned array is of non-zero length then the first element of\n the array represents the top of the stack, which is the most recent\n method invocation in the sequence.  The last element of the array\n represents the bottom of the stack, which is the least recent method\n invocation in the sequence.\n\n \u003cp\u003eIf there is a security manager, and this thread is not\n the current thread, then the security manager\u0027s\n \u003ctt\u003echeckPermission\u003c/tt\u003e method is called with a\n \u003ctt\u003eRuntimePermission(\"getStackTrace\")\u003c/tt\u003e permission\n to see if it\u0027s ok to get the stack trace.\n\n \u003cp\u003eSome virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n this thread is permitted to return a zero-length array from this\n method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"StackTraceElement","qualifiedName":"java.lang.StackTraceElement","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"StackTraceElement","qualifiedName":"java.lang.StackTraceElement","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAllStackTraces","comment":"Returns a map of stack traces for all live threads.\n The map keys are threads and each map value is an array of\n \u003ctt\u003eStackTraceElement\u003c/tt\u003e that represents the stack dump\n of the corresponding \u003ctt\u003eThread\u003c/tt\u003e.\n The returned stack traces are in the format specified for\n the {@link #getStackTrace getStackTrace} method.\n\n \u003cp\u003eThe threads may be executing while this method is called.\n The stack trace of each thread only represents a snapshot and\n each stack trace may be obtained at different time.  A zero-length\n array will be returned in the map value if the virtual machine has\n no stack trace information about a thread.\n\n \u003cp\u003eIf there is a security manager, then the security manager\u0027s\n \u003ctt\u003echeckPermission\u003c/tt\u003e method is called with a\n \u003ctt\u003eRuntimePermission(\"getStackTrace\")\u003c/tt\u003e permission as well as\n \u003ctt\u003eRuntimePermission(\"modifyThreadGroup\")\u003c/tt\u003e permission\n to see if it is ok to get the stack trace of all threads.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getId","comment":"Returns the identifier of this Thread.  The thread ID is a positive\n \u003ctt\u003elong\u003c/tt\u003e number generated when this thread was created.\n The thread ID is unique and remains unchanged during its lifetime.\n When a thread is terminated, this thread ID may be reused.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getState","comment":"Returns the state of this thread.\n This method is designed for use in monitoring of the system state,\n not for synchronization control.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"State","qualifiedName":"java.lang.Thread.State","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setDefaultUncaughtExceptionHandler","comment":"Set the default handler invoked when a thread abruptly terminates\n due to an uncaught exception, and no other handler has been defined\n for that thread.\n\n \u003cp\u003eUncaught exception handling is controlled first by the thread, then\n by the thread\u0027s {@link ThreadGroup} object and finally by the default\n uncaught exception handler. If the thread does not have an explicit\n uncaught exception handler set, and the thread\u0027s thread group\n (including parent thread groups)  does not specialize its\n \u003ctt\u003euncaughtException\u003c/tt\u003e method, then the default handler\u0027s\n \u003ctt\u003euncaughtException\u003c/tt\u003e method will be invoked.\n \u003cp\u003eBy setting the default uncaught exception handler, an application\n can change the way in which uncaught exceptions are handled (such as\n logging to a specific device, or file) for those threads that would\n already accept whatever \u0026quot;default\u0026quot; behavior the system\n provided.\n\n \u003cp\u003eNote that the default uncaught exception handler should not usually\n defer to the thread\u0027s \u003ctt\u003eThreadGroup\u003c/tt\u003e object, as that could cause\n infinite recursion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread.UncaughtExceptionHandler)","flatSignature":"(Thread.UncaughtExceptionHandler)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"eh","type":{"isPrimitive":false,"simpleName":"UncaughtExceptionHandler","qualifiedName":"java.lang.Thread.UncaughtExceptionHandler","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDefaultUncaughtExceptionHandler","comment":"Returns the default handler invoked when a thread abruptly terminates\n due to an uncaught exception. If the returned value is \u003ctt\u003enull\u003c/tt\u003e,\n there is no default.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"UncaughtExceptionHandler","qualifiedName":"java.lang.Thread.UncaughtExceptionHandler","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"getUncaughtExceptionHandler","comment":"Returns the handler invoked when this thread abruptly terminates\n due to an uncaught exception. If this thread has not had an\n uncaught exception handler explicitly set then this thread\u0027s\n \u003ctt\u003eThreadGroup\u003c/tt\u003e object is returned, unless this thread\n has terminated, in which case \u003ctt\u003enull\u003c/tt\u003e is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"UncaughtExceptionHandler","qualifiedName":"java.lang.Thread.UncaughtExceptionHandler","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setUncaughtExceptionHandler","comment":"Set the handler invoked when this thread abruptly terminates\n due to an uncaught exception.\n \u003cp\u003eA thread can take full control of how it responds to uncaught\n exceptions by having its uncaught exception handler explicitly set.\n If no such handler is set then the thread\u0027s \u003ctt\u003eThreadGroup\u003c/tt\u003e\n object acts as its handler.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Thread.UncaughtExceptionHandler)","flatSignature":"(Thread.UncaughtExceptionHandler)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"eh","type":{"isPrimitive":false,"simpleName":"UncaughtExceptionHandler","qualifiedName":"java.lang.Thread.UncaughtExceptionHandler","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.util.concurrent.ForkJoinWorkerThread"],"enumConstants":[]}