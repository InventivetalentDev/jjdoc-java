{"name":"CharSequence","comment":"A \u003ctt\u003eCharSequence\u003c/tt\u003e is a readable sequence of \u003ccode\u003echar\u003c/code\u003e values. This\n interface provides uniform, read-only access to many different kinds of\n \u003ccode\u003echar\u003c/code\u003e sequences.\n A \u003ccode\u003echar\u003c/code\u003e value represents a character in the \u003ci\u003eBasic\n Multilingual Plane (BMP)\u003c/i\u003e or a surrogate. Refer to \u003ca\n href\u003d\"Character.html#unicode\"\u003eUnicode Character Representation\u003c/a\u003e for details.\n\n \u003cp\u003e This interface does not refine the general contracts of the {@link\n java.lang.Object#equals(java.lang.Object) equals} and {@link\n java.lang.Object#hashCode() hashCode} methods.  The result of comparing two\n objects that implement \u003ctt\u003eCharSequence\u003c/tt\u003e is therefore, in general,\n undefined.  Each object may be implemented by a different class, and there\n is no guarantee that each class will be capable of testing its instances\n for equality with those of the other.  It is therefore inappropriate to use\n arbitrary \u003ctt\u003eCharSequence\u003c/tt\u003e instances as elements in a set or as keys in\n a map. \u003c/p\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{},"package":"java.lang","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.4","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"length","comment":"Returns the length of this character sequence.  The length is the number\n of 16-bit \u003ccode\u003echar\u003c/code\u003es in the sequence.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"charAt","comment":"Returns the \u003ccode\u003echar\u003c/code\u003e value at the specified index.  An index ranges from zero\n to \u003ctt\u003elength() - 1\u003c/tt\u003e.  The first \u003ccode\u003echar\u003c/code\u003e value of the sequence is at\n index zero, the next at index one, and so on, as for array\n indexing.\n\n \u003cp\u003eIf the \u003ccode\u003echar\u003c/code\u003e value specified by the index is a\n \u003ca href\u003d\"{@docRoot}/java/lang/Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n value is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"char","qualifiedName":"char","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"index","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subSequence","comment":"Returns a \u003ccode\u003eCharSequence\u003c/code\u003e that is a subsequence of this sequence.\n The subsequence starts with the \u003ccode\u003echar\u003c/code\u003e value at the specified index and\n ends with the \u003ccode\u003echar\u003c/code\u003e value at index \u003ctt\u003eend - 1\u003c/tt\u003e.  The length\n (in \u003ccode\u003echar\u003c/code\u003es) of the\n returned sequence is \u003ctt\u003eend - start\u003c/tt\u003e, so if \u003ctt\u003estart \u003d\u003d end\u003c/tt\u003e\n then an empty sequence is returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"CharSequence","qualifiedName":"java.lang.CharSequence","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"end","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string containing the characters in this sequence in the same\n order as this sequence.  The length of the string will be the length of\n this sequence.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"chars","comment":"Returns a stream of {@code int} zero-extending the {@code char} values\n from this sequence.  Any char which maps to a \u003ca\n href\u003d\"{@docRoot}/java/lang/Character.html#unicode\"\u003esurrogate code\n point\u003c/a\u003e is passed through uninterpreted.\n\n \u003cp\u003eIf the sequence is mutated while the stream is being read, the\n result is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"codePoints","comment":"Returns a stream of code point values from this sequence.  Any surrogate\n pairs encountered in the sequence are combined as if by {@linkplain\n Character#toCodePoint Character.toCodePoint} and the result is passed\n to the stream. Any other code units, including ordinary BMP characters,\n unpaired surrogates, and undefined code units, are zero-extended to\n {@code int} values which are then passed to the stream.\n\n \u003cp\u003eIf the sequence is mutated while the stream is being read, the result\n is undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"IntStream","qualifiedName":"java.util.stream.IntStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.nio.CharBuffer","java.lang.StringBuilder","java.lang.StringBuffer","java.lang.String"],"enumConstants":[]}