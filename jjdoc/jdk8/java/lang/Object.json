{"name":"Object","comment":"Class {@code Object} is the root of the class hierarchy.\n Every class has {@code Object} as a superclass. All objects,\n including arrays, implement the methods of this class.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{},"package":"java.lang","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Object","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"getClass","comment":"Returns the runtime class of this {@code Object}. The returned\n {@code Class} object is the object that is locked by {@code\n static synchronized} methods of the represented class.\n\n \u003cp\u003e\u003cb\u003eThe actual result type is {@code Class\u003c? extends |X|\u003e}\n where {@code |X|} is the erasure of the static type of the\n expression on which {@code getClass} is called.\u003c/b\u003e For\n example, no cast is required in this code fragment:\u003c/p\u003e\n\n \u003cp\u003e\n {@code Number n \u003d 0;                             }\u003cbr\u003e\n {@code Class\u003c? extends Number\u003e c \u003d n.getClass(); }\n \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code value for the object. This method is\n supported for the benefit of hash tables such as those provided by\n {@link java.util.HashMap}.\n \u003cp\u003e\n The general contract of {@code hashCode} is:\n \u003cul\u003e\n \u003cli\u003eWhenever it is invoked on the same object more than once during\n     an execution of a Java application, the {@code hashCode} method\n     must consistently return the same integer, provided no information\n     used in {@code equals} comparisons on the object is modified.\n     This integer need not remain consistent from one execution of an\n     application to another execution of the same application.\n \u003cli\u003eIf two objects are equal according to the {@code equals(Object)}\n     method, then calling the {@code hashCode} method on each of\n     the two objects must produce the same integer result.\n \u003cli\u003eIt is \u003cem\u003enot\u003c/em\u003e required that if two objects are unequal\n     according to the {@link java.lang.Object#equals(java.lang.Object)}\n     method, then calling the {@code hashCode} method on each of the\n     two objects must produce distinct integer results.  However, the\n     programmer should be aware that producing distinct integer results\n     for unequal objects may improve the performance of hash tables.\n \u003c/ul\u003e\n \u003cp\u003e\n As much as is reasonably practical, the hashCode method defined by\n class {@code Object} does return distinct integers for distinct\n objects. (This is typically implemented by converting the internal\n address of the object into an integer, but this implementation\n technique is not required by the\n Java\u0026trade; programming language.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Indicates whether some other object is \"equal to\" this one.\n \u003cp\u003e\n The {@code equals} method implements an equivalence relation\n on non-null object references:\n \u003cul\u003e\n \u003cli\u003eIt is \u003ci\u003ereflexive\u003c/i\u003e: for any non-null reference value\n     {@code x}, {@code x.equals(x)} should return\n     {@code true}.\n \u003cli\u003eIt is \u003ci\u003esymmetric\u003c/i\u003e: for any non-null reference values\n     {@code x} and {@code y}, {@code x.equals(y)}\n     should return {@code true} if and only if\n     {@code y.equals(x)} returns {@code true}.\n \u003cli\u003eIt is \u003ci\u003etransitive\u003c/i\u003e: for any non-null reference values\n     {@code x}, {@code y}, and {@code z}, if\n     {@code x.equals(y)} returns {@code true} and\n     {@code y.equals(z)} returns {@code true}, then\n     {@code x.equals(z)} should return {@code true}.\n \u003cli\u003eIt is \u003ci\u003econsistent\u003c/i\u003e: for any non-null reference values\n     {@code x} and {@code y}, multiple invocations of\n     {@code x.equals(y)} consistently return {@code true}\n     or consistently return {@code false}, provided no\n     information used in {@code equals} comparisons on the\n     objects is modified.\n \u003cli\u003eFor any non-null reference value {@code x},\n     {@code x.equals(null)} should return {@code false}.\n \u003c/ul\u003e\n \u003cp\u003e\n The {@code equals} method for class {@code Object} implements\n the most discriminating possible equivalence relation on objects;\n that is, for any non-null reference values {@code x} and\n {@code y}, this method returns {@code true} if and only\n if {@code x} and {@code y} refer to the same object\n ({@code x \u003d\u003d y} has the value {@code true}).\n \u003cp\u003e\n Note that it is generally necessary to override the {@code hashCode}\n method whenever this method is overridden, so as to maintain the\n general contract for the {@code hashCode} method, which states\n that equal objects must have equal hash codes.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of the object. In general, the\n {@code toString} method returns a string that\n \"textually represents\" this object. The result should\n be a concise but informative representation that is easy for a\n person to read.\n It is recommended that all subclasses override this method.\n \u003cp\u003e\n The {@code toString} method for class {@code Object}\n returns a string consisting of the name of the class of which the\n object is an instance, the at-sign character `{@code @}\u0027, and\n the unsigned hexadecimal representation of the hash code of the\n object. In other words, this method returns a string equal to the\n value of:\n \u003cblockquote\u003e\n \u003cpre\u003e\n getClass().getName() + \u0027@\u0027 + Integer.toHexString(hashCode())\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"notify","comment":"Wakes up a single thread that is waiting on this object\u0027s\n monitor. If any threads are waiting on this object, one of them\n is chosen to be awakened. The choice is arbitrary and occurs at\n the discretion of the implementation. A thread waits on an object\u0027s\n monitor by calling one of the {@code wait} methods.\n \u003cp\u003e\n The awakened thread will not be able to proceed until the current\n thread relinquishes the lock on this object. The awakened thread will\n compete in the usual manner with any other threads that might be\n actively competing to synchronize on this object; for example, the\n awakened thread enjoys no reliable privilege or disadvantage in being\n the next thread to lock this object.\n \u003cp\u003e\n This method should only be called by a thread that is the owner\n of this object\u0027s monitor. A thread becomes the owner of the\n object\u0027s monitor in one of three ways:\n \u003cul\u003e\n \u003cli\u003eBy executing a synchronized instance method of that object.\n \u003cli\u003eBy executing the body of a {@code synchronized} statement\n     that synchronizes on the object.\n \u003cli\u003eFor objects of type {@code Class,} by executing a\n     synchronized static method of that class.\n \u003c/ul\u003e\n \u003cp\u003e\n Only one thread at a time can own an object\u0027s monitor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"notifyAll","comment":"Wakes up all threads that are waiting on this object\u0027s monitor. A\n thread waits on an object\u0027s monitor by calling one of the\n {@code wait} methods.\n \u003cp\u003e\n The awakened threads will not be able to proceed until the current\n thread relinquishes the lock on this object. The awakened threads\n will compete in the usual manner with any other threads that might\n be actively competing to synchronize on this object; for example,\n the awakened threads enjoy no reliable privilege or disadvantage in\n being the next thread to lock this object.\n \u003cp\u003e\n This method should only be called by a thread that is the owner\n of this object\u0027s monitor. See the {@code notify} method for a\n description of the ways in which a thread can become the owner of\n a monitor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"wait","comment":"Causes the current thread to wait until either another thread invokes the\n {@link java.lang.Object#notify()} method or the\n {@link java.lang.Object#notifyAll()} method for this object, or a\n specified amount of time has elapsed.\n \u003cp\u003e\n The current thread must own this object\u0027s monitor.\n \u003cp\u003e\n This method causes the current thread (call it \u003cvar\u003eT\u003c/var\u003e) to\n place itself in the wait set for this object and then to relinquish\n any and all synchronization claims on this object. Thread \u003cvar\u003eT\u003c/var\u003e\n becomes disabled for thread scheduling purposes and lies dormant\n until one of four things happens:\n \u003cul\u003e\n \u003cli\u003eSome other thread invokes the {@code notify} method for this\n object and thread \u003cvar\u003eT\u003c/var\u003e happens to be arbitrarily chosen as\n the thread to be awakened.\n \u003cli\u003eSome other thread invokes the {@code notifyAll} method for this\n object.\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt() interrupts}\n thread \u003cvar\u003eT\u003c/var\u003e.\n \u003cli\u003eThe specified amount of real time has elapsed, more or less.  If\n {@code timeout} is zero, however, then real time is not taken into\n consideration and the thread simply waits until notified.\n \u003c/ul\u003e\n The thread \u003cvar\u003eT\u003c/var\u003e is then removed from the wait set for this\n object and re-enabled for thread scheduling. It then competes in the\n usual manner with other threads for the right to synchronize on the\n object; once it has gained control of the object, all its\n synchronization claims on the object are restored to the status quo\n ante - that is, to the situation as of the time that the {@code wait}\n method was invoked. Thread \u003cvar\u003eT\u003c/var\u003e then returns from the\n invocation of the {@code wait} method. Thus, on return from the\n {@code wait} method, the synchronization state of the object and of\n thread {@code T} is exactly as it was when the {@code wait} method\n was invoked.\n \u003cp\u003e\n A thread can also wake up without being notified, interrupted, or\n timing out, a so-called \u003ci\u003espurious wakeup\u003c/i\u003e.  While this will rarely\n occur in practice, applications must guard against it by testing for\n the condition that should have caused the thread to be awakened, and\n continuing to wait if the condition is not satisfied.  In other words,\n waits should always occur in loops, like this one:\n \u003cpre\u003e\n     synchronized (obj) {\n         while (\u0026lt;condition does not hold\u0026gt;)\n             obj.wait(timeout);\n         ... // Perform action appropriate to condition\n     }\n \u003c/pre\u003e\n (For more information on this topic, see Section 3.2.3 in Doug Lea\u0027s\n \"Concurrent Programming in Java (Second Edition)\" (Addison-Wesley,\n 2000), or Item 50 in Joshua Bloch\u0027s \"Effective Java Programming\n Language Guide\" (Addison-Wesley, 2001).\n\n \u003cp\u003eIf the current thread is {@linkplain java.lang.Thread#interrupt()\n interrupted} by any thread before or while it is waiting, then an\n {@code InterruptedException} is thrown.  This exception is not\n thrown until the lock status of this object has been restored as\n described above.\n\n \u003cp\u003e\n Note that the {@code wait} method, as it places the current thread\n into the wait set for this object, unlocks only this object; any\n other objects on which the current thread may be synchronized remain\n locked while the thread waits.\n \u003cp\u003e\n This method should only be called by a thread that is the owner\n of this object\u0027s monitor. See the {@code notify} method for a\n description of the ways in which a thread can become the owner of\n a monitor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wait","comment":"Causes the current thread to wait until another thread invokes the\n {@link java.lang.Object#notify()} method or the\n {@link java.lang.Object#notifyAll()} method for this object, or\n some other thread interrupts the current thread, or a certain\n amount of real time has elapsed.\n \u003cp\u003e\n This method is similar to the {@code wait} method of one\n argument, but it allows finer control over the amount of time to\n wait for a notification before giving up. The amount of real time,\n measured in nanoseconds, is given by:\n \u003cblockquote\u003e\n \u003cpre\u003e\n 1000000*timeout+nanos\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n In all other respects, this method does the same thing as the\n method {@link #wait(long)} of one argument. In particular,\n {@code wait(0, 0)} means the same thing as {@code wait(0)}.\n \u003cp\u003e\n The current thread must own this object\u0027s monitor. The thread\n releases ownership of this monitor and waits until either of the\n following two conditions has occurred:\n \u003cul\u003e\n \u003cli\u003eAnother thread notifies threads waiting on this object\u0027s monitor\n     to wake up either through a call to the {@code notify} method\n     or the {@code notifyAll} method.\n \u003cli\u003eThe timeout period, specified by {@code timeout}\n     milliseconds plus {@code nanos} nanoseconds arguments, has\n     elapsed.\n \u003c/ul\u003e\n \u003cp\u003e\n The thread then waits until it can re-obtain ownership of the\n monitor and resumes execution.\n \u003cp\u003e\n As in the one argument version, interrupts and spurious wakeups are\n possible, and this method should always be used in a loop:\n \u003cpre\u003e\n     synchronized (obj) {\n         while (\u0026lt;condition does not hold\u0026gt;)\n             obj.wait(timeout, nanos);\n         ... // Perform action appropriate to condition\n     }\n \u003c/pre\u003e\n This method should only be called by a thread that is the owner\n of this object\u0027s monitor. See the {@code notify} method for a\n description of the ways in which a thread can become the owner of\n a monitor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, int)","flatSignature":"(long, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"nanos","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"wait","comment":"Causes the current thread to wait until another thread invokes the\n {@link java.lang.Object#notify()} method or the\n {@link java.lang.Object#notifyAll()} method for this object.\n In other words, this method behaves exactly as if it simply\n performs the call {@code wait(0)}.\n \u003cp\u003e\n The current thread must own this object\u0027s monitor. The thread\n releases ownership of this monitor and waits until another thread\n notifies threads waiting on this object\u0027s monitor to wake up\n either through a call to the {@code notify} method or the\n {@code notifyAll} method. The thread then waits until it can\n re-obtain ownership of the monitor and resumes execution.\n \u003cp\u003e\n As in the one argument version, interrupts and spurious wakeups are\n possible, and this method should always be used in a loop:\n \u003cpre\u003e\n     synchronized (obj) {\n         while (\u0026lt;condition does not hold\u0026gt;)\n             obj.wait();\n         ... // Perform action appropriate to condition\n     }\n \u003c/pre\u003e\n This method should only be called by a thread that is the owner\n of this object\u0027s monitor. See the {@code notify} method for a\n description of the ways in which a thread can become the owner of\n a monitor.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.Permission","java.lang.Throwable","java.security.URIParameter","java.security.Timestamp","java.security.Identity","java.security.SignedObject","java.security.SignatureSpi","java.security.Security","java.security.SecureRandomSpi","java.util.Random","java.lang.ClassLoader","java.util.Dictionary","java.security.Provider.Service","java.security.ProtectionDomain","java.security.PolicySpi","java.security.Policy","java.security.PermissionCollection","java.security.PKCS12Attribute","java.security.MessageDigestSpi","java.security.KeyStoreSpi","java.security.KeyStore","java.security.KeyStore.PasswordProtection","java.security.KeyStore.CallbackHandlerProtection","java.security.KeyStore.PrivateKeyEntry","java.security.KeyStore.SecretKeyEntry","java.security.KeyStore.TrustedCertificateEntry","java.security.KeyStore.Builder","java.security.KeyRep","java.lang.Enum","java.security.KeyPairGeneratorSpi","java.security.KeyPair","java.security.KeyFactorySpi","java.security.KeyFactory","java.security.GuardedObject","java.security.DomainLoadStoreParameter","java.io.OutputStream","java.io.InputStream","java.security.CodeSource","java.security.CodeSigner","java.security.AlgorithmParametersSpi","java.security.AlgorithmParameters","java.security.AlgorithmParameterGeneratorSpi","java.security.AlgorithmParameterGenerator","java.security.AccessController","java.security.AccessControlContext","java.security.spec.EncodedKeySpec","java.security.spec.RSAPublicKeySpec","java.security.spec.RSAPrivateKeySpec","java.security.spec.RSAOtherPrimeInfo","java.security.spec.RSAKeyGenParameterSpec","java.security.spec.PSSParameterSpec","java.security.spec.MGF1ParameterSpec","java.security.spec.EllipticCurve","java.security.spec.ECPublicKeySpec","java.security.spec.ECPrivateKeySpec","java.security.spec.ECPoint","java.security.spec.ECParameterSpec","java.security.spec.ECGenParameterSpec","java.security.spec.ECFieldFp","java.security.spec.ECFieldF2m","java.security.spec.DSAPublicKeySpec","java.security.spec.DSAPrivateKeySpec","java.security.spec.DSAParameterSpec","java.security.spec.DSAGenParameterSpec","java.security.cert.Certificate","java.security.cert.X509CertSelector","java.security.cert.X509CRLSelector","java.security.cert.X509CRLEntry","java.security.cert.CRL","java.security.cert.TrustAnchor","java.security.cert.PolicyQualifierInfo","java.security.cert.PKIXCertPathChecker","java.security.cert.PKIXParameters","java.security.cert.PKIXCertPathValidatorResult","java.security.cert.LDAPCertStoreParameters","java.security.cert.CollectionCertStoreParameters","java.security.cert.CertificateFactorySpi","java.security.cert.CertificateFactory","java.security.cert.CertStoreSpi","java.security.cert.CertStore","java.security.cert.CertPathValidatorSpi","java.security.cert.CertPathValidator","java.security.cert.CertPathBuilderSpi","java.security.cert.CertPathBuilder","java.security.cert.CertPath","java.net.URLStreamHandler","java.net.URLEncoder","java.net.URLDecoder","java.net.URLConnection","java.net.URL","java.net.URI","java.net.StandardSocketOptions","java.net.SocketImpl","java.net.SocketAddress","java.net.Socket","java.net.ServerSocket","java.net.CacheResponse","java.net.ResponseCache","java.net.ProxySelector","java.net.Proxy","java.net.PasswordAuthentication","java.net.NetworkInterface","java.net.DatagramSocket","java.net.InterfaceAddress","java.net.InetAddress","java.net.IDN","java.net.HttpCookie","java.net.DatagramSocketImpl","java.net.DatagramPacket","java.net.CookieHandler","java.net.ContentHandler","java.net.CacheRequest","java.net.Authenticator","java.nio.Buffer","java.nio.ByteOrder","java.nio.channels.spi.AbstractInterruptibleChannel","java.nio.channels.Selector","java.nio.channels.SelectionKey","java.nio.channels.Pipe","java.nio.channels.MembershipKey","java.nio.channels.FileLock","java.nio.channels.FileChannel.MapMode","java.nio.channels.Channels","java.nio.channels.AsynchronousSocketChannel","java.nio.channels.AsynchronousServerSocketChannel","java.nio.channels.AsynchronousFileChannel","java.nio.channels.AsynchronousChannelGroup","java.nio.channels.spi.SelectorProvider","java.nio.channels.spi.AsynchronousChannelProvider","java.nio.file.StandardWatchEventKinds","java.nio.file.SimpleFileVisitor","java.nio.file.Paths","java.nio.file.Files","java.nio.file.FileSystems","java.nio.file.FileSystem","java.nio.file.FileStore","java.nio.file.spi.FileTypeDetector","java.nio.file.spi.FileSystemProvider","java.nio.file.attribute.UserPrincipalLookupService","java.nio.file.attribute.PosixFilePermissions","java.nio.file.attribute.FileTime","java.nio.file.attribute.AclEntry","java.nio.file.attribute.AclEntry.Builder","java.nio.charset.StandardCharsets","java.nio.charset.CodingErrorAction","java.nio.charset.CoderResult","java.nio.charset.CharsetEncoder","java.nio.charset.CharsetDecoder","java.nio.charset.Charset","java.nio.charset.spi.CharsetProvider","java.text.StringCharacterIterator","java.text.Format","java.text.Collator","java.text.ParsePosition","java.text.AttributedCharacterIterator.Attribute","java.text.Normalizer","java.text.FieldPosition","java.text.DecimalFormatSymbols","java.text.DateFormatSymbols","java.text.CollationKey","java.text.CollationElementIterator","java.text.BreakIterator","java.text.Bidi","java.text.AttributedString","java.text.Annotation","java.util.spi.LocaleServiceProvider","java.lang.Void","java.lang.ThreadLocal","java.lang.ThreadGroup","java.lang.Thread","java.lang.System","java.lang.AbstractStringBuilder","java.lang.String","java.lang.StrictMath","java.lang.StackTraceElement","java.lang.Number","java.lang.SecurityManager","java.lang.Runtime","java.lang.ProcessBuilder","java.lang.ProcessBuilder.Redirect","java.lang.Process","java.lang.Package","java.lang.Math","java.lang.Compiler","java.lang.ClassValue","java.lang.Class","java.lang.Character","java.lang.Character.Subset","java.lang.Boolean","java.lang.instrument.ClassDefinition","java.lang.invoke.CallSite","java.lang.invoke.SwitchPoint","java.lang.invoke.SerializedLambda","java.lang.invoke.MethodType","java.lang.invoke.MethodHandles","java.lang.invoke.MethodHandles.Lookup","java.lang.invoke.MethodHandleProxies","java.lang.invoke.MethodHandle","java.lang.invoke.LambdaMetafactory","java.lang.ref.Reference","java.lang.ref.ReferenceQueue","java.lang.management.ThreadInfo","java.lang.management.LockInfo","java.lang.management.MemoryUsage","java.lang.management.MemoryNotificationInfo","java.lang.management.ManagementFactory","java.lang.reflect.Proxy","java.lang.reflect.Parameter","java.lang.reflect.Modifier","java.lang.reflect.AccessibleObject","java.lang.reflect.Array","java.io.Writer","java.io.Reader","java.io.StreamTokenizer","java.io.RandomAccessFile","java.io.ObjectStreamField","java.io.ObjectStreamClass","java.io.ObjectOutputStream.PutField","java.io.ObjectInputStream.GetField","java.io.FileDescriptor","java.io.File","java.io.Console","java.time.zone.ZoneRulesProvider","java.time.zone.ZoneRules","java.time.zone.ZoneOffsetTransitionRule","java.time.zone.ZoneOffsetTransition","java.time.ZonedDateTime","java.time.ZoneId","java.time.YearMonth","java.time.Year","java.time.Period","java.time.OffsetTime","java.time.OffsetDateTime","java.time.MonthDay","java.time.LocalTime","java.time.LocalDateTime","java.time.LocalDate","java.time.Instant","java.time.Duration","java.time.Clock","java.time.chrono.ChronoLocalDateImpl","java.time.chrono.AbstractChronology","java.time.chrono.JapaneseEra","java.time.temporal.WeekFields","java.time.temporal.ValueRange","java.time.temporal.TemporalQueries","java.time.temporal.TemporalAdjusters","java.time.temporal.JulianFields","java.time.temporal.IsoFields","java.time.format.DecimalStyle","java.time.format.DateTimeFormatterBuilder","java.time.format.DateTimeFormatter","java.util.zip.ZipFile","java.util.zip.ZipEntry","java.util.zip.Inflater","java.util.zip.Deflater","java.util.zip.CRC32","java.util.zip.Adler32","java.util.AbstractMap","java.util.AbstractCollection","java.util.UUID","java.util.TimerTask","java.util.Timer","java.util.TimeZone","java.util.StringTokenizer","java.util.StringJoiner","java.util.SplittableRandom","java.util.Spliterators","java.util.Spliterators.AbstractSpliterator","java.util.Spliterators.AbstractIntSpliterator","java.util.Spliterators.AbstractLongSpliterator","java.util.Spliterators.AbstractDoubleSpliterator","java.util.ServiceLoader","java.util.Scanner","java.util.ResourceBundle","java.util.ResourceBundle.Control","java.util.OptionalLong","java.util.OptionalInt","java.util.OptionalDouble","java.util.Optional","java.util.Observable","java.util.Objects","java.util.LongSummaryStatistics","java.util.Locale","java.util.Locale.Builder","java.util.Locale.LanguageRange","java.util.IntSummaryStatistics","java.util.Calendar","java.util.Formatter","java.util.FormattableFlags","java.util.EventObject","java.util.EventListenerProxy","java.util.DoubleSummaryStatistics","java.util.Date","java.util.Currency","java.util.Collections","java.util.Calendar.Builder","java.util.BitSet","java.util.Base64","java.util.Base64.Encoder","java.util.Base64.Decoder","java.util.Arrays","java.util.AbstractMap.SimpleEntry","java.util.AbstractMap.SimpleImmutableEntry","java.util.stream.StreamSupport","java.util.stream.Collectors","java.util.concurrent.AbstractExecutorService","java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy","java.util.concurrent.ThreadPoolExecutor.AbortPolicy","java.util.concurrent.ThreadPoolExecutor.DiscardPolicy","java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy","java.util.concurrent.Semaphore","java.util.concurrent.ForkJoinTask","java.util.concurrent.Phaser","java.util.concurrent.FutureTask","java.util.concurrent.Executors","java.util.concurrent.ExecutorCompletionService","java.util.concurrent.Exchanger","java.util.concurrent.CyclicBarrier","java.util.concurrent.CountDownLatch","java.util.concurrent.CopyOnWriteArrayList","java.util.concurrent.ConcurrentHashMap.CollectionView","java.util.concurrent.CompletableFuture","java.util.concurrent.locks.StampedLock","java.util.concurrent.locks.ReentrantReadWriteLock","java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","java.util.concurrent.locks.ReentrantLock","java.util.concurrent.locks.LockSupport","java.util.concurrent.locks.AbstractOwnableSynchronizer","java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject","java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject","java.util.concurrent.atomic.AtomicStampedReference","java.util.concurrent.atomic.AtomicReferenceFieldUpdater","java.util.concurrent.atomic.AtomicReferenceArray","java.util.concurrent.atomic.AtomicReference","java.util.concurrent.atomic.AtomicMarkableReference","java.util.concurrent.atomic.AtomicLongFieldUpdater","java.util.concurrent.atomic.AtomicLongArray","java.util.concurrent.atomic.AtomicIntegerFieldUpdater","java.util.concurrent.atomic.AtomicIntegerArray","java.util.concurrent.atomic.AtomicBoolean","java.util.regex.Pattern","java.util.regex.Matcher","java.util.prefs.Preferences","java.util.jar.Pack200","java.util.jar.Manifest","java.util.jar.Attributes","java.util.jar.Attributes.Name","java.util.logging.Formatter","java.util.logging.Handler","java.util.logging.Logger","java.util.logging.LogRecord","java.util.logging.LogManager","java.util.logging.Level","java.util.logging.ErrorManager","java.math.MathContext"],"enumConstants":[]}