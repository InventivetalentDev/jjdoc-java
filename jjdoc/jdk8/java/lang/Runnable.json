{"name":"Runnable","comment":"The \u003ccode\u003eRunnable\u003c/code\u003e interface should be implemented by any\n class whose instances are intended to be executed by a thread. The\n class must define a method of no arguments called \u003ccode\u003erun\u003c/code\u003e.\n \u003cp\u003e\n This interface is designed to provide a common protocol for objects that\n wish to execute code while they are active. For example,\n \u003ccode\u003eRunnable\u003c/code\u003e is implemented by class \u003ccode\u003eThread\u003c/code\u003e.\n Being active simply means that a thread has been started and has not\n yet been stopped.\n \u003cp\u003e\n In addition, \u003ccode\u003eRunnable\u003c/code\u003e provides the means for a class to be\n active while not subclassing \u003ccode\u003eThread\u003c/code\u003e. A class that implements\n \u003ccode\u003eRunnable\u003c/code\u003e can run without subclassing \u003ccode\u003eThread\u003c/code\u003e\n by instantiating a \u003ccode\u003eThread\u003c/code\u003e instance and passing itself in\n as the target.  In most cases, the \u003ccode\u003eRunnable\u003c/code\u003e interface should\n be used if you are only planning to override the \u003ccode\u003erun()\u003c/code\u003e\n method and no other \u003ccode\u003eThread\u003c/code\u003e methods.\n This is important because classes should not be subclassed\n unless the programmer intends on modifying or enhancing the fundamental\n behavior of the class.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Runnable","qualifiedName":"java.lang.Runnable","dimension":"","elementType":{},"package":"java.lang","interfaces":[],"isAbstract":true,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"run","comment":"When an object implementing interface \u003ccode\u003eRunnable\u003c/code\u003e is used\n to create a thread, starting the thread causes the object\u0027s\n \u003ccode\u003erun\u003c/code\u003e method to be called in that separately executing\n thread.\n \u003cp\u003e\n The general contract of the method \u003ccode\u003erun\u003c/code\u003e is that it may\n take any action whatsoever.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.lang.Thread","java.util.TimerTask","java.util.concurrent.RunnableFuture"],"enumConstants":[]}