{"name":"Process","comment":"The {@link ProcessBuilder#start()} and\n {@link Runtime#exec(String[],String[],File) Runtime.exec}\n methods create a native process and return an instance of a\n subclass of {@code Process} that can be used to control the process\n and obtain information about it.  The class {@code Process}\n provides methods for performing input from the process, performing\n output to the process, waiting for the process to complete,\n checking the exit status of the process, and destroying (killing)\n the process.\n\n \u003cp\u003eThe methods that create processes may not work well for special\n processes on certain native platforms, such as native windowing\n processes, daemon processes, Win16/DOS processes on Microsoft\n Windows, or shell scripts.\n\n \u003cp\u003eBy default, the created subprocess does not have its own terminal\n or console.  All its standard I/O (i.e. stdin, stdout, stderr)\n operations will be redirected to the parent process, where they can\n be accessed via the streams obtained using the methods\n {@link #getOutputStream()},\n {@link #getInputStream()}, and\n {@link #getErrorStream()}.\n The parent process uses these streams to feed input to and get output\n from the subprocess.  Because some native platforms only provide\n limited buffer size for standard input and output streams, failure\n to promptly write the input stream or read the output stream of\n the subprocess may cause the subprocess to block, or even deadlock.\n\n \u003cp\u003eWhere desired, \u003ca href\u003d\"ProcessBuilder.html#redirect-input\"\u003e\n subprocess I/O can also be redirected\u003c/a\u003e\n using methods of the {@link ProcessBuilder} class.\n\n \u003cp\u003eThe subprocess is not killed when there are no more references to\n the {@code Process} object, but rather the subprocess\n continues executing asynchronously.\n\n \u003cp\u003eThere is no requirement that a process represented by a {@code\n Process} object execute asynchronously or concurrently with respect\n to the Java process that owns the {@code Process} object.\n\n \u003cp\u003eAs of 1.5, {@link ProcessBuilder#start()} is the preferred way\n to create a {@code Process}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Process","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"getOutputStream","comment":"Returns the output stream connected to the normal input of the\n subprocess.  Output to the stream is piped into the standard\n input of the process represented by this {@code Process} object.\n\n \u003cp\u003eIf the standard input of the subprocess has been redirected using\n {@link ProcessBuilder#redirectInput(Redirect)\n ProcessBuilder.redirectInput}\n then this method will return a\n \u003ca href\u003d\"ProcessBuilder.html#redirect-input\"\u003enull output stream\u003c/a\u003e.\n\n \u003cp\u003eImplementation note: It is a good idea for the returned\n output stream to be buffered.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"OutputStream","qualifiedName":"java.io.OutputStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getInputStream","comment":"Returns the input stream connected to the normal output of the\n subprocess.  The stream obtains data piped from the standard\n output of the process represented by this {@code Process} object.\n\n \u003cp\u003eIf the standard output of the subprocess has been redirected using\n {@link ProcessBuilder#redirectOutput(Redirect)\n ProcessBuilder.redirectOutput}\n then this method will return a\n \u003ca href\u003d\"ProcessBuilder.html#redirect-output\"\u003enull input stream\u003c/a\u003e.\n\n \u003cp\u003eOtherwise, if the standard error of the subprocess has been\n redirected using\n {@link ProcessBuilder#redirectErrorStream(boolean)\n ProcessBuilder.redirectErrorStream}\n then the input stream returned by this method will receive the\n merged standard output and the standard error of the subprocess.\n\n \u003cp\u003eImplementation note: It is a good idea for the returned\n input stream to be buffered.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getErrorStream","comment":"Returns the input stream connected to the error output of the\n subprocess.  The stream obtains data piped from the error output\n of the process represented by this {@code Process} object.\n\n \u003cp\u003eIf the standard error of the subprocess has been redirected using\n {@link ProcessBuilder#redirectError(Redirect)\n ProcessBuilder.redirectError} or\n {@link ProcessBuilder#redirectErrorStream(boolean)\n ProcessBuilder.redirectErrorStream}\n then this method will return a\n \u003ca href\u003d\"ProcessBuilder.html#redirect-output\"\u003enull input stream\u003c/a\u003e.\n\n \u003cp\u003eImplementation note: It is a good idea for the returned\n input stream to be buffered.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"waitFor","comment":"Causes the current thread to wait, if necessary, until the\n process represented by this {@code Process} object has\n terminated.  This method returns immediately if the subprocess\n has already terminated.  If the subprocess has not yet\n terminated, the calling thread will be blocked until the\n subprocess exits.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"waitFor","comment":"Causes the current thread to wait, if necessary, until the\n subprocess represented by this {@code Process} object has\n terminated, or the specified waiting time elapses.\n\n \u003cp\u003eIf the subprocess has already terminated then this method returns\n immediately with the value {@code true}.  If the process has not\n terminated and the timeout value is less than, or equal to, zero, then\n this method returns immediately with the value {@code false}.\n\n \u003cp\u003eThe default implementation of this methods polls the {@code exitValue}\n to check if the process has terminated. Concrete implementations of this\n class are strongly encouraged to override this method with a more\n efficient implementation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, java.util.concurrent.TimeUnit)","flatSignature":"(long, TimeUnit)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"timeout","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"unit","type":{"isPrimitive":false,"simpleName":"TimeUnit","qualifiedName":"java.util.concurrent.TimeUnit","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exitValue","comment":"Returns the exit value for the subprocess.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"destroy","comment":"Kills the subprocess. Whether the subprocess represented by this\n {@code Process} object is forcibly terminated or not is\n implementation dependent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"destroyForcibly","comment":"Kills the subprocess. The subprocess represented by this\n {@code Process} object is forcibly terminated.\n\n \u003cp\u003eThe default implementation of this method invokes {@link #destroy}\n and so may not forcibly terminate the process. Concrete implementations\n of this class are strongly encouraged to override this method with a\n compliant implementation.  Invoking this method on {@code Process}\n objects returned by {@link ProcessBuilder#start} and\n {@link Runtime#exec} will forcibly terminate the process.\n\n \u003cp\u003eNote: The subprocess may not terminate immediately.\n i.e. {@code isAlive()} may return true for a brief period\n after {@code destroyForcibly()} is called. This method\n may be chained to {@code waitFor()} if needed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isAlive","comment":"Tests whether the subprocess represented by this {@code Process} is\n alive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}