{"name":"Math","comment":"The class {@code Math} contains methods for performing basic\n numeric operations such as the elementary exponential, logarithm,\n square root, and trigonometric functions.\n\n \u003cp\u003eUnlike some of the numeric methods of class\n {@code StrictMath}, all implementations of the equivalent\n functions of class {@code Math} are not defined to return the\n bit-for-bit same results.  This relaxation permits\n better-performing implementations where strict reproducibility is\n not required.\n\n \u003cp\u003eBy default many of the {@code Math} methods simply call\n the equivalent method in {@code StrictMath} for their\n implementation.  Code generators are encouraged to use\n platform-specific native libraries or microprocessor instructions,\n where available, to provide higher-performance implementations of\n {@code Math} methods.  Such higher-performance\n implementations still must conform to the specification for\n {@code Math}.\n\n \u003cp\u003eThe quality of implementation specifications concern two\n properties, accuracy of the returned result and monotonicity of the\n method.  Accuracy of the floating-point {@code Math} methods is\n measured in terms of \u003ci\u003eulps\u003c/i\u003e, units in the last place.  For a\n given floating-point format, an {@linkplain #ulp(double) ulp} of a\n specific real number value is the distance between the two\n floating-point values bracketing that numerical value.  When\n discussing the accuracy of a method as a whole rather than at a\n specific argument, the number of ulps cited is for the worst-case\n error at any argument.  If a method always has an error less than\n 0.5 ulps, the method always returns the floating-point number\n nearest the exact result; such a method is \u003ci\u003ecorrectly\n rounded\u003c/i\u003e.  A correctly rounded method is generally the best a\n floating-point approximation can be; however, it is impractical for\n many floating-point methods to be correctly rounded.  Instead, for\n the {@code Math} class, a larger error bound of 1 or 2 ulps is\n allowed for certain methods.  Informally, with a 1 ulp error bound,\n when the exact result is a representable number, the exact result\n should be returned as the computed result; otherwise, either of the\n two floating-point values which bracket the exact result may be\n returned.  For exact results large in magnitude, one of the\n endpoints of the bracket may be infinite.  Besides accuracy at\n individual arguments, maintaining proper relations between the\n method at different arguments is also important.  Therefore, most\n methods with more than 0.5 ulp errors are required to be\n \u003ci\u003esemi-monotonic\u003c/i\u003e: whenever the mathematical function is\n non-decreasing, so is the floating-point approximation, likewise,\n whenever the mathematical function is non-increasing, so is the\n floating-point approximation.  Not all approximations that have 1\n ulp accuracy will automatically meet the monotonicity requirements.\n\n \u003cp\u003e\n The platform uses signed two\u0027s complement integer arithmetic with\n int and long primitive types.  The developer should choose\n the primitive type to ensure that arithmetic operations consistently\n produce correct results, which in some cases means the operations\n will not overflow the range of values of the computation.\n The best practice is to choose the primitive type and algorithm to avoid\n overflow. In cases where the size is {@code int} or {@code long} and\n overflow errors need to be detected, the methods {@code addExact},\n {@code subtractExact}, {@code multiplyExact}, and {@code toIntExact}\n throw an {@code ArithmeticException} when the results overflow.\n For other arithmetic operations such as divide, absolute value,\n increment, decrement, and negation overflow occurs only with\n a specific minimum or maximum value and should be checked against\n the minimum or maximum as appropriate.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Math","qualifiedName":"java.lang.Math","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"E","comment":"The {@code double} value that is closer than any other to\n \u003ci\u003ee\u003c/i\u003e, the base of the natural logarithms.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2.718281828459045"},{"name":"PI","comment":"The {@code double} value that is closer than any other to\n \u003ci\u003epi\u003c/i\u003e, the ratio of the circumference of a circle to its\n diameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3.141592653589793"}],"methods":[{"name":"sin","comment":"Returns the trigonometric sine of an angle.  Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the\n result is NaN.\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"cos","comment":"Returns the trigonometric cosine of an angle. Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the\n result is NaN.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tan","comment":"Returns the trigonometric tangent of an angle.  Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the result\n is NaN.\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asin","comment":"Returns the arc sine of a value; the returned angle is in the\n range -\u003ci\u003epi\u003c/i\u003e/2 through \u003ci\u003epi\u003c/i\u003e/2.  Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or its absolute value is greater\n than 1, then the result is NaN.\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"acos","comment":"Returns the arc cosine of a value; the returned angle is in the\n range 0.0 through \u003ci\u003epi\u003c/i\u003e.  Special case:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or its absolute value is greater\n than 1, then the result is NaN.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atan","comment":"Returns the arc tangent of a value; the returned angle is in the\n range -\u003ci\u003epi\u003c/i\u003e/2 through \u003ci\u003epi\u003c/i\u003e/2.  Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN, then the result is NaN.\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toRadians","comment":"Converts an angle measured in degrees to an approximately\n equivalent angle measured in radians.  The conversion from\n degrees to radians is generally inexact.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"angdeg","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toDegrees","comment":"Converts an angle measured in radians to an approximately\n equivalent angle measured in degrees.  The conversion from\n radians to degrees is generally inexact; users should\n \u003ci\u003enot\u003c/i\u003e expect {@code cos(toRadians(90.0))} to exactly\n equal {@code 0.0}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"angrad","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"exp","comment":"Returns Euler\u0027s number \u003ci\u003ee\u003c/i\u003e raised to the power of a\n {@code double} value.  Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is NaN.\n \u003cli\u003eIf the argument is positive infinity, then the result is\n positive infinity.\n \u003cli\u003eIf the argument is negative infinity, then the result is\n positive zero.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"log","comment":"Returns the natural logarithm (base \u003ci\u003ee\u003c/i\u003e) of a {@code double}\n value.  Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n is NaN.\n \u003cli\u003eIf the argument is positive infinity, then the result is\n positive infinity.\n \u003cli\u003eIf the argument is positive zero or negative zero, then the\n result is negative infinity.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"log10","comment":"Returns the base 10 logarithm of a {@code double} value.\n Special cases:\n\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n is NaN.\n \u003cli\u003eIf the argument is positive infinity, then the result is\n positive infinity.\n \u003cli\u003eIf the argument is positive zero or negative zero, then the\n result is negative infinity.\n \u003cli\u003e If the argument is equal to 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e for\n integer \u003ci\u003en\u003c/i\u003e, then the result is \u003ci\u003en\u003c/i\u003e.\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sqrt","comment":"Returns the correctly rounded positive square root of a\n {@code double} value.\n Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n is NaN.\n \u003cli\u003eIf the argument is positive infinity, then the result is positive\n infinity.\n \u003cli\u003eIf the argument is positive zero or negative zero, then the\n result is the same as the argument.\u003c/ul\u003e\n Otherwise, the result is the {@code double} value closest to\n the true mathematical square root of the argument value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"cbrt","comment":"Returns the cube root of a {@code double} value.  For\n positive finite {@code x}, {@code cbrt(-x) \u003d\u003d\n -cbrt(x)}; that is, the cube root of a negative value is\n the negative of the cube root of that value\u0027s magnitude.\n\n Special cases:\n\n \u003cul\u003e\n\n \u003cli\u003eIf the argument is NaN, then the result is NaN.\n\n \u003cli\u003eIf the argument is infinite, then the result is an infinity\n with the same sign as the argument.\n\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"IEEEremainder","comment":"Computes the remainder operation on two arguments as prescribed\n by the IEEE 754 standard.\n The remainder value is mathematically equal to\n \u003ccode\u003ef1\u0026nbsp;-\u0026nbsp;f2\u003c/code\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003en\u003c/i\u003e,\n where \u003ci\u003en\u003c/i\u003e is the mathematical integer closest to the exact\n mathematical value of the quotient {@code f1/f2}, and if two\n mathematical integers are equally close to {@code f1/f2},\n then \u003ci\u003en\u003c/i\u003e is the integer that is even. If the remainder is\n zero, its sign is the same as the sign of the first argument.\n Special cases:\n \u003cul\u003e\u003cli\u003eIf either argument is NaN, or the first argument is infinite,\n or the second argument is positive zero or negative zero, then the\n result is NaN.\n \u003cli\u003eIf the first argument is finite and the second argument is\n infinite, then the result is the same as the first argument.\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f1","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"f2","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ceil","comment":"Returns the smallest (closest to negative infinity)\n {@code double} value that is greater than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  \u003cli\u003eIf the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.  \u003cli\u003eIf the argument value is less than zero but\n greater than -1.0, then the result is negative zero.\u003c/ul\u003e Note\n that the value of {@code Math.ceil(x)} is exactly the\n value of {@code -Math.floor(-x)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"floor","comment":"Returns the largest (closest to positive infinity)\n {@code double} value that is less than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  \u003cli\u003eIf the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"rint","comment":"Returns the {@code double} value that is closest in value\n to the argument and is equal to a mathematical integer. If two\n {@code double} values that are mathematical integers are\n equally close, the result is the integer value that is\n even. Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a mathematical\n integer, then the result is the same as the argument.\n \u003cli\u003eIf the argument is NaN or an infinity or positive zero or negative\n zero, then the result is the same as the argument.\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"atan2","comment":"Returns the angle \u003ci\u003etheta\u003c/i\u003e from the conversion of rectangular\n coordinates ({@code x},\u0026nbsp;{@code y}) to polar\n coordinates (r,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e).\n This method computes the phase \u003ci\u003etheta\u003c/i\u003e by computing an arc tangent\n of {@code y/x} in the range of -\u003ci\u003epi\u003c/i\u003e to \u003ci\u003epi\u003c/i\u003e. Special\n cases:\n \u003cul\u003e\u003cli\u003eIf either argument is NaN, then the result is NaN.\n \u003cli\u003eIf the first argument is positive zero and the second argument\n is positive, or the first argument is positive and finite and the\n second argument is positive infinity, then the result is positive\n zero.\n \u003cli\u003eIf the first argument is negative zero and the second argument\n is positive, or the first argument is negative and finite and the\n second argument is positive infinity, then the result is negative zero.\n \u003cli\u003eIf the first argument is positive zero and the second argument\n is negative, or the first argument is positive and finite and the\n second argument is negative infinity, then the result is the\n {@code double} value closest to \u003ci\u003epi\u003c/i\u003e.\n \u003cli\u003eIf the first argument is negative zero and the second argument\n is negative, or the first argument is negative and finite and the\n second argument is negative infinity, then the result is the\n {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e.\n \u003cli\u003eIf the first argument is positive and the second argument is\n positive zero or negative zero, or the first argument is positive\n infinity and the second argument is finite, then the result is the\n {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/2.\n \u003cli\u003eIf the first argument is negative and the second argument is\n positive zero or negative zero, or the first argument is negative\n infinity and the second argument is finite, then the result is the\n {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e/2.\n \u003cli\u003eIf both arguments are positive infinity, then the result is the\n {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/4.\n \u003cli\u003eIf the first argument is positive infinity and the second argument\n is negative infinity, then the result is the {@code double}\n value closest to 3*\u003ci\u003epi\u003c/i\u003e/4.\n \u003cli\u003eIf the first argument is negative infinity and the second argument\n is positive infinity, then the result is the {@code double} value\n closest to -\u003ci\u003epi\u003c/i\u003e/4.\n \u003cli\u003eIf both arguments are negative infinity, then the result is the\n {@code double} value closest to -3*\u003ci\u003epi\u003c/i\u003e/4.\u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 2 ulps of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"y","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"pow","comment":"Returns the value of the first argument raised to the power of the\n second argument. Special cases:\n\n \u003cul\u003e\u003cli\u003eIf the second argument is positive or negative zero, then the\n result is 1.0.\n \u003cli\u003eIf the second argument is 1.0, then the result is the same as the\n first argument.\n \u003cli\u003eIf the second argument is NaN, then the result is NaN.\n \u003cli\u003eIf the first argument is NaN and the second argument is nonzero,\n then the result is NaN.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe absolute value of the first argument is greater than 1\n and the second argument is positive infinity, or\n \u003cli\u003ethe absolute value of the first argument is less than 1 and\n the second argument is negative infinity,\n \u003c/ul\u003e\n then the result is positive infinity.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe absolute value of the first argument is greater than 1 and\n the second argument is negative infinity, or\n \u003cli\u003ethe absolute value of the\n first argument is less than 1 and the second argument is positive\n infinity,\n \u003c/ul\u003e\n then the result is positive zero.\n\n \u003cli\u003eIf the absolute value of the first argument equals 1 and the\n second argument is infinite, then the result is NaN.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe first argument is positive zero and the second argument\n is greater than zero, or\n \u003cli\u003ethe first argument is positive infinity and the second\n argument is less than zero,\n \u003c/ul\u003e\n then the result is positive zero.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe first argument is positive zero and the second argument\n is less than zero, or\n \u003cli\u003ethe first argument is positive infinity and the second\n argument is greater than zero,\n \u003c/ul\u003e\n then the result is positive infinity.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe first argument is negative zero and the second argument\n is greater than zero but not a finite odd integer, or\n \u003cli\u003ethe first argument is negative infinity and the second\n argument is less than zero but not a finite odd integer,\n \u003c/ul\u003e\n then the result is positive zero.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe first argument is negative zero and the second argument\n is a positive finite odd integer, or\n \u003cli\u003ethe first argument is negative infinity and the second\n argument is a negative finite odd integer,\n \u003c/ul\u003e\n then the result is negative zero.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe first argument is negative zero and the second argument\n is less than zero but not a finite odd integer, or\n \u003cli\u003ethe first argument is negative infinity and the second\n argument is greater than zero but not a finite odd integer,\n \u003c/ul\u003e\n then the result is positive infinity.\n\n \u003cli\u003eIf\n \u003cul\u003e\n \u003cli\u003ethe first argument is negative zero and the second argument\n is a negative finite odd integer, or\n \u003cli\u003ethe first argument is negative infinity and the second\n argument is a positive finite odd integer,\n \u003c/ul\u003e\n then the result is negative infinity.\n\n \u003cli\u003eIf the first argument is finite and less than zero\n \u003cul\u003e\n \u003cli\u003e if the second argument is a finite even integer, the\n result is equal to the result of raising the absolute value of\n the first argument to the power of the second argument\n\n \u003cli\u003eif the second argument is a finite odd integer, the result\n is equal to the negative of the result of raising the absolute\n value of the first argument to the power of the second\n argument\n\n \u003cli\u003eif the second argument is finite and not an integer, then\n the result is NaN.\n \u003c/ul\u003e\n\n \u003cli\u003eIf both arguments are integers, then the result is exactly equal\n to the mathematical result of raising the first argument to the power\n of the second argument if that result can in fact be represented\n exactly as a {@code double} value.\u003c/ul\u003e\n\n \u003cp\u003e(In the foregoing descriptions, a floating-point value is\n considered to be an integer if and only if it is finite and a\n fixed point of the method {@link #ceil ceil} or,\n equivalently, a fixed point of the method {@link #floor\n floor}. A value is a fixed point of a one-argument\n method if and only if the result of applying the method to the\n value is equal to the value.)\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"round","comment":"Returns the closest {@code int} to the argument, with ties\n rounding to positive infinity.\n\n \u003cp\u003e\n Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is 0.\n \u003cli\u003eIf the argument is negative infinity or any value less than or\n equal to the value of {@code Integer.MIN_VALUE}, the result is\n equal to the value of {@code Integer.MIN_VALUE}.\n \u003cli\u003eIf the argument is positive infinity or any value greater than or\n equal to the value of {@code Integer.MAX_VALUE}, the result is\n equal to the value of {@code Integer.MAX_VALUE}.\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"round","comment":"Returns the closest {@code long} to the argument, with ties\n rounding to positive infinity.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is 0.\n \u003cli\u003eIf the argument is negative infinity or any value less than or\n equal to the value of {@code Long.MIN_VALUE}, the result is\n equal to the value of {@code Long.MIN_VALUE}.\n \u003cli\u003eIf the argument is positive infinity or any value greater than or\n equal to the value of {@code Long.MAX_VALUE}, the result is\n equal to the value of {@code Long.MAX_VALUE}.\u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"random","comment":"Returns a {@code double} value with a positive sign, greater\n than or equal to {@code 0.0} and less than {@code 1.0}.\n Returned values are chosen pseudorandomly with (approximately)\n uniform distribution from that range.\n\n \u003cp\u003eWhen this method is first called, it creates a single new\n pseudorandom-number generator, exactly as if by the expression\n\n \u003cblockquote\u003e{@code new java.util.Random()}\u003c/blockquote\u003e\n\n This new pseudorandom-number generator is used thereafter for\n all calls to this method and is used nowhere else.\n\n \u003cp\u003eThis method is properly synchronized to allow correct use by\n more than one thread. However, if many threads need to generate\n pseudorandom numbers at a great rate, it may reduce contention\n for each thread to have its own pseudorandom-number generator.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"addExact","comment":"Returns the sum of its arguments,\n throwing an exception if the result overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"addExact","comment":"Returns the sum of its arguments,\n throwing an exception if the result overflows a {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtractExact","comment":"Returns the difference of the arguments,\n throwing an exception if the result overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"subtractExact","comment":"Returns the difference of the arguments,\n throwing an exception if the result overflows a {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"multiplyExact","comment":"Returns the product of the arguments,\n throwing an exception if the result overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"multiplyExact","comment":"Returns the product of the arguments,\n throwing an exception if the result overflows a {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"incrementExact","comment":"Returns the argument incremented by one, throwing an exception if the\n result overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"incrementExact","comment":"Returns the argument incremented by one, throwing an exception if the\n result overflows a {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decrementExact","comment":"Returns the argument decremented by one, throwing an exception if the\n result overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decrementExact","comment":"Returns the argument decremented by one, throwing an exception if the\n result overflows a {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"negateExact","comment":"Returns the negation of the argument, throwing an exception if the\n result overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"negateExact","comment":"Returns the negation of the argument, throwing an exception if the\n result overflows a {@code long}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toIntExact","comment":"Returns the value of the {@code long} argument;\n throwing an exception if the value overflows an {@code int}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"floorDiv","comment":"Returns the largest (closest to positive infinity)\n {@code int} value that is less than or equal to the algebraic quotient.\n There is one special case, if the dividend is the\n {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is {@code -1},\n then integer overflow occurs and\n the result is equal to the {@code Integer.MIN_VALUE}.\n \u003cp\u003e\n Normal integer division operates under the round to zero rounding mode\n (truncation).  This operation instead acts under the round toward\n negative infinity (floor) rounding mode.\n The floor rounding mode gives different results than truncation\n when the exact result is negative.\n \u003cul\u003e\n   \u003cli\u003eIf the signs of the arguments are the same, the results of\n       {@code floorDiv} and the {@code /} operator are the same.  \u003cbr\u003e\n       For example, {@code floorDiv(4, 3) \u003d\u003d 1} and {@code (4 / 3) \u003d\u003d 1}.\u003c/li\u003e\n   \u003cli\u003eIf the signs of the arguments are different,  the quotient is negative and\n       {@code floorDiv} returns the integer less than or equal to the quotient\n       and the {@code /} operator returns the integer closest to zero.\u003cbr\u003e\n       For example, {@code floorDiv(-4, 3) \u003d\u003d -2},\n       whereas {@code (-4 / 3) \u003d\u003d -1}.\n   \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"floorDiv","comment":"Returns the largest (closest to positive infinity)\n {@code long} value that is less than or equal to the algebraic quotient.\n There is one special case, if the dividend is the\n {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n then integer overflow occurs and\n the result is equal to the {@code Long.MIN_VALUE}.\n \u003cp\u003e\n Normal integer division operates under the round to zero rounding mode\n (truncation).  This operation instead acts under the round toward\n negative infinity (floor) rounding mode.\n The floor rounding mode gives different results than truncation\n when the exact result is negative.\n \u003cp\u003e\n For examples, see {@link #floorDiv(int, int)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"floorMod","comment":"Returns the floor modulus of the {@code int} arguments.\n \u003cp\u003e\n The floor modulus is {@code x - (floorDiv(x, y) * y)},\n has the same sign as the divisor {@code y}, and\n is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n\n \u003cp\u003e\n The relationship between {@code floorDiv} and {@code floorMod} is such that:\n \u003cul\u003e\n   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\n \u003c/ul\u003e\n \u003cp\u003e\n The difference in values between {@code floorMod} and\n the {@code %} operator is due to the difference between\n {@code floorDiv} that returns the integer less than or equal to the quotient\n and the {@code /} operator that returns the integer closest to zero.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n   \u003cli\u003eIf the signs of the arguments are the same, the results\n       of {@code floorMod} and the {@code %} operator are the same.  \u003cbr\u003e\n       \u003cul\u003e\n       \u003cli\u003e{@code floorMod(4, 3) \u003d\u003d 1}; \u0026nbsp; and {@code (4 % 3) \u003d\u003d 1}\u003c/li\u003e\n       \u003c/ul\u003e\n   \u003cli\u003eIf the signs of the arguments are different, the results differ from the {@code %} operator.\u003cbr\u003e\n      \u003cul\u003e\n      \u003cli\u003e{@code floorMod(+4, -3) \u003d\u003d -2}; \u0026nbsp; and {@code (+4 % -3) \u003d\u003d +1} \u003c/li\u003e\n      \u003cli\u003e{@code floorMod(-4, +3) \u003d\u003d +2}; \u0026nbsp; and {@code (-4 % +3) \u003d\u003d -1} \u003c/li\u003e\n      \u003cli\u003e{@code floorMod(-4, -3) \u003d\u003d -1}; \u0026nbsp; and {@code (-4 % -3) \u003d\u003d -1 } \u003c/li\u003e\n      \u003c/ul\u003e\n   \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n If the signs of arguments are unknown and a positive modulus\n is needed it can be computed as {@code (floorMod(x, y) + abs(y)) % abs(y)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"floorMod","comment":"Returns the floor modulus of the {@code long} arguments.\n \u003cp\u003e\n The floor modulus is {@code x - (floorDiv(x, y) * y)},\n has the same sign as the divisor {@code y}, and\n is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n\n \u003cp\u003e\n The relationship between {@code floorDiv} and {@code floorMod} is such that:\n \u003cul\u003e\n   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\n \u003c/ul\u003e\n \u003cp\u003e\n For examples, see {@link #floorMod(int, int)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"abs","comment":"Returns the absolute value of an {@code int} value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n\n \u003cp\u003eNote that if the argument is equal to the value of\n {@link Integer#MIN_VALUE}, the most negative representable\n {@code int} value, the result is that same value, which is\n negative.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"abs","comment":"Returns the absolute value of a {@code long} value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n\n \u003cp\u003eNote that if the argument is equal to the value of\n {@link Long#MIN_VALUE}, the most negative representable\n {@code long} value, the result is that same value, which\n is negative.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long)","flatSignature":"(long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"abs","comment":"Returns the absolute value of a {@code float} value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is positive zero or negative zero, the\n result is positive zero.\n \u003cli\u003eIf the argument is infinite, the result is positive infinity.\n \u003cli\u003eIf the argument is NaN, the result is NaN.\u003c/ul\u003e\n In other words, the result is the same as the value of the expression:\n \u003cp\u003e{@code Float.intBitsToFloat(0x7fffffff \u0026 Float.floatToIntBits(a))}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"abs","comment":"Returns the absolute value of a {@code double} value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n Special cases:\n \u003cul\u003e\u003cli\u003eIf the argument is positive zero or negative zero, the result\n is positive zero.\n \u003cli\u003eIf the argument is infinite, the result is positive infinity.\n \u003cli\u003eIf the argument is NaN, the result is NaN.\u003c/ul\u003e\n In other words, the result is the same as the value of the expression:\n \u003cp\u003e{@code Double.longBitsToDouble((Double.doubleToLongBits(a)\u003c\u003c1)\u003e\u003e\u003e1)}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the greater of two {@code int} values. That is, the\n result is the argument closer to the value of\n {@link Integer#MAX_VALUE}. If the arguments have the same value,\n the result is that same value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the greater of two {@code long} values. That is, the\n result is the argument closer to the value of\n {@link Long#MAX_VALUE}. If the arguments have the same value,\n the result is that same value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the greater of two {@code float} values.  That is,\n the result is the argument closer to positive infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float, float)","flatSignature":"(float, float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"max","comment":"Returns the greater of two {@code double} values.  That\n is, the result is the argument closer to positive infinity. If\n the arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the smaller of two {@code int} values. That is,\n the result the argument closer to the value of\n {@link Integer#MIN_VALUE}.  If the arguments have the same\n value, the result is that same value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the smaller of two {@code long} values. That is,\n the result is the argument closer to the value of\n {@link Long#MIN_VALUE}. If the arguments have the same\n value, the result is that same value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(long, long)","flatSignature":"(long, long)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the smaller of two {@code float} values.  That is,\n the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero.  If\n one argument is positive zero and the other is negative zero,\n the result is negative zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float, float)","flatSignature":"(float, float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"min","comment":"Returns the smaller of two {@code double} values.  That\n is, the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other is negative zero, the\n result is negative zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"a","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"b","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ulp","comment":"Returns the size of an ulp of the argument.  An ulp, unit in\n the last place, of a {@code double} value is the positive\n distance between this floating-point value and the {@code\n double} value next larger in magnitude.  Note that for non-NaN\n \u003ci\u003ex\u003c/i\u003e, \u003ccode\u003eulp(-\u003ci\u003ex\u003c/i\u003e) \u003d\u003d ulp(\u003ci\u003ex\u003c/i\u003e)\u003c/code\u003e.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, then the result is NaN.\n \u003cli\u003e If the argument is positive or negative infinity, then the\n result is positive infinity.\n \u003cli\u003e If the argument is positive or negative zero, then the result is\n {@code Double.MIN_VALUE}.\n \u003cli\u003e If the argument is \u0026plusmn;{@code Double.MAX_VALUE}, then\n the result is equal to 2\u003csup\u003e971\u003c/sup\u003e.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ulp","comment":"Returns the size of an ulp of the argument.  An ulp, unit in\n the last place, of a {@code float} value is the positive\n distance between this floating-point value and the {@code\n float} value next larger in magnitude.  Note that for non-NaN\n \u003ci\u003ex\u003c/i\u003e, \u003ccode\u003eulp(-\u003ci\u003ex\u003c/i\u003e) \u003d\u003d ulp(\u003ci\u003ex\u003c/i\u003e)\u003c/code\u003e.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, then the result is NaN.\n \u003cli\u003e If the argument is positive or negative infinity, then the\n result is positive infinity.\n \u003cli\u003e If the argument is positive or negative zero, then the result is\n {@code Float.MIN_VALUE}.\n \u003cli\u003e If the argument is \u0026plusmn;{@code Float.MAX_VALUE}, then\n the result is equal to 2\u003csup\u003e104\u003c/sup\u003e.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"signum","comment":"Returns the signum function of the argument; zero if the argument\n is zero, 1.0 if the argument is greater than zero, -1.0 if the\n argument is less than zero.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, then the result is NaN.\n \u003cli\u003e If the argument is positive zero or negative zero, then the\n      result is the same as the argument.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"signum","comment":"Returns the signum function of the argument; zero if the argument\n is zero, 1.0f if the argument is greater than zero, -1.0f if the\n argument is less than zero.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, then the result is NaN.\n \u003cli\u003e If the argument is positive zero or negative zero, then the\n      result is the same as the argument.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"sinh","comment":"Returns the hyperbolic sine of a {@code double} value.\n The hyperbolic sine of \u003ci\u003ex\u003c/i\u003e is defined to be\n (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/2\n where \u003ci\u003ee\u003c/i\u003e is {@linkplain Math#E Euler\u0027s number}.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n\n \u003cli\u003eIf the argument is NaN, then the result is NaN.\n\n \u003cli\u003eIf the argument is infinite, then the result is an infinity\n with the same sign as the argument.\n\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"cosh","comment":"Returns the hyperbolic cosine of a {@code double} value.\n The hyperbolic cosine of \u003ci\u003ex\u003c/i\u003e is defined to be\n (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;+\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/2\n where \u003ci\u003ee\u003c/i\u003e is {@linkplain Math#E Euler\u0027s number}.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n\n \u003cli\u003eIf the argument is NaN, then the result is NaN.\n\n \u003cli\u003eIf the argument is infinite, then the result is positive\n infinity.\n\n \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"tanh","comment":"Returns the hyperbolic tangent of a {@code double} value.\n The hyperbolic tangent of \u003ci\u003ex\u003c/i\u003e is defined to be\n (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/(\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;+\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e),\n in other words, {@linkplain Math#sinh\n sinh(\u003ci\u003ex\u003c/i\u003e)}/{@linkplain Math#cosh cosh(\u003ci\u003ex\u003c/i\u003e)}.  Note\n that the absolute value of the exact tanh is always less than\n 1.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n\n \u003cli\u003eIf the argument is NaN, then the result is NaN.\n\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \u003cli\u003eIf the argument is positive infinity, then the result is\n {@code +1.0}.\n\n \u003cli\u003eIf the argument is negative infinity, then the result is\n {@code -1.0}.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n The result of {@code tanh} for any finite input must have\n an absolute value less than or equal to 1.  Note that once the\n exact result of tanh is within 1/2 of an ulp of the limit value\n of \u0026plusmn;1, correctly signed \u0026plusmn;{@code 1.0} should\n be returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hypot","comment":"Returns sqrt(\u003ci\u003ex\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;+\u003ci\u003ey\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e)\n without intermediate overflow or underflow.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n\n \u003cli\u003e If either argument is infinite, then the result\n is positive infinity.\n\n \u003cli\u003e If either argument is NaN and neither argument is infinite,\n then the result is NaN.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact\n result.  If one parameter is held constant, the results must be\n semi-monotonic in the other parameter.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"expm1","comment":"Returns \u003ci\u003ee\u003c/i\u003e\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-1.  Note that for values of\n \u003ci\u003ex\u003c/i\u003e near 0, the exact sum of\n {@code expm1(x)}\u0026nbsp;+\u0026nbsp;1 is much closer to the true\n result of \u003ci\u003ee\u003c/i\u003e\u003csup\u003ex\u003c/sup\u003e than {@code exp(x)}.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n \u003cli\u003eIf the argument is NaN, the result is NaN.\n\n \u003cli\u003eIf the argument is positive infinity, then the result is\n positive infinity.\n\n \u003cli\u003eIf the argument is negative infinity, then the result is\n -1.0.\n\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.  The result of\n {@code expm1} for any finite input must be greater than or\n equal to {@code -1.0}.  Note that once the exact result of\n \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;1 is within 1/2\n ulp of the limit value -1, {@code -1.0} should be\n returned.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"log1p","comment":"Returns the natural logarithm of the sum of the argument and 1.\n Note that for small values {@code x}, the result of\n {@code log1p(x)} is much closer to the true result of ln(1\n + {@code x}) than the floating-point evaluation of\n {@code log(1.0+x)}.\n\n \u003cp\u003eSpecial cases:\n\n \u003cul\u003e\n\n \u003cli\u003eIf the argument is NaN or less than -1, then the result is\n NaN.\n\n \u003cli\u003eIf the argument is positive infinity, then the result is\n positive infinity.\n\n \u003cli\u003eIf the argument is negative one, then the result is\n negative infinity.\n\n \u003cli\u003eIf the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \u003c/ul\u003e\n\n \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"copySign","comment":"Returns the first floating-point argument with the sign of the\n second floating-point argument.  Note that unlike the {@link\n StrictMath#copySign(double, double) StrictMath.copySign}\n method, this method does not require NaN {@code sign}\n arguments to be treated as positive values; implementations are\n permitted to treat some NaN arguments as positive and other NaN\n arguments as negative to allow greater performance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"magnitude","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"sign","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"copySign","comment":"Returns the first floating-point argument with the sign of the\n second floating-point argument.  Note that unlike the {@link\n StrictMath#copySign(float, float) StrictMath.copySign}\n method, this method does not require NaN {@code sign}\n arguments to be treated as positive values; implementations are\n permitted to treat some NaN arguments as positive and other NaN\n arguments as negative to allow greater performance.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float, float)","flatSignature":"(float, float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"magnitude","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"sign","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getExponent","comment":"Returns the unbiased exponent used in the representation of a\n {@code float}.  Special cases:\n\n \u003cul\u003e\n \u003cli\u003eIf the argument is NaN or infinite, then the result is\n {@link Float#MAX_EXPONENT} + 1.\n \u003cli\u003eIf the argument is zero or subnormal, then the result is\n {@link Float#MIN_EXPONENT} -1.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getExponent","comment":"Returns the unbiased exponent used in the representation of a\n {@code double}.  Special cases:\n\n \u003cul\u003e\n \u003cli\u003eIf the argument is NaN or infinite, then the result is\n {@link Double#MAX_EXPONENT} + 1.\n \u003cli\u003eIf the argument is zero or subnormal, then the result is\n {@link Double#MIN_EXPONENT} -1.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextAfter","comment":"Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal the second argument is returned.\n\n \u003cp\u003e\n Special cases:\n \u003cul\u003e\n \u003cli\u003e If either argument is a NaN, then NaN is returned.\n\n \u003cli\u003e If both arguments are signed zeros, {@code direction}\n is returned unchanged (as implied by the requirement of\n returning the second argument if the arguments compare as\n equal).\n\n \u003cli\u003e If {@code start} is\n \u0026plusmn;{@link Double#MIN_VALUE} and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.\n\n \u003cli\u003e If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, {@link Double#MAX_VALUE} with the\n same sign as {@code start} is returned.\n\n \u003cli\u003e If {@code start} is equal to \u0026plusmn;\n {@link Double#MAX_VALUE} and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, double)","flatSignature":"(double, double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"start","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"direction","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextAfter","comment":"Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal a value equivalent to the second argument\n is returned.\n\n \u003cp\u003e\n Special cases:\n \u003cul\u003e\n \u003cli\u003e If either argument is a NaN, then NaN is returned.\n\n \u003cli\u003e If both arguments are signed zeros, a value equivalent\n to {@code direction} is returned.\n\n \u003cli\u003e If {@code start} is\n \u0026plusmn;{@link Float#MIN_VALUE} and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.\n\n \u003cli\u003e If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, {@link Float#MAX_VALUE} with the\n same sign as {@code start} is returned.\n\n \u003cli\u003e If {@code start} is equal to \u0026plusmn;\n {@link Float#MAX_VALUE} and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float, double)","flatSignature":"(float, double)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"start","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"direction","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextUp","comment":"Returns the floating-point value adjacent to {@code d} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(d,\n Double.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, the result is NaN.\n\n \u003cli\u003e If the argument is positive infinity, the result is\n positive infinity.\n\n \u003cli\u003e If the argument is zero, the result is\n {@link Double#MIN_VALUE}\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextUp","comment":"Returns the floating-point value adjacent to {@code f} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(f,\n Float.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, the result is NaN.\n\n \u003cli\u003e If the argument is positive infinity, the result is\n positive infinity.\n\n \u003cli\u003e If the argument is zero, the result is\n {@link Float#MIN_VALUE}\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextDown","comment":"Returns the floating-point value adjacent to {@code d} in\n the direction of negative infinity.  This method is\n semantically equivalent to {@code nextAfter(d,\n Double.NEGATIVE_INFINITY)}; however, a\n {@code nextDown} implementation may run faster than its\n equivalent {@code nextAfter} call.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, the result is NaN.\n\n \u003cli\u003e If the argument is negative infinity, the result is\n negative infinity.\n\n \u003cli\u003e If the argument is zero, the result is\n {@code -Double.MIN_VALUE}\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double)","flatSignature":"(double)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"nextDown","comment":"Returns the floating-point value adjacent to {@code f} in\n the direction of negative infinity.  This method is\n semantically equivalent to {@code nextAfter(f,\n Float.NEGATIVE_INFINITY)}; however, a\n {@code nextDown} implementation may run faster than its\n equivalent {@code nextAfter} call.\n\n \u003cp\u003eSpecial Cases:\n \u003cul\u003e\n \u003cli\u003e If the argument is NaN, the result is NaN.\n\n \u003cli\u003e If the argument is negative infinity, the result is\n negative infinity.\n\n \u003cli\u003e If the argument is zero, the result is\n {@code -Float.MIN_VALUE}\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float)","flatSignature":"(float)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"scalb","comment":"Returns {@code d} \u0026times;\n 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the double value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between {@link\n Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Double.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n \u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the result has the same\n sign as {@code d}.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n \u003cli\u003e If the first argument is NaN, NaN is returned.\n \u003cli\u003e If the first argument is infinite, then an infinity of the\n same sign is returned.\n \u003cli\u003e If the first argument is zero, then a zero of the same\n sign is returned.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(double, int)","flatSignature":"(double, int)","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"d","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"scaleFactor","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"scalb","comment":"Returns {@code f} \u0026times;\n 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the float value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between {@link\n Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Float.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n \u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the result has the same\n sign as {@code f}.\n\n \u003cp\u003eSpecial cases:\n \u003cul\u003e\n \u003cli\u003e If the first argument is NaN, NaN is returned.\n \u003cli\u003e If the first argument is infinite, then an infinity of the\n same sign is returned.\n \u003cli\u003e If the first argument is zero, then a zero of the same\n sign is returned.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(float, int)","flatSignature":"(float, int)","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"f","type":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}}},{"name":"scaleFactor","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}