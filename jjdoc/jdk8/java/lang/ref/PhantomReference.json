{"name":"PhantomReference","comment":"Phantom reference objects, which are enqueued after the collector\n determines that their referents may otherwise be reclaimed.  Phantom\n references are most often used for scheduling pre-mortem cleanup actions in\n a more flexible way than is possible with the Java finalization mechanism.\n\n \u003cp\u003e If the garbage collector determines at a certain point in time that the\n referent of a phantom reference is \u003ca\n href\u003d\"package-summary.html#reachability\"\u003ephantom reachable\u003c/a\u003e, then at that\n time or at some later time it will enqueue the reference.\n\n \u003cp\u003e In order to ensure that a reclaimable object remains so, the referent of\n a phantom reference may not be retrieved: The \u003ccode\u003eget\u003c/code\u003e method of a\n phantom reference always returns \u003ccode\u003enull\u003c/code\u003e.\n\n \u003cp\u003e Unlike soft and weak references, phantom references are not\n automatically cleared by the garbage collector as they are enqueued.  An\n object that is reachable via phantom references will remain so until all\n such references are cleared or themselves become unreachable.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PhantomReference","qualifiedName":"java.lang.ref.PhantomReference","dimension":"","elementType":{},"package":"java.lang.ref","superclass":"java.lang.ref.Reference","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.2","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PhantomReference","comment":"Creates a new phantom reference that refers to the given object and\n is registered with the given queue.\n\n \u003cp\u003e It is possible to create a phantom reference with a \u003ctt\u003enull\u003c/tt\u003e\n queue, but such a reference is completely useless: Its \u003ctt\u003eget\u003c/tt\u003e\n method will always return null and, since it does not have a queue, it\n will never be enqueued.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(T, java.lang.ref.ReferenceQueue\u003c? super T\u003e)","flatSignature":"(T, ReferenceQueue\u003c? super T\u003e)","parameters":[{"name":"referent","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"q","type":{"isPrimitive":false,"simpleName":"ReferenceQueue","qualifiedName":"java.lang.ref.ReferenceQueue","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"get","comment":"Returns this reference object\u0027s referent.  Because the referent of a\n phantom reference is always inaccessible, this method always returns\n \u003ccode\u003enull\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"enumConstants":[]}