{"name":"SafeVarargs","comment":"A programmer assertion that the body of the annotated method or\n constructor does not perform potentially unsafe operations on its\n varargs parameter.  Applying this annotation to a method or\n constructor suppresses unchecked warnings about a\n \u003ci\u003enon-reifiable\u003c/i\u003e variable arity (vararg) type and suppresses\n unchecked warnings about parameterized array creation at call\n sites.\n\n \u003cp\u003e In addition to the usage restrictions imposed by its {@link\n Target @Target} meta-annotation, compilers are required to implement\n additional usage restrictions on this annotation type; it is a\n compile-time error if a method or constructor declaration is\n annotated with a {@code @SafeVarargs} annotation, and either:\n \u003cul\u003e\n \u003cli\u003e  the declaration is a fixed arity method or constructor\n\n \u003cli\u003e the declaration is a variable arity method that is neither\n {@code static} nor {@code final}.\n\n \u003c/ul\u003e\n\n \u003cp\u003e Compilers are encouraged to issue warnings when this annotation\n type is applied to a method or constructor declaration where:\n\n \u003cul\u003e\n\n \u003cli\u003e The variable arity parameter has a reifiable element type,\n which includes primitive types, {@code Object}, and {@code String}.\n (The unchecked warnings this annotation type suppresses already do\n not occur for a reifiable element type.)\n\n \u003cli\u003e The body of the method or constructor declaration performs\n potentially unsafe operations, such as an assignment to an element\n of the variable arity parameter\u0027s array that generates an unchecked\n warning.  Some unsafe operations do not trigger an unchecked\n warning.  For example, the aliasing in\n\n \u003cblockquote\u003e\u003cpre\u003e\n \u0026#64;SafeVarargs // Not actually safe!\n static void m(List\u0026lt;String\u0026gt;... stringLists) {\n   Object[] array \u003d stringLists;\n   List\u0026lt;Integer\u0026gt; tmpList \u003d Arrays.asList(42);\n   array[0] \u003d tmpList; // Semantically invalid, but compiles without warnings\n   String s \u003d stringLists[0].get(0); // Oh no, ClassCastException at runtime!\n }\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n leads to a {@code ClassCastException} at runtime.\n\n \u003cp\u003eFuture versions of the platform may mandate compiler errors for\n such unsafe operations.\n\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"SafeVarargs","qualifiedName":"java.lang.SafeVarargs","dimension":"","elementType":{},"package":"java.lang","interfaces":["java.lang.annotation.Annotation"],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[],"typeParameters":[],"enumConstants":[]}