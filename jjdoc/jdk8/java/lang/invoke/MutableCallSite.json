{"name":"MutableCallSite","comment":"A {@code MutableCallSite} is a {@link CallSite} whose target variable\n behaves like an ordinary field.\n An {@code invokedynamic} instruction linked to a {@code MutableCallSite} delegates\n all calls to the site\u0027s current target.\n The {@linkplain CallSite#dynamicInvoker dynamic invoker} of a mutable call site\n also delegates each call to the site\u0027s current target.\n \u003cp\u003e\n Here is an example of a mutable call site which introduces a\n state variable into a method handle chain.\n \u003c!-- JavaDocExamplesTest.testMutableCallSite --\u003e\n \u003cblockquote\u003e\u003cpre\u003e{@code\nMutableCallSite name \u003d new MutableCallSite(MethodType.methodType(String.class));\nMethodHandle MH_name \u003d name.dynamicInvoker();\nMethodType MT_str1 \u003d MethodType.methodType(String.class);\nMethodHandle MH_upcase \u003d MethodHandles.lookup()\n    .findVirtual(String.class, \"toUpperCase\", MT_str1);\nMethodHandle worker1 \u003d MethodHandles.filterReturnValue(MH_name, MH_upcase);\nname.setTarget(MethodHandles.constant(String.class, \"Rocky\"));\nassertEquals(\"ROCKY\", (String) worker1.invokeExact());\nname.setTarget(MethodHandles.constant(String.class, \"Fred\"));\nassertEquals(\"FRED\", (String) worker1.invokeExact());\n// (mutation can be continued indefinitely)\n }\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n The same call site may be used in several places at once.\n \u003cblockquote\u003e\u003cpre\u003e{@code\nMethodType MT_str2 \u003d MethodType.methodType(String.class, String.class);\nMethodHandle MH_cat \u003d lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_dear \u003d MethodHandles.insertArguments(MH_cat, 1, \", dear?\");\nMethodHandle worker2 \u003d MethodHandles.filterReturnValue(MH_name, MH_dear);\nassertEquals(\"Fred, dear?\", (String) worker2.invokeExact());\nname.setTarget(MethodHandles.constant(String.class, \"Wilma\"));\nassertEquals(\"WILMA\", (String) worker1.invokeExact());\nassertEquals(\"Wilma, dear?\", (String) worker2.invokeExact());\n }\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n \u003cem\u003eNon-synchronization of target values:\u003c/em\u003e\n A write to a mutable call site\u0027s target does not force other threads\n to become aware of the updated value.  Threads which do not perform\n suitable synchronization actions relative to the updated call site\n may cache the old target value and delay their use of the new target\n value indefinitely.\n (This is a normal consequence of the Java Memory Model as applied\n to object fields.)\n \u003cp\u003e\n The {@link #syncAll syncAll} operation provides a way to force threads\n to accept a new target value, even if there is no other synchronization.\n \u003cp\u003e\n For target values which will be frequently updated, consider using\n a {@linkplain VolatileCallSite volatile call site} instead.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"MutableCallSite","qualifiedName":"java.lang.invoke.MutableCallSite","dimension":"","elementType":{},"package":"java.lang.invoke","superclass":"java.lang.invoke.CallSite","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"MutableCallSite","comment":"Creates a blank call site object with the given method type.\n The initial target is set to a method handle of the given type\n which will throw an {@link IllegalStateException} if called.\n \u003cp\u003e\n The type of the call site is permanently set to the given type.\n \u003cp\u003e\n Before this {@code CallSite} object is returned from a bootstrap method,\n or invoked in some other manner,\n it is usually provided with a more useful target method,\n via a call to {@link CallSite#setTarget(MethodHandle) setTarget}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodType)","flatSignature":"(MethodType)","parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"MutableCallSite","comment":"Creates a call site object with an initial target method handle.\n The type of the call site is permanently set to the initial target\u0027s type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodHandle)","flatSignature":"(MethodHandle)","parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getTarget","comment":"Returns the target method of the call site, which behaves\n like a normal field of the {@code MutableCallSite}.\n \u003cp\u003e\n The interactions of {@code getTarget} with memory are the same\n as of a read from an ordinary variable, such as an array element or a\n non-volatile, non-final field.\n \u003cp\u003e\n In particular, the current thread may choose to reuse the result\n of a previous read of the target from memory, and may fail to see\n a recent update to the target by another thread.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTarget","comment":"Updates the target method of this call site, as a normal variable.\n The type of the new target must agree with the type of the old target.\n \u003cp\u003e\n The interactions with memory are the same\n as of a write to an ordinary variable, such as an array element or a\n non-volatile, non-final field.\n \u003cp\u003e\n In particular, unrelated threads may fail to see the updated target\n until they perform a read from memory.\n Stronger guarantees can be created by putting appropriate operations\n into the bootstrap method and/or the target methods used\n at any given call site.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodHandle)","flatSignature":"(MethodHandle)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newTarget","type":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dynamicInvoker","comment":"{@inheritDoc}","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"syncAll","comment":"Performs a synchronization operation on each call site in the given array,\n forcing all other threads to throw away any cached values previously\n loaded from the target of any of the call sites.\n \u003cp\u003e\n This operation does not reverse any calls that have already started\n on an old target value.\n (Java supports {@linkplain java.lang.Object#wait() forward time travel} only.)\n \u003cp\u003e\n The overall effect is to force all future readers of each call site\u0027s target\n to accept the most recently stored value.\n (\"Most recently\" is reckoned relative to the {@code syncAll} itself.)\n Conversely, the {@code syncAll} call may block until all readers have\n (somehow) decached all previous versions of each call site\u0027s target.\n \u003cp\u003e\n To avoid race conditions, calls to {@code setTarget} and {@code syncAll}\n should generally be performed under some sort of mutual exclusion.\n Note that reader threads may observe an updated target as early\n as the {@code setTarget} call that install the value\n (and before the {@code syncAll} that confirms the value).\n On the other hand, reader threads may observe previous versions of\n the target until the {@code syncAll} call returns\n (and after the {@code setTarget} that attempts to convey the updated version).\n \u003cp\u003e\n This operation is likely to be expensive and should be used sparingly.\n If possible, it should be buffered for batch processing on sets of call sites.\n \u003cp\u003e\n If {@code sites} contains a null element,\n a {@code NullPointerException} will be raised.\n In this case, some non-null elements in the array may be\n processed before the method returns abnormally.\n Which elements these are (if any) is implementation-dependent.\n\n \u003ch1\u003eJava Memory Model details\u003c/h1\u003e\n In terms of the Java Memory Model, this operation performs a synchronization\n action which is comparable in effect to the writing of a volatile variable\n by the current thread, and an eventual volatile read by every other thread\n that may access one of the affected call sites.\n \u003cp\u003e\n The following effects are apparent, for each individual call site {@code S}:\n \u003cul\u003e\n \u003cli\u003eA new volatile variable {@code V} is created, and written by the current thread.\n     As defined by the JMM, this write is a global synchronization event.\n \u003cli\u003eAs is normal with thread-local ordering of write events,\n     every action already performed by the current thread is\n     taken to happen before the volatile write to {@code V}.\n     (In some implementations, this means that the current thread\n     performs a global release operation.)\n \u003cli\u003eSpecifically, the write to the current target of {@code S} is\n     taken to happen before the volatile write to {@code V}.\n \u003cli\u003eThe volatile write to {@code V} is placed\n     (in an implementation specific manner)\n     in the global synchronization order.\n \u003cli\u003eConsider an arbitrary thread {@code T} (other than the current thread).\n     If {@code T} executes a synchronization action {@code A}\n     after the volatile write to {@code V} (in the global synchronization order),\n     it is therefore required to see either the current target\n     of {@code S}, or a later write to that target,\n     if it executes a read on the target of {@code S}.\n     (This constraint is called \"synchronization-order consistency\".)\n \u003cli\u003eThe JMM specifically allows optimizing compilers to elide\n     reads or writes of variables that are known to be useless.\n     Such elided reads and writes have no effect on the happens-before\n     relation.  Regardless of this fact, the volatile {@code V}\n     will not be elided, even though its written value is\n     indeterminate and its read value is not used.\n \u003c/ul\u003e\n Because of the last point, the implementation behaves as if a\n volatile read of {@code V} were performed by {@code T}\n immediately after its action {@code A}.  In the local ordering\n of actions in {@code T}, this read happens before any future\n read of the target of {@code S}.  It is as if the\n implementation arbitrarily picked a read of {@code S}\u0027s target\n by {@code T}, and forced a read of {@code V} to precede it,\n thereby ensuring communication of the new target value.\n \u003cp\u003e\n As long as the constraints of the Java Memory Model are obeyed,\n implementations may delay the completion of a {@code syncAll}\n operation while other threads ({@code T} above) continue to\n use previous values of {@code S}\u0027s target.\n However, implementations are (as always) encouraged to avoid\n livelock, and to eventually require all threads to take account\n of the updated target.\n\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n For performance reasons, {@code syncAll} is not a virtual method\n on a single call site, but rather applies to a set of call sites.\n Some implementations may incur a large fixed overhead cost\n for processing one or more synchronization operations,\n but a small incremental cost for each additional call site.\n In any case, this operation is likely to be costly, since\n other threads may have to be somehow interrupted\n in order to make them notice the updated target value.\n However, it may be observed that a single call to synchronize\n several sites has the same formal effect as many calls,\n each on just one of the sites.\n\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eImplementation Note:\u003c/em\u003e\n Simple implementations of {@code MutableCallSite} may use\n a volatile variable for the target of a mutable call site.\n In such an implementation, the {@code syncAll} method can be a no-op,\n and yet it will conform to the JMM behavior documented above.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MutableCallSite[])","flatSignature":"(MutableCallSite[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"sites","type":{"isPrimitive":false,"simpleName":"MutableCallSite","qualifiedName":"java.lang.invoke.MutableCallSite","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"MutableCallSite","qualifiedName":"java.lang.invoke.MutableCallSite","dimension":"","elementType":{}}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}