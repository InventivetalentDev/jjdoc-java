{"name":"MethodHandles.Lookup","comment":"A \u003cem\u003elookup object\u003c/em\u003e is a factory for creating method handles,\n when the creation requires access checking.\n Method handles do not perform\n access checks when they are called, but rather when they are created.\n Therefore, method handle access\n restrictions must be enforced when a method handle is created.\n The caller class against which those restrictions are enforced\n is known as the {@linkplain #lookupClass lookup class}.\n \u003cp\u003e\n A lookup class which needs to create method handles will call\n {@link MethodHandles#lookup MethodHandles.lookup} to create a factory for itself.\n When the {@code Lookup} factory object is created, the identity of the lookup class is\n determined, and securely stored in the {@code Lookup} object.\n The lookup class (or its delegates) may then use factory methods\n on the {@code Lookup} object to create method handles for access-checked members.\n This includes all methods, constructors, and fields which are allowed to the lookup class,\n even private ones.\n\n \u003ch1\u003e\u003ca name\u003d\"lookups\"\u003e\u003c/a\u003eLookup Factory Methods\u003c/h1\u003e\n The factory methods on a {@code Lookup} object correspond to all major\n use cases for methods, constructors, and fields.\n Each method handle created by a factory method is the functional\n equivalent of a particular \u003cem\u003ebytecode behavior\u003c/em\u003e.\n (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.)\n Here is a summary of the correspondence between these factory methods and\n the behavior the resulting method handles:\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"lookup method behaviors\"\u003e\n \u003ctr\u003e\n     \u003cth\u003e\u003ca name\u003d\"equiv\"\u003e\u003c/a\u003elookup expression\u003c/th\u003e\n     \u003cth\u003emember\u003c/th\u003e\n     \u003cth\u003ebytecode behavior\u003c/th\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findGetter lookup.findGetter(C.class,\"f\",FT.class)}\u003c/td\u003e\n     \u003ctd\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code (T) this.f;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findStaticGetter lookup.findStaticGetter(C.class,\"f\",FT.class)}\u003c/td\u003e\n     \u003ctd\u003e{@code static}\u003cbr\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code (T) C.f;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findSetter lookup.findSetter(C.class,\"f\",FT.class)}\u003c/td\u003e\n     \u003ctd\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code this.f \u003d x;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findStaticSetter lookup.findStaticSetter(C.class,\"f\",FT.class)}\u003c/td\u003e\n     \u003ctd\u003e{@code static}\u003cbr\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code C.f \u003d arg;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findVirtual lookup.findVirtual(C.class,\"m\",MT)}\u003c/td\u003e\n     \u003ctd\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) this.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findStatic lookup.findStatic(C.class,\"m\",MT)}\u003c/td\u003e\n     \u003ctd\u003e{@code static}\u003cbr\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) C.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findSpecial lookup.findSpecial(C.class,\"m\",MT,this.class)}\u003c/td\u003e\n     \u003ctd\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) super.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#findConstructor lookup.findConstructor(C.class,MT)}\u003c/td\u003e\n     \u003ctd\u003e{@code C(A*);}\u003c/td\u003e\u003ctd\u003e{@code new C(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#unreflectGetter lookup.unreflectGetter(aField)}\u003c/td\u003e\n     \u003ctd\u003e({@code static})?\u003cbr\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code (FT) aField.get(thisOrNull);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#unreflectSetter lookup.unreflectSetter(aField)}\u003c/td\u003e\n     \u003ctd\u003e({@code static})?\u003cbr\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code aField.set(thisOrNull, arg);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#unreflect lookup.unreflect(aMethod)}\u003c/td\u003e\n     \u003ctd\u003e({@code static})?\u003cbr\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) aMethod.invoke(thisOrNull, arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#unreflectConstructor lookup.unreflectConstructor(aConstructor)}\u003c/td\u003e\n     \u003ctd\u003e{@code C(A*);}\u003c/td\u003e\u003ctd\u003e{@code (C) aConstructor.newInstance(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@link java.lang.invoke.MethodHandles.Lookup#unreflect lookup.unreflect(aMethod)}\u003c/td\u003e\n     \u003ctd\u003e({@code static})?\u003cbr\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) aMethod.invoke(thisOrNull, arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n\n Here, the type {@code C} is the class or interface being searched for a member,\n documented as a parameter named {@code refc} in the lookup methods.\n The method type {@code MT} is composed from the return type {@code T}\n and the sequence of argument types {@code A*}.\n The constructor also has a sequence of argument types {@code A*} and\n is deemed to return the newly-created object of type {@code C}.\n Both {@code MT} and the field type {@code FT} are documented as a parameter named {@code type}.\n The formal parameter {@code this} stands for the self-reference of type {@code C};\n if it is present, it is always the leading argument to the method handle invocation.\n (In the case of some {@code protected} members, {@code this} may be\n restricted in type to the lookup class; see below.)\n The name {@code arg} stands for all the other method handle arguments.\n In the code examples for the Core Reflection API, the name {@code thisOrNull}\n stands for a null reference if the accessed method or field is static,\n and {@code this} otherwise.\n The names {@code aMethod}, {@code aField}, and {@code aConstructor} stand\n for reflective objects corresponding to the given members.\n \u003cp\u003e\n In cases where the given member is of variable arity (i.e., a method or constructor)\n the returned method handle will also be of {@linkplain MethodHandle#asVarargsCollector variable arity}.\n In all other cases, the returned method handle will be of fixed arity.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n The equivalence between looked-up method handles and underlying\n class members and bytecode behaviors\n can break down in a few ways:\n \u003cul style\u003d\"font-size:smaller;\"\u003e\n \u003cli\u003eIf {@code C} is not symbolically accessible from the lookup class\u0027s loader,\n the lookup can still succeed, even when there is no equivalent\n Java expression or bytecoded constant.\n \u003cli\u003eLikewise, if {@code T} or {@code MT}\n is not symbolically accessible from the lookup class\u0027s loader,\n the lookup can still succeed.\n For example, lookups for {@code MethodHandle.invokeExact} and\n {@code MethodHandle.invoke} will always succeed, regardless of requested type.\n \u003cli\u003eIf there is a security manager installed, it can forbid the lookup\n on various grounds (\u003ca href\u003d\"MethodHandles.Lookup.html#secmgr\"\u003esee below\u003c/a\u003e).\n By contrast, the {@code ldc} instruction on a {@code CONSTANT_MethodHandle}\n constant is not subject to security manager checks.\n \u003cli\u003eIf the looked-up method has a\n \u003ca href\u003d\"MethodHandle.html#maxarity\"\u003every large arity\u003c/a\u003e,\n the method handle creation may fail, due to the method handle\n type having too many parameters.\n \u003c/ul\u003e\n\n \u003ch1\u003e\u003ca name\u003d\"access\"\u003e\u003c/a\u003eAccess checking\u003c/h1\u003e\n Access checks are applied in the factory methods of {@code Lookup},\n when a method handle is created.\n This is a key difference from the Core Reflection API, since\n {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}\n performs access checking against every caller, on every call.\n \u003cp\u003e\n All access checks start from a {@code Lookup} object, which\n compares its recorded lookup class against all requests to\n create method handles.\n A single {@code Lookup} object can be used to create any number\n of access-checked method handles, all checked against a single\n lookup class.\n \u003cp\u003e\n A {@code Lookup} object can be shared with other trusted code,\n such as a metaobject protocol.\n A shared {@code Lookup} object delegates the capability\n to create method handles on private members of the lookup class.\n Even if privileged code uses the {@code Lookup} object,\n the access checking is confined to the privileges of the\n original lookup class.\n \u003cp\u003e\n A lookup can fail, because\n the containing class is not accessible to the lookup class, or\n because the desired class member is missing, or because the\n desired class member is not accessible to the lookup class, or\n because the lookup object is not trusted enough to access the member.\n In any of these cases, a {@code ReflectiveOperationException} will be\n thrown from the attempted lookup.  The exact class will be one of\n the following:\n \u003cul\u003e\n \u003cli\u003eNoSuchMethodException \u0026mdash; if a method is requested but does not exist\n \u003cli\u003eNoSuchFieldException \u0026mdash; if a field is requested but does not exist\n \u003cli\u003eIllegalAccessException \u0026mdash; if the member exists but an access check fails\n \u003c/ul\u003e\n \u003cp\u003e\n In general, the conditions under which a method handle may be\n looked up for a method {@code M} are no more restrictive than the conditions\n under which the lookup class could have compiled, verified, and resolved a call to {@code M}.\n Where the JVM would raise exceptions like {@code NoSuchMethodError},\n a method handle lookup will generally raise a corresponding\n checked exception, such as {@code NoSuchMethodException}.\n And the effect of invoking the method handle resulting from the lookup\n is \u003ca href\u003d\"MethodHandles.Lookup.html#equiv\"\u003eexactly equivalent\u003c/a\u003e\n to executing the compiled, verified, and resolved call to {@code M}.\n The same point is true of fields and constructors.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n Access checks only apply to named and reflected methods,\n constructors, and fields.\n Other method handle creation methods, such as\n {@link MethodHandle#asType MethodHandle.asType},\n do not require any access checks, and are used\n independently of any {@code Lookup} object.\n \u003cp\u003e\n If the desired member is {@code protected}, the usual JVM rules apply,\n including the requirement that the lookup class must be either be in the\n same package as the desired member, or must inherit that member.\n (See the Java Virtual Machine Specification, sections 4.9.2, 5.4.3.5, and 6.4.)\n In addition, if the desired member is a non-static field or method\n in a different package, the resulting method handle may only be applied\n to objects of the lookup class or one of its subclasses.\n This requirement is enforced by narrowing the type of the leading\n {@code this} parameter from {@code C}\n (which will necessarily be a superclass of the lookup class)\n to the lookup class itself.\n \u003cp\u003e\n The JVM imposes a similar requirement on {@code invokespecial} instruction,\n that the receiver argument must match both the resolved method \u003cem\u003eand\u003c/em\u003e\n the current class.  Again, this requirement is enforced by narrowing the\n type of the leading parameter to the resulting method handle.\n (See the Java Virtual Machine Specification, section 4.10.1.9.)\n \u003cp\u003e\n The JVM represents constructors and static initializer blocks as internal methods\n with special names ({@code \"\u003cinit\u003e\"} and {@code \"\u003cclinit\u003e\"}).\n The internal syntax of invocation instructions allows them to refer to such internal\n methods as if they were normal methods, but the JVM bytecode verifier rejects them.\n A lookup of such an internal method will produce a {@code NoSuchMethodException}.\n \u003cp\u003e\n In some cases, access between nested classes is obtained by the Java compiler by creating\n an wrapper method to access a private method of another class\n in the same top-level declaration.\n For example, a nested class {@code C.D}\n can access private members within other related classes such as\n {@code C}, {@code C.D.E}, or {@code C.B},\n but the Java compiler may need to generate wrapper methods in\n those related classes.  In such cases, a {@code Lookup} object on\n {@code C.E} would be unable to those private members.\n A workaround for this limitation is the {@link Lookup#in Lookup.in} method,\n which can transform a lookup on {@code C.E} into one on any of those other\n classes, without special elevation of privilege.\n \u003cp\u003e\n The accesses permitted to a given lookup object may be limited,\n according to its set of {@link #lookupModes lookupModes},\n to a subset of members normally accessible to the lookup class.\n For example, the {@link MethodHandles#publicLookup publicLookup}\n method produces a lookup object which is only allowed to access\n public members in public classes.\n The caller sensitive method {@link MethodHandles#lookup lookup}\n produces a lookup object with full capabilities relative to\n its caller class, to emulate all supported bytecode behaviors.\n Also, the {@link Lookup#in Lookup.in} method may produce a lookup object\n with fewer access modes than the original lookup object.\n\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003ca name\u003d\"privacc\"\u003e\u003c/a\u003e\n \u003cem\u003eDiscussion of private access:\u003c/em\u003e\n We say that a lookup has \u003cem\u003eprivate access\u003c/em\u003e\n if its {@linkplain #lookupModes lookup modes}\n include the possibility of accessing {@code private} members.\n As documented in the relevant methods elsewhere,\n only lookups with private access possess the following capabilities:\n \u003cul style\u003d\"font-size:smaller;\"\u003e\n \u003cli\u003eaccess private fields, methods, and constructors of the lookup class\n \u003cli\u003ecreate method handles which invoke \u003ca href\u003d\"MethodHandles.Lookup.html#callsens\"\u003ecaller sensitive\u003c/a\u003e methods,\n     such as {@code Class.forName}\n \u003cli\u003ecreate method handles which {@link Lookup#findSpecial emulate invokespecial} instructions\n \u003cli\u003eavoid \u003ca href\u003d\"MethodHandles.Lookup.html#secmgr\"\u003epackage access checks\u003c/a\u003e\n     for classes accessible to the lookup class\n \u003cli\u003ecreate {@link Lookup#in delegated lookup objects} which have private access to other classes\n     within the same package member\n \u003c/ul\u003e\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n Each of these permissions is a consequence of the fact that a lookup object\n with private access can be securely traced back to an originating class,\n whose \u003ca href\u003d\"MethodHandles.Lookup.html#equiv\"\u003ebytecode behaviors\u003c/a\u003e and Java language access permissions\n can be reliably determined and emulated by method handles.\n\n \u003ch1\u003e\u003ca name\u003d\"secmgr\"\u003e\u003c/a\u003eSecurity manager interactions\u003c/h1\u003e\n Although bytecode instructions can only refer to classes in\n a related class loader, this API can search for methods in any\n class, as long as a reference to its {@code Class} object is\n available.  Such cross-loader references are also possible with the\n Core Reflection API, and are impossible to bytecode instructions\n such as {@code invokestatic} or {@code getfield}.\n There is a {@linkplain java.lang.SecurityManager security manager API}\n to allow applications to check such cross-loader references.\n These checks apply to both the {@code MethodHandles.Lookup} API\n and the Core Reflection API\n (as found on {@link java.lang.Class Class}).\n \u003cp\u003e\n If a security manager is present, member lookups are subject to\n additional checks.\n From one to three calls are made to the security manager.\n Any of these calls can refuse access by throwing a\n {@link java.lang.SecurityException SecurityException}.\n Define {@code smgr} as the security manager,\n {@code lookc} as the lookup class of the current lookup object,\n {@code refc} as the containing class in which the member\n is being sought, and {@code defc} as the class in which the\n member is actually defined.\n The value {@code lookc} is defined as \u003cem\u003enot present\u003c/em\u003e\n if the current lookup object does not have\n \u003ca href\u003d\"MethodHandles.Lookup.html#privacc\"\u003eprivate access\u003c/a\u003e.\n The calls are made according to the following rules:\n \u003cul\u003e\n \u003cli\u003e\u003cb\u003eStep 1:\u003c/b\u003e\n     If {@code lookc} is not present, or if its class loader is not\n     the same as or an ancestor of the class loader of {@code refc},\n     then {@link SecurityManager#checkPackageAccess\n     smgr.checkPackageAccess(refcPkg)} is called,\n     where {@code refcPkg} is the package of {@code refc}.\n \u003cli\u003e\u003cb\u003eStep 2:\u003c/b\u003e\n     If the retrieved member is not public and\n     {@code lookc} is not present, then\n     {@link SecurityManager#checkPermission smgr.checkPermission}\n     with {@code RuntimePermission(\"accessDeclaredMembers\")} is called.\n \u003cli\u003e\u003cb\u003eStep 3:\u003c/b\u003e\n     If the retrieved member is not public,\n     and if {@code lookc} is not present,\n     and if {@code defc} and {@code refc} are different,\n     then {@link SecurityManager#checkPackageAccess\n     smgr.checkPackageAccess(defcPkg)} is called,\n     where {@code defcPkg} is the package of {@code defc}.\n \u003c/ul\u003e\n Security checks are performed after other access checks have passed.\n Therefore, the above rules presuppose a member that is public,\n or else that is being accessed from a lookup class that has\n rights to access the member.\n\n \u003ch1\u003e\u003ca name\u003d\"callsens\"\u003e\u003c/a\u003eCaller sensitive methods\u003c/h1\u003e\n A small number of Java methods have a special property called caller sensitivity.\n A \u003cem\u003ecaller-sensitive\u003c/em\u003e method can behave differently depending on the\n identity of its immediate caller.\n \u003cp\u003e\n If a method handle for a caller-sensitive method is requested,\n the general rules for \u003ca href\u003d\"MethodHandles.Lookup.html#equiv\"\u003ebytecode behaviors\u003c/a\u003e apply,\n but they take account of the lookup class in a special way.\n The resulting method handle behaves as if it were called\n from an instruction contained in the lookup class,\n so that the caller-sensitive method detects the lookup class.\n (By contrast, the invoker of the method handle is disregarded.)\n Thus, in the case of caller-sensitive methods,\n different lookup classes may give rise to\n differently behaving method handles.\n \u003cp\u003e\n In cases where the lookup object is\n {@link MethodHandles#publicLookup() publicLookup()},\n or some other lookup object without\n \u003ca href\u003d\"MethodHandles.Lookup.html#privacc\"\u003eprivate access\u003c/a\u003e,\n the lookup class is disregarded.\n In such cases, no caller-sensitive method handle can be created,\n access is forbidden, and the lookup fails with an\n {@code IllegalAccessException}.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n For example, the caller-sensitive method\n {@link java.lang.Class#forName(String) Class.forName(x)}\n can return varying classes or throw varying exceptions,\n depending on the class loader of the class that calls it.\n A public lookup of {@code Class.forName} will fail, because\n there is no reasonable way to determine its bytecode behavior.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n If an application caches method handles for broad sharing,\n it should use {@code publicLookup()} to create them.\n If there is a lookup of {@code Class.forName}, it will fail,\n and the application must take appropriate action in that case.\n It may be that a later lookup, perhaps during the invocation of a\n bootstrap method, can incorporate the specific identity\n of the caller, making the method accessible.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n The function {@code MethodHandles.lookup} is caller sensitive\n so that there can be a secure foundation for lookups.\n Nearly all other methods in the JSR 292 API rely on lookup\n objects to check access requests.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Lookup","qualifiedName":"java.lang.invoke.MethodHandles.Lookup","dimension":"","elementType":{},"package":"java.lang.invoke","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":true,"innerClasses":[],"isInnerClass":true,"constructors":[],"fields":[{"name":"PUBLIC","comment":"A single-bit mask representing {@code public} access,\n  which may contribute to the result of {@link #lookupModes lookupModes}.\n  The value, {@code 0x01}, happens to be the same as the value of the\n  {@code public} {@linkplain java.lang.reflect.Modifier#PUBLIC modifier bit}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"PRIVATE","comment":"A single-bit mask representing {@code private} access,\n  which may contribute to the result of {@link #lookupModes lookupModes}.\n  The value, {@code 0x02}, happens to be the same as the value of the\n  {@code private} {@linkplain java.lang.reflect.Modifier#PRIVATE modifier bit}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"PROTECTED","comment":"A single-bit mask representing {@code protected} access,\n  which may contribute to the result of {@link #lookupModes lookupModes}.\n  The value, {@code 0x04}, happens to be the same as the value of the\n  {@code protected} {@linkplain java.lang.reflect.Modifier#PROTECTED modifier bit}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"PACKAGE","comment":"A single-bit mask representing {@code package} access (default access),\n  which may contribute to the result of {@link #lookupModes lookupModes}.\n  The value is {@code 0x08}, which does not correspond meaningfully to\n  any particular {@linkplain java.lang.reflect.Modifier modifier bit}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"}],"methods":[{"name":"lookupClass","comment":"Tells which class is performing the lookup.  It is this class against\n  which checks are performed for visibility and access permissions.\n  \u003cp\u003e\n  The class implies a maximum level of access permission,\n  but the permissions may be additionally limited by the bitmask\n  {@link #lookupModes lookupModes}, which controls whether non-public members\n  can be accessed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"lookupModes","comment":"Tells which access-protection classes of members this lookup object can produce.\n  The result is a bit-mask of the bits\n  {@linkplain #PUBLIC PUBLIC (0x01)},\n  {@linkplain #PRIVATE PRIVATE (0x02)},\n  {@linkplain #PROTECTED PROTECTED (0x04)},\n  and {@linkplain #PACKAGE PACKAGE (0x08)}.\n  \u003cp\u003e\n  A freshly-created lookup object\n  on the {@linkplain java.lang.invoke.MethodHandles#lookup() caller\u0027s class}\n  has all possible bits set, since the caller class can access all its own members.\n  A lookup object on a new lookup class\n  {@linkplain java.lang.invoke.MethodHandles.Lookup#in created from a previous lookup object}\n  may have some mode bits set to zero.\n  The purpose of this is to restrict access via the new lookup object,\n  so that it can access only names which can be reached by the original\n  lookup object, and also by the new lookup class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"in","comment":"Creates a lookup on the specified new lookup class.\n The resulting object will report the specified\n class as its own {@link #lookupClass lookupClass}.\n \u003cp\u003e\n However, the resulting {@code Lookup} object is guaranteed\n to have no more access capabilities than the original.\n In particular, access capabilities can be lost as follows:\u003cul\u003e\n \u003cli\u003eIf the new lookup class differs from the old one,\n protected members will not be accessible by virtue of inheritance.\n (Protected members may continue to be accessible because of package sharing.)\n \u003cli\u003eIf the new lookup class is in a different package\n than the old one, protected and default (package) members will not be accessible.\n \u003cli\u003eIf the new lookup class is not within the same package member\n as the old one, private members will not be accessible.\n \u003cli\u003eIf the new lookup class is not accessible to the old lookup class,\n then no members, not even public members, will be accessible.\n (In all other cases, public members will continue to be accessible.)\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Lookup","qualifiedName":"java.lang.invoke.MethodHandles.Lookup","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"requestedLookupClass","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Displays the name of the class from which lookups are to be made.\n (The name is the one reported by {@link java.lang.Class#getName() Class.getName}.)\n If there are restrictions on the access permitted to this lookup,\n this is indicated by adding a suffix to the class name, consisting\n of a slash and a keyword.  The keyword represents the strongest\n allowed access, and is chosen as follows:\n \u003cul\u003e\n \u003cli\u003eIf no access is allowed, the suffix is \"/noaccess\".\n \u003cli\u003eIf only public access is allowed, the suffix is \"/public\".\n \u003cli\u003eIf only public and package access are allowed, the suffix is \"/package\".\n \u003cli\u003eIf only public, package, and private access are allowed, the suffix is \"/private\".\n \u003c/ul\u003e\n If none of the above cases apply, it is the case that full\n access (public, package, private, and protected) is allowed.\n In this case, no suffix is added.\n This is true only of an object obtained originally from\n {@link java.lang.invoke.MethodHandles#lookup MethodHandles.lookup}.\n Objects created by {@link java.lang.invoke.MethodHandles.Lookup#in Lookup.in}\n always have restricted access, and will display a suffix.\n \u003cp\u003e\n (It may seem strange that protected access should be\n stronger than private access.  Viewed independently from\n package access, protected access is the first to be lost,\n because it requires a direct subclass relationship between\n caller and callee.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"findStatic","comment":"Produces a method handle for a static method.\n The type of the method handle will be that of the method.\n (Since static methods do not take receivers, there is no\n additional receiver argument inserted into the method handle type,\n as there would be with {@link #findVirtual findVirtual} or {@link #findSpecial findSpecial}.)\n The method and all its argument types must be accessible to the lookup object.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the method\u0027s variable arity modifier bit ({@code 0x0080}) is set.\n \u003cp\u003e\n If the returned method handle is invoked, the method\u0027s class will\n be initialized, if it has not already been initialized.\n \u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n \u003cblockquote\u003e\u003cpre\u003e{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_asList \u003d publicLookup().findStatic(Arrays.class,\n  \"asList\", methodType(List.class, Object[].class));\nassertEquals(\"[x, y]\", MH_asList.invoke(\"x\", \"y\").toString());\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.invoke.MethodType)","flatSignature":"(Class\u003c?\u003e, String, MethodType)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findVirtual","comment":"Produces a method handle for a virtual method.\n The type of the method handle will be that of the method,\n with the receiver type (usually {@code refc}) prepended.\n The method and all its argument types must be accessible to the lookup object.\n \u003cp\u003e\n When called, the handle will treat the first argument as a receiver\n and dispatch on the receiver\u0027s type to determine which method\n implementation to enter.\n (The dispatching action is identical with that performed by an\n {@code invokevirtual} or {@code invokeinterface} instruction.)\n \u003cp\u003e\n The first argument will be of type {@code refc} if the lookup\n class has full privileges to access the member.  Otherwise\n the member must be {@code protected} and the first argument\n will be restricted in type to the lookup class.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the method\u0027s variable arity modifier bit ({@code 0x0080}) is set.\n \u003cp\u003e\n Because of the general \u003ca href\u003d\"MethodHandles.Lookup.html#equiv\"\u003eequivalence\u003c/a\u003e between {@code invokevirtual}\n instructions and method handles produced by {@code findVirtual},\n if the class is {@code MethodHandle} and the name string is\n {@code invokeExact} or {@code invoke}, the resulting\n method handle is equivalent to one produced by\n {@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker} or\n {@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}\n with the same {@code type} argument.\n\n \u003cb\u003eExample:\u003c/b\u003e\n \u003cblockquote\u003e\u003cpre\u003e{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_concat \u003d publicLookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_hashCode \u003d publicLookup().findVirtual(Object.class,\n  \"hashCode\", methodType(int.class));\nMethodHandle MH_hashCode_String \u003d publicLookup().findVirtual(String.class,\n  \"hashCode\", methodType(int.class));\nassertEquals(\"xy\", (String) MH_concat.invokeExact(\"x\", \"y\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode.invokeExact((Object)\"xy\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode_String.invokeExact(\"xy\"));\n// interface method:\nMethodHandle MH_subSequence \u003d publicLookup().findVirtual(CharSequence.class,\n  \"subSequence\", methodType(CharSequence.class, int.class, int.class));\nassertEquals(\"def\", MH_subSequence.invoke(\"abcdefghi\", 3, 6).toString());\n// constructor \"internal method\" must be accessed differently:\nMethodType MT_newString \u003d methodType(void.class); //()V for new String()\ntry { assertEquals(\"impossible\", lookup()\n        .findVirtual(String.class, \"\u003cinit\u003e\", MT_newString));\n } catch (NoSuchMethodException ex) { } // OK\nMethodHandle MH_newString \u003d publicLookup()\n  .findConstructor(String.class, MT_newString);\nassertEquals(\"\", (String) MH_newString.invokeExact());\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.invoke.MethodType)","flatSignature":"(Class\u003c?\u003e, String, MethodType)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findConstructor","comment":"Produces a method handle which creates an object and initializes it, using\n the constructor of the specified type.\n The parameter types of the method handle will be those of the constructor,\n while the return type will be a reference to the constructor\u0027s class.\n The constructor and all its argument types must be accessible to the lookup object.\n \u003cp\u003e\n The requested type must have a return type of {@code void}.\n (This is consistent with the JVM\u0027s treatment of constructor type descriptors.)\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the constructor\u0027s variable arity modifier bit ({@code 0x0080}) is set.\n \u003cp\u003e\n If the returned method handle is invoked, the constructor\u0027s class will\n be initialized, if it has not already been initialized.\n \u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n \u003cblockquote\u003e\u003cpre\u003e{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_newArrayList \u003d publicLookup().findConstructor(\n  ArrayList.class, methodType(void.class, Collection.class));\nCollection orig \u003d Arrays.asList(\"x\", \"y\");\nCollection copy \u003d (ArrayList) MH_newArrayList.invokeExact(orig);\nassert(orig !\u003d copy);\nassertEquals(orig, copy);\n// a variable-arity constructor:\nMethodHandle MH_newProcessBuilder \u003d publicLookup().findConstructor(\n  ProcessBuilder.class, methodType(void.class, String[].class));\nProcessBuilder pb \u003d (ProcessBuilder)\n  MH_newProcessBuilder.invoke(\"x\", \"y\", \"z\");\nassertEquals(\"[x, y, z]\", pb.command().toString());\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.invoke.MethodType)","flatSignature":"(Class\u003c?\u003e, MethodType)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findSpecial","comment":"Produces an early-bound method handle for a virtual method.\n It will bypass checks for overriding methods on the receiver,\n \u003ca href\u003d\"MethodHandles.Lookup.html#equiv\"\u003eas if called\u003c/a\u003e from an {@code invokespecial}\n instruction from within the explicitly specified {@code specialCaller}.\n The type of the method handle will be that of the method,\n with a suitably restricted receiver type prepended.\n (The receiver type will be {@code specialCaller} or a subtype.)\n The method and all its argument types must be accessible\n to the lookup object.\n \u003cp\u003e\n Before method resolution,\n if the explicitly specified caller class is not identical with the\n lookup class, or if this lookup object does not have\n \u003ca href\u003d\"MethodHandles.Lookup.html#privacc\"\u003eprivate access\u003c/a\u003e\n privileges, the access fails.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the method\u0027s variable arity modifier bit ({@code 0x0080}) is set.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003e(Note:  JVM internal methods named {@code \"\u003cinit\u003e\"} are not visible to this API,\n even though the {@code invokespecial} instruction can refer to them\n in special circumstances.  Use {@link #findConstructor findConstructor}\n to access instance initialization methods in a safe manner.)\u003c/em\u003e\n \u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n \u003cblockquote\u003e\u003cpre\u003e{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nstatic class Listie extends ArrayList {\n  public String toString() { return \"[wee Listie]\"; }\n  static Lookup lookup() { return MethodHandles.lookup(); }\n}\n...\n// no access to constructor via invokeSpecial:\nMethodHandle MH_newListie \u003d Listie.lookup()\n  .findConstructor(Listie.class, methodType(void.class));\nListie l \u003d (Listie) MH_newListie.invokeExact();\ntry { assertEquals(\"impossible\", Listie.lookup().findSpecial(\n        Listie.class, \"\u003cinit\u003e\", methodType(void.class), Listie.class));\n } catch (NoSuchMethodException ex) { } // OK\n// access to super and self methods via invokeSpecial:\nMethodHandle MH_super \u003d Listie.lookup().findSpecial(\n  ArrayList.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_this \u003d Listie.lookup().findSpecial(\n  Listie.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_duper \u003d Listie.lookup().findSpecial(\n  Object.class, \"toString\" , methodType(String.class), Listie.class);\nassertEquals(\"[]\", (String) MH_super.invokeExact(l));\nassertEquals(\"\"+l, (String) MH_this.invokeExact(l));\nassertEquals(\"[]\", (String) MH_duper.invokeExact(l)); // ArrayList method\ntry { assertEquals(\"inaccessible\", Listie.lookup().findSpecial(\n        String.class, \"toString\", methodType(String.class), Listie.class));\n } catch (IllegalAccessException ex) { } // OK\nListie subl \u003d new Listie() { public String toString() { return \"[subclass]\"; } };\nassertEquals(\"\"+l, (String) MH_this.invokeExact(subl)); // Listie method\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.invoke.MethodType, java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e, String, MethodType, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}},{"name":"specialCaller","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findGetter","comment":"Produces a method handle giving read access to a non-static field.\n The type of the method handle will have a return type of the field\u0027s\n value type.\n The method handle\u0027s single argument will be the instance containing\n the field.\n Access checking is performed immediately on behalf of the lookup class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e, String, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findSetter","comment":"Produces a method handle giving write access to a non-static field.\n The type of the method handle will have a void return type.\n The method handle will take two arguments, the instance containing\n the field, and the value to be stored.\n The second argument will be of the field\u0027s value type.\n Access checking is performed immediately on behalf of the lookup class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e, String, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findStaticGetter","comment":"Produces a method handle giving read access to a static field.\n The type of the method handle will have a return type of the field\u0027s\n value type.\n The method handle will take no arguments.\n Access checking is performed immediately on behalf of the lookup class.\n \u003cp\u003e\n If the returned method handle is invoked, the field\u0027s class will\n be initialized, if it has not already been initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e, String, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"findStaticSetter","comment":"Produces a method handle giving write access to a static field.\n The type of the method handle will have a void return type.\n The method handle will take a single\n argument, of the field\u0027s value type, the value to be stored.\n Access checking is performed immediately on behalf of the lookup class.\n \u003cp\u003e\n If the returned method handle is invoked, the field\u0027s class will\n be initialized, if it has not already been initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e, String, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"refc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"bind","comment":"Produces an early-bound method handle for a non-static method.\n The receiver must have a supertype {@code defc} in which a method\n of the given name and type is accessible to the lookup class.\n The method and all its argument types must be accessible to the lookup object.\n The type of the method handle will be that of the method,\n without any insertion of an additional receiver parameter.\n The given receiver will be bound into the method handle,\n so that every call to the method handle will invoke the\n requested method on the given receiver.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the method\u0027s variable arity modifier bit ({@code 0x0080}) is set\n \u003cem\u003eand\u003c/em\u003e the trailing array argument is not the only argument.\n (If the trailing array argument is the only argument,\n the given receiver value will be bound to it.)\n \u003cp\u003e\n This is equivalent to the following code:\n \u003cblockquote\u003e\u003cpre\u003e{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle mh0 \u003d lookup().findVirtual(defc, name, type);\nMethodHandle mh1 \u003d mh0.bindTo(receiver);\nMethodType mt1 \u003d mh1.type();\nif (mh0.isVarargsCollector())\n  mh1 \u003d mh1.asVarargsCollector(mt1.parameterType(mt1.parameterCount()-1));\nreturn mh1;\n }\u003c/pre\u003e\u003c/blockquote\u003e\n where {@code defc} is either {@code receiver.getClass()} or a super\n type of that class, in which the requested method is accessible\n to the lookup class.\n (Note that {@code bindTo} does not preserve variable arity.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, java.lang.String, java.lang.invoke.MethodType)","flatSignature":"(Object, String, MethodType)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"receiver","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unreflect","comment":"Makes a \u003ca href\u003d\"MethodHandleInfo.html#directmh\"\u003edirect method handle\u003c/a\u003e\n to \u003ci\u003em\u003c/i\u003e, if the lookup class has permission.\n If \u003ci\u003em\u003c/i\u003e is non-static, the receiver argument is treated as an initial argument.\n If \u003ci\u003em\u003c/i\u003e is virtual, overriding is respected on every call.\n Unlike the Core Reflection API, exceptions are \u003cem\u003enot\u003c/em\u003e wrapped.\n The type of the method handle will be that of the method,\n with the receiver type prepended (but only if it is non-static).\n If the method\u0027s {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n If \u003ci\u003em\u003c/i\u003e is not public, do not share the resulting handle with untrusted parties.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the method\u0027s variable arity modifier bit ({@code 0x0080}) is set.\n \u003cp\u003e\n If \u003ci\u003em\u003c/i\u003e is static, and\n if the returned method handle is invoked, the method\u0027s class will\n be initialized, if it has not already been initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.reflect.Method)","flatSignature":"(Method)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unreflectSpecial","comment":"Produces a method handle for a reflected method.\n It will bypass checks for overriding methods on the receiver,\n \u003ca href\u003d\"MethodHandles.Lookup.html#equiv\"\u003eas if called\u003c/a\u003e from an {@code invokespecial}\n instruction from within the explicitly specified {@code specialCaller}.\n The type of the method handle will be that of the method,\n with a suitably restricted receiver type prepended.\n (The receiver type will be {@code specialCaller} or a subtype.)\n If the method\u0027s {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class,\n as if {@code invokespecial} instruction were being linked.\n \u003cp\u003e\n Before method resolution,\n if the explicitly specified caller class is not identical with the\n lookup class, or if this lookup object does not have\n \u003ca href\u003d\"MethodHandles.Lookup.html#privacc\"\u003eprivate access\u003c/a\u003e\n privileges, the access fails.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the method\u0027s variable arity modifier bit ({@code 0x0080}) is set.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.reflect.Method, java.lang.Class\u003c?\u003e)","flatSignature":"(Method, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"m","type":{"isPrimitive":false,"simpleName":"Method","qualifiedName":"java.lang.reflect.Method","dimension":"","elementType":{}}},{"name":"specialCaller","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unreflectConstructor","comment":"Produces a method handle for a reflected constructor.\n The type of the method handle will be that of the constructor,\n with the return type changed to the declaring class.\n The method handle will perform a {@code newInstance} operation,\n creating a new instance of the constructor\u0027s class on the\n arguments passed to the method handle.\n \u003cp\u003e\n If the constructor\u0027s {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n \u003cp\u003e\n The returned method handle will have\n {@linkplain MethodHandle#asVarargsCollector variable arity} if and only if\n the constructor\u0027s variable arity modifier bit ({@code 0x0080}) is set.\n \u003cp\u003e\n If the returned method handle is invoked, the constructor\u0027s class will\n be initialized, if it has not already been initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.reflect.Constructor\u003c?\u003e)","flatSignature":"(Constructor\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"c","type":{"isPrimitive":false,"simpleName":"Constructor","qualifiedName":"java.lang.reflect.Constructor","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unreflectGetter","comment":"Produces a method handle giving read access to a reflected field.\n The type of the method handle will have a return type of the field\u0027s\n value type.\n If the field is static, the method handle will take no arguments.\n Otherwise, its single argument will be the instance containing\n the field.\n If the field\u0027s {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n \u003cp\u003e\n If the field is static, and\n if the returned method handle is invoked, the field\u0027s class will\n be initialized, if it has not already been initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.reflect.Field)","flatSignature":"(Field)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"f","type":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"unreflectSetter","comment":"Produces a method handle giving write access to a reflected field.\n The type of the method handle will have a void return type.\n If the field is static, the method handle will take a single\n argument, of the field\u0027s value type, the value to be stored.\n Otherwise, the two arguments will be the instance containing\n the field, and the value to be stored.\n If the field\u0027s {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n \u003cp\u003e\n If the field is static, and\n if the returned method handle is invoked, the field\u0027s class will\n be initialized, if it has not already been initialized.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.reflect.Field)","flatSignature":"(Field)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"f","type":{"isPrimitive":false,"simpleName":"Field","qualifiedName":"java.lang.reflect.Field","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"revealDirect","comment":"Cracks a \u003ca href\u003d\"MethodHandleInfo.html#directmh\"\u003edirect method handle\u003c/a\u003e\n created by this lookup object or a similar one.\n Security and access checks are performed to ensure that this lookup object\n is capable of reproducing the target method handle.\n This means that the cracking may fail if target is a direct method handle\n but was created by an unrelated lookup object.\n This can happen if the method handle is \u003ca href\u003d\"MethodHandles.Lookup.html#callsens\"\u003ecaller sensitive\u003c/a\u003e\n and was created by a lookup object for a different class.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodHandle)","flatSignature":"(MethodHandle)","returnType":{"isPrimitive":false,"simpleName":"MethodHandleInfo","qualifiedName":"java.lang.invoke.MethodHandleInfo","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}