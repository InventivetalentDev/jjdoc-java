{"name":"CallSite","comment":"A {@code CallSite} is a holder for a variable {@link MethodHandle},\n which is called its {@code target}.\n An {@code invokedynamic} instruction linked to a {@code CallSite} delegates\n all calls to the site\u0027s current target.\n A {@code CallSite} may be associated with several {@code invokedynamic}\n instructions, or it may be \"free floating\", associated with none.\n In any case, it may be invoked through an associated method handle\n called its {@linkplain #dynamicInvoker dynamic invoker}.\n \u003cp\u003e\n {@code CallSite} is an abstract class which does not allow\n direct subclassing by users.  It has three immediate,\n concrete subclasses that may be either instantiated or subclassed.\n \u003cul\u003e\n \u003cli\u003eIf a mutable target is not required, an {@code invokedynamic} instruction\n may be permanently bound by means of a {@linkplain ConstantCallSite constant call site}.\n \u003cli\u003eIf a mutable target is required which has volatile variable semantics,\n because updates to the target must be immediately and reliably witnessed by other threads,\n a {@linkplain VolatileCallSite volatile call site} may be used.\n \u003cli\u003eOtherwise, if a mutable target is required,\n a {@linkplain MutableCallSite mutable call site} may be used.\n \u003c/ul\u003e\n \u003cp\u003e\n A non-constant call site may be \u003cem\u003erelinked\u003c/em\u003e by changing its target.\n The new target must have the same {@linkplain MethodHandle#type() type}\n as the previous target.\n Thus, though a call site can be relinked to a series of\n successive targets, it cannot change its type.\n \u003cp\u003e\n Here is a sample use of call sites and bootstrap methods which links every\n dynamic call site to print its arguments:\n\u003cblockquote\u003e\u003cpre\u003e{@code\nstatic void test() throws Throwable {\n    // THE FOLLOWING LINE IS PSEUDOCODE FOR A JVM INSTRUCTION\n    InvokeDynamic[#bootstrapDynamic].baz(\"baz arg\", 2, 3.14);\n}\nprivate static void printArgs(Object... args) {\n  System.out.println(java.util.Arrays.deepToString(args));\n}\nprivate static final MethodHandle printArgs;\nstatic {\n  MethodHandles.Lookup lookup \u003d MethodHandles.lookup();\n  Class thisClass \u003d lookup.lookupClass();  // (who am I?)\n  printArgs \u003d lookup.findStatic(thisClass,\n      \"printArgs\", MethodType.methodType(void.class, Object[].class));\n}\nprivate static CallSite bootstrapDynamic(MethodHandles.Lookup caller, String name, MethodType type) {\n  // ignore caller and name, but match the type:\n  return new ConstantCallSite(printArgs.asType(type));\n}\n}\u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"CallSite","qualifiedName":"java.lang.invoke.CallSite","dimension":"","elementType":{},"package":"java.lang.invoke","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"type","comment":"Returns the type of this call site\u0027s target.\n Although targets may change, any call site\u0027s type is permanent, and can never change to an unequal type.\n The {@code setTarget} method enforces this invariant by refusing any new target that does\n not have the previous target\u0027s type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTarget","comment":"Returns the target method of the call site, according to the\n behavior defined by this call site\u0027s specific class.\n The immediate subclasses of {@code CallSite} document the\n class-specific behaviors of this method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setTarget","comment":"Updates the target method of this call site, according to the\n behavior defined by this call site\u0027s specific class.\n The immediate subclasses of {@code CallSite} document the\n class-specific behaviors of this method.\n \u003cp\u003e\n The type of the new target must be {@linkplain MethodType#equals equal to}\n the type of the old target.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodHandle)","flatSignature":"(MethodHandle)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"newTarget","type":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dynamicInvoker","comment":"Produces a method handle equivalent to an invokedynamic instruction\n which has been linked to this call site.\n \u003cp\u003e\n This method is equivalent to the following code:\n \u003cblockquote\u003e\u003cpre\u003e{@code\n MethodHandle getTarget, invoker, result;\n getTarget \u003d MethodHandles.publicLookup().bind(this, \"getTarget\", MethodType.methodType(MethodHandle.class));\n invoker \u003d MethodHandles.exactInvoker(this.type());\n result \u003d MethodHandles.foldArguments(invoker, getTarget)\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.lang.invoke.VolatileCallSite","java.lang.invoke.MutableCallSite","java.lang.invoke.ConstantCallSite"],"enumConstants":[]}