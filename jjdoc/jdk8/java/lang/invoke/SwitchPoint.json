{"name":"SwitchPoint","comment":"\u003cp\u003e\n A {@code SwitchPoint} is an object which can publish state transitions to other threads.\n A switch point is initially in the \u003cem\u003evalid\u003c/em\u003e state, but may at any time be\n changed to the \u003cem\u003einvalid\u003c/em\u003e state.  Invalidation cannot be reversed.\n A switch point can combine a \u003cem\u003eguarded pair\u003c/em\u003e of method handles into a\n \u003cem\u003eguarded delegator\u003c/em\u003e.\n The guarded delegator is a method handle which delegates to one of the old method handles.\n The state of the switch point determines which of the two gets the delegation.\n \u003cp\u003e\n A single switch point may be used to control any number of method handles.\n (Indirectly, therefore, it can control any number of call sites.)\n This is done by using the single switch point as a factory for combining\n any number of guarded method handle pairs into guarded delegators.\n \u003cp\u003e\n When a guarded delegator is created from a guarded pair, the pair\n is wrapped in a new method handle {@code M},\n which is permanently associated with the switch point that created it.\n Each pair consists of a target {@code T} and a fallback {@code F}.\n While the switch point is valid, invocations to {@code M} are delegated to {@code T}.\n After it is invalidated, invocations are delegated to {@code F}.\n \u003cp\u003e\n Invalidation is global and immediate, as if the switch point contained a\n volatile boolean variable consulted on every call to {@code M}.\n The invalidation is also permanent, which means the switch point\n can change state only once.\n The switch point will always delegate to {@code F} after being invalidated.\n At that point {@code guardWithTest} may ignore {@code T} and return {@code F}.\n \u003cp\u003e\n Here is an example of a switch point in action:\n \u003cpre\u003e{@code\n MethodHandle MH_strcat \u003d MethodHandles.lookup()\n     .findVirtual(String.class, \"concat\", MethodType.methodType(String.class, String.class));\n SwitchPoint spt \u003d new SwitchPoint();\n assert(!spt.hasBeenInvalidated());\n // the following steps may be repeated to re-use the same switch point:\n MethodHandle worker1 \u003d MH_strcat;\n MethodHandle worker2 \u003d MethodHandles.permuteArguments(MH_strcat, MH_strcat.type(), 1, 0);\n MethodHandle worker \u003d spt.guardWithTest(worker1, worker2);\n assertEquals(\"method\", (String) worker.invokeExact(\"met\", \"hod\"));\n SwitchPoint.invalidateAll(new SwitchPoint[]{ spt });\n assert(spt.hasBeenInvalidated());\n assertEquals(\"hodmet\", (String) worker.invokeExact(\"met\", \"hod\"));\n }\u003c/pre\u003e\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n Switch points are useful without subclassing.  They may also be subclassed.\n This may be useful in order to associate application-specific invalidation logic\n with the switch point.\n Notice that there is no permanent association between a switch point and\n the method handles it produces and consumes.\n The garbage collector may collect method handles produced or consumed\n by a switch point independently of the lifetime of the switch point itself.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eImplementation Note:\u003c/em\u003e\n A switch point behaves as if implemented on top of {@link MutableCallSite},\n approximately as follows:\n \u003cpre\u003e{@code\n public class SwitchPoint {\n     private static final MethodHandle\n         K_true  \u003d MethodHandles.constant(boolean.class, true),\n         K_false \u003d MethodHandles.constant(boolean.class, false);\n     private final MutableCallSite mcs;\n     private final MethodHandle mcsInvoker;\n     public SwitchPoint() {\n         this.mcs \u003d new MutableCallSite(K_true);\n         this.mcsInvoker \u003d mcs.dynamicInvoker();\n     }\n     public MethodHandle guardWithTest(\n             MethodHandle target, MethodHandle fallback) {\n         // Note:  mcsInvoker is of type ()boolean.\n         // Target and fallback may take any arguments, but must have the same type.\n         return MethodHandles.guardWithTest(this.mcsInvoker, target, fallback);\n     }\n     public static void invalidateAll(SwitchPoint[] spts) {\n         List\u003cMutableCallSite\u003e mcss \u003d new ArrayList\u003c\u003e();\n         for (SwitchPoint spt : spts)  mcss.add(spt.mcs);\n         for (MutableCallSite mcs : mcss)  mcs.setTarget(K_false);\n         MutableCallSite.syncAll(mcss.toArray(new MutableCallSite[0]));\n     }\n }\n }\u003c/pre\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"SwitchPoint","qualifiedName":"java.lang.invoke.SwitchPoint","dimension":"","elementType":{},"package":"java.lang.invoke","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"SwitchPoint","comment":"Creates a new switch point.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"hasBeenInvalidated","comment":"Determines if this switch point has been invalidated yet.\n\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n Because of the one-way nature of invalidation, once a switch point begins\n to return true for {@code hasBeenInvalidated},\n it will always do so in the future.\n On the other hand, a valid switch point visible to other threads may\n be invalidated at any moment, due to a request by another thread.\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n Since invalidation is a global and immediate operation,\n the execution of this query, on a valid switchpoint,\n must be internally sequenced with any\n other threads that could cause invalidation.\n This query may therefore be expensive.\n The recommended way to build a boolean-valued method handle\n which queries the invalidation state of a switch point {@code s} is\n to call {@code s.guardWithTest} on\n {@link MethodHandles#constant constant} true and false method handles.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"guardWithTest","comment":"Returns a method handle which always delegates either to the target or the fallback.\n The method handle will delegate to the target exactly as long as the switch point is valid.\n After that, it will permanently delegate to the fallback.\n \u003cp\u003e\n The target and fallback must be of exactly the same method type,\n and the resulting combined method handle will also be of this type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)","flatSignature":"(MethodHandle, MethodHandle)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"target","type":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}}},{"name":"fallback","type":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"invalidateAll","comment":"Sets all of the given switch points into the invalid state.\n After this call executes, no thread will observe any of the\n switch points to be in a valid state.\n \u003cp\u003e\n This operation is likely to be expensive and should be used sparingly.\n If possible, it should be buffered for batch processing on sets of switch points.\n \u003cp\u003e\n If {@code switchPoints} contains a null element,\n a {@code NullPointerException} will be raised.\n In this case, some non-null elements in the array may be\n processed before the method returns abnormally.\n Which elements these are (if any) is implementation-dependent.\n\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n For performance reasons, {@code invalidateAll} is not a virtual method\n on a single switch point, but rather applies to a set of switch points.\n Some implementations may incur a large fixed overhead cost\n for processing one or more invalidation operations,\n but a small incremental cost for each additional invalidation.\n In any case, this operation is likely to be costly, since\n other threads may have to be somehow interrupted\n in order to make them notice the updated switch point state.\n However, it may be observed that a single call to invalidate\n several switch points has the same formal effect as many calls,\n each on just one of the switch points.\n\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eImplementation Note:\u003c/em\u003e\n Simple implementations of {@code SwitchPoint} may use\n a private {@link MutableCallSite} to publish the state of a switch point.\n In such an implementation, the {@code invalidateAll} method can\n simply change the call site\u0027s target, and issue one call to\n {@linkplain MutableCallSite#syncAll synchronize} all the\n private call sites.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.SwitchPoint[])","flatSignature":"(SwitchPoint[])","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"switchPoints","type":{"isPrimitive":false,"simpleName":"SwitchPoint","qualifiedName":"java.lang.invoke.SwitchPoint","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"SwitchPoint","qualifiedName":"java.lang.invoke.SwitchPoint","dimension":"","elementType":{}}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}