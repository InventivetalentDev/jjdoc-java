{"name":"MethodHandleInfo","comment":"A symbolic reference obtained by cracking a direct method handle\n into its consitutent symbolic parts.\n To crack a direct method handle, call {@link Lookup#revealDirect Lookup.revealDirect}.\n \u003ch1\u003e\u003ca name\u003d\"directmh\"\u003e\u003c/a\u003eDirect Method Handles\u003c/h1\u003e\n A \u003cem\u003edirect method handle\u003c/em\u003e represents a method, constructor, or field without\n any intervening argument bindings or other transformations.\n The method, constructor, or field referred to by a direct method handle is called\n its \u003cem\u003eunderlying member\u003c/em\u003e.\n Direct method handles may be obtained in any of these ways:\n \u003cul\u003e\n \u003cli\u003eBy executing an {@code ldc} instruction on a {@code CONSTANT_MethodHandle} constant.\n     (See the Java Virtual Machine Specification, sections 4.4.8 and 5.4.3.)\n \u003cli\u003eBy calling one of the \u003ca href\u003d\"MethodHandles.Lookup.html#lookups\"\u003eLookup Factory Methods\u003c/a\u003e,\n     such as {@link Lookup#findVirtual Lookup.findVirtual},\n     to resolve a symbolic reference into a method handle.\n     A symbolic reference consists of a class, name string, and type.\n \u003cli\u003eBy calling the factory method {@link Lookup#unreflect Lookup.unreflect}\n     or {@link Lookup#unreflectSpecial Lookup.unreflectSpecial}\n     to convert a {@link Method} into a method handle.\n \u003cli\u003eBy calling the factory method {@link Lookup#unreflectConstructor Lookup.unreflectConstructor}\n     to convert a {@link Constructor} into a method handle.\n \u003cli\u003eBy calling the factory method {@link Lookup#unreflectGetter Lookup.unreflectGetter}\n     or {@link Lookup#unreflectSetter Lookup.unreflectSetter}\n     to convert a {@link Field} into a method handle.\n \u003c/ul\u003e\n\n \u003ch1\u003eRestrictions on Cracking\u003c/h1\u003e\n Given a suitable {@code Lookup} object, it is possible to crack any direct method handle\n to recover a symbolic reference for the underlying method, constructor, or field.\n Cracking must be done via a {@code Lookup} object equivalent to that which created\n the target method handle, or which has enough access permissions to recreate\n an equivalent method handle.\n \u003cp\u003e\n If the underlying method is \u003ca href\u003d\"MethodHandles.Lookup.html#callsens\"\u003ecaller sensitive\u003c/a\u003e,\n the direct method handle will have been \"bound\" to a particular caller class, the\n {@linkplain java.lang.invoke.MethodHandles.Lookup#lookupClass() lookup class}\n of the lookup object used to create it.\n Cracking this method handle with a different lookup class will fail\n even if the underlying method is public (like {@code Class.forName}).\n \u003cp\u003e\n The requirement of lookup object matching provides a \"fast fail\" behavior\n for programs which may otherwise trust erroneous revelation of a method\n handle with symbolic information (or caller binding) from an unexpected scope.\n Use {@link java.lang.invoke.MethodHandles#reflectAs} to override this limitation.\n\n \u003ch1\u003e\u003ca name\u003d\"refkinds\"\u003e\u003c/a\u003eReference kinds\u003c/h1\u003e\n The \u003ca href\u003d\"MethodHandles.Lookup.html#lookups\"\u003eLookup Factory Methods\u003c/a\u003e\n correspond to all major use cases for methods, constructors, and fields.\n These use cases may be distinguished using small integers as follows:\n \u003ctable border\u003d1 cellpadding\u003d5 summary\u003d\"reference kinds\"\u003e\n \u003ctr\u003e\u003cth\u003ereference kind\u003c/th\u003e\u003cth\u003edescriptive name\u003c/th\u003e\u003cth\u003escope\u003c/th\u003e\u003cth\u003emember\u003c/th\u003e\u003cth\u003ebehavior\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 1}\u003c/td\u003e\u003ctd\u003e{@code REF_getField}\u003c/td\u003e\u003ctd\u003e{@code class}\u003c/td\u003e\n     \u003ctd\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code (T) this.f;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 2}\u003c/td\u003e\u003ctd\u003e{@code REF_getStatic}\u003c/td\u003e\u003ctd\u003e{@code class} or {@code interface}\u003c/td\u003e\n     \u003ctd\u003e{@code static}\u003cbr\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code (T) C.f;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 3}\u003c/td\u003e\u003ctd\u003e{@code REF_putField}\u003c/td\u003e\u003ctd\u003e{@code class}\u003c/td\u003e\n     \u003ctd\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code this.f \u003d x;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 4}\u003c/td\u003e\u003ctd\u003e{@code REF_putStatic}\u003c/td\u003e\u003ctd\u003e{@code class}\u003c/td\u003e\n     \u003ctd\u003e{@code static}\u003cbr\u003e{@code FT f;}\u003c/td\u003e\u003ctd\u003e{@code C.f \u003d arg;}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 5}\u003c/td\u003e\u003ctd\u003e{@code REF_invokeVirtual}\u003c/td\u003e\u003ctd\u003e{@code class}\u003c/td\u003e\n     \u003ctd\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) this.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 6}\u003c/td\u003e\u003ctd\u003e{@code REF_invokeStatic}\u003c/td\u003e\u003ctd\u003e{@code class} or {@code interface}\u003c/td\u003e\n     \u003ctd\u003e{@code static}\u003cbr\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) C.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 7}\u003c/td\u003e\u003ctd\u003e{@code REF_invokeSpecial}\u003c/td\u003e\u003ctd\u003e{@code class} or {@code interface}\u003c/td\u003e\n     \u003ctd\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) super.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 8}\u003c/td\u003e\u003ctd\u003e{@code REF_newInvokeSpecial}\u003c/td\u003e\u003ctd\u003e{@code class}\u003c/td\u003e\n     \u003ctd\u003e{@code C(A*);}\u003c/td\u003e\u003ctd\u003e{@code new C(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003ctr\u003e\n     \u003ctd\u003e{@code 9}\u003c/td\u003e\u003ctd\u003e{@code REF_invokeInterface}\u003c/td\u003e\u003ctd\u003e{@code interface}\u003c/td\u003e\n     \u003ctd\u003e{@code T m(A*);}\u003c/td\u003e\u003ctd\u003e{@code (T) this.m(arg*);}\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"MethodHandleInfo","qualifiedName":"java.lang.invoke.MethodHandleInfo","dimension":"","elementType":{},"package":"java.lang.invoke","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"REF_getField","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"1"},{"name":"REF_getStatic","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"},{"name":"REF_putField","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"3"},{"name":"REF_putStatic","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"4"},{"name":"REF_invokeVirtual","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"5"},{"name":"REF_invokeStatic","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"6"},{"name":"REF_invokeSpecial","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"7"},{"name":"REF_newInvokeSpecial","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"8"},{"name":"REF_invokeInterface","comment":"A direct method handle reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"9"}],"methods":[{"name":"getReferenceKind","comment":"Returns the reference kind of the cracked method handle, which in turn\n determines whether the method handle\u0027s underlying member was a constructor, method, or field.\n See the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e for definitions.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDeclaringClass","comment":"Returns the class in which the cracked method handle\u0027s underlying member was defined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getName","comment":"Returns the name of the cracked method handle\u0027s underlying member.\n This is {@code \"\u003cinit\u003e\"} if the underlying member was a constructor,\n else it is a simple method name or field name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMethodType","comment":"Returns the nominal type of the cracked symbolic reference, expressed as a method type.\n If the reference is to a constructor, the return type will be {@code void}.\n If it is to a non-static method, the method type will not mention the {@code this} parameter.\n If it is to a field and the requested access is to read the field,\n the method type will have no parameters and return the field type.\n If it is to a field and the requested access is to write the field,\n the method type will have one parameter of the field type and return {@code void}.\n \u003cp\u003e\n Note that original direct method handle may include a leading {@code this} parameter,\n or (in the case of a constructor) will replace the {@code void} return type\n with the constructed class.\n The nominal type does not include any {@code this} parameter,\n and (in the case of a constructor) will return {@code void}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"reflectAs","comment":"Reflects the underlying member as a method, constructor, or field object.\n If the underlying member is public, it is reflected as if by\n {@code getMethod}, {@code getConstructor}, or {@code getField}.\n Otherwise, it is reflected as if by\n {@code getDeclaredMethod}, {@code getDeclaredConstructor}, or {@code getDeclaredField}.\n The underlying member must be accessible to the given lookup object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003cT\u003e, java.lang.invoke.MethodHandles.Lookup)","flatSignature":"(Class\u003cT\u003e, MethodHandles.Lookup)","returnType":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":["java.lang.reflect.Member"]}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"expected","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"lookup","type":{"isPrimitive":false,"simpleName":"Lookup","qualifiedName":"java.lang.invoke.MethodHandles.Lookup","dimension":"","elementType":{}}}],"typeParameters":[{"name":"T","bounds":["java.lang.reflect.Member"]}]},{"name":"getModifiers","comment":"Returns the access modifiers of the underlying member.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isVarArgs","comment":"Determines if the underlying member was a variable arity method or constructor.\n Such members are represented by method handles that are varargs collectors.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":true,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"referenceKindToString","comment":"Returns the descriptive name of the given reference kind,\n as defined in the \u003ca href\u003d\"MethodHandleInfo.html#refkinds\"\u003etable above\u003c/a\u003e.\n The conventional prefix \"REF_\" is omitted.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"referenceKind","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation for a {@code MethodHandleInfo},\n given the four parts of its symbolic reference.\n This is defined to be of the form {@code \"RK C.N:MT\"}, where {@code RK} is the\n {@linkplain #referenceKindToString reference kind string} for {@code kind},\n {@code C} is the {@linkplain java.lang.Class#getName name} of {@code defc}\n {@code N} is the {@code name}, and\n {@code MT} is the {@code type}.\n These four values may be obtained from the\n {@linkplain #getReferenceKind reference kind},\n {@linkplain #getDeclaringClass declaring class},\n {@linkplain #getName member name},\n and {@linkplain #getMethodType method type}\n of a {@code MethodHandleInfo} object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.Class\u003c?\u003e, java.lang.String, java.lang.invoke.MethodType)","flatSignature":"(int, Class\u003c?\u003e, String, MethodType)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"kind","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"defc","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"type","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}