{"name":"MethodType","comment":"A method type represents the arguments and return type accepted and\n returned by a method handle, or the arguments and return type passed\n and expected  by a method handle caller.  Method types must be properly\n matched between a method handle and all its callers,\n and the JVM\u0027s operations enforce this matching at, specifically\n during calls to {@link MethodHandle#invokeExact MethodHandle.invokeExact}\n and {@link MethodHandle#invoke MethodHandle.invoke}, and during execution\n of {@code invokedynamic} instructions.\n \u003cp\u003e\n The structure is a return type accompanied by any number of parameter types.\n The types (primitive, {@code void}, and reference) are represented by {@link Class} objects.\n (For ease of exposition, we treat {@code void} as if it were a type.\n In fact, it denotes the absence of a return type.)\n \u003cp\u003e\n All instances of {@code MethodType} are immutable.\n Two instances are completely interchangeable if they compare equal.\n Equality depends on pairwise correspondence of the return and parameter types and on nothing else.\n \u003cp\u003e\n This type can be created only by factory methods.\n All factory methods may cache values, though caching is not guaranteed.\n Some factory methods are static, while others are virtual methods which\n modify precursor method types, e.g., by changing a selected parameter.\n \u003cp\u003e\n Factory methods which operate on groups of parameter types\n are systematically presented in two versions, so that both Java arrays and\n Java lists can be used to work with groups of parameter types.\n The query methods {@code parameterArray} and {@code parameterList}\n also provide a choice between arrays and lists.\n \u003cp\u003e\n {@code MethodType} objects are sometimes derived from bytecode instructions\n such as {@code invokedynamic}, specifically from the type descriptor strings associated\n with the instructions in a class file\u0027s constant pool.\n \u003cp\u003e\n Like classes and strings, method types can also be represented directly\n in a class file\u0027s constant pool as constants.\n A method type may be loaded by an {@code ldc} instruction which refers\n to a suitable {@code CONSTANT_MethodType} constant pool entry.\n The entry refers to a {@code CONSTANT_Utf8} spelling for the descriptor string.\n (For full details on method type constants,\n see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n \u003cp\u003e\n When the JVM materializes a {@code MethodType} from a descriptor string,\n all classes named in the descriptor must be accessible, and will be loaded.\n (But the classes need not be initialized, as is the case with a {@code CONSTANT_Class}.)\n This loading may occur at any time before the {@code MethodType} object is first derived.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{},"package":"java.lang.invoke","superclass":"java.lang.Object","interfaces":["java.io.Serializable"],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"methodType","comment":"Finds or creates an instance of the given method type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e[])","flatSignature":"(Class\u003c?\u003e, Class\u003c?\u003e[])","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"ptypes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"methodType","comment":"Finds or creates a method type with the given components.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)","flatSignature":"(Class\u003c?\u003e, List\u003cClass\u003c?\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"ptypes","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"methodType","comment":"Finds or creates a method type with the given components.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n The leading parameter type is prepended to the remaining array.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e...)","flatSignature":"(Class\u003c?\u003e, Class\u003c?\u003e, Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"ptype0","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"ptypes","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"methodType","comment":"Finds or creates a method type with the given components.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n The resulting method has no parameter types.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"methodType","comment":"Finds or creates a method type with the given components.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n The resulting method has the single given parameter type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"ptype0","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"methodType","comment":"Finds or creates a method type with the given components.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n The resulting method has the same parameter types as {@code ptypes},\n and the specified return type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, java.lang.invoke.MethodType)","flatSignature":"(Class\u003c?\u003e, MethodType)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"rtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"ptypes","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"genericMethodType","comment":"Finds or creates a method type whose components are {@code Object} with an optional trailing {@code Object[]} array.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n All parameters and the return type will be {@code Object},\n except the final array parameter if any, which will be {@code Object[]}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, boolean)","flatSignature":"(int, boolean)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"objectArgCount","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"finalArray","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"genericMethodType","comment":"Finds or creates a method type whose components are all {@code Object}.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n All parameters and the return type will be Object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"objectArgCount","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"changeParameterType","comment":"Finds or creates a method type with a single different parameter type.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.Class\u003c?\u003e)","flatSignature":"(int, Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"num","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"nptype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"insertParameterTypes","comment":"Finds or creates a method type with additional parameter types.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.lang.Class\u003c?\u003e...)","flatSignature":"(int, Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"num","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"ptypesToInsert","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"appendParameterTypes","comment":"Finds or creates a method type with additional parameter types.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e...)","flatSignature":"(Class\u003c?\u003e...)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ptypesToInsert","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"insertParameterTypes","comment":"Finds or creates a method type with additional parameter types.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)","flatSignature":"(int, List\u003cClass\u003c?\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"num","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"ptypesToInsert","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"appendParameterTypes","comment":"Finds or creates a method type with additional parameter types.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)","flatSignature":"(List\u003cClass\u003c?\u003e\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"ptypesToInsert","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"dropParameterTypes","comment":"Finds or creates a method type with some parameter types omitted.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int)","flatSignature":"(int, int)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"start","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"end","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"changeReturnType","comment":"Finds or creates a method type with a different return type.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"nrtype","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasPrimitives","comment":"Reports if this type contains a primitive argument or return value.\n The return type {@code void} counts as a primitive.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hasWrappers","comment":"Reports if this type contains a wrapper argument or return value.\n Wrappers are types which box primitive values, such as {@link Integer}.\n The reference type {@code java.lang.Void} counts as a wrapper,\n if it occurs as a return type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"erase","comment":"Erases all reference types to {@code Object}.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n All primitive types (including {@code void}) will remain unchanged.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"generic","comment":"Converts all types, both reference and primitive, to {@code Object}.\n Convenience method for {@link #genericMethodType(int) genericMethodType}.\n The expression {@code type.wrap().erase()} produces the same value\n as {@code type.generic()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"wrap","comment":"Converts all primitive types to their corresponding wrapper types.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n All reference types (including wrapper types) will remain unchanged.\n A {@code void} return type is changed to the type {@code java.lang.Void}.\n The expression {@code type.wrap().erase()} produces the same value\n as {@code type.generic()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"unwrap","comment":"Converts all wrapper types to their corresponding primitive types.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n All primitive types (including {@code void}) will remain unchanged.\n A return type of {@code java.lang.Void} is changed to {@code void}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parameterType","comment":"Returns the parameter type at the specified index, within this method type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"num","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parameterCount","comment":"Returns the number of parameter types in this method type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"returnType","comment":"Returns the return type of this method type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parameterList","comment":"Presents the parameter types as a list (a convenience method).\n The list will be immutable.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"parameterArray","comment":"Presents the parameter types as an array (a convenience method).\n Changes to the array will not result in changes to the type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"equals","comment":"Compares the specified object with this type for equality.\n That is, it returns \u003ctt\u003etrue\u003c/tt\u003e if and only if the specified object\n is also a method type with exactly the same parameters and return type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hashCode","comment":"Returns the hash code value for this method type.\n It is defined to be the same as the hashcode of a List\n whose elements are the return type followed by the\n parameter types.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of the method type,\n of the form {@code \"(PT0,PT1...)RT\"}.\n The string representation of a method type is a\n parenthesis enclosed, comma separated list of type names,\n followed immediately by the return type.\n \u003cp\u003e\n Each type is represented by its\n {@link java.lang.Class#getSimpleName simple name}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"fromMethodDescriptorString","comment":"Finds or creates an instance of a method type, given the spelling of its bytecode descriptor.\n Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n Any class or interface name embedded in the descriptor string\n will be resolved by calling {@link ClassLoader#loadClass(java.lang.String)}\n on the given loader (or if it is null, on the system class loader).\n \u003cp\u003e\n Note that it is possible to encounter method types which cannot be\n constructed by this method, because their component types are\n not all reachable from a common class loader.\n \u003cp\u003e\n This method is included for the benefit of applications that must\n generate bytecodes that process method handles and {@code invokedynamic}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.ClassLoader)","flatSignature":"(String, ClassLoader)","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"descriptor","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"loader","type":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toMethodDescriptorString","comment":"Produces a bytecode descriptor representation of the method type.\n \u003cp\u003e\n Note that this is not a strict inverse of {@link #fromMethodDescriptorString fromMethodDescriptorString}.\n Two distinct classes which share a common name but have different class loaders\n will appear identical when viewed within descriptor strings.\n \u003cp\u003e\n This method is included for the benefit of applications that must\n generate bytecodes that process method handles and {@code invokedynamic}.\n {@link #fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) fromMethodDescriptorString},\n because the latter requires a suitable class loader argument.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}