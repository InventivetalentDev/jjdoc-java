{"name":"MethodHandle","comment":"A method handle is a typed, directly executable reference to an underlying method,\n constructor, field, or similar low-level operation, with optional\n transformations of arguments or return values.\n These transformations are quite general, and include such patterns as\n {@linkplain #asType conversion},\n {@linkplain #bindTo insertion},\n {@linkplain java.lang.invoke.MethodHandles#dropArguments deletion},\n and {@linkplain java.lang.invoke.MethodHandles#filterArguments substitution}.\n\n \u003ch1\u003eMethod handle contents\u003c/h1\u003e\n Method handles are dynamically and strongly typed according to their parameter and return types.\n They are not distinguished by the name or the defining class of their underlying methods.\n A method handle must be invoked using a symbolic type descriptor which matches\n the method handle\u0027s own {@linkplain #type type descriptor}.\n \u003cp\u003e\n Every method handle reports its type descriptor via the {@link #type type} accessor.\n This type descriptor is a {@link java.lang.invoke.MethodType MethodType} object,\n whose structure is a series of classes, one of which is\n the return type of the method (or {@code void.class} if none).\n \u003cp\u003e\n A method handle\u0027s type controls the types of invocations it accepts,\n and the kinds of transformations that apply to it.\n \u003cp\u003e\n A method handle contains a pair of special invoker methods\n called {@link #invokeExact invokeExact} and {@link #invoke invoke}.\n Both invoker methods provide direct access to the method handle\u0027s\n underlying method, constructor, field, or other operation,\n as modified by transformations of arguments and return values.\n Both invokers accept calls which exactly match the method handle\u0027s own type.\n The plain, inexact invoker also accepts a range of other call types.\n \u003cp\u003e\n Method handles are immutable and have no visible state.\n Of course, they can be bound to underlying methods or data which exhibit state.\n With respect to the Java Memory Model, any method handle will behave\n as if all of its (internal) fields are final variables.  This means that any method\n handle made visible to the application will always be fully formed.\n This is true even if the method handle is published through a shared\n variable in a data race.\n \u003cp\u003e\n Method handles cannot be subclassed by the user.\n Implementations may (or may not) create internal subclasses of {@code MethodHandle}\n which may be visible via the {@link java.lang.Object#getClass Object.getClass}\n operation.  The programmer should not draw conclusions about a method handle\n from its specific class, as the method handle class hierarchy (if any)\n may change from time to time or across implementations from different vendors.\n\n \u003ch1\u003eMethod handle compilation\u003c/h1\u003e\n A Java method call expression naming {@code invokeExact} or {@code invoke}\n can invoke a method handle from Java source code.\n From the viewpoint of source code, these methods can take any arguments\n and their result can be cast to any return type.\n Formally this is accomplished by giving the invoker methods\n {@code Object} return types and variable arity {@code Object} arguments,\n but they have an additional quality called \u003cem\u003esignature polymorphism\u003c/em\u003e\n which connects this freedom of invocation directly to the JVM execution stack.\n \u003cp\u003e\n As is usual with virtual methods, source-level calls to {@code invokeExact}\n and {@code invoke} compile to an {@code invokevirtual} instruction.\n More unusually, the compiler must record the actual argument types,\n and may not perform method invocation conversions on the arguments.\n Instead, it must push them on the stack according to their own unconverted types.\n The method handle object itself is pushed on the stack before the arguments.\n The compiler then calls the method handle with a symbolic type descriptor which\n describes the argument and return types.\n \u003cp\u003e\n To issue a complete symbolic type descriptor, the compiler must also determine\n the return type.  This is based on a cast on the method invocation expression,\n if there is one, or else {@code Object} if the invocation is an expression\n or else {@code void} if the invocation is a statement.\n The cast may be to a primitive type (but not {@code void}).\n \u003cp\u003e\n As a corner case, an uncasted {@code null} argument is given\n a symbolic type descriptor of {@code java.lang.Void}.\n The ambiguity with the type {@code Void} is harmless, since there are no references of type\n {@code Void} except the null reference.\n\n \u003ch1\u003eMethod handle invocation\u003c/h1\u003e\n The first time a {@code invokevirtual} instruction is executed\n it is linked, by symbolically resolving the names in the instruction\n and verifying that the method call is statically legal.\n This is true of calls to {@code invokeExact} and {@code invoke}.\n In this case, the symbolic type descriptor emitted by the compiler is checked for\n correct syntax and names it contains are resolved.\n Thus, an {@code invokevirtual} instruction which invokes\n a method handle will always link, as long\n as the symbolic type descriptor is syntactically well-formed\n and the types exist.\n \u003cp\u003e\n When the {@code invokevirtual} is executed after linking,\n the receiving method handle\u0027s type is first checked by the JVM\n to ensure that it matches the symbolic type descriptor.\n If the type match fails, it means that the method which the\n caller is invoking is not present on the individual\n method handle being invoked.\n \u003cp\u003e\n In the case of {@code invokeExact}, the type descriptor of the invocation\n (after resolving symbolic type names) must exactly match the method type\n of the receiving method handle.\n In the case of plain, inexact {@code invoke}, the resolved type descriptor\n must be a valid argument to the receiver\u0027s {@link #asType asType} method.\n Thus, plain {@code invoke} is more permissive than {@code invokeExact}.\n \u003cp\u003e\n After type matching, a call to {@code invokeExact} directly\n and immediately invoke the method handle\u0027s underlying method\n (or other behavior, as the case may be).\n \u003cp\u003e\n A call to plain {@code invoke} works the same as a call to\n {@code invokeExact}, if the symbolic type descriptor specified by the caller\n exactly matches the method handle\u0027s own type.\n If there is a type mismatch, {@code invoke} attempts\n to adjust the type of the receiving method handle,\n as if by a call to {@link #asType asType},\n to obtain an exactly invokable method handle {@code M2}.\n This allows a more powerful negotiation of method type\n between caller and callee.\n \u003cp\u003e\n (\u003cem\u003eNote:\u003c/em\u003e The adjusted method handle {@code M2} is not directly observable,\n and implementations are therefore not required to materialize it.)\n\n \u003ch1\u003eInvocation checking\u003c/h1\u003e\n In typical programs, method handle type matching will usually succeed.\n But if a match fails, the JVM will throw a {@link WrongMethodTypeException},\n either directly (in the case of {@code invokeExact}) or indirectly as if\n by a failed call to {@code asType} (in the case of {@code invoke}).\n \u003cp\u003e\n Thus, a method type mismatch which might show up as a linkage error\n in a statically typed program can show up as\n a dynamic {@code WrongMethodTypeException}\n in a program which uses method handles.\n \u003cp\u003e\n Because method types contain \"live\" {@code Class} objects,\n method type matching takes into account both types names and class loaders.\n Thus, even if a method handle {@code M} is created in one\n class loader {@code L1} and used in another {@code L2},\n method handle calls are type-safe, because the caller\u0027s symbolic type\n descriptor, as resolved in {@code L2},\n is matched against the original callee method\u0027s symbolic type descriptor,\n as resolved in {@code L1}.\n The resolution in {@code L1} happens when {@code M} is created\n and its type is assigned, while the resolution in {@code L2} happens\n when the {@code invokevirtual} instruction is linked.\n \u003cp\u003e\n Apart from the checking of type descriptors,\n a method handle\u0027s capability to call its underlying method is unrestricted.\n If a method handle is formed on a non-public method by a class\n that has access to that method, the resulting handle can be used\n in any place by any caller who receives a reference to it.\n \u003cp\u003e\n Unlike with the Core Reflection API, where access is checked every time\n a reflective method is invoked,\n method handle access checking is performed\n \u003ca href\u003d\"MethodHandles.Lookup.html#access\"\u003ewhen the method handle is created\u003c/a\u003e.\n In the case of {@code ldc} (see below), access checking is performed as part of linking\n the constant pool entry underlying the constant method handle.\n \u003cp\u003e\n Thus, handles to non-public methods, or to methods in non-public classes,\n should generally be kept secret.\n They should not be passed to untrusted code unless their use from\n the untrusted code would be harmless.\n\n \u003ch1\u003eMethod handle creation\u003c/h1\u003e\n Java code can create a method handle that directly accesses\n any method, constructor, or field that is accessible to that code.\n This is done via a reflective, capability-based API called\n {@link java.lang.invoke.MethodHandles.Lookup MethodHandles.Lookup}\n For example, a static method handle can be obtained\n from {@link java.lang.invoke.MethodHandles.Lookup#findStatic Lookup.findStatic}.\n There are also conversion methods from Core Reflection API objects,\n such as {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}.\n \u003cp\u003e\n Like classes and strings, method handles that correspond to accessible\n fields, methods, and constructors can also be represented directly\n in a class file\u0027s constant pool as constants to be loaded by {@code ldc} bytecodes.\n A new type of constant pool entry, {@code CONSTANT_MethodHandle},\n refers directly to an associated {@code CONSTANT_Methodref},\n {@code CONSTANT_InterfaceMethodref}, or {@code CONSTANT_Fieldref}\n constant pool entry.\n (For full details on method handle constants,\n see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n \u003cp\u003e\n Method handles produced by lookups or constant loads from methods or\n constructors with the variable arity modifier bit ({@code 0x0080})\n have a corresponding variable arity, as if they were defined with\n the help of {@link #asVarargsCollector asVarargsCollector}.\n \u003cp\u003e\n A method reference may refer either to a static or non-static method.\n In the non-static case, the method handle type includes an explicit\n receiver argument, prepended before any other arguments.\n In the method handle\u0027s type, the initial receiver argument is typed\n according to the class under which the method was initially requested.\n (E.g., if a non-static method handle is obtained via {@code ldc},\n the type of the receiver is the class named in the constant pool entry.)\n \u003cp\u003e\n Method handle constants are subject to the same link-time access checks\n their corresponding bytecode instructions, and the {@code ldc} instruction\n will throw corresponding linkage errors if the bytecode behaviors would\n throw such errors.\n \u003cp\u003e\n As a corollary of this, access to protected members is restricted\n to receivers only of the accessing class, or one of its subclasses,\n and the accessing class must in turn be a subclass (or package sibling)\n of the protected member\u0027s defining class.\n If a method reference refers to a protected non-static method or field\n of a class outside the current package, the receiver argument will\n be narrowed to the type of the accessing class.\n \u003cp\u003e\n When a method handle to a virtual method is invoked, the method is\n always looked up in the receiver (that is, the first argument).\n \u003cp\u003e\n A non-virtual method handle to a specific virtual method implementation\n can also be created.  These do not perform virtual lookup based on\n receiver type.  Such a method handle simulates the effect of\n an {@code invokespecial} instruction to the same method.\n\n \u003ch1\u003eUsage examples\u003c/h1\u003e\n Here are some examples of usage:\n \u003cblockquote\u003e\u003cpre\u003e{@code\nObject x, y; String s; int i;\nMethodType mt; MethodHandle mh;\nMethodHandles.Lookup lookup \u003d MethodHandles.lookup();\n// mt is (char,char)String\nmt \u003d MethodType.methodType(String.class, char.class, char.class);\nmh \u003d lookup.findVirtual(String.class, \"replace\", mt);\ns \u003d (String) mh.invokeExact(\"daddy\",\u0027d\u0027,\u0027n\u0027);\n// invokeExact(Ljava/lang/String;CC)Ljava/lang/String;\nassertEquals(s, \"nanny\");\n// weakly typed invocation (using MHs.invoke)\ns \u003d (String) mh.invokeWithArguments(\"sappy\", \u0027p\u0027, \u0027v\u0027);\nassertEquals(s, \"savvy\");\n// mt is (Object[])List\nmt \u003d MethodType.methodType(java.util.List.class, Object[].class);\nmh \u003d lookup.findStatic(java.util.Arrays.class, \"asList\", mt);\nassert(mh.isVarargsCollector());\nx \u003d mh.invoke(\"one\", \"two\");\n// invoke(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\nassertEquals(x, java.util.Arrays.asList(\"one\",\"two\"));\n// mt is (Object,Object,Object)Object\nmt \u003d MethodType.genericMethodType(3);\nmh \u003d mh.asType(mt);\nx \u003d mh.invokeExact((Object)1, (Object)2, (Object)3);\n// invokeExact(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\nassertEquals(x, java.util.Arrays.asList(1,2,3));\n// mt is ()int\nmt \u003d MethodType.methodType(int.class);\nmh \u003d lookup.findVirtual(java.util.List.class, \"size\", mt);\ni \u003d (int) mh.invokeExact(java.util.Arrays.asList(1,2,3));\n// invokeExact(Ljava/util/List;)I\nassert(i \u003d\u003d 3);\nmt \u003d MethodType.methodType(void.class, String.class);\nmh \u003d lookup.findVirtual(java.io.PrintStream.class, \"println\", mt);\nmh.invokeExact(System.out, \"Hello, world.\");\n// invokeExact(Ljava/io/PrintStream;Ljava/lang/String;)V\n }\u003c/pre\u003e\u003c/blockquote\u003e\n Each of the above calls to {@code invokeExact} or plain {@code invoke}\n generates a single invokevirtual instruction with\n the symbolic type descriptor indicated in the following comment.\n In these examples, the helper method {@code assertEquals} is assumed to\n be a method which calls {@link java.util.Objects#equals(Object,Object) Objects.equals}\n on its arguments, and asserts that the result is true.\n\n \u003ch1\u003eExceptions\u003c/h1\u003e\n The methods {@code invokeExact} and {@code invoke} are declared\n to throw {@link java.lang.Throwable Throwable},\n which is to say that there is no static restriction on what a method handle\n can throw.  Since the JVM does not distinguish between checked\n and unchecked exceptions (other than by their class, of course),\n there is no particular effect on bytecode shape from ascribing\n checked exceptions to method handle invocations.  But in Java source\n code, methods which perform method handle calls must either explicitly\n throw {@code Throwable}, or else must catch all\n throwables locally, rethrowing only those which are legal in the context,\n and wrapping ones which are illegal.\n\n \u003ch1\u003e\u003ca name\u003d\"sigpoly\"\u003e\u003c/a\u003eSignature polymorphism\u003c/h1\u003e\n The unusual compilation and linkage behavior of\n {@code invokeExact} and plain {@code invoke}\n is referenced by the term \u003cem\u003esignature polymorphism\u003c/em\u003e.\n As defined in the Java Language Specification,\n a signature polymorphic method is one which can operate with\n any of a wide range of call signatures and return types.\n \u003cp\u003e\n In source code, a call to a signature polymorphic method will\n compile, regardless of the requested symbolic type descriptor.\n As usual, the Java compiler emits an {@code invokevirtual}\n instruction with the given symbolic type descriptor against the named method.\n The unusual part is that the symbolic type descriptor is derived from\n the actual argument and return types, not from the method declaration.\n \u003cp\u003e\n When the JVM processes bytecode containing signature polymorphic calls,\n it will successfully link any such call, regardless of its symbolic type descriptor.\n (In order to retain type safety, the JVM will guard such calls with suitable\n dynamic type checks, as described elsewhere.)\n \u003cp\u003e\n Bytecode generators, including the compiler back end, are required to emit\n untransformed symbolic type descriptors for these methods.\n Tools which determine symbolic linkage are required to accept such\n untransformed descriptors, without reporting linkage errors.\n\n \u003ch1\u003eInteroperation between method handles and the Core Reflection API\u003c/h1\u003e\n Using factory methods in the {@link java.lang.invoke.MethodHandles.Lookup Lookup} API,\n any class member represented by a Core Reflection API object\n can be converted to a behaviorally equivalent method handle.\n For example, a reflective {@link java.lang.reflect.Method Method} can\n be converted to a method handle using\n {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}.\n The resulting method handles generally provide more direct and efficient\n access to the underlying class members.\n \u003cp\u003e\n As a special case,\n when the Core Reflection API is used to view the signature polymorphic\n methods {@code invokeExact} or plain {@code invoke} in this class,\n they appear as ordinary non-polymorphic methods.\n Their reflective appearance, as viewed by\n {@link java.lang.Class#getDeclaredMethod Class.getDeclaredMethod},\n is unaffected by their special status in this API.\n For example, {@link java.lang.reflect.Method#getModifiers Method.getModifiers}\n will report exactly those modifier bits required for any similarly\n declared method, including in this case {@code native} and {@code varargs} bits.\n \u003cp\u003e\n As with any reflected method, these methods (when reflected) may be\n invoked via {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}.\n However, such reflective calls do not result in method handle invocations.\n Such a call, if passed the required argument\n (a single one, of type {@code Object[]}), will ignore the argument and\n will throw an {@code UnsupportedOperationException}.\n \u003cp\u003e\n Since {@code invokevirtual} instructions can natively\n invoke method handles under any symbolic type descriptor, this reflective view conflicts\n with the normal presentation of these methods via bytecodes.\n Thus, these two native methods, when reflectively viewed by\n {@code Class.getDeclaredMethod}, may be regarded as placeholders only.\n \u003cp\u003e\n In order to obtain an invoker method for a particular type descriptor,\n use {@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker},\n or {@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}.\n The {@link java.lang.invoke.MethodHandles.Lookup#findVirtual Lookup.findVirtual}\n API is also able to return a method handle\n to call {@code invokeExact} or plain {@code invoke},\n for any specified type descriptor .\n\n \u003ch1\u003eInteroperation between method handles and Java generics\u003c/h1\u003e\n A method handle can be obtained on a method, constructor, or field\n which is declared with Java generic types.\n As with the Core Reflection API, the type of the method handle\n will constructed from the erasure of the source-level type.\n When a method handle is invoked, the types of its arguments\n or the return value cast type may be generic types or type instances.\n If this occurs, the compiler will replace those\n types by their erasures when it constructs the symbolic type descriptor\n for the {@code invokevirtual} instruction.\n \u003cp\u003e\n Method handles do not represent\n their function-like types in terms of Java parameterized (generic) types,\n because there are three mismatches between function-like types and parameterized\n Java types.\n \u003cul\u003e\n \u003cli\u003eMethod types range over all possible arities,\n from no arguments to up to the  \u003ca href\u003d\"MethodHandle.html#maxarity\"\u003emaximum number\u003c/a\u003e of allowed arguments.\n Generics are not variadic, and so cannot represent this.\u003c/li\u003e\n \u003cli\u003eMethod types can specify arguments of primitive types,\n which Java generic types cannot range over.\u003c/li\u003e\n \u003cli\u003eHigher order functions over method handles (combinators) are\n often generic across a wide range of function types, including\n those of multiple arities.  It is impossible to represent such\n genericity with a Java type parameter.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003ch1\u003e\u003ca name\u003d\"maxarity\"\u003e\u003c/a\u003eArity limits\u003c/h1\u003e\n The JVM imposes on all methods and constructors of any kind an absolute\n limit of 255 stacked arguments.  This limit can appear more restrictive\n in certain cases:\n \u003cul\u003e\n \u003cli\u003eA {@code long} or {@code double} argument counts (for purposes of arity limits) as two argument slots.\n \u003cli\u003eA non-static method consumes an extra argument for the object on which the method is called.\n \u003cli\u003eA constructor consumes an extra argument for the object which is being constructed.\n \u003cli\u003eSince a method handle\u0026rsquo;s {@code invoke} method (or other signature-polymorphic method) is non-virtual,\n     it consumes an extra argument for the method handle itself, in addition to any non-virtual receiver object.\n \u003c/ul\u003e\n These limits imply that certain method handles cannot be created, solely because of the JVM limit on stacked arguments.\n For example, if a static JVM method accepts exactly 255 arguments, a method handle cannot be created for it.\n Attempts to create method handles with impossible method types lead to an {@link IllegalArgumentException}.\n In particular, a method handle\u0026rsquo;s type must not have an arity of the exact maximum 255.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{},"package":"java.lang.invoke","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"type","comment":"Reports the type of this method handle.\n Every invocation of this method handle via {@code invokeExact} must exactly match this type.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"invokeExact","comment":"Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match.\n The symbolic type descriptor at the call site of {@code invokeExact} must\n exactly match this method handle\u0027s {@link #type type}.\n No conversions are allowed on arguments or return values.\n \u003cp\u003e\n When this method is observed via the Core Reflection API,\n it will appear as a single native method, taking an object array and returning an object.\n If this native method is invoked directly via\n {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI,\n or indirectly via {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect},\n it will throw an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object...)","flatSignature":"(Object...)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"invoke","comment":"Invokes the method handle, allowing any caller type descriptor,\n and optionally performing conversions on arguments and return values.\n \u003cp\u003e\n If the call site\u0027s symbolic type descriptor exactly matches this method handle\u0027s {@link #type type},\n the call proceeds as if by {@link #invokeExact invokeExact}.\n \u003cp\u003e\n Otherwise, the call proceeds as if this method handle were first\n adjusted by calling {@link #asType asType} to adjust this method handle\n to the required type, and then the call proceeds as if by\n {@link #invokeExact invokeExact} on the adjusted method handle.\n \u003cp\u003e\n There is no guarantee that the {@code asType} call is actually made.\n If the JVM can predict the results of making the call, it may perform\n adaptations directly on the caller\u0027s arguments,\n and call the target method handle according to its own exact type.\n \u003cp\u003e\n The resolved type descriptor at the call site of {@code invoke} must\n be a valid argument to the receivers {@code asType} method.\n In particular, the caller must specify the same argument arity\n as the callee\u0027s type,\n if the callee is not a {@linkplain #asVarargsCollector variable arity collector}.\n \u003cp\u003e\n When this method is observed via the Core Reflection API,\n it will appear as a single native method, taking an object array and returning an object.\n If this native method is invoked directly via\n {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI,\n or indirectly via {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect},\n it will throw an {@code UnsupportedOperationException}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object...)","flatSignature":"(Object...)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"args","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"invokeWithArguments","comment":"Performs a variable arity invocation, passing the arguments in the given list\n to the method handle, as if via an inexact {@link #invoke invoke} from a call site\n which mentions only the type {@code Object}, and whose arity is the length\n of the argument list.\n \u003cp\u003e\n Specifically, execution proceeds as if by the following steps,\n although the methods are not guaranteed to be called if the JVM\n can predict their effects.\n \u003cul\u003e\n \u003cli\u003eDetermine the length of the argument array as {@code N}.\n     For a null reference, {@code N\u003d0}. \u003c/li\u003e\n \u003cli\u003eDetermine the general type {@code TN} of {@code N} arguments as\n     as {@code TN\u003dMethodType.genericMethodType(N)}.\u003c/li\u003e\n \u003cli\u003eForce the original target method handle {@code MH0} to the\n     required type, as {@code MH1 \u003d MH0.asType(TN)}. \u003c/li\u003e\n \u003cli\u003eSpread the array into {@code N} separate arguments {@code A0, ...}. \u003c/li\u003e\n \u003cli\u003eInvoke the type-adjusted method handle on the unpacked arguments:\n     MH1.invokeExact(A0, ...). \u003c/li\u003e\n \u003cli\u003eTake the return value as an {@code Object} reference. \u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n Because of the action of the {@code asType} step, the following argument\n conversions are applied as necessary:\n \u003cul\u003e\n \u003cli\u003ereference casting\n \u003cli\u003eunboxing\n \u003cli\u003ewidening primitive conversions\n \u003c/ul\u003e\n \u003cp\u003e\n The result returned by the call is boxed if it is a primitive,\n or forced to null if the return type is void.\n \u003cp\u003e\n This call is equivalent to the following code:\n \u003cblockquote\u003e\u003cpre\u003e{@code\n MethodHandle invoker \u003d MethodHandles.spreadInvoker(this.type(), 0);\n Object result \u003d invoker.invokeExact(this, arguments);\n }\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n Unlike the signature polymorphic methods {@code invokeExact} and {@code invoke},\n {@code invokeWithArguments} can be accessed normally via the Core Reflection API and JNI.\n It can therefore be used as a bridge between native or reflective code and method handles.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object...)","flatSignature":"(Object...)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arguments","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"invokeWithArguments","comment":"Performs a variable arity invocation, passing the arguments in the given array\n to the method handle, as if via an inexact {@link #invoke invoke} from a call site\n which mentions only the type {@code Object}, and whose arity is the length\n of the argument array.\n \u003cp\u003e\n This method is also equivalent to the following code:\n \u003cblockquote\u003e\u003cpre\u003e{@code\n   invokeWithArguments(arguments.toArray()\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003c?\u003e)","flatSignature":"(List\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arguments","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asType","comment":"Produces an adapter method handle which adapts the type of the\n current method handle to a new type.\n The resulting method handle is guaranteed to report a type\n which is equal to the desired new type.\n \u003cp\u003e\n If the original type and new type are equal, returns {@code this}.\n \u003cp\u003e\n The new method handle, when invoked, will perform the following\n steps:\n \u003cul\u003e\n \u003cli\u003eConvert the incoming argument list to match the original\n     method handle\u0027s argument list.\n \u003cli\u003eInvoke the original method handle on the converted argument list.\n \u003cli\u003eConvert any result returned by the original method handle\n     to the return type of new method handle.\n \u003c/ul\u003e\n \u003cp\u003e\n This method provides the crucial behavioral difference between\n {@link #invokeExact invokeExact} and plain, inexact {@link #invoke invoke}.\n The two methods\n perform the same steps when the caller\u0027s type descriptor exactly m atches\n the callee\u0027s, but when the types differ, plain {@link #invoke invoke}\n also calls {@code asType} (or some internal equivalent) in order\n to match up the caller\u0027s and callee\u0027s types.\n \u003cp\u003e\n If the current method is a variable arity method handle\n argument list conversion may involve the conversion and collection\n of several arguments into an array, as\n {@linkplain #asVarargsCollector described elsewhere}.\n In every other case, all conversions are applied \u003cem\u003epairwise\u003c/em\u003e,\n which means that each argument or return value is converted to\n exactly one argument or return value (or no return value).\n The applied conversions are defined by consulting the\n the corresponding component types of the old and new\n method handle types.\n \u003cp\u003e\n Let \u003cem\u003eT0\u003c/em\u003e and \u003cem\u003eT1\u003c/em\u003e be corresponding new and old parameter types,\n or old and new return types.  Specifically, for some valid index {@code i}, let\n \u003cem\u003eT0\u003c/em\u003e{@code \u003dnewType.parameterType(i)} and \u003cem\u003eT1\u003c/em\u003e{@code \u003dthis.type().parameterType(i)}.\n Or else, going the other way for return values, let\n \u003cem\u003eT0\u003c/em\u003e{@code \u003dthis.type().returnType()} and \u003cem\u003eT1\u003c/em\u003e{@code \u003dnewType.returnType()}.\n If the types are the same, the new method handle makes no change\n to the corresponding argument or return value (if any).\n Otherwise, one of the following conversions is applied\n if possible:\n \u003cul\u003e\n \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e and \u003cem\u003eT1\u003c/em\u003e are references, then a cast to \u003cem\u003eT1\u003c/em\u003e is applied.\n     (The types do not need to be related in any particular way.\n     This is because a dynamic value of null can convert to any reference type.)\n \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e and \u003cem\u003eT1\u003c/em\u003e are primitives, then a Java method invocation\n     conversion (JLS 5.3) is applied, if one exists.\n     (Specifically, \u003cem\u003eT0\u003c/em\u003e must convert to \u003cem\u003eT1\u003c/em\u003e by a widening primitive conversion.)\n \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e is a primitive and \u003cem\u003eT1\u003c/em\u003e a reference,\n     a Java casting conversion (JLS 5.5) is applied if one exists.\n     (Specifically, the value is boxed from \u003cem\u003eT0\u003c/em\u003e to its wrapper class,\n     which is then widened as needed to \u003cem\u003eT1\u003c/em\u003e.)\n \u003cli\u003eIf \u003cem\u003eT0\u003c/em\u003e is a reference and \u003cem\u003eT1\u003c/em\u003e a primitive, an unboxing\n     conversion will be applied at runtime, possibly followed\n     by a Java method invocation conversion (JLS 5.3)\n     on the primitive value.  (These are the primitive widening conversions.)\n     \u003cem\u003eT0\u003c/em\u003e must be a wrapper class or a supertype of one.\n     (In the case where \u003cem\u003eT0\u003c/em\u003e is Object, these are the conversions\n     allowed by {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}.)\n     The unboxing conversion must have a possibility of success, which means that\n     if \u003cem\u003eT0\u003c/em\u003e is not itself a wrapper class, there must exist at least one\n     wrapper class \u003cem\u003eTW\u003c/em\u003e which is a subtype of \u003cem\u003eT0\u003c/em\u003e and whose unboxed\n     primitive value can be widened to \u003cem\u003eT1\u003c/em\u003e.\n \u003cli\u003eIf the return type \u003cem\u003eT1\u003c/em\u003e is marked as void, any returned value is discarded\n \u003cli\u003eIf the return type \u003cem\u003eT0\u003c/em\u003e is void and \u003cem\u003eT1\u003c/em\u003e a reference, a null value is introduced.\n \u003cli\u003eIf the return type \u003cem\u003eT0\u003c/em\u003e is void and \u003cem\u003eT1\u003c/em\u003e a primitive,\n     a zero value is introduced.\n \u003c/ul\u003e\n (\u003cem\u003eNote:\u003c/em\u003e Both \u003cem\u003eT0\u003c/em\u003e and \u003cem\u003eT1\u003c/em\u003e may be regarded as static types,\n because neither corresponds specifically to the \u003cem\u003edynamic type\u003c/em\u003e of any\n actual argument or return value.)\n \u003cp\u003e\n The method handle conversion cannot be made if any one of the required\n pairwise conversions cannot be made.\n \u003cp\u003e\n At runtime, the conversions applied to reference arguments\n or return values may require additional runtime checks which can fail.\n An unboxing operation may fail because the original reference is null,\n causing a {@link java.lang.NullPointerException NullPointerException}.\n An unboxing operation or a reference cast may also fail on a reference\n to an object of the wrong type,\n causing a {@link java.lang.ClassCastException ClassCastException}.\n Although an unboxing operation may accept several kinds of wrappers,\n if none are available, a {@code ClassCastException} will be thrown.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.invoke.MethodType)","flatSignature":"(MethodType)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"newType","type":{"isPrimitive":false,"simpleName":"MethodType","qualifiedName":"java.lang.invoke.MethodType","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asSpreader","comment":"Makes an \u003cem\u003earray-spreading\u003c/em\u003e method handle, which accepts a trailing array argument\n and spreads its elements as positional arguments.\n The new method handle adapts, as its \u003ci\u003etarget\u003c/i\u003e,\n the current method handle.  The type of the adapter will be\n the same as the type of the target, except that the final\n {@code arrayLength} parameters of the target\u0027s type are replaced\n by a single array parameter of type {@code arrayType}.\n \u003cp\u003e\n If the array element type differs from any of the corresponding\n argument types on the original target,\n the original target is adapted to take the array elements directly,\n as if by a call to {@link #asType asType}.\n \u003cp\u003e\n When called, the adapter replaces a trailing array argument\n by the array\u0027s elements, each as its own argument to the target.\n (The order of the arguments is preserved.)\n They are converted pairwise by casting and/or unboxing\n to the types of the trailing parameters of the target.\n Finally the target is called.\n What the target eventually returns is returned unchanged by the adapter.\n \u003cp\u003e\n Before calling the target, the adapter verifies that the array\n contains exactly enough elements to provide a correct argument count\n to the target method handle.\n (The array may also be null when zero elements are required.)\n \u003cp\u003e\n If, when the adapter is called, the supplied array argument does\n not have the correct number of elements, the adapter will throw\n an {@link IllegalArgumentException} instead of invoking the target.\n \u003cp\u003e\n Here are some simple examples of array-spreading method handles:\n \u003cblockquote\u003e\u003cpre\u003e{@code\nMethodHandle equals \u003d publicLookup()\n  .findVirtual(String.class, \"equals\", methodType(boolean.class, Object.class));\nassert( (boolean) equals.invokeExact(\"me\", (Object)\"me\"));\nassert(!(boolean) equals.invokeExact(\"me\", (Object)\"thee\"));\n// spread both arguments from a 2-array:\nMethodHandle eq2 \u003d equals.asSpreader(Object[].class, 2);\nassert( (boolean) eq2.invokeExact(new Object[]{ \"me\", \"me\" }));\nassert(!(boolean) eq2.invokeExact(new Object[]{ \"me\", \"thee\" }));\n// try to spread from anything but a 2-array:\nfor (int n \u003d 0; n \u003c\u003d 10; n++) {\n  Object[] badArityArgs \u003d (n \u003d\u003d 2 ? null : new Object[n]);\n  try { assert((boolean) eq2.invokeExact(badArityArgs) \u0026\u0026 false); }\n  catch (IllegalArgumentException ex) { } // OK\n}\n// spread both arguments from a String array:\nMethodHandle eq2s \u003d equals.asSpreader(String[].class, 2);\nassert( (boolean) eq2s.invokeExact(new String[]{ \"me\", \"me\" }));\nassert(!(boolean) eq2s.invokeExact(new String[]{ \"me\", \"thee\" }));\n// spread second arguments from a 1-array:\nMethodHandle eq1 \u003d equals.asSpreader(Object[].class, 1);\nassert( (boolean) eq1.invokeExact(\"me\", new Object[]{ \"me\" }));\nassert(!(boolean) eq1.invokeExact(\"me\", new Object[]{ \"thee\" }));\n// spread no arguments from a 0-array or null:\nMethodHandle eq0 \u003d equals.asSpreader(Object[].class, 0);\nassert( (boolean) eq0.invokeExact(\"me\", (Object)\"me\", new Object[0]));\nassert(!(boolean) eq0.invokeExact(\"me\", (Object)\"thee\", (Object[])null));\n// asSpreader and asCollector are approximate inverses:\nfor (int n \u003d 0; n \u003c\u003d 2; n++) {\n    for (Class\u003c?\u003e a : new Class\u003c?\u003e[]{Object[].class, String[].class, CharSequence[].class}) {\n        MethodHandle equals2 \u003d equals.asSpreader(a, n).asCollector(a, n);\n        assert( (boolean) equals2.invokeWithArguments(\"me\", \"me\"));\n        assert(!(boolean) equals2.invokeWithArguments(\"me\", \"thee\"));\n    }\n}\nMethodHandle caToString \u003d publicLookup()\n  .findStatic(Arrays.class, \"toString\", methodType(String.class, char[].class));\nassertEquals(\"[A, B, C]\", (String) caToString.invokeExact(\"ABC\".toCharArray()));\nMethodHandle caString3 \u003d caToString.asCollector(char[].class, 3);\nassertEquals(\"[A, B, C]\", (String) caString3.invokeExact(\u0027A\u0027, \u0027B\u0027, \u0027C\u0027));\nMethodHandle caToString2 \u003d caString3.asSpreader(char[].class, 2);\nassertEquals(\"[A, B, C]\", (String) caToString2.invokeExact(\u0027A\u0027, \"BC\".toCharArray()));\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, int)","flatSignature":"(Class\u003c?\u003e, int)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arrayType","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"arrayLength","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asCollector","comment":"Makes an \u003cem\u003earray-collecting\u003c/em\u003e method handle, which accepts a given number of trailing\n positional arguments and collects them into an array argument.\n The new method handle adapts, as its \u003ci\u003etarget\u003c/i\u003e,\n the current method handle.  The type of the adapter will be\n the same as the type of the target, except that a single trailing\n parameter (usually of type {@code arrayType}) is replaced by\n {@code arrayLength} parameters whose type is element type of {@code arrayType}.\n \u003cp\u003e\n If the array type differs from the final argument type on the original target,\n the original target is adapted to take the array type directly,\n as if by a call to {@link #asType asType}.\n \u003cp\u003e\n When called, the adapter replaces its trailing {@code arrayLength}\n arguments by a single new array of type {@code arrayType}, whose elements\n comprise (in order) the replaced arguments.\n Finally the target is called.\n What the target eventually returns is returned unchanged by the adapter.\n \u003cp\u003e\n (The array may also be a shared constant when {@code arrayLength} is zero.)\n \u003cp\u003e\n (\u003cem\u003eNote:\u003c/em\u003e The {@code arrayType} is often identical to the last\n parameter type of the original target.\n It is an explicit argument for symmetry with {@code asSpreader}, and also\n to allow the target to use a simple {@code Object} as its last parameter type.)\n \u003cp\u003e\n In order to create a collecting adapter which is not restricted to a particular\n number of collected arguments, use {@link #asVarargsCollector asVarargsCollector} instead.\n \u003cp\u003e\n Here are some examples of array-collecting method handles:\n \u003cblockquote\u003e\u003cpre\u003e{@code\nMethodHandle deepToString \u003d publicLookup()\n  .findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));\nassertEquals(\"[won]\",   (String) deepToString.invokeExact(new Object[]{\"won\"}));\nMethodHandle ts1 \u003d deepToString.asCollector(Object[].class, 1);\nassertEquals(methodType(String.class, Object.class), ts1.type());\n//assertEquals(\"[won]\", (String) ts1.invokeExact(         new Object[]{\"won\"})); //FAIL\nassertEquals(\"[[won]]\", (String) ts1.invokeExact((Object) new Object[]{\"won\"}));\n// arrayType can be a subtype of Object[]\nMethodHandle ts2 \u003d deepToString.asCollector(String[].class, 2);\nassertEquals(methodType(String.class, String.class, String.class), ts2.type());\nassertEquals(\"[two, too]\", (String) ts2.invokeExact(\"two\", \"too\"));\nMethodHandle ts0 \u003d deepToString.asCollector(Object[].class, 0);\nassertEquals(\"[]\", (String) ts0.invokeExact());\n// collectors can be nested, Lisp-style\nMethodHandle ts22 \u003d deepToString.asCollector(Object[].class, 3).asCollector(String[].class, 2);\nassertEquals(\"[A, B, [C, D]]\", ((String) ts22.invokeExact((Object)\u0027A\u0027, (Object)\"B\", \"C\", \"D\")));\n// arrayType can be any primitive array type\nMethodHandle bytesToString \u003d publicLookup()\n  .findStatic(Arrays.class, \"toString\", methodType(String.class, byte[].class))\n  .asCollector(byte[].class, 3);\nassertEquals(\"[1, 2, 3]\", (String) bytesToString.invokeExact((byte)1, (byte)2, (byte)3));\nMethodHandle longsToString \u003d publicLookup()\n  .findStatic(Arrays.class, \"toString\", methodType(String.class, long[].class))\n  .asCollector(long[].class, 1);\nassertEquals(\"[123]\", (String) longsToString.invokeExact((long)123));\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e, int)","flatSignature":"(Class\u003c?\u003e, int)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arrayType","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}},{"name":"arrayLength","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"asVarargsCollector","comment":"Makes a \u003cem\u003evariable arity\u003c/em\u003e adapter which is able to accept\n any number of trailing positional arguments and collect them\n into an array argument.\n \u003cp\u003e\n The type and behavior of the adapter will be the same as\n the type and behavior of the target, except that certain\n {@code invoke} and {@code asType} requests can lead to\n trailing positional arguments being collected into target\u0027s\n trailing parameter.\n Also, the last parameter type of the adapter will be\n {@code arrayType}, even if the target has a different\n last parameter type.\n \u003cp\u003e\n This transformation may return {@code this} if the method handle is\n already of variable arity and its trailing parameter type\n is identical to {@code arrayType}.\n \u003cp\u003e\n When called with {@link #invokeExact invokeExact}, the adapter invokes\n the target with no argument changes.\n (\u003cem\u003eNote:\u003c/em\u003e This behavior is different from a\n {@linkplain #asCollector fixed arity collector},\n since it accepts a whole array of indeterminate length,\n rather than a fixed number of arguments.)\n \u003cp\u003e\n When called with plain, inexact {@link #invoke invoke}, if the caller\n type is the same as the adapter, the adapter invokes the target as with\n {@code invokeExact}.\n (This is the normal behavior for {@code invoke} when types match.)\n \u003cp\u003e\n Otherwise, if the caller and adapter arity are the same, and the\n trailing parameter type of the caller is a reference type identical to\n or assignable to the trailing parameter type of the adapter,\n the arguments and return values are converted pairwise,\n as if by {@link #asType asType} on a fixed arity\n method handle.\n \u003cp\u003e\n Otherwise, the arities differ, or the adapter\u0027s trailing parameter\n type is not assignable from the corresponding caller type.\n In this case, the adapter replaces all trailing arguments from\n the original trailing argument position onward, by\n a new array of type {@code arrayType}, whose elements\n comprise (in order) the replaced arguments.\n \u003cp\u003e\n The caller type must provides as least enough arguments,\n and of the correct type, to satisfy the target\u0027s requirement for\n positional arguments before the trailing array argument.\n Thus, the caller must supply, at a minimum, {@code N-1} arguments,\n where {@code N} is the arity of the target.\n Also, there must exist conversions from the incoming arguments\n to the target\u0027s arguments.\n As with other uses of plain {@code invoke}, if these basic\n requirements are not fulfilled, a {@code WrongMethodTypeException}\n may be thrown.\n \u003cp\u003e\n In all cases, what the target eventually returns is returned unchanged by the adapter.\n \u003cp\u003e\n In the final case, it is exactly as if the target method handle were\n temporarily adapted with a {@linkplain #asCollector fixed arity collector}\n to the arity required by the caller type.\n (As with {@code asCollector}, if the array length is zero,\n a shared constant may be used instead of a new array.\n If the implied call to {@code asCollector} would throw\n an {@code IllegalArgumentException} or {@code WrongMethodTypeException},\n the call to the variable arity adapter must throw\n {@code WrongMethodTypeException}.)\n \u003cp\u003e\n The behavior of {@link #asType asType} is also specialized for\n variable arity adapters, to maintain the invariant that\n plain, inexact {@code invoke} is always equivalent to an {@code asType}\n call to adjust the target type, followed by {@code invokeExact}.\n Therefore, a variable arity adapter responds\n to an {@code asType} request by building a fixed arity collector,\n if and only if the adapter and requested type differ either\n in arity or trailing argument type.\n The resulting fixed arity collector has its type further adjusted\n (if necessary) to the requested type by pairwise conversion,\n as if by another application of {@code asType}.\n \u003cp\u003e\n When a method handle is obtained by executing an {@code ldc} instruction\n of a {@code CONSTANT_MethodHandle} constant, and the target method is marked\n as a variable arity method (with the modifier bit {@code 0x0080}),\n the method handle will accept multiple arities, as if the method handle\n constant were created by means of a call to {@code asVarargsCollector}.\n \u003cp\u003e\n In order to create a collecting adapter which collects a predetermined\n number of arguments, and whose type reflects this predetermined number,\n use {@link #asCollector asCollector} instead.\n \u003cp\u003e\n No method handle transformations produce new method handles with\n variable arity, unless they are documented as doing so.\n Therefore, besides {@code asVarargsCollector},\n all methods in {@code MethodHandle} and {@code MethodHandles}\n will return a method handle with fixed arity,\n except in the cases where they are specified to return their original\n operand (e.g., {@code asType} of the method handle\u0027s own type).\n \u003cp\u003e\n Calling {@code asVarargsCollector} on a method handle which is already\n of variable arity will produce a method handle with the same type and behavior.\n It may (or may not) return the original variable arity method handle.\n \u003cp\u003e\n Here is an example, of a list-making variable arity method handle:\n \u003cblockquote\u003e\u003cpre\u003e{@code\nMethodHandle deepToString \u003d publicLookup()\n  .findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));\nMethodHandle ts1 \u003d deepToString.asVarargsCollector(Object[].class);\nassertEquals(\"[won]\",   (String) ts1.invokeExact(    new Object[]{\"won\"}));\nassertEquals(\"[won]\",   (String) ts1.invoke(         new Object[]{\"won\"}));\nassertEquals(\"[won]\",   (String) ts1.invoke(                      \"won\" ));\nassertEquals(\"[[won]]\", (String) ts1.invoke((Object) new Object[]{\"won\"}));\n// findStatic of Arrays.asList(...) produces a variable arity method handle:\nMethodHandle asList \u003d publicLookup()\n  .findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class));\nassertEquals(methodType(List.class, Object[].class), asList.type());\nassert(asList.isVarargsCollector());\nassertEquals(\"[]\", asList.invoke().toString());\nassertEquals(\"[1]\", asList.invoke(1).toString());\nassertEquals(\"[two, too]\", asList.invoke(\"two\", \"too\").toString());\nString[] argv \u003d { \"three\", \"thee\", \"tee\" };\nassertEquals(\"[three, thee, tee]\", asList.invoke(argv).toString());\nassertEquals(\"[three, thee, tee]\", asList.invoke((Object[])argv).toString());\nList ls \u003d (List) asList.invoke((Object)argv);\nassertEquals(1, ls.size());\nassertEquals(\"[three, thee, tee]\", Arrays.toString((Object[])ls.get(0)));\n }\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp style\u003d\"font-size:smaller;\"\u003e\n \u003cem\u003eDiscussion:\u003c/em\u003e\n These rules are designed as a dynamically-typed variation\n of the Java rules for variable arity methods.\n In both cases, callers to a variable arity method or method handle\n can either pass zero or more positional arguments, or else pass\n pre-collected arrays of any length.  Users should be aware of the\n special role of the final argument, and of the effect of a\n type match on that final argument, which determines whether\n or not a single trailing argument is interpreted as a whole\n array or a single element of an array to be collected.\n Note that the dynamic type of the trailing argument has no\n effect on this decision, only a comparison between the symbolic\n type descriptor of the call site and the type descriptor of the method handle.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Class\u003c?\u003e)","flatSignature":"(Class\u003c?\u003e)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"arrayType","type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isVarargsCollector","comment":"Determines if this method handle\n supports {@linkplain #asVarargsCollector variable arity} calls.\n Such method handles arise from the following sources:\n \u003cul\u003e\n \u003cli\u003ea call to {@linkplain #asVarargsCollector asVarargsCollector}\n \u003cli\u003ea call to a {@linkplain java.lang.invoke.MethodHandles.Lookup lookup method}\n     which resolves to a variable arity Java method or constructor\n \u003cli\u003ean {@code ldc} instruction of a {@code CONSTANT_MethodHandle}\n     which resolves to a variable arity Java method or constructor\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"asFixedArity","comment":"Makes a \u003cem\u003efixed arity\u003c/em\u003e method handle which is otherwise\n equivalent to the current method handle.\n \u003cp\u003e\n If the current method handle is not of\n {@linkplain #asVarargsCollector variable arity},\n the current method handle is returned.\n This is true even if the current method handle\n could not be a valid input to {@code asVarargsCollector}.\n \u003cp\u003e\n Otherwise, the resulting fixed-arity method handle has the same\n type and behavior of the current method handle,\n except that {@link #isVarargsCollector isVarargsCollector}\n will be false.\n The fixed-arity method handle may (or may not) be the\n a previous argument to {@code asVarargsCollector}.\n \u003cp\u003e\n Here is an example, of a list-making variable arity method handle:\n \u003cblockquote\u003e\u003cpre\u003e{@code\nMethodHandle asListVar \u003d publicLookup()\n  .findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class))\n  .asVarargsCollector(Object[].class);\nMethodHandle asListFix \u003d asListVar.asFixedArity();\nassertEquals(\"[1]\", asListVar.invoke(1).toString());\nException caught \u003d null;\ntry { asListFix.invoke((Object)1); }\ncatch (Exception ex) { caught \u003d ex; }\nassert(caught instanceof ClassCastException);\nassertEquals(\"[two, too]\", asListVar.invoke(\"two\", \"too\").toString());\ntry { asListFix.invoke(\"two\", \"too\"); }\ncatch (Exception ex) { caught \u003d ex; }\nassert(caught instanceof WrongMethodTypeException);\nObject[] argv \u003d { \"three\", \"thee\", \"tee\" };\nassertEquals(\"[three, thee, tee]\", asListVar.invoke(argv).toString());\nassertEquals(\"[three, thee, tee]\", asListFix.invoke(argv).toString());\nassertEquals(1, ((List) asListVar.invoke((Object)argv)).size());\nassertEquals(\"[three, thee, tee]\", asListFix.invoke((Object)argv).toString());\n }\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"bindTo","comment":"Binds a value {@code x} to the first argument of a method handle, without invoking it.\n The new method handle adapts, as its \u003ci\u003etarget\u003c/i\u003e,\n the current method handle by binding it to the given argument.\n The type of the bound handle will be\n the same as the type of the target, except that a single leading\n reference parameter will be omitted.\n \u003cp\u003e\n When called, the bound handle inserts the given value {@code x}\n as a new leading argument to the target.  The other arguments are\n also passed unchanged.\n What the target eventually returns is returned unchanged by the bound handle.\n \u003cp\u003e\n The reference {@code x} must be convertible to the first parameter\n type of the target.\n \u003cp\u003e\n (\u003cem\u003eNote:\u003c/em\u003e  Because method handles are immutable, the target method handle\n retains its original type and behavior.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":false,"simpleName":"MethodHandle","qualifiedName":"java.lang.invoke.MethodHandle","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toString","comment":"Returns a string representation of the method handle,\n starting with the string {@code \"MethodHandle\"} and\n ending with the string representation of the method handle\u0027s type.\n In other words, this method returns a string equal to the value of:\n \u003cblockquote\u003e\u003cpre\u003e{@code\n \"MethodHandle\" + type().toString()\n }\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n (\u003cem\u003eNote:\u003c/em\u003e  Future releases of this API may add further information\n to the string representation.\n Therefore, the present syntax should not be parsed by applications.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}