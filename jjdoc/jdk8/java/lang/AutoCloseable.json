{"name":"AutoCloseable","comment":"An object that may hold resources (such as file or socket handles)\n until it is closed. The {@link #close()} method of an {@code AutoCloseable}\n object is called automatically when exiting a {@code\n try}-with-resources block for which the object has been declared in\n the resource specification header. This construction ensures prompt\n release, avoiding resource exhaustion exceptions and errors that\n may otherwise occur.","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"AutoCloseable","qualifiedName":"java.lang.AutoCloseable","dimension":"","elementType":{},"package":"java.lang","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.7","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"close","comment":"Closes this resource, relinquishing any underlying resources.\n This method is invoked automatically on objects managed by the\n {@code try}-with-resources statement.\n\n \u003cp\u003eWhile this interface method is declared to throw {@code\n Exception}, implementers are \u003cem\u003estrongly\u003c/em\u003e encouraged to\n declare concrete implementations of the {@code close} method to\n throw more specific exceptions, or to throw no exception at all\n if the close operation cannot fail.\n\n \u003cp\u003e Cases where the close operation may fail require careful\n attention by implementers. It is strongly advised to relinquish\n the underlying resources and to internally \u003cem\u003emark\u003c/em\u003e the\n resource as closed, prior to throwing the exception. The {@code\n close} method is unlikely to be invoked more than once and so\n this ensures that the resources are released in a timely manner.\n Furthermore it reduces problems that could arise when the resource\n wraps, or is wrapped, by another resource.\n\n \u003cp\u003e\u003cem\u003eImplementers of this interface are also strongly advised\n to not have the {@code close} method throw {@link\n InterruptedException}.\u003c/em\u003e\n\n This exception interacts with a thread\u0027s interrupted status,\n and runtime misbehavior is likely to occur if an {@code\n InterruptedException} is {@linkplain Throwable#addSuppressed\n suppressed}.\n\n More generally, if it would cause problems for an\n exception to be suppressed, the {@code AutoCloseable.close}\n method should not throw it.\n\n \u003cp\u003eNote that unlike the {@link java.io.Closeable#close close}\n method of {@link java.io.Closeable}, this {@code close} method\n is \u003cem\u003enot\u003c/em\u003e required to be idempotent.  In other words,\n calling this {@code close} method more than once may have some\n visible side effect, unlike {@code Closeable.close} which is\n required to have no effect if called more than once.\n\n However, implementers of this interface are strongly encouraged\n to make their {@code close} methods idempotent.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subInterfaces":["java.io.Closeable","java.nio.channels.FileLock","java.io.ObjectOutput","java.io.ObjectInput","java.util.stream.BaseStream"],"enumConstants":[]}