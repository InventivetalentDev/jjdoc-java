{"name":"ProcessBuilder","comment":"This class is used to create operating system processes.\n\n \u003cp\u003eEach {@code ProcessBuilder} instance manages a collection\n of process attributes.  The {@link #start()} method creates a new\n {@link Process} instance with those attributes.  The {@link\n #start()} method can be invoked repeatedly from the same instance\n to create new subprocesses with identical or related attributes.\n\n \u003cp\u003eEach process builder manages these process attributes:\n\n \u003cul\u003e\n\n \u003cli\u003ea \u003ci\u003ecommand\u003c/i\u003e, a list of strings which signifies the\n external program file to be invoked and its arguments, if any.\n Which string lists represent a valid operating system command is\n system-dependent.  For example, it is common for each conceptual\n argument to be an element in this list, but there are operating\n systems where programs are expected to tokenize command line\n strings themselves - on such a system a Java implementation might\n require commands to contain exactly two elements.\n\n \u003cli\u003ean \u003ci\u003eenvironment\u003c/i\u003e, which is a system-dependent mapping from\n \u003ci\u003evariables\u003c/i\u003e to \u003ci\u003evalues\u003c/i\u003e.  The initial value is a copy of\n the environment of the current process (see {@link System#getenv()}).\n\n \u003cli\u003ea \u003ci\u003eworking directory\u003c/i\u003e.  The default value is the current\n working directory of the current process, usually the directory\n named by the system property {@code user.dir}.\n\n \u003cli\u003e\u003ca name\u003d\"redirect-input\"\u003ea source of \u003ci\u003estandard input\u003c/i\u003e\u003c/a\u003e.\n By default, the subprocess reads input from a pipe.  Java code\n can access this pipe via the output stream returned by\n {@link Process#getOutputStream()}.  However, standard input may\n be redirected to another source using\n {@link #redirectInput(Redirect) redirectInput}.\n In this case, {@link Process#getOutputStream()} will return a\n \u003ci\u003enull output stream\u003c/i\u003e, for which:\n\n \u003cul\u003e\n \u003cli\u003ethe {@link OutputStream#write(int) write} methods always\n throw {@code IOException}\n \u003cli\u003ethe {@link OutputStream#close() close} method does nothing\n \u003c/ul\u003e\n\n \u003cli\u003e\u003ca name\u003d\"redirect-output\"\u003ea destination for \u003ci\u003estandard output\u003c/i\u003e\n and \u003ci\u003estandard error\u003c/i\u003e\u003c/a\u003e.  By default, the subprocess writes standard\n output and standard error to pipes.  Java code can access these pipes\n via the input streams returned by {@link Process#getInputStream()} and\n {@link Process#getErrorStream()}.  However, standard output and\n standard error may be redirected to other destinations using\n {@link #redirectOutput(Redirect) redirectOutput} and\n {@link #redirectError(Redirect) redirectError}.\n In this case, {@link Process#getInputStream()} and/or\n {@link Process#getErrorStream()} will return a \u003ci\u003enull input\n stream\u003c/i\u003e, for which:\n\n \u003cul\u003e\n \u003cli\u003ethe {@link InputStream#read() read} methods always return\n {@code -1}\n \u003cli\u003ethe {@link InputStream#available() available} method always returns\n {@code 0}\n \u003cli\u003ethe {@link InputStream#close() close} method does nothing\n \u003c/ul\u003e\n\n \u003cli\u003ea \u003ci\u003eredirectErrorStream\u003c/i\u003e property.  Initially, this property\n is {@code false}, meaning that the standard output and error\n output of a subprocess are sent to two separate streams, which can\n be accessed using the {@link Process#getInputStream()} and {@link\n Process#getErrorStream()} methods.\n\n \u003cp\u003eIf the value is set to {@code true}, then:\n\n \u003cul\u003e\n \u003cli\u003estandard error is merged with the standard output and always sent\n to the same destination (this makes it easier to correlate error\n messages with the corresponding output)\n \u003cli\u003ethe common destination of standard error and standard output can be\n redirected using\n {@link #redirectOutput(Redirect) redirectOutput}\n \u003cli\u003eany redirection set by the\n {@link #redirectError(Redirect) redirectError}\n method is ignored when creating a subprocess\n \u003cli\u003ethe stream returned from {@link Process#getErrorStream()} will\n always be a \u003ca href\u003d\"#redirect-output\"\u003enull input stream\u003c/a\u003e\n \u003c/ul\u003e\n\n \u003c/ul\u003e\n\n \u003cp\u003eModifying a process builder\u0027s attributes will affect processes\n subsequently started by that object\u0027s {@link #start()} method, but\n will never affect previously started processes or the Java process\n itself.\n\n \u003cp\u003eMost error checking is performed by the {@link #start()} method.\n It is possible to modify the state of an object so that {@link\n #start()} will fail.  For example, setting the command attribute to\n an empty list will not throw an exception unless {@link #start()}\n is invoked.\n\n \u003cp\u003e\u003cstrong\u003eNote that this class is not synchronized.\u003c/strong\u003e\n If multiple threads access a {@code ProcessBuilder} instance\n concurrently, and at least one of the threads modifies one of the\n attributes structurally, it \u003ci\u003emust\u003c/i\u003e be synchronized externally.\n\n \u003cp\u003eStarting a new process which uses the default working directory\n and environment is easy:\n\n \u003cpre\u003e {@code\n Process p \u003d new ProcessBuilder(\"myCommand\", \"myArg\").start();\n }\u003c/pre\u003e\n\n \u003cp\u003eHere is an example that starts a process with a modified working\n directory and environment, and redirects standard output and error\n to be appended to a log file:\n\n \u003cpre\u003e {@code\n ProcessBuilder pb \u003d\n   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n Map\u003cString, String\u003e env \u003d pb.environment();\n env.put(\"VAR1\", \"myValue\");\n env.remove(\"OTHERVAR\");\n env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n pb.directory(new File(\"myDir\"));\n File log \u003d new File(\"log\");\n pb.redirectErrorStream(true);\n pb.redirectOutput(Redirect.appendTo(log));\n Process p \u003d pb.start();\n assert pb.redirectInput() \u003d\u003d Redirect.PIPE;\n assert pb.redirectOutput().file() \u003d\u003d log;\n assert p.getInputStream().read() \u003d\u003d -1;\n }\u003c/pre\u003e\n\n \u003cp\u003eTo start a process with an explicit set of environment\n variables, first call {@link java.util.Map#clear() Map.clear()}\n before adding environment variables.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"1.5","innerClasses":["java.lang.ProcessBuilder.Redirect"],"isInnerClass":false,"constructors":[{"name":"ProcessBuilder","comment":"Constructs a process builder with the specified operating\n system program and arguments.  This constructor does \u003ci\u003enot\u003c/i\u003e\n make a copy of the {@code command} list.  Subsequent\n updates to the list will be reflected in the state of the\n process builder.  It is not checked whether\n {@code command} corresponds to a valid operating system\n command.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.lang.String\u003e)","flatSignature":"(List\u003cString\u003e)","parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"ProcessBuilder","comment":"Constructs a process builder with the specified operating\n system program and arguments.  This is a convenience\n constructor that sets the process builder\u0027s command to a string\n list containing the same strings as the {@code command}\n array, in the same order.  It is not checked whether\n {@code command} corresponds to a valid operating system\n command.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String...)","flatSignature":"(String...)","parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"command","comment":"Sets this process builder\u0027s operating system program and\n arguments.  This method does \u003ci\u003enot\u003c/i\u003e make a copy of the\n {@code command} list.  Subsequent updates to the list will\n be reflected in the state of the process builder.  It is not\n checked whether {@code command} corresponds to a valid\n operating system command.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.List\u003cjava.lang.String\u003e)","flatSignature":"(List\u003cString\u003e)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"command","comment":"Sets this process builder\u0027s operating system program and\n arguments.  This is a convenience method that sets the command\n to a string list containing the same strings as the\n {@code command} array, in the same order.  It is not\n checked whether {@code command} corresponds to a valid\n operating system command.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String...)","flatSignature":"(String...)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"command","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"[]","elementType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}}],"typeParameters":[]},{"name":"command","comment":"Returns this process builder\u0027s operating system program and\n arguments.  The returned list is \u003ci\u003enot\u003c/i\u003e a copy.  Subsequent\n updates to the list will be reflected in the state of this\n process builder.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"environment","comment":"Returns a string map view of this process builder\u0027s environment.\n\n Whenever a process builder is created, the environment is\n initialized to a copy of the current process environment (see\n {@link System#getenv()}).  Subprocesses subsequently started by\n this object\u0027s {@link #start()} method will use this map as\n their environment.\n\n \u003cp\u003eThe returned object may be modified using ordinary {@link\n java.util.Map Map} operations.  These modifications will be\n visible to subprocesses started via the {@link #start()}\n method.  Two {@code ProcessBuilder} instances always\n contain independent process environments, so changes to the\n returned map will never be reflected in any other\n {@code ProcessBuilder} instance or the values returned by\n {@link System#getenv System.getenv}.\n\n \u003cp\u003eIf the system does not support environment variables, an\n empty map is returned.\n\n \u003cp\u003eThe returned map does not permit null keys or values.\n Attempting to insert or query the presence of a null key or\n value will throw a {@link NullPointerException}.\n Attempting to query the presence of a key or value which is not\n of type {@link String} will throw a {@link ClassCastException}.\n\n \u003cp\u003eThe behavior of the returned map is system-dependent.  A\n system may not allow modifications to environment variables or\n may forbid certain variable names or values.  For this reason,\n attempts to modify the map may fail with\n {@link UnsupportedOperationException} or\n {@link IllegalArgumentException}\n if the modification is not permitted by the operating system.\n\n \u003cp\u003eSince the external format of environment variable names and\n values is system-dependent, there may not be a one-to-one\n mapping between them and Java\u0027s Unicode strings.  Nevertheless,\n the map is implemented in such a way that environment variables\n which are not modified by Java code will have an unmodified\n native representation in the subprocess.\n\n \u003cp\u003eThe returned map and its collection views may not obey the\n general contract of the {@link Object#equals} and\n {@link Object#hashCode} methods.\n\n \u003cp\u003eThe returned map is typically case-sensitive on all platforms.\n\n \u003cp\u003eIf a security manager exists, its\n {@link SecurityManager#checkPermission checkPermission} method\n is called with a\n {@link RuntimePermission}{@code (\"getenv.*\")} permission.\n This may result in a {@link SecurityException} being thrown.\n\n \u003cp\u003eWhen passing information to a Java subprocess,\n \u003ca href\u003dSystem.html#EnvironmentVSSystemProperties\u003esystem properties\u003c/a\u003e\n are generally preferred over environment variables.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"directory","comment":"Returns this process builder\u0027s working directory.\n\n Subprocesses subsequently started by this object\u0027s {@link\n #start()} method will use this as their working directory.\n The returned value may be {@code null} -- this means to use\n the working directory of the current Java process, usually the\n directory named by the system property {@code user.dir},\n as the working directory of the child process.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"directory","comment":"Sets this process builder\u0027s working directory.\n\n Subprocesses subsequently started by this object\u0027s {@link\n #start()} method will use this as their working directory.\n The argument may be {@code null} -- this means to use the\n working directory of the current Java process, usually the\n directory named by the system property {@code user.dir},\n as the working directory of the child process.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"directory","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectInput","comment":"Sets this process builder\u0027s standard input source.\n\n Subprocesses subsequently started by this object\u0027s {@link #start()}\n method obtain their standard input from this source.\n\n \u003cp\u003eIf the source is {@link Redirect#PIPE Redirect.PIPE}\n (the initial value), then the standard input of a\n subprocess can be written to using the output stream\n returned by {@link Process#getOutputStream()}.\n If the source is set to any other value, then\n {@link Process#getOutputStream()} will return a\n \u003ca href\u003d\"#redirect-input\"\u003enull output stream\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.ProcessBuilder.Redirect)","flatSignature":"(ProcessBuilder.Redirect)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"source","type":{"isPrimitive":false,"simpleName":"Redirect","qualifiedName":"java.lang.ProcessBuilder.Redirect","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectOutput","comment":"Sets this process builder\u0027s standard output destination.\n\n Subprocesses subsequently started by this object\u0027s {@link #start()}\n method send their standard output to this destination.\n\n \u003cp\u003eIf the destination is {@link Redirect#PIPE Redirect.PIPE}\n (the initial value), then the standard output of a subprocess\n can be read using the input stream returned by {@link\n Process#getInputStream()}.\n If the destination is set to any other value, then\n {@link Process#getInputStream()} will return a\n \u003ca href\u003d\"#redirect-output\"\u003enull input stream\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.ProcessBuilder.Redirect)","flatSignature":"(ProcessBuilder.Redirect)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"destination","type":{"isPrimitive":false,"simpleName":"Redirect","qualifiedName":"java.lang.ProcessBuilder.Redirect","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectError","comment":"Sets this process builder\u0027s standard error destination.\n\n Subprocesses subsequently started by this object\u0027s {@link #start()}\n method send their standard error to this destination.\n\n \u003cp\u003eIf the destination is {@link Redirect#PIPE Redirect.PIPE}\n (the initial value), then the error output of a subprocess\n can be read using the input stream returned by {@link\n Process#getErrorStream()}.\n If the destination is set to any other value, then\n {@link Process#getErrorStream()} will return a\n \u003ca href\u003d\"#redirect-output\"\u003enull input stream\u003c/a\u003e.\n\n \u003cp\u003eIf the {@link #redirectErrorStream redirectErrorStream}\n attribute has been set {@code true}, then the redirection set\n by this method has no effect.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.ProcessBuilder.Redirect)","flatSignature":"(ProcessBuilder.Redirect)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"destination","type":{"isPrimitive":false,"simpleName":"Redirect","qualifiedName":"java.lang.ProcessBuilder.Redirect","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectInput","comment":"Sets this process builder\u0027s standard input source to a file.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n {@code redirectInput(file)}\n behaves in exactly the same way as the invocation\n {@link #redirectInput(Redirect) redirectInput}\n {@code (Redirect.from(file))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectOutput","comment":"Sets this process builder\u0027s standard output destination to a file.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n {@code redirectOutput(file)}\n behaves in exactly the same way as the invocation\n {@link #redirectOutput(Redirect) redirectOutput}\n {@code (Redirect.to(file))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectError","comment":"Sets this process builder\u0027s standard error destination to a file.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n {@code redirectError(file)}\n behaves in exactly the same way as the invocation\n {@link #redirectError(Redirect) redirectError}\n {@code (Redirect.to(file))}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.File)","flatSignature":"(File)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"file","type":{"isPrimitive":false,"simpleName":"File","qualifiedName":"java.io.File","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"redirectInput","comment":"Returns this process builder\u0027s standard input source.\n\n Subprocesses subsequently started by this object\u0027s {@link #start()}\n method obtain their standard input from this source.\n The initial value is {@link Redirect#PIPE Redirect.PIPE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Redirect","qualifiedName":"java.lang.ProcessBuilder.Redirect","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"redirectOutput","comment":"Returns this process builder\u0027s standard output destination.\n\n Subprocesses subsequently started by this object\u0027s {@link #start()}\n method redirect their standard output to this destination.\n The initial value is {@link Redirect#PIPE Redirect.PIPE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Redirect","qualifiedName":"java.lang.ProcessBuilder.Redirect","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"redirectError","comment":"Returns this process builder\u0027s standard error destination.\n\n Subprocesses subsequently started by this object\u0027s {@link #start()}\n method redirect their standard error to this destination.\n The initial value is {@link Redirect#PIPE Redirect.PIPE}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Redirect","qualifiedName":"java.lang.ProcessBuilder.Redirect","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"inheritIO","comment":"Sets the source and destination for subprocess standard I/O\n to be the same as those of the current Java process.\n\n \u003cp\u003eThis is a convenience method.  An invocation of the form\n  \u003cpre\u003e {@code\n pb.inheritIO()\n }\u003c/pre\u003e\n behaves in exactly the same way as the invocation\n  \u003cpre\u003e {@code\n pb.redirectInput(Redirect.INHERIT)\n   .redirectOutput(Redirect.INHERIT)\n   .redirectError(Redirect.INHERIT)\n }\u003c/pre\u003e\n\n This gives behavior equivalent to most operating system\n command interpreters, or the standard C library function\n {@code system()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"redirectErrorStream","comment":"Tells whether this process builder merges standard error and\n standard output.\n\n \u003cp\u003eIf this property is {@code true}, then any error output\n generated by subprocesses subsequently started by this object\u0027s\n {@link #start()} method will be merged with the standard\n output, so that both can be read using the\n {@link Process#getInputStream()} method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"redirectErrorStream","comment":"Sets this process builder\u0027s {@code redirectErrorStream} property.\n\n \u003cp\u003eIf this property is {@code true}, then any error output\n generated by subprocesses subsequently started by this object\u0027s\n {@link #start()} method will be merged with the standard\n output, so that both can be read using the\n {@link Process#getInputStream()} method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is {@code false}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":false,"simpleName":"ProcessBuilder","qualifiedName":"java.lang.ProcessBuilder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"redirectErrorStream","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"start","comment":"Starts a new process using the attributes of this process builder.\n\n \u003cp\u003eThe new process will\n invoke the command and arguments given by {@link #command()},\n in a working directory as given by {@link #directory()},\n with a process environment as given by {@link #environment()}.\n\n \u003cp\u003eThis method checks that the command is a valid operating\n system command.  Which commands are valid is system-dependent,\n but at the very least the command must be a non-empty list of\n non-null strings.\n\n \u003cp\u003eA minimal set of system dependent environment variables may\n be required to start a process on some operating systems.\n As a result, the subprocess may inherit additional environment variable\n settings beyond those in the process builder\u0027s {@link #environment()}.\n\n \u003cp\u003eIf there is a security manager, its\n {@link SecurityManager#checkExec checkExec}\n method is called with the first component of this object\u0027s\n {@code command} array as its argument. This may result in\n a {@link SecurityException} being thrown.\n\n \u003cp\u003eStarting an operating system process is highly system-dependent.\n Among the many things that can go wrong are:\n \u003cul\u003e\n \u003cli\u003eThe operating system program file was not found.\n \u003cli\u003eAccess to the program file was denied.\n \u003cli\u003eThe working directory does not exist.\n \u003c/ul\u003e\n\n \u003cp\u003eIn such cases an exception will be thrown.  The exact nature\n of the exception is system-dependent, but it will always be a\n subclass of {@link IOException}.\n\n \u003cp\u003eSubsequent modifications to this process builder will not\n affect the returned {@link Process}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Process","qualifiedName":"java.lang.Process","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}