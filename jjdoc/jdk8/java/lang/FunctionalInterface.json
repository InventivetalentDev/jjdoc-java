{"name":"FunctionalInterface","comment":"An informative annotation type used to indicate that an interface\n type declaration is intended to be a \u003ci\u003efunctional interface\u003c/i\u003e as\n defined by the Java Language Specification.\n\n Conceptually, a functional interface has exactly one abstract\n method.  Since {@linkplain java.lang.reflect.Method#isDefault()\n default methods} have an implementation, they are not abstract.  If\n an interface declares an abstract method overriding one of the\n public methods of {@code java.lang.Object}, that also does\n \u003cem\u003enot\u003c/em\u003e count toward the interface\u0027s abstract method count\n since any implementation of the interface will have an\n implementation from {@code java.lang.Object} or elsewhere.\n\n \u003cp\u003eNote that instances of functional interfaces can be created with\n lambda expressions, method references, or constructor references.\n\n \u003cp\u003eIf a type is annotated with this annotation type, compilers are\n required to generate an error message unless:\n\n \u003cul\u003e\n \u003cli\u003e The type is an interface type and not an annotation type, enum, or class.\n \u003cli\u003e The annotated type satisfies the requirements of a functional interface.\n \u003c/ul\u003e\n\n \u003cp\u003eHowever, the compiler will treat any interface meeting the\n definition of a functional interface as a functional interface\n regardless of whether or not a {@code FunctionalInterface}\n annotation is present on the interface declaration.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"FunctionalInterface","qualifiedName":"java.lang.FunctionalInterface","dimension":"","elementType":{},"package":"java.lang","interfaces":["java.lang.annotation.Annotation"],"isAbstract":true,"isStatic":false,"since":"1.8","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[],"typeParameters":[],"enumConstants":[]}