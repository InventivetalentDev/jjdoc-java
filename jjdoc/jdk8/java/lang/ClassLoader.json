{"name":"ClassLoader","comment":"A class loader is an object that is responsible for loading classes. The\n class \u003ctt\u003eClassLoader\u003c/tt\u003e is an abstract class.  Given the \u003ca\n href\u003d\"#name\"\u003ebinary name\u003c/a\u003e of a class, a class loader should attempt to\n locate or generate data that constitutes a definition for the class.  A\n typical strategy is to transform the name into a file name and then read a\n \"class file\" of that name from a file system.\n\n \u003cp\u003e Every {@link Class \u003ctt\u003eClass\u003c/tt\u003e} object contains a {@link\n Class#getClassLoader() reference} to the \u003ctt\u003eClassLoader\u003c/tt\u003e that defined\n it.\n\n \u003cp\u003e \u003ctt\u003eClass\u003c/tt\u003e objects for array classes are not created by class\n loaders, but are created automatically as required by the Java runtime.\n The class loader for an array class, as returned by {@link\n Class#getClassLoader()} is the same as the class loader for its element\n type; if the element type is a primitive type, then the array class has no\n class loader.\n\n \u003cp\u003e Applications implement subclasses of \u003ctt\u003eClassLoader\u003c/tt\u003e in order to\n extend the manner in which the Java virtual machine dynamically loads\n classes.\n\n \u003cp\u003e Class loaders may typically be used by security managers to indicate\n security domains.\n\n \u003cp\u003e The \u003ctt\u003eClassLoader\u003c/tt\u003e class uses a delegation model to search for\n classes and resources.  Each instance of \u003ctt\u003eClassLoader\u003c/tt\u003e has an\n associated parent class loader.  When requested to find a class or\n resource, a \u003ctt\u003eClassLoader\u003c/tt\u003e instance will delegate the search for the\n class or resource to its parent class loader before attempting to find the\n class or resource itself.  The virtual machine\u0027s built-in class loader,\n called the \"bootstrap class loader\", does not itself have a parent but may\n serve as the parent of a \u003ctt\u003eClassLoader\u003c/tt\u003e instance.\n\n \u003cp\u003e Class loaders that support concurrent loading of classes are known as\n \u003cem\u003eparallel capable\u003c/em\u003e class loaders and are required to register\n themselves at their class initialization time by invoking the\n {@link\n #registerAsParallelCapable \u003ctt\u003eClassLoader.registerAsParallelCapable\u003c/tt\u003e}\n method. Note that the \u003ctt\u003eClassLoader\u003c/tt\u003e class is registered as parallel\n capable by default. However, its subclasses still need to register themselves\n if they are parallel capable. \u003cbr\u003e\n In environments in which the delegation model is not strictly\n hierarchical, class loaders need to be parallel capable, otherwise class\n loading can lead to deadlocks because the loader lock is held for the\n duration of the class loading process (see {@link #loadClass\n \u003ctt\u003eloadClass\u003c/tt\u003e} methods).\n\n \u003cp\u003e Normally, the Java virtual machine loads classes from the local file\n system in a platform-dependent manner.  For example, on UNIX systems, the\n virtual machine loads classes from the directory defined by the\n \u003ctt\u003eCLASSPATH\u003c/tt\u003e environment variable.\n\n \u003cp\u003e However, some classes may not originate from a file; they may originate\n from other sources, such as the network, or they could be constructed by an\n application.  The method {@link #defineClass(String, byte[], int, int)\n \u003ctt\u003edefineClass\u003c/tt\u003e} converts an array of bytes into an instance of class\n \u003ctt\u003eClass\u003c/tt\u003e. Instances of this newly defined class can be created using\n {@link Class#newInstance \u003ctt\u003eClass.newInstance\u003c/tt\u003e}.\n\n \u003cp\u003e The methods and constructors of objects created by a class loader may\n reference other classes.  To determine the class(es) referred to, the Java\n virtual machine invokes the {@link #loadClass \u003ctt\u003eloadClass\u003c/tt\u003e} method of\n the class loader that originally created the class.\n\n \u003cp\u003e For example, an application could create a network class loader to\n download class files from a server.  Sample code might look like:\n\n \u003cblockquote\u003e\u003cpre\u003e\n   ClassLoader loader\u0026nbsp;\u003d new NetworkClassLoader(host,\u0026nbsp;port);\n   Object main\u0026nbsp;\u003d loader.loadClass(\"Main\", true).newInstance();\n       \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003cp\u003e The network class loader subclass must define the methods {@link\n #findClass \u003ctt\u003efindClass\u003c/tt\u003e} and \u003ctt\u003eloadClassData\u003c/tt\u003e to load a class\n from the network.  Once it has downloaded the bytes that make up the class,\n it should use the method {@link #defineClass \u003ctt\u003edefineClass\u003c/tt\u003e} to\n create a class instance.  A sample implementation is:\n\n \u003cblockquote\u003e\u003cpre\u003e\n     class NetworkClassLoader extends ClassLoader {\n         String host;\n         int port;\n\n         public Class findClass(String name) {\n             byte[] b \u003d loadClassData(name);\n             return defineClass(name, b, 0, b.length);\n         }\n\n         private byte[] loadClassData(String name) {\n             // load the class data from the connection\n             \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\n         }\n     }\n \u003c/pre\u003e\u003c/blockquote\u003e\n\n \u003ch3\u003e \u003ca name\u003d\"name\"\u003eBinary names\u003c/a\u003e \u003c/h3\u003e\n\n \u003cp\u003e Any class name provided as a {@link String} parameter to methods in\n \u003ctt\u003eClassLoader\u003c/tt\u003e must be a binary name as defined by\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n\n \u003cp\u003e Examples of valid class names include:\n \u003cblockquote\u003e\u003cpre\u003e\n   \"java.lang.String\"\n   \"javax.swing.JSpinner$DefaultEditor\"\n   \"java.security.KeyStore$Builder$FileBuilder$1\"\n   \"java.net.URLClassLoader$3$1\"\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"since":"1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"loadClass","comment":"Loads the class with the specified \u003ca href\u003d\"#name\"\u003ebinary name\u003c/a\u003e.\n This method searches for classes in the same manner as the {@link\n #loadClass(String, boolean)} method.  It is invoked by the Java virtual\n machine to resolve class references.  Invoking this method is equivalent\n to invoking {@link #loadClass(String, boolean) \u003ctt\u003eloadClass(name,\n false)\u003c/tt\u003e}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getResource","comment":"Finds the resource with the given name.  A resource is some data\n (images, audio, text, etc) that can be accessed by class code in a way\n that is independent of the location of the code.\n\n \u003cp\u003e The name of a resource is a \u0027\u003ctt\u003e/\u003c/tt\u003e\u0027-separated path name that\n identifies the resource.\n\n \u003cp\u003e This method will first search the parent class loader for the\n resource; if the parent is \u003ctt\u003enull\u003c/tt\u003e the path of the class loader\n built-in to the virtual machine is searched.  That failing, this method\n will invoke {@link #findResource(String)} to find the resource.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getResources","comment":"Finds all the resources with the given name. A resource is some data\n (images, audio, text, etc) that can be accessed by class code in a way\n that is independent of the location of the code.\n\n \u003cp\u003eThe name of a resource is a \u003ctt\u003e/\u003c/tt\u003e-separated path name that\n identifies the resource.\n\n \u003cp\u003e The search order is described in the documentation for {@link\n #getResource(String)}.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSystemResource","comment":"Find a resource of the specified name from the search path used to load\n classes.  This method locates the resource through the system class\n loader (see {@link #getSystemClassLoader()}).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"URL","qualifiedName":"java.net.URL","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSystemResources","comment":"Finds all resources of the specified name from the search path used to\n load classes.  The resources thus found are returned as an\n {@link java.util.Enumeration \u003ctt\u003eEnumeration\u003c/tt\u003e} of {@link\n java.net.URL \u003ctt\u003eURL\u003c/tt\u003e} objects.\n\n \u003cp\u003e The search order is described in the documentation for {@link\n #getSystemResource(String)}.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Enumeration","qualifiedName":"java.util.Enumeration","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getResourceAsStream","comment":"Returns an input stream for reading the specified resource.\n\n \u003cp\u003e The search order is described in the documentation for {@link\n #getResource(String)}.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSystemResourceAsStream","comment":"Open for reading, a resource of the specified name from the search path\n used to load classes.  This method locates the resource through the\n system class loader (see {@link #getSystemClassLoader()}).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getParent","comment":"Returns the parent class loader for delegation. Some implementations may\n use \u003ctt\u003enull\u003c/tt\u003e to represent the bootstrap class loader. This method\n will return \u003ctt\u003enull\u003c/tt\u003e in such implementations if this class loader\u0027s\n parent is the bootstrap class loader.\n\n \u003cp\u003e If a security manager is present, and the invoker\u0027s class loader is\n not \u003ctt\u003enull\u003c/tt\u003e and is not an ancestor of this class loader, then this\n method invokes the security manager\u0027s {@link\n SecurityManager#checkPermission(java.security.Permission)\n \u003ctt\u003echeckPermission\u003c/tt\u003e} method with a {@link\n RuntimePermission#RuntimePermission(String)\n \u003ctt\u003eRuntimePermission(\"getClassLoader\")\u003c/tt\u003e} permission to verify\n access to the parent class loader is permitted.  If not, a\n \u003ctt\u003eSecurityException\u003c/tt\u003e will be thrown.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSystemClassLoader","comment":"Returns the system class loader for delegation.  This is the default\n delegation parent for new \u003ctt\u003eClassLoader\u003c/tt\u003e instances, and is\n typically the class loader used to start the application.\n\n \u003cp\u003e This method is first invoked early in the runtime\u0027s startup\n sequence, at which point it creates the system class loader and sets it\n as the context class loader of the invoking \u003ctt\u003eThread\u003c/tt\u003e.\n\n \u003cp\u003e The default system class loader is an implementation-dependent\n instance of this class.\n\n \u003cp\u003e If the system property \"\u003ctt\u003ejava.system.class.loader\u003c/tt\u003e\" is defined\n when this method is first invoked then the value of that property is\n taken to be the name of a class that will be returned as the system\n class loader.  The class is loaded using the default system class loader\n and must define a public constructor that takes a single parameter of\n type \u003ctt\u003eClassLoader\u003c/tt\u003e which is used as the delegation parent.  An\n instance is then created using this constructor with the default system\n class loader as the parameter.  The resulting class loader is defined\n to be the system class loader.\n\n \u003cp\u003e If a security manager is present, and the invoker\u0027s class loader is\n not \u003ctt\u003enull\u003c/tt\u003e and the invoker\u0027s class loader is not the same as or\n an ancestor of the system class loader, then this method invokes the\n security manager\u0027s {@link\n SecurityManager#checkPermission(java.security.Permission)\n \u003ctt\u003echeckPermission\u003c/tt\u003e} method with a {@link\n RuntimePermission#RuntimePermission(String)\n \u003ctt\u003eRuntimePermission(\"getClassLoader\")\u003c/tt\u003e} permission to verify\n access to the system class loader.  If not, a\n \u003ctt\u003eSecurityException\u003c/tt\u003e will be thrown.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"ClassLoader","qualifiedName":"java.lang.ClassLoader","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setDefaultAssertionStatus","comment":"Sets the default assertion status for this class loader.  This setting\n determines whether classes loaded by this class loader and initialized\n in the future will have assertions enabled or disabled by default.\n This setting may be overridden on a per-package or per-class basis by\n invoking {@link #setPackageAssertionStatus(String, boolean)} or {@link\n #setClassAssertionStatus(String, boolean)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"enabled","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setPackageAssertionStatus","comment":"Sets the package default assertion status for the named package.  The\n package default assertion status determines the assertion status for\n classes initialized in the future that belong to the named package or\n any of its \"subpackages\".\n\n \u003cp\u003e A subpackage of a package named p is any package whose name begins\n with \"\u003ctt\u003ep.\u003c/tt\u003e\".  For example, \u003ctt\u003ejavax.swing.text\u003c/tt\u003e is a\n subpackage of \u003ctt\u003ejavax.swing\u003c/tt\u003e, and both \u003ctt\u003ejava.util\u003c/tt\u003e and\n \u003ctt\u003ejava.lang.reflect\u003c/tt\u003e are subpackages of \u003ctt\u003ejava\u003c/tt\u003e.\n\n \u003cp\u003e In the event that multiple package defaults apply to a given class,\n the package default pertaining to the most specific package takes\n precedence over the others.  For example, if \u003ctt\u003ejavax.lang\u003c/tt\u003e and\n \u003ctt\u003ejavax.lang.reflect\u003c/tt\u003e both have package defaults associated with\n them, the latter package default applies to classes in\n \u003ctt\u003ejavax.lang.reflect\u003c/tt\u003e.\n\n \u003cp\u003e Package defaults take precedence over the class loader\u0027s default\n assertion status, and may be overridden on a per-class basis by invoking\n {@link #setClassAssertionStatus(String, boolean)}.  \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"packageName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"enabled","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setClassAssertionStatus","comment":"Sets the desired assertion status for the named top-level class in this\n class loader and any nested classes contained therein.  This setting\n takes precedence over the class loader\u0027s default assertion status, and\n over any applicable per-package default.  This method has no effect if\n the named class has already been initialized.  (Once a class is\n initialized, its assertion status cannot change.)\n\n \u003cp\u003e If the named class is not a top-level class, this invocation will\n have no effect on the actual assertion status of any class. \u003c/p\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, boolean)","flatSignature":"(String, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"className","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"enabled","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clearAssertionStatus","comment":"Sets the default assertion status for this class loader to\n \u003ctt\u003efalse\u003c/tt\u003e and discards any package defaults or class assertion\n status settings associated with the class loader.  This method is\n provided so that class loaders can be made to ignore any command line or\n persistent assertion status settings and \"start with a clean slate.\"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"subClasses":["java.security.SecureClassLoader"],"enumConstants":[]}