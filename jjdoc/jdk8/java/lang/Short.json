{"name":"Short","comment":"The {@code Short} class wraps a value of primitive type {@code\n short} in an object.  An object of type {@code Short} contains a\n single field whose type is {@code short}.\n\n \u003cp\u003eIn addition, this class provides several methods for converting\n a {@code short} to a {@code String} and a {@code String} to a\n {@code short}, as well as other constants and methods useful when\n dealing with a {@code short}.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"Short","qualifiedName":"java.lang.Short","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Number","interfaces":["java.lang.Comparable"],"isAbstract":false,"isStatic":false,"since":"JDK1.1","innerClasses":[],"isInnerClass":false,"constructors":[{"name":"Short","comment":"Constructs a newly allocated {@code Short} object that\n represents the specified {@code short} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"Short","comment":"Constructs a newly allocated {@code Short} object that\n represents the {@code short} value indicated by the\n {@code String} parameter. The string is converted to a\n {@code short} value in exactly the manner used by the\n {@code parseShort} method for radix 10.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[{"name":"MIN_VALUE","comment":"A constant holding the minimum value a {@code short} can\n have, -2\u003csup\u003e15\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isStatic":true,"constantValue":"-32768"},{"name":"MAX_VALUE","comment":"A constant holding the maximum value a {@code short} can\n have, 2\u003csup\u003e15\u003c/sup\u003e-1.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isStatic":true,"constantValue":"32767"},{"name":"TYPE","comment":"The {@code Class} instance representing the primitive type\n {@code short}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"Class","qualifiedName":"java.lang.Class","dimension":"","elementType":{}},"isStatic":true},{"name":"SIZE","comment":"The number of bits used to represent a {@code short} value in two\u0027s\n complement binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"16"},{"name":"BYTES","comment":"The number of bytes used to represent a {@code short} value in two\u0027s\n complement binary form.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isStatic":true,"constantValue":"2"}],"methods":[{"name":"toString","comment":"Returns a new {@code String} object representing the\n specified {@code short}. The radix is assumed to be 10.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseShort","comment":"Parses the string argument as a signed {@code short} in the\n radix specified by the second argument. The characters in the\n string must all be digits, of the specified radix (as\n determined by whether {@link java.lang.Character#digit(char,\n int)} returns a nonnegative value) except that the first\n character may be an ASCII minus sign {@code \u0027-\u0027}\n ({@code \u0027\\u002D\u0027}) to indicate a negative value or an\n ASCII plus sign {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) to\n indicate a positive value.  The resulting {@code short} value\n is returned.\n\n \u003cp\u003eAn exception of type {@code NumberFormatException} is\n thrown if any of the following situations occurs:\n \u003cul\u003e\n \u003cli\u003e The first argument is {@code null} or is a string of\n length zero.\n\n \u003cli\u003e The radix is either smaller than {@link\n java.lang.Character#MIN_RADIX} or larger than {@link\n java.lang.Character#MAX_RADIX}.\n\n \u003cli\u003e Any character of the string is not a digit of the\n specified radix, except that the first character may be a minus\n sign {@code \u0027-\u0027} ({@code \u0027\\u002D\u0027}) or plus sign\n {@code \u0027+\u0027} ({@code \u0027\\u002B\u0027}) provided that the\n string is longer than length 1.\n\n \u003cli\u003e The value represented by the string is not a value of type\n {@code short}.\n \u003c/ul\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"parseShort","comment":"Parses the string argument as a signed decimal {@code\n short}. The characters in the string must all be decimal\n digits, except that the first character may be an ASCII minus\n sign {@code \u0027-\u0027} ({@code \u0027\\u002D\u0027}) to indicate a\n negative value or an ASCII plus sign {@code \u0027+\u0027}\n ({@code \u0027\\u002B\u0027}) to indicate a positive value.  The\n resulting {@code short} value is returned, exactly as if the\n argument and the radix 10 were given as arguments to the {@link\n #parseShort(java.lang.String, int)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Short} object holding the value\n extracted from the specified {@code String} when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed {@code short} in\n the radix specified by the second argument, exactly as if the\n argument were given to the {@link #parseShort(java.lang.String,\n int)} method. The result is a {@code Short} object that\n represents the {@code short} value specified by the string.\n\n \u003cp\u003eIn other words, this method returns a {@code Short} object\n equal to the value of:\n\n \u003cblockquote\u003e\n  {@code new Short(Short.parseShort(s, radix))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, int)","flatSignature":"(String, int)","returnType":{"isPrimitive":false,"simpleName":"Short","qualifiedName":"java.lang.Short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"radix","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Short} object holding the\n value given by the specified {@code String}. The argument\n is interpreted as representing a signed decimal\n {@code short}, exactly as if the argument were given to\n the {@link #parseShort(java.lang.String)} method. The result is\n a {@code Short} object that represents the\n {@code short} value specified by the string.\n\n \u003cp\u003eIn other words, this method returns a {@code Short} object\n equal to the value of:\n\n \u003cblockquote\u003e\n  {@code new Short(Short.parseShort(s))}\n \u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Short","qualifiedName":"java.lang.Short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"valueOf","comment":"Returns a {@code Short} instance representing the specified\n {@code short} value.\n If a new {@code Short} instance is not required, this method\n should generally be used in preference to the constructor\n {@link #Short(short)}, as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n This method will always cache values in the range -128 to 127,\n inclusive, and may cache other values outside of this range.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":false,"simpleName":"Short","qualifiedName":"java.lang.Short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"decode","comment":"Decodes a {@code String} into a {@code Short}.\n Accepts decimal, hexadecimal, and octal numbers given by\n the following grammar:\n\n \u003cblockquote\u003e\n \u003cdl\u003e\n \u003cdt\u003e\u003ci\u003eDecodableString:\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e DecimalNumeral\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0x} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0X} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code #} \u003ci\u003eHexDigits\u003c/i\u003e\n \u003cdd\u003e\u003ci\u003eSign\u003csub\u003eopt\u003c/sub\u003e\u003c/i\u003e {@code 0} \u003ci\u003eOctalDigits\u003c/i\u003e\n\n \u003cdt\u003e\u003ci\u003eSign:\u003c/i\u003e\n \u003cdd\u003e{@code -}\n \u003cdd\u003e{@code +}\n \u003c/dl\u003e\n \u003c/blockquote\u003e\n\n \u003ci\u003eDecimalNumeral\u003c/i\u003e, \u003ci\u003eHexDigits\u003c/i\u003e, and \u003ci\u003eOctalDigits\u003c/i\u003e\n are as defined in section 3.10.1 of\n \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e,\n except that underscores are not accepted between digits.\n\n \u003cp\u003eThe sequence of characters following an optional\n sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n \"{@code #}\", or leading zero) is parsed as by the {@code\n Short.parseShort} method with the indicated radix (10, 16, or\n 8).  This sequence of characters must represent a positive\n value or a {@link NumberFormatException} will be thrown.  The\n result is negated if first character of the specified {@code\n String} is the minus sign.  No whitespace characters are\n permitted in the {@code String}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"Short","qualifiedName":"java.lang.Short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"nm","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"byteValue","comment":"Returns the value of this {@code Short} as a {@code byte} after\n a narrowing primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"shortValue","comment":"Returns the value of this {@code Short} as a\n {@code short}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"intValue","comment":"Returns the value of this {@code Short} as an {@code int} after\n a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"longValue","comment":"Returns the value of this {@code Short} as a {@code long} after\n a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"floatValue","comment":"Returns the value of this {@code Short} as a {@code float}\n after a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"float","qualifiedName":"float","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"doubleValue","comment":"Returns the value of this {@code Short} as a {@code double}\n after a widening primitive conversion.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"toString","comment":"Returns a {@code String} object representing this\n {@code Short}\u0027s value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the {@code short} value were given as an argument to the\n {@link java.lang.Short#toString(short)} method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for this {@code Short}; equal to the result\n of invoking {@code intValue()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"hashCode","comment":"Returns a hash code for a {@code short} value; compatible with\n {@code Short.hashCode()}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"equals","comment":"Compares this object to the specified object.  The result is\n {@code true} if and only if the argument is not\n {@code null} and is a {@code Short} object that\n contains the same {@code short} value as this object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"obj","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compareTo","comment":"Compares two {@code Short} objects numerically.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Short)","flatSignature":"(Short)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"anotherShort","type":{"isPrimitive":false,"simpleName":"Short","qualifiedName":"java.lang.Short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"compare","comment":"Compares two {@code short} values numerically.\n The value returned is identical to what would be returned by:\n \u003cpre\u003e\n    Short.valueOf(x).compareTo(Short.valueOf(y))\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short, short)","flatSignature":"(short, short)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}},{"name":"y","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"reverseBytes","comment":"Returns the value obtained by reversing the order of the bytes in the\n two\u0027s complement representation of the specified {@code short} value.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"i","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedInt","comment":"Converts the argument to an {@code int} by an unsigned\n conversion.  In an unsigned conversion to an {@code int}, the\n high-order 16 bits of the {@code int} are zero and the\n low-order 16 bits are equal to the bits of the {@code short} argument.\n\n Consequently, zero and positive {@code short} values are mapped\n to a numerically equal {@code int} value and negative {@code\n short} values are mapped to an {@code int} value equal to the\n input plus 2\u003csup\u003e16\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"toUnsignedLong","comment":"Converts the argument to a {@code long} by an unsigned\n conversion.  In an unsigned conversion to a {@code long}, the\n high-order 48 bits of the {@code long} are zero and the\n low-order 16 bits are equal to the bits of the {@code short} argument.\n\n Consequently, zero and positive {@code short} values are mapped\n to a numerically equal {@code long} value and negative {@code\n short} values are mapped to a {@code long} value equal to the\n input plus 2\u003csup\u003e16\u003c/sup\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(short)","flatSignature":"(short)","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":true,"simpleName":"short","qualifiedName":"short","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}