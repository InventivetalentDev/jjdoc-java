{"name":"System","comment":"The \u003ccode\u003eSystem\u003c/code\u003e class contains several useful class fields\n and methods. It cannot be instantiated.\n\n \u003cp\u003eAmong the facilities provided by the \u003ccode\u003eSystem\u003c/code\u003e class\n are standard input, standard output, and error output streams;\n access to externally defined properties and environment\n variables; a means of loading files and libraries; and a utility\n method for quickly copying a portion of an array.","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"System","qualifiedName":"java.lang.System","dimension":"","elementType":{},"package":"java.lang","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"since":"JDK1.0","innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[{"name":"in","comment":"The \"standard\" input stream. This stream is already\n open and ready to supply input data. Typically this stream\n corresponds to keyboard input or another input source specified by\n the host environment or user.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}},"isStatic":true},{"name":"out","comment":"The \"standard\" output stream. This stream is already\n open and ready to accept output data. Typically this stream\n corresponds to display output or another output destination\n specified by the host environment or user.\n \u003cp\u003e\n For simple stand-alone Java applications, a typical way to write\n a line of output data is:\n \u003cblockquote\u003e\u003cpre\u003e\n     System.out.println(data)\n \u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n See the \u003ccode\u003eprintln\u003c/code\u003e methods in class \u003ccode\u003ePrintStream\u003c/code\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isStatic":true},{"name":"err","comment":"The \"standard\" error output stream. This stream is already\n open and ready to accept output data.\n \u003cp\u003e\n Typically this stream corresponds to display output or another\n output destination specified by the host environment or user. By\n convention, this output stream is used to display error messages\n or other information that should come to the immediate attention\n of a user even if the principal output stream, the value of the\n variable \u003ccode\u003eout\u003c/code\u003e, has been redirected to a file or other\n destination that is typically not continuously monitored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":true,"isMethod":false,"isOrdinaryClass":false,"type":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}},"isStatic":true}],"methods":[{"name":"setIn","comment":"Reassigns the \"standard\" input stream.\n\n \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckPermission\u003c/code\u003e\n method is called with a \u003ccode\u003eRuntimePermission(\"setIO\")\u003c/code\u003e permission\n  to see if it\u0027s ok to reassign the \"standard\" input stream.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"in","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setOut","comment":"Reassigns the \"standard\" output stream.\n\n \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckPermission\u003c/code\u003e\n method is called with a \u003ccode\u003eRuntimePermission(\"setIO\")\u003c/code\u003e permission\n  to see if it\u0027s ok to reassign the \"standard\" output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.PrintStream)","flatSignature":"(PrintStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"out","type":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setErr","comment":"Reassigns the \"standard\" error output stream.\n\n \u003cp\u003eFirst, if there is a security manager, its \u003ccode\u003echeckPermission\u003c/code\u003e\n method is called with a \u003ccode\u003eRuntimePermission(\"setIO\")\u003c/code\u003e permission\n  to see if it\u0027s ok to reassign the \"standard\" error output stream.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.PrintStream)","flatSignature":"(PrintStream)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"err","type":{"isPrimitive":false,"simpleName":"PrintStream","qualifiedName":"java.io.PrintStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"console","comment":"Returns the unique {@link java.io.Console Console} object associated\n with the current Java virtual machine, if any.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Console","qualifiedName":"java.io.Console","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"inheritedChannel","comment":"Returns the channel inherited from the entity that created this\n Java virtual machine.\n\n \u003cp\u003e This method returns the channel obtained by invoking the\n {@link java.nio.channels.spi.SelectorProvider#inheritedChannel\n inheritedChannel} method of the system-wide default\n {@link java.nio.channels.spi.SelectorProvider} object. \u003c/p\u003e\n\n \u003cp\u003e In addition to the network-oriented channels described in\n {@link java.nio.channels.spi.SelectorProvider#inheritedChannel\n inheritedChannel}, this method may return other kinds of\n channels in the future.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Channel","qualifiedName":"java.nio.channels.Channel","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setSecurityManager","comment":"Sets the System security.\n\n \u003cp\u003e If there is a security manager already installed, this method first\n calls the security manager\u0027s \u003ccode\u003echeckPermission\u003c/code\u003e method\n with a \u003ccode\u003eRuntimePermission(\"setSecurityManager\")\u003c/code\u003e\n permission to ensure it\u0027s ok to replace the existing\n security manager.\n This may result in throwing a \u003ccode\u003eSecurityException\u003c/code\u003e.\n\n \u003cp\u003e Otherwise, the argument is established as the current\n security manager. If the argument is \u003ccode\u003enull\u003c/code\u003e and no\n security manager has been established, then no action is taken and\n the method simply returns.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.SecurityManager)","flatSignature":"(SecurityManager)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"s","type":{"isPrimitive":false,"simpleName":"SecurityManager","qualifiedName":"java.lang.SecurityManager","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getSecurityManager","comment":"Gets the system security interface.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"SecurityManager","qualifiedName":"java.lang.SecurityManager","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"currentTimeMillis","comment":"Returns the current time in milliseconds.  Note that\n while the unit of time of the return value is a millisecond,\n the granularity of the value depends on the underlying\n operating system and may be larger.  For example, many\n operating systems measure time in units of tens of\n milliseconds.\n\n \u003cp\u003e See the description of the class \u003ccode\u003eDate\u003c/code\u003e for\n a discussion of slight discrepancies that may arise between\n \"computer time\" and coordinated universal time (UTC).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"nanoTime","comment":"Returns the current value of the running Java Virtual Machine\u0027s\n high-resolution time source, in nanoseconds.\n\n \u003cp\u003eThis method can only be used to measure elapsed time and is\n not related to any other notion of system or wall-clock time.\n The value returned represents nanoseconds since some fixed but\n arbitrary \u003ci\u003eorigin\u003c/i\u003e time (perhaps in the future, so values\n may be negative).  The same origin is used by all invocations of\n this method in an instance of a Java virtual machine; other\n virtual machine instances are likely to use a different origin.\n\n \u003cp\u003eThis method provides nanosecond precision, but not necessarily\n nanosecond resolution (that is, how frequently the value changes)\n - no guarantees are made except that the resolution is at least as\n good as that of {@link #currentTimeMillis()}.\n\n \u003cp\u003eDifferences in successive calls that span greater than\n approximately 292 years (2\u003csup\u003e63\u003c/sup\u003e nanoseconds) will not\n correctly compute elapsed time due to numerical overflow.\n\n \u003cp\u003eThe values returned by this method become meaningful only when\n the difference between two such values, obtained within the same\n instance of a Java virtual machine, is computed.\n\n \u003cp\u003e For example, to measure how long some code takes to execute:\n  \u003cpre\u003e {@code\n long startTime \u003d System.nanoTime();\n // ... the code being measured ...\n long estimatedTime \u003d System.nanoTime() - startTime;}\u003c/pre\u003e\n\n \u003cp\u003eTo compare two nanoTime values\n  \u003cpre\u003e {@code\n long t0 \u003d System.nanoTime();\n ...\n long t1 \u003d System.nanoTime();}\u003c/pre\u003e\n\n one should use {@code t1 - t0 \u003c 0}, not {@code t1 \u003c t0},\n because of the possibility of numerical overflow.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"long","qualifiedName":"long","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"arraycopy","comment":"Copies an array from the specified source array, beginning at the\n specified position, to the specified position of the destination array.\n A subsequence of array components are copied from the source\n array referenced by \u003ccode\u003esrc\u003c/code\u003e to the destination array\n referenced by \u003ccode\u003edest\u003c/code\u003e. The number of components copied is\n equal to the \u003ccode\u003elength\u003c/code\u003e argument. The components at\n positions \u003ccode\u003esrcPos\u003c/code\u003e through\n \u003ccode\u003esrcPos+length-1\u003c/code\u003e in the source array are copied into\n positions \u003ccode\u003edestPos\u003c/code\u003e through\n \u003ccode\u003edestPos+length-1\u003c/code\u003e, respectively, of the destination\n array.\n \u003cp\u003e\n If the \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003edest\u003c/code\u003e arguments refer to the\n same array object, then the copying is performed as if the\n components at positions \u003ccode\u003esrcPos\u003c/code\u003e through\n \u003ccode\u003esrcPos+length-1\u003c/code\u003e were first copied to a temporary\n array with \u003ccode\u003elength\u003c/code\u003e components and then the contents of\n the temporary array were copied into positions\n \u003ccode\u003edestPos\u003c/code\u003e through \u003ccode\u003edestPos+length-1\u003c/code\u003e of the\n destination array.\n \u003cp\u003e\n If \u003ccode\u003edest\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, then a\n \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown.\n \u003cp\u003e\n If \u003ccode\u003esrc\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, then a\n \u003ccode\u003eNullPointerException\u003c/code\u003e is thrown and the destination\n array is not modified.\n \u003cp\u003e\n Otherwise, if any of the following is true, an\n \u003ccode\u003eArrayStoreException\u003c/code\u003e is thrown and the destination is\n not modified:\n \u003cul\u003e\n \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument refers to an object that is not an\n     array.\n \u003cli\u003eThe \u003ccode\u003edest\u003c/code\u003e argument refers to an object that is not an\n     array.\n \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument and \u003ccode\u003edest\u003c/code\u003e argument refer\n     to arrays whose component types are different primitive types.\n \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument refers to an array with a primitive\n    component type and the \u003ccode\u003edest\u003c/code\u003e argument refers to an array\n     with a reference component type.\n \u003cli\u003eThe \u003ccode\u003esrc\u003c/code\u003e argument refers to an array with a reference\n    component type and the \u003ccode\u003edest\u003c/code\u003e argument refers to an array\n     with a primitive component type.\n \u003c/ul\u003e\n \u003cp\u003e\n Otherwise, if any of the following is true, an\n \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e is\n thrown and the destination is not modified:\n \u003cul\u003e\n \u003cli\u003eThe \u003ccode\u003esrcPos\u003c/code\u003e argument is negative.\n \u003cli\u003eThe \u003ccode\u003edestPos\u003c/code\u003e argument is negative.\n \u003cli\u003eThe \u003ccode\u003elength\u003c/code\u003e argument is negative.\n \u003cli\u003e\u003ccode\u003esrcPos+length\u003c/code\u003e is greater than\n     \u003ccode\u003esrc.length\u003c/code\u003e, the length of the source array.\n \u003cli\u003e\u003ccode\u003edestPos+length\u003c/code\u003e is greater than\n     \u003ccode\u003edest.length\u003c/code\u003e, the length of the destination array.\n \u003c/ul\u003e\n \u003cp\u003e\n Otherwise, if any actual component of the source array from\n position \u003ccode\u003esrcPos\u003c/code\u003e through\n \u003ccode\u003esrcPos+length-1\u003c/code\u003e cannot be converted to the component\n type of the destination array by assignment conversion, an\n \u003ccode\u003eArrayStoreException\u003c/code\u003e is thrown. In this case, let\n \u003cb\u003e\u003ci\u003ek\u003c/i\u003e\u003c/b\u003e be the smallest nonnegative integer less than\n length such that \u003ccode\u003esrc[srcPos+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e]\u003c/code\u003e\n cannot be converted to the component type of the destination\n array; when the exception is thrown, source array components from\n positions \u003ccode\u003esrcPos\u003c/code\u003e through\n \u003ccode\u003esrcPos+\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u003ccode\u003e-1\u003c/code\u003e\n will already have been copied to destination array positions\n \u003ccode\u003edestPos\u003c/code\u003e through\n \u003ccode\u003edestPos+\u003c/code\u003e\u003ci\u003ek\u003c/I\u003e\u003ccode\u003e-1\u003c/code\u003e and no other\n positions of the destination array will have been modified.\n (Because of the restrictions already itemized, this\n paragraph effectively applies only to the situation where both\n arrays have component types that are reference types.)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object, int, java.lang.Object, int, int)","flatSignature":"(Object, int, Object, int, int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"src","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"srcPos","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"dest","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}},{"name":"destPos","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"length","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"identityHashCode","comment":"Returns the same hash code for the given object as\n would be returned by the default method hashCode(),\n whether or not the given object\u0027s class overrides\n hashCode().\n The hash code for the null reference is zero.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.Object)","flatSignature":"(Object)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"x","type":{"isPrimitive":false,"simpleName":"Object","qualifiedName":"java.lang.Object","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProperties","comment":"Determines the current system properties.\n \u003cp\u003e\n First, if there is a security manager, its\n \u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method is called with no\n arguments. This may result in a security exception.\n \u003cp\u003e\n The current set of system properties for use by the\n {@link #getProperty(String)} method is returned as a\n \u003ccode\u003eProperties\u003c/code\u003e object. If there is no current set of\n system properties, a set of system properties is first created and\n initialized. This set of system properties always includes values\n for the following keys:\n \u003ctable summary\u003d\"Shows property keys and associated values\"\u003e\n \u003ctr\u003e\u003cth\u003eKey\u003c/th\u003e\n     \u003cth\u003eDescription of Associated Value\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Runtime Environment version\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vendor\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Runtime Environment vendor\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vendor.url\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava vendor URL\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.home\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava installation directory\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vm.specification.version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Virtual Machine specification version\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vm.specification.vendor\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Virtual Machine specification vendor\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vm.specification.name\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Virtual Machine specification name\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vm.version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Virtual Machine implementation version\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vm.vendor\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Virtual Machine implementation vendor\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.vm.name\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Virtual Machine implementation name\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.specification.version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Runtime Environment specification  version\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.specification.vendor\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Runtime Environment specification  vendor\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.specification.name\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava Runtime Environment specification  name\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.class.version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava class format version number\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.class.path\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eJava class path\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.library.path\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eList of paths to search when loading libraries\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.io.tmpdir\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eDefault temp file path\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.compiler\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eName of JIT compiler to use\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ejava.ext.dirs\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003ePath of extension directory or directories\n         \u003cb\u003eDeprecated.\u003c/b\u003e \u003ci\u003eThis property, and the mechanism\n            which implements it, may be removed in a future\n            release.\u003c/i\u003e \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eos.name\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eOperating system name\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eos.arch\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eOperating system architecture\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eos.version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eOperating system version\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003efile.separator\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eFile separator (\"/\" on UNIX)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003epath.separator\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003ePath separator (\":\" on UNIX)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eline.separator\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eLine separator (\"\\n\" on UNIX)\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003euser.name\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eUser\u0027s account name\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003euser.home\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eUser\u0027s home directory\u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd\u003e\u003ccode\u003euser.dir\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eUser\u0027s current working directory\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n Multiple paths in a system property value are separated by the path\n separator character of the platform.\n \u003cp\u003e\n Note that even if the security manager does not permit the\n \u003ccode\u003egetProperties\u003c/code\u003e operation, it may choose to permit the\n {@link #getProperty(String)} operation.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Properties","qualifiedName":"java.util.Properties","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"lineSeparator","comment":"Returns the system-dependent line separator string.  It always\n returns the same value - the initial value of the {@linkplain\n #getProperty(String) system property} {@code line.separator}.\n\n \u003cp\u003eOn UNIX systems, it returns {@code \"\\n\"}; on Microsoft\n Windows systems it returns {@code \"\\r\\n\"}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"setProperties","comment":"Sets the system properties to the \u003ccode\u003eProperties\u003c/code\u003e\n argument.\n \u003cp\u003e\n First, if there is a security manager, its\n \u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method is called with no\n arguments. This may result in a security exception.\n \u003cp\u003e\n The argument becomes the current set of system properties for use\n by the {@link #getProperty(String)} method. If the argument is\n \u003ccode\u003enull\u003c/code\u003e, then the current set of system properties is\n forgotten.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.util.Properties)","flatSignature":"(Properties)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"props","type":{"isPrimitive":false,"simpleName":"Properties","qualifiedName":"java.util.Properties","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProperty","comment":"Gets the system property indicated by the specified key.\n \u003cp\u003e\n First, if there is a security manager, its\n \u003ccode\u003echeckPropertyAccess\u003c/code\u003e method is called with the key as\n its argument. This may result in a SecurityException.\n \u003cp\u003e\n If there is no current set of system properties, a set of system\n properties is first created and initialized in the same manner as\n for the \u003ccode\u003egetProperties\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getProperty","comment":"Gets the system property indicated by the specified key.\n \u003cp\u003e\n First, if there is a security manager, its\n \u003ccode\u003echeckPropertyAccess\u003c/code\u003e method is called with the\n \u003ccode\u003ekey\u003c/code\u003e as its argument.\n \u003cp\u003e\n If there is no current set of system properties, a set of system\n properties is first created and initialized in the same manner as\n for the \u003ccode\u003egetProperties\u003c/code\u003e method.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"def","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setProperty","comment":"Sets the system property indicated by the specified key.\n \u003cp\u003e\n First, if a security manager exists, its\n \u003ccode\u003eSecurityManager.checkPermission\u003c/code\u003e method\n is called with a \u003ccode\u003ePropertyPermission(key, \"write\")\u003c/code\u003e\n permission. This may result in a SecurityException being thrown.\n If no exception is thrown, the specified property is set to the given\n value.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String)","flatSignature":"(String, String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"value","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"clearProperty","comment":"Removes the system property indicated by the specified key.\n \u003cp\u003e\n First, if a security manager exists, its\n \u003ccode\u003eSecurityManager.checkPermission\u003c/code\u003e method\n is called with a \u003ccode\u003ePropertyPermission(key, \"write\")\u003c/code\u003e\n permission. This may result in a SecurityException being thrown.\n If no exception is thrown, the specified property is removed.\n \u003cp\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"key","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getenv","comment":"Gets the value of the specified environment variable. An\n environment variable is a system-dependent external named\n value.\n\n \u003cp\u003eIf a security manager exists, its\n {@link SecurityManager#checkPermission checkPermission}\n method is called with a\n \u003ccode\u003e{@link RuntimePermission}(\"getenv.\"+name)\u003c/code\u003e\n permission.  This may result in a {@link SecurityException}\n being thrown.  If no exception is thrown the value of the\n variable \u003ccode\u003ename\u003c/code\u003e is returned.\n\n \u003cp\u003e\u003ca name\u003d\"EnvironmentVSSystemProperties\"\u003e\u003ci\u003eSystem\n properties\u003c/i\u003e and \u003ci\u003eenvironment variables\u003c/i\u003e\u003c/a\u003e are both\n conceptually mappings between names and values.  Both\n mechanisms can be used to pass user-defined information to a\n Java process.  Environment variables have a more global effect,\n because they are visible to all descendants of the process\n which defines them, not just the immediate Java subprocess.\n They can have subtly different semantics, such as case\n insensitivity, on different operating systems.  For these\n reasons, environment variables are more likely to have\n unintended side effects.  It is best to use system properties\n where possible.  Environment variables should be used when a\n global effect is desired, or when an external system interface\n requires an environment variable (such as \u003ccode\u003ePATH\u003c/code\u003e).\n\n \u003cp\u003eOn UNIX systems the alphabetic case of \u003ccode\u003ename\u003c/code\u003e is\n typically significant, while on Microsoft Windows systems it is\n typically not.  For example, the expression\n \u003ccode\u003eSystem.getenv(\"FOO\").equals(System.getenv(\"foo\"))\u003c/code\u003e\n is likely to be true on Microsoft Windows.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"name","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getenv","comment":"Returns an unmodifiable string map view of the current system environment.\n The environment is a system-dependent mapping from names to\n values which is passed from parent to child processes.\n\n \u003cp\u003eIf the system does not support environment variables, an\n empty map is returned.\n\n \u003cp\u003eThe returned map will never contain null keys or values.\n Attempting to query the presence of a null key or value will\n throw a {@link NullPointerException}.  Attempting to query\n the presence of a key or value which is not of type\n {@link String} will throw a {@link ClassCastException}.\n\n \u003cp\u003eThe returned map and its collection views may not obey the\n general contract of the {@link Object#equals} and\n {@link Object#hashCode} methods.\n\n \u003cp\u003eThe returned map is typically case-sensitive on all platforms.\n\n \u003cp\u003eIf a security manager exists, its\n {@link SecurityManager#checkPermission checkPermission}\n method is called with a\n \u003ccode\u003e{@link RuntimePermission}(\"getenv.*\")\u003c/code\u003e\n permission.  This may result in a {@link SecurityException} being\n thrown.\n\n \u003cp\u003eWhen passing information to a Java subprocess,\n \u003ca href\u003d#EnvironmentVSSystemProperties\u003esystem properties\u003c/a\u003e\n are generally preferred over environment variables.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"exit","comment":"Terminates the currently running Java Virtual Machine. The\n argument serves as a status code; by convention, a nonzero status\n code indicates abnormal termination.\n \u003cp\u003e\n This method calls the \u003ccode\u003eexit\u003c/code\u003e method in class\n \u003ccode\u003eRuntime\u003c/code\u003e. This method never returns normally.\n \u003cp\u003e\n The call \u003ccode\u003eSystem.exit(n)\u003c/code\u003e is effectively equivalent to\n the call:\n \u003cblockquote\u003e\u003cpre\u003e\n Runtime.getRuntime().exit(n)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int)","flatSignature":"(int)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"status","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"gc","comment":"Runs the garbage collector.\n \u003cp\u003e\n Calling the \u003ccode\u003egc\u003c/code\u003e method suggests that the Java Virtual\n Machine expend effort toward recycling unused objects in order to\n make the memory they currently occupy available for quick reuse.\n When control returns from the method call, the Java Virtual\n Machine has made a best effort to reclaim space from all discarded\n objects.\n \u003cp\u003e\n The call \u003ccode\u003eSystem.gc()\u003c/code\u003e is effectively equivalent to the\n call:\n \u003cblockquote\u003e\u003cpre\u003e\n Runtime.getRuntime().gc()\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"runFinalization","comment":"Runs the finalization methods of any objects pending finalization.\n \u003cp\u003e\n Calling this method suggests that the Java Virtual Machine expend\n effort toward running the \u003ccode\u003efinalize\u003c/code\u003e methods of objects\n that have been found to be discarded but whose \u003ccode\u003efinalize\u003c/code\u003e\n methods have not yet been run. When control returns from the\n method call, the Java Virtual Machine has made a best effort to\n complete all outstanding finalizations.\n \u003cp\u003e\n The call \u003ccode\u003eSystem.runFinalization()\u003c/code\u003e is effectively\n equivalent to the call:\n \u003cblockquote\u003e\u003cpre\u003e\n Runtime.getRuntime().runFinalization()\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[],"typeParameters":[]},{"name":"runFinalizersOnExit","comment":"Enable or disable finalization on exit; doing so specifies that the\n finalizers of all objects that have finalizers that have not yet been\n automatically invoked are to be run before the Java runtime exits.\n By default, finalization on exit is disabled.\n\n \u003cp\u003eIf there is a security manager,\n its \u003ccode\u003echeckExit\u003c/code\u003e method is first called\n with 0 as its argument to ensure the exit is allowed.\n This could result in a SecurityException.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(boolean)","flatSignature":"(boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"value","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"load","comment":"Loads the native library specified by the filename argument.  The filename\n argument must be an absolute path name.\n\n If the filename argument, when stripped of any platform-specific library\n prefix, path, and file extension, indicates a library whose name is,\n for example, L, and a native library called L is statically linked\n with the VM, then the JNI_OnLoad_L function exported by the library\n is invoked rather than attempting to load a dynamic library.\n A filename matching the argument does not have to exist in the\n file system.\n See the JNI Specification for more details.\n\n Otherwise, the filename argument is mapped to a native library image in\n an implementation-dependent manner.\n\n \u003cp\u003e\n The call \u003ccode\u003eSystem.load(name)\u003c/code\u003e is effectively equivalent\n to the call:\n \u003cblockquote\u003e\u003cpre\u003e\n Runtime.getRuntime().load(name)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"filename","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"loadLibrary","comment":"Loads the native library specified by the \u003ccode\u003elibname\u003c/code\u003e\n argument.  The \u003ccode\u003elibname\u003c/code\u003e argument must not contain any platform\n specific prefix, file extension or path. If a native library\n called \u003ccode\u003elibname\u003c/code\u003e is statically linked with the VM, then the\n JNI_OnLoad_\u003ccode\u003elibname\u003c/code\u003e function exported by the library is invoked.\n See the JNI Specification for more details.\n\n Otherwise, the libname argument is loaded from a system library\n location and mapped to a native library image in an implementation-\n dependent manner.\n \u003cp\u003e\n The call \u003ccode\u003eSystem.loadLibrary(name)\u003c/code\u003e is effectively\n equivalent to the call\n \u003cblockquote\u003e\u003cpre\u003e\n Runtime.getRuntime().loadLibrary(name)\n \u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"libname","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"mapLibraryName","comment":"Maps a library name into a platform-specific string representing\n a native library.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.lang.String)","flatSignature":"(String)","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":true,"parameters":[{"name":"libname","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}